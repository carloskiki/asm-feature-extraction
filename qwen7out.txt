############
```assembly
loc_1115C:
    ADR R12, 0x11164
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(raise_ptr - 0x55164)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:undefined",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (raise_ptr)",
  "address-or-offset-constant:0x11164",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:raise_ptr",
  "inferred-algorithm:error-handling-or-exception-raising"
]
```<|im_end|>
############
```assembly
loc_56878:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_56924:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_24604:
    LDR R3, [R0]
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R4, R0
    LDR R0, [R3,#0x30]
    STR R1, [SP,#0x30+var_2C]
    BLX strlen
    LDR R5, [R4,#4]
    LDR R3, [R5]
    CMP R3, #2
    MOV R7, R0
    BEQ loc_24716
loc_24620:
    CMP R3, #0
    BNE.W loc_247B0
loc_24626:
    LDR R0, [R5,#4]
    CMP R0, #0
    BEQ.W loc_247CE
loc_2462E:
    BLX strlen
    MOV R11, R0
    LDR R0, [R5,#0x10]
    BL sub_1F158
    ADD.W R8, R7, R11
    MOVS R1, #1
    ADD.W R8, R8, #0xD
    ADD.W R9, R0, #0xE
    ADDS R0, #7
    IT 
    MOVMI R0, R9
    MOV.W R9, R0,ASR#3
    ADD.W R5, R9, #0xFFFFFFFF
    LSL.W R10, R9, R1
    ADD R8, R10
    MOV R0, R8
    BL sub_193B8
    ASRS R2, R7, #0x18
    ASRS R3, R7, #0x10
    STRB R7, [R0,#3]
    MOV R6, R0
    STRB R2, [R0]
    MOV R2, R7
    STRB R3, [R0,#1]
    ASRS R3, R7, #8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR R1, [R4]
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    MOV.W R1, R11,ASR#24
    MOV.W R3, R11,ASR#16
    ADDS R2, R0, R7
    STRB R1, [R0,R7]
    STRB R3, [R2,#1]
    MOV.W R3, R11,ASR#8
    STRB.W R11, [R2,#3]
    STRB R3, [R2,#2]
    ADDS R3, R2, #4
    LDR R1, [R4,#4]
    MOV R2, R11
    MOV R0, R3
    LDR R1, [R1,#4]
    BLX memcpy
    ADD.W R2, R10, #1
    ASRS R7, R2, #0x18
    ADD.W R1, R0, R11
    MOV R3, R0
    STRB.W R7, [R3,R11]
    MOVS R0, #4
    ASRS R3, R2, #0x10
    STRB R2, [R1,#3]
    STRB R3, [R1,#1]
    ASRS R2, R2, #8
    STRB R0, [R1,#4]
    ADDS R7, R1, #5
    STRB R2, [R1,#2]
    CMP.W R9, #0
    BEQ loc_246FE
loc_246CC:
    MOV R11, R5
    MOV R10, R7
loc_246D0:
    MOV R1, R11
    LDR R0, [R4,#8]
    BL sub_1F20C
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_246D0
loc_246E6:
    ADD R7, R9
    MOV R11, R7
loc_246EA:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R11],#1
    BNE loc_246EA
loc_246FC:
    ADD R7, R9
loc_246FE:
    ADD.W R3, R6, R8
    CMP R7, R3
    ITTT 
    LDREQ R3, [SP,#0x30+var_2C]
    MOVEQ R0, R6
    STREQ.W R8, [R3]
    BNE loc_247B4
loc_24710:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_24716:
    LDR R3, [R5,#0xC]
    MOV.W R10, R3,LSR#3
    CMP.W R10, #1
    BLS loc_247B0
loc_24722:
    ADD.W R8, R0, #8
    MOVS R1, #1
    ADD R8, R10
    ADD.W R9, R10, #0xFFFFFFFF
    MOVS R5, #0
    MOV R0, R8
    BL sub_193B8
    ASRS R1, R7, #0x18
    ASRS R2, R7, #0x10
    STRB R7, [R0,#3]
    ADDS R3, R0, #4
    STRB R2, [R0,#1]
    ASRS R2, R7, #8
    STRB R1, [R0]
    MOV R6, R0
    STRB R2, [R0,#2]
    MOV R2, R7
    LDR R1, [R4]
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    MOV.W R1, R10,ASR#24
    MOV.W R3, R10,ASR#8
    ADDS R2, R0, R7
    STRB R1, [R0,R7]
    ADD.W R11, R2, #4
    MOV.W R1, R10,ASR#16
    STRB.W R10, [R2,#3]
    MOV R7, R11
    STRB R1, [R2,#1]
    STRB R3, [R2,#2]
loc_24772:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    ADDS R5, #1
    CMP R9, R5
    STRB.W R0, [R7],#1
    BNE loc_24772
loc_24784:
    MOV R1, R9
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    MOVS R1, #0
    ADD.W R7, R11, R9
    ADDS R7, #1
    AND.W R0, R0, #0x7F
    STRB.W R0, [R11,R9]
    LDR R0, [R4,#8]
    BL sub_1F234
    LDRB.W R3, [R11,R9]
    ORR.W R0, R3, R0,LSL#7
    STRB.W R0, [R11,R9]
    B loc_246FE
loc_247B0:
    MOVS R0, #0
    B loc_24710
loc_247B4:
    MOVW R1, #0xFCBC
    MOVW R0, #0xF568
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaPublicBlo
    MOVW R2, #0x777
    BLX __assert_fail
loc_247CE:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFCC8
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaPublicBlo
    MOVW R2, #0x756
    BLX __assert_fail
```
Output: R1, R0, R10
    MOV R3, R0
    STRB W3, [R3,R11]
    MOVS R0, #4
    ASRS R3, R2, #0x10
    STRB R2, [R1,#3]
    STRB R3, [R1,#1]
    ASRS R2, R2, #8
    STRB R0, [R1,#4]
    ADDS R7, R1, #5
    STRB R2, [R1,#2]
    CMP.W R9, #0
    BEQ loc_2476E
loc_24744:
    MOV R11, R5
    MOV R10, R7
loc_24748:
    MOV R1, R11
    LDR R0, [R4,#8]
    BL sub_1F20C
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_24748
loc_24754:
    ADD R7, R9
    MOV R11, R7
loc_24758:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R11],#1
    BNE loc_24758
loc_24764:
    ADD R7, R9
loc_2476E:
    ADD.W R3, R6, R8
    CMP R7, R3
    ITTT 
    LDREQ R3, [SP,#0x30+var_2C]
    MOVEQ R0, R6
    STREQ.W R8, [R3]
    BNE loc_247B4
loc_247B0:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_247B4:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_5688C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_27F90:
    LDR R3, [R2]
    CMP R3, #3
    BGT loc_27F9A
loc_27F96:
    MOVS R0, #0
    BX LR
loc_27F9A:
    PUSH.W {R4-R10,LR}
    MOV R5, R2
    LDR R2, [R1]
    MOV R8, R1
    LDR R4, [R0,#0x38]
    MOV R9, R0
    LDRB R3, [R2,#1]
    LDRB R6, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R6,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    CMP R0, #0
    BLT loc_28034
loc_27FC4:
    LDR R3, [R5]
    LDR.W R2, [R8]
    SUBS R3, #4
    STR R3, [R5]
    CMP R0, R3
    ADD.W R2, R2, #4
    IT 
    STRGT.W R2, [R8]
    BGT loc_28034
loc_27FDC:
    SUBS R3, R3, R0
    ADD R0, R2
    STR.W R0, [R8]
    STR R3, [R5]
    CBZ R2, loc_28034
loc_27FE8:
    LDR R3, [R4]
    BLX R3
    LDR R6, [R0]
    MOV R7, R0
    CMP R6, #0
    BNE.W loc_281D6
loc_27FF6:
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    STRB R6, [R0,#0x14]
    MOV R4, R0
    LDR R3, [R5]
    ADD.W R10, R0, #4
    STR.W R9, [R0]
    CMP R3, #3
    STR R7, [R0,#4]
    STR R6, [R0,#8]
    STR R6, [R0,#0xC]
    STR R6, [R0,#0x10]
    BGT loc_2803A
loc_28018:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_28020
loc_2801C:
    BL sub_1E6B0
loc_28020:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_28028
loc_28024:
    BL sub_1E6B0
loc_28028:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R4-R10,PC}
loc_28034:
    MOVS R0, #0
    POP.W {R4-R10,PC}
loc_2803A:
    LDR.W R2, [R8]
    LDRB R3, [R2,#1]
    LDRB R6, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R6,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_280B2
loc_2805A:
    LDR R2, [R5]
    LDR.W R3, [R8]
    SUBS R2, #4
    STR R2, [R5]
    CMP R1, R2
    ADD.W R0, R3, #4
    IT 
    STRGT.W R0, [R8]
    BGT loc_280B2
loc_28072:
    SUBS R2, R2, R1
    ADDS R3, R0, R1
    STR.W R3, [R8]
    STR R2, [R5]
    CBZ R0, loc_280B2
loc_2807E:
    MOV R2, R10
    BL sub_25510
    CBZ R0, loc_280B2
loc_28086:
    LDR R0, [R4,#8]
    MOVS R3, #0
    STR R3, [R4,#0x18]
    CBZ R0, loc_280BA
loc_2808E:
    LDR R3, [R4,#0xC]
    CBZ R3, loc_280B6
loc_28092:
    LDR R1, [R7,#0x10]
    BL sub_1F358
    CMP R0, #0
    BGE loc_280B2
loc_2809C:
    LDR R1, [R7,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1F358
    CMP R0, #0
    BGE loc_280B2
loc_280A8:
    LDR R3, [R5]
    CMP R3, #3
    BGT loc_280C6
loc_280AE:
    MOVS R3, #0
    STR R3, [R4,#0x18]
loc_280B2:
    LDR R0, [R4,#8]
    CBZ R0, loc_280BA
loc_280B6:
    BL sub_1E6B0
loc_280BA:
    LDR R0, [R4,#0xC]
    CMP R0, #0
    BEQ loc_28018
loc_280C0:
    BL sub_1E6B0
    B loc_28018
loc_280C6:
    LDR.W R2, [R8]
    LDRB R3, [R2,#1]
    LDRB R6, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R6,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_280AE
loc_280E6:
    LDR R3, [R5]
    LDR.W R2, [R8]
    SUBS R3, #4
    STR R3, [R5]
    CMP R1, R3
    ADD.W R0, R2, #4
    IT 
    STRGT.W R0, [R8]
    BGT loc_280AE
loc_280FE:
    SUBS R3, R3, R1
    ADDS R6, R0, R1
    STR.W R6, [R8]
    STR R3, [R5]
    CMP R0, #0
    BEQ loc_280AE
loc_2810C:
    LDRSB.W R3, [R2,#4]
    CMP R3, #0
    BLT loc_280AE
loc_28114:
    BL sub_1EDA8
    STR R0, [R4,#0x18]
    CMP R0, #0
    BEQ loc_280B2
loc_2811E:
    LDR R2, [R4,#4]
    LDR R3, [R2]
    CMP R3, #0
    BEQ loc_281C8
loc_28126:
    CMP R3, #2
    BNE loc_280B2
loc_2812A:
    MOV R1, R2
    BL sub_27AEC
    MOV R5, R0
loc_28132:
    CMP R5, #0
    BEQ loc_280B2
loc_28136:
    LDR R1, [R5,#4]
    LDR R0, [R4,#8]
    BL sub_1F358
    CBNZ R0, loc_28176
loc_28140:
    LDR R1, [R5,#8]
    LDR R0, [R4,#0xC]
    BL sub_1F358
    CBNZ R0, loc_28176
loc_2814A:
    LDR R3, [R5,#4]
    STR R0, [R5]
    CBZ R3, loc_28156
loc_28150:
    MOV R0, R3
    BL sub_1E6B0
loc_28156:
    LDR R0, [R5,#8]
    CBZ R0, loc_2815E
loc_2815A:
    BL sub_1E6B0
loc_2815E:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_28166
loc_28162:
    BL sub_1E6B0
loc_28166:
    MOVS R3, #0
    MOV R0, R5
    STRB R3, [R5,#0x10]
    BL sub_19494
    MOV R0, R4
    POP.W {R4-R10,PC}
loc_28176:
    LDR R0, [R4,#8]
    CBZ R0, loc_2817E
loc_2817A:
    BL sub_1E6B0
loc_2817E:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_28186
loc_28182:
    BL sub_1E6B0
loc_28186:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2818E
loc_2818A:
    BL sub_1E6B0
loc_2818E:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_28196
loc_28192:
    BL sub_1E6B0
loc_28196:
    MOV R0, R4
    BL sub_19494
    LDR R0, [R5,#4]
    MOVS R3, #0
    STR R3, [R5]
    CBZ R0, loc_281A8
loc_281A4:
    BL sub_1E6B0
loc_281A8:
    LDR R0, [R5,#8]
    CBZ R0, loc_281B0
loc_281AC:
    BL sub_1E6B0
loc_281B0:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_281B8
loc_281B4:
    BL sub_1E6B0
loc_281B8:
    MOVS R4, #0
    MOV R0, R5
    STRB R4, [R5,#0x10]
    BL sub_19494
    MOV R0, R4
    POP.W {R4-R10,PC}
loc_281C8:
    MOV R1, R0
    ADD.W R0, R2, #0x20
    BL sub_264F8
    MOV R5, R0
    B loc_28132
loc_281D6:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD98
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaOpensshCr
    MOVW R2, #0x854
    BLX __assert_fail
```
Output:DR W0, [R4]
    BLX W0
    LDR R6, [R0]
    MOV R7, R0
    CMP R6, #0
    BNE.W loc_281D6
loc_280D4:
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    STRB R6, [R0,#0x14]
    MOV R4, R0
    LDR R3, [R5]
    ADD.W R10, R0, #4
    STR.W R9, [R0]
    CMP R3, #3
    STR R7, [R0,#4]
    STR R6, [R0,#8]
    STR R6, [R0,#0xC]
    STR R6, [R0,#0x10]
    BGT loc_2803A
loc_28102:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2810A
loc_28106:
    BL sub_1E6B0
loc_2810A:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_28112
loc_28110:
    BL sub_1E6B0
loc_28112:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R4-R10,PC}
```
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
1
```<|im_end|>
############
```assembly
loc_1F358:
    LDR R2, [R0]
    LDR R3, [R1]
    CMP R2, #1
    PUSH {R4-R6,LR}
    MOV R4, R3
    BEQ loc_1F3CC
loc_1F364:
    CMP R3, #1
    BEQ loc_1F3BE
loc_1F368:
    CBZ R2, loc_1F372
loc_1F36A:
    LDR.W R3, [R0,R2,LSL#2]
    CMP R3, #0
    BEQ loc_1F3F2
loc_1F372:
    CBZ R4, loc_1F37A
loc_1F374:
    LDR.W R3, [R1,R4,LSL#2]
    CBZ R3, loc_1F3D8
loc_1F37A:
    CMP R2, R4
    MOV R3, R2
    IT 
    MOVLT R3, R4
    CBNZ R3, loc_1F39E
loc_1F384:
    B loc_1F3C8
loc_1F386:
    CMP R4, R3
    LDR.W R5, [R0,R3,LSL#2]
    BLT loc_1F3B4
loc_1F38E:
    LDR.W R6, [R1,R3,LSL#2]
    CMP R5, R6
    BCC loc_1F3AE
loc_1F396:
    CMP R5, R6
    BHI loc_1F3BA
loc_1F39A:
    SUBS R3, #1
    BEQ loc_1F3C8
loc_1F39E:
    CMP R2, R3
    BGE loc_1F386
loc_1F3A2:
    CMP R4, R3
    BLT loc_1F39A
loc_1F3A6:
    LDR.W R5, [R1,R3,LSL#2]
    CMP R5, #0
    BEQ loc_1F39A
loc_1F3AE:
    MOV.W R0, #0xFFFFFFFF
    POP {R4-R6,PC}
loc_1F3B4:
    MOVS R6, #0
    CMP R5, R6
    BLS loc_1F39A
loc_1F3BA:
    MOVS R0, #1
    POP {R4-R6,PC}
loc_1F3BE:
    LDR R4, [R1,#4]
    ADDS R4, #0
    IT 
    MOVNE R4, #1
    B loc_1F368
loc_1F3C8:
    MOV R0, R3
    POP {R4-R6,PC}
loc_1F3CC:
    LDR.W R2, [R0,R2,LSL#2]
    ADDS R2, #0
    IT 
    MOVNE R2, #1
    B loc_1F364
loc_1F3D8:
    MOVW R1, #0xE76C
    MOVW R0, #0xE840
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumCmp
    MOVW R2, #0x665
    BLX __assert_fail
loc_1F3F2:
    MOVW R1, #0xE76C
    MOVW R0, #0xE824
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumCmp
    MOVW R2, #0x664
    BLX __assert_fail
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "loop-detection",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operations:AND-clear",
  "bitwise-operations:XOR",
  "bitwise-mask-values:0xFFFFFFFF",
  "bitwise-mask-values:0xE76C",
  "bitwise-mask-values:0xE840",
  "bitwise-mask-values:0xE824",
  "magic-number:0x665",
  "magic-number:0x664",
  "address-or-offset-constant:aBignumCmp",
  "inferred-algorithm:data-comparison",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:assertion-failure",
  "inferred-algorithm:conditional-execution-or-dispatch"
]
```<|im_end|>
############
```assembly
loc_36AEC:
    PUSH.W {R3-R11,LR}
    MOVW R5, #0xAA04
    RSB.W R7, R0, #1
    MOVT.W R5, #3
    MOV R4, R0
    MOV R6, R1
    MOV.W R11, #0
loc_36B04:
    LDRB.W R0, [R4,R11]
    MOV R8, R11
    ADD.W R9, R4, R11
    CMP R0, #0x2F
    IT 
    CMPNE R0, #0
    BEQ loc_36B2E
loc_36B16:
    ADD.W R3, R11, #1
    ADD R3, R4
loc_36B1C:
    SUB.W R8, R3, R4
    MOV R9, R3
    LDRB.W R0, [R3],#1
    CMP R0, #0x2F
    IT 
    CMPNE R0, #0
    BNE loc_36B1C
loc_36B2E:
    CMP.W R8, #0
    MOV R11, R8
    BLE loc_36B56
loc_36B36:
    MOV R2, R4
    MOV R1, R8
    MOV R0, R5
    BL sub_18C24
    MOV R1, R6
    MOV R10, R0
    BLX mkdir
    CMP R0, #0
    BLT loc_36B72
loc_36B4C:
    MOV R0, R10
    BL sub_19494
    LDRB.W R0, [R9]
loc_36B56:
    CBZ R0, locret_36B9E
loc_36B58:
    LDRB.W R3, [R9]
    CMP R3, #0x2F
    BNE loc_36B04
loc_36B60:
    ADD.W R2, R4, R8
loc_36B64:
    ADDS R3, R7, R2
    LDRB.W R1, [R2,#1]!
    CMP R1, #0x2F
    BEQ loc_36B64
loc_36B6E:
    MOV R11, R3
    B loc_36B04
loc_36B72:
    BLX __errno_location
    LDR R0, [R0]
    CMP R0, #0x11
    BEQ loc_36B4C
loc_36B7C:
    BLX strerror
    MOV R1, R10
    MOV R2, R0
    MOV R0, #0x45280
    BL sub_18C24
    MOV R4, R0
    MOV R0, R10
    BL sub_19494
    MOV R0, R4
    POP.W {R3-R11,PC}
loc_36B9E:
    POP.W {R3-R11,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:string-pointer",
  "arg1-type:integer",
  "arg2-type:string-pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_18C24)",
  "external-call-type:data-processing-helper (mkdir)",
  "external-call-type:data-processing-helper (__errno_location)",
  "external-call-type:data-processing-helper (strerror)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "byte-order-processing:reverse",
  "bitwise-operation-shift-left",
  "bitwise-operation-shift-right",
  "bitwise-operation-or",
  "bitwise-operation-and-clear",
  "bitwise-operation-xor",
  "bitwise-mask-values-present:0x2F",
  "bitwise-mask-values-present:0x11",
  "address-or-offset-constant:0xAA04",
  "address-or-offset-constant:0x3",
  "address-or-offset-constant:sub_18C24",
  "address-or-offset-constant:mkdir",
  "address-or-offset-constant:__errno_location",
  "address-or-offset-constant:strerror",
  "inferred-algorithm:path-processing",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:directory-creation",
  "inferred-algorithm:file-name-parsing"
]
```<|im_end|>
############
```assembly
loc_568F0:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2F27C:
    PUSH {R4,LR}
    MOVS R1, #0x6C
    MOV R4, R0
    MOVS R0, #1
    BL sub_193B8
    MOV R1, R4
    MOVS R2, #0x6C
    BLX memcpy
    POP {R4,PC}
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x6C",
  "fixed-value-assignment:1",
  "inferred-algorithm:string-copy-or-cloning",
  "inferred-algorithm:buffer-management"
]
```<|im_end|>
############
```assembly
loc_2E9B4:
    MOV R3, #0x3F57C
    PUSH.W {R4-R10,LR}
    MOV R7, R0
    LDR.W R8, [R1,#0xC]
    LDRH R2, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    LDR R5, [R1,#8]
    STRH R2, [R0]
    STRB R3, [R0,#2]
    MOV R0, R8
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_2EA94
loc_2E9EA:
    MOVW R4, #0x3A18
    ADD.W R10, R7, #1
    MOVT.W R4, #4
    MOV R9, R6
loc_2E9F8:
    MOV.W R1, R9,ASR#1
    MOV R0, R8
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R4
    LDRB.W R3, [R0,#0x50]
    STRB.W R3, [R10,#1]!
    BNE loc_2E9F8
loc_2EA24:
    MOV R2, #0x3F580
    ADDS R3, R6, #3
    LDR R0, [R2]
    STR R0, [R7,R3]
    MOV R0, R5
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE loc_2EA98
loc_2EA52:
    ADD.W R10, R6, #5
    MOV R9, R8
    ADD R10, R7
loc_2EA5A:
    MOV.W R1, R9,ASR#1
    MOV R0, R5
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R4
    LDRB.W R3, [R0,#0x50]
    STRB.W R3, [R10,#1]!
    BNE loc_2EA5A
loc_2EA86:
    ADD R6, R7
    MOVS R3, #0
    ADD R8, R6
    STRB.W R3, [R8,#7]
    POP.W {R4-R10,PC}
loc_2EA94:
    MOVS R6, #0
    B loc_2E9EA
loc_2EA98:
    MOV.W R8, #0
    B loc_2EA52
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-variable",
  "loop-counter-patterns:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1F158)",
  "external-call-type:unspecified-helper (sub_1F20C)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift",
  "byte-level-operations:bitwise-and",
  "byte-level-operations:bitwise-or",
  "byte-level-operations:arithmetic-shift-right",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:0xFFFFFFFF",
  "fixed-value-comparison:-1",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:6",
  "fixed-value-assignment:3",
  "fixed-value-assignment:0x3F57C",
  "fixed-value-assignment:0x3A18",
  "fixed-value-assignment:0x3F580",
  "address-or-offset-constant:0x3F57E",
  "address-or-offset-constant:0x50",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:array-indexing",
  "inferred-algorithm:resource-management",
  "inferred-algorithm:control-flow-analysis"
]
```<|im_end|>
############
```assembly
loc_285B0:
    CMP.W R0, #0x180
    PUSH {R4,LR}
    BEQ loc_285F4
loc_285B8:
    MOVW R3, #0x209
    CMP R0, R3
    BEQ loc_285E6
loc_285C0:
    CMP.W R0, #0x100
    IT 
    MOVNE R3, #0
    BEQ loc_285CE
loc_285CA:
    MOV R0, R3
    POP {R4,PC}
loc_285CE:
    LDR R0, =off_3FB34
    MOV R3, #0x24FDD
    STR R0, [R2]
loc_285DA:
    MOV R4, R1
    BLX R3
    MOVS R3, #1
    STR R0, [R4]
    MOV R0, R3
    POP {R4,PC}
loc_285E6:
    LDR R0, =off_3FBAC
    MOV R3, #0x24CF9
    STR R0, [R2]
    B loc_285DA
loc_285F4:
    LDR R0, =off_3FB70
    MOV R3, #0x25085
    STR R0, [R2]
    B loc_285DA
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (BLX R3)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0x180",
  "fixed-value-comparison:0x209",
  "fixed-value-comparison:0x100",
  "fixed-value-comparison:0x24FDD",
  "fixed-value-comparison:0x24CF9",
  "fixed-value-comparison:0x25085",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "address-or-offset-constant:off_3FB34",
  "address-or-offset-constant:off_3FBAC",
  "address-or-offset-constant:off_3FB70",
  "address-or-offset-constant:0x25085",
  "address-or-offset-constant:0x24CF9",
  "address-or-offset-constant:0x24FDD",
  "inferred-algorithm:conditional-data-selection",
  "inferred-algorithm:register-based-data-flow",
  "inferred-algorithm:memory-write-through-pointer"
]
```<|im_end|>
############
```assembly
loc_1F258:
    CMP R1, #0
    PUSH {R4,LR}
    BLT loc_1F266
loc_1F25E:
    LDR R3, [R0]
    CMP.W R1, R3,LSL#5
    BLT loc_1F26A
loc_1F266:
    CBNZ R2, loc_1F290
loc_1F268:
    POP {R4,PC}
loc_1F26A:
    ASRS R3, R1, #5
    MOVS R4, #1
    ADD R3, R4
    AND.W R1, R1, #0x1F
    LSL.W R1, R4, R1
    LDR.W R4, [R0,R3,LSL#2]
    CBNZ R2, loc_1F288
loc_1F27E:
    BIC.W R1, R4, R1
    STR.W R1, [R0,R3,LSL#2]
    POP {R4,PC}
loc_1F288:
    ORRS R1, R4
    STR.W R1, [R0,R3,LSL#2]
    POP {R4,PC}
loc_1F290:
    BLX abort
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:boolean",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "bitwise-operations-present",
  "bitwise-shift-left:LSL#5",
  "bitwise-shift-right:ASRS",
  "bitwise-and:AND.W",
  "bitwise-or:ORRS",
  "bitwise-not:BIC.W",
  "address-or-offset-constant:abort",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:4",
  "memory-write-to-input-parameter-offset:0",
  "memory-write-to-input-parameter-offset:4",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:abort-or-terminate"
]
```<|im_end|>
############
```assembly
loc_1FD18:
    PUSH.W {R3-R9,LR}
    MOVW R3, #0xFFFE
    LDR R4, [R1]
    MOVT.W R3, #0x3FF
    LDR R2, [R0]
    CMP R4, R2
    IT 
    MOVLT R4, R2
    CMP R4, R3
    BHI loc_1FDC8
loc_1FD32:
    ADD.W R8, R4, #1
    MOV R6, R0
    MOV R7, R1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R9, R0
    BLX memset
    STR.W R4, [R9]
    CBZ R4, loc_1FDA8
loc_1FD54:
    MOVS R0, #1
    MOV LR, R9
    MOV R3, R0
    MOVS R2, #0
loc_1FD5C:
    LDR R1, [R6]
    MOVS R5, #0
    CMP R1, R3
    LDR R1, [R7]
    ITE 
    LDRGE.W R4, [R6,R3,LSL#2]
    MOVLT R4, #0
    CMP R1, R3
    ITET 
    LDRGE.W R1, [R7,R3,LSL#2]
    MOVLT.W R1, #0xFFFFFFFF
    MVNGE R1, R1
    ADDS R4, R4, R0
    ADC.W R5, R5, #0
    ADDS R4, R4, R1
    ADC.W R5, R5, #0
    CMP R4, #0
    IT 
    CMPNE R3, R2
    STR.W R4, [LR,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R8
    MOV R0, R5
    BNE loc_1FD5C
loc_1FD9C:
    STR.W R2, [R9]
    CBZ R5, loc_1FDB2
loc_1FDA2:
    MOV R0, R9
    POP.W {R3-R9,PC}
loc_1FDA8:
    MOV R0, R9
    STR.W R4, [R9]
    POP.W {R3-R9,PC}
loc_1FDB2:
    ADDS R1, R2, #1
    MOV R0, R9
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    MOV R0, R5
    POP.W {R3-R9,PC}
loc_1FDC8:
    BL sub_115CC
loc_1FDCC:
    PUSH {R4-R6,LR}
    MOV R6, R0
    LDR R0, [R0]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    CBZ R0, loc_1FE42
loc_1FDDC:
    LDR R2, [R6]
    MOV R4, R0
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R2, [R4]
    LDR.W R1, [R6,R2,LSL#2]
    LSLS R5, R2, #2
    ADDS R3, R6, R5
    CBNZ R1, loc_1FE14
loc_1FDF6:
    CMP R2, #0
    BLE loc_1FE3E
loc_1FDFA:
    MOV R0, #0xFFFFFFFC
    SUBS R0, R0, R6
    B loc_1FE08
loc_1FE06:
    CBZ R2, loc_1FE3E
loc_1FE08:
    ADDS R5, R0, R3
    LDR.W R1, [R3,#-4]!
    SUBS R2, #1
    CMP R1, #0
    BEQ loc_1FE06
loc_1FE14:
    CMP R2, #0
    BLE loc_1FE3E
loc_1FE18:
    CMP R1, #1
    MOV.W R3, #1
    BLS loc_1FE28
loc_1FE20:
    LSLS R3, R3, #1
    ADDS R3, #1
    CMP R3, R1
    BCC loc_1FE20
loc_1FE28:
    CMP R2, #1
    STR R3, [R4,R5]
    BEQ loc_1FE3E
loc_1FE2E:
    ADD.W R2, R2, #0x40000000
    MOVS R1, #0xFF
    SUBS R2, #1
    ADDS R0, R4, #4
    LSLS R2, R2, #2
    BLX memset
loc_1FE3E:
    MOV R0, R4
    POP {R4-R6,PC}
loc_1FE42:
    BLX abort
```
Output:```json
[
  "return-type:void",
  "Argument-count:2",
  "Arg0-type:pointer",
  "Arg1-type:pointer",
  "Calling-convention-hint:callee-saves-registers",
  "Calling-convention-hint:registers-for-args",
  "Stack-arg-use:true",
  "Standard-calling-convention-used",
  "Stack-frame-management-present",
  "Explicit-stack-allocation-size:0x10",
  "Callee-saves-registers-present",
  "Standard-function-return",
  "Conditional-branching-on-input",
  "External-function-calls-present",
  "External-call-type:unspecified-helper (sub_193B8)",
  "External-call-type:unspecified-helper (memset)",
  "External-call-type:unspecified-helper (memcpy)",
  "External-call-type:unspecified-helper (abort)",
  "Integer-size-hint:32-bit",
  "Memory-read-from-input-parameter-offset:0",
  "Memory-write-to-stack-offset",
  "Memory-read-from-stack-offset",
  "Fixed-value-comparison:0",
  "Fixed-value-assignment:0",
  "Address-or-offset-constant:0xFFFE",
  "Address-or-offset-constant:0x3FF",
  "Address-or-offset-constant:0xFFFFFFFC",
  "Address-or-offset-constant:0xFF",
  "Bitwise-operation:AND-clear",
  "Bitwise-operation:XOR",
  "Bitwise-operation:Shift-left",
  "Bitwise-operation:Shift-right",
  "Inferred-algorithm:data-processing-helper",
  "Inferred-algorithm:error-or-alternative-path",
  "Inferred-algorithm:unspecified-helper"
]
```<|im_end|>
############
```assembly
loc_1BFAC:
    MOVS R2, #0x18
    B loc_1BC50
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:none",
  "calling-convention-hint:no-stack-allocation",
  "stack-arg-use:false",
  "magic-number:0x18",
  "inferred-algorithm:constant-setting"
]
```<|im_end|>
############
```assembly
loc_56858:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_38A04:
    PUSH.W {R3-R9,LR}
    MOV R7, R0
    LDR R6, =(off_55F08 - 0x38A16)
    MOV R8, R1
    LDR R5, =(off_55F04 - 0x38A1C)
    MOV R9, R2
    ADD R6, PC
    BLX .init_proc
    ADD R5, PC
    SUBS R6, R6, R5
    ASRS R6, R6, #2
    BEQ locret_38A34
loc_38A20:
    MOVS R4, #0
loc_38A22:
    ADDS R4, #1
    LDR.W R3, [R5],#4
    MOV R2, R9
    MOV R1, R8
    MOV R0, R7
    BLX R3
    CMP R4, R6
    BNE loc_38A22
loc_38A34:
    POP.W {R3-R9,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xA",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (.init_proc)",
  "external-call-type:unspecified-helper (BLX R3)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:off_55F08",
  "address-or-offset-constant:off_55F04",
  "address-or-offset-constant:.init_proc",
  "loop-counter-pattern:increment-by-one",
  "loop-control-flow:conditional-loop",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:array-processing-or-loop"
]
```<|im_end|>
############
```assembly
loc_2870C:
    PUSH {R3-R5,LR}
    MOV R5, R1
    MOV R4, R0
    MOV R2, R0
    ADDS R1, R0, #4
    MOV R0, R5
    BL sub_28610
    CBNZ R0, loc_28722
loc_2871E:
    MOVS R0, #0
    POP {R3-R5,PC}
loc_28722:
    MOV R0, R5
    BL sub_1E6C8
    MOV R5, R0
    CMP R0, #0
    BEQ loc_2871E
loc_2872E:
    MOV R3, #0x56170
    MOV R1, R0
    LDR R0, [R3]
    BL sub_1F410
    STR R0, [R4,#0x18]
    MOV R0, R5
    BL sub_1E6B0
    LDR R0, [R4,#0x18]
    CMP R0, #0
    BEQ loc_2871E
loc_2874C:
    LDR R1, [R4,#4]
    BL sub_281F4
    MOV R5, R0
    CBZ R0, loc_2876A
loc_28756:
    LDR R2, [R0,#4]
    MOVS R1, #0
    LDR R3, [R0,#8]
    STR R1, [R4,#0x10]
    STR R2, [R4,#8]
    STR R3, [R4,#0xC]
    BL sub_19494
    MOVS R0, #1
    POP {R3-R5,PC}
loc_2876A:
    LDR R0, [R4,#0x18]
    BL sub_1E6B0
    STR R5, [R4,#0x18]
    MOV R0, R5
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-function-result",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_28610)",
  "external-call-type:unspecified-helper (sub_1E6C8)",
  "external-call-type:unspecified-helper (sub_1F410)",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "external-call-type:unspecified-helper (sub_281F4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x56170",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:conditional-data-update"
]
```<|im_end|>
############
```assembly
loc_1E548:

```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_56944:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_369B8:
    PUSH {R3-R5,LR}
    MOVS R1, #4
    LDR R5, [R0]
    MOVS R0, #1
    BL sub_193B8
    MOV R4, R0
    MOV R0, R5
    BL sub_18A88
    STR R0, [R4]
    MOV R0, R4
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:4",
  "fixed-value-assignment:1",
  "memory-read-from-input-parameter-offset:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "inferred-algorithm:data-manipulation-or-processing",
  "inferred-algorithm:indirect-function-calls",
  "inferred-algorithm:memory-update-or-storage"
]
```<|im_end|>
############
```assembly
loc_56898:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_22B60:
    PUSH {R4-R7,LR}
    MOV R4, R0
    LDRB R6, [R0,#5]
    MOVW R7, #0x6190
    LDRB.W LR, [R0,#4]
    MOVT.W R7, #5
    LDRB R3, [R0,#1]
    MOV R5, R1
    LDRB R0, [R0]
    LSLS R6, R6, #0x10
    ORR.W R6, R6, LR,LSL#24
    LDRB.W LR, [R4,#3]
    LSLS R3, R3, #0x10
    LDRB.W R12, [R4,#6]
    LDRB R1, [R4,#7]
    ORR.W R3, R3, R0,LSL#24
    LDRB R0, [R4,#2]
    ORR.W R3, R3, LR
    LDR.W LR, [R7]
    SUB SP, SP, #0x1A4
    ORRS R1, R6
    MOV R6, R2
    ORR.W R1, R1, R12,LSL#8
    ORR.W R0, R3, R0,LSL#8
    ADD R2, SP, #0x1B8+var_1B4
    STR.W LR, [SP,#0x1B8+var_1C]
    BL sub_20D9C
    LDRB R2, [R4,#0xD]
    LDRB R1, [R4,#0xC]
    LDRB R3, [R4,#9]
    LDRB R0, [R4,#8]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#0xF]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#0xE]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#0xB]
    LDRB R0, [R4,#0xA]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_12C
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    LDRB R2, [R4,#5]
    LDRB R1, [R4,#4]
    LDRB R3, [R4,#1]
    LDRB R0, [R4]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#7]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#6]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#3]
    LDRB R0, [R4,#2]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_A4
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    ADD R2, SP, #0x1B8+var_1B4
    MOV R1, R6
    MOV R0, R5
    BL sub_22278
    ADD R2, SP, #0x1B8+var_12C
    MOV R1, R6
    MOV R0, R5
    BL sub_22384
    ADD R2, SP, #0x1B8+var_A4
    MOV R1, R6
    MOV R0, R5
    BL sub_22278
    ADD R0, SP, #0x1B8+var_1B4
    MOV.W R1, #0x198
    BL sub_194E4
    LDR R2, [SP,#0x1B8+var_1C]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_22C50
loc_22C4C:
    ADD SP, SP, #0x1A4
    POP {R4-R7,PC}
loc_22C50:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1A4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_20D9C)",
  "external-call-type:data-processing-helper (sub_22278)",
  "external-call-type:data-processing-helper (sub_22384)",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:LSL",
  "byte-level-operations:ORR",
  "bitwise-mask-values:0x6190",
  "bitwise-mask-values:0x198",
  "memory-access-patterns:read-write-memory-mapping",
  "inferred-algorithm:data-packaging-or-serialization",
  "inferred-algorithm:loop-based-data-processing",
  "inferred-algorithm:conditional-data-handling",
  "inferred-algorithm:safe-guard-check",
  "inferred-algorithm:call-back-chain-processing"
]
```<|im_end|>
############
```assembly
loc_11350:
    ADR R12, 0x11358
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strerror_ptr - 0x55358)]!
```
Output:```json
[
  "return-type:undefined",
  "argument-count:0",
  "calling-convention-hint:undefined",
  "stack-arg-use:false",
  "standard-calling-convention-used:false",
  "stack-frame-management-present:false",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-present:false",
  "standard-function-return:not-applicable",
  "external-function-calls-present:true",
  "external-call-type:error-or-alternative-path (strerror_ptr)",
  "address-or-offset-constant:0x11358",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strerror_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_11480:
    BX PC
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "unconditional-jumps-present",
  "unconditional-jump-type:return"
]
```<|im_end|>
############
```assembly
loc_16C84:
    LDR R0, [R6,#8]
    ADD.W R7, SP, #0x98+n+3
    BLX strlen
    LDR R3, [R6]
    MOV R4, R0
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR R3, [SP,#0x98+n]
    MOVS R1, #1
    ADDS R3, #0xBC
    ADD R3, R8
    ADD R3, R4
    ADD R3, R0
    STR R3, [SP,#0x98+var_84]
    MOV R0, R3
    BL sub_193B8
    MOV R3, #0x3A00C
    MOV R5, R0
    LDM R3!, {R0-R2}
    LDRH R4, [R3]
    LDRB R3, [R3,#(aOpensshKeyV1+0xE - 0x3A018)]
    STR R0, [R5]
    STRH R4, [R5,#0xC]
    ADD.W R4, SP, #0x98+var_5D
    STR R1, [R5,#4]
    STR R2, [R5,#8]
    STRB R3, [R5,#0xE]
    CMP.W R10, #0
    BEQ.W loc_16F94
loc_16CD2:
    BL sub_2D1F4
    STRB.W R0, [R7,#1]!
    CMP R7, R4
    BNE loc_16CD2
loc_16CDE:
    MOV R3, #0x3A58C
    MOV R12, #0x3A598
    LDM R3!, {R0,R1}
    ADD R2, SP, #0x98+var_6C
    MOVS R4, #0
    STR R2, [SP,#0x98+var_74]
    MOV R7, R2
    STRB R4, [R5,#0xF]
    STR.W R0, [R5,#0x13]
    MOV.W LR, #0xA
    LDRH R3, [R3]
    ADD.W R11, R5, #0x43
    LDR.W R0, [R12]
    STRB R4, [R5,#0x10]
    STRB R4, [R5,#0x11]
    STRB.W LR, [R5,#0x12]
    STRH.W R3, [R5,#0x1B]
    STR.W R1, [R5,#0x17]
    STR.W R0, [R5,#0x21]
    LDM R7!, {R0-R3}
    LDRH.W R7, [R12,#(word_3A59C - 0x3A598)]
    STRB R4, [R5,#0x1D]
    STRB R4, [R5,#0x1E]
    STRH.W R7, [R5,#0x25]
    MOVS R7, #0x18
    STR.W R0, [R5,#0x2F]
    MOVS R0, #6
    STR.W R1, [R5,#0x33]
    STRB.W R0, [R5,#0x20]
    MOVS R0, #0x10
    STR.W R2, [R5,#0x37]
    LSR.W R1, R7, R0
    STR.W R3, [R5,#0x3B]
    LSR.W R2, R7, R7
    STRB R4, [R5,#0x1F]
    LSRS R3, R7, #8
    STRB.W R4, [R5,#0x2B]
    STRB.W R4, [R5,#0x2C]
    STRB.W R4, [R5,#0x2D]
    STRB.W R0, [R5,#0x2E]
    STRB.W R4, [R5,#0x3F]
    STRB.W R4, [R5,#0x40]
    STRB.W R4, [R5,#0x41]
    STRB.W R0, [R5,#0x42]
    STRB.W R7, [R5,#0x2A]
    STRB.W R2, [R5,#0x27]
    STRB.W R1, [R5,#0x28]
    STRB.W R3, [R5,#0x29]
loc_16D84:
    MOVS R7, #0
    MOVS R3, #1
    STRB.W R7, [R11]
    ADD.W R0, R11, #8
    STRB.W R7, [R11,#1]
    MOVS R4, #4
    STRB.W R7, [R11,#2]
    STRB.W R3, [R11,#3]
    LDR.W R9, [SP,#0x98+n]
    LDR R1, [SP,#0x98+src]
    MOV.W R3, R9,ASR#24
    STRB.W R9, [R11,#7]
    STRB.W R3, [R11,#4]
    MOV R2, R9
    MOV.W R3, R9,ASR#16
    STRB.W R3, [R11,#5]
    MOV.W R3, R9,ASR#8
    ADD.W R9, R9, #8
    STRB.W R3, [R11,#6]
    ADD R9, R11
    BLX memcpy
    MOV R0, R7
    ADD.W R7, R9, R4
loc_16DD2:
    MOV.W R11, R0,LSL#8
    BL sub_2D1F4
    SUBS R4, #1
    ADD R0, R11
    BNE loc_16DD2
loc_16DE0:
    UBFX.W R2, R0, #0x10, #8
    LSRS R1, R0, #0x18
    UBFX.W R3, R0, #8, #8
    STRB.W R2, [R9,#5]
    STRB.W R2, [R9,#9]
    UXTB R0, R0
    STRB.W R1, [R9,#4]
    ADD.W R4, R9, #0xC
    STRB.W R0, [R9,#7]
    STRB.W R0, [R9,#0xB]
    STRB.W R1, [R9,#8]
    STRB.W R3, [R9,#6]
    STRB.W R3, [R9,#0xA]
    LDR R3, [R6]
    LDR R1, [R3,#0x30]
    MOV R0, R1
    STR R1, [SP,#0x98+var_78]
    BLX strlen
    LDR R1, [SP,#0x98+var_78]
    MOV R11, R0
    ADD.W R11, R11, #4
    ADD R4, R11
    ASRS R3, R0, #0x18
    ASRS R2, R0, #0x10
    STRB.W R0, [R9,#0xF]
    STRB.W R3, [R9,#0xC]
    ASRS R3, R0, #8
    STRB.W R2, [R9,#0xD]
    MOV R2, R0
    STRB.W R3, [R9,#0xE]
    ADD.W R0, R9, #0x10
    BLX memcpy
    MOV R2, R8
    LDR R1, [SP,#0x98+var_88]
    MOV R0, R4
    BLX memcpy
    LDR R1, [R6,#8]
    ADD.W R11, R4, R8
    MOV R0, R1
    STR R1, [SP,#0x98+var_78]
    BLX strlen
    LDR R1, [SP,#0x98+var_78]
    MOV R6, R0
    ASRS R3, R0, #0x18
    ASRS R2, R0, #0x10
    STRB.W R3, [R4,R8]
    STRB.W R0, [R11,#3]
    ASRS R3, R0, #8
    STRB.W R2, [R11,#1]
    ADD.W R0, R11, #4
    STRB.W R3, [R11,#2]
    MOV R2, R6
    BLX memcpy
    ADDS R6, #4
    ADD R11, R6
    MOV R4, R11
loc_16E88:
    ADDS R4, #1
    SUBS R6, R4, R7
    SUB.W R3, R4, R11
    STRB.W R3, [R4,#-1]
    LSLS R3, R6, #0x1C
    BNE loc_16E88
loc_16E98:
    LDR R3, [SP,#0x98+var_84]
    SUBS R4, R4, R5
    CMP R3, R4
    BLE.W loc_16FF2
loc_16EA2:
    ASRS R3, R6, #0x18
    STRB.W R6, [R9,#3]
    STRB.W R3, [R9]
    ASRS R3, R6, #0x10
    STRB.W R3, [R9,#1]
    ASRS R3, R6, #8
    STRB.W R3, [R9,#2]
    CMP.W R10, #0
    BEQ loc_16F02
loc_16EBE:
    MOVS R3, #0x10
    LDR R1, [SP,#0x98+var_74]
    MOV R2, R3
    MOV R0, R10
    ADD.W R9, SP, #0x98+var_5C
    MOV.W R11, #0x30
    STMEA.W SP, {R9,R11}
    BL sub_1C22C
    BL sub_1B3F4
    MOV R1, R9
    MOV R10, R0
    BL sub_1BC4C
    MOV R0, R10
    ADD R1, SP, #0x98+var_3C
    BL sub_1B38C
    MOV R1, R7
    MOV R2, R6
    MOV R0, R10
    BL sub_1B5A8
    MOV R0, R10
    BL sub_1B400
    MOV R1, R11
    MOV R0, R9
    BL sub_194E4
loc_16F02:
    LDR R0, [SP,#0x98+var_80]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_16F90
loc_16F18:
    MOVS R1, #1
    MOV R3, R6
    MOVS R2, #0x24
    MOV R0, #aBeginOpensshPr_0
    MOV R7, R1
    BLX fwrite
    MOV R2, R4
    MOVS R3, #0x40
    MOV R1, R5
    MOV R0, R6
    BL sub_2C190
    MOV R3, R6
    MOVW R0, #0xAA68
    MOVS R2, #0x22
    MOVT.W R0, #3
    MOV R1, R7
    BLX fwrite
    MOV R0, R6
    BLX fclose
loc_16F50:
    LDR R1, [SP,#0x98+var_84]
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R4, [SP,#0x98+var_88]
    MOV R1, R8
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R4, [SP,#0x98+src]
    LDR R1, [SP,#0x98+n]
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R3, [SP,#0x98+var_7C]
    LDR R2, [SP,#0x98+var_2C]
    MOV R0, R7
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_16FEE
loc_16F8A:
    ADD SP, SP, #0x74
    POP.W {R4-R11,PC}
loc_16F90:
    MOV R7, R6
    B loc_16F50
loc_16F94:
    MOV R3, #0x3A584
    ADD R2, SP, #0x98+var_6C
    STR.W R10, [SP,#0x98+var_6C]
    LDR R0, [R3]
    ADD.W R11, R5, #0x23
    STR.W R10, [R2,#4]
    MOVS R3, #4
    STR.W R10, [SP,#0x38]
    STR.W R10, [SP,#0x98+var_64]
    STR R2, [SP,#0x98+var_74]
    STRB.W R10, [R5,#0x1F]
    STRB.W R10, [R5,#0x20]
    STRB.W R10, [R5,#0x21]
    STRB.W R10, [R5,#0x22]
    STR.W R0, [R5,#0x13]
    STR.W R0, [R5,#0x1B]
    STRB.W R10, [R5,#0xF]
    STRB.W R10, [R5,#0x10]
    STRB.W R10, [R5,#0x11]
    STRB.W R10, [R5,#0x17]
    STRB.W R10, [R5,#0x18]
    STRB.W R10, [R5,#0x19]
    STRB R3, [R5,#0x12]
    STRB R3, [R5,#0x1A]
    B loc_16D84
loc_16FEE:
    BLX __stack_chk_fail
loc_16FF2:
    MOVW R1, #0xA624
    MOVW R0, #0xAA28
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewWrit
    MOVW R2, #0x72E
    BLX __assert_fail
loc_1700C:
    MOVW R1, #0xA624
    MOVW R0, #0xAA18
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewWrit
    MOVW R2, #0x6DC
    BLX __assert_fail
```
Output:9,#8]
    STRB.W R3, [R9,#6]
    STRB.W R0, [R9,#10]
    LDR.W R0, [SP,#0x98+n]
    STR WZR, [SP,#0x98+n]
    LDR.W R0, [SP,#0x98+src]
    STR WZR, [SP,#0x98+src]
    LDR.W R0, [SP,#0x98+dst]
    STR WZR, [SP,#0x98+dst]
    LDR.W R0, [SP,#0x98+tmp]
    STR WZR, [SP,#0x98+tmp]
    LDR.W R0, [SP,#0x98+var_58]
    STR WZR, [SP,#0x98+var_58]
    LDR.W R0, [SP,#0x98+var_5C]
    STR WZR, [SP,#0x98+var_5C]
    LDR.W R0, [SP,#0x98+var_60]
    STR WZR, [SP,#0x98+var_60]
    LDR.W R0, [SP,#0x98+var_64]
    STR WZR, [SP,#0x98+var_64]
    LDR.W R0, [SP,#0x98+var_68]
    STR WZR, [SP,#0x98+var_68]
    LDR.W R0, [SP,#0x98+var_6C]
    STR WZR, [SP,#0x98+var_6C]
    LDR.W R0, [SP,#0x98+var_70]
    STR WZR, [SP,#0x98+var_70]
    LDR.W R0, [SP,#0x98+var_74]
    STR WZR, [SP,#0x98+var_74]
    LDR.W R0, [SP,#0x98+var_78]
    STR WZR, [SP,#0x98+var_78]
    LDR.W R0, [SP,#0x98+var_7C]
    STR WZR, [SP,#0x98+var_7C]
    LDR.W R0, [SP,#0x98+var_80]
    STR WZR, [SP,#0x98+var_80]
    LDR.W R0, [SP,#0x98+var_84]
    STR WZR, [SP,#0x98+var_84]
    LDR.W R0, [SP,#0x98+var_88]
    STR WZR, [SP,#0x98+var_88]
    LDR.W R0, [SP,#0x98+var_8C]
    STR WZR, [SP,#0x98+var_8C]
    LDR.W R0, [SP,#0x98+var_90]
    STR WZR, [SP,#0x98+var_90]
    LDR.W R0, [SP,#0x98+var_94]
    STR WZR, [SP,#0x98+var_94]
    LDR.W R0, [SP,#0x98+var_98]
    STR WZR, [SP,#0x98+var_98]
    LDR.W R0, [SP,#0x98+var_9C]
    STR WZR, [SP,#0x98+var_9C]
    LDR.W R0, [SP,#0x98+a]
    STR WZR, [SP,#0x98+a]
    LDR.W R0, [SP,#0x98+b]
    STR WZR, [SP,#0x98+b]
    LDR.W R0, [SP,#0x98+c]
    STR WZR, [SP,#0x98+c]
    LDR.W R0, [SP,#0x98+d]
    STR WZR, [SP,#0x98+d]
    LDR.W R0, [SP,#0x98+e]
    STR WZR, [SP,#0x98+e]
    LDR.W R0, [SP,#0x98+f]
    STR WZR, [SP,#0x98+f]
   
############
```assembly
loc_225EC:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB SP, SP, #0x1C
    MOVT.W R3, #5
    ANDS.W R7, R1, #7
    STR R3, [SP,#0x40+var_3C]
    LDR R3, [R3]
    STR R3, [SP,#0x40+var_2C]
    BNE loc_226DE
loc_22606:
    MOV R9, R1
    MOV R8, R2
    LDR.W R1, [R2,#0x80]
    LDR.W R2, [R2,#0x84]
    CMP.W R9, #0
    BEQ loc_226C6
loc_22618:
    ADD.W R4, R0, #8
    ADD.W R11, R8, #0x88
    ADD.W R10, R8, #0x110
loc_22624:
    LDRB.W R0, [R4,#-3]
    MOV R3, R8
    LDRB.W R6, [R4,#-4]
    ADDS R7, #8
    LDRB.W R5, [R4,#-7]
    ADDS R4, #8
    LDRB.W LR, [R4,#-0x10]
    LSLS R0, R0, #0x10
    ORR.W R6, R0, R6,LSL#24
    LDRB.W R0, [R4,#-9]
    LSLS R5, R5, #0x10
    LDRB.W R12, [R4,#-0xD]
    ORR.W R5, R5, LR,LSL#24
    ORRS R0, R6
    LDRB.W LR, [R4,#-0xA]
    ORR.W R5, R5, R12
    LDRB.W R6, [R4,#-0xE]
    ORR.W R0, R0, LR,LSL#8
    ORR.W R5, R5, R6,LSL#8
    EORS R2, R0
    EORS R1, R5
    ADD R0, SP, #0x40+var_34
    BL sub_20EE4
    MOV R3, R11
    LDR R2, [SP,#0x40+var_30]
    ADD R0, SP, #0x40+var_34
    LDR R1, [SP,#0x40+var_34]
    BL sub_21828
    MOV R3, R10
    LDR R2, [SP,#0x40+var_30]
    ADD R0, SP, #0x40+var_34
    LDR R1, [SP,#0x40+var_34]
    BL sub_20EE4
    LDR R1, [SP,#0x40+var_34]
    LDR R2, [SP,#0x40+var_30]
    CMP R9, R7
    MOV.W R0, R1,LSR#24
    MOV.W R3, R1,LSR#16
    STRB.W R0, [R4,#-0x10]
    MOV.W R0, R1,LSR#8
    STRB.W R3, [R4,#-0xF]
    MOV.W R3, R2,LSR#24
    STRB.W R0, [R4,#-0xE]
    MOV.W R0, R2,LSR#16
    STRB.W R3, [R4,#-0xC]
    MOV.W R3, R2,LSR#8
    STRB.W R1, [R4,#-0xD]
    STRB.W R2, [R4,#-9]
    STRB.W R0, [R4,#-0xB]
    STRB.W R3, [R4,#-0xA]
    BHI loc_22624
loc_226C6:
    LDR R3, [SP,#0x40+var_3C]
    LDR R0, [SP,#0x40+var_2C]
    STR.W R1, [R8,#0x80]
    LDR R3, [R3]
    STR.W R2, [R8,#0x84]
    CMP R0, R3
    BNE loc_226F8
loc_226D8:
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_226DE:
    MOVW R1, #0xF460
    MOVW R0, #0xE634
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aDesCbc3Encrypt
    MOVW R2, #0x29B
    BLX __assert_fail
loc_226F8:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__assert_fail)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0xF460",
  "fixed-value-assignment:0xE634",
  "fixed-value-assignment:0x29B",
  "address-or-offset-constant:aDesCbc3Encrypt",
  "inferred-algorithm:data-encryption",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:bitwise-manipulation",
  "inferred-algorithm:byte-packing",
  "inferred-algorithm:array-access"
]
```<|im_end|>
############
```assembly
loc_1EDA8:
    MOV R3, #0xFFFFFFE
    CMP R1, R3
    PUSH.W {R4-R8,LR}
    BHI loc_1EE42
loc_1EDB8:
    ADDS R6, R1, #3
    MOV R3, #0x3FFFFFE
    MOV R7, R1
    ASRS R6, R6, #2
    CMP R6, R3
    BGT loc_1EE5C
loc_1EDCA:
    MOV R5, R0
    ADDS R0, R6, #1
    MOVS R1, #4
    MOV.W R8, R0,LSL#2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R8
    MOV R4, R0
    BLX memset
    STR R6, [R4]
    CBZ R6, loc_1EDF2
loc_1EDE6:
    SUB.W R2, R8, #4
    MOVS R1, #0
    ADDS R0, R4, #4
    BLX memset
loc_1EDF2:
    SUBS R0, R7, #1
    CBZ R7, loc_1EE1A
loc_1EDF6:
    LSLS R7, R0, #3
loc_1EDF8:
    ASRS R1, R0, #2
    LDRB.W R2, [R5],#1
    ADDS R1, #1
    AND.W R3, R7, #0x1F
    SUBS R0, #1
    SUBS R7, #8
    LDR.W R6, [R4,R1,LSL#2]
    LSL.W R3, R2, R3
    ORRS R3, R6
    STR.W R3, [R4,R1,LSL#2]
    ADDS R3, R0, #1
    BNE loc_1EDF8
loc_1EE1A:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1EE3C
loc_1EE20:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBNZ R1, loc_1EE3C
loc_1EE2A:
    SUBS R3, #1
    B loc_1EE36
loc_1EE2E:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1EE3C
loc_1EE36:
    CMP R3, #1
    STR R3, [R4]
    BNE loc_1EE2E
loc_1EE3C:
    MOV R0, R4
    POP.W {R4-R8,PC}
loc_1EE42:
    MOVW R1, #0xE76C
    MOVW R0, #0xE800
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumFromByte
    MOVW R2, #0x583
    BLX __assert_fail
loc_1EE5C:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:true",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (sub_115CC)",
  "external-call-type:data-processing-helper (__assert_fail)",
  "integer-size-hint:32-bit",
  "bitwise-operation-shift-left",
  "bitwise-operation-shift-right",
  "bitwise-operation-and-clear",
  "bitwise-operation-or",
  "byte-level-operations-present",
  "memory-access-present",
  "fixed-value-comparison:0xFFFFFFE",
  "fixed-value-comparison:0x3FFFFFE",
  "fixed-value-comparison:1",
  "fixed-value-assignment:0",
  "address-or-offset-constant:aBignumFromByte",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:sub_115CC",
  "address-or-offset-constant:__assert_fail",
  "address-or-offset-constant:sub_115CC",
  "inferred-algorithm:data-encryption-or-decryption",
  "inferred-algorithm:array-manipulation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:numeric-computation"
]
```<|im_end|>
############
```assembly
loc_26F30:
    PUSH.W {R4-R11,LR}
    MOVW R4, #0x6190
    SUB SP, SP, #0x154
    MOVT.W R4, #5
    MOV R8, R1
    MOV R9, R2
    LDR R1, [R4]
    LDR R2, [R0]
    STR R3, [SP,#0x178+var_168]
    LDR R3, [R0,#0x18]
    STR R4, [SP,#0x178+var_16C]
    STR R1, [SP,#0x178+var_2C]
    LDR R4, [R2,#0x38]
    CBZ R3, loc_26F8E
loc_26F52:
    LDR R3, [R0,#4]
    MOV R11, R0
    CBZ R3, loc_26F8E
loc_26F58:
    LDR R2, [R3]
    CMP R2, #2
    BEQ.W loc_27208
loc_26F60:
    LDR R3, [R4,#4]
    LDR R5, [R3,#0x14]
    CMP R5, #0x40
    BHI.W loc_2751C
loc_26F6A:
    LDR R3, [R3]
    ADD R7, SP, #0x178+var_6C
    BLX R3
    LDR R3, [R4,#4]
    MOV R2, R9
    MOV R1, R8
    LDR R3, [R3,#8]
    MOV R6, R0
    BLX R3
    LDR R3, [R4,#4]
    MOV R0, R6
    MOV R1, R7
    LDR R3, [R3,#0xC]
    BLX R3
    LDR.W R4, [R11,#4]
    LDR R3, [R4]
    CBZ R3, loc_26FA2
loc_26F8E:
    MOVS R0, #0
loc_26F90:
    LDR R3, [SP,#0x178+var_16C]
    LDR R2, [SP,#0x178+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_27518
loc_26F9C:
    ADD SP, SP, #0x154
    POP.W {R4-R11,PC}
loc_26FA2:
    MOV R1, R5
    MOV R0, R7
    LDR.W R8, [R11,#0x18]
    BL sub_1EDA8
    MOV R6, R0
    LDR R0, [R4,#0x1C]
    BL sub_1F158
    MOV R9, R0
    MOV R0, R6
    BL sub_1F158
    CMP R9, R0
    BLT.W loc_271D8
loc_26FC4:
    MOV R0, R7
    MOV R1, R5
    ADD R2, SP, #0x178+var_80
    BL sub_338F8
    LDR R1, [R4,#0x1C]
    ADD R3, SP, #0x178+var_80
    MOVS R2, #0x14
    MOVW R0, #0xFD78
    STR R2, [SP,#0x178+var_178]
    MOVT.W R0, #3
    MOV R2, R8
    BL sub_24070
    MOV R1, R0
    MOV R7, R0
    ADD.W R0, R4, #0x20
    BL sub_264F8
    MOV R9, R0
    CMP R0, #0
    BEQ.W loc_274E2
loc_26FF8:
    LDR R1, [R4,#0x1C]
    LDR.W R0, [R9,#4]
    BL sub_200D4
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_27014
loc_27010:
    BL sub_1E6B0
loc_27014:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_2701E
loc_2701A:
    BL sub_1E6B0
loc_2701E:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27028
loc_27024:
    BL sub_1E6B0
loc_27028:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R2, [R4,#0x1C]
    MOV R1, R8
    MOV R0, R5
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R7
    BL sub_20228
    MOV R9, R0
    MOV R0, R7
    BL sub_1E6B0
    CMP.W R9, #0
    BEQ.W loc_271EE
loc_2708E:
    LDR R2, [R4,#0x1C]
    MOV R1, R9
    MOV R0, R8
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    CMP R5, #0
    BEQ.W loc_27536
loc_270AC:
    CMP R6, #0
    BEQ.W loc_27200
loc_270B2:
    MOV R0, R5
    BL sub_1F158
    MOV R3, R0
    ADD.W R9, R3, #0xF
    ADDS R3, #8
    MOV R0, R6
    IT 
    MOVPL R9, R3
    BL sub_1F158
    LDR.W R3, [R11]
    MOV.W R2, R9,ASR#3
    SUBS R4, R2, #1
    MOV R7, R2
    ADD.W R8, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R8, R0
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR R2, [SP,#0x178+var_168]
    MOV.W R8, R8,ASR#3
    MOVS R1, #1
    STR R7, [SP,#0x178+var_164]
    MOV R10, R0
    ADDS R0, #8
    ADD R0, R7
    ADD R0, R8
    ADDS R0, #8
    STR R0, [R2]
    BL sub_193B8
    MOV.W R2, R10,ASR#24
    MOV.W R3, R10,ASR#16
    STRB.W R10, [R0,#3]
    MOV R7, R0
    STRB R2, [R0]
    MOV R2, R10
    STRB R3, [R0,#1]
    MOV.W R3, R10,ASR#8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR.W R1, [R11]
    UXTB.W R11, R8
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    MOV R3, R0
    LDR R0, [SP,#0x178+var_164]
    ADD.W R2, R3, R10
    ADD.W R1, R0, R8
    ADDS R1, #8
    MOV R12, R0
    UXTB R0, R0
    MOV.W LR, R1,ASR#24
    STRB.W LR, [R3,R10]
    ASRS R3, R1, #0x10
    STRB R0, [R2,#7]
    STRB R3, [R2,#1]
    ADD.W R3, R0, R11
    MOV R0, R12
    ASRS R1, R1, #8
    ADDS R3, #8
    STRB R1, [R2,#2]
    STRB R3, [R2,#3]
    MOV.W R1, R9,ASR#27
    MOV.W R3, R9,ASR#19
    STRB R1, [R2,#4]
    MOV.W R9, R9,ASR#11
    STRB R3, [R2,#5]
    ADD.W R10, R2, #8
    STRB.W R9, [R2,#6]
    CBZ R0, loc_2718C
loc_27174:
    MOV R9, R10
loc_27176:
    MOV R1, R4
    MOV R0, R5
    BL sub_1F20C
    SUBS R4, #1
    ADDS R2, R4, #1
    STRB.W R0, [R9],#1
    BNE loc_27176
loc_27188:
    LDR R3, [SP,#0x178+var_164]
    ADD R10, R3
loc_2718C:
    MOV.W R3, R8,ASR#24
    STRB.W R11, [R10,#3]
    STRB.W R3, [R10]
    ADD.W R4, R8, #0xFFFFFFFF
    MOV.W R3, R8,ASR#16
    ADD.W R10, R10, #4
    STRB.W R3, [R10,#-3]
    MOV.W R3, R8,ASR#8
    STRB.W R3, [R10,#-2]
    CMP.W R8, #0
    BEQ loc_271C8
loc_271B6:
    MOV R1, R4
    MOV R0, R6
    BL sub_1F20C
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R10],#1
    BNE loc_271B6
loc_271C8:
    MOV R0, R5
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R7
    B loc_26F90
loc_271D8:
    SUB.W R1, R0, R9
    MOV R0, R6
    BL sub_1F910
    MOV R3, R0
    MOV R0, R6
    MOV R6, R3
    BL sub_1E6B0
    B loc_26FC4
loc_271EE:
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    CMP R5, #0
    BEQ.W loc_26F8E
loc_27200:
    MOV R0, R5
    BL sub_1E6B0
    B loc_26F8E
loc_27208:
    LDR R5, [R3,#0xC]
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    ADD.W R4, SP, #0x178+var_155
    MOVS R6, #0
    LSRS R5, R5, #3
    CBZ R5, loc_27236
loc_2721A:
    MOV R1, R6
    LDR.W R0, [R11,#0x18]
    BL sub_1F20C
    ADDS R6, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R6
    BNE loc_2721A
loc_27236:
    ADD R7, SP, #0x178+var_6C
    ADD R0, SP, #0x178+var_154
    MOV R1, R7
    BL sub_31B84
    LDRB.W R3, [SP,#0x178+var_4D]
    LDRB.W R2, [SP,#0x178+var_6C]
    MOVS R1, #0x20
    MOV R0, R7
    AND.W R3, R3, #0x7F
    ORR.W R3, R3, #0x40
    BIC.W R2, R2, #7
    STRB.W R3, [SP,#0x178+var_4D]
    STRB.W R2, [SP,#0x178+var_6C]
    BL sub_1EE64
    STR R0, [SP,#0x178+var_164]
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    LDR.W R3, [R11,#4]
    ADD R0, SP, #0x178+var_154
    LDR R2, [R3,#0xC]
    LSRS R1, R2, #3
    RSB.W R2, R1, R2,LSR#2
    ADD R1, R7
    BL sub_31A54
    MOV R2, R9
    MOV R1, R8
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R1, R7
    ADD R0, SP, #0x178+var_154
    BL sub_31B84
    MOVS R1, #0x40
    MOV R0, R7
    BL sub_1EE64
    MOV R1, R0
    STR R0, [SP,#0x178+var_160]
    LDR.W R0, [R11,#4]
    ADDS R0, #0x1C
    BL sub_264F8
    MOV R6, R0
    CMP R0, #0
    BEQ.W loc_27508
loc_272B0:
    SUBS R5, #1
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    CMP R5, #0
    ADD.W R4, SP, #0x178+var_155
    BLE.W loc_27500
loc_272C2:
    MOV.W R10, #0
    STR R5, [SP,#0x178+var_15C]
loc_272C8:
    MOV R1, R10
    LDR R0, [R6,#8]
    BL sub_1F20C
    ADD.W R10, R10, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R10
    BNE loc_272C8
loc_272E4:
    LDR R1, [SP,#0x178+var_15C]
loc_272E6:
    LDR R0, [R6,#8]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB R0, [R4]
    LDR R0, [R6,#4]
    BL sub_1F234
    LDRB R3, [R4]
    MOVS R2, #1
    MOV R1, R4
    ORR.W R3, R3, R0,LSL#7
    ADD R0, SP, #0x178+var_154
    STRB R3, [R4]
    BL sub_31A54
    CMP R5, #0
    BLE.W loc_274F8
loc_27312:
    MOV.W R10, #0
    STR R5, [SP,#0x178+var_15C]
loc_27318:
    MOV R1, R10
    LDR.W R0, [R11,#0xC]
    BL sub_1F20C
    ADD.W R10, R10, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R10
    BNE loc_27318
loc_27336:
    LDR R1, [SP,#0x178+var_15C]
loc_27338:
    LDR.W R0, [R11,#0xC]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R3, R0, #0x7F
    LDR.W R0, [R11,#8]
    STRB R3, [R4]
    BL sub_1F234
    LDRB R3, [R4]
    MOV R1, R4
    MOVS R2, #1
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R2, R9
    MOV R1, R8
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R1, R7
    ADD R0, SP, #0x178+var_154
    BL sub_31B84
    MOV R0, R7
    MOVS R1, #0x40
    BL sub_1EE64
    LDR.W R3, [R11,#4]
    LDR R7, [SP,#0x178+var_164]
    LDR R2, [R3,#0x14]
    MOV R1, R7
    MOV R4, R0
    BL sub_1EAC0
    MOV R5, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R7, [SP,#0x178+var_160]
    MOV R1, R5
    MOV R0, R7
    BL sub_1FC80
    MOV R4, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR.W R3, [R11,#4]
    MOV R0, R4
    LDR R1, [R3,#0x14]
    BL sub_200D4
    MOV R7, R0
    MOV R0, R4
    BL sub_1E6B0
    LDR.W R3, [R11]
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR.W R3, [R11,#4]
    MOVS R1, #1
    MOV R8, R0
    LDR R0, [R3,#0xC]
    LDR R3, [SP,#0x178+var_168]
    LSRS R0, R0, #3
    ADD.W R0, R8, R0,LSL#1
    ADDS R0, #8
    STR R0, [R3]
    BL sub_193B8
    MOV.W R2, R8,ASR#24
    MOV.W R3, R8,ASR#16
    STRB R2, [R0]
    MOV R5, R0
    STRB R3, [R0,#1]
    MOV.W R3, R8,ASR#8
    STRB.W R8, [R0,#3]
    MOV R2, R8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR.W R1, [R11]
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    LDR.W R1, [R11,#4]
    LDR R1, [R1,#0xC]
    LSRS R1, R1, #0x1A
    STRB.W R1, [R0,R8]
    ADD.W R2, R0, R8
    LDR.W R3, [R11,#4]
    ADDS R4, R2, #4
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #0x12
    STRB R3, [R2,#1]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #0xA
    STRB R3, [R2,#2]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #3
    LSLS R3, R3, #1
    STRB R3, [R2,#3]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    MOV.W R9, R3,LSR#3
    CMP.W R9, #1
    BLE loc_274F0
loc_27454:
    MOV R10, R4
    MOV.W R11, #0
    ADD.W R8, R9, #0xFFFFFFFF
    STR.W R8, [SP,#0x178+var_168]
loc_27462:
    MOV R1, R11
    LDR R0, [R6,#8]
    BL sub_1F20C
    ADD.W R11, R11, #1
    CMP R11, R8
    STRB.W R0, [R10],#1
    BNE loc_27462
loc_27476:
    LDR R1, [SP,#0x178+var_168]
    ADD R4, R11
loc_2747A:
    LDR R0, [R6,#8]
    MOV R8, R4
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB.W R0, [R8],#1
    LDR R0, [R6,#4]
    BL sub_1F234
    LDRB R3, [R4]
    MOVS R2, #0
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R4]
    LDR R0, [R6,#4]
    STR R2, [R6]
    CBZ R0, loc_274A6
loc_274A2:
    BL sub_1E6B0
loc_274A6:
    LDR R0, [R6,#8]
    CBZ R0, loc_274AE
loc_274AA:
    BL sub_1E6B0
loc_274AE:
    LDR R0, [R6,#0xC]
    CBZ R0, loc_274B6
loc_274B2:
    BL sub_1E6B0
loc_274B6:
    MOVS R4, #0
    MOV R0, R6
    STRB R4, [R6,#0x10]
    BL sub_19494
    CMP.W R9, #0
    BEQ loc_274D8
loc_274C6:
    MOV R1, R4
    MOV R0, R7
    BL sub_1F20C
    ADDS R4, #1
    CMP R9, R4
    STRB.W R0, [R8],#1
    BNE loc_274C6
loc_274D8:
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R5
    B loc_26F90
loc_274E2:
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    B loc_26F8E
loc_274F0:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_168]
    MOV R1, R3
    B loc_2747A
loc_274F8:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_15C]
    MOV R1, R3
    B loc_27338
loc_27500:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_15C]
    MOV R1, R3
    B loc_272E6
loc_27508:
    LDR R0, [SP,#0x178+var_160]
    BL sub_1E6B0
    LDR R0, [SP,#0x178+var_164]
    BL sub_1E6B0
    MOV R0, R6
    B loc_26F90
loc_27518:
    BLX __stack_chk_fail
loc_2751C:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD5C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaSign
    MOVW R2, #0x9E9
    BLX __assert_fail
loc_27536:
    CMP R6, #0
    BEQ.W loc_26F8E
loc_2753C:
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    B loc_26F90
```
Output:71D8
    LDR R1, [R4,#0x1C]
    LDR.W R0, [R9,#4]
    BL sub_200D4
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_27202
loc_27200:
    BL sub_1E6B0
loc_27202:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_2720C
loc_27208:
    BL sub_1E6B0
loc_2720C:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27216
loc_27212:
    BL sub_1E6B0
loc_27216:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R2, [R4,#0x1C]
    MOV R1, R8
    MOV R0, R5
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R7
    BL sub_20228
    MOV R9, R0
    MOV R0, R7
    BL sub_1E6B0
    CMP.W R9, #0
    BEQ.W loc_274E2
    LDR R1, [R4,#0x1C]
    LDR.W R0, [R9,#4]
    BL sub_200D4
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_27230
loc_27228:
    BL sub_1E6B0
loc_27230:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_2723A
loc_27236:
    BL sub_1E6B0
loc_2723A:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27244
loc_27240:
    BL sub_1E6B0
loc_27244:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R2, [R4,#0x1C]
    MOV R1, R8
    MOV R0, R5
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL
############
```assembly
loc_292F4:
    PUSH.W {R4-R9,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0xB4
    MOV R4, R0
    MOVS R2, #0x5C
    LDR.W R3, [R9]
    MOV R8, R1
    ADD R0, SP, #0xD0+dest
    ADD.W R1, R4, #0xB8
    STR R3, [SP,#0xD0+var_24]
    BLX memcpy
    ADD R1, SP, #0xD0+dest
    ADD R0, SP, #0xD0+src
    BL sub_29130
    ADD.W R1, R4, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xD0+dest
    BLX memcpy
    LDR R3, [SP,#0xD0+var_38]
    LDR R2, [SP,#0xD0+var_40]
    LDR R1, [SP,#0xD0+var_3C]
    ADDS R3, #0x10
    ADD.W R4, R2, #0x10
    STR R3, [SP,#0xD0+var_38]
    CMP R3, #0xF
    ITE 
    MOVHI R3, R1
    ADDLS R3, R1, #1
    CMP R4, #0x3F
    STR R3, [SP,#0xD0+var_3C]
    BLS loc_293E6
loc_29348:
    ADD R4, SP, #0xD0+src
    MOV R0, R2
    MOVS R5, #0x10
    MOVS R6, #0
loc_29350:
    ADD R3, SP, #0xD0+var_80
    MOV R1, R4
    RSB.W R2, R2, #0x40
    ADD R0, R3
    BLX memcpy
    LDR R3, [SP,#0xD0+var_40]
    LDR R7, [SP,#0xD0+var_74]
    MOV R1, SP
    RSB.W R12, R3, #0x40
    SUB.W LR, R3, #0x40
    LDR R3, [SP,#0xD0+var_78]
    ADD R5, LR
    STR R7, [SP,#0xD0+var_C4]
    ADD R4, R12
    LDR R7, [SP,#0xD0+var_70]
    STR R3, [SP,#0xD0+var_C8]
    LDR R3, [SP,#0xD0+var_64]
    STR R7, [SP,#0xD0+var_C0]
    LDR R7, [SP,#0xD0+var_6C]
    STR R3, [SP,#0xD0+var_B4]
    LDR R3, [SP,#0xD0+var_50]
    LDR R2, [SP,#0xD0+var_7C]
    STR R7, [SP,#0xD0+var_BC]
    STR R3, [SP,#0xD0+var_A0]
    LDR R7, [SP,#0xD0+var_60]
    LDR R3, [SP,#0xD0+var_4C]
    STR R2, [SP,#0xD0+var_CC]
    STR R7, [SP,#0xD0+var_B0]
    LDR R2, [SP,#0xD0+var_68]
    LDR R7, [SP,#0xD0+var_5C]
    STR R3, [SP,#0xD0+var_9C]
    LDR R3, [SP,#0xD0+var_48]
    LDR R0, [SP,#0xD0+var_80]
    STR R2, [SP,#0xD0+var_B8]
    STR R7, [SP,#0xD0+var_AC]
    LDR R2, [SP,#0xD0+var_54]
    LDR R7, [SP,#0xD0+var_58]
    STR R3, [SP,#0xD0+var_98]
    LDR R3, [SP,#0xD0+var_44]
    STR R0, [SP,#0xD0+var_D0]
    ADD R0, SP, #0xD0+dest
    STR R2, [SP,#0xD0+var_A4]
    STR R7, [SP,#0xD0+var_A8]
    STR R3, [SP,#0xD0+var_94]
    BL sub_28778
    CMP R5, #0x3F
    MOV.W R0, #0
    STR R6, [SP,#0xD0+var_40]
    MOV R2, R0
    BHI loc_29350
loc_293C0:
    MOV R1, R4
    ADD R0, SP, #0xD0+var_80
    MOVS R3, #0x4C
    MOV R2, R5
    BLX __memcpy_chk
    STR R5, [SP,#0xD0+var_40]
loc_293CE:
    ADD R1, SP, #0xD0+dest
    MOV R0, R8
    BL sub_29130
    LDR R2, [SP,#0xD0+var_24]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29406
loc_293E0:
    ADD SP, SP, #0xB4
    POP.W {R4-R9,PC}
loc_293E6:
    ADD R5, SP, #0xD0+src
    ADD R3, SP, #0xD0+var_20
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x60]
    STR.W R1, [R4,#-0x5C]
    STR.W R2, [R4,#-0x58]
    STR.W R3, [R4,#-0x54]
    LDR R3, [SP,#0xD0+var_40]
    ADDS R3, #0x10
    STR R3, [SP,#0xD0+var_40]
    B loc_293CE
loc_29406:
    BLX __stack_chk_fail
```
Output: memset
    ADD SP, SP, #0xB4
    POP.W {R4-R9,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_2C82C:
    PUSH.W {R4-R10,LR}
    SUB SP, SP, #0x10
    MOV R6, #0x56190
    LDR.W LR, [SP,#0x30+arg_0]
    MOV R5, R0
    LDR R0, [R6]
    MOV R4, R1
    CMP.W LR, #9
    MOV R9, R2
    MOV R7, R3
    STR R0, [SP,#0x30+var_24]
    BEQ loc_2C88A
loc_2C850:
    CMP.W LR, #0xA
    BNE.W loc_2C976
loc_2C858:
    MOV R2, R3
    MOV R1, R9
    MOV R0, R4
    BL sub_2A480
    MOVW R2, #0x93A8
    MOVS R1, #1
    MOVT.W R2, #3
    MOV R4, R0
    MOV R3, R0
    MOV R0, R5
    BLX __fprintf_chk
    MOV R0, R4
    BL sub_19494
loc_2C87C:
    LDR R2, [SP,#0x30+var_24]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_2C972
loc_2C884:
    ADD SP, SP, #0x10
    POP.W {R4-R10,PC}
loc_2C88A:
    MOVW R0, #0x37D8
    MOV R3, R5
    MOVT.W R0, #4
    MOVS R2, #0x20
    MOVS R1, #1
    BLX fwrite
    CBZ R4, loc_2C8E8
loc_2C89E:
    MOVW R0, #0xAD70
    MOV R3, R5
    MOVT.W R0, #3
    MOVS R2, #0xA
    MOVS R1, #1
    BLX fwrite
    LDRB R0, [R4]
    CBNZ R0, loc_2C8C2
loc_2C8B4:
    B loc_2C8D6
loc_2C8B6:
    MOV R1, R5
    BLX fputc
    LDRB.W R0, [R4,#1]!
    CBZ R0, loc_2C8D6
loc_2C8C2:
    CMP R0, #0x22
    IT 
    CMPNE R0, #0x5C
    BNE loc_2C8B6
loc_2C8CA:
    MOV R1, R5
    MOVS R0, #0x5C
    BLX fputc
    LDRB R0, [R4]
    B loc_2C8B6
loc_2C8D6:
    MOVW R0, #0x37FC
    MOV R3, R5
    MOVT.W R0, #4
    MOVS R2, #2
    MOVS R1, #1
    BLX fwrite
loc_2C8E8:
    CMP R7, #0
    BLE loc_2C95E
loc_2C8EC:
    CMP R7, #3
    MOV R4, R7
    MOV R0, R9
    ADD R2, SP, #0x30+s
    IT 
    MOVGE R4, #3
    MOV.W R10, #0
    MOV R1, R4
    MOV.W R8, #1
    BL sub_18FA4
    ADD R0, SP, #0x30+s
    MOV R1, R5
    STRB.W R10, [SP,#0x30+var_28]
    BLX fputs
loc_2C912:
    CMP R7, R4
    BLE loc_2C950
loc_2C916:
    SUBS R1, R7, R4
    ADD.W R0, R9, R4
    CMP R1, #3
    ADD R2, SP, #0x30+s
    ADD.W R8, R8, #1
    IT 
    MOVGE R1, #3
    ADD R4, R1
    BL sub_18FA4
    MOV R1, R5
    ADD R0, SP, #0x30+s
    STRB.W R10, [SP,#0x30+var_28]
    BLX fputs
    CMP.W R8, #0x10
    BNE loc_2C912
loc_2C940:
    MOV R1, R5
    MOVS R0, #0xA
    BLX fputc
    CMP R7, R4
    MOV.W R8, #0
    BGT loc_2C916
loc_2C950:
    CMP.W R8, #0
    BEQ loc_2C95E
loc_2C956:
    MOV R1, R5
    MOVS R0, #0xA
    BLX fputc
loc_2C95E:
    MOV R3, R5
    MOVW R0, #0x3800
    MOVS R2, #0x1E
    MOVS R1, #1
    MOVT.W R0, #4
    BLX fwrite
    B loc_2C87C
loc_2C972:
    BLX __stack_chk_fail
loc_2C976:
    MOVW R1, #0x3380
    MOVW R0, #0x3820
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aSsh2WritePubke
    MOVW R2, #0x623
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "external-function-calls-present",
  "external-call-type:file-io (fwrite)",
  "external-call-type:file-io (fputc)",
  "external-call-type:file-io (puts)",
  "external-call-type:assertion-failure (__assert_fail)",
  "external-call-type:stack-protection (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "magic-number:0x56190",
  "magic-number:0x93A8",
  "magic-number:0xAD70",
  "magic-number:0x37D8",
  "magic-number:0x37FC",
  "magic-number:0x3380",
  "magic-number:0x3820",
  "magic-number:0x623",
  "string-constant:aSsh2WritePubke",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:file-output",
  "inferred-algorithm:assertion-check",
  "inferred-algorithm:stack-protection-check"
]
```<|im_end|>
############
```assembly
loc_1F5DC:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R11, R1
    MOV R1, R2
    MOV R5, R2
    STR R0, [SP,#0x30+var_2C]
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_1F8B6
loc_1F5F4:
    LDR R4, [R5]
    MOV R3, #0x3FFFFFE
    CMP R4, R3
    BHI.W loc_1F906
loc_1F604:
    ADDS R7, R4, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    STR R4, [R6]
    MOV R2, R6
    MOV R1, R5
    LDR R0, [SP,#0x30+var_2C]
    BL sub_1E3C0
    LDR R3, [R6]
    CMP R3, #1
    BLS loc_1F646
loc_1F62A:
    LDR.W R1, [R6,R3,LSL#2]
    ADD.W R2, R6, R3,LSL#2
    CBNZ R1, loc_1F646
loc_1F634:
    SUBS R3, #1
    B loc_1F640
loc_1F638:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1F646
loc_1F640:
    CMP R3, #1
    STR R3, [R6]
    BNE loc_1F638
loc_1F646:
    MOV R1, R5
    MOV R0, R11
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_1F778
loc_1F654:
    LDR R4, [R5]
    MOV R3, #0x3FFFFFE
    CMP R4, R3
    BHI.W loc_1F906
loc_1F664:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    MOV R2, R7
    MOV R1, R5
    MOV R0, R11
    BL sub_1E3C0
    LDR R4, [R7]
    CMP R4, #1
    BLS loc_1F6AC
loc_1F68E:
    LDR.W R2, [R7,R4,LSL#2]
    ADD.W R3, R7, R4,LSL#2
    CBNZ R2, loc_1F6AC
loc_1F698:
    SUBS R4, #1
    B loc_1F6A6
loc_1F69C:
    LDR.W R2, [R3,#-4]!
    SUBS R1, R4, #1
    CBNZ R2, loc_1F6AC
loc_1F6A4:
    MOV R4, R1
loc_1F6A6:
    CMP R4, #1
    STR R4, [R7]
    BNE loc_1F69C
loc_1F6AC:
    MOV R1, R7
    MOV R0, R6
    BL sub_1F358
    CMP R0, #0
    BLT loc_1F78A
loc_1F6B8:
    LDR R2, [R6]
    MOV R3, #0x3FFFFFE
    CMP R4, R2
    IT 
    MOVLT R4, R2
    CMP R4, R3
    BHI.W loc_1F906
loc_1F6CE:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R9, R0
    BLX memset
    STR.W R4, [R9]
    CMP R4, #0
    BEQ.W loc_1F8BA
loc_1F6F0:
    MOVS R0, #1
    MOV LR, R9
    MOV R3, R0
    MOVS R2, #0
loc_1F6F8:
    LDR R1, [R6]
    MOVS R5, #0
    CMP R1, R3
    LDR R1, [R7]
    ITE 
    LDRGE.W R4, [R6,R3,LSL#2]
    MOVLT R4, #0
    CMP R1, R3
    ITET 
    LDRGE.W R1, [R7,R3,LSL#2]
    MOVLT.W R1, #0xFFFFFFFF
    MVNGE R1, R1
    ADDS R4, R4, R0
    ADC.W R5, R5, #0
    ADDS R4, R4, R1
    ADC.W R5, R5, #0
    CMP R4, #0
    IT 
    CMPNE R3, R2
    STR.W R4, [LR,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R8
    MOV R0, R5
    BNE loc_1F6F8
loc_1F738:
    STR.W R2, [R9]
    CMP R5, #0
    BEQ.W loc_1F8C0
loc_1F742:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F75A
loc_1F748:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
loc_1F75A:
    CMP R7, R11
    BEQ loc_1F770
loc_1F75E:
    LDR R1, [R7]
    MOV R0, R7
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R7
    BL sub_19494
loc_1F770:
    MOV R0, R9
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F778:
    MOV R7, R11
    MOV R0, R6
    MOV R1, R7
    LDR.W R4, [R11]
    BL sub_1F358
    CMP R0, #0
    BGE loc_1F6B8
loc_1F78A:
    LDR R2, [R5]
    MOV R3, #0x3FFFFFE
    CMP R4, R2
    IT 
    MOVLT R4, R2
    CMP R4, R3
    MOV R8, R4
    BHI.W loc_1F906
loc_1F7A2:
    ADDS R3, R4, #1
    MOVS R1, #4
    STR R3, [SP,#0x30+var_30]
    MOV R0, R3
    MOV R9, R3
    BL sub_193B8
    MOV R3, R9
    LSLS R2, R3, #2
    MOVS R1, #0
    MOV R4, R0
    BLX memset
    STR.W R8, [R4]
    CMP.W R8, #0
    BEQ.W loc_1F8D4
loc_1F7C8:
    MOV.W R12, #1
    MOV LR, R4
    MOV R3, R12
    MOVS R2, #0
loc_1F7D2:
    LDR R1, [R5]
    MOV.W R9, #0
    CMP R1, R3
    LDR R1, [R7]
    ITE 
    LDRGE.W R0, [R5,R3,LSL#2]
    MOVLT R0, #0
    CMP R1, R3
    ITET 
    LDRGE.W R1, [R7,R3,LSL#2]
    MOVLT.W R10, #0xFFFFFFFF
    MVNGE.W R10, R1
    ADDS.W R0, R0, R12
    ADC.W R1, R9, #0
    ADDS.W R0, R0, R10
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R2, R3
    STR.W R0, [LR,#4]!
    MOV R12, R1
    LDR R1, [SP,#0x30+var_30]
    IT 
    MOVLT R2, R3
    ADDS R3, #1
    CMP R3, R1
    BNE loc_1F7D2
loc_1F81C:
    STR R2, [R4]
    CMP.W R12, #0
    BEQ loc_1F8DC
loc_1F824:
    LDR R3, [R6]
    MOV R1, #0x3FFFFFE
    CMP R2, R3
    IT 
    MOVLT R2, R3
    ADD.W R10, R2, #1
    CMP R10, R1
    BGT loc_1F906
loc_1F83C:
    ADD.W R8, R2, #2
    MOVS R1, #4
    MOVS R5, #0
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R9, R0
    BLX memset
    MOV LR, R9
    MOV R12, R5
    MOVS R3, #1
    STR.W R10, [R9]
loc_1F860:
    LDR R2, [R4]
    MOVS R1, #0
    CMP R3, R2
    LDR R2, [R6]
    ITE 
    LDRLE.W R0, [R4,R3,LSL#2]
    MOVGT R0, #0
    CMP R3, R2
    ITE 
    LDRLE.W R2, [R6,R3,LSL#2]
    MOVGT R2, #0
    ADDS.W R0, R0, R12
    ADC.W R1, R1, #0
    ADDS R0, R0, R2
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R5
    STR.W R0, [LR,#4]!
    IT 
    MOVGT R5, R3
    ADDS R3, #1
    CMP R3, R8
    MOV R12, R1
    BNE loc_1F860
loc_1F89E:
    STR.W R5, [R9]
    MOV R0, R4
    LDR R1, [R4]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    B loc_1F742
loc_1F8B6:
    LDR R6, [SP,#0x30+var_2C]
    B loc_1F646
loc_1F8BA:
    STR.W R4, [R9]
    B loc_1F742
loc_1F8C0:
    ADDS R1, R2, #1
    MOV R0, R9
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    MOV R9, R5
    B loc_1F742
loc_1F8D4:
    STR.W R8, [R4]
    MOV R2, R8
    B loc_1F824
loc_1F8DC:
    ADDS R1, R2, #1
    MOV R0, R4
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVW R1, #0xE76C
    MOVW R0, #0xE85C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModsub
    MOVW R2, #0x523
    BLX __assert_fail
loc_1F906:
    BL sub_115CC
```
Output: R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F748
loc_1F75A:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F772
loc_1F760:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F760
loc_1F772:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F784
loc_1F77A:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F77A
loc_1F784:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F796
loc_1F78C:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F78C
loc_1F796:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F7A8
loc_1F79E:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F79E
loc_1F7A8:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F7BA
loc_1F7AE:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F7AE
loc_1F7BA:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F7CC
loc_1F7C0:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F7C0
loc_1F7CC:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F7DE
loc_1F7D2:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    MOVS R2, #0
    BLX memset
    STR R1, [R6]
    ADDS R6, #4
    B loc_1F7D2
loc_1F7DE:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc
############
```assembly
loc_2F264:
    PUSH {R4,LR}
    MOV.W R1, #0x144
    MOV R4, R0
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:pointer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_194E4)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x144",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:parameter-modification-or-preparation",
  "inferred-algorithm:function-wrapper-or-trampoline"
]
```<|im_end|>
############
```assembly
loc_568FC:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_133B8:
    PUSH {R4,R5,LR}
    MOVW R5, #0x6190
    MOVW R4, #0x97F0
    MOVT.W R5, #5
    MOVT.W R4, #3
    SUB SP, SP, #0x14
    LDR R3, [R5]
    LDR.W R2, [R4,R1,LSL#2]
    STR R3, [SP,#0x20+var_14]
    CBNZ R2, loc_13400
loc_133D6:
    ADD.W R3, R4, R1,LSL#2
    LDR.W R3, [R3,#0x2E0]
    CMP R3, #2
    BNE loc_1343C
loc_133E2:
    ADD R3, SP, #0x20+var_10
    LDR R0, [R0]
    STR.W R1, [R3,#-0xC]!
    MOV R1, R3
    BL sub_35A34
    CBZ R0, loc_13420
loc_133F2:
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R5]
    LDR R0, [R0,#8]
    CMP R2, R3
    BNE loc_1341C
loc_133FC:
    ADD SP, SP, #0x14
    POP {R4,R5,PC}
loc_13400:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9EFC
    ADDW R3, R4, #0x5E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOVW R2, #0x123
    BLX __assert_fail
loc_1341C:
    BLX __stack_chk_fail
loc_13420:
    MOVW R1, #0x9EF4
    MOVW R0, #0xA004
    ADDW R3, R4, #0x5E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOVW R2, #0x127
    BLX __assert_fail
loc_1343C:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9F64
    ADDW R3, R4, #0x5E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOV.W R2, #0x124
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "assertion-failure-present",
  "assertion-message-contains:__assert_fail",
  "assertion-message-contains:__stack_chk_fail",
  "magic-number:0x6190",
  "magic-number:0x97F0",
  "magic-number:0x5",
  "magic-number:0x3",
  "magic-number:0x9EF4",
  "magic-number:0x9EFC",
  "magic-number:0x9F64",
  "magic-number:0xA004",
  "magic-number:0x123",
  "magic-number:0x124",
  "magic-number:0x127",
  "magic-number:0x5E4",
  "integer-size-hint:32-bit",
  "bitwise-operation-shift-left",
  "bitwise-operation-shift-right",
  "bitwise-operation-OR",
  "bitwise-operation-XOR",
  "bitwise-operation-Clear",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:stack-checking",
  "inferred-algorithm:assertion-checking",
  "inferred-algorithm:conditional-execution",
  "inferred-algorithm:data-access-and-modification"
]
```<|im_end|>
############
```assembly
loc_568A8:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1992C:
    PUSH {R4-R6,LR}
    MOV R5, R1
    MOV R6, R0
    BLX strlen
    MOV R4, R0
    MOV R0, R5
    BLX strlen
    CMP R4, R0
    BCC loc_19954
loc_19942:
    SUBS R0, R4, R0
    MOV R1, R5
    ADD R0, R6
    BLX strcmp
    CLZ.W R0, R0
    LSRS R0, R0, #5
    POP {R4-R6,PC}
loc_19954:
    MOVS R0, #0
    POP {R4-R6,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:string-length-helper (strlen)",
  "external-call-type:string-comparison-helper (strcmp)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:LSR",
  "bitwise-operation:CLZ",
  "inferred-algorithm:string-comparison",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:length-check",
  "inferred-algorithm:conditional-result-generation"
]
```<|im_end|>
############
```assembly
loc_34ABC:
    PUSH {R4,LR}
    MOVS R1, #8
    MOV R4, R0
    MOVS R0, #1
    BL sub_193B8
    MOVS R2, #0
    STR R4, [R0,#4]
    STR R2, [R0]
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:8",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-initialization",
  "inferred-algorithm:object-creation-or-setup",
  "inferred-algorithm:conditional-branching-on-result"
]
```<|im_end|>
############
```assembly
loc_28528:
    CMP R0, #8
    PUSH {R3-R7,LR}
    MOV R4, R0
    MOV R6, R1
    MOV R7, R2
    BEQ loc_2856C
loc_28534:
    CMP R0, #5
    BEQ loc_2853E
loc_28538:
    MOVS R3, #0
loc_2853A:
    MOV R0, R3
    POP {R3-R7,PC}
loc_2853E:
    MOV R5, #0x3F5B0
    MOV R2, R0
    ADD.W R1, R5, #0x568
    MOV R0, R6
    BLX memcmp
    CBZ R0, loc_2859A
loc_28554:
    MOV R2, R4
    MOV R0, R6
    ADD.W R1, R5, #0x570
    BLX memcmp
    CMP R0, #0
    BNE loc_28538
loc_28564:
    MOVS R0, #2
    ADD.W R3, R5, #0x530
    B loc_28588
loc_2856C:
    MOV R5, #0x3F5B0
    MOV R2, R0
    MOV R0, R1
    ADD.W R1, R5, #0x560
    BLX memcmp
    CMP R0, #0
    BNE loc_28538
loc_28584:
    ADD.W R3, R5, #0x540
loc_28588:
    ADD.W R5, R5, R0,LSL#2
    LDR R3, [R3]
    LDR.W R4, [R5,#0x578]
    BLX R3
    MOV R3, R4
    STR R0, [R7]
    B loc_2853A
loc_2859A:
    ADD.W R3, R5, #0x550
    MOVS R0, #1
    B loc_28588
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcmp)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "magic-number:0x3F5B0",
  "magic-number:0x568",
  "magic-number:0x570",
  "magic-number:0x560",
  "magic-number:0x578",
  "magic-number:0x540",
  "magic-number:0x550",
  "inferred-algorithm:data-comparison-and-processing",
  "inferred-algorithm:loop-with-counter-increment",
  "inferred-algorithm:callback-invocation"
]
```<|im_end|>
############
```assembly
loc_56984:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_5698C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_112B4:
    ADR R12, 0x112BC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__xstat_ptr - 0x552BC)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:register-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__xstat_ptr)",
  "address-or-offset-constant:0x112BC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__xstat_ptr",
  "inferred-algorithm:system-call-or-service",
  "inferred-algorithm:file-status-check",
  "inferred-algorithm:operating-system-interaction"
]
```<|im_end|>
############
```assembly
loc_1B404:

loc_1B5A8:
    PUSH {R4}
    MOV R3, R1
    MOV R4, R2
    MOV R2, R0
    MOV R1, R4
    MOV R0, R3
    POP.W {R4}
    B sub_1B404
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1B404)",
  "integer-size-hint:32-bit",
  "register-swapping-present",
  "inferred-algorithm:loop-with-side-effects",
  "inferred-algorithm:conditional-loop-execution",
  "inferred-algorithm:indirect-function-calls"
]
```<|im_end|>
############
```assembly
loc_38A40:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "standard-function-return",
  "unconditional-jump-to-return-address"
]
```<|im_end|>
############
```assembly
loc_28EBC:
    PUSH {R4,LR}
    MOV.W R1, #0x114
    MOV R4, R0
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_194E4)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x114",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:function-wrapper-or-trampoline"
]
```<|im_end|>
############
```assembly
loc_11420:
    ADR R12, 0x11428
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__sprintf_chk_ptr - 0x55428)]!
```
Output:```json
[
  "return-type:undefined",
  "argument-count:undefined",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:undefined",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:sprintf_chk",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11428",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__sprintf_chk_ptr",
  "address-or-offset-constant:0x55428",
  "inferred-algorithm:string-formatting-with-check",
  "inferred-algorithm:runtime-code-pointer-dereferencing"
]
```<|im_end|>
############
```assembly
loc_233E8:
    PUSH {R4,LR}
    MOV R4, R0
    LDR R0, [R0]
    CBZ R0, loc_233F4
loc_233F0:
    BL sub_1E6B0
loc_233F4:
    LDR R0, [R4,#4]
    CBZ R0, loc_233FC
loc_233F8:
    BL sub_1E6B0
loc_233FC:
    LDR R0, [R4,#8]
    CBZ R0, loc_23404
loc_23400:
    BL sub_1E6B0
loc_23404:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2340C
loc_23408:
    BL sub_1E6B0
loc_2340C:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_23414
loc_23410:
    BL sub_1E6B0
loc_23414:
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-read-from-input-parameter-offset:10",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:callback-or-handler-invocation",
  "inferred-algorithm:data-processing-or-analysis"
]
```<|im_end|>
############
```assembly
loc_389F8:
    PUSH {R1,LR}
    MOV.W R0, #8
    BLX raise
    POP {R1,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (raise)",
  "integer-size-hint:16-bit",
  "fixed-value-assignment:8",
  "inferred-algorithm:error-handling-or-signaling",
  "inferred-algorithm:exception-generation"
]
```<|im_end|>
############
```assembly
loc_2A8BC:
    PUSH.W {R4-R11,LR}
    SUB.W SP, SP, #0x4000
    SUB SP, SP, #0x7C
    MOV R4, #0x43300
    MOV R10, R1
    STR R0, [SP,#0x40A0+var_409C]
    MOV R7, R2
    LDM R4!, {R0-R3}
    ADD R5, SP, #0x40A0+var_402C
    MOV R6, #0x56190
    MOV LR, R5
    CMP R7, #0
    LDR.W R12, [R6]
    STM.W LR!, {R0-R3}
    IT 
    MOVNE.W R9, #3
    LDM R4!, {R0-R3}
    IT 
    MOVEQ.W R9, #0
    LDR R4, [R4]
    STM.W LR!, {R0-R3}
    ADD.W R2, SP, #0x40A0+var_A0
    ADDS R2, #0x74
    STRB.W R4, [LR]
    MOVS R3, #0
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x22]
    ADD.W R4, SP, #0x40A0+var_4002
    STRB.W R3, [R5,#0x23]
    STRB.W R3, [R5,#0x24]
    STRB.W R3, [R5,#0x25]
    STRB.W R9, [R5,#0x21]
    STR.W R12, [R2]
    BL sub_1F158
    ASRS R3, R0, #0x18
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x26]
    BL sub_1F158
    ASRS R3, R0, #0x10
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x27]
    BL sub_1F158
    ASRS R3, R0, #8
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x28]
    BL sub_1F158
    LDR.W R1, [R10,#8]
    STRB.W R0, [R5,#0x29]
    MOV R0, R4
    BL sub_1F294
    LDR.W R1, [R10,#0xC]
    ADD.W R8, R4, R0
    MOV R0, R8
    BL sub_1F294
    LDR.W R4, [R10,#0x20]
    ADD.W R11, R8, R0
    CMP R4, #0
    BEQ.W loc_2AAC4
loc_2A984:
    STR R0, [SP,#0x40A0+var_40A0]
    MOV R0, R4
    BLX strlen
    LDR R2, [SP,#0x40A0+var_40A0]
    ADD.W R9, R11, #4
    LSRS R0, R0, #0x18
    STRB.W R0, [R8,R2]
    MOV R0, R4
    BLX strlen
    LSRS R3, R0, #0x10
    MOV R0, R4
    STRB.W R3, [R11,#1]
    BLX strlen
    LSRS R3, R0, #8
    MOV R0, R4
    STRB.W R3, [R11,#2]
    BLX strlen
    STRB.W R0, [R11,#3]
    MOV R0, R4
    BLX strlen
    MOV R1, R4
    MOV R2, R0
    MOV R0, R9
    BLX memcpy
    MOV R0, R4
    BLX strlen
    ADD R9, R0
loc_2A9D2:
    BL sub_2D1F4
    ADD.W R4, R9, #4
    STRB.W R0, [R9]
    BL sub_2D1F4
    LDRB.W R3, [R9]
    LDR.W R1, [R10,#0x10]
    STRB.W R3, [R9,#2]
    UXTB R3, R0
    MOV R0, R4
    STRB.W R3, [R9,#1]
    STRB.W R3, [R9,#3]
    BL sub_1F294
    LDR.W R1, [R10,#0x1C]
    ADD R4, R0
    MOV R0, R4
    BL sub_1F294
    LDR.W R1, [R10,#0x18]
    ADD R4, R0
    MOV R0, R4
    BL sub_1F294
    LDR.W R1, [R10,#0x14]
    ADD R4, R0
    MOV R0, R4
    BL sub_1F294
    ADD R4, R0
    SUB.W R10, R4, R9
    TST.W R10, #7
    BEQ loc_2AA3E
loc_2AA2E:
    MOVS R3, #0
loc_2AA30:
    STRB.W R3, [R4],#1
    SUB.W R10, R4, R9
    TST.W R10, #7
    BNE loc_2AA30
loc_2AA3E:
    CBZ R7, loc_2AA74
loc_2AA40:
    ADD R0, SP, #0x40A0+var_4098
    ADD R3, SP, #0x40A0+var_403C
    STR R3, [SP,#0x40A0+var_40A0]
    BL sub_28FF0
    MOV R0, R7
    BLX strlen
    MOV R1, R7
    MOV R2, R0
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_4098
    LDR R0, [SP,#0x40A0+var_40A0]
    BL sub_29130
    MOV R1, R9
    LDR R0, [SP,#0x40A0+var_40A0]
    MOV R2, R10
    BL sub_22B60
    LDR R0, [SP,#0x40A0+var_40A0]
    MOVS R1, #0x10
    BL sub_194E4
loc_2AA74:
    LDR R0, [SP,#0x40A0+var_409C]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R7, R0
    CBZ R0, loc_2AAA0
loc_2AA88:
    SUBS R4, R4, R5
    MOV R0, R5
    MOV R3, R7
    MOVS R1, #1
    MOV R2, R4
    BLX fwrite
    MOV R5, R0
    MOV R0, R7
    BLX fclose
    CBZ R0, loc_2AABA
loc_2AAA0:
    MOVS R0, #0
loc_2AAA2:
    ADD.W R3, SP, #0x40A0+var_A0
    ADDS R3, #0x74
    LDR R2, [R3]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_2AADA
loc_2AAB0:
    ADD.W SP, SP, #0x4000
    ADD SP, SP, #0x7C
    POP.W {R4-R11,PC}
loc_2AABA:
    SUBS R0, R4, R5
    CLZ.W R0, R0
    LSRS R0, R0, #5
    B loc_2AAA2
loc_2AAC4:
    STRB.W R4, [R8,R0]
    ADD.W R9, R11, #4
    STRB.W R4, [R11,#1]
    STRB.W R4, [R11,#2]
    STRB.W R4, [R11,#3]
    B loc_2A9D2
loc_2AADA:
    BLX __stack_chk_fail
```
Output:03C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var
############
```assembly
loc_1BFB4:
    PUSH {R4-R6,LR}
    MOV R4, #0x56190
    SUB.W SP, SP, #0x3F8
    MOV R5, R1
    MOV R1, R0
    LDR R3, [R4]
    ADD R0, SP, #0x408+var_404
    MOV R6, R2
    STR R3, [SP,#0x408+var_14]
    BL sub_1B958
    MOVS R2, #0x20
    MOVS R1, #0
    ADD R0, SP, #0x408+s
    BLX memset
    ADD R2, SP, #0x408+var_404
    MOV R1, R6
    MOV R0, R5
    BL sub_1B404
    ADD R0, SP, #0x408+var_404
    MOV.W R1, #0x3F0
    BL sub_194E4
    LDR R2, [SP,#0x408+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_1BFFE
loc_1BFF8:
    ADD.W SP, SP, #0x3F8
    POP {R4-R6,PC}
loc_1BFFE:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x3F8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (sub_1B958)",
  "external-call-type:data-processing-helper (sub_1B404)",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x20",
  "fixed-value-assignment:0x3F0",
  "address-or-offset-constant:sub_1B958",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:sub_1B404",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-initialization-or-zeroing",
  "inferred-algorithm:data-comparison",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:stack-protection-check"
]
```<|im_end|>
############
```assembly
loc_238E4:
    PUSH {R3-R7,LR}
    MOVS R0, #1
    MOV R6, R1
    MOVS R1, #0x14
    MOV R5, R2
    BL sub_193B8
    LDR R3, [R5]
    CMP R3, #3
    IT 
    MOVLE R3, #0
    MOV R4, R0
    IT 
    STRLE R3, [R0]
    BGT loc_2395C
loc_23902:
    MOVS R3, #0
    STR R3, [R4,#4]
loc_23906:
    MOVS R3, #0
    STR R3, [R4,#8]
loc_2390A:
    MOVS R3, #0
    STR R3, [R4,#0xC]
loc_2390E:
    MOVS R3, #0
loc_23910:
    LDR R2, [R4]
    STR R3, [R4,#0x10]
    CMP R2, #0
    BEQ.W loc_23B10
loc_2391A:
    LDR R0, [R4,#4]
    CMP R0, #0
    BEQ.W loc_23B0A
loc_23922:
    LDR R1, [R4,#8]
    CMP R1, #0
    BEQ.W loc_23B0A
loc_2392A:
    LDR R1, [R4,#0xC]
    CMP R3, #0
    IT 
    CMPNE R1, #0
    BEQ.W loc_23B0A
loc_23936:
    MOV R5, #0x56170
    LDR R1, [R5]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_23B06
loc_2394A:
    LDR R1, [R5]
    LDR R0, [R4]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_23B06
loc_23958:
    MOV R0, R4
    POP {R3-R7,PC}
loc_2395C:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_239A8
loc_2397C:
    SUBS R3, #4
    LDR R2, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT loc_239A8
loc_2398E:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R7, [R6]
    STR R3, [R5]
    CBZ R0, loc_239AA
loc_23998:
    LDRSB.W R2, [R2,#4]
    CMP R2, #0
    BLT loc_239A8
loc_239A0:
    BL sub_1EDA8
    LDR R3, [R5]
    B loc_239AA
loc_239A8:
    MOVS R0, #0
loc_239AA:
    CMP R3, #3
    STR R0, [R4]
    BLE loc_23902
loc_239B0:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_239FC
loc_239D0:
    SUBS R3, #4
    LDR R2, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT loc_239FC
loc_239E2:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R7, [R6]
    STR R3, [R5]
    CBZ R0, loc_239FE
loc_239EC:
    LDRSB.W R2, [R2,#4]
    CMP R2, #0
    BLT loc_239FC
loc_239F4:
    BL sub_1EDA8
    LDR R3, [R5]
    B loc_239FE
loc_239FC:
    MOVS R0, #0
loc_239FE:
    CMP R3, #3
    STR R0, [R4,#4]
    BLE loc_23906
loc_23A04:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_23A50
loc_23A24:
    SUBS R3, #4
    LDR R2, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT loc_23A50
loc_23A36:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R7, [R6]
    STR R3, [R5]
    CBZ R0, loc_23A52
loc_23A40:
    LDRSB.W R2, [R2,#4]
    CMP R2, #0
    BLT loc_23A50
loc_23A48:
    BL sub_1EDA8
    LDR R3, [R5]
    B loc_23A52
loc_23A50:
    MOVS R0, #0
loc_23A52:
    CMP R3, #3
    STR R0, [R4,#8]
    BLE.W loc_2390A
loc_23A5A:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_23AA6
loc_23A7A:
    SUBS R3, #4
    LDR R2, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT loc_23AA6
loc_23A8C:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R7, [R6]
    STR R3, [R5]
    CBZ R0, loc_23AA8
loc_23A96:
    LDRSB.W R2, [R2,#4]
    CMP R2, #0
    BLT loc_23AA6
loc_23A9E:
    BL sub_1EDA8
    LDR R3, [R5]
    B loc_23AA8
loc_23AA6:
    MOVS R0, #0
loc_23AA8:
    CMP R3, #3
    STR R0, [R4,#0xC]
    BLE.W loc_2390E
loc_23AB0:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT.W loc_2390E
loc_23AD0:
    LDR R3, [R5]
    LDR R2, [R6]
    SUBS R3, #4
    STR R3, [R5]
    CMP R1, R3
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT.W loc_2390E
loc_23AE6:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R7, [R6]
    STR R3, [R5]
    CMP R0, #0
    BEQ.W loc_2390E
loc_23AF4:
    LDRSB.W R3, [R2,#4]
    CMP R3, #0
    BLT.W loc_2390E
loc_23AFE:
    BL sub_1EDA8
    MOV R3, R0
    B loc_23910
loc_23B06:
    LDR R2, [R4]
    CBZ R2, loc_23B10
loc_23B0A:
    MOV R0, R2
    BL sub_1E6B0
loc_23B10:
    LDR R0, [R4,#4]
    CBZ R0, loc_23B18
loc_23B14:
    BL sub_1E6B0
loc_23B18:
    LDR R0, [R4,#8]
    CBZ R0, loc_23B20
loc_23B1C:
    BL sub_1E6B0
loc_23B20:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_23B28
loc_23B24:
    BL sub_1E6B0
loc_23B28:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_23B30
loc_23B2C:
    BL sub_1E6B0
loc_23B30:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP {R3-R7,PC}
```
Output: R1, R0, #0
    BLT loc_23A20
loc_23A14:
    SUBS R3, #4
    LDR R2, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT loc_23A20
loc_23A26:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R7, [R6]
    STR R3, [R5]
    CBZ R0, loc_23A2A
loc_23A24:
    LDRSB.W R2, [R2,#4]
    CMP R2, #0
    BLT loc_23A20
loc_23A2C:
    BL sub_1EDA8
    LDR R3, [R5]
    B loc_23A2A
loc_23A20:
    MOVS R0, #0
loc_23A2A:
    CMP R3, #3
    STR R0, [R4,#8]
    BLE loc_2390A
loc_23A30:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_23A40
loc_23A34:
    SUBS R3, #4
    LDR R2, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT loc_23A40
loc_23A46:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R7, [R6]
    STR R3, [R5]
    CBZ R0, loc_23A4A
loc_23A44:
    LDRSB.W R2, [R2,#4]
    CMP R2, #0
    BLT loc_23A40
loc_23A4C:
    BL sub_1EDA8
    LDR R3, [R5]
    B loc_23A4A
loc_23A40:
    MOVS R0, #0
loc_23A4A:
    CMP R3, #3
    STR R0, [R4,#0xC]
    BLE loc_2390E
loc_23A50:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_23A60
loc_23A54:
    SUBS R3, #4
    LDR R2, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R2, #4
    IT 
    STRGT R0, [R6]
    BGT loc_23A60
loc_23A66:
    SUBS R3, R3, R1
    ADDS R7, R0, R1
    STR R
############
```assembly
loc_33BBC:
    PUSH {R4-R7,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0xC
    MOV R6, R0
    LDR R3, [R5]
    MOV R0, SP
    STR R3, [SP,#0x20+var_1C]
    BLX time
    LDR R3, [SP,#0x20+var_20]
    ADDS R3, #1
    BEQ loc_33C04
loc_33BDA:
    MOV R0, SP
    MOV R4, R6
    BLX localtime
    LDR.W LR, [SP,#0x20+var_1C]
    LDR R7, [R5]
    CMP LR, R7
    MOV R5, R0
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W R5, {R0-R2}
    STM.W R4, {R0-R2}
    MOV R0, R6
    BNE loc_33C22
loc_33C00:
    ADD SP, SP, #0xC
    POP {R4-R7,PC}
loc_33C04:
    MOVW R3, #0x42A0
    MOVW R1, #0x42A8
    MOVW R0, #0x42B0
    MOVT.W R3, #4
    MOVT.W R1, #4
    MOVS R2, #0xE
    MOVT.W R0, #4
    BLX __assert_fail
loc_33C22:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-condition",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (time)",
  "external-call-type:data-processing-helper (localtime)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:1",
  "fixed-value-assignment:0xE",
  "fixed-value-assignment:0x42A0",
  "fixed-value-assignment:0x42A8",
  "fixed-value-assignment:0x42B0",
  "fixed-value-assignment:4",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:array-copy",
  "inferred-algorithm:assertion-check",
  "inferred-algorithm:stack-protection-check"
]
```<|im_end|>
############
```assembly
loc_36650:
    PUSH {R3-R5,LR}
    MOVS R1, #4
    MOV R5, R0
    MOVS R0, #1
    BL sub_193B8
    MOV R4, R0
    MOV R0, R5
    BL sub_18A88
    STR R0, [R4]
    MOV R0, R4
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:1",
  "fixed-value-assignment:4",
  "memory-write-to-output-parameter-offset",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:callback-or-handler-invocation",
  "inferred-algorithm:state-update-or-storage"
]
```<|im_end|>
############
```assembly
loc_111C8:
    ADR R12, 0x111D0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fflush_ptr - 0x551D0)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (flush_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111D0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:flush_ptr",
  "inferred-algorithm:file-io-or-stream-flushing"
]
```<|im_end|>
############
```assembly
loc_1EAC0:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x24
    LDR R5, [R2]
    MOV R4, R2
    LDR.W R3, [R2,R5,LSL#2]
    LSLS R2, R5, #2
    STR R2, [SP,#0x48+var_30]
    CMP R3, #0
    BEQ.W loc_1ED42
loc_1EAD8:
    MOV R10, R0
    MOV R8, R1
    MOV R0, R5
    MOVS R1, #4
    BL sub_193B8
    CMP R5, #0
    IT 
    MOVGT R3, #0
    MOV R9, R0
    IT 
    SUBGT R2, R0, #4
    BLE loc_1EB04
loc_1EAF2:
    LDR R1, [R4]
    SUBS R1, R1, R3
    ADDS R3, #1
    CMP R5, R3
    LDR.W R1, [R4,R1,LSL#2]
    STR.W R1, [R2,#4]!
    BNE loc_1EAF2
loc_1EB04:
    LDR.W R6, [R10]
    LDR.W R3, [R8]
    CMP R6, R3
    IT 
    MOVCC R6, R3
    LSLS R4, R6, #1
    CMP R5, R4
    BLT loc_1EB22
loc_1EB18:
    ADD.W R6, R5, R5,LSR#31
    ASRS R6, R6, #1
    ADDS R6, #1
    LSLS R4, R6, #1
loc_1EB22:
    MOVS R1, #4
    MOV R0, R6
    BL sub_193B8
    LDR.W R3, [R10]
    SUBS R7, R6, R3
    CMP R7, #0
    MOV R11, R0
    BLE loc_1EB42
loc_1EB36:
    LSLS R2, R7, #2
    MOVS R1, #0
    BLX memset
    LDR.W R3, [R10]
loc_1EB42:
    CMP R3, #0
    ITT 
    ADDGT.W R7, R11, R7,LSL#2
    MOVGT R2, #0
    BLE loc_1EB62
loc_1EB4E:
    SUBS R3, R3, R2
    ADDS R2, #1
    LDR.W R3, [R10,R3,LSL#2]
    STR.W R3, [R7],#4
    LDR.W R3, [R10]
    CMP R3, R2
    BGT loc_1EB4E
loc_1EB62:
    MOVS R1, #4
    MOV R0, R6
    BL sub_193B8
    LDR.W R3, [R8]
    SUBS R7, R6, R3
    CMP R7, #0
    STR R0, [SP,#0x48+var_3C]
    BLE loc_1EB82
loc_1EB76:
    LSLS R2, R7, #2
    MOVS R1, #0
    BLX memset
    LDR.W R3, [R8]
loc_1EB82:
    CMP R3, #0
    BLE loc_1EBA2
loc_1EB86:
    LDR R2, [SP,#0x48+var_3C]
    ADD.W R7, R2, R7,LSL#2
    MOVS R2, #0
loc_1EB8E:
    SUBS R3, R3, R2
    ADDS R2, #1
    LDR.W R3, [R8,R3,LSL#2]
    STR.W R3, [R7],#4
    LDR.W R3, [R8]
    CMP R3, R2
    BGT loc_1EB8E
loc_1EBA2:
    MOVS R1, #4
    MOV R0, R4
    BL sub_193B8
    CMP R6, #0x32
    IT 
    MOVLE R3, #0
    MOV R10, R0
    ITT 
    STRLE R3, [SP,#0x48+var_34]
    MOVLE R0, R3
    BLE loc_1EBD0
loc_1EBBA:
    MOV R3, R6
    MOVS R2, #0
loc_1EBBE:
    SUB.W R3, R3, R3,ASR#1
    ADDS R3, #1
    CMP R3, #0x32
    ADD.W R2, R2, R3,LSL#2
    BGT loc_1EBBE
loc_1EBCC:
    MOV R0, R2
    STR R2, [SP,#0x48+var_34]
loc_1EBD0:
    MOVS R1, #4
    BL sub_193B8
    STR R0, [SP,#0x48+var_38]
    LDR.W R0, [R9]
    LSRS R1, R0, #0x10
    MOV.W R3, R0,LSL#16
    IT 
    MOVNE R3, R0
    LSRS R2, R3, #0x18
    MOV.W R8, R3,LSL#8
    IT 
    MOVEQ R3, R8
    CMP R1, #0
    ITE 
    MOVEQ R1, #0x10
    MOVNE R1, #0
    CMP R2, #0
    MOV.W R2, R3,LSR#28
    ITE 
    MOVEQ.W R8, #8
    MOVNE.W R8, #0
    CMP R2, #0
    MOV.W R2, R3,LSL#4
    ADD R8, R1
    ITE 
    MOVNE R2, R3
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#30
    IT 
    MOVNE R1, #0
    CMP R3, #0
    ADD R8, R1
    MOV.W R3, R2,LSL#2
    ITE 
    MOVEQ R1, #2
    MOVNE R1, #0
    ADD R8, R1
    IT 
    MOVNE R3, R2
    CMP R3, #0
    IT 
    ADDGE.W R8, R8, #1
    CMP.W R8, #0
    BEQ loc_1EC54
loc_1EC40:
    CMP R5, #1
    LSL.W R0, R0, R8
    ITTTT 
    RSBGT.W R2, R8, #0x20
    LDRGT.W R3, [R9,#4]
    LSRGT R3, R2
    ORRGT R0, R3
loc_1EC54:
    CMP R5, R4
    MOV R7, R5
    IT 
    MOVGE R7, R4
    BL sub_1D700
    LDR R3, [SP,#0x48+var_38]
    MOV R2, R10
    LDR R1, [SP,#0x48+var_3C]
    STR R3, [SP,#0x48+var_48]
    MOV R3, R6
    STR R0, [SP,#0x48+var_2C]
    MOV R0, R11
    BL sub_1DB88
    LDR R3, [SP,#0x48+var_2C]
    MOV R2, R9
    MOV R1, R4
    MOV R0, R10
    STMEA.W SP, {R3,R8}
    MOV R3, R5
    BL sub_1E170
    MOV R3, #0x3FFFFFE
    CMP R7, R3
    BHI loc_1ED5C
loc_1EC90:
    ADD.W R8, R7, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R5, R0
    BLX memset
    STR R7, [R5]
    CBZ R7, loc_1ECEC
loc_1ECAC:
    SUBS R4, R4, R7
    MOV R2, R7
    MOVS R3, #0
    ADD.W R4, R10, R4,LSL#2
    B loc_1ECBA
loc_1ECB8:
    LDR R2, [R5]
loc_1ECBA:
    SUBS R2, R2, R3
    LDR.W R1, [R4],#4
    ADDS R3, #1
    CMP R7, R3
    STR.W R1, [R5,R2,LSL#2]
    BNE loc_1ECB8
loc_1ECCA:
    LDR R3, [R5]
    CMP R3, #1
    BLS loc_1ECEC
loc_1ECD0:
    LDR.W R1, [R5,R3,LSL#2]
    ADD.W R2, R5, R3,LSL#2
    CBNZ R1, loc_1ECEC
loc_1ECDA:
    SUBS R3, #1
    B loc_1ECE6
loc_1ECDE:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1ECEC
loc_1ECE6:
    CMP R3, #1
    STR R3, [R5]
    BNE loc_1ECDE
loc_1ECEC:
    LDR R3, [SP,#0x48+var_34]
    LDR R4, [SP,#0x48+var_38]
    LSLS R1, R3, #2
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LSLS R1, R6, #3
    MOV R0, R10
    LSLS R6, R6, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR R1, [SP,#0x48+var_30]
    MOV R0, R9
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    MOV R1, R6
    MOV R0, R11
    BL sub_194E4
    MOV R0, R11
    BL sub_19494
    LDR R4, [SP,#0x48+var_3C]
    MOV R1, R6
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R5
    ADD SP, SP, #0x24
    POP.W {R4-R11,PC}
loc_1ED42:
    MOVW R1, #0xE76C
    MOVW R0, #0xE7E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModmul
    MOVW R2, #0x4C1
    BLX __assert_fail
loc_1ED5C:
    BL sub_115CC
```
Output:4
    MOV.W R3, R2,LSR#29
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#26
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#27
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#24
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#25
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#22
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#23
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#20
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#21
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#18
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#19
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#16
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#17
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#14
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#15
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#12
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#13
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#10
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#11
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#8
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#9
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#6
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#7
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#4
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#5
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#2
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#3
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#0
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#1
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#0
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#1
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,LSR#0
    ITE 
    MOVEQ R1, #4
    MOV.W R3, R2,LSR#1
    IT 
    MOVNE R1, #0
    ADD R8, R1
    MOV.W R3, R2,
############
```assembly
loc_56978:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11408:
    ADR R12, 0x11410
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(setpwent_ptr - 0x55410)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:register-based",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (setpwent_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11410",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:setpwent_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:user-account-management"
]
```<|im_end|>
############
```assembly
loc_32BC0:
    PUSH.W {R4-R9,LR}
    MOVW R8, #0x6190
    LDR R3, [R0,#0x54]
    MOVT.W R8, #5
    LDR R6, [R0,#0x5C]
    SUB SP, SP, #0x4C
    CMP R3, #0x37
    LDR.W R2, [R8]
    ITE 
    RSBGT.W R9, R3, #0x78
    RSBLE.W R9, R3, #0x38
    LDR R7, [R0,#0x58]
    MOV R4, R0
    MOV R5, R1
    MOV.W LR, R6,LSR#29
    STR R2, [SP,#0x68+var_24]
    MOVS R3, #0x40
    MOV R2, R9
    MOVS R1, #0
    ADD R0, SP, #0x68+var_64
    ORR.W R7, LR, R7,LSL#3
    LSLS R6, R6, #3
    BLX __memset_chk
    MOV R2, R9
    ADD R1, SP, #0x68+var_64
    MOV R0, R4
    MOVS R3, #0x80
    STRB.W R3, [SP,#0x68+var_64]
    BL sub_3278C
    MOVS R2, #8
    ADD R1, SP, #0x68+var_64
    MOV R0, R4
    MOV.W LR, R7,LSR#24
    LSRS R3, R7, #0x10
    STRB.W R7, [SP,#0x68+var_61]
    STRB.W R6, [SP,#0x68+var_5D]
    LSRS R7, R2
    STRB.W LR, [SP,#0x68+var_64]
    MOV.W LR, R6,LSR#24
    STRB.W R3, [SP,#0x68+var_63]
    LSRS R3, R6, #0x10
    STRB.W R7, [SP,#0x68+var_62]
    LSRS R6, R2
    STRB.W R3, [SP,#0x68+var_5F]
    STRB.W LR, [SP,#0x68+var_60]
    STRB.W R6, [SP,#0x68+var_5E]
    BL sub_3278C
    LDRB R3, [R4,#3]
    STRB R3, [R5]
    LDRH R3, [R4,#2]
    STRB R3, [R5,#1]
    LDR R3, [R4]
    LSRS R3, R3, #8
    STRB R3, [R5,#2]
    LDR R3, [R4]
    STRB R3, [R5,#3]
    LDRB R3, [R4,#7]
    STRB R3, [R5,#4]
    LDRH R3, [R4,#6]
    STRB R3, [R5,#5]
    LDR R3, [R4,#4]
    LSRS R3, R3, #8
    STRB R3, [R5,#6]
    LDR R3, [R4,#4]
    STRB R3, [R5,#7]
    LDRB R3, [R4,#0xB]
    STRB R3, [R5,#8]
    LDRH R3, [R4,#0xA]
    STRB R3, [R5,#9]
    LDR R3, [R4,#8]
    LSRS R3, R3, #8
    STRB R3, [R5,#0xA]
    LDR R3, [R4,#8]
    STRB R3, [R5,#0xB]
    LDRB R3, [R4,#0xF]
    STRB R3, [R5,#0xC]
    LDRH R3, [R4,#0xE]
    STRB R3, [R5,#0xD]
    LDR R3, [R4,#0xC]
    LSRS R3, R3, #8
    STRB R3, [R5,#0xE]
    LDR R3, [R4,#0xC]
    STRB R3, [R5,#0xF]
    LDRB R3, [R4,#0x13]
    LDR R1, [SP,#0x68+var_24]
    LDR.W R2, [R8]
    STRB R3, [R5,#0x10]
    LDRH R3, [R4,#0x12]
    CMP R1, R2
    STRB R3, [R5,#0x11]
    LDR R3, [R4,#0x10]
    MOV.W R3, R3,LSR#8
    STRB R3, [R5,#0x12]
    LDR R3, [R4,#0x10]
    STRB R3, [R5,#0x13]
    BNE loc_32CB6
loc_32CB0:
    ADD SP, SP, #0x4C
    POP.W {R4-R9,PC}
loc_32CB6:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__memset_chk)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shifts-present",
  "bitwise-OR-present",
  "bitwise-XOR-present",
  "bitwise-NOT-present",
  "fixed-value-comparison:0x37",
  "fixed-value-assignment:0x6190",
  "fixed-value-assignment:0x5",
  "address-or-offset-constant:0x6190",
  "address-or-offset-constant:__memset_chk",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-copying-or-transformation",
  "inferred-algorithm:data-packing",
  "inferred-algorithm:data-unpacking",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:loop-with-counter-pattern"
]
```<|im_end|>
############
```assembly
loc_1E6B0:
    LDR R1, [R0]
    PUSH {R4,LR}
    ADDS R1, #1
    MOV R4, R0
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_194E4)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shift-left",
  "memory-read-from-input-parameter-offset:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-addition:1",
  "fixed-value-multiplication-by-4",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:increment-and-scale"
]
```<|im_end|>
############
```assembly
loc_23B3C:
    PUSH.W {R3-R9,LR}
    MOVS R0, #1
    MOV R5, R1
    MOVS R1, #0x14
    MOV R7, R2
    BL sub_193B8
    CMP R7, #3
    MOV R4, R0
    BGT loc_23B5E
loc_23B52:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_23B5E:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    BLT loc_23B52
loc_23B7A:
    SUBS R2, R7, #4
    ADDS R0, R5, #4
    CMP R3, R2
    BGT loc_23B52
loc_23B82:
    SUBS R3, #7
    IT 
    MOVNE R3, #1
    CMP R0, #0
    IT 
    ORREQ.W R3, R3, #1
    CMP R3, #0
    BNE loc_23B52
loc_23B94:
    MOVW R1, #0xA710
    MOVS R2, #7
    MOVT.W R1, #3
    BLX memcmp
    MOV R9, R0
    CMP R0, #0
    BNE loc_23B52
loc_23BA8:
    SUB.W R6, R7, #0xB
    ADD.W R8, R5, #0xB
    CMP R6, #3
    IT 
    STRLE.W R9, [R4]
    BGT loc_23C0E
loc_23BBA:
    MOVS R3, #0
    STR R3, [R4,#4]
loc_23BBE:
    MOVS R2, #0
    STR R2, [R4,#8]
loc_23BC2:
    MOVS R0, #0
loc_23BC4:
    LDR R2, [R4]
    MOVS R1, #0
    STR R0, [R4,#0xC]
    STR R1, [R4,#0x10]
    CMP R2, #0
    BEQ.W loc_23D2E
loc_23BD2:
    CMP R3, #0
    BEQ.W loc_23D26
loc_23BD8:
    LDR R1, [R4,#8]
    CMP R0, #0
    IT 
    CMPNE R1, #0
    BEQ.W loc_23D26
loc_23BE4:
    MOV R5, #0x56170
    MOV R0, R3
    LDR R1, [R5]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_23D22
loc_23BFA:
    LDR R1, [R5]
    LDR R0, [R4]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_23D22
loc_23C08:
    MOV R0, R4
    POP.W {R3-R9,PC}
loc_23C0E:
    LDRB R3, [R5,#0xC]
    LDRB R1, [R5,#0xB]
    LDRB R2, [R5,#0xE]
    LDRB R0, [R5,#0xD]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT.W loc_23D6E
loc_23C2C:
    SUB.W R6, R7, #0xF
    ADD.W R0, R5, #0xF
    CMP R1, R6
    ITT 
    MOVGT R8, R0
    MOVGT R0, R9
    BGT loc_23C54
loc_23C3E:
    SUBS R6, R6, R1
    ADD.W R8, R0, R1
    CBZ R0, loc_23C54
loc_23C46:
    LDRSB.W R3, [R5,#0xF]
    CMP R3, #0
    BLT.W loc_23D62
loc_23C50:
    BL sub_1EDA8
loc_23C54:
    CMP R6, #3
    STR R0, [R4]
    BLE loc_23BBA
loc_23C5A:
    LDRB.W R3, [R8,#1]
    LDRB.W R1, [R8]
    LDRB.W R2, [R8,#3]
    LDRB.W R0, [R8,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_23D7C
loc_23C7E:
    SUBS R6, #4
    ADD.W R0, R8, #4
    CMP R1, R6
    ITT 
    MOVGT R5, R0
    MOVGT R3, #0
    BGT loc_23CA4
loc_23C8E:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    MOV R3, R0
    CBZ R0, loc_23CA4
loc_23C96:
    LDRSB.W R3, [R8,#4]
    CMP R3, #0
    BLT loc_23D66
loc_23C9E:
    BL sub_1EDA8
    MOV R3, R0
loc_23CA4:
    CMP R6, #3
    STR R3, [R4,#4]
    BLE loc_23BBE
loc_23CAA:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_23D74
loc_23CC6:
    SUBS R6, #4
    ADDS R0, R5, #4
    CMP R1, R6
    ITT 
    MOVGT R7, R0
    MOVGT R0, #0
    BGT loc_23CE6
loc_23CD4:
    SUBS R6, R6, R1
    ADDS R7, R0, R1
    CBZ R0, loc_23CE6
loc_23CDA:
    LDRSB.W R3, [R5,#4]
    CMP R3, #0
    BLT loc_23D6A
loc_23CE2:
    BL sub_1EDA8
loc_23CE6:
    CMP R6, #3
    STR R0, [R4,#8]
    BLE loc_23D5E
loc_23CEC:
    LDRB R3, [R7,#1]
    LDRB R1, [R7]
    LDRB R2, [R7,#3]
    LDRB R0, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_23D5E
loc_23D08:
    SUBS R6, #4
    CMP R1, R6
    BGT loc_23D5E
loc_23D0E:
    ADDS R0, R7, #4
    BEQ loc_23D1E
loc_23D12:
    LDRSB.W R3, [R7,#4]
    CMP R3, #0
    BLT loc_23D5E
loc_23D1A:
    BL sub_1EDA8
loc_23D1E:
    LDR R3, [R4,#4]
    B loc_23BC4
loc_23D22:
    LDR R2, [R4]
    CBZ R2, loc_23D2C
loc_23D26:
    MOV R0, R2
    BL sub_1E6B0
loc_23D2C:
    LDR R3, [R4,#4]
loc_23D2E:
    CBZ R3, loc_23D36
loc_23D30:
    MOV R0, R3
    BL sub_1E6B0
loc_23D36:
    LDR R0, [R4,#8]
    CBZ R0, loc_23D3E
loc_23D3A:
    BL sub_1E6B0
loc_23D3E:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_23D46
loc_23D42:
    BL sub_1E6B0
loc_23D46:
    LDR R0, [R4,#0x10]
    CMP R0, #0
    BEQ.W loc_23B52
loc_23D4E:
    BL sub_1E6B0
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_23D5E:
    LDR R3, [R4,#4]
    B loc_23BC2
loc_23D62:
    MOVS R0, #0
    B loc_23C54
loc_23D66:
    MOVS R3, #0
    B loc_23CA4
loc_23D6A:
    MOVS R0, #0
    B loc_23CE6
loc_23D6E:
    STR.W R9, [R4]
    B loc_23C5A
loc_23D74:
    MOVS R3, #0
    MOV R7, R5
    STR R3, [R4,#8]
    B loc_23CEC
loc_23D7C:
    MOVS R3, #0
    MOV R5, R8
    STR R3, [R4,#4]
    B loc_23CAA
```
Output:R8,#1]
    CMP R3, #0
    BLT loc_23D72
loc_23CAA:
    BL sub_1EDA8
loc_23CAC:
    CMP R6, #3
    STR R3, [R4]
    BLE loc_23CBA
loc_23CB2:
    LDRB.W R3, [R5,#1]
    LDRB.W R1, [R5]
    LDRB.W R2, [R5,#3]
    LDRB.W R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_23D86
loc_23CBD:
    SUBS R6, #4
    ADD.W R0, R5, #4
    CMP R1, R6
    ITT 
    MOVGT R8, R0
    MOVGT R3, #0
    BGT loc_23CF4
loc_23CCD:
    SUBS R6, R6, R1
    ADDS R8, R0, R1
    MOV R3, R0
    CBZ R0, loc_23CF4
loc_23CD5:
    LDRSB.W R3, [R8,#1]
    CMP R3, #0
    BLT loc_23D80
loc_23CE3:
    BL sub_1EDA8
loc_23CE5:
    CMP R6, #3
    STR R3, [R4]
    BLE loc_23CEB
loc_23CEF:
    LDRB.W R3, [R8,#1]
    LDRB.W R1, [R8]
    LDRB.W R2, [R8,#3]
    LDRB.W R0, [R8,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_23D90
loc_23CFB:
    SUBS R6, #4
    ADD.W R0, R8, #4
    CMP R1, R6
    ITT 
    MOVGT R5, R0
    MOVGT R3, #0
    BGT loc_23D2E
loc_23D0B:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    MOV R3, R0
    CBZ R0, loc_23D2E
loc_23D13:
    LDRSB.W R3, [R8,#1]
    CMP R3, #0
    BLT loc_23D8C
loc_23D21:
    BL sub_1EDA8
loc_23D23:
    CMP R6, #3
    STR R3, [R4]
    BLE loc_23D29
loc_23D29:
    B loc_23B94
loc_23D2E:
    LDR R3, [R4]
    BL nullSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
    LDR R3, [R4]
    BL NULLSUB_1
############
```assembly
loc_3699C:
    PUSH {R3-R5,LR}
    MOVS R1, #4
    MOV R5, R0
    MOVS R0, #1
    BL sub_193B8
    MOV R4, R0
    MOV R0, R5
    BL sub_18A88
    STR R0, [R4]
    MOV R0, R4
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:4",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "memory-write-to-output-parameter-offset",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:value-assignment-or-update"
]
```<|im_end|>
############
```assembly
loc_12CEC:
    PUSH {R4-R7,LR}
    MOVW R1, #0xA374
    SUB SP, SP, #0xC
    MOVT.W R1, #3
    MOV R6, R0
    BLX fopen
    MOV R5, R0
    CMP R0, #0
    BEQ loc_12D90
loc_12D04:
    BL sub_18E74
    MOV R4, R0
    CBZ R0, loc_12D4E
loc_12D0C:
    LDRB R2, [R0]
    CMP R2, #0xD
    BHI loc_12D1C
loc_12D12:
    MOVW R3, #0x2401
    LSRS R3, R2
    LSLS R3, R3, #0x1F
    BMI loc_12D3E
loc_12D1C:
    ADDS R2, R4, #1
    MOVW R6, #0x2401
loc_12D22:
    MOV R0, R2
    LDRB.W R1, [R2],#1
    LSR.W R3, R6, R1
    CMP R1, #0xD
    AND.W R3, R3, #1
    EOR.W R3, R3, #1
    IT 
    MOVHI R3, #1
    CMP R3, #0
    BNE loc_12D22
loc_12D3E:
    MOVS R3, #0
    STRB R3, [R0]
loc_12D42:
    MOV R0, R5
    BLX fclose
    MOV R0, R4
loc_12D4A:
    ADD SP, SP, #0xC
    POP {R4-R7,PC}
loc_12D4E:
    MOV R0, R5
    BLX ferror
    CBZ R0, loc_12D80
loc_12D56:
    MOV R3, #0x56198
    LDR R7, [R3]
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R6
    MOVW R2, #0x8A7C
    MOVS R1, #1
    MOVT.W R2, #3
    STR R0, [SP,#0x20+var_20]
    MOV R0, R7
    BLX __fprintf_chk
    B loc_12D42
loc_12D80:
    MOV R0, #0x4555C
    BL sub_18A88
    MOV R4, R0
    B loc_12D42
loc_12D90:
    MOV R3, #0x56198
    LDR R4, [R3]
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R6
    MOVW R2, #0x8A5C
    MOVS R1, #1
    MOVT.W R2, #3
    STR R0, [SP,#0x20+var_20]
    MOV R0, R4
    BLX __fprintf_chk
    MOV R0, R5
    B loc_12D4A
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:string",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-file-open",
  "conditional-branching-on-loop-condition",
  "loop-counter-pattern:incrementing-by-1",
  "external-function-calls-present",
  "external-call-type:file-io (fopen)",
  "external-call-type:file-io (fclose)",
  "external-call-type:error-handling (ferror)",
  "external-call-type:error-handling (strerror)",
  "external-call-type:stdio (fprintf)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shifts-present",
  "bitwise-AND-present",
  "bitwise-XOR-present",
  "magic-number:0xA374",
  "magic-number:0x2401",
  "magic-number:0x56198",
  "magic-number:0x8A7C",
  "magic-number:0x8A5C",
  "inferred-algorithm:file-reading-and-processing",
  "inferred-algorithm:error-handling-and-reporting",
  "inferred-algorithm:character-processing-or-mapping"
]
```<|im_end|>
############
```assembly
loc_2CFCC:
    PUSH.W {R3-R9,LR}
    CMP.W R1, #0x4B0
    MOV R8, #0x562CC
    MOV R6, R0
    MOV R7, R1
    IT 
    LDRLT.W R0, [R8,#(dword_567D8 - 0x562CC)]
    BLT loc_2D046
loc_2CFE8:
    LDR.W R0, [R8,#(dword_567D8 - 0x562CC)]
    ADD.W R9, R8, #4
    ADD.W R4, R8, #0x4B0
loc_2CFF4:
    CMP R6, R9
    ADD.W R3, R6, #4
    ITE 
    MOVCC R2, #0
    MOVCS R2, #1
    CMP R3, R8
    ITE 
    MOVHI R3, R2
    ORRLS.W R3, R2, #1
    TST.W R6, #3
    AND.W R3, R3, #1
    IT 
    MOVNE R3, #0
    CMP R3, #0
    BEQ loc_2D0F4
loc_2D01A:
    MOVW R3, #0x62CC
    SUBS R1, R6, #4
    MOVT.W R3, #5
loc_2D024:
    LDR R5, [R3]
    LDR.W R2, [R1,#4]!
    EORS R2, R5
    STR.W R2, [R3],#4
    CMP R3, R4
    BNE loc_2D024
loc_2D034:
    ADD.W R6, R6, #0x4B0
    CMP R0, #0
    BEQ loc_2D0EA
loc_2D03C:
    SUB.W R7, R7, #0x4B0
    CMP.W R7, #0x4B0
    BGE loc_2CFF4
loc_2D046:
    CMP R7, #0
    BLE loc_2D0E4
loc_2D04A:
    LDR R3, =unk_562D0
    ADDS R1, R6, #4
    CMP R6, R3
    ITE 
    MOVCC R2, #0
    MOVCS R2, #1
    CMP R1, R8
    IT 
    ORRLS.W R2, R2, #1
    CMP R7, #5
    ITE 
    MOVLS R2, #0
    ANDHI.W R2, R2, #1
    TST.W R6, #3
    AND.W R2, R2, #1
    IT 
    MOVNE R2, #0
    CMP R2, #0
    BEQ loc_2D116
loc_2D078:
    SUB.W LR, R7, #4
    SUBS R3, #4
    SUBS R4, R6, #4
    MOVS R1, #0
    MOV.W LR, LR,LSR#2
    ADD.W LR, LR, #1
    MOV.W R12, LR,LSL#2
loc_2D08E:
    ADDS R1, #1
    LDR.W R5, [R4,#4]!
    LDR R2, [R3]
    CMP R1, LR
    EOR.W R2, R2, R5
    STR.W R2, [R3],#4
    BCC loc_2D08E
loc_2D0A2:
    CMP R7, R12
    ADD.W R1, R6, R12
    BEQ loc_2D0E4
loc_2D0AA:
    ADD.W R3, R12, #1
    LDRB.W R2, [R6,LR,LSL#2]
    LDRB.W R4, [R8,LR,LSL#2]
    CMP R7, R3
    EOR.W R2, R2, R4
    STRB.W R2, [R8,LR,LSL#2]
    BLE loc_2D0E4
loc_2D0C2:
    ADD.W R12, R12, #2
    LDRB R4, [R1,#1]
    LDRB.W R2, [R8,R3]
    CMP R7, R12
    EOR.W R2, R2, R4
    STRB.W R2, [R8,R3]
    BLE loc_2D0E4
loc_2D0D8:
    LDRB R2, [R1,#2]
    LDRB.W R3, [R8,R12]
    EORS R3, R2
    STRB.W R3, [R8,R12]
loc_2D0E4:
    CBZ R0, loc_2D110
loc_2D0E6:
    POP.W {R3-R9,PC}
loc_2D0EA:
    BL sub_2CBB0
    LDR.W R0, [R8,#(dword_567D8 - 0x562CC)]
    B loc_2D03C
loc_2D0F4:
    MOVW R3, #0x62CC
    SUBS R1, R6, #1
    MOVT.W R3, #5
loc_2D0FE:
    LDRB.W R5, [R1,#1]!
    LDRB R2, [R3]
    EORS R2, R5
    STRB.W R2, [R3],#1
    CMP R3, R4
    BNE loc_2D0FE
loc_2D10E:
    B loc_2D034
loc_2D110:
    POP.W {R3-R9,LR}
    B sub_2CBB0
loc_2D116:
    SUBS R3, #4
    ADD R7, R6
loc_2D11A:
    LDRB.W R1, [R6],#1
    LDRB R2, [R3]
    CMP R6, R7
    EOR.W R2, R2, R1
    STRB.W R2, [R3],#1
    BNE loc_2D11A
loc_2D12C:
    B loc_2D0E4
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2CBB0)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:EOR",
  "bitwise-operation:AND",
  "bitwise-operation:OR",
  "bitwise-mask-value:0x4B0",
  "bitwise-mask-value:0x62CC",
  "bitwise-mask-value:0x562CC",
  "bitwise-mask-value:0x567D8",
  "address-or-offset-constant:dword_567D8",
  "address-or-offset-constant:unk_562D0",
  "address-or-offset-constant:sub_2CBB0",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:loop-counter-pattern:decrementing",
  "inferred-algorithm:loop-counter-pattern:incrementing",
  "inferred-algorithm:memory-update-with-loop",
  "inferred-algorithm:register-based-pointer-arithmetic"
]
```<|im_end|>
############
```assembly
loc_22830:
    B.W sub_19494
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-present",
  "standard-function-return",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "inferred-algorithm:jump-table-entry",
  "inferred-algorithm:control-flow-transfer"
]
```<|im_end|>
############
```assembly
loc_2A158:
    PUSH {R4-R6,LR}
    MOV R5, #0x1FFFF
    MOV R4, R0
    MOV R6, R1
loc_2A166:
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R4]
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R6]
    LDR R3, [R4]
    MUL.W R3, R3, R0
    CMP R3, R5
    BLS loc_2A166
loc_2A184:
    POP {R4-R6,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "loop-with-counter",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2D1F4)",
  "integer-size-hint:32-bit",
  "bitwise-operation:OR",
  "bitwise-mask-value:0x100",
  "fixed-value-comparison:0x1FFFF",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-scaling-or-multiplication",
  "inferred-algorithm:iteration-based-loop"
]
```<|im_end|>
############
```assembly
loc_252E0:

loc_25510:
    PUSH {R3-R7,LR}
    LDR R6, [R2]
    LDR R6, [R6]
    CMP R6, #2
    BEQ loc_25568
loc_2551A:
    CMP R1, #0
    BLE loc_25526
loc_2551E:
    MOV R4, R2
    LDRB R2, [R0]
    CMP R2, #4
    BEQ loc_2552C
loc_25526:
    MOVS R6, #0
loc_25528:
    MOV R0, R6
    POP {R3-R7,PC}
loc_2552C:
    SUBS R3, R1, #1
    ANDS.W R7, R3, #1
    BEQ loc_25542
loc_25534:
    MOVS R3, #0
    STR R3, [R4,#4]
    MOV R6, R3
    STR R3, [R4,#8]
    STR R3, [R4,#0xC]
    MOV R0, R6
    POP {R3-R7,PC}
loc_25542:
    MOV R5, R4
    MOV R6, R0
    ASRS R4, R3, #1
    ADDS R6, #1
    MOV R1, R4
    MOV R0, R6
    BL sub_1EDA8
    MOV R1, R4
    STR R0, [R5,#4]
    ADDS R0, R6, R4
    BL sub_1EDA8
    LDRB R3, [R5,#0x10]
    STR R7, [R5,#0xC]
    STR R0, [R5,#8]
    CBZ R3, loc_2556E
loc_25564:
    MOVS R6, #1
    B loc_25528
loc_25568:
    POP.W {R3-R7,LR}
    B sub_252E0
loc_2556E:
    MOV R0, R5
    BL sub_24D84
    MOV R6, R0
    CMP R0, #0
    BNE loc_25564
loc_2557A:
    LDR R0, [R5,#4]
    BL sub_1E6B0
    STR R6, [R5,#4]
    LDR R0, [R5,#8]
    BL sub_1E6B0
    STR R6, [R5,#8]
    B loc_25528
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x18",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1EDA8)",
  "external-call-type:unspecified-helper (sub_24D84)",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:AND-clear",
  "bitwise-operation:ASRS",
  "bitwise-operation:BLS",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:0x10",
  "memory-write-to-input-parameter-offset:4",
  "memory-write-to-input-parameter-offset:8",
  "memory-write-to-input-parameter-offset:0xC",
  "fixed-value-comparison:0",
  "fixed-value-comparison:2",
  "fixed-value-comparison:4",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "address-or-offset-constant:sub_1EDA8",
  "address-or-offset-constant:sub_24D84",
  "address-or-offset-constant:sub_1E6B0",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-counter-pattern:decrementing",
  "inferred-algorithm:conditional-data-retrieval-or-processing",
  "inferred-algorithm:conditional-data-modification-or-update",
  "inferred-algorithm:resource-management",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:state-machines"
]
```<|im_end|>
############
```assembly
loc_2AE54:
    PUSH.W {R4-R11,LR}
    MOV R7, #0x56190
    SUB SP, SP, #0x124
    MOV R4, R0
    MOV R10, R2
    LDR R3, [R7]
    MOV R9, R1
    STR R3, [SP,#0x148+var_2C]
    CMP R1, #0
    BEQ.W loc_2AF8E
loc_2AE72:
    MOV R0, R1
    BLX strlen
    STR R0, [SP,#0x148+var_13C]
loc_2AE7A:
    MOV R0, R4
    MOVW R1, #0x32EC
    MOVS R2, #0
    MOVT.W R1, #4
    BL sub_3694C
    MOV R4, R0
    CMP R0, #0
    BEQ loc_2AF20
loc_2AE90:
    ADD.W R6, SP, #0x148+var_59
    MOVW R5, #0x4801
    ADD.W R8, SP, #0x148+s1
    B loc_2AEAA
loc_2AE9E:
    CMP R0, #0x3A
    BEQ loc_2AF32
loc_2AEA2:
    CMP R8, R6
    BEQ loc_2AEBE
loc_2AEA6:
    STRB.W R0, [R8],#1
loc_2AEAA:
    MOV R0, R4
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2AE9E
loc_2AEB6:
    LSR.W R3, R5, R3
    LSLS R3, R3, #0x1F
    BPL loc_2AEA2
loc_2AEBE:
    MOV.W R9, #0
    MOV R5, R9
loc_2AEC4:
    MOV R0, R4
    MOV R4, R5
    BLX fclose
    CBZ R5, loc_2AF04
loc_2AECE:
    MOVS R4, #0
    MOV R6, R4
    MOV R11, R4
    MOV R8, R4
loc_2AED6:
    MOV R0, R5
    BL sub_19494
    CMP.W R11, #0
    BEQ loc_2AEE8
loc_2AEE2:
    MOV R0, R11
    BL sub_19494
loc_2AEE8:
    CMP.W R8, #0
    BEQ loc_2AEF4
loc_2AEEE:
    MOV R0, R8
    BL sub_19494
loc_2AEF4:
    CBZ R6, loc_2AF04
loc_2AEF6:
    MOV R0, R6
    LDR R1, [SP,#0x148+var_10C]
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
loc_2AF04:
    CMP.W R10, #0
    BEQ loc_2AF2E
loc_2AF0A:
    MOV R0, R4
    STR.W R9, [R10]
loc_2AF10:
    LDR R2, [SP,#0x148+var_2C]
    LDR R3, [R7]
    CMP R2, R3
    BNE.W loc_2B25E
loc_2AF1A:
    ADD SP, SP, #0x124
    POP.W {R4-R11,PC}
loc_2AF20:
    MOV R9, #0x432F0
    CMP.W R10, #0
    BNE loc_2AF0A
loc_2AF2E:
    MOV R0, R4
    B loc_2AF10
loc_2AF32:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2AEBE
loc_2AF3C:
    MOVW R1, #0x347C
    MOVS R5, #0
    MOVT.W R1, #4
    ADD R0, SP, #0x148+s1
    STRB.W R5, [R8]
    BLX strcmp
    CBZ R0, loc_2AF92
loc_2AF52:
    MOVW R1, #0x3494
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_2B068
loc_2AF66:
    ADD R0, SP, #0x148+s1
    MOVW R1, #0x33C4
    MOVS R2, #0x14
    MOVT.W R1, #4
    BLX strncmp
    MOVW R9, #0x3440
    MOVW R3, #0x345C
    MOVT.W R9, #4
    MOVT.W R3, #4
    CMP R0, #0
    IT 
    MOVNE R9, R3
    B loc_2AEC4
loc_2AF8E:
    STR R1, [SP,#0x148+var_13C]
    B loc_2AE7A
loc_2AF92:
    STR R0, [SP,#0x148+s2]
    STR R0, [SP,#0x148+var_134]
loc_2AF96:
    MOVS R1, #1
    MOVS R0, #0x80
    BL sub_193B8
    MOVS R2, #0
    MOV.W R8, #0x80
    MOV R6, R2
    MOV R11, R0
    STRB R2, [R0]
    B loc_2AFBC
loc_2AFAC:
    ADD.W R3, R11, R6
    STRB.W R5, [R3,#-1]
    MOV.W R3, #0
    STRB.W R3, [R11,R6]
loc_2AFBC:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xA
    IT 
    CMPNE R0, #0xD
    MOV R5, R0
    BEQ loc_2AFE8
loc_2AFCC:
    ADDS R0, #1
    BEQ loc_2B000
loc_2AFD0:
    ADDS R6, #1
    CMP R6, R8
    BLT loc_2AFAC
loc_2AFD6:
    ADD.W R8, R8, #0x80
    MOV R0, R11
    MOVS R2, #1
    MOV R1, R8
    BL sub_19420
    MOV R11, R0
    B loc_2AFAC
loc_2AFE8:
    ADDS R5, R0, #1
    BEQ loc_2B000
loc_2AFEC:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xD
    IT 
    CMPNE R0, #0xA
    BEQ loc_2B000
loc_2AFFA:
    MOV R1, R4
    BLX ungetc
loc_2B000:
    CMP.W R11, #0
    BEQ loc_2B05C
loc_2B006:
    MOV R0, R11
    BLX strlen
    MOVW R2, #0xA724
    MOV R1, R11
    MOVT.W R2, #3
    MOV R5, R0
    BL sub_19870
    CBZ R0, loc_2B076
loc_2B01E:
    MOV R3, #0x43AC8
    STR R3, [SP,#0x148+var_12C]
loc_2B028:
    MOV R0, R11
    ADD.W R8, SP, #0x148+s1
    BL sub_19494
    MOVW R5, #0x4801
    ADD.W R6, SP, #0x148+var_59
    B loc_2B048
loc_2B03C:
    CMP R0, #0x3A
    BEQ loc_2B096
loc_2B040:
    CMP R8, R6
    BEQ loc_2B05C
loc_2B044:
    STRB.W R0, [R8],#1
loc_2B048:
    MOV R0, R4
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2B03C
loc_2B054:
    LSR.W R3, R5, R3
    LSLS R1, R3, #0x1F
    BPL loc_2B040
loc_2B05C:
    MOVW R9, #0x32A8
    MOVS R5, #0
    MOVT.W R9, #4
    B loc_2AEC4
loc_2B068:
    MOVS R3, #1
    STR R3, [SP,#0x148+s2]
    MOV R5, R3
    BL sub_3614C
    STR R5, [SP,#0x148+var_134]
    B loc_2AF96
loc_2B076:
    MOVW R2, #0xA710
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CMP R0, #0
    BEQ loc_2B10C
loc_2B08A:
    MOV R3, #0x3F520
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B096:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2B05C
loc_2B0A0:
    MOVS R3, #0
    MOVW R1, #0x34AC
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    STRB.W R3, [R8]
    BLX strcmp
    MOV R6, R0
    CMP R0, #0
    BNE loc_2B05C
loc_2B0BA:
    MOVS R1, #1
    MOVS R0, #0x80
    BL sub_193B8
    MOV R11, R6
    MOV.W R8, #0x80
    MOV R5, R0
    STRB R6, [R0]
    B loc_2B0DE
loc_2B0CE:
    ADD.W R3, R5, R11
    STRB.W R6, [R3,#-1]
    MOV.W R3, #0
    STRB.W R3, [R5,R11]
loc_2B0DE:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xA
    IT 
    CMPNE R0, #0xD
    MOV R6, R0
    BEQ loc_2B12C
loc_2B0EE:
    ADDS R2, R0, #1
    BEQ loc_2B144
loc_2B0F2:
    ADD.W R11, R11, #1
    CMP R11, R8
    BLT loc_2B0CE
loc_2B0FA:
    ADD.W R8, R8, #0x80
    MOV R0, R5
    MOVS R2, #1
    MOV R1, R8
    BL sub_19420
    MOV R5, R0
    B loc_2B0CE
loc_2B10C:
    MOVW R2, #0xFE3C
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CMP R0, #0
    BEQ loc_2B1A6
loc_2B120:
    MOV R3, #0x3FB34
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B12C:
    ADDS R6, R0, #1
    BEQ loc_2B144
loc_2B130:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xD
    IT 
    CMPNE R0, #0xA
    BEQ loc_2B144
loc_2B13E:
    MOV R1, R4
    BLX ungetc
loc_2B144:
    CMP R5, #0
    BEQ loc_2B05C
loc_2B148:
    MOVW R1, #0xA58C
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_2B1C4
loc_2B158:
    MOVW R1, #0xA584
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_2B19C
loc_2B168:
    MOVS R3, #1
    STR R0, [SP,#0x148+var_128]
    STR R3, [SP,#0x148+var_124]
loc_2B16E:
    ADD.W R8, SP, #0x148+var_59
    ADD.W R11, SP, #0x148+s1
    MOVW R6, #0x4801
    B loc_2B188
loc_2B17C:
    CMP R0, #0x3A
    BEQ loc_2B1EE
loc_2B180:
    CMP R11, R8
    BEQ loc_2B19C
loc_2B184:
    STRB.W R0, [R11],#1
loc_2B188:
    MOV R0, R4
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2B17C
loc_2B194:
    LSR.W R3, R6, R3
    LSLS R3, R3, #0x1F
    BPL loc_2B180
loc_2B19C:
    MOV R9, #0x432A8
    B loc_2AEC4
loc_2B1A6:
    MOVW R2, #0xFE28
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CBZ R0, loc_2B1CE
loc_2B1B8:
    MOV R3, #0x3FB70
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B1C4:
    MOVS R3, #0x10
    STR R3, [SP,#0x148+var_124]
    MOVS R3, #1
    STR R3, [SP,#0x148+var_128]
    B loc_2B16E
loc_2B1CE:
    MOVW R2, #0xFE14
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CMP R0, #0
    BEQ loc_2B262
loc_2B1E2:
    MOV R3, #0x3FBAC
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B1EE:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2B19C
loc_2B1F8:
    MOVS R3, #0
    MOVW R1, #0xA63C
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    STRB.W R3, [R11]
    BLX strcmp
    MOV R6, R0
    CMP R0, #0
    BNE loc_2B19C
loc_2B212:
    MOV R0, R4
    BL sub_2A55C
    STR R0, [SP,#0x148+s]
    CMP R0, #0
    BEQ loc_2B19C
loc_2B21E:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_2A438
    CBZ R0, loc_2B258
loc_2B228:
    MOVW R1, #0x34B8
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    MOV R8, R0
    CBZ R0, loc_2B292
loc_2B23A:
    MOV R8, R6
loc_2B23C:
    MOV R0, R4
    MOV.W R11, #0
    BLX fclose
    MOV R9, #0x432A8
    MOV R4, R11
loc_2B250:
    LDR R0, [SP,#0x148+s]
    BL sub_19494
    B loc_2AED6
loc_2B258:
    MOV R6, R0
    MOV R8, R0
    B loc_2B23C
loc_2B25E:
    BLX __stack_chk_fail
loc_2B262:
    MOV R0, R5
    MOVW R2, #0xFE50
    MOV R1, R11
    MOVT.W R2, #3
    BL sub_19870
    MOV R5, R0
    CBZ R0, loc_2B282
loc_2B276:
    MOV R3, #0x3FBE8
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B282:
    MOV R0, R11
    MOVW R9, #0x32A8
    BL sub_19494
loc_2B292:
    MOV R0, R4
    BL sub_2A55C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_2B23A
loc_2B29E:
    MOV R1, R8
    MOVS R2, #0xA
    BLX strtol
    MOV R8, R0
    MOV R0, R6
    BL sub_19494
    MOV R1, R8
    ADD R2, SP, #0x148+var_110
    MOV R0, R4
    BL sub_1160C
    MOV R8, R0
    CBZ R0, loc_2B2DC
loc_2B2BC:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_2A438
    CBZ R0, loc_2B2D8
loc_2B2C6:
    MOVW R1, #0x34C8
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    STR R0, [SP,#0x148+endptr]
    CBZ R0, loc_2B2E0
loc_2B2D8:
    MOVS R6, #0
    B loc_2B23C
loc_2B2DC:
    MOV R6, R0
    B loc_2B23C
loc_2B2E0:
    MOV R0, R4
    BL sub_2A55C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_2B23C
loc_2B2EC:
    MOVS R2, #0xA
    LDR R1, [SP,#0x148+endptr]
    BLX strtol
    MOV R11, R0
    MOV R0, R6
    BL sub_19494
    MOV R1, R11
    ADD R2, SP, #0x148+var_10C
    MOV R0, R4
    BL sub_1160C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_2B23C
loc_2B30C:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_2A438
    CMP R0, #0
    BEQ loc_2B23C
loc_2B318:
    MOVW R1, #0x34D8
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_2B582
loc_2B32C:
    MOVW R1, #0x34E4
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BNE.W loc_2B23C
loc_2B340:
    LDR R3, [SP,#0x148+s2]
    CMP R3, #0
    BEQ.W loc_2B23C
loc_2B348:
    MOV R0, R4
    BL sub_2A55C
    MOV R11, R0
    CMP R0, #0
    BEQ.W loc_2B23C
loc_2B356:
    MOV R0, R4
    BLX fclose
    LDR R3, [SP,#0x148+var_128]
    CMP R3, #0
    BNE.W loc_2B472
loc_2B364:
    ADD R3, SP, #0x148+var_58
    STR R3, [SP,#0x148+s2]
loc_2B368:
    LDR R3, [SP,#0x148+var_134]
    CMP R3, #0
    BEQ.W loc_2B492
loc_2B370:
    LDR R3, [SP,#0x148+var_10C]
    STR R6, [SP,#0x148+var_134]
    STR R3, [SP,#0x148+var_124]
    MOVS R3, #0
    STR R3, [SP,#0x148+var_11C]
loc_2B37A:
    LDR R3, [SP,#0x148+endptr]
    CMP R3, #0
    BEQ loc_2B462
loc_2B380:
    MOV LR, #0x434FC
    LDR R4, [SP,#0x148+s2]
    LDM.W LR!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W LR, {R0-R3}
    STM R4!, {R0-R2}
    ADD R0, SP, #0x148+var_108
    STRH.W R3, [R4],#2
    LSRS R3, R3, #0x10
    STRB R3, [R4]
    BL sub_32750
    ADD R0, SP, #0x148+var_108
    MOVS R2, #0x1E
    LDR R1, [SP,#0x148+s2]
    BL sub_3278C
    CMP.W R9, #0
    BEQ loc_2B3C2
loc_2B3B4:
    LDR R3, [SP,#0x148+var_128]
    CBZ R3, loc_2B3C2
loc_2B3B8:
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R9
    ADD R0, SP, #0x148+var_108
    BL sub_3278C
loc_2B3C2:
    ADD R0, SP, #0x148+var_108
    ADD R1, SP, #0x148+var_94
    BL sub_32BC0
    ADD.W R9, SP, #0x148+var_A8
    ADD R0, SP, #0x148+var_94
    LDR R3, [SP,#0x148+var_124]
    LDR R2, [SP,#0x148+var_134]
    MOVS R1, #0x14
    STR.W R9, [SP,#0x148+var_148]
    BL sub_33A4C
    ADD R0, SP, #0x148+var_94
    MOVS R1, #0x14
    BL sub_194E4
    ADD R0, SP, #0x148+var_108
    MOVS R1, #0x60
    BL sub_194E4
loc_2B3EE:
    LDR R3, [SP,#0x148+var_11C]
    CBZ R3, loc_2B402
loc_2B3F2:
    LDR R4, [SP,#0x148+var_134]
    LDR R1, [SP,#0x148+var_124]
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
loc_2B402:
    MOVS R4, #0
    MOV R3, #0x434F4
    STR R3, [SP,#0x148+var_13C]
loc_2B40E:
    LDRB.W LR, [R9,R4]
    MOVS R1, #1
    LDR R0, [SP,#0x148+s2]
    MOV.W R2, #0xFFFFFFFF
    LDR R3, [SP,#0x148+var_13C]
    ADD.W R0, R0, R4,LSL#1
    STR.W LR, [SP,#0x148+var_148]
    ADD R4, R1
    BLX __sprintf_chk
    CMP R4, #0x14
    BNE loc_2B40E
loc_2B42E:
    LDR R1, [SP,#0x148+s2]
    MOV R0, R11
    BLX strcmp
    MOV R9, R0
    CMP R0, #0
    BEQ.W loc_2B5EC
loc_2B43E:
    LDR R3, [SP,#0x148+var_128]
    MOVW R9, #0x9640
    MOVW R4, #0x62C0
    MOVT.W R9, #3
    CMP R3, #0
    MOV R3, #0x43420
    MOVT.W R4, #5
    ITT 
    MOVEQ R4, #0
    MOVEQ R9, R3
    B loc_2B250
loc_2B462:
    ADD.W R9, SP, #0x148+var_A8
    LDR R1, [SP,#0x148+var_124]
    LDR R0, [SP,#0x148+var_134]
    MOV R2, R9
    BL sub_338F8
    B loc_2B3EE
loc_2B472:
    CMP.W R9, #0
    BEQ loc_2B486
loc_2B478:
    LDR R1, [SP,#0x148+var_124]
    LDR R0, [SP,#0x148+var_10C]
    BL sub_389DC
    CMP R1, #0
    BEQ.W loc_2B596
loc_2B486:
    MOVW R9, #0x32A8
    MOVS R4, #0
    MOVT.W R9, #4
    B loc_2B250
loc_2B492:
    LDR R3, [SP,#0x148+var_12C]
    MOVS R2, #1
    STR R2, [SP,#0x148+var_11C]
    LDR R0, [R3,#0x30]
    BLX strlen
    MOV R4, R0
    MOV R0, R5
    BLX strlen
    STR R0, [SP,#0x148+var_134]
    LDR R0, [SP,#0x148+s]
    BLX strlen
    LDR R3, [SP,#0x148+var_134]
    LDR R2, [SP,#0x148+var_110]
    ADDS R1, R4, R3
    STR R3, [SP,#0x148+n]
    ADD R1, R0
    STR R0, [SP,#0x148+var_118]
    ADD R2, R1
    LDR R0, [SP,#0x148+var_10C]
    ADDS R2, #0x14
    MOVS R1, #1
    ADD R2, R0
    STR R2, [SP,#0x148+var_124]
    MOV R0, R2
    BL sub_193B8
    ASRS R1, R4, #0x18
    ASRS R2, R4, #0x10
    STRB R1, [R0]
    ASRS R1, R4, #8
    STRB R1, [R0,#2]
    LDR R1, [SP,#0x148+var_12C]
    STRB R4, [R0,#3]
    STRB R2, [R0,#1]
    MOV R2, R4
    STR R0, [SP,#0x148+var_134]
    ADDS R0, #4
    LDR R1, [R1,#0x30]
    BLX memcpy
    LDR R0, [SP,#0x148+var_134]
    LDR R3, [SP,#0x148+n]
    ADDS R2, R4, #4
    ADDS R4, R0, R2
    MOV.W R12, R3,ASR#24
    ASRS R1, R3, #0x10
    STRB.W R12, [R0,R2]
    ASRS R2, R3, #8
    STRB R3, [R4,#3]
    ADDS R0, R4, #4
    STRB R1, [R4,#1]
    MOV R1, R5
    STRB R2, [R4,#2]
    MOV R2, R3
    BLX memcpy
    LDR R3, [SP,#0x148+n]
    LDR R0, [SP,#0x148+var_118]
    ADDS R2, R3, #4
    ADDS R3, R4, R2
    STR R3, [SP,#0x148+var_118]
    ASRS R1, R0, #0x18
    STRB R1, [R4,R2]
    MOV R4, R0
    ASRS R1, R0, #0x10
    STRB R0, [R3,#3]
    ASRS R2, R0, #8
    STRB R1, [R3,#1]
    ADDS R0, R3, #4
    STRB R2, [R3,#2]
    MOV R2, R4
    LDR R1, [SP,#0x148+s]
    BLX memcpy
    LDRSB.W R0, [SP,#0x148+var_110+3]
    LDR R3, [SP,#0x148+var_118]
    ADDS R2, R4, #4
    MOV R1, R8
    ADDS R4, R3, R2
    STRB R0, [R3,R2]
    ADDS R0, R4, #4
    LDRSH.W R3, [SP,#0x148+var_110+2]
    STRB R3, [R4,#1]
    LDR R3, [SP,#0x148+var_110]
    ASRS R3, R3, #8
    STRB R3, [R4,#2]
    LDR R3, [SP,#0x148+var_110]
    STRB R3, [R4,#3]
    LDR R3, [SP,#0x148+var_110]
    MOV R2, R3
    STR R3, [SP,#0x148+var_118]
    BLX memcpy
    LDR R3, [SP,#0x148+var_118]
    LDRSB.W R2, [SP,#0x148+var_10C+3]
    MOV R1, R6
    ADDS R0, R3, #4
    ADDS R3, R4, R0
    STRB R2, [R4,R0]
    ADDS R0, R3, #4
    LDRSH.W R2, [SP,#0x148+var_10C+2]
    STRB R2, [R3,#1]
    LDR R2, [SP,#0x148+var_10C]
    ASRS R2, R2, #8
    STRB R2, [R3,#2]
    LDR R2, [SP,#0x148+var_10C]
    STRB R2, [R3,#3]
    LDR R2, [SP,#0x148+var_10C]
    BLX memcpy
    B loc_2B37A
loc_2B582:
    MOV R0, R4
    BL sub_2A55C
    MOV R11, R0
    CMP R0, #0
    BEQ.W loc_2B23C
loc_2B590:
    MOVS R3, #1
    STR R3, [SP,#0x148+endptr]
    B loc_2B356
loc_2B596:
    ADD R3, SP, #0x148+var_58
    ADD R0, SP, #0x148+var_108
    STR R3, [SP,#0x148+s2]
    MOV R4, R3
    BL sub_32750
    ADD R0, SP, #0x148+var_108
    MOVS R2, #4
    LDR R1, =unk_43220
    BL sub_3278C
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R9
    ADD R0, SP, #0x148+var_108
    BL sub_3278C
    MOV R1, R4
    ADD R0, SP, #0x148+var_108
    BL sub_32BC0
    ADD R0, SP, #0x148+var_108
    BL sub_32750
    ADD R0, SP, #0x148+var_108
    MOVS R2, #4
    LDR R1, =unk_43228
    BL sub_3278C
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R9
    ADD R0, SP, #0x148+var_108
    BL sub_3278C
    ADD R0, SP, #0x148+var_108
    ADD R1, SP, #0x148+var_44
    BL sub_32BC0
    MOV R0, R4
    LDR R2, [SP,#0x148+var_10C]
    MOV R1, R6
    BL sub_1C004
    B loc_2B368
loc_2B5EC:
    MOV R0, R11
    BL sub_19494
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    LDR R4, [SP,#0x148+var_12C]
    LDR.W LR, [SP,#0x148+var_10C]
    MOV R3, R6
    LDR R1, [SP,#0x148+s]
    MOV R2, R0
    MOV R0, R4
    STR R1, [R2,#8]
    MOV R1, R8
    STR R4, [R2]
    STR R2, [SP,#0x148+var_13C]
    STR.W LR, [SP,#0x148+var_148]
    LDR R2, [SP,#0x148+var_110]
    LDR.W R11, [R4,#0x14]
    BLX R11
    LDR R2, [SP,#0x148+var_13C]
    MOV R3, R0
    STR R0, [R2,#4]
    CBZ R0, loc_2B64C
loc_2B624:
    MOV R0, R8
    BL sub_19494
    LDR R1, [SP,#0x148+var_10C]
    MOV R0, R6
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
    MOV R0, R5
    BL sub_19494
    CMP.W R10, #0
    BEQ loc_2B660
loc_2B644:
    STR.W R9, [R10]
    LDR R0, [SP,#0x148+var_13C]
    B loc_2AF10
loc_2B64C:
    MOV R11, R3
    MOV R0, R2
    MOVW R9, #0x342C
    BL sub_19494
    MOV R4, R11
    MOVT.W R9, #4
    B loc_2B250
loc_2B660:
    LDR R0, [SP,#0x148+var_13C]
    B loc_2AF10
loc_2B28C:

```
Output:0, #0x20
    BNE loc_2AFAC
    MOV W0, #0x33C4
    ADD R0, SP, #0x148+s1
    MOVT.W R0, #4
    BLX strncmp
    MOVW R9, #0x3440
    MOVW R3, #0x345C
    MOVT.W R9, #4
    MOVT.W R3, #4
    CMP R0, #0
    IT 
    MOVNE R9, R3
    B loc_2AEC4
loc_2B068:
    STR R0, [SP,#0x148+s2]
    STR R0, [SP,#0x148+var_134]
loc_2B06C:
    MOV W0, #0x33C4
    ADD R0, SP, #0x148+s1
    MOVT.W R0, #4
    BLX strncmp
    MOVW R9, #0x3440
    MOVW R3, #0x345C
    MOVT.W R9, #4
    MOVT.W R3, #4
    CMP R0, #0
    IT 
    MOVNE R9, R3
    B loc_2AEC4
loc_2B25E:
    MOV R0, R4
    ADD SP, SP, #0x124
    POP.W {R4-R11,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_1DED4:
    PUSH.W {R4-R11,LR}
    CMP R3, #0x32
    SUB SP, SP, #0x14
    MOV R11, R0
    MOV R10, R1
    MOV R9, R2
    LDR R5, [SP,#0x38+arg_0]
    BGT loc_1DF7E
loc_1DEE6:
    CMP R3, #0
    MOV.W R4, R3,LSL#2
    BLE loc_1DEF8
loc_1DEEE:
    MOV R0, R2
    MOVS R1, #0
    MOV R2, R4
    BLX memset
loc_1DEF8:
    ADD.W R3, R11, R4
    ADD.W R2, R9, R4
    CMP R11, R3
    SUB.W R7, R3, #4
    BCS loc_1DF78
loc_1DF08:
    RSB.W R12, R11, #3
    RSB.W R8, R9, #3
    ADD R12, R7
    MOV LR, R4
    MVN.W R12, R12
    BIC.W R12, R12, #3
    ADD R12, R2
loc_1DF1E:
    CMP R9, R2
    SUB.W R6, R2, #4
    BCS loc_1DF6E
loc_1DF26:
    ADD.W R5, R6, R8
    ADD.W R4, R10, LR
    BIC.W R5, R5, #3
    MOV R3, R6
    SUBS R5, R2, R5
    MOVS R0, #0
    SUBS R5, #8
    MOV R11, R6
    STR.W R9, [SP,#0x38+var_30]
    STR.W R8, [SP,#0x38+s]
loc_1DF44:
    LDR.W R2, [R4,#-4]!
    MOVS R1, #0
    LDR R6, [R7]
    UMLAL.W R0, R1, R2, R6
    LDR R2, [R3]
    ADDS.W R8, R0, R2
    STR.W R8, [R3],#-4
    ADC.W R9, R1, #0
    CMP R3, R5
    MOV R0, R9
    BNE loc_1DF44
loc_1DF64:
    LDR.W R9, [SP,#0x38+var_30]
    MOV R6, R11
    LDR.W R8, [SP,#0x38+s]
loc_1DF6E:
    CMP R6, R12
    SUB.W R7, R7, #4
    MOV R2, R6
    BNE loc_1DF1E
loc_1DF78:
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_1DF7E:
    ASRS R6, R3, #1
    ADD.W R2, R5, R3,LSL#3
    SUBS R4, R3, R6
    STR R2, [SP,#0x38+var_30]
    MOV.W R8, R6,LSL#2
    STR R2, [SP,#0x38+var_38]
    ADD.W R2, R5, R6,LSL#3
    ADD R1, R8
    SUB.W R3, R2, R8
    ADD R0, R8
    STR R3, [SP,#0x38+s]
    MOV R3, R4
    BL sub_1DB88
    LDR R3, [SP,#0x38+var_30]
    LSLS R7, R4, #2
    LDR R2, [SP,#0x38+s]
    ADD.W R1, R10, R7
    MOV R0, R11
    STR R3, [SP,#0x38+var_38]
    MOV R3, R6
    BL sub_1DED4
    LDR R3, [SP,#0x38+var_30]
    ADD.W R0, R11, R7
    MOV R1, R10
    MOV R2, R5
    STR R3, [SP,#0x38+var_38]
    MOV R3, R6
    BL sub_1DED4
    CMP R4, #0
    ITT 
    ADDLE R9, R8
    LSLLE R7, R6, #1
    BLE loc_1DFF0
loc_1DFD2:
    LSLS R7, R6, #1
    ADD R9, R8
    ADDS R3, R4, R7
    ADDS R0, R4, R3
    MOV R2, R9
    ADD.W R3, R5, R3,LSL#2
    ADD.W R0, R5, R0,LSL#2
loc_1DFE4:
    LDR.W R1, [R3],#4
    CMP R3, R0
    STR.W R1, [R2],#4
    BNE loc_1DFE4
loc_1DFF0:
    LDR R2, [SP,#0x38+s]
    ADD.W LR, R5, R8,LSL#1
    MOV R10, R6
    MOVS R0, #0
    MOV R6, R4
    MOV R3, R2
loc_1DFFE:
    LDR.W R4, [LR,#-4]!
    MOV.W R12, #0
    ADDS R0, R0, R4
    LDR.W R4, [R3,#-4]
    ADC.W R1, R12, #0
    ADDS.W R11, R0, R4
    STR.W R11, [R3,#-4]!
    ADC.W R12, R1, #0
    CMP R3, R5
    MOV R0, R12
    BNE loc_1DFFE
loc_1E022:
    MOV R4, R6
    MOV R6, R10
    SUBS R6, R4, R6
    MOVS R4, #0
    ADDS R3, R6, R7
    ADD.W R3, R8, R3,LSL#2
    ADD R3, R5
loc_1E032:
    LDR.W R0, [R3,#-4]!
    MOVS R1, #0
    LDR.W R6, [R2,#-4]!
    ADDS R7, R0, R6
    ADC.W R8, R1, #0
    ADDS R0, R7, R4
    ADC.W R1, R8, #0
    CMP R2, R5
    STR.W R0, [R9,#-4]!
    MOV R4, R1
    BNE loc_1E032
loc_1E052:
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
```
Output:030:
    LDR.W R1, [R3],#4
    CMP R3, R0
    STR.W R1, [R2],#4
    BNE loc_1E030
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_24D84:
    LDR R2, [R0]
    PUSH.W {R4-R8,LR}
    MOV R4, R0
    LDR R3, [R2]
    CMP R3, #2
    BEQ loc_24E3E
loc_24D92:
    CBZ R3, loc_24D9A
loc_24D94:
    MOVS R0, #0
    POP.W {R4-R8,PC}
loc_24D9A:
    MOVS R0, #3
    BL sub_1FE48
    LDR R1, [R4,#8]
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R5, R0
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R4]
    MOV R1, R5
    LDR R2, [R3,#0x10]
    MOV R6, R0
    LDR R0, [R4,#4]
    BL sub_20724
    MOV R8, R0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    LDR R1, [R4,#4]
    LDR R2, [R3,#0x10]
    LDR R0, [R3,#0x14]
    BL sub_1EAC0
    MOV R1, R0
    MOV R5, R0
    MOV R0, R8
    BL sub_1FC80
    MOV R7, R0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R0, R7
    LDR R1, [R3,#0x10]
    BL sub_200D4
    MOV R5, R0
    MOV R0, R7
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R0, R5
    LDR R1, [R3,#0x18]
    BL sub_1FC80
    MOV R7, R0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R0, R7
    LDR R1, [R3,#0x10]
    BL sub_200D4
    MOV R5, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R1, R5
    MOV R0, R6
    BL sub_1F358
    CLZ.W R4, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    LSRS R4, R4, #5
    BL sub_1E6B0
    MOV R0, R4
    POP.W {R4-R8,PC}
loc_24E3E:
    LDR R1, [R0,#8]
    LDR R2, [R2,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    LDR R1, [R4,#4]
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R6, R0
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R5, R0
    MOV R1, R0
    LDR R0, [R3,#0x18]
    BL sub_1EAC0
    LDR R3, [R4]
    MOV R1, R6
    LDR R2, [R3,#0x10]
    MOV R8, R0
    BL sub_1EAC0
    MOV R7, R0
    MOV R0, R8
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R5
    MOV R0, R6
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R7
    MOV R0, R8
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R5, R0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    MOV R3, #0x56178
    MOV R0, R5
    LDR R1, [R3]
    BL sub_1F358
    CLZ.W R4, R0
    MOV R0, R5
    BL sub_1E6B0
    LSRS R4, R4, #5
    MOV R0, R4
    POP.W {R4-R8,PC}
```
Output:```json
[
  "return-type:void",
  "Argument-count:1",
  "arg0-type:pointer",
  "Calling-convention-hint:callee-saves-registers",
  "Calling-convention-hint:registers-for-args",
  "Stack-arg-use:true",
  "Standard-calling-convention-used",
  "Stack-frame-management-present",
  "Explicit-stack-allocation-size:0x10",
  "Callee-saves-registers-present",
  "Standard-function-return",
  "Conditional-branching-present",
  "External-function-calls-present",
  "External-call-type:unspecified-helper (sub_1FE48)",
  "External-call-type:unspecified-helper (sub_1EAC0)",
  "External-call-type:unspecified-helper (sub_20724)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_200D4)",
  "External-call-type:unspecified-helper (sub_1FC80)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1F358)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1F5DC)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1F5DC)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "Integer-size-hint:32-bit",
  "Fixed-value-comparison:2",
  "Fixed-value-comparison:0",
  "Fixed-value-assignment:3",
  "Fixed-value-assignment:0",
  "Fixed-value-assignment:0",
  "Address-or-offset-constant:0x56178",
  "Bitwise-operation:CLZ",
  "Bitwise-operation:LSRS",
  "Bitwise-mask-value:0x56178",
  "Inferred-algorithm:data-processing-helper",
  "Inferred-algorithm:error-or-alternative-path",
  "Inferred-algorithm:unspecified-helper"
]
```<|im_end|>
############
```assembly
loc_366E0:
    PUSH {R3-R5,LR}
    MOV R5, R2
    MOV R2, R1
    MOVS R1, #0
    MOV R4, R0
    BLX memchr
    CBZ R0, loc_3670E
loc_366F0:
    ADDS R0, #1
    MOVS R1, #4
    SUBS R3, R0, R4
    MOVS R0, #1
    STR R3, [R5]
    BL sub_193B8
    MOV R5, R0
    MOV R0, R4
    BL sub_18A88
    MOV R3, R5
    STR R0, [R5]
loc_3670A:
    MOV R0, R3
    POP {R3-R5,PC}
loc_3670E:
    MOV R3, R0
    B loc_3670A
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:byte",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:memchr",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:4",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "memory-write-to-output-parameter-offset",
  "memory-read-from-output-parameter-offset",
  "byte-level-operations",
  "bitwise-operation:OR",
  "inferred-algorithm:string-search-and-replacement",
  "inferred-algorithm:data-processing-helper"
]
```<|im_end|>
############
```assembly
loc_2CB68:
    PUSH {R3-R5,LR}
    MOVW R1, #0xA374
    MOVS R2, #0
    MOVT.W R1, #3
    BL sub_3694C
    MOV R5, R0
    CBZ R0, locret_2CB8C
loc_2CB7C:
    BL sub_2AB90
    MOV R4, R0
    MOV R0, R5
    BLX fclose
    MOV R0, R4
    POP {R3-R5,PC}
loc_2CB8C:
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_3694C)",
  "external-call-type:file-close (fclose)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0xA374",
  "fixed-value-assignment:3",
  "address-or-offset-constant:sub_3694C",
  "address-or-offset-constant:sub_2AB90",
  "address-or-offset-constant:sub_2CB8C",
  "address-or-offset-constant:fclose",
  "inferred-algorithm:file-handling",
  "inferred-algorithm:conditional-resource-release"
]
```<|im_end|>
############
```assembly
loc_1E688:
    PUSH {R3-R5,LR}
    MOV R4, R0
    LDR R0, [R0]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    CBZ R0, loc_1E6AA
loc_1E698:
    LDR R2, [R4]
    MOV R5, R0
    MOV R1, R4
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    MOV R0, R5
    POP {R3-R5,PC}
loc_1E6AA:
    BLX abort
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:memmove (memcpy)",
  "external-call-type:error-or-alternative-path (abort)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:4",
  "fixed-value-assignment:1",
  "byte-level-operation:left-shift",
  "memory-read-from-input-parameter-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:abort",
  "inferred-algorithm:dynamic-memory-allocation-or-manipulation",
  "inferred-algorithm:buffer-copy-or-update",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_11284:
    ADR R12, 0x1128C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(rewind_ptr - 0x5528C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "address-or-offset-constant:0x1128C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:rewind_ptr",
  "address-or-offset-constant:-0x5528C",
  "inferred-algorithm:jump-table-or-patch-table",
  "inferred-algorithm:dynamic-function-dispatch",
  "inferred-algorithm:program-flow-redirection"
]
```<|im_end|>
############
```assembly
loc_56870:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_56850:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_12E5C:
    MOV R3, #0x56198
    MOVW R0, #0x8AD4
    MOVS R2, #0x27
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    B.W j_fwrite
```
Output:```json
[
  "return-type:integer",
  "argument-count:5",
  "arg0-type:file-pointer",
  "arg1-type:buffer-pointer",
  "arg2-type:size-t",
  "arg3-type:stream-pointer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fwrite)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56198",
  "fixed-value-assignment:0x8AD4",
  "fixed-value-assignment:0x27",
  "fixed-value-assignment:1",
  "fixed-value-assignment:3",
  "inferred-algorithm:output-data-writing",
  "inferred-algorithm:file-io"
]
```<|im_end|>
############
```assembly
loc_16938:
    LDR R3, [R0]
    CMP R3, #0
    BEQ loc_169BC
loc_1693E:
    CMP R3, #1
    BNE loc_1697E
loc_16942:
    LDR R1, [R0,#4]
    CMP R1, #0
    BEQ loc_16A2C
loc_16948:
    CMP R1, #1
    BNE loc_16A12
loc_1694C:
    LDR R3, [R0,#8]
    MOV.W LR, #0x30
    MOV R0, R6
    LDR R2, [R4,#0x10]
    LDR R1, [R4,#0xC]
    ADD R6, SP, #0x80+s
    STMEA.W SP, {R6,LR}
    BL sub_1C22C
loc_16962:
    LDR R3, [R4]
    CBZ R3, loc_169BC
loc_16966:
    CMP R3, #1
    BNE.W loc_16AF2
loc_1696C:
    LDR R3, [R4,#0x20]
    LSLS R3, R3, #0x1C
    BEQ loc_16998
loc_16972:
    MOVW R8, #0xA960
    MOVS R6, #0
    MOVT.W R8, #3
    B loc_169DA
loc_1697E:
    MOVW R1, #0xA624
    MOVW R0, #0xA9BC
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewRead
    MOVW R2, #0x626
    BLX __assert_fail
loc_16998:
    BL sub_1B3F4
    MOV R1, R6
    MOV R8, R0
    BL sub_1BC4C
    MOV R0, R8
    ADD R1, SP, #0x80+var_3C
    BL sub_1B38C
    MOV R0, R8
    LDR R2, [R4,#0x20]
    LDR R1, [R4,#0x1C]
    BL sub_1B788
    MOV R0, R8
    BL sub_1B400
loc_169BC:
    LDR R0, [R4,#0x1C]
    ADD R1, SP, #0x80+var_70
    LDR R3, [R4,#0x20]
    ADD R2, SP, #0x80+var_78
    STR R0, [SP,#0x80+var_70]
    ADD R0, SP, #0x80+var_6C
    STR R3, [SP,#0x80+var_6C]
    BL sub_198D4
    CBNZ R0, loc_16A38
loc_169D0:
    MOV R8, #0x3A948
    MOVS R6, #0
loc_169DA:
    LDR R1, [R4,#0x2C]
    LDR R0, [R4,#0x24]
    BL sub_194E4
    LDR R0, [R4,#0x24]
    BL sub_19494
    MOV R0, R4
    MOVS R1, #0x30
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    CMP R7, #0
    BEQ.W loc_16B0C
loc_169FC:
    MOV R0, R6
    STR.W R8, [R7]
loc_16A02:
    LDR R2, [SP,#0x80+var_2C]
    LDR R3, [R5]
    CMP R2, R3
    BNE.W loc_16BDE
loc_16A0C:
    ADD SP, SP, #0x5C
    POP.W {R4-R11,PC}
loc_16A12:
    MOVW R1, #0xA624
    MOVW R0, #0xA9E0
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewRead
    MOVW R2, #0x635
    BLX __assert_fail
loc_16A2C:
    ADD R6, SP, #0x80+s
    MOVS R2, #0x30
    MOV R0, R6
    BLX memset
    B loc_16962
loc_16A38:
    ADD R2, SP, #0x80+var_74
    ADD R1, SP, #0x80+var_70
    ADD R0, SP, #0x80+var_6C
    BL sub_198D4
    CMP R0, #0
    BEQ loc_169D0
loc_16A46:
    LDR R2, [SP,#0x80+var_78]
    LDR R3, [SP,#0x80+var_74]
    CMP R2, R3
    BNE loc_169D0
loc_16A4E:
    LDR R3, [R4,#0x14]
    CMP R3, #0
    BLE.W loc_16BC8
loc_16A56:
    MOV.W R9, #0
    MOV R10, #0x3AA04
    MOV R8, R9
    MOV R6, R9
loc_16A66:
    ADD R2, SP, #0x80+var_68
    ADD R1, SP, #0x80+var_70
    ADD R0, SP, #0x80+var_6C
    BL sub_19898
    CMP R0, #0
    BEQ.W loc_16BBE
loc_16A76:
    MOV R2, R0
    LDR R1, [SP,#0x80+var_68]
    MOV R0, R10
    BL sub_18C24
    MOV R11, R0
    BL sub_2AD9C
    MOV R9, R0
    MOV R0, R11
    BL sub_19494
    CMP.W R9, #0
    BEQ.W loc_16BB4
loc_16A96:
    LDR.W R3, [R9,#0x20]
    LDR R2, [SP,#0x80+var_70]
    CMP R3, #0
    STR R2, [SP,#0x80+var_64]
    BLE.W loc_16BB0
loc_16AA4:
    MOV.W R11, #0
    B loc_16AB6
loc_16AAA:
    LDR.W R2, [R9,#0x20]
    ADD.W R11, R11, #1
    CMP R2, R11
    BLE loc_16B12
loc_16AB6:
    ADD R2, SP, #0x80+var_68
    ADD R1, SP, #0x80+var_70
    ADD R0, SP, #0x80+var_6C
    BL sub_19898
    CMP R0, #0
    BNE loc_16AAA
loc_16AC4:
    MOV R8, #0x3A8D4
loc_16ACC:
    CMP R6, #0
    BEQ loc_169DA
loc_16AD0:
    LDR R0, [R6,#8]
    BL sub_19494
    LDR R0, [R6,#4]
    CBZ R0, loc_16AE8
loc_16ADA:
    CMP.W R9, #0
    BEQ.W loc_16BFA
loc_16AE2:
    LDR.W R3, [R9,#4]
    BLX R3
loc_16AE8:
    MOV R0, R6
    MOVS R6, #0
    BL sub_19494
    B loc_169DA
loc_16AF2:
    MOVW R1, #0xA624
    MOVW R0, #0xA9BC
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewRead
    MOVW R2, #0x64A
    BLX __assert_fail
loc_16B0C:
    MOV R0, R6
    B loc_16A02
loc_16B10:
    B loc_16A02
loc_16B12:
    LDR R3, [SP,#0x80+var_70]
    LDR R2, [SP,#0x80+var_64]
    SUBS R3, R3, R2
loc_16B18:
    LDR R2, [R4,#0x18]
    STR R3, [SP,#0x80+var_60]
    CMP R2, R8
    BEQ loc_16B72
loc_16B20:
    ADD R2, SP, #0x80+var_68
    ADD R1, SP, #0x80+var_70
    ADD R0, SP, #0x80+var_6C
    BL sub_19898
    CMP R0, #0
    BEQ loc_16BD4
loc_16B2E:
    LDR R3, [R4,#0x18]
    CMP R3, R8
    BEQ loc_16BA0
loc_16B34:
    LDR R3, [R4,#0x14]
    ADD.W R8, R8, #1
    CMP R3, R8
    BGT loc_16A66
loc_16B3E:
    CMP R6, #0
    BEQ loc_16BC8
loc_16B42:
    LDR R2, [SP,#0x80+var_6C]
    CMP R2, #0
    BLE loc_16B6C
loc_16B48:
    LDR R3, [SP,#0x80+var_70]
    LDRB R1, [R3]
    CMP R1, #1
    BNE loc_16BE2
loc_16B50:
    ADD.W LR, R3, R2
    MOVS R1, #2
    ADDS R3, #1
    B loc_16B68
loc_16B5A:
    LDRB.W R0, [R3],#1
    ADDS R2, R1, #1
    CMP R0, R1
    UXTB R2, R2
    BNE loc_16BE2
loc_16B66:
    MOV R1, R2
loc_16B68:
    CMP LR, R3
    BNE loc_16B5A
loc_16B6C:
    MOV.W R8, #0
    B loc_169DA
loc_16B72:
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    MOVS R3, #0
    ADD R2, SP, #0x80+var_60
    ADD R1, SP, #0x80+var_64
    STR R3, [R0,#8]
    MOV R6, R0
    STR.W R9, [R0]
    MOV R0, R9
    LDR.W R3, [R9,#0x18]
    BLX R3
    STR R0, [R6,#4]
    CMP R0, #0
    BNE loc_16B20
loc_16B96:
    MOV R8, #0x3A644
    B loc_16AD0
loc_16BA0:
    CBZ R6, loc_16C14
loc_16BA2:
    MOV R2, R0
    LDR R1, [SP,#0x80+var_68]
    MOV R0, R10
    BL sub_18C24
    STR R0, [R6,#8]
    B loc_16B34
loc_16BB0:
    MOVS R3, #0
    B loc_16B18
loc_16BB4:
    MOV R8, #0x3A8B0
    B loc_16ACC
loc_16BBE:
    MOV R8, #0x3A88C
    B loc_16ACC
loc_16BC8:
    MOVW R8, #0xA9A4
    MOVS R6, #0
    MOVT.W R8, #3
    B loc_169DA
loc_16BD4:
    MOV R8, #0x3A8F8
    B loc_16ACC
loc_16BDE:
    BLX __stack_chk_fail
loc_16BE2:
    LDR R0, [R6,#8]
    MOVW R8, #0xA918
    BL sub_19494
    LDR R0, [R6,#4]
    MOVT.W R8, #3
    CMP R0, #0
    BNE.W loc_16AE2
loc_16BF8:
    B loc_16AE8
loc_16BFA:
    MOVW R1, #0xA624
    MOVW R0, #0xAA14
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewRead
    MOVW R2, #0x6BC
    BLX __assert_fail
loc_16C14:
    MOVW R1, #0xA624
    MOVW R0, #0xAA0C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewRead
    MOVW R2, #0x69F
    BLX __assert_fail
```
Output:C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_70]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_74]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_78]
    MOV R0, R10
    BL sub_18C84
    B loc_16A66
loc_16A86:
    LDR R3, [R4,#0x10]
    CMP R3, #0
    BLE.W loc_16BBE
loc_16A94:
    MOV W9, #0
    MOV R10, #0x3AA04
    MOV R8, W9
    MOV R6, W9
loc_16AA4:
    ADD R2, SP, #0x80+var_68
    ADD R1, SP, #0x80+var_70
    ADD R0, SP, #0x80+var_6C
    BL sub_19898
    CMP R0, #0
    BEQ.W loc_16BBE
loc_16AB4:
    MOV R2, R0
    LDR R1, [SP,#0x80+var_68]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_70]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_74]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_78]
    MOV R0, R10
    BL sub_18C84
    B loc_16AA4
loc_16AC4:
    LDR R3, [R4,#0x14]
    CMP R3, #0
    BLE.W loc_16BBE
loc_16AD2:
    MOV W9, #0
    MOV R10, #0x3AA04
    MOV R8, W9
    MOV R6, W9
loc_16AE2:
    ADD R2, SP, #0x80+var_68
    ADD R1, SP, #0x80+var_70
    ADD R0, SP, #0x80+var_6C
    BL sub_19898
    CMP R0, #0
    BEQ.W loc_16BBE
loc_16AF2:
    MOV R2, R0
    LDR R1, [SP,#0x80+var_68]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_70]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_74]
    MOV R0, R10
    BL sub_18C84
    ADD R2, SP, #0x80+var_68
    LDR R1, [SP,#0x80+var_78]
    MOV R0, R10
    BL sub_18C84
    B loc_16AE2
loc_16B0C:
    MOV R0, R6
    STR.W R8, [R7]
loc_16
############
```assembly
loc_1F158:
    LDR R3, [R0]
    LSLS R3, R3, #5
    SUBS R3, #1
    BMI loc_1F188
loc_1F160:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_1F176
loc_1F16C:
    B loc_1F188
loc_1F16E:
    LDR.W R2, [R0,R2,LSL#2]
    LSRS R2, R1
    BNE loc_1F188
loc_1F176:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R1, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_1F16E
loc_1F188:
    ADDS R0, R3, #1
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "bitwise-shifts-presence",
  "bitwise-shift-left:5",
  "bitwise-shift-right:5",
  "bitwise-shift-right:1",
  "bitwise-and-operation-present",
  "bitwise-and-mask:#0x1F",
  "conditional-branching-on-sign",
  "conditional-branching-on-zero",
  "conditional-branching-on-non-zero",
  "loop-counter-pattern:decrementing",
  "loop-counter-pattern:incrementing",
  "memory-access-with-offsets",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:table-lookup",
  "inferred-algorithm:bitmask-manipulation",
  "inferred-algorithm:loop-based-processing"
]
```<|im_end|>
############
```assembly
loc_1145C:
    ADR R12, 0x11464
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fgetc_ptr - 0x55464)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fgetc_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11464",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fgetc_ptr",
  "inferred-algorithm:file-i-o",
  "inferred-algorithm:dynamic-function-pointer-resolution"
]
```<|im_end|>
############
```assembly
loc_29568:
    PUSH.W {R4-R9,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0xC4
    MOV R4, R0
    MOVS R2, #0x5C
    LDR.W R3, [R9]
    MOV R8, R1
    ADD R0, SP, #0xE0+dest
    ADD.W R1, R4, #0xB8
    STR R3, [SP,#0xE0+var_24]
    BLX memcpy
    ADD R1, SP, #0xE0+dest
    ADD R0, SP, #0xE0+src
    BL sub_29130
    ADD.W R1, R4, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xE0+dest
    BLX memcpy
    LDR R3, [SP,#0xE0+var_48]
    LDR R2, [SP,#0xE0+var_50]
    LDR R1, [SP,#0xE0+var_4C]
    ADDS R3, #0x10
    ADD.W R4, R2, #0x10
    STR R3, [SP,#0xE0+var_48]
    CMP R3, #0xF
    ITE 
    MOVHI R3, R1
    ADDLS R3, R1, #1
    CMP R4, #0x3F
    STR R3, [SP,#0xE0+var_4C]
    BLS loc_29664
loc_295BC:
    ADD R4, SP, #0xE0+src
    MOV R0, R2
    MOVS R5, #0x10
    MOVS R6, #0
loc_295C4:
    ADD R3, SP, #0xE0+var_90
    MOV R1, R4
    RSB.W R2, R2, #0x40
    ADD R0, R3
    BLX memcpy
    LDR R3, [SP,#0xE0+var_50]
    LDR R7, [SP,#0xE0+var_84]
    MOV R1, SP
    RSB.W R12, R3, #0x40
    SUB.W LR, R3, #0x40
    LDR R3, [SP,#0xE0+var_88]
    ADD R5, LR
    STR R7, [SP,#0xE0+var_D4]
    ADD R4, R12
    LDR R7, [SP,#0xE0+var_80]
    STR R3, [SP,#0xE0+var_D8]
    LDR R3, [SP,#0xE0+var_74]
    STR R7, [SP,#0xE0+var_D0]
    LDR R7, [SP,#0xE0+var_7C]
    STR R3, [SP,#0xE0+var_C4]
    LDR R3, [SP,#0xE0+var_60]
    LDR R2, [SP,#0xE0+var_8C]
    STR R7, [SP,#0xE0+var_CC]
    STR R3, [SP,#0xE0+var_B0]
    LDR R7, [SP,#0xE0+var_70]
    LDR R3, [SP,#0xE0+var_5C]
    STR R2, [SP,#0xE0+var_DC]
    STR R7, [SP,#0xE0+var_C0]
    LDR R2, [SP,#0xE0+var_78]
    LDR R7, [SP,#0xE0+var_6C]
    STR R3, [SP,#0xE0+var_AC]
    LDR R3, [SP,#0xE0+var_58]
    LDR R0, [SP,#0xE0+var_90]
    STR R2, [SP,#0xE0+var_C8]
    STR R7, [SP,#0xE0+var_BC]
    LDR R2, [SP,#0xE0+var_64]
    LDR R7, [SP,#0xE0+var_68]
    STR R3, [SP,#0xE0+var_A8]
    LDR R3, [SP,#0xE0+var_54]
    STR R0, [SP,#0xE0+var_E0]
    ADD R0, SP, #0xE0+dest
    STR R2, [SP,#0xE0+var_B4]
    STR R7, [SP,#0xE0+var_B8]
    STR R3, [SP,#0xE0+var_A4]
    BL sub_28778
    CMP R5, #0x3F
    MOV.W R0, #0
    STR R6, [SP,#0xE0+var_50]
    MOV R2, R0
    BHI loc_295C4
loc_29634:
    MOV R1, R4
    ADD R0, SP, #0xE0+var_90
    MOVS R3, #0x4C
    MOV R2, R5
    BLX __memcpy_chk
    STR R5, [SP,#0xE0+var_50]
loc_29642:
    ADD R1, SP, #0xE0+dest
    ADD R0, SP, #0xE0+var_44
    BL sub_29130
    MOVS R2, #0x10
    ADD R0, SP, #0xE0+var_44
    MOV R1, R8
    BL sub_19844
    LDR R2, [SP,#0xE0+var_24]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29684
loc_2965E:
    ADD SP, SP, #0xC4
    POP.W {R4-R9,PC}
loc_29664:
    ADD R5, SP, #0xE0+src
    ADD R3, SP, #0xE0+var_20
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x70]
    STR.W R1, [R4,#-0x6C]
    STR.W R2, [R4,#-0x68]
    STR.W R3, [R4,#-0x64]
    LDR R3, [SP,#0xE0+var_50]
    ADDS R3, #0x10
    STR R3, [SP,#0xE0+var_50]
    B loc_29642
loc_29684:
    BLX __stack_chk_fail
```
Output:20]
    LDR W4, [R3,#0x10]
    LDR.W R5, [R9]
    ADDS R4, R3, R2
    LDR.W R0, [R5]
    LDR.W R1, [R5,#0x4]
    LDR.W R2, [R5,#0x8]
    LDR.W R3, [R5,#0xC]
    STR.W R0, [R4,#-0x5C]
    STR.W R1, [R4,#-0x58]
    STR.W R2, [R4,#-0x54]
    STR.W R3, [R4,#-0x50]
    LDR.W R3, [R9]
    LDR.W R4, [R5]
    ADDS R4, R3, R4
    LDR.W R0, [R4,#0x10]
    LDR.W R1, [R4,#0x14]
    LDR.W R2, [R4,#0x18]
    LDR.W R3, [R4,#0x1C]
    STR.W R0, [R4,#-0x4C]
    STR.W R1, [R4,#-0x48]
    STR.W R2, [R4,#-0x44]
    STR.W R3, [R4,#-0x40]
    LDR.W R3, [R9]
    LDR.W R4, [R5]
    ADDS R4, R3, R4
    LDR.W R0, [R4,#0x20]
    LDR.W R1, [R4,#0x24]
    LDR.W R2, [R4,#0x28]
    LDR.W R3, [R4,#0x2C]
    STR.W R0, [R4,#-0x3C]
    STR.W R1, [R4,#-0x38]
    STR.W R2, [R4,#-0x34]
    STR.W R3, [R4,#-0x30]
    LDR.W R3, [R9]
    LDR.W R4, [R5]
    ADDS R4, R3, R4
    LDR.W R0, [R4,#0x30]
    LDR.W R1, [R4,#0x34]
    LDR.W R2, [R4,#0x38]
    LDR.W R3, [R4,#0x3C]
    STR.W R0, [R4,#-0x2C]
    STR.W R1, [R4,#-0x28]
    STR.W R2, [R4,#-0x24]
    STR.W R3, [R4,#-0x20]
    LDR.W R3, [R9]
    LDR.W R4, [R5]
    ADDS R4, R3, R4
    LDR.W R0, [R4,#0x40]
    LDR.W R1, [R4,#0x44]
    LDR.W R2, [R4,#0x48]
    LDR.W R3, [R4,#0x4C]
    STR.W R0, [R4,#-0x1C]
    STR.W R1, [R4,#-0x18]
    STR.W R2, [R4,#-0x14]
    STR.W R3, [R4,#-0x10]
    LDR.W R3, [R9]
    LDR.W R4, [R5]
    ADDS R4, R3, R4
    LDR.W R0, [R4,#0x50]
    LDR.W R1, [R4,#0x54]
    LDR.W R2, [R4,#0x58]
    LDR.W R3, [R4,#0x5C]
    STR.W R0, [R4,#-0xC]
    STR.W R1, [R4,#-0x8]
    STR.W R2, [R4,#-0x4]
    STR.W R3, [R4,#0]
    ADD R1, SP, #0xE0+var_90
    ADD R0, SP, #0xE0+dest
    BLX memcpy
    ADD SP, SP, #0xC4
    POP.W {R4-R9,PC}
loc_29
############
```assembly
loc_2D424:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x54
    MOV R4, #0x56190
    LDR.W R8, [SP,#0x78+arg_0]
    MOV R7, R0
    LDR R0, [R4]
    CMP.W R8, #0
    STR R4, [SP,#0x78+var_74]
    STR R0, [SP,#0x78+var_2C]
    BLE.W loc_2D618
loc_2D446:
    MOV R4, R3
    LDR R3, [R7,#0x14]
    MOV R5, R8
    CMP R8, R3
    IT 
    MOVGE R5, R3
    CMP R3, #0x40
    ITTT 
    MOVLE R11, R1
    MOVLE R10, R2
    MOVLE R6, #0
    BLE.W loc_2D5A2
loc_2D460:
    B loc_2D62C
loc_2D462:
    SUBS R3, R5, #4
    LDR R1, [R4]
    LDR R2, [SP,#0x78+var_6C]
    LSRS R3, R3, #2
    ADDS R3, #1
    EORS R2, R1
    CMP R3, #1
    STR R2, [R4]
    MOV.W R2, R3,LSL#2
    BEQ loc_2D544
loc_2D478:
    LDR R1, [R4,#4]
    CMP R3, #2
    LDR R0, [SP,#0x78+var_68]
    EOR.W R1, R1, R0
    STR R1, [R4,#4]
    BEQ loc_2D544
loc_2D486:
    LDR R1, [R4,#8]
    CMP R3, #3
    LDR R0, [SP,#0x78+var_64]
    EOR.W R1, R1, R0
    STR R1, [R4,#8]
    BEQ loc_2D544
loc_2D494:
    LDR R1, [R4,#0xC]
    CMP R3, #4
    LDR R0, [SP,#0x78+var_60]
    EOR.W R1, R1, R0
    STR R1, [R4,#0xC]
    BEQ loc_2D544
loc_2D4A2:
    LDR R1, [R4,#0x10]
    CMP R3, #5
    LDR R0, [SP,#0x78+var_5C]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x10]
    BEQ loc_2D544
loc_2D4B0:
    LDR R1, [R4,#0x14]
    CMP R3, #6
    LDR R0, [SP,#0x78+var_58]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x14]
    BEQ loc_2D544
loc_2D4BE:
    LDR R1, [R4,#0x18]
    CMP R3, #7
    LDR R0, [SP,#0x78+var_54]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x18]
    BEQ loc_2D544
loc_2D4CC:
    LDR R0, [R4,#0x1C]
    CMP R3, #8
    LDR R1, [SP,#0x78+var_50]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x1C]
    BEQ loc_2D544
loc_2D4DA:
    LDR R0, [R4,#0x20]
    CMP R3, #9
    LDR R1, [SP,#0x78+var_4C]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x20]
    BEQ loc_2D544
loc_2D4E8:
    LDR R0, [R4,#0x24]
    CMP R3, #0xA
    LDR R1, [SP,#0x78+var_48]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x24]
    BEQ loc_2D544
loc_2D4F6:
    LDR R0, [R4,#0x28]
    CMP R3, #0xB
    LDR R1, [SP,#0x78+var_44]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x28]
    BEQ loc_2D544
loc_2D504:
    LDR R0, [R4,#0x2C]
    CMP R3, #0xC
    LDR R1, [SP,#0x78+var_40]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x2C]
    BEQ loc_2D544
loc_2D512:
    LDR R0, [R4,#0x30]
    CMP R3, #0xD
    LDR R1, [SP,#0x78+var_3C]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x30]
    BEQ loc_2D544
loc_2D520:
    LDR R0, [R4,#0x34]
    CMP R3, #0xE
    LDR R1, [SP,#0x78+var_38]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x34]
    BEQ loc_2D544
loc_2D52E:
    LDR R0, [R4,#0x38]
    CMP R3, #0xF
    LDR R1, [SP,#0x78+var_34]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x38]
    BEQ loc_2D544
loc_2D53C:
    LDR R0, [R4,#0x3C]
    LDR R1, [SP,#0x78+var_30]
    EORS R1, R0
    STR R1, [R4,#0x3C]
loc_2D544:
    CMP R5, R2
    BEQ loc_2D628
loc_2D548:
    ADD R0, SP, #0x78+var_28
    ADDS R1, R2, #1
    ADD R0, R2
    LDRB.W LR, [R4,R3,LSL#2]
    CMP R1, R5
    LDRB.W R0, [R0,#-0x44]
    EOR.W R0, LR, R0
    STRB.W R0, [R4,R3,LSL#2]
    BGE loc_2D628
loc_2D562:
    ADD R3, SP, #0x78+var_28
    ADDS R2, #2
    ADD R3, R1
    LDRB R0, [R4,R1]
    CMP R5, R2
    LDRB.W R3, [R3,#-0x44]
    EOR.W R3, R3, R0
    STRB R3, [R4,R1]
    BLE loc_2D628
loc_2D578:
    ADD R3, SP, #0x78+var_28
    LDRB R1, [R4,R2]
    ADD R3, R2
    ADDS R0, R4, R5
    LDRB.W R3, [R3,#-0x44]
    EORS R3, R1
    STRB R3, [R4,R2]
loc_2D588:
    SUB.W R8, R8, R5
    MOV R4, R0
    CMP.W R8, #0
    BLE loc_2D618
loc_2D594:
    LDR R3, [R7,#0x14]
    CMP R3, R8
    MOV R5, R3
    IT 
    MOVGE R5, R8
    CMP R3, #0x40
    BGT loc_2D62C
loc_2D5A2:
    LSRS R2, R6, #0x18
    LSRS R3, R6, #0x10
    STRB.W R6, [SP,#0x78+var_6D]
    STRB.W R2, [SP,#0x78+var_70]
    STRB.W R3, [SP,#0x78+var_6F]
    LSRS R3, R6, #8
    LDR R2, [R7]
    ADDS R6, #1
    STRB.W R3, [SP,#0x78+var_6E]
    BLX R2
    LDR R3, [R7,#8]
    MOV R2, R10
    MOV R1, R11
    MOV R9, R0
    BLX R3
    MOV R0, R9
    LDR R3, [R7,#8]
    MOVS R2, #4
    ADD R1, SP, #0x78+var_70
    BLX R3
    MOV R0, R9
    LDR R3, [R7,#0xC]
    ADD R1, SP, #0x78+var_6C
    BLX R3
    CMP R5, #0
    BLE loc_2D628
loc_2D5DE:
    CMP R5, #5
    UBFX.W R2, R4, #0, #2
    ITE 
    MOVLS R3, #0
    MOVHI R3, #1
    CMP R2, #0
    IT 
    MOVNE R3, #0
    CMP R3, #0
    BNE.W loc_2D462
loc_2D5F6:
    ADD.W R1, SP, #0x78+var_6D
    ADDS R0, R4, R5
loc_2D5FC:
    LDRB R3, [R4]
    LDRB.W R2, [R1,#1]!
    EORS R3, R2
    STRB.W R3, [R4],#1
    CMP R4, R0
    BNE loc_2D5FC
loc_2D60C:
    SUB.W R8, R8, R5
    MOV R4, R0
    CMP.W R8, #0
    BGT loc_2D594
loc_2D618:
    LDR R3, [SP,#0x78+var_74]
    LDR R2, [SP,#0x78+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_2D646
loc_2D622:
    ADD SP, SP, #0x54
    POP.W {R4-R11,PC}
loc_2D628:
    ADDS R0, R4, R5
    B loc_2D588
loc_2D62C:
    MOVW R1, #0x3B04
    MOVW R0, #0x3B10
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aOaepMask
    MOVW R2, #0x3BA
    BLX __assert_fail
loc_2D646:
    BLX __stack_chk_fail
```
Output:0
    STR R1, [R4,#0x38]
    BEQ loc_2D544
loc_2D53C:
    LDR R0, [R4,#0x3C]
    CMP R3, #0x10
    LDR R1, [SP,#0x78+var_30]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x3C]
    BEQ loc_2D544
loc_2D544:
    ADDS R3, R3, #1
    CMP R3, #0x11
    BLE loc_2D4CC
    ADDS R3, R5, #4
    LDR R1, [R4]
    LDR R2, [SP,#0x78+var_6C]
    LSRS R3, R3, #2
    ADDS R3, #1
    EORS R2, R1
    CMP R3, #1
    STR R2, [R4]
    MOV.W R2, R3,LSL#2
    BNE loc_2D4DA
    ADDS R3, R5, #4
    LDR R1, [R4,#4]
    CMP R3, #2
    LDR R0, [SP,#0x78+var_68]
    EOR.W R1, R1, R0
    STR R1, [R4,#4]
    BNE loc_2D4E8
    ADDS R3, R5, #4
    LDR R1, [R4,#8]
    CMP R3, #3
    LDR R0, [SP,#0x78+var_64]
    EOR.W R1, R1, R0
    STR R1, [R4,#8]
    BNE loc_2D4F6
    ADDS R3, R5, #4
    LDR R1, [R4,#0xC]
    CMP R3, #4
    LDR R0, [SP,#0x78+var_60]
    EOR.W R1, R1, R0
    STR R1, [R4,#0xC]
    BNE loc_2D504
    ADDS R3, R5, #4
    LDR R1, [R4,#0x10]
    CMP R3, #5
    LDR R0, [SP,#0x78+var_5C]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x10]
    BNE loc_2D512
    ADDS R3, R5, #4
    LDR R1, [R4,#0x14]
    CMP R3, #6
    LDR R0, [SP,#0x78+var_58]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x14]
    BNE loc_2D520
    ADDS R3, R5, #4
    LDR R1, [R4,#0x18]
    CMP R3, #7
    LDR R0, [SP,#0x78+var_54]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x18]
    BNE loc_2D52E
    ADDS R3, R5, #4
    LDR R0, [R4,#0x1C]
    CMP R3, #8
    LDR R1, [SP,#0x78+var_50]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x1C]
    BNE loc_2D53C
    ADDS R3, R5, #4
    LDR R0, [R4,#0x20]
    CMP R3, #9
    LDR R1, [SP,#0x78+var_4C]
    EOR.W R1, R1, R0
    STR R1, [R4,#0x20]
    BNE loc_2D544
    ADDS R3, R5, #4
    LDR R0, [R4,#0x24]
    CMP R3, #0
############
```assembly
loc_5691C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1892C:
    PUSH.W {R4-R10,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0xD0
    MOV R6, R0
    MOV R0, R1
    LDR R3, [R5]
    MOV R7, R1
    STR R3, [SP,#0xF0+var_24]
    BLX strlen
    LDR.W R8, [R6,#0xC]
    ADDS R0, #1
    CMP R0, R8
    IT 
    LDRLE R0, [R6,#8]
    BGT loc_1896A
loc_18956:
    MOV R1, R7
    BLX strcpy
    LDR R2, [SP,#0xF0+var_24]
    LDR R3, [R5]
    CMP R2, R3
    BNE loc_18A0C
loc_18964:
    ADD SP, SP, #0xD0
    POP.W {R4-R10,PC}
loc_1896A:
    ADD.W R0, R0, R0,LSL#2
    ADDS R4, R0, #3
    BICS.W R0, R0, R0,ASR#32
    IT 
    MOVCS R0, R4
    ASRS R4, R0, #2
    ADD.W R4, R4, #0x200
    CMP.W R4, #0x80000000
    BCS loc_189D8
loc_18984:
    CMP R4, #0
    ITE 
    MOVNE R0, R4
    MOVEQ R0, #1
    BLX malloc
    MOV R10, R0
    CBZ R0, loc_189D8
loc_18994:
    LDR.W R9, [R6,#8]
    MOV R2, R8
    MOV R0, R10
    MOV R1, R9
    BLX memcpy
    MOV R0, R9
    CMP.W R8, #0
    BNE loc_189B8
loc_189AA:
    BLX free
loc_189AE:
    MOV R0, R10
    STR.W R10, [R6,#8]
    STR R4, [R6,#0xC]
    B loc_18956
loc_189B8:
    MOV R2, R8
    MOVS R1, #0
    MOV R0, R9
    BLX memset
    LDRB.W R3, [R9]
    CBZ R3, loc_189D0
loc_189C8:
    LDRB.W R3, [R9,#1]!
    CMP R3, #0
    BNE loc_189C8
loc_189D0:
    LDR R0, [R6,#8]
    CMP R0, #0
    BEQ loc_189AE
loc_189D6:
    B loc_189AA
loc_189D8:
    MOV R3, #0x3AE48
    ADD.W LR, SP, #0xF0+var_EC
    MOV.W R10, #0
    LDM R3, {R0-R3}
    STM.W LR!, {R0-R2}
    ADD R1, SP, #0xF0+var_EC
    STRH.W R3, [LR],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB.W R3, [LR]
    BL sub_12E78
loc_18A06:
    LDR.W R8, [R6,#0xC]
    B loc_18994
loc_18A0C:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:pointer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:string",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:strlen",
  "external-call-type:strcpy",
  "external-call-type:malloc",
  "external-call-type:free",
  "external-call-type:memset",
  "external-call-type:sub_12E78",
  "external-call-type:__stack_chk_fail",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-masks",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "memory-write-to-output-parameter-offset:8",
  "memory-read-from-output-parameter-offset:C",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x200",
  "fixed-value-assignment:0x80000000",
  "fixed-value-assignment:0x3AE48",
  "fixed-value-assignment:0x54E4",
  "fixed-value-assignment:0x10",
  "address-or-offset-constant:sub_12E78",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-copy-and-manipulation",
  "inferred-algorithm:dynamically-sized-memory-allocation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:loop-with-counter-pattern"
]
```<|im_end|>
############
```assembly
loc_568E8:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_114D0:
    ADR R12, 0x114D8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(readdir_ptr - 0x554D8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "no-standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (readdir_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x114D8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:readdir_ptr",
  "inferred-algorithm:file-directory-access",
  "inferred-algorithm:indirect-function-pointer"
]
```<|im_end|>
############
```assembly
loc_1B3F4:
    MOV.W R1, #0x3F0
    MOVS R0, #1
    B.W sub_193B8
```
Output:```json
[
  "return-type:integer",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "integer-size-hint:16-bit",
  "fixed-value-assignment:0x3F0",
  "fixed-value-assignment:1",
  "inferred-algorithm:data-processing"
]
```<|im_end|>
############
```assembly
loc_14428:
    PUSH.W {R4-R11,LR}
    MOV R8, #0x56190
    SUB SP, SP, #0x2C
    MOV R5, R0
    MOV R11, R1
    LDR.W R3, [R8]
    MOVS R1, #0x38
    MOVS R0, #1
    MOVS R4, #0
    STR R3, [SP,#0x50+var_2C]
    BL sub_193B8
    MOV R2, R4
    MOV R1, #0x3A374
    MOV R6, R0
    MOV R0, R5
    STR R4, [R6,#0x2C]
    STR R4, [R6,#0x34]
    STR R4, [R6,#0x30]
    BL sub_3694C
    MOV R7, R0
    CMP R0, #0
    BEQ loc_1452E
loc_14468:
    BL sub_18E74
    MOV R5, R0
    CMP R0, #0
    BEQ loc_1451E
loc_14472:
    BLX strlen
    ADD R0, R5
    CMP R5, R0
    BCS loc_144A0
loc_1447C:
    LDRB.W R3, [R0,#-1]
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_144A0
loc_14488:
    SUBS R0, #1
    MOV R2, R4
    B loc_1449A
loc_1448E:
    LDRB.W R3, [R0,#-1]!
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_144A0
loc_1449A:
    CMP R5, R0
    STRB R2, [R0]
    BNE loc_1448E
loc_144A0:
    MOVW R1, #0xA248
    MOV R0, R5
    MOVT.W R1, #3
    BL sub_1990C
    CMP R0, #0
    BNE loc_1453E
loc_144B2:
    MOV R4, #0x3A11C
    ADD R3, SP, #0x50+var_30
    STR R3, [SP,#0x50+var_50]
loc_144BE:
    MOV R0, R5
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R0, [SP,#0x50+var_50]
loc_144D4:
    MOVS R1, #4
    BL sub_194E4
    LDR R0, [R6,#0x2C]
    CBZ R0, loc_144EA
loc_144DE:
    LDR R1, [R6,#0x34]
    BL sub_194E4
    LDR R0, [R6,#0x2C]
    BL sub_19494
loc_144EA:
    MOV R0, R6
    MOVS R1, #0x38
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
    CMP.W R11, #0
    BEQ loc_14502
loc_144FE:
    STR.W R4, [R11]
loc_14502:
    MOV R0, R7
    CBZ R7, loc_1450C
loc_14506:
    BLX fclose
    MOVS R0, #0
loc_1450C:
    LDR R2, [SP,#0x50+var_2C]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE.W loc_148FA
loc_14518:
    ADD SP, SP, #0x2C
    POP.W {R4-R11,PC}
loc_1451E:
    ADD R3, SP, #0x50+var_30
    MOVW R4, #0xA104
    STR R3, [SP,#0x50+var_50]
    MOVT.W R4, #3
    MOV R0, R3
    B loc_144D4
loc_1452E:
    ADD R3, SP, #0x50+var_30
    MOVW R4, #0xA0EC
    STR R3, [SP,#0x50+var_50]
    MOVT.W R4, #3
    MOV R0, R3
    B loc_144D4
loc_1453E:
    MOVW R1, #0xA254
    MOV R0, R5
    MOVT.W R1, #3
    BL sub_1992C
    CMP R0, #0
    BEQ loc_144B2
loc_14550:
    MOVW R1, #0xA268
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_1469C
loc_14564:
    MOVW R1, #0xA288
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_1486C
loc_14578:
    STR R0, [R6]
loc_1457A:
    MOV R0, R5
    MOVS R4, #0
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOVS R2, #0x20
    STR R4, [R6,#4]
    MOV R1, R4
    ADD.W R0, R6, #0xC
    BLX memset
    MOV R2, #0x47FF1
    STR R7, [SP,#0x50+var_4C]
    STR.W R8, [SP,#0x50+var_40]
    MOV R8, R4
    MOV R7, R2
    MOVW R3, #0xA2EC
    STR.W R11, [SP,#0x50+var_44]
    MOVT.W R3, #3
    STR R3, [SP,#0x50+var_48]
    ADD R3, SP, #0x50+var_30
    STR R3, [SP,#0x50+var_50]
loc_145C2:
    LDR R0, [SP,#0x50+var_4C]
    BL sub_18E74
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_148A0
loc_145D0:
    BLX strlen
    ADD R0, R5
    CMP R5, R0
    BCS loc_145FE
loc_145DA:
    LDRB.W R3, [R0,#-1]
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_145FE
loc_145E6:
    SUBS R0, #1
    MOVS R2, #0
    B loc_145F8
loc_145EC:
    LDRB.W R3, [R0,#-1]!
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_145FE
loc_145F8:
    CMP R0, R5
    STRB R2, [R0]
    BNE loc_145EC
loc_145FE:
    LDR R1, [SP,#0x50+var_48]
    MOV R0, R5
    BL sub_1990C
    CMP R0, #0
    BNE.W loc_14746
loc_1460C:
    MOVS R1, #0x3A
    MOV R0, R5
    BLX strchr
    CMP R0, #0
    BEQ.W loc_147A4
loc_1461A:
    CMP.W R8, #0
    BNE.W loc_148B6
loc_14622:
    LDRB.W R9, [R0,#1]
    ADD.W R10, R0, #1
    STRB.W R8, [R0]
    CMP.W R9, #0
    BEQ loc_146A2
loc_14634:
    BLX __ctype_b_loc
    MOV R3, R9
    LDR R2, [R0]
    B loc_14644
loc_1463E:
    LDRB.W R3, [R10,#1]!
    CBZ R3, loc_146A2
loc_14644:
    LDRH.W R1, [R2,R3,LSL#1]
    LSLS R0, R1, #0x12
    BMI loc_1463E
loc_1464C:
    MOVW R1, #0xA2F8
    MOV R0, R5
    MOVT.W R1, #3
    MOV R9, R3
    BLX strcmp
    CBNZ R0, loc_146B6
loc_1465E:
    CMP.W R9, #0x34
    BNE.W loc_148CA
loc_14666:
    LDRB.W R3, [R10,#1]
    CMP R3, #0x2C
    BNE.W loc_148CA
loc_14670:
    MOVW R1, #0xA304
    ADD.W R0, R10, #2
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_14686
loc_14682:
    MOVS R3, #1
    STR R3, [R6,#4]
loc_14686:
    MOV R0, R5
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    B loc_145C2
loc_1469C:
    MOVS R3, #1
    STR R3, [R6]
    B loc_1457A
loc_146A2:
    MOVW R1, #0xA2F8
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_148CA
loc_146B6:
    MOVW R1, #0xA310
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE loc_14686
loc_146C8:
    MOVW R1, #0xA31C
    MOVS R2, #0xD
    MOVT.W R1, #3
    MOV R0, R10
    BLX strncmp
    CMP R0, #0
    BNE.W loc_14826
loc_146DE:
    MOV.W R9, #8
    STR R0, [R6,#8]
loc_146E4:
    MOV R0, R10
    MOVS R1, #0x2C
    BLX strchr
    MOV R11, #0x3A33C
    STR R4, [SP,#0x50+var_3C]
    ADD.W R9, R0, R9,LSL#1
    ADD.W R10, R0, #1
    ADD.W R3, R9, #1
    ADD.W R9, R6, #0xB
    MOV R4, R9
    MOV R9, R3
loc_1470A:
    ADD R2, SP, #0x50+var_38
    MOV R1, R11
    MOV R0, R10
    BLX __isoc99_sscanf
    CMP R0, #1
    BNE.W loc_14844
loc_1471A:
    LDR R2, [SP,#0x50+var_38]
    ADD.W R10, R10, #2
    CMP R10, R9
    STRB.W R2, [R4,#1]!
    BNE loc_1470A
loc_14728:
    LDRB.W R3, [R10]
    LDR R4, [SP,#0x50+var_3C]
    CMP R3, #0
    BEQ loc_14686
loc_14732:
    MOVW R4, #0xA18C
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_14746:
    MOVW R1, #0xA254
    MOV R0, R5
    MOVT.W R1, #3
    BL sub_1992C
    CMP R0, #0
    BEQ.W loc_1460C
loc_1475A:
    LDR R7, [SP,#0x50+var_4C]
    MOV R0, R5
    LDR.W R11, [SP,#0x50+var_44]
    LDR.W R8, [SP,#0x50+var_40]
    BL sub_19494
    MOV R0, R7
    BLX fclose
    LDR R3, [R6,#0x30]
    CMP R3, #0
    BEQ.W loc_148EC
loc_14778:
    LDR R7, [R6,#0x2C]
    CMP R7, #0
    BEQ.W loc_14920
loc_14780:
    LDR R2, [R6,#4]
    CBZ R2, loc_1478A
loc_14784:
    LSLS R3, R3, #0x1D
    BNE.W loc_148FE
loc_1478A:
    LDR R0, [SP,#0x50+var_50]
    MOVS R1, #4
    BL sub_194E4
    MOV R0, R6
    CMP.W R11, #0
    BEQ.W loc_1450C
loc_1479C:
    MOVS R3, #0
    STR.W R3, [R11]
    B loc_1450C
loc_147A4:
    ADD.W R8, R5, #0xFFFFFFFF
loc_147A8:
    LDRB.W R2, [R8,#1]!
    BIC.W R3, R2, #0x20
    SUBS R3, #0x41
    CMP R3, #0x19
    BLS loc_147CE
loc_147B6:
    SUB.W R3, R2, #0x2B
    UXTB R3, R3
    CMP R3, #0x12
    BLS loc_147C6
loc_147C0:
    MOV.W R8, #1
    B loc_14686
loc_147C6:
    LSR.W R3, R7, R3
    LSLS R1, R3, #0x1F
    BPL loc_147C0
loc_147CE:
    ADD R3, SP, #0x50+var_28
    ADD R3, R4
    ADDS R4, #1
    CMP R4, #4
    STRB.W R2, [R3,#-8]
    BNE loc_147A8
loc_147DC:
    ADD R1, SP, #0x50+src
    LDR R0, [SP,#0x50+var_50]
    BL sub_19044
    SUBS R4, R0, #0
    BLE loc_14858
loc_147E8:
    LDR R3, [R6,#0x30]
    LDR R2, [R6,#0x34]
    ADDS R1, R4, R3
    CMP R1, R2
    BGT loc_14810
loc_147F2:
    LDR R2, [R6,#0x2C]
loc_147F4:
    ADDS R0, R2, R3
    ADD R1, SP, #0x50+src
    MOV R2, R4
    BLX memcpy
    LDR R3, [R6,#0x30]
    MOVS R1, #3
    ADD R0, SP, #0x50+src
    ADD R4, R3
    STR R4, [R6,#0x30]
    BL sub_194E4
    MOVS R4, #0
    B loc_147A8
loc_14810:
    ADD.W R1, R1, #0x100
    MOVS R2, #1
    STR R1, [R6,#0x34]
    LDR R0, [R6,#0x2C]
    BL sub_19420
    LDR R3, [R6,#0x30]
    MOV R2, R0
    STR R0, [R6,#0x2C]
    B loc_147F4
loc_14826:
    MOVW R1, #0xA32C
    MOVS R2, #0xC
    MOVT.W R1, #3
    MOV R0, R10
    BLX strncmp
    CMP R0, #0
    BNE loc_1490C
loc_1483A:
    MOVS R3, #1
    MOV.W R9, #0x10
    STR R3, [R6,#8]
    B loc_146E4
loc_14844:
    MOVW R4, #0xA1B4
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_14858:
    MOVW R4, #0xA174
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_1486C:
    MOVW R1, #0xA2A8
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_14882
loc_1487C:
    MOVS R3, #2
    STR R3, [R6]
    B loc_1457A
loc_14882:
    MOVW R1, #0xA2C8
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_148DE
loc_14892:
    MOVW R4, #0xA228
    ADD R3, SP, #0x50+var_30
    MOVT.W R4, #3
    STR R3, [SP,#0x50+var_50]
    B loc_144BE
loc_148A0:
    MOVW R4, #0xA104
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    LDR R0, [SP,#0x50+var_50]
    B loc_144D4
loc_148B6:
    MOVW R4, #0xA1EC
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_148CA:
    MOVW R4, #0xA148
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_148DE:
    MOVW R4, #0xA210
    ADD R3, SP, #0x50+var_30
    MOVT.W R4, #3
    STR R3, [SP,#0x50+var_50]
    B loc_144BE
loc_148EC:
    MOVW R4, #0xA098
    MOV R7, R3
    MOVT.W R4, #3
    LDR R0, [SP,#0x50+var_50]
    B loc_144D4
loc_148FA:
    BLX __stack_chk_fail
loc_148FE:
    MOVW R4, #0xA0B0
    MOVS R7, #0
    MOVT.W R4, #3
    LDR R0, [SP,#0x50+var_50]
    B loc_144D4
loc_1490C:
    MOVW R4, #0xA1D8
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_14920:
    MOVW R4, #0xA098
    LDR R0, [SP,#0x50+var_50]
    MOVT.W R4, #3
    B loc_144D4
```
Output:, R4
    STR R2, [R6,#0x10]
    MOV R1, R4
    ADD.W R0, R6, #0x10
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x14]
    MOV R1, R4
    ADD.W R0, R6, #0x14
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x18]
    MOV R1, R4
    ADD.W R0, R6, #0x18
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x1C]
    MOV R1, R4
    ADD.W R0, R6, #0x1C
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x20]
    MOV R1, R4
    ADD.W R0, R6, #0x20
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x24]
    MOV R1, R4
    ADD.W R0, R6, #0x24
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x28]
    MOV R1, R4
    ADD.W R0, R6, #0x28
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x2C]
    MOV R1, R4
    ADD.W R0, R6, #0x2C
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x30]
    MOV R1, R4
    ADD.W R0, R6, #0x30
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x34]
    MOV R1, R4
    ADD.W R0, R6, #0x34
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x38]
    MOV R1, R4
    ADD.W R0, R6, #0x38
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x3C]
    MOV R1, R4
    ADD.W R0, R6, #0x3C
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x40]
    MOV R1, R4
    ADD.W R0, R6, #0x40
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x44]
    MOV R1, R4
    ADD.W R0, R6, #0x44
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x48]
    MOV R1, R4
    ADD.W R0, R6, #0x48
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x4C]
    MOV R1, R4
    ADD.W R0, R6, #0x4C
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x50]
    MOV R1, R4
    ADD.W R0, R6, #0x50
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x54]
    MOV R1, R4
    ADD.W R0, R6, #0x54
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x58]
    MOV R1, R4
    ADD.W R0, R6, #0x58
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x5C]
    MOV R1, R4
    ADD.W R0, R6, #0x5C
    BLX memset
    MOV R2, R4
    STR R2, [R6,#0x60]
    MOV R1, R
############
```assembly
loc_31898:
    PUSH.W {R4-R11,LR}
    MOV R10, R0
    LDR.W R6, [R0,#0xC4]
    MOVW R9, #0x6190
    LDR.W R4, [R0,#0xC8]
    MOVT.W R9, #5
    ADD R6, R2
    LDR.W R0, [R0,#0xCC]
    CMP R2, R6
    STR.W R6, [R10,#0xC4]
    LDR.W R7, [R9]
    SUB SP, SP, #0x8C
    ITE 
    MOVLS R3, #0
    MOVHI R3, #1
    ADD R4, R3
    STR.W R4, [R10,#0xC8]
    CMP R4, R3
    LDR.W R4, [R10,#0xD0]
    MOV R5, R2
    STR R7, [SP,#0xB0+n]
    ITE 
    MOVCS R3, #0
    MOVCC R3, #1
    ADDS R6, R3, R0
    LDR.W R0, [R10,#0xC0]
    CMP R6, R3
    ITE 
    MOVCS R3, R4
    ADDCC R3, R4, #1
    STR.W R6, [R10,#0xCC]
    STR.W R3, [R10,#0xD0]
    MOV R6, R1
    CMP R0, #0
    BEQ loc_319A4
loc_318F8:
    ADDS R3, R2, R0
    CMP R3, #0x7F
    BLE loc_319B0
loc_318FE:
    ADD.W R7, R10, #0x40
    ADD R4, SP, #0xB0+n
    MOV.W R8, #0
loc_31908:
    RSB.W R2, R0, #0x80
    MOV R1, R6
    ADD R0, R7
    BLX memcpy
    LDR.W R2, [R10,#0xC0]
    ADD R0, SP, #0xB0+var_AC
    MOV R3, R10
    RSB.W R2, R2, #0x80
    ADD R6, R2
    SUBS R5, R5, R2
loc_31924:
    LDRB.W LR, [R3,#0x45]
    ADDS R0, #8
    LDRB.W R11, [R3,#0x44]
    ADDS R3, #8
    LDRB.W R2, [R3,#0x39]
    LDRB.W R12, [R3,#0x38]
    MOV.W LR, LR,LSL#16
    LDRB.W R1, [R3,#0x3F]
    ORR.W LR, LR, R11,LSL#24
    LSLS R2, R2, #0x10
    LDRB.W R11, [R3,#0x3E]
    ORR.W R12, R2, R12,LSL#24
    ORR.W R1, LR, R1
    LDRB.W R2, [R3,#0x3B]
    LDRB.W LR, [R3,#0x3A]
    ORR.W R1, R1, R11,LSL#8
    ORR.W R2, R12, R2
    STR.W R1, [R0,#-4]
    ORR.W R2, R2, LR,LSL#8
    STR.W R2, [R0,#-8]
    CMP R4, R0
    BNE loc_31924
loc_31972:
    MOV R0, R10
    ADD R1, SP, #0xB0+var_AC
    BL sub_30838
    CMP R5, #0x7F
    STR.W R8, [R10,#0xC0]
    MOV.W R0, #0
    BGT loc_31908
loc_31986:
    MOV R1, R6
    MOV R0, R7
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R10,#0xC0]
loc_31994:
    LDR R2, [SP,#0xB0+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_319C6
loc_3199E:
    ADD SP, SP, #0x8C
    POP.W {R4-R11,PC}
loc_319A4:
    CMP R2, #0x7F
    IT 
    ADDLE.W R7, R10, #0x40
    BGT loc_318FE
loc_319AE:
    B loc_31986
loc_319B0:
    ADD.W R3, R10, #0x40
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0xC0]
    ADD R3, R5
    STR.W R3, [R10,#0xC0]
    B loc_31994
loc_319C6:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8c",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "address-or-offset-constant:0xc4",
  "address-or-offset-constant:0xc8",
  "address-or-offset-constant:0xcc",
  "address-or-offset-constant:0xd0",
  "address-or-offset-constant:0x40",
  "address-or-offset-constant:0x44",
  "address-or-offset-constant:0x45",
  "address-or-offset-constant:0x46",
  "address-or-offset-constant:0x47",
  "address-or-offset-constant:0x48",
  "address-or-offset-constant:0x49",
  "address-or-offset-constant:0x4a",
  "address-or-offset-constant:0x4b",
  "address-or-offset-constant:0x4c",
  "address-or-offset-constant:0x4d",
  "address-or-offset-constant:0x4e",
  "address-or-offset-constant:0x4f",
  "address-or-offset-constant:0x50",
  "address-or-offset-constant:0x51",
  "address-or-offset-constant:0x52",
  "address-or-offset-constant:0x53",
  "address-or-offset-constant:0x54",
  "address-or-offset-constant:0x55",
  "address-or-offset-constant:0x56",
  "address-or-offset-constant:0x57",
  "address-or-offset-constant:0x58",
  "address-or-offset-constant:0x59",
  "address-or-offset-constant:0x5a",
  "address-or-offset-constant:0x5b",
  "address-or-offset-constant:0x5c",
  "address-or-offset-constant:0x5d",
  "address-or-offset-constant:0x5e",
  "address-or-offset-constant:0x5f",
  "address-or-offset-constant:0x60",
  "address-or-offset-constant:0x61",
  "address-or-offset-constant:0x62",
  "address-or-offset-constant:0x63",
  "address-or-offset-constant:0x64",
  "address-or-offset-constant:0x65",
  "address-or-offset-constant:0x66",
  "address-or-offset-constant:0x67",
  "address-or-offset-constant:0x68",
  "address-or-offset-constant:0x69",
  "address-or-offset-constant:0x6a",
  "address-or-offset-constant:0x6b",
  "address-or-offset-constant:0x6c",
  "address-or-offset-constant:0x6d",
  "address-or-offset-constant:0x6e",
  "address-or-offset-constant:0x6f",
  "address-or-offset-constant:0x70",
  "address-or-offset-constant:0x71",
  "address-or-offset-constant:0x72",
  "address-or-offset-constant:0x73",
  "address-or-offset-constant:0x74",
  "address-or-offset-constant:0x75",
  "address-or-offset-constant:0x76",
  "address-or-offset-constant:0x77",
  "address-or-offset-constant:0x78",
  "address-or-offset-constant:0x79",
  "address-or-offset-constant:0x7a",
  "address-or-offset-constant:0x7b",
  "address-or-offset-constant:0x7c",
  "address-or-offset-constant:0x7d",
  "address-or-offset-constant:
############
```assembly
loc_36E60:
    PUSH {R3-R7,LR}
    CMP R0, #0
    BEQ loc_36F14
loc_36E66:
    LDRB R3, [R0]
    MOV R5, R0
    CMP R3, #0
    BEQ loc_36F08
loc_36E6E:
    BLX strlen
    ADD.W R0, R0, R0,LSL#1
    ADDS R0, #1
loc_36E78:
    MOVS R1, #1
    BL sub_193B8
    LDRB R2, [R5]
    CMP R2, #0
    BEQ loc_36F20
loc_36E84:
    MOVW R7, #0x5398
    MOV R4, R0
    MOVT.W R7, #4
    MOVW R6, #0x7FED
    MOV.W LR, #0x25
    B loc_36EC0
loc_36E98:
    CMP.W R12, #0x19
    BLS loc_36EF6
loc_36E9E:
    STRB.W LR, [R4]
    ADDS R4, #3
    LDRB R3, [R5]
    LSRS R3, R3, #4
    LDRB R3, [R7,R3]
    STRB.W R3, [R4,#-2]
    LDRB R3, [R5]
    AND.W R3, R3, #0xF
    LDRB R3, [R7,R3]
    STRB.W R3, [R4,#-1]
    LDRB.W R2, [R5,#1]!
    CBZ R2, loc_36F02
loc_36EC0:
    SUB.W R3, R2, #0x2B
    MOVS R1, #1
    SUB.W R12, R2, #0x61
    UXTB R3, R3
    CMP R3, #0xE
    LSR.W R3, R6, R3
    AND.W R3, R3, R1
    IT 
    EORLS R1, R3
    SUB.W R3, R2, #0x40
    CMP R3, #0x1A
    ITE 
    MOVLS R1, #0
    ANDHI.W R1, R1, #1
    CMP R2, #0x5F
    ITE 
    MOVEQ R1, #0
    ANDNE.W R1, R1, #1
    CMP R1, #0
    BNE loc_36E98
loc_36EF6:
    STRB R2, [R4]
    ADDS R4, #1
    LDRB.W R2, [R5,#1]!
    CMP R2, #0
    BNE loc_36EC0
loc_36F02:
    MOVS R3, #0
    STRB R3, [R4]
    POP {R3-R7,PC}
loc_36F08:
    MOVW R5, #0x53C8
    MOVS R0, #0x31
    MOVT.W R5, #4
    B loc_36E78
loc_36F14:
    MOVW R5, #0x53C8
    MOVS R0, #0x31
    MOVT.W R5, #4
    B loc_36E78
loc_36F20:
    MOV R4, R0
    B loc_36F02
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (sub_193B8)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shift-operations-present",
  "bitwise-AND-operations-present",
  "bitwise-XOR-operations-present",
  "bitwise-CMP-operations-present",
  "bitwise-MOV-operations-present",
  "address-or-offset-constant:0x5398",
  "address-or-offset-constant:0x7FED",
  "address-or-offset-constant:0x53C8",
  "address-or-offset-constant:0x31",
  "inferred-algorithm:string-length-check",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:character-set-mapping",
  "inferred-algorithm:data-transformation-or-manipulation"
]
```<|im_end|>
############
```assembly
loc_2D134:
    PUSH {R4,LR}
    MOV R4, #dword_562CC
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    CBZ R1, loc_2D14C
loc_2D144:
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    POP {R4,PC}
loc_2D14C:
    MOV.W R2, #0x510
    MOV R0, R4
    BLX memset
    MOV R0, #0x2CCE9
    BL sub_36BA8
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R3, loc_2D19A
loc_2D168:
    MOVW R2, #0x62CC
    MOVW R1, #0xCF8D
    MOVT.W R2, #5
    MOVT.W R1, #2
    MOV R0, #0x493E0
    BL sub_19A7C
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    MOV R3, #0x56840
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    STR R0, [R3]
    POP {R4,PC}
loc_2D19A:
    BL sub_2CBB0
    B loc_2D168
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-variable",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:unspecified-helper (sub_36BA8)",
  "external-call-type:unspecified-helper (sub_19A7C)",
  "external-call-type:unspecified-helper (sub_2CBB0)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operation:OR",
  "bitwise-operation:XOR",
  "bitwise-operation:AND-clear",
  "bitwise-mask-values:[0x62CC, 0xCF8D]",
  "address-or-offset-constant:dword_562CC",
  "address-or-offset-constant:dword_567DC",
  "address-or-offset-constant:dword_567D8",
  "address-or-offset-constant:0x510",
  "address-or-offset-constant:0x2CCE9",
  "address-or-offset-constant:0x493E0",
  "address-or-offset-constant:0x56840",
  "inferred-algorithm:loop-with-counter-increment",
  "inferred-algorithm:dynamic-memory-allocation",
  "inferred-algorithm:conditional-data-access",
  "inferred-algorithm:resource-management",
  "inferred-algorithm:networking-protocol-handling",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:mathematical-computation",
  "inferred-algorithm:checksum-validation"
]
```<|im_end|>
############
```assembly
loc_36688:
    LDR R0, [R0]
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "inferred-algorithm:indirect-jump-through-pointer"
]
```<|im_end|>
############
```assembly
loc_194E4:
    CMP R0, #0
    IT 
    CMPNE R1, #0
    BNE loc_194EE
loc_194EC:
    BX LR
loc_194EE:
    PUSH {R4,LR}
    MOV R2, R1
    MOV R4, R0
    MOVS R1, #0
    BLX memset
    LDRB R3, [R4]
    CBZ R3, locret_19506
loc_194FE:
    LDRB.W R3, [R4,#1]!
    CMP R3, #0
    BNE loc_194FE
loc_19506:
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "data-packing/serialization-patterns",
  "memory-access-patterns",
  "inferred-algorithm:string-terminator-check",
  "inferred-algorithm:loop-with-counter-increment"
]
```<|im_end|>
############
```assembly
loc_5695C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_19A80:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "inferred-algorithm:simple-return"
]
```<|im_end|>
############
```assembly
loc_18C24:
    PUSH {R0-R3}
    MOVS R1, #0
    PUSH {R4-R6,LR}
    SUB SP, SP, #0x18
    ADD R5, SP, #0x38+varg_r0
    MOV R4, #0x56190
    ADD R2, SP, #0x38+var_20
    LDR.W R3, [R5],#4
    MOV R0, R1
    LDR R6, [R4]
    STR R5, [SP,#0x38+var_38]
    STR.W R1, [R2,#-8]!
    STR R6, [SP,#0x38+var_24]
    STR R5, [SP,#0x38+var_2C]
    BL sub_183C0
    LDR R2, [SP,#0x38+var_24]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_18C60
loc_18C56:
    ADD SP, SP, #0x18
    POP.W {R4-R6,LR}
    ADD SP, SP, #0x10
    BX LR
loc_18C60:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x38",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_183C0)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "memory-read-from-input-parameter-offset:varg_r0",
  "memory-read-from-input-parameter-offset:var_20",
  "memory-read-from-input-parameter-offset:var_38",
  "address-or-offset-constant:sub_183C0",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-validation-or-sanitization",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_26328:
    CMP R2, #3
    BGT loc_26330
loc_2632C:
    MOVS R0, #0
    BX LR
loc_26330:
    PUSH.W {R3-R9,LR}
    MOV R4, R1
    LDRB R3, [R1,#1]
    MOV R8, R0
    LDRB R1, [R1]
    MOV R6, R2
    LDRB R0, [R4,#2]
    LDRB R2, [R4,#3]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    LDR.W R5, [R8,#0x38]
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R9, R0, #0
    BLT loc_263FA
loc_2635C:
    SUBS R6, #4
    CMP R9, R6
    BGT loc_263FA
loc_26362:
    ADDS R4, #4
    SUB.W R6, R6, R9
    ADD.W R7, R4, R9
    CMP R4, #0
    BEQ loc_263FA
loc_26370:
    LDR R3, [R5]
    BLX R3
    LDR R3, [R0]
    MOV R5, R0
    BICS.W R2, R3, #2
    BNE loc_26466
loc_2637E:
    CBNZ R3, loc_263B8
loc_26380:
    CMP R6, #3
    BLE loc_263FA
loc_26384:
    LDRB R3, [R7,#1]
    LDRB.W R1, [R4,R9]
    LDRB R2, [R7,#3]
    LDRB R0, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    CMP R0, #0
    BLT loc_263FA
loc_263A2:
    SUBS R3, R6, #4
    CMP R0, R3
    BGT loc_263FA
loc_263A8:
    ADDS R1, R7, #4
    SUBS R6, R3, R0
    ADDS R7, R1, R0
    CBZ R1, loc_263FA
loc_263B0:
    LDR R2, [R5,#4]
    BL sub_19870
    CBZ R0, loc_263FA
loc_263B8:
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    CMP R6, #3
    MOV.W R3, #0
    STR.W R8, [R0]
    MOV R4, R0
    STR R5, [R0,#4]
    ADD.W R8, R0, #4
    STRB R3, [R0,#0x14]
    STR R3, [R0,#8]
    STR R3, [R0,#0xC]
    STR R3, [R0,#0x10]
    STR R3, [R0,#0x18]
    BGT loc_26400
loc_263DE:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_263E6
loc_263E2:
    BL sub_1E6B0
loc_263E6:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_263EE
loc_263EA:
    BL sub_1E6B0
loc_263EE:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_263FA:
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_26400:
    LDRB R3, [R7,#1]
    LDRB R1, [R7]
    LDRB R2, [R7,#3]
    LDRB R0, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_26452
loc_2641C:
    SUBS R3, R6, #4
    CMP R1, R3
    BGT loc_26452
loc_26422:
    ADDS R0, R7, #4
    BEQ loc_26452
loc_26426:
    MOV R2, R8
    BL sub_25510
    CBZ R0, loc_26452
loc_2642E:
    LDR R0, [R4,#8]
    CBZ R0, loc_2645A
loc_26432:
    LDR R3, [R4,#0xC]
    CBZ R3, loc_26456
loc_26436:
    LDR R1, [R5,#0x10]
    BL sub_1F358
    CMP R0, #0
    BGE loc_26452
loc_26440:
    LDR R1, [R5,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1F358
    CMP R0, #0
    BGE loc_26452
loc_2644C:
    MOV R0, R4
    POP.W {R3-R9,PC}
loc_26452:
    LDR R0, [R4,#8]
    CBZ R0, loc_2645A
loc_26456:
    BL sub_1E6B0
loc_2645A:
    LDR R0, [R4,#0xC]
    CMP R0, #0
    BEQ loc_263DE
loc_26460:
    BL sub_1E6B0
    B loc_263DE
loc_26466:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD20
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaNewkey
    MOVW R2, #0x6E9
    BLX __assert_fail
```
Output:0x10]
    CBZ R0, loc_2645A
loc_26456:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2645A
loc_2645A:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_26466:
    LDRB R3, [R7,#1]
    LDRB R1, [R7]
    LDRB R2, [R7,#3]
    LDRB R0, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_26472
loc_26472:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_26480
loc_26476:
    LDR R3, [R4,#0xC]
    CBZ R3, loc_26484
loc_2647A:
    LDR R1, [R5,#0x10]
    BL sub_1F358
    CMP R0, #0
    BGE loc_26472
loc_26484:
    LDR R1, [R5,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1F358
    CMP R0, #0
    BGE loc_26472
loc_26490:
    MOV R0, R4
    POP.W {R3-R9,PC}
loc_26494:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R3-R9,PC}
```
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
############
```assembly
loc_24534:
    PUSH.W {R3-R11,LR}
    LDR R3, [R0,#0x18]
    CMP R3, #0
    BEQ loc_245DE
loc_2453E:
    LDR R2, [R0,#4]
    MOV R5, R0
    MOV R10, R1
    MOV R0, R3
    LDR R2, [R2]
    CMP R2, #2
    BEQ loc_245B0
loc_2454C:
    BL sub_1F158
    ADD.W R6, R0, #0xF
    ADDS R0, #8
    IT 
    MOVMI R0, R6
    ASRS R6, R0, #3
loc_2455C:
    ADD.W R11, R6, #4
    MOVS R1, #1
    MOV R0, R11
    BL sub_193B8
    ASRS R3, R6, #0x10
    ASRS R2, R6, #0x18
    STRB R3, [R0,#1]
    ASRS R3, R6, #8
    STRB R6, [R0,#3]
    MOV R8, R0
    STRB R2, [R0]
    ADD.W R9, R0, #4
    STRB R3, [R0,#2]
    LDR R3, [R5,#4]
    LDR R3, [R3]
    CMP R3, #2
    BEQ loc_245C2
loc_24584:
    SUBS R4, R6, #1
    MOV R7, R9
    CBZ R6, loc_2459E
loc_2458A:
    MOV R1, R4
    LDR R0, [R5,#0x18]
    BL sub_1F20C
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R7],#1
    BNE loc_2458A
loc_2459C:
    ADD R9, R6
loc_2459E:
    ADD.W R3, R8, R11
    CMP R9, R3
    BNE loc_245E4
loc_245A6:
    STR.W R11, [R10]
    MOV R0, R8
    POP.W {R3-R11,PC}
loc_245B0:
    BL sub_1F158
    ADD.W R6, R0, #0xE
    ADDS R0, #7
    IT 
    MOVMI R0, R6
    ASRS R6, R0, #3
    B loc_2455C
loc_245C2:
    CMP R6, #0
    BLE loc_2459E
loc_245C6:
    MOV R7, R9
    MOVS R4, #0
loc_245CA:
    MOV R1, R4
    LDR R0, [R5,#0x18]
    BL sub_1F20C
    ADDS R4, #1
    CMP R6, R4
    STRB.W R0, [R7],#1
    BNE loc_245CA
loc_245DC:
    B loc_2459C
loc_245DE:
    MOV R0, R3
    POP.W {R3-R11,PC}
loc_245E4:
    MOVW R3, #0xF5B0
    MOVW R1, #0xFCBC
    MOVW R0, #0xF568
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOV.W R2, #0x7A0
    MOVT.W R0, #3
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_1F158)",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (sub_1F20C)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shifts-present",
  "bitwise-masks-present:0xF5B0, 0xFCBC, 0xF568",
  "memory-read-from-input-parameter-offset:0x18",
  "memory-read-from-input-parameter-offset:4",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x18",
  "address-or-offset-constant:0x4",
  "address-or-offset-constant:0xE",
  "address-or-offset-constant:0x7A0",
  "inferred-algorithm:data-processing-loop",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:conditional-data-processing",
  "inferred-algorithm:loop-counter-pattern:decrementing"
]
```<|im_end|>
############
```assembly
loc_11528:
    ADR R12, 0x11530
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(abort_ptr - 0x55530)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:direct-execution",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (abort_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11530",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:abort_ptr",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:jump-table-or-vector"
]
```<|im_end|>
############
```assembly
loc_35840:
    LDR R0, [R0]
    LSRS R2, R1, #0x1F
    CMP R0, #0
    IT 
    ORREQ.W R2, R2, #1
    CMP R2, #0
    BNE loc_358CA
loc_35850:
    PUSH {R4-R6}
    LDR R3, [R0,#0x18]
    LDR R5, [R0,#0x14]
    LDR R4, [R0,#0x1C]
    ADD R5, R3
    LDR R3, [R0,#0x20]
    ADD R4, R5
    LDR R6, [R0,#0x24]
    ADD R3, R4
    LDR R5, [R0,#0x28]
    CMP R6, #0
    IT 
    ADDNE R3, #1
    LDR R4, [R0,#0x2C]
    CMP R5, #0
    IT 
    ADDNE R3, #1
    CMP R4, #0
    IT 
    ADDNE R3, #1
    CMP R1, R3
    IT 
    MOVGE R0, R2
    BGE loc_358B6
loc_35880:
    LDR R3, [R0,#0x14]
    CMP R3, R1
    IT 
    LDRGT R0, [R0,#4]
    BGT loc_358B2
loc_3588A:
    ADDS R3, #1
    SUBS R1, R1, R3
    BMI loc_358BA
loc_35890:
    LDR R3, [R0,#0x18]
    CMP R1, R3
    IT 
    LDRLT R0, [R0,#8]
    BLT loc_358B2
loc_3589A:
    ADDS R3, #1
    SUBS R1, R1, R3
    BMI loc_358C0
loc_358A0:
    LDR R3, [R0,#0x1C]
    CMP R1, R3
    IT 
    LDRLT R0, [R0,#0xC]
    BLT loc_358B2
loc_358AA:
    ADDS R3, #1
    SUBS R1, R1, R3
    BMI loc_358C6
loc_358B0:
    LDR R0, [R0,#0x10]
loc_358B2:
    CMP R0, #0
    BNE loc_35880
loc_358B6:
    POP {R4-R6}
    BX LR
loc_358BA:
    LDR R0, [R0,#0x24]
    POP {R4-R6}
    BX LR
loc_358C0:
    LDR R0, [R0,#0x28]
    POP {R4-R6}
    BX LR
loc_358C6:
    LDR R0, [R0,#0x2C]
    B loc_358B6
loc_358CA:
    MOVS R0, #0
    BX LR
```
Output:```json
[
  "return-type:pointer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "bitwise-operations-present",
  "bitwise-operation-shift-right",
  "bitwise-operation-or",
  "conditional-branching-on-bitwise-result",
  "loop-counter-pattern:decrementing",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper",
  "integer-size-hint:32-bit",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "address-or-offset-constant:0x18",
  "address-or-offset-constant:0x14",
  "address-or-offset-constant:0x1C",
  "address-or-offset-constant:0x20",
  "address-or-offset-constant:0x24",
  "address-or-offset-constant:0x28",
  "address-or-offset-constant:0x2C",
  "address-or-offset-constant:0x10",
  "inferred-algorithm:data-structure-search-or-filtering",
  "inferred-algorithm:iteration-over-data-structure",
  "inferred-algorithm:condition-based-pointer-selection"
]
```<|im_end|>
############
```assembly
loc_56960:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1C004:
    PUSH {R4-R6,LR}
    MOV R4, #0x56190
    SUB.W SP, SP, #0x3F8
    MOV R5, R1
    MOV R1, R0
    LDR R3, [R4]
    ADD R0, SP, #0x408+var_404
    MOV R6, R2
    STR R3, [SP,#0x408+var_14]
    BL sub_1B958
    MOVS R2, #0x20
    MOVS R1, #0
    ADD R0, SP, #0x408+s
    BLX memset
    ADD R2, SP, #0x408+var_404
    MOV R1, R6
    MOV R0, R5
    BL sub_1B5BC
    ADD R0, SP, #0x408+var_404
    MOV.W R1, #0x3F0
    BL sub_194E4
    LDR R2, [SP,#0x408+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_1C04E
loc_1C048:
    ADD.W SP, SP, #0x3F8
    POP {R4-R6,PC}
loc_1C04E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x3F8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1B958)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:unspecified-helper (sub_1B5BC)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x20",
  "fixed-value-assignment:0x3F0",
  "address-or-offset-constant:sub_1B958",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:sub_1B5BC",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-initialization",
  "inferred-algorithm:data-comparison",
  "inferred-algorithm:conditional-error-handling"
]
```<|im_end|>
############
```assembly
loc_20228:
    PUSH.W {R4-R11,LR}
    MOV R4, R0
    SUB SP, SP, #0x3C
    LDR R0, [R1]
    STR R1, [SP,#0x60+src]
    ADDS R0, #1
    MOVS R1, #4
    BL sub_193B8
    CMP R0, #0
    BEQ.W loc_20716
loc_20242:
    LDR R1, [SP,#0x60+src]
    MOV R10, R0
    LDR R3, [R1]
    ADDS R2, R3, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R0, [R4]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_20716
loc_20262:
    LDR R3, [R4]
    MOV R2, #0x56170
    STR R2, [SP,#0x60+var_48]
    MOV R1, R4
    MOV R7, R2
    ADDS R2, R3, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R6, [R7]
    MOVS R1, #4
    LDR R0, [R6]
    ADDS R0, #1
    BL sub_193B8
    STR R0, [SP,#0x60+var_40]
    CMP R0, #0
    BEQ.W loc_20716
loc_2028E:
    LDR R2, [R6]
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R6, [R7,#(off_56178 - 0x56170)]
    MOVS R1, #4
    LDR R0, [R6]
    ADDS R0, #1
    BL sub_193B8
    STR R0, [SP,#0x60+var_44]
    CMP R0, #0
    BEQ.W loc_20716
loc_202AE:
    LDR R2, [R6]
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R3, [R4]
    LDR.W R3, [R4,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_206FC
loc_202C6:
    LDR R2, [SP,#0x60+src]
    LDR R3, [R2]
    LDR.W R3, [R2,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_206C4
loc_202D4:
    MOV R3, #0x3FFFFFE
    STR R3, [SP,#0x60+var_38]
    MOV R0, R5
    LDR R3, [SP,#0x60+var_48]
    MOVS R2, #1
    STR R2, [SP,#0x60+var_3C]
    LDR R1, [R3,#8]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_20572
loc_202F2:
    LDR R3, [SP,#0x60+var_48]
    MOV R0, R5
    LDR R1, [R3]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_205BE
loc_20302:
    LDR R4, [R5]
    LDR R3, [SP,#0x60+var_38]
    CMP R4, R3
    BHI.W loc_206F8
loc_2030C:
    ADDS R7, R4, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    STR R4, [R6]
    LDR R3, [SP,#0x60+var_38]
    LDR.W R4, [R10]
    CMP R4, R3
    BHI.W loc_206F8
loc_2032E:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.W R11, [R5]
    LDR.W R2, [R5,R11,LSL#2]
    MOV.W R3, R11,LSL#2
    STR R3, [SP,#0x60+var_34]
    CMP R2, #0
    BEQ.W loc_206DE
loc_2035C:
    MOVS R1, #4
    MOV R0, R11
    BL sub_193B8
    CMP.W R11, #0
    IT 
    MOVGT R2, #0
    MOV R9, R0
    IT 
    SUBGT R0, #4
    BLE loc_20386
loc_20374:
    LDR R3, [R5]
    SUBS R3, R3, R2
    ADDS R2, #1
    CMP R11, R2
    LDR.W R3, [R5,R3,LSL#2]
    STR.W R3, [R0,#4]!
    BNE loc_20374
loc_20386:
    LDR.W R4, [R10]
    MOVS R1, #4
    CMP R11, R4
    IT 
    ADDGE.W R4, R11, #1
    MOV R0, R4
    BL sub_193B8
    CMP R4, #0
    MOV.W R3, R4,LSL#2
    STR R3, [SP,#0x60+var_4C]
    MOV R8, R0
    BLE loc_203AE
loc_203A6:
    MOVS R1, #0
    MOV R2, R3
    BLX memset
loc_203AE:
    LDR.W R2, [R10]
    CMP R2, #0
    BLE loc_203D2
loc_203B6:
    LDR R3, [SP,#0x60+var_4C]
    MOV R1, R10
    MOVS R2, #1
    ADD.W LR, R8, R3
loc_203C0:
    LDR.W R3, [R1,#4]!
    ADDS R2, #1
    STR.W R3, [LR,#-4]!
    LDR.W R3, [R10]
    CMP R2, R3
    BLE loc_203C0
loc_203D2:
    LDR.W R0, [R9]
    LSRS R1, R0, #0x10
    MOV.W R2, R0,LSL#16
    IT 
    MOVNE R2, R0
    MOV.W R12, R2,LSL#8
    MOVS.W LR, R2,LSR#24
    IT 
    MOVEQ R2, R12
    CMP R1, #0
    MOV.W R1, R2,LSR#28
    ITE 
    MOVEQ.W R12, #0x10
    MOVNE.W R12, #0
    CMP.W LR, #0
    ITE 
    MOVEQ.W LR, #8
    MOVNE.W LR, #0
    CMP R1, #0
    MOV.W R1, R2,LSL#4
    IT 
    MOVNE R1, R2
    ADD.W R2, R12, LR
    MOV.W LR, R1,LSR#30
    ITE 
    MOVEQ.W R12, #4
    MOVNE.W R12, #0
    CMP.W LR, #0
    ADD R2, R12
    MOV.W R12, R1,LSL#2
    ITE 
    MOVEQ.W LR, #2
    MOVNE.W LR, #0
    ADD R2, LR
    IT 
    MOVEQ R1, R12
    CMP R1, #0
    IT 
    ADDGE R2, #1
    CBZ R2, loc_20460
loc_20448:
    CMP.W R11, #1
    LSL.W R0, R0, R2
    ITTTT 
    RSBGT.W LR, R2, #0x20
    LDRGT.W R1, [R9,#4]
    LSRGT.W R1, R1, LR
    ORRGT R0, R1
loc_20460:
    STR R2, [SP,#0x60+var_30]
    BL sub_1D700
    LDR R2, [SP,#0x60+var_30]
    MOV R3, R11
    MOV R1, R4
    STR R7, [SP,#0x60+var_60]
    STR R2, [SP,#0x60+var_58]
    MOV R2, R9
    STR R0, [SP,#0x60+var_5C]
    MOV R0, R8
    BL sub_1D904
    LDR R3, [R6]
    CMP R3, #0
    ITTT 
    ADDGT.W R4, R4, #0xFFFFFFFF
    MOVGT R2, R6
    MOVGT R3, #1
    BLE loc_204A4
loc_2048A:
    CMP R4, #0
    ADD.W R3, R3, #1
    ITE 
    LDRGE.W R1, [R8,R4,LSL#2]
    MOVLT R1, #0
    SUBS R4, #1
    STR.W R1, [R2,#4]!
    LDR R1, [R6]
    CMP R3, R1
    BLE loc_2048A
loc_204A4:
    LDR R1, [SP,#0x60+var_34]
    MOV R0, R9
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    LDR R1, [SP,#0x60+var_4C]
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R3, [R6]
    CMP R3, #1
    BLS loc_204E2
loc_204C6:
    LDR.W R1, [R6,R3,LSL#2]
    ADD.W R2, R6, R3,LSL#2
    CBNZ R1, loc_204E2
loc_204D0:
    SUBS R3, #1
    B loc_204DC
loc_204D4:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_204E2
loc_204DC:
    CMP R3, #1
    STR R3, [R6]
    BNE loc_204D4
loc_204E2:
    LDR R3, [R7]
    CMP R3, #1
    BLS loc_20504
loc_204E8:
    LDR.W R1, [R7,R3,LSL#2]
    ADD.W R2, R7, R3,LSL#2
    SUBS R3, #1
    CBZ R1, loc_204FE
loc_204F4:
    B loc_20504
loc_204F6:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_20504
loc_204FE:
    CMP R3, #1
    STR R3, [R7]
    BNE loc_204F6
loc_20504:
    LDR.W R1, [R10]
    MOV R0, R10
    LDR R3, [SP,#0x60+var_3C]
    ADDS R1, #1
    NEGS R3, R3
    STR R3, [SP,#0x60+var_3C]
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR.W R8, [SP,#0x60+var_40]
    LDR.W R9, [SP,#0x60+var_44]
    MOV R0, R7
    MOV R10, R5
    MOV R5, R6
    MOV R2, R8
    MOV R1, R9
    BL sub_1FAF0
    LDR.W R1, [R8]
    ADDS R1, #1
    LSLS R1, R1, #2
    MOV R4, R0
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R1, [R7]
    MOV R0, R7
    STR.W R9, [SP,#0x60+var_40]
    ADDS R1, #1
    STR R4, [SP,#0x60+var_44]
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R7
    BL sub_19494
    LDR R3, [SP,#0x60+var_48]
    MOV R0, R5
    LDR R1, [R3,#8]
    BL sub_1F358
    CMP R0, #0
    BNE.W loc_202F2
loc_20572:
    LDR R3, [R5]
    MOV R4, R0
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR.W R3, [R10]
    MOV R0, R10
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR R5, [SP,#0x60+var_40]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R3, [SP,#0x60+var_3C]
    ADDS R3, #1
    IT 
    LDRNE R0, [SP,#0x60+var_44]
    BEQ loc_20616
loc_205B8:
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_205BE:
    LDR R3, [R5]
    MOV R4, R0
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR.W R3, [R10]
    MOV R0, R10
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR R5, [SP,#0x60+var_40]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R5, [SP,#0x60+var_44]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_20616:
    LDR R3, [SP,#0x60+src]
    LDR R6, [R3]
    MOV R3, #0x3FFFFFE
    CMP R6, R3
    BHI loc_206F8
loc_20626:
    ADDS R7, R6, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOV R1, R4
    MOV R5, R0
    BLX memset
    CMP R6, #0
    STR R6, [R5]
    BLE loc_206A4
loc_20640:
    MOVS R1, #1
    MOV R6, R5
    MOV R0, R1
    LDR.W LR, [SP,#0x60+var_44]
    LDR.W R12, [SP,#0x60+src]
    B loc_20666
loc_20650:
    CMP R3, R7
    ITE 
    MOVCC R4, #0
    MOVCS R4, #1
loc_20658:
    LDR R2, [R5]
    CMP R3, #0
    IT 
    MOVNE R0, R1
    ADDS R1, #1
    CMP R2, R1
    BLT loc_206A6
loc_20666:
    LDR.W R3, [R12]
    LDR.W R2, [LR]
    CMP R3, R1
    ITE 
    LDRGE.W R3, [R12,R1,LSL#2]
    MOVLT R3, #0
    CMP R2, R1
    ITEE 
    LDRGE.W R2, [LR,R1,LSL#2]
    MOVLT R2, #0
    MOVLT.W R7, #0xFFFFFFFF
    SUB.W R3, R3, R2
    SUB.W R3, R3, R4
    IT 
    MVNGE R7, R2
    STR.W R3, [R6,#4]!
    CMP R4, #0
    BNE loc_20650
loc_2069A:
    CMP R3, R7
    ITE 
    MOVLS R4, #0
    MOVHI R4, #1
    B loc_20658
loc_206A4:
    MOVS R0, #1
loc_206A6:
    LDR R4, [SP,#0x60+var_44]
    STR R0, [R5]
    LDR R3, [R4]
    MOV R0, R4
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R5
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_206C4:
    MOVW R1, #0xE76C
    MOVW R0, #0xE884
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E3
    BLX __assert_fail
loc_206DE:
    MOVW R1, #0xE76C
    MOVW R0, #0xE7E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBigdivmod
    MOV.W R2, #0x540
    BLX __assert_fail
loc_206F8:
    BL sub_115CC
loc_206FC:
    MOVW R1, #0xE76C
    MOVW R0, #0xE86C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E2
    BLX __assert_fail
loc_20716:
    BLX abort
```
Output:193B8
    LDR.W R2, [R5,R11,LSL#2]
    STR.W R2, [R0,#4]!
    LDR W3, [SP,#0x60+var_34]
    MOV R1, R3
    LDR.W R2, [R5,W3,LSL#2]
    ADDS R2, R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R3, [R5]
    MOV R0, R10
    LDR R1, [R5,#8]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_20572
loc_203BC:
    LDR R3, [R5]
    MOV R0, R10
    LDR R1, [R5]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_205BE
loc_203CC:
    LDR R4, [R5]
    LDR R3, [SP,#0x60+var_38]
    CMP R4, R3
    BHI.W loc_206F8
loc_203D6:
    ADDS R7, R4, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    STR R4, [R6]
    LDR R3, [SP,#0x60+var_38]
    LDR.W R4, [R10]
    CMP R4, R3
    BHI.W loc_206F8
loc_203FA:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.W R11, [R5]
    LDR.W R2, [R5,R11,LSL#2]
    MOV.W R3, R11,LSL#2
    STR R3, [SP,#0x60+var_34]
    CMP R2, #0
    BEQ.W loc_206DE
loc_2042A:
    MOVS R1, #4
    MOV R0, R11
    BL sub_193B8
    CMP.W R11, #0
    IT 
    ADDGE.W R4, R11, #1
    MOV R0, R4
    BL sub_193B8
    LDR.W R2, [R5,R11,LSL#2]
    STR.W R2, [R0,#4]!
    LDR.W R3, [SP,#0x60+var_34]
    MOV R1, R3
    LDR.W R2, [R5,W3,LSL#2]
    ADDS R2, R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R3, [R5]
    MOV R0, R10
    LDR R1, [R5,#8]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_20572
loc_2046C:
    LDR R3, [R5]
    MOV R0, R10
    LDR R1, [R5]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_205BE
loc_2047C:
    LDR R4, [R5]
    LDR R3, [SP,#0x60+var_38]
    CMP R4, R3
    BHI.W loc_206F8
loc_20486:
    ADDS R7, R4, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_19
############
```assembly
loc_568C4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1E748:
    MOV R3, #0x3FFFFFE
    CMP R4, R3
    BHI.W loc_1EAB6
loc_1E756:
    ADDS R5, R4, #1
    MOV R6, R0
    MOV R8, R1
    MOVS R1, #4
    MOV R0, R5
    BL sub_193B8
    LSLS R2, R5, #2
    MOVS R1, #0
    MOV R7, R0
    STR R0, [SP,#0x58+var_38]
    BLX memset
    STR R4, [R7]
    MOV R0, R6
    MOV R2, R7
    LDR R1, [SP,#0x58+var_34]
    BL sub_1E3C0
    LDR R3, [R7]
    CMP R3, #1
    BLS loc_1E7A0
loc_1E782:
    LDR R0, [SP,#0x58+var_38]
    ADD.W R2, R0, R3,LSL#2
    LDR.W R1, [R0,R3,LSL#2]
    CBNZ R1, loc_1E7A0
loc_1E78E:
    SUBS R3, #1
    B loc_1E79A
loc_1E792:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1E7A0
loc_1E79A:
    CMP R3, #1
    STR R3, [R0]
    BNE loc_1E792
loc_1E7A0:
    LDR R3, [SP,#0x58+var_34]
    MOVS R1, #4
    LDR R7, [R3]
    MOV R0, R7
    BL sub_193B8
    CMP R7, #0
    IT 
    MOVGT R3, #0
    MOV R11, R0
    ITT 
    SUBGT R1, R0, #4
    LDRGT R0, [SP,#0x58+var_34]
    BLE loc_1E7CE
loc_1E7BC:
    LDR R2, [R0]
    SUBS R2, R2, R3
    ADDS R3, #1
    CMP R7, R3
    LDR.W R2, [R0,R2,LSL#2]
    STR.W R2, [R1,#4]!
    BNE loc_1E7BC
loc_1E7CE:
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    SUBS R4, R7, R3
    CMP R4, #0
    STR R0, [SP,#0x58+var_3C]
    BLE loc_1E7EE
loc_1E7E2:
    LSLS R2, R4, #2
    MOVS R1, #0
    BLX memset
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
loc_1E7EE:
    CMP R3, #0
    BLE loc_1E80E
loc_1E7F2:
    LDR R2, [SP,#0x58+var_3C]
    LDR R0, [SP,#0x58+var_38]
    ADD.W R1, R2, R4,LSL#2
    MOVS R2, #0
loc_1E7FC:
    SUBS R3, R3, R2
    ADDS R2, #1
    LDR.W R3, [R0,R3,LSL#2]
    STR.W R3, [R1],#4
    LDR R3, [R0]
    CMP R3, R2
    BGT loc_1E7FC
loc_1E80E:
    LSLS R3, R7, #1
    MOVS R1, #4
    STR R3, [SP,#0x58+var_48]
    MOV R0, R3
    MOV R4, R3
    BL sub_193B8
    MOVS R1, #4
    MOV R6, R0
    MOV R0, R4
    BL sub_193B8
    CMP R4, #0
    MOV.W R3, R7,LSL#3
    STR R3, [SP,#0x58+var_2C]
    MOV R5, R0
    BLE loc_1E83E
loc_1E832:
    MOV R2, R3
    MOVS R1, #0
    MOV R0, R6
    BLX memset
    LDR R3, [SP,#0x58+var_2C]
loc_1E83E:
    ADDS R3, R6, R3
    CMP R7, #0x32
    MOV.W R2, #1
    STR.W R2, [R3,#-4]
    ITTT 
    MOVLE R3, #0
    MOVLE R0, R3
    STRLE R3, [SP,#0x58+var_30]
    BLE loc_1E86A
loc_1E854:
    MOV R3, R7
    MOVS R2, #0
loc_1E858:
    SUB.W R3, R3, R3,ASR#1
    ADDS R3, #1
    CMP R3, #0x32
    ADD.W R2, R2, R3,LSL#2
    BGT loc_1E858
loc_1E866:
    MOV R0, R2
    STR R2, [SP,#0x58+var_30]
loc_1E86A:
    MOVS R1, #4
    MOV.W R10, #0
    BL sub_193B8
    LDR.W R9, [R8]
    MOVS R1, #1
    STR R0, [SP,#0x58+var_4C]
    ADD.W R0, R8, R9,LSL#2
loc_1E880:
    CMP R10, R9
    BGE.W loc_1EA98
loc_1E886:
    LDR.W R2, [R0],#-4
    MOVS R4, #0x1F
    B loc_1E896
loc_1E88E:
    ADDS.W R4, R4, #0xFFFFFFFF
    BCC.W loc_1EA92
loc_1E896:
    LSL.W R3, R1, R4
    TST R3, R2
    BEQ loc_1E88E
loc_1E89E:
    LDR.W R0, [R11]
    LSRS R2, R0, #0x10
    MOV.W R3, R0,LSL#16
    IT 
    MOVNE R3, R0
    MOV.W LR, R3,LSR#24
    LSLS R1, R3, #8
    CMP.W LR, #0
    ITET 
    MOVEQ R3, R1
    MOVNE R1, #0
    MOVEQ R1, #8
    CMP R2, #0
    MOV.W LR, R3,LSR#28
    ITE 
    MOVEQ R2, #0x10
    MOVNE R2, #0
    CMP.W LR, #0
    MOV.W LR, R3,LSL#4
    ADD R2, R1
    ITE 
    MOVEQ R3, LR
    MOVNE.W LR, #0
    MOV.W R1, R3,LSR#30
    IT 
    MOVEQ.W LR, #4
    CMP R1, #0
    ADD R2, LR
    MOV.W R1, R3,LSL#2
    ITEE 
    MOVEQ.W LR, #2
    MOVNE.W LR, #0
    MOVNE R1, R3
    ADD.W R3, LR, R2
    CMP R1, #0
    IT 
    ADDGE R3, #1
    STR R3, [SP,#0x58+var_40]
    MOV R2, R3
    CBZ R3, loc_1E91E
loc_1E90A:
    CMP R7, #1
    LSL.W R0, R0, R3
    ITTTT 
    RSBGT.W R2, R2, #0x20
    LDRGT.W R3, [R11,#4]
    LSRGT R3, R2
    ORRGT R0, R3
loc_1E91E:
    BL sub_1D700
    CMP R10, R9
    STR R0, [SP,#0x58+var_44]
    BGE loc_1E9B0
loc_1E928:
    MOV.W R9, R7,LSL#2
    B loc_1E934
loc_1E92E:
    ADDS.W R4, R4, #0xFFFFFFFF
    BCC loc_1E9A2
loc_1E934:
    LDR R3, [SP,#0x58+var_4C]
    ADD.W R1, R6, R9
    MOV R2, R5
    MOV R0, R1
    STR R3, [SP,#0x58+var_58]
    MOV R3, R7
    BL sub_1DB88
    LDR R3, [SP,#0x58+var_40]
    MOV R2, R11
    MOV R0, R5
    LDR R1, [SP,#0x58+var_48]
    STR R3, [SP,#0x58+var_54]
    LDR R3, [SP,#0x58+var_44]
    STR R3, [SP,#0x58+var_58]
    MOV R3, R7
    BL sub_1E170
    LDR.W R2, [R8]
    MOVS R3, #1
    SUB.W R2, R2, R10
    LSLS R3, R4
    LDR.W R2, [R8,R2,LSL#2]
    TST R3, R2
    ITTT 
    MOVEQ R3, R6
    MOVEQ R6, R5
    MOVEQ R5, R3
    BEQ loc_1E92E
loc_1E976:
    LDR R3, [SP,#0x58+var_4C]
    MOV R2, R6
    LDR R1, [SP,#0x58+var_3C]
    ADD.W R0, R5, R9
    STR R3, [SP,#0x58+var_58]
    MOV R3, R7
    BL sub_1DB88
    LDR R3, [SP,#0x58+var_40]
    MOV R2, R11
    LDR R1, [SP,#0x58+var_48]
    MOV R0, R6
    STR R3, [SP,#0x58+var_54]
    LDR R3, [SP,#0x58+var_44]
    STR R3, [SP,#0x58+var_58]
    MOV R3, R7
    BL sub_1E170
    ADDS.W R4, R4, #0xFFFFFFFF
    BCS loc_1E934
loc_1E9A2:
    LDR.W R3, [R8]
    ADD.W R10, R10, #1
    MOVS R4, #0x1F
    CMP R3, R10
    BGT loc_1E934
loc_1E9B0:
    LDR R3, [SP,#0x58+var_34]
    LDR R4, [R3]
    MOV R3, #0x3FFFFFE
    CMP R4, R3
    BHI loc_1EAB6
loc_1E9C0:
    ADD.W R9, R4, #1
    MOVS R1, #4
    MOV R0, R9
    BL sub_193B8
    MOV.W R2, R9,LSL#2
    MOVS R1, #0
    MOV.W R9, R7,LSL#2
    MOV R8, R0
    BLX memset
    CMP R7, #0
    STR.W R4, [R8]
    BLE loc_1EA06
loc_1E9E4:
    MOVS R3, #0
    ADD.W R2, R6, R9
    MOV R1, R4
    B loc_1E9F2
loc_1E9EE:
    LDR.W R1, [R8]
loc_1E9F2:
    SUBS R1, R1, R3
    LDR.W R0, [R2],#4
    ADDS R3, #1
    CMP R7, R3
    STR.W R0, [R8,R1,LSL#2]
    BNE loc_1E9EE
loc_1EA02:
    LDR.W R4, [R8]
loc_1EA06:
    CMP R4, #1
    BLS loc_1EA28
loc_1EA0A:
    LDR.W R2, [R8,R4,LSL#2]
    ADD.W R3, R8, R4,LSL#2
    CBNZ R2, loc_1EA28
loc_1EA14:
    SUBS R4, #1
    B loc_1EA20
loc_1EA18:
    LDR.W R2, [R3,#-4]!
    SUBS R4, #1
    CBNZ R2, loc_1EA28
loc_1EA20:
    CMP R4, #1
    STR.W R4, [R8]
    BNE loc_1EA18
loc_1EA28:
    LDR R7, [SP,#0x58+var_2C]
    MOV R0, R6
    MOV R1, R7
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
    LDR R3, [SP,#0x58+var_30]
    LDR R4, [SP,#0x58+var_4C]
    LSLS R1, R3, #2
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R1, R7
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOV R1, R9
    MOV R0, R11
    BL sub_194E4
    MOV R0, R11
    BL sub_19494
    LDR R4, [SP,#0x58+var_3C]
    MOV R1, R9
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R4, [SP,#0x58+var_38]
    LDR R3, [R4]
    MOV R0, R4
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R8
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
loc_1EA92:
    ADD.W R10, R10, #1
    B loc_1E880
loc_1EA98:
    MOVS R4, #0x1F
    B loc_1E89E
loc_1EA9C:
    MOVW R1, #0xE76C
    MOVW R0, #0xE7E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModpowSimple
    MOVW R2, #0x3B9
    BLX __assert_fail
loc_1EAB6:
    BL sub_115CC
```
Output:
loc_1E886:
    LDR.W R3, [R0]
    CMP R3, #0
    BNE loc_1E8A8
    ADDS R10, #1
    LDR.W R3, [R0,R10,LSL#2]
    STR.W R3, [R8,#4]!
    BNE loc_1E886
loc_1E8A8:
    ADD.W R10, #1
    CMP R10, R9
    BGE.W loc_1EA98
loc_1E8AE:
    LDR.W R3, [R0,R10,LSL#2]
    STR.W R3, [R8,#4]!
    ADDS R10, #1
    CMP R10, R9
    BNE loc_1E8AE
loc_1EA98:
    LDR W0, [SP,#0x58+var_4C]
    BL sub_1E3C0
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BLE loc_1EB16
loc_1EAAA:
    MOV R0, R3
    MOV R1, R8
    BL sub_1E3C0
    ADDS R3, #1
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_1EAAA
loc_1EB16:
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    BL sub_1E3C0
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BLE loc_1EB42
loc_1EB32:
    MOV R0, R3
    MOV R1, R8
    BL sub_1E3C0
    ADDS R3, #1
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_1EB32
loc_1EB42:
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    BL sub_1E3C0
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BLE loc_1EB68
loc_1EB52:
    MOV R0, R3
    MOV R1, R8
    BL sub_1E3C0
    ADDS R3, #1
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_1EB52
loc_1EB68:
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    BL sub_1E3C0
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BLE loc_1EB84
loc_1EB72:
    MOV R0, R3
    MOV R1, R8
    BL sub_1E3C0
    ADDS R3, #1
    LDR R3, [SP,#0x58+var_38]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_1EB72
loc_1EB
############
```assembly
loc_2F750:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    LDR R4, [R0,#0x68]
    LDR R3, [R0,#0x64]
    MOV R10, R0
    LDR.W R7, [R9]
    SUB SP, SP, #0x4C
    LDR R0, [R0,#0x60]
    ADD R4, R2
    CMP R2, R4
    IT 
    ADDHI R3, #1
    MOV R5, R2
    MOV R6, R1
    STR.W R4, [R10,#0x68]
    STR.W R3, [R10,#0x64]
    STR R7, [SP,#0x70+n]
    CMP R0, #0
    BEQ loc_2F872
loc_2F784:
    ADDS R3, R2, R0
    CMP R3, #0x3F
    BLE loc_2F87E
loc_2F78A:
    ADD.W R11, R10, #0x20
    MOV.W R8, #0
loc_2F792:
    RSB.W R2, R0, #0x40
    MOV R1, R6
    ADD R0, R11
    BLX memcpy
    LDR.W R7, [R10,#0x2C]
    LDR.W R3, [R10,#0x60]
    MOV R0, R10
    REV.W R12, R7
    LDR.W R4, [R10,#0x20]
    LDR.W R7, [R10,#0x38]
    RSB.W LR, R3, #0x40
    LDR.W R2, [R10,#0x24]
    SUB.W R5, R5, LR
    LDR.W R3, [R10,#0x28]
    REV R4, R4
    REV R2, R2
    STR R4, [SP,#0x70+var_6C]
    STR R2, [SP,#0x70+var_68]
    ADD R6, LR
    LDR.W R4, [R10,#0x30]
    REV.W LR, R7
    LDR.W R2, [R10,#0x34]
    REV R3, R3
    LDR.W R7, [R10,#0x40]
    REV R4, R4
    STR R3, [SP,#0x70+var_64]
    REV R2, R2
    LDR.W R3, [R10,#0x3C]
    ADD R1, SP, #0x70+var_6C
    STR.W R12, [SP,#0x70+var_60]
    REV.W R12, R7
    STR R4, [SP,#0x70+var_5C]
    REV R3, R3
    LDR.W R7, [R10,#0x4C]
    LDR.W R4, [R10,#0x44]
    STR R2, [SP,#0x70+var_58]
    LDR.W R2, [R10,#0x48]
    REV R4, R4
    STR.W LR, [SP,#0x70+var_54]
    REV.W LR, R7
    REV R2, R2
    STR R3, [SP,#0x70+var_50]
    STR R4, [SP,#0x70+var_48]
    LDR.W R3, [R10,#0x50]
    LDR.W R4, [R10,#0x58]
    LDR.W R7, [R10,#0x54]
    REV R3, R3
    STR R2, [SP,#0x70+var_44]
    REV R4, R4
    LDR.W R2, [R10,#0x5C]
    STR.W R12, [SP,#0x70+var_4C]
    REV.W R12, R7
    STR.W LR, [SP,#0x70+var_40]
    REV R2, R2
    STR R3, [SP,#0x70+var_3C]
    STR.W R12, [SP,#0x70+var_38]
    STR R4, [SP,#0x70+var_34]
    STR R2, [SP,#0x70+var_30]
    BL sub_2F354
    CMP R5, #0x3F
    STR.W R8, [R10,#0x60]
    MOV.W R0, #0
    BGT loc_2F792
loc_2F854:
    MOV R1, R6
    MOV R0, R11
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R10,#0x60]
loc_2F862:
    LDR R2, [SP,#0x70+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_2F894
loc_2F86C:
    ADD SP, SP, #0x4C
    POP.W {R4-R11,PC}
loc_2F872:
    CMP R2, #0x3F
    IT 
    ADDLE.W R11, R10, #0x20
    BGT loc_2F78A
loc_2F87C:
    B loc_2F854
loc_2F87E:
    ADD.W R3, R10, #0x20
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0x60]
    ADD R3, R5
    STR.W R3, [R10,#0x60]
    B loc_2F862
loc_2F894:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operations-present",
  "bitwise-shift-left",
  "bitwise-shift-right",
  "bitwise-XOR",
  "bitwise-AND",
  "reverse-byte-order",
  "fixed-value-comparison:0",
  "fixed-value-comparison:0x3F",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:0x20",
  "address-or-offset-constant:0x40",
  "address-or-offset-constant:0x4C",
  "address-or-offset-constant:0x50",
  "address-or-offset-constant:0x54",
  "address-or-offset-constant:0x58",
  "address-or-offset-constant:0x5C",
  "address-or-offset-constant:0x60",
  "address-or-offset-constant:0x64",
  "address-or-offset-constant:0x68",
  "address-or-offset-constant:0x2C",
  "address-or-offset-constant:0x30",
  "address-or-offset-constant:0x34",
  "address-or-offset-constant:0x38",
  "address-or-offset-constant:0x3C",
  "address-or-offset-constant:0x44",
  "address-or-offset-constant:0x48",
  "address-or-offset-constant:0x4C",
  "address-or-offset-constant:0x52",
  "address-or-offset-constant:0x56",
  "address-or-offset-constant:0x5A",
  "address-or-offset-constant:0x5E",
  "address-or-offset-constant:0x62",
  "address-or-offset-constant:0x66",
  "address-or-offset-constant:0x6A",
  "address-or-offset-constant:0x6E",
  "address-or-offset-constant:0x72",
  "address-or-offset-constant:0x76",
  "address-or-offset-constant:0x7A",
  "address-or-offset-constant:0x7E",
  "address-or-offset-constant:sub_2F354",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-copy-and-manipulation",
  "inferred-algorithm:conditional-loop-with-memory-access",
  "inferred-algorithm:byte-swapping",
  "inferred-algorithm:stack-protection-check"
]
```<|im_end|>
############
```assembly
loc_18E74:
    PUSH.W {R4-R11,LR}
    MOV R10, #0x56190
    SUB SP, SP, #0xD4
    MOV R8, R0
    MOV.W R0, #0x200
    LDR.W R3, [R10]
    STR R3, [SP,#0xF8+var_2C]
    BLX malloc
    MOV R5, R0
    CMP R0, #0
    BEQ loc_18F3C
loc_18E98:
    MOVW R9, #0xAE48
    MOVW R11, #0x54E4
    MOVT.W R9, #3
    MOVT.W R11, #4
    MOVS R4, #0
    MOV.W R7, #0x200
loc_18EAE:
    ADDS R6, R5, R4
    SUBS R1, R7, R4
    MOV R2, R8
    MOV R0, R6
    BLX fgets
    MOV R7, R0
    CBZ R0, loc_18F18
loc_18EBE:
    MOV R0, R6
    BLX strlen
    ADD R4, R0
    CMP R4, #0
    BLE loc_18ED4
loc_18ECA:
    ADDS R6, R5, R4
    LDRB.W R3, [R6,#-1]
    CMP R3, #0xA
    BEQ loc_18F34
loc_18ED4:
    ADD.W R7, R4, #0x200
    CMP.W R7, #0x80000000
    BCS loc_18EEE
loc_18EDE:
    CBZ R5, loc_18F0A
loc_18EE0:
    MOV R0, R5
    MOV R1, R7
    BLX realloc
    MOV R5, R0
    CMP R5, #0
    BNE loc_18EAE
loc_18EEE:
    LDM.W R9, {R0-R3}
    ADD R6, SP, #0xF8+var_F4
    MOVS R5, #0
    STM R6!, {R0-R2}
    ADD R1, SP, #0xF8+var_F4
    STRH.W R3, [R6],#2
    MOV R0, R11
    LSRS R3, R3, #0x10
    STRB R3, [R6]
    BL sub_12E78
loc_18F08:
    B loc_18EAE
loc_18F0A:
    MOV R0, R7
    BLX malloc
    MOV R5, R0
    CMP R5, #0
    BNE loc_18EAE
loc_18F16:
    B loc_18EEE
loc_18F18:
    CBNZ R4, loc_18F34
loc_18F1A:
    CBZ R5, loc_18F22
loc_18F1C:
    MOV R0, R5
    BLX free
loc_18F22:
    LDR R2, [SP,#0xF8+var_2C]
    MOV R0, R7
    LDR.W R3, [R10]
    CMP R2, R3
    BNE loc_18F62
loc_18F2E:
    ADD SP, SP, #0xD4
    POP.W {R4-R11,PC}
loc_18F34:
    MOVS R3, #0
    MOV R7, R5
    STRB R3, [R6]
    B loc_18F22
loc_18F3C:
    MOV R3, #0x3AE48
    ADD R4, SP, #0xF8+var_F4
    LDM R3, {R0-R3}
    STM R4!, {R0-R2}
    ADD R1, SP, #0xF8+var_F4
    STRH.W R3, [R4],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R4]
    BL sub_12E78
loc_18F60:
    B loc_18E98
loc_18F62:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-memory-access",
  "external-function-calls-present",
  "external-call-type:memory-allocation (malloc)",
  "external-call-type:memory-allocation (realloc)",
  "external-call-type:memory-free (free)",
  "external-call-type:string-handling (fgets)",
  "external-call-type:string-handling (strlen)",
  "external-call-type:error-handling (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:0x200",
  "address-or-offset-constant:0xAE48",
  "address-or-offset-constant:0x54E4",
  "address-or-offset-constant:3",
  "address-or-offset-constant:4",
  "magic-number:0x3AE48",
  "inferred-algorithm:data-parsing",
  "inferred-algorithm:dynamic-memory-management",
  "inferred-algorithm:file-io",
  "inferred-algorithm:input-output-processing",
  "inferred-algorithm:security-check"
]
```<|im_end|>
############
```assembly
loc_2F240:
    MOV R1, R0
    MOVS R2, #0x6C
    PUSH {R3,LR}
    ADDS R0, #0xD8
    BLX memcpy
    POP {R3,PC}
```
Output:```json
[
  "return-type:nothing",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:unknown",
  "arg2-type:size_t",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "inferred-algorithm:data-copying-or-memset"
]
```<|im_end|>
############
```assembly
loc_115EC:
    PUSH {R3,LR}
    MOVW R1, #0xFCBC
    MOVW R0, #0xE85C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcfDouble
    MOV.W R2, #0x1EE
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:string",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0xFCBC",
  "fixed-value-assignment:0xE85C",
  "fixed-value-assignment:0x1EE",
  "magic-number:0xFCBC",
  "magic-number:0xE85C",
  "magic-number:0x1EE",
  "address-or-offset-constant:aEcfDouble",
  "address-or-offset-constant:__assert_fail",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:debugging-support",
  "inferred-algorithm:assertion-failure"
]
```<|im_end|>
############
```assembly
loc_29024:
    PUSH.W {R4-R10,LR}
    MOVW R9, #0x6190
    LDR R6, [R0,#0x58]
    MOVT.W R9, #5
    LDR R3, [R0,#0x50]
    MOV R10, R0
    LDR R0, [R0,#0x54]
    ADD R6, R2
    LDR.W LR, [R9]
    ADDS R7, R2, R3
    CMP R2, R6
    IT 
    ADDHI R0, #1
    SUB SP, SP, #0x48
    CMP R7, #0x3F
    MOV R4, R2
    STR.W R6, [R10,#0x58]
    STR.W LR, [SP,#0x68+n]
    STR.W R0, [R10,#0x54]
    BLS loc_29114
loc_2905A:
    ADD.W R7, R10, #0x10
    MOV R5, R1
    MOV R0, R3
    MOV.W R8, #0
loc_29066:
    RSB.W R2, R3, #0x40
    MOV R1, R5
    ADD R0, R7
    BLX memcpy
    LDR.W R6, [R10,#0x10]
    LDR.W R3, [R10,#0x18]
    ADD R1, SP, #0x68+var_64
    LDR.W R2, [R10,#0x14]
    STR R6, [SP,#0x68+var_64]
    LDR.W R6, [R10,#0x1C]
    STR R3, [SP,#0x68+var_5C]
    LDR.W R3, [R10,#0x30]
    STR R6, [SP,#0x68+var_58]
    LDR.W R6, [R10,#0x20]
    STR R2, [SP,#0x68+var_60]
    STR R3, [SP,#0x68+var_44]
    STR R6, [SP,#0x68+var_54]
    LDR.W R6, [R10,#0x24]
    LDR.W R2, [R10,#0x2C]
    LDR.W R3, [R10,#0x48]
    STR R6, [SP,#0x68+var_50]
    LDR.W R6, [R10,#0x28]
    LDR.W R0, [R10,#0x50]
    STR R2, [SP,#0x68+var_48]
    STR R6, [SP,#0x68+var_4C]
    RSB.W LR, R0, #0x40
    LDR.W R6, [R10,#0x34]
    SUBS R0, #0x40
    LDR.W R2, [R10,#0x44]
    ADD R4, R0
    STR R3, [SP,#0x68+var_2C]
    MOV R0, R10
    STR R6, [SP,#0x68+var_40]
    ADD R5, LR
    LDR.W R6, [R10,#0x38]
    LDR.W R3, [R10,#0x4C]
    STR R2, [SP,#0x68+var_30]
    STR R6, [SP,#0x68+var_3C]
    LDR.W R6, [R10,#0x3C]
    STR R6, [SP,#0x68+var_38]
    LDR.W R6, [R10,#0x40]
    STR R6, [SP,#0x68+var_34]
    STR R3, [SP,#0x68+var_28]
    BL sub_28778
    CMP R4, #0x3F
    MOV.W R3, #0
    STR.W R8, [R10,#0x50]
    MOV R0, R3
    BHI loc_29066
loc_290F6:
    MOV R1, R5
    MOV R0, R7
    MOV R2, R4
    BLX memcpy
    STR.W R4, [R10,#0x50]
loc_29104:
    LDR R2, [SP,#0x68+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_2912A
loc_2910E:
    ADD SP, SP, #0x48
    POP.W {R4-R10,PC}
loc_29114:
    ADD.W R0, R10, #0x10
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0x50]
    ADD R3, R4
    STR.W R3, [R10,#0x50]
    B loc_29104
loc_2912A:
    BLX __stack_chk_fail
```
Output:```json
[
  "return_TYPE:VOID",
  "ARGUMENT_COUNT:3",
  "ARG0_TYPE:POINTER",
  "ARG1_TYPE:INTEGER",
  "ARG2_TYPE:INTEGER",
  "CALLING_CONVENTION_HINT:CALLEE_SAVES_REGISTERS",
  "CALLING_CONVENTION_HINT:REGISTERS_FOR_ARGS",
  "STACK_ARG_USE:FALSE",
  "STANDARD_CALLING_CONVENTION_USED",
  "STACK_FRAME_MANAGEMENT_PRESENT",
  "EXPLICIT_STACK_ALLOCATION_SIZE:0x48",
  "CALLEE_SAVES_REGISTERS_PRESENT",
  "STANDARD_FUNCTION_RETURN",
  "CONDITIONAL_BRANCHING_ON_INPUT",
  "EXTERNAL_FUNCTION_CALLS_PRESENT",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (memcpy)",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (sub_28778)",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (__stack_chk_fail)",
  "INTEGER_SIZE_HINT:32-BIT",
  "MEMORY_READ_FROM_INPUT_PARAMETER_OFFSET:0x50",
  "MEMORY_WRITE_TO_STACK_OFFSET",
  "MEMORY_READ_FROM_STACK_OFFSET",
  "FIXED_VALUE_COMPARISON:0",
  "FIXED_VALUE_ASSIGNMENT:0",
  "ADDRESS_OR_OFFSET_CONSTANT:0x6190",
  "ADDRESS_OR_OFFSET_CONSTANT:0x5",
  "ADDRESS_OR_OFFSET_CONSTANT:0x3F",
  "INFERRED_ALGORITHM:STRING_PROCESSING_OR_MANIPULATION",
  "INFERRED_ALGORITHM:MATH_COMPUTATION",
  "INFERRED_ALGORITHM:RESOURCE_MANAGEMENT",
  "INFERRED_ALGORITHM:ERROR_HANDLING_OR_CHECKSUM_VALIDATION"
]
```<|im_end|>
############
```assembly
loc_1F1CC:
    LDR R3, [R0]
    LSLS R3, R3, #5
    SUBS R3, #1
    BMI loc_1F1FC
loc_1F1D4:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_1F1EA
loc_1F1E0:
    B loc_1F1FC
loc_1F1E2:
    LDR.W R2, [R0,R2,LSL#2]
    LSRS R2, R1
    BNE loc_1F1FC
loc_1F1EA:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R1, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_1F1E2
loc_1F1FC:
    ADD.W R0, R3, #0x10
    ADDS R3, #9
    IT 
    MOVMI R3, R0
    ASRS R0, R3, #3
    ADDS R0, #4
    BX LR
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "integer-size-hint:32-bit",
  "bitwise-operation:shift-left",
  "bitwise-operation:shift-right",
  "bitwise-operation:AND",
  "bitwise-operation:XOR",
  "bitwise-operation:OR",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:9",
  "fixed-value-assignment:4",
  "fixed-value-assignment:10",
  "fixed-value-assignment:3",
  "fixed-value-assignment:5",
  "fixed-value-assignment:16",
  "address-or-offset-constant:0x10",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:conditional-logic",
  "inferred-algorithm:mask-application",
  "inferred-algorithm:value-modification",
  "inferred-algorithm:result-computation"
]
```<|im_end|>
############
```assembly
loc_38722:

loc_3872C:
    CMP R1, #0
    BEQ loc_38722
loc_38730:
    PUSH.W {R0,R1,LR}
    BL sub_384D0
    POP.W {R1,R2,LR}
    MUL.W R3, R2, R0
    SUB.W R1, R1, R3
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:word",
  "arg1-type:word",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-loop-counter",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_384D0)",
  "integer-size-hint:16-bit",
  "byte-level-operations:push-pop",
  "byte-level-operations:multiply",
  "byte-level-operations:add-subtract",
  "inferred-algorithm:arithmetic-loop",
  "inferred-algorithm:iteration-with-accumulator"
]
```<|im_end|>
############
```assembly
loc_116B4:
    PUSH {R3,LR}
    MOVW R1, #0x53DC
    MOVW R0, #0x53EC
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aReadSettingS
    MOVW R2, #0x18F
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:string",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x53DC",
  "fixed-value-assignment:0x53EC",
  "fixed-value-assignment:0x18F",
  "magic-number:0x53DC",
  "magic-number:0x53EC",
  "magic-number:0x18F",
  "string-magic-number:aReadSettingS",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:assertion-check",
  "inferred-algorithm:debugging-support"
]
```<|im_end|>
############
```assembly
loc_2650C:
    CMP R3, #2
    BEQ.W loc_26D8E
loc_26512:
    LDRB R3, [R0,#0x10]
    CMP R3, #0
    BNE.W loc_26E7C
loc_2651A:
    BL sub_2558C
    LDR R7, [R6,#4]
    LDR.W R10, [R6]
    MOV R5, R0
    CBZ R7, loc_26530
loc_26528:
    MOV R0, R7
    BL sub_1E688
    MOV R7, R0
loc_26530:
    LDR.W R9, [R6,#8]
    CMP.W R9, #0
    BEQ loc_26542
loc_2653A:
    MOV R0, R9
    BL sub_1E688
    MOV R9, R0
loc_26542:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_26554
loc_2654C:
    MOV R0, R8
    BL sub_1E688
    MOV R8, R0
loc_26554:
    MOVS R1, #0x14
    MOVS R0, #1
    LDRB.W R11, [R6,#0x10]
    BL sub_193B8
    MOVS.W R11, R11
    IT 
    MOVNE.W R11, #1
    MOV R4, R0
    STR.W R10, [R0]
    STRB.W R11, [R0,#0x10]
    STR.W R8, [R4,#0xC]
    LDR R0, [SP,#0x40+var_40]
    STR R7, [R4,#4]
    STR.W R9, [R4,#8]
    BL sub_1F158
    SUBS.W R8, R0, #2
    BMI.W loc_26ED8
loc_2658C:
    ADDS R3, R6, #4
    MOVS R6, #0
    STR R3, [SP,#0x40+var_3C]
    MOV R3, #0x56170
    STR R3, [SP,#0x40+var_38]
    B loc_26614
loc_2659E:
    BL sub_2512C
    STR.W R9, [R5]
    MOV R7, R0
    LDR R0, [R5,#4]
    CBZ R0, loc_265B0
loc_265AC:
    BL sub_1E6B0
loc_265B0:
    LDR R0, [R5,#8]
    CBZ R0, loc_265B8
loc_265B4:
    BL sub_1E6B0
loc_265B8:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_265C0
loc_265BC:
    BL sub_1E6B0
loc_265C0:
    STRB R6, [R5,#0x10]
    MOV R0, R5
    BL sub_19494
    LDRB R2, [R4,#0x10]
    CMP R2, #0
    BNE.W loc_26CAE
loc_265D0:
    LDR R3, [R4]
    LDR R3, [R3]
    CMP R3, #2
    BEQ.W loc_26D66
loc_265DA:
    CMP R3, #0
    BEQ.W loc_269B8
loc_265E0:
    MOV R0, R4
    BL sub_2558C
    MOV R9, R0
loc_265E8:
    LDR R0, [R4,#4]
    STR R6, [R4]
    CBZ R0, loc_265F2
loc_265EE:
    BL sub_1E6B0
loc_265F2:
    LDR R0, [R4,#8]
    CBZ R0, loc_265FA
loc_265F6:
    BL sub_1E6B0
loc_265FA:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_26602
loc_265FE:
    BL sub_1E6B0
loc_26602:
    STRB R6, [R4,#0x10]
    MOV R0, R4
    BL sub_19494
    ADDS.W R8, R8, #0xFFFFFFFF
    MOV R5, R7
    MOV R4, R9
    BCC loc_266A0
loc_26614:
    MOV R1, R8
    LDR R0, [SP,#0x40+var_40]
    BL sub_1F234
    LDR R3, [SP,#0x40+var_3C]
    LDR R2, [R5,#0xC]
    ADDS R1, R5, #4
    MOV R9, R0
    MOV R0, R4
    CMP.W R9, #0
    BEQ loc_2659E
loc_2662C:
    BL sub_2512C
    MOV R7, R0
    CBZ R4, loc_26656
loc_26634:
    LDR R0, [R4,#4]
    STR R6, [R4]
    CBZ R0, loc_2663E
loc_2663A:
    BL sub_1E6B0
loc_2663E:
    LDR R0, [R4,#8]
    CBZ R0, loc_26646
loc_26642:
    BL sub_1E6B0
loc_26646:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2664E
loc_2664A:
    BL sub_1E6B0
loc_2664E:
    STRB R6, [R4,#0x10]
    MOV R0, R4
    BL sub_19494
loc_26656:
    LDRB R2, [R5,#0x10]
    CMP R2, #0
    BNE.W loc_26C8E
loc_2665E:
    LDR R3, [R5]
    LDR R3, [R3]
    CMP R3, #2
    BEQ.W loc_26D5A
loc_26668:
    CMP R3, #0
    BEQ loc_266DE
loc_2666C:
    MOV R0, R5
    BL sub_2558C
    MOV R4, R0
loc_26674:
    LDR R0, [R5,#4]
    STR R6, [R5]
    CBZ R0, loc_2667E
loc_2667A:
    BL sub_1E6B0
loc_2667E:
    LDR R0, [R5,#8]
    CBZ R0, loc_26686
loc_26682:
    BL sub_1E6B0
loc_26686:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_2668E
loc_2668A:
    BL sub_1E6B0
loc_2668E:
    STRB R6, [R5,#0x10]
    MOV R0, R5
    BL sub_19494
    ADDS.W R8, R8, #0xFFFFFFFF
    MOV R5, R4
    MOV R4, R7
    BCS loc_26614
loc_266A0:
    CBZ R5, loc_266C8
loc_266A2:
    LDR R0, [R5,#4]
    MOVS R3, #0
    STR R3, [R5]
    CBZ R0, loc_266AE
loc_266AA:
    BL sub_1E6B0
loc_266AE:
    LDR R0, [R5,#8]
    CBZ R0, loc_266B6
loc_266B2:
    BL sub_1E6B0
loc_266B6:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_266BE
loc_266BA:
    BL sub_1E6B0
loc_266BE:
    MOVS R3, #0
    MOV R0, R5
    STRB R3, [R5,#0x10]
    BL sub_19494
loc_266C8:
    CMP R4, #0
    BEQ.W loc_26CF6
loc_266CE:
    LDRB R3, [R4,#0x10]
    MOV R0, R4
    CMP R3, #0
    BEQ.W loc_26D02
loc_266D8:
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_266DE:
    LDR R3, [SP,#0x40+var_38]
    LDR R0, [R5,#8]
    LDR R1, [R3]
    BL sub_1F358
    MOV R9, R0
    CMP R0, #0
    BEQ.W loc_26D34
loc_266F0:
    LDR R1, [R5,#8]
    LDR R3, [R5]
    MOV R0, R1
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    LDR R3, [R5]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R4, R0
    LDR R0, [R5,#4]
    BL sub_1EAC0
    MOV R9, R0
    MOV R0, R4
    BL sub_1E6B0
    MOVS R1, #1
    MOV R0, R9
    LDR R4, [R5]
    BL sub_1F9F8
    LDR R1, [R4,#0x10]
    MOV R10, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_26D72
loc_2672A:
    LDR R1, [R4,#0x10]
    MOV R0, R10
    BL sub_1FD18
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_2673A:
    MOV R0, R10
    BL sub_1E6B0
loc_26740:
    MOV R0, R9
    BL sub_1E6B0
    MOVS R1, #1
    MOV R0, R4
    LDR.W R9, [R5]
    BL sub_1F9F8
    LDR.W R1, [R9,#0x10]
    MOV R10, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_26D80
loc_26762:
    LDR.W R1, [R9,#0x10]
    MOV R0, R10
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_26774:
    MOV R0, R10
    STR R3, [SP,#0x40+var_30]
    BL sub_1E6B0
loc_2677C:
    MOV R0, R4
    BL sub_1E6B0
    LDR R1, [R5,#0xC]
    LDR R3, [R5]
    CMP R1, #0
    BEQ.W loc_26EB0
loc_2678C:
    LDR R2, [R3,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R5]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R9, R0
    BL sub_1EAC0
    MOV R4, R0
    MOV R0, R9
    BL sub_1E6B0
    LDR R3, [R5]
    MOV R1, R4
    LDR R2, [R3,#0x10]
    LDR R0, [R3,#0x14]
    BL sub_1EAC0
    STR R0, [SP,#0x40+var_34]
    MOV R0, R4
    BL sub_1E6B0
loc_267BC:
    LDR R3, [R5]
    LDR R1, [R5,#4]
    LDR R2, [R3,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    MOVS R1, #1
    LDR.W R9, [R5]
    MOV R11, R0
    BL sub_1F9F8
    MOV R1, R11
    MOV R10, R0
    BL sub_1FC80
    MOV R4, R0
    MOV R0, R10
    BL sub_1E6B0
    B loc_26800
loc_267E6:
    LDR.W R1, [R9,#0x10]
    MOV R0, R4
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ.W loc_26F0E
loc_267F8:
    MOV R0, R4
    MOV R4, R3
    BL sub_1E6B0
loc_26800:
    LDR.W R1, [R9,#0x10]
    MOV R0, R4
    BL sub_1F358
    CMP R0, #0
    BGE loc_267E6
loc_2680E:
    MOV R0, R11
    BL sub_1E6B0
    LDR.W R10, [R5]
    MOV R0, R4
    LDR.W R1, [R10,#0x10]
    BL sub_200D4
    LDR.W R1, [R10,#0x10]
    MOV R9, R0
    LDR R0, [SP,#0x40+var_34]
    BL sub_200D4
    MOV R1, R0
    STR R0, [SP,#0x40+var_2C]
    MOV R0, R9
    BL sub_1FC80
    MOV R11, R0
    MOV R0, R9
    BL sub_1E6B0
    LDR R2, [SP,#0x40+var_2C]
    MOV R0, R2
    BL sub_1E6B0
    LDR.W R1, [R10,#0x10]
    MOV R0, R11
    BL sub_200D4
    MOV R9, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R0, [SP,#0x40+var_34]
    BL sub_1E6B0
    LDR R3, [R5]
    MOV R1, R9
    MOV R0, R9
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOVS R1, #1
    LDR R4, [R5]
    MOV R10, R0
    LDR R0, [SP,#0x40+var_30]
    BL sub_1F9F8
    LDR R1, [R4,#0x10]
    MOV R11, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_26D86
loc_2688C:
    LDR R1, [R4,#0x10]
    MOV R0, R11
    BL sub_1FD18
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_2689C:
    MOV R0, R11
    BL sub_1E6B0
loc_268A2:
    LDR R3, [R5]
    MOV R1, R4
    MOV R0, R10
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R11, R0
    STR R0, [SP,#0x40+var_34]
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R3, [R5]
    LDR R4, [SP,#0x40+var_30]
    MOV R1, R11
    LDR R2, [R3,#0x10]
    MOV R0, R4
    BL sub_1F5DC
    MOV R10, R0
    MOV R0, R4
    BL sub_1E6B0
    LDR R3, [R5]
    MOV R1, R10
    MOV R0, R9
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R4, R0
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    LDR R1, [R5,#8]
    LDR R3, [R5]
    MOV R0, R1
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    LDR R3, [R5]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R9, R0
    BL sub_1EAC0
    MOV R10, R0
    MOV R0, R9
    BL sub_1E6B0
    MOVS R0, #8
    BL sub_1FE48
    LDR R3, [R5]
    MOV R1, R10
    LDR R2, [R3,#0x10]
    MOV R11, R0
    BL sub_1EAC0
    MOV R9, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R10
    BL sub_1E6B0
    LDR R3, [R5]
    MOV R1, R9
    MOV R0, R4
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R11, R0
    MOV R0, R4
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    LDR R1, [R5,#0xC]
    CMP R1, #0
    BEQ.W loc_26EC4
loc_26950:
    LDR R3, [R5]
    LDR R0, [R5,#8]
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R4, R0
loc_2695C:
    MOVS R1, #1
    MOV R0, R4
    LDR.W R9, [R5]
    BL sub_1F9F8
    LDR.W R1, [R9,#0x10]
    MOV R10, R0
    BL sub_1F358
    CMP R0, #0
    BLT loc_26990
loc_26976:
    LDR.W R1, [R9,#0x10]
    MOV R0, R10
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_26988:
    MOV R0, R10
    MOV R10, R3
    BL sub_1E6B0
loc_26990:
    MOV R0, R4
    BL sub_1E6B0
    MOVS R1, #0x14
    MOVS R0, #1
    LDR.W R9, [R5]
    BL sub_193B8
    LDR R3, [SP,#0x40+var_34]
    MOV R4, R0
    STR.W R9, [R0]
    STR R3, [R0,#4]
    STR.W R11, [R0,#8]
    STR.W R10, [R0,#0xC]
    STRB R6, [R0,#0x10]
    B loc_26674
loc_269B8:
    LDR R3, [SP,#0x40+var_38]
    LDR R0, [R4,#8]
    LDR R1, [R3]
    BL sub_1F358
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_26D14
loc_269CA:
    LDR R1, [R4,#8]
    LDR R3, [R4]
    MOV R0, R1
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R5, R0
    LDR R0, [R4,#4]
    BL sub_1EAC0
    MOV R9, R0
    MOV R0, R5
    BL sub_1E6B0
    MOVS R1, #1
    MOV R0, R9
    LDR R5, [R4]
    BL sub_1F9F8
    LDR R1, [R5,#0x10]
    MOV R10, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_26D76
loc_26A04:
    LDR R1, [R5,#0x10]
    MOV R0, R10
    BL sub_1FD18
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_26A14:
    MOV R0, R10
    BL sub_1E6B0
loc_26A1A:
    MOV R0, R9
    BL sub_1E6B0
    MOVS R1, #1
    MOV R0, R5
    LDR.W R9, [R4]
    BL sub_1F9F8
    LDR.W R1, [R9,#0x10]
    MOV R10, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_26D7A
loc_26A3C:
    LDR.W R1, [R9,#0x10]
    MOV R0, R10
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_26A4E:
    MOV R0, R10
    STR R3, [SP,#0x40+var_30]
    BL sub_1E6B0
loc_26A56:
    MOV R0, R5
    BL sub_1E6B0
    LDR R1, [R4,#0xC]
    LDR R3, [R4]
    CMP R1, #0
    BEQ.W loc_26EBA
loc_26A66:
    LDR R2, [R3,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R9, R0
    BL sub_1EAC0
    MOV R5, R0
    MOV R0, R9
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R5
    LDR R2, [R3,#0x10]
    LDR R0, [R3,#0x14]
    BL sub_1EAC0
    STR R0, [SP,#0x40+var_34]
    MOV R0, R5
    BL sub_1E6B0
loc_26A96:
    LDR R3, [R4]
    LDR R1, [R4,#4]
    LDR R2, [R3,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    MOVS R1, #1
    LDR.W R9, [R4]
    MOV R11, R0
    BL sub_1F9F8
    MOV R1, R11
    MOV R10, R0
    BL sub_1FC80
    MOV R5, R0
    MOV R0, R10
    BL sub_1E6B0
    B loc_26ADA
loc_26AC0:
    LDR.W R1, [R9,#0x10]
    MOV R0, R5
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ.W loc_26F0E
loc_26AD2:
    MOV R0, R5
    MOV R5, R3
    BL sub_1E6B0
loc_26ADA:
    LDR.W R1, [R9,#0x10]
    MOV R0, R5
    BL sub_1F358
    CMP R0, #0
    BGE loc_26AC0
loc_26AE8:
    MOV R0, R11
    BL sub_1E6B0
    LDR.W R10, [R4]
    MOV R0, R5
    LDR.W R1, [R10,#0x10]
    BL sub_200D4
    LDR.W R1, [R10,#0x10]
    MOV R9, R0
    LDR R0, [SP,#0x40+var_34]
    BL sub_200D4
    MOV R1, R0
    STR R0, [SP,#0x40+var_2C]
    MOV R0, R9
    BL sub_1FC80
    MOV R11, R0
    MOV R0, R9
    BL sub_1E6B0
    LDR R2, [SP,#0x40+var_2C]
    MOV R0, R2
    BL sub_1E6B0
    LDR.W R1, [R10,#0x10]
    MOV R0, R11
    BL sub_200D4
    MOV R9, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR R0, [SP,#0x40+var_34]
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R9
    MOV R0, R9
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOVS R1, #1
    LDR R5, [R4]
    MOV R10, R0
    LDR R0, [SP,#0x40+var_30]
    BL sub_1F9F8
    LDR R1, [R5,#0x10]
    MOV R11, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_26D8A
loc_26B66:
    LDR R1, [R5,#0x10]
    MOV R0, R11
    BL sub_1FD18
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_26B76:
    MOV R0, R11
    BL sub_1E6B0
loc_26B7C:
    LDR R3, [R4]
    MOV R1, R5
    MOV R0, R10
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R11, R0
    STR R0, [SP,#0x40+var_34]
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    LDR R5, [SP,#0x40+var_30]
    MOV R1, R11
    LDR R2, [R3,#0x10]
    MOV R0, R5
    BL sub_1F5DC
    MOV R10, R0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R10
    MOV R0, R9
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R5, R0
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    LDR R1, [R4,#8]
    LDR R3, [R4]
    MOV R0, R1
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R9, R0
    BL sub_1EAC0
    MOV R10, R0
    MOV R0, R9
    BL sub_1E6B0
    MOVS R0, #8
    BL sub_1FE48
    LDR R3, [R4]
    MOV R1, R10
    LDR R2, [R3,#0x10]
    MOV R11, R0
    BL sub_1EAC0
    MOV R9, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R10
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R9
    MOV R0, R5
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R11, R0
    MOV R0, R5
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    LDR R1, [R4,#0xC]
    CMP R1, #0
    BEQ.W loc_26ECE
loc_26C2A:
    LDR R3, [R4]
    LDR R0, [R4,#8]
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R5, R0
loc_26C36:
    MOVS R1, #1
    MOV R0, R5
    LDR.W R9, [R4]
    BL sub_1F9F8
    LDR.W R1, [R9,#0x10]
    MOV R10, R0
    BL sub_1F358
    CMP R0, #0
    BLT loc_26C6A
loc_26C50:
    LDR.W R1, [R9,#0x10]
    MOV R0, R10
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ.W loc_26F28
loc_26C62:
    MOV R0, R10
    MOV R10, R3
    BL sub_1E6B0
loc_26C6A:
    MOV R0, R5
    BL sub_1E6B0
    MOVS R1, #0x14
    MOVS R0, #1
    LDR R5, [R4]
    BL sub_193B8
    LDR R3, [SP,#0x40+var_34]
    MOV R9, R0
    STR R5, [R0]
    STR R3, [R0,#4]
    STR.W R11, [R0,#8]
    STR.W R10, [R0,#0xC]
    STRB R6, [R0,#0x10]
    B loc_265E8
loc_26C8E:
    MOVS R1, #0x14
    MOVS R0, #1
    LDR.W R9, [R5]
    BL sub_193B8
    MOV.W R3, #1
    MOV R4, R0
    STR.W R9, [R0]
    STR R6, [R0,#4]
    STR R6, [R0,#8]
    STR R6, [R0,#0xC]
    STRB R3, [R0,#0x10]
    B loc_26674
loc_26CAE:
    MOVS R1, #0x14
    MOVS R0, #1
    LDR R5, [R4]
    BL sub_193B8
    MOV.W R3, #1
    MOV R9, R0
    STM.W R0, {R5,R6}
    STR R6, [R0,#8]
    STR R6, [R0,#0xC]
    STRB R3, [R0,#0x10]
    B loc_265E8
loc_26CCA:
    MOVS R1, #3
    LDR R0, [R7,#0x14]
    BL sub_1FE60
    MOV R1, R0
    MOV R4, R0
    LDR R0, [R7,#0x10]
    BL sub_1F358
    MOV R5, R0
    MOV R0, R4
    BL sub_1E6B0
    CLZ.W R2, R5
    LDR R1, [SP,#0x40+var_40]
    MOV R0, R6
    LSRS R2, R2, #5
    BL sub_2615C
    MOV R4, R0
    CBNZ R0, loc_26CFE
loc_26CF6:
    MOVS R0, #0
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_26CFE:
    LDRB R3, [R0,#0x10]
    CBNZ R3, loc_26D0C
loc_26D02:
    BL sub_24A8C
    CMP R0, #0
    BEQ.W loc_26EE2
loc_26D0C:
    MOV R0, R4
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_26D14:
    MOVS R1, #0x14
    MOVS R0, #1
    LDR.W R10, [R4]
    BL sub_193B8
    MOV.W R3, #1
    MOV R9, R0
    STR.W R10, [R0]
    STR R5, [R0,#4]
    STR R5, [R0,#8]
    STR R5, [R0,#0xC]
    STRB R3, [R0,#0x10]
    B loc_265E8
loc_26D34:
    MOVS R1, #0x14
    MOVS R0, #1
    LDR.W R10, [R5]
    BL sub_193B8
    MOV.W R3, #1
    MOV R4, R0
    STR.W R10, [R0]
    STR.W R9, [R0,#4]
    STR.W R9, [R0,#8]
    STR.W R9, [R0,#0xC]
    STRB R3, [R0,#0x10]
    B loc_26674
loc_26D5A:
    MOV R1, R5
    MOV R0, R5
    BL sub_25B60
    MOV R4, R0
    B loc_26674
loc_26D66:
    MOV R1, R4
    MOV R0, R4
    BL sub_25B60
    MOV R9, R0
    B loc_265E8
loc_26D72:
    MOV R4, R10
    B loc_26740
loc_26D76:
    MOV R5, R10
    B loc_26A1A
loc_26D7A:
    STR.W R10, [SP,#0x40+var_30]
    B loc_26A56
loc_26D80:
    STR.W R10, [SP,#0x40+var_30]
    B loc_2677C
loc_26D86:
    MOV R4, R11
    B loc_268A2
loc_26D8A:
    MOV R5, R11
    B loc_26B7C
loc_26D8E:
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_193B8
    LDR.W R10, [SP,#0x40+var_40]
    MOV.W R9, #1
    MOV R4, R0
    STR R7, [R0]
    MOVS R7, #0
    STR R7, [R0,#4]
    STR R7, [R0,#8]
    MOV R0, R10
    STR R7, [R4,#0xC]
    STRB.W R9, [R4,#0x10]
    BL sub_1F158
    SUBS.W R8, R0, #0
    BLT loc_26D0C
loc_26DBA:
    LDRB R2, [R4,#0x10]
    CMP R2, #0
    BNE loc_26E26
loc_26DC0:
    LDR R3, [R4]
    LDR R1, [R3]
    CMP R1, #2
    BEQ loc_26EA4
loc_26DC8:
    MOV R0, R4
    CMP R1, #0
    BEQ loc_26E44
loc_26DCE:
    BL sub_2558C
    MOV R5, R0
loc_26DD4:
    LDR R0, [R4,#4]
    STR R7, [R4]
    CBZ R0, loc_26DDE
loc_26DDA:
    BL sub_1E6B0
loc_26DDE:
    LDR R0, [R4,#8]
    CBZ R0, loc_26DE6
loc_26DE2:
    BL sub_1E6B0
loc_26DE6:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_26DEE
loc_26DEA:
    BL sub_1E6B0
loc_26DEE:
    STRB R7, [R4,#0x10]
    MOV R0, R4
    BL sub_19494
    CMP R5, #0
    BEQ.W loc_26CF6
loc_26DFC:
    MOV R1, R8
    MOV R0, R10
    BL sub_1F234
    MOV R4, R5
    CBNZ R0, loc_26E4C
loc_26E08:
    ADD.W R8, R8, #0xFFFFFFFF
    CMP R4, #0
    MVN.W R3, R8
    MOV.W R3, R3,LSR#31
    IT 
    MOVEQ R3, #0
    CMP R3, #0
    BEQ.W loc_26D0C
loc_26E20:
    LDRB R2, [R4,#0x10]
    CMP R2, #0
    BEQ loc_26DC0
loc_26E26:
    MOVS R1, #0x14
    MOVS R0, #1
    LDR.W R11, [R4]
    BL sub_193B8
    MOV R5, R0
    STR.W R11, [R0]
    STR R7, [R0,#4]
    STR R7, [R0,#8]
    STR R7, [R0,#0xC]
    STRB.W R9, [R0,#0x10]
    B loc_26DD4
loc_26E44:
    BL sub_2576C
    MOV R5, R0
    B loc_26DD4
loc_26E4C:
    MOVS R2, #0
    MOV R1, R6
    MOV R0, R5
    BL sub_25B60
    STR R7, [R5]
    MOV R4, R0
    LDR R0, [R5,#4]
    CBZ R0, loc_26E62
loc_26E5E:
    BL sub_1E6B0
loc_26E62:
    LDR R0, [R5,#8]
    CBZ R0, loc_26E6A
loc_26E66:
    BL sub_1E6B0
loc_26E6A:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_26E72
loc_26E6E:
    BL sub_1E6B0
loc_26E72:
    STRB R7, [R5,#0x10]
    MOV R0, R5
    BL sub_19494
    B loc_26E08
loc_26E7C:
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_193B8
    MOVS R3, #0
    MOVS R2, #1
    STR R7, [R0]
    MOV R5, R0
    STRB R2, [R0,#0x10]
    STR R3, [R0,#4]
    LDR R7, [R6,#4]
    STR R3, [R0,#8]
    STR R3, [R0,#0xC]
    LDR.W R10, [R6]
    CMP R7, #0
    BNE.W loc_26528
loc_26EA0:
    B.W loc_26530
loc_26EA4:
    MOV R1, R4
    MOV R0, R4
    BL sub_25B60
    MOV R5, R0
    B loc_26DD4
loc_26EB0:
    LDR R0, [R3,#0x14]
    BL sub_1E688
    STR R0, [SP,#0x40+var_34]
    B loc_267BC
loc_26EBA:
    LDR R0, [R3,#0x14]
    BL sub_1E688
    STR R0, [SP,#0x40+var_34]
    B loc_26A96
loc_26EC4:
    LDR R0, [R5,#8]
    BL sub_1E688
    MOV R4, R0
    B loc_2695C
loc_26ECE:
    LDR R0, [R4,#8]
    BL sub_1E688
    MOV R5, R0
    B loc_26C36
loc_26ED8:
    CMP R5, #0
    BNE.W loc_266A2
loc_26EDE:
    B.W loc_266CE
loc_26EE2:
    LDR R3, [R4,#4]
    STR R0, [R4]
    CBZ R3, loc_26EEE
loc_26EE8:
    MOV R0, R3
    BL sub_1E6B0
loc_26EEE:
    LDR R0, [R4,#8]
    CBZ R0, loc_26EF6
loc_26EF2:
    BL sub_1E6B0
loc_26EF6:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_26EFE
loc_26EFA:
    BL sub_1E6B0
loc_26EFE:
    MOVS R5, #0
    MOV R0, R4
    STRB R5, [R4,#0x10]
    BL sub_19494
    MOV R0, R5
    B.W loc_266D8
loc_26F0E:
    MOVW R1, #0xFCBC
    MOVW R0, #0xE85C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcfTreble
    MOV.W R2, #0x1E0
    BLX __assert_fail
loc_26F28:
    BL sub_115EC
```
Output: MOV R0, R4
    BL sub_19494
    ADDS.W R8, R8, #0xFFFFFFFF
    MOV R5, R7
    MOV R4, R9
    BCC loc_266A0
loc_26656:
    LDR R3, [R5,#0xC]
    ADDS R1, R5, #4
    MOV R9, R0
    MOV R0, R4
    CMP.W R9, #0
    BEQ loc_2659E
loc_26664:
    BL sub_2512C
    MOV R7, R0
    CBZ R4, loc_26688
loc_26672:
    LDR R0, [R4,#4]
    STR R6, [R4]
    CBZ R0, loc_2667C
loc_26676:
    BL sub_1E6B0
loc_2667C:
    LDR R0, [R4,#8]
    CBZ R0, loc_26684
loc_26680:
    BL sub_1E6B0
loc_26684:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2668C
loc_26688:
    STRB R6, [R4,#0x10]
    MOV R0, R4
    BL sub_19494
    ADDS.W R8, R8, #0xFFFFFFFF
    MOV R5, R7
    MOV R4, R9
    BCC loc_266A0
loc_26690:
    LDR R3, [R5,#0xC]
    ADDS R1, R5, #4
    MOV R9, R0
    MOV R0, R4
    CMP.W R9, #0
    BEQ loc_2659E
loc_26698:
    BL sub_2512C
    MOV R7, R0
    CBZ R4, loc_266C2
loc_266A6:
    LDR R0, [R4,#4]
    STR R6, [R4]
    CBZ R0, loc_266AB
loc_266AA:
    BL sub_1E6B0
loc_266AB:
    LDR R0, [R4,#8]
    CBZ R0, loc_266B3
loc_266AF:
    BL sub_1E6B0
loc_266B3:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_266BB
loc_266B7:
    BL sub_1E6B0
loc_266BB:
    STRB R6, [R4,#0x10]
    MOV R0, R4
    BL sub_19494
    ADDS.W R8, R8, #0xFFFFFFFF
    MOV R5, R7
    MOV R4, R9
    BCC loc_266A0
loc_266C2:
    LDR R3, [R5,#0xC]
    ADDS R1, R5, #4
    MOV R9, R0
    MOV R0, R4
    CMP.W R9, #0
    BEQ loc_2659E
loc_266D0:
    BL sub_2512C
    MOV R7, R0
    CBZ R4, loc_266FA
loc_266DE:
    LDR R0, [R4,#4]
    STR R6, [R4]
    CBZ R0, loc_266E3
loc_266E2:
    BL sub_1E6B0
loc_266E3:
    LDR R0, [R4,#8]
    CBZ R0, loc_266EB
loc_266EA:
    BL sub_1E6B0
loc_266EB:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_266F3
loc_266F2:
    BL sub_1E6B0
loc_266F
############
```assembly
loc_112E0:
    ADR R12, 0x112E8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(tcsetattr_ptr - 0x552E8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-not-used",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-presumed",
  "standard-function-return-not-assured",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (tcsetattr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112E8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:tcsetattr_ptr",
  "address-or-offset-constant:0x552E8",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:file-descriptor-manipulation",
  "inferred-algorithm:terminal-control"
]
```<|im_end|>
############
```assembly
loc_11338:
    ADR R12, 0x11340
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(malloc_ptr - 0x55340)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (malloc)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11340",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:malloc_ptr",
  "address-or-offset-constant:0x55340",
  "inferred-algorithm:dynamically-allocated-memory-access"
]
```<|im_end|>
############
```assembly
loc_2EC48:
    PUSH {R4-R6,LR}
    MOV R4, R0
    LDR R1, [R0,#0x18]
    LDR R0, [R0,#0x14]
    BL sub_1FC7C
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1FC7C)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:function-wrapper-or-trampoline",
  "inferred-algorithm:argument-forwarding"
]
```<|im_end|>
############
```assembly
loc_1E56A:
    MOV R3, R5
    MOVS R4, #0
loc_1E56E:
    SUB.W R3, R3, R3,ASR#1
    ADDS R3, #1
    CMP R3, #0x32
    ADD.W R4, R4, R3,LSL#2
    BGT loc_1E56E
loc_1E57C:
    ADD R4, R7
    MOVS R1, #4
    MOV R0, R4
    BL sub_193B8
    MOV R11, R0
loc_1E588:
    ADD.W R0, R11, R7
    SUB.W R1, R11, #4
    MOV R3, R5
loc_1E592:
    LDR R2, [R6]
    CMP R3, R2
    ITE 
    LDRLE.W R2, [R6,R3,LSL#2]
    MOVGT R2, #0
    STR.W R2, [R1,#4]!
    LDR.W R2, [R10]
    CMP R3, R2
    ITE 
    LDRLE.W R2, [R10,R3,LSL#2]
    MOVGT R2, #0
    SUBS R3, #1
    STR.W R2, [R0],#4
    BNE loc_1E592
loc_1E5B8:
    ADD.W R1, R11, R7
    MOV R3, R5
    ADDS R2, R1, R7
    MOV R0, R11
    ADD.W R6, R2, R5,LSL#3
    ADD R8, R9
    STR R6, [SP,#0x30+var_30]
    ADD.W R10, R8, #1
    BL sub_1DB88
    MOV R3, #0x3FFFFFE
    CMP R10, R3
    BHI loc_1E65A
loc_1E5DE:
    ADD.W R8, R8, #2
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    STR.W R10, [R6]
    CMP.W R10, #0
    BEQ loc_1E656
loc_1E600:
    MOVS R0, #0
    LSLS R5, R5, #1
    ADDS R2, R6, #4
    MOV LR, R0
    MOVS R3, #1
loc_1E60A:
    CMP R5, R3
    IT 
    STRLT.W LR, [R2]
    BLT loc_1E622
loc_1E614:
    SUBS R1, R7, R3
    LDR.W R1, [R11,R1,LSL#2]
    CMP R1, #0
    IT 
    MOVNE R0, R3
    STR R1, [R2]
loc_1E622:
    LDR R1, [R6]
    ADDS R3, #1
    ADDS R2, #4
    CMP R3, R1
    BLE loc_1E60A
loc_1E62C:
    STR R0, [R6]
    LSLS R1, R4, #2
    MOV R0, R11
    BL sub_194E4
    MOV R0, R11
    BL sub_19494
    MOV R0, R6
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1E644:
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    CMP R5, #0
    MOV R4, R7
    MOV R11, R0
    BLE loc_1E5B8
loc_1E654:
    B loc_1E588
loc_1E656:
    MOV R0, R10
    B loc_1E62C
loc_1E65A:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-loop-counter",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:data-processing-helper (sub_19494)",
  "external-call-type:unspecified-helper (sub_115CC)",
  "integer-size-hint:32-bit",
  "byte-level-operations:shift-left",
  "byte-level-operations:shift-right",
  "byte-level-operations:addition",
  "byte-level-operations:subtraction",
  "byte-level-operations:logical-and",
  "byte-level-operations:logical-or",
  "byte-level-operations:logical-not",
  "bitwise-mask-values:0x3FFFFFE",
  "fixed-value-comparison:0",
  "fixed-value-comparison:0x32",
  "fixed-value-assignment:0",
  "fixed-value-assignment:4",
  "address-or-offset-constant:0x3FFFFFE",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:sub_115CC",
  "inferred-algorithm:loop-with-condition",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:conditional-logic",
  "inferred-algorithm:array-processing",
  "inferred-algorithm:miscellaneous"
]
```<|im_end|>
############
```assembly
loc_12EE0:
    PUSH {R0-R3}
    MOVS R2, #7
    PUSH {R4-R7,LR}
    SUB SP, SP, #0xC
    ADD R6, SP, #0x30+varg_r0
    MOV R5, #0x56190
    MOVW R4, #0x6198
    LDR.W R7, [R6],#4
    MOVT.W R4, #5
    LDR.W LR, [R5]
    MOVS R1, #1
    LDR R3, [R4]
    MOV R0, #aError
    STR.W LR, [SP,#0x30+var_2C]
    BLX fwrite
    MOV R2, R7
    MOV R3, R6
    MOVS R1, #1
    LDR R0, [R4]
    STR R6, [SP,#0x30+var_30]
    BLX __vfprintf_chk
    LDR R1, [R4]
    MOVS R0, #0xA
    BLX fputc
    LDR R2, [SP,#0x30+var_2C]
    LDR R3, [R5]
    CMP R2, R3
    BNE loc_12F3E
loc_12F34:
    ADD SP, SP, #0xC
    POP.W {R4-R7,LR}
    ADD SP, SP, #0x10
    BX LR
loc_12F3E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:FILE-pointer",
  "arg1-type:string",
  "arg2-type:void*",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:stdio-helper (fwrite)",
  "external-call-type:stdio-helper (__vfprintf_chk)",
  "external-call-type:stdio-helper (fputc)",
  "external-call-type:security-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:7",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x6198",
  "fixed-value-assignment:0xA",
  "address-or-offset-constant:aError",
  "address-or-offset-constant:varg_r0",
  "address-or-offset-constant:var_2C",
  "address-or-offset-constant:var_30",
  "address-or-offset-constant:__vfprintf_chk",
  "address-or-offset-constant:fwrite",
  "address-or-offset-constant:__stack_chk_fail",
  "address-or-offset-constant:fputc",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:file-io",
  "inferred-algorithm:printf-style-formatting",
  "inferred-algorithm:stack-protection"
]
```<|im_end|>
############
```assembly
loc_2CB2C:
    PUSH {R4-R6,LR}
    MOV R4, #0x56190
    SUB SP, SP, #8
    LDR R3, [R0,#0xC]
    MOV R0, R1
    LDR R2, [R4]
    MOV R1, SP
    STR R2, [SP,#0x18+var_14]
    BLX R3
    LDR R1, [SP,#0x18+var_18]
    MOV R6, R0
    BL sub_2C994
    MOV R5, R0
    MOV R0, R6
    BL sub_19494
loc_2CB54:

```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (BLX R3)",
  "external-call-type:unspecified-helper (sub_2C994)",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56190",
  "fixed-value-comparison:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:sub_2C994",
  "address-or-offset-constant:sub_19494",
  "inferred-algorithm:data-processing-or-manipulation",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:helper-function-invocation"
]
```<|im_end|>
############
```assembly
loc_5697C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11534:
    ADR R12, 0x1153C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(close_ptr - 0x5553C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "standard-calling-convention-not-applicable",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (close_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x1153C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:close_ptr",
  "inferred-algorithm:direct-function-pointer-invocation",
  "inferred-algorithm:file-or-resource-management"
]
```<|im_end|>
############
```assembly
loc_56974:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_18AFC:
    PUSH {R0-R3}
    PUSH.W {R4-R8,LR}
    SUB SP, SP, #0xD0
    ADD R4, SP, #0xF8+varg_r0
    MOV R7, #0x56190
    LDR.W R8, [R4],#4
    LDR R3, [R7]
    ADDS R5, R4, #4
    MOV R0, R8
    STR R3, [SP,#0xF8+var_2C]
    BLX strlen
    LDR R3, [SP,#0xF8+varg_r1]
    STR R5, [SP,#0xF8+var_F8]
    MOV R6, R0
    CBZ R3, loc_18B3A
loc_18B26:
    MOV R0, R3
    ADDS R5, #4
    BLX strlen
    STR R5, [SP,#0xF8+var_F8]
    LDR.W R3, [R5,#-4]
    ADD R6, R0
    CMP R3, #0
    BNE loc_18B26
loc_18B3A:
    ADDS R0, R6, #1
    CMP.W R0, #0x80000000
    BCS loc_18B84
loc_18B42:
    CMP R0, #0
    IT 
    MOVEQ R0, #1
    BLX malloc
    MOV R5, R0
    CBZ R0, loc_18B84
loc_18B50:
    MOV R1, R8
    MOV R0, R5
    BLX stpcpy
    LDR R1, [SP,#0xF8+varg_r1]
    ADDS R4, #4
    STR R4, [SP,#0xF8+var_F8]
    CBZ R1, loc_18B70
loc_18B60:
    ADDS R4, #4
    BLX stpcpy
    STR R4, [SP,#0xF8+var_F8]
    LDR.W R1, [R4,#-4]
    CMP R1, #0
    BNE loc_18B60
loc_18B70:
    LDR R2, [SP,#0xF8+var_2C]
    MOV R0, R5
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_18BAC
loc_18B7A:
    ADD SP, SP, #0xD0
    POP.W {R4-R8,LR}
    ADD SP, SP, #0x10
    BX LR
loc_18B84:
    MOV R3, #0x3AE48
    ADD R6, SP, #0xF8+var_F4
    MOVS R5, #0
    LDM R3, {R0-R3}
    STM R6!, {R0-R2}
    ADD R1, SP, #0xF8+var_F4
    STRH.W R3, [R6],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R6]
    BL sub_12E78
loc_18BAA:
    B loc_18B50
loc_18BAC:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:pointer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-length-check",
  "conditional-branching-on-null-pointer",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (stpcpy)",
  "external-call-type:data-processing-helper (malloc)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shift-right",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-input-parameter-offset",
  "memory-write-to-output-parameter-offset",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:sub_12E78",
  "inferred-algorithm:string-concatenation",
  "inferred-algorithm:dynamic-memory-allocation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:stack-protection"
]
```<|im_end|>
############
```assembly
loc_1151C:
    ADR R12, 0x11524
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strncmp_ptr - 0x55524)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:string-pointer",
  "arg1-type:string-pointer",
  "arg2-type:size_t",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strncmp)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11524",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strncmp_ptr",
  "inferred-algorithm:string-comparison",
  "inferred-algorithm:conditional-execution-or-dispatch"
]
```<|im_end|>
############
```assembly
loc_568AC:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_322B0:
    PUSH.W {R4-R11,LR}
    MOV R7, #0x56190
    SUB SP, SP, #0x164
    ADD.W R12, R1, #0x40
    ADD.W LR, SP, #0x188+var_16C
    LDR R3, [R7]
    MOV R4, R1
    MOV R6, R0
    STR R3, [SP,#0x188+var_2C]
loc_322CE:
    LDR R0, [R4]
    ADDS R4, #0x10
    LDR.W R1, [R4,#-0xC]
    MOV R5, LR
    LDR.W R2, [R4,#-8]
    ADD.W LR, LR, #0x10
    LDR.W R3, [R4,#-4]
    CMP R4, R12
    STM R5!, {R0-R3}
    BNE loc_322CE
loc_322EA:
    LDR R5, [SP,#0x188+var_16C]
    ADD R1, SP, #0x188+var_16C
    LDR.W LR, [SP,#0x188+var_168]
    MOV R10, R6
    LDR R0, [SP,#0x188+var_138]
    MOV.W R12, #0x10
    LDR R2, [SP,#0x188+var_134]
    MOV R6, R5
    LDR R3, [SP,#0x188+var_130]
    MOV R5, LR
loc_32302:
    EOR.W R8, R5, R2
    LDR R4, [R1,#0x28]
    LDR R5, [R1,#0x10]
    EOR.W LR, R6, R0
    LDR R2, [R1,#0x24]
    ADD.W R12, R12, #3
    LDR R0, [R1,#0x20]
    EOR.W R9, R5, R4
    LDR R6, [R1,#0xC]
    EOR.W R2, R8, R2
    LDR R4, [R1,#8]
    EOR.W R0, LR, R0
    EOR.W R3, R9, R3
    EORS R2, R6
    EORS R0, R4
    EORS R3, R4
    CMP.W R12, #0x4F
    MOV.W R2, R2,ROR#31
    MOV.W R0, R0,ROR#31
    MOV.W R3, R3,ROR#31
    STR R0, [R1,#0x40]
    ADD.W R1, R1, #0xC
    STR R3, [R1,#0x3C]
    STR R2, [R1,#0x38]
    BNE loc_32302
loc_3234C:
    ADD R5, SP, #0x188+var_34
    ADD R4, SP, #0x188+var_74
    ADD.W R8, SP, #0x188+var_30
    MOV LR, R10
loc_32356:
    MOV R0, R4
    LDR.W R3, [R4,#4]!
    LDR R6, [R0,#0x24]
    LDR R1, [R0,#0x38]
    LDR R2, [R0,#0xC]
    EORS R1, R6
    EORS R2, R1
    EORS R3, R2
    MOV.W R3, R3,ROR#31
    STR.W R3, [R5,#4]!
    CMP R8, R5
    BNE loc_32356
loc_32374:
    LDR.W R2, [LR,#4]
    MOV R6, LR
    LDR.W R3, [LR]
    MOVW R11, #0x7999
    ADD.W R10, SP, #0x188+var_120
    MOVT.W R11, #0x5A82
    MOV R4, R2
    STR R2, [SP,#0x188+var_180]
    LDR.W R2, [LR,#8]
    ADD.W LR, SP, #0x188+var_170
    STR R3, [SP,#0x188+var_184]
    MOV R0, R2
    STR R2, [SP,#0x188+var_17C]
    LDR R2, [R6,#0xC]
    MOV R12, R0
    MOV R1, R2
    STR R2, [SP,#0x188+var_178]
    MOV R2, R3
    LDR R3, [R6,#0x10]
    STR R3, [SP,#0x188+var_174]
    MOV R9, R3
    B loc_323B4
loc_323AE:
    MOV R1, R12
    MOV R2, R3
    MOV R12, R5
loc_323B4:
    LDR.W R0, [LR,#4]!
    EOR.W R3, R12, R1
    ANDS R3, R4
    MOV.W R5, R4,ROR#2
    ADD R0, R11
    EORS R3, R1
    ADD.W R0, R0, R2,ROR#27
    CMP LR, R10
    ADD R3, R0
    MOV R4, R2
    ADD R3, R9
    MOV R9, R1
    BNE loc_323AE
loc_323D6:
    MOVW R11, #0xEBA1
    MOV R0, R3
    ADD.W R9, SP, #0x188+var_D0
    MOVT.W R11, #0x6ED9
    B loc_323EC
loc_323E6:
    MOV R12, R5
    MOV R0, R3
    MOV R5, LR
loc_323EC:
    LDR.W R4, [R10,#4]!
    EOR.W R3, R2, R5
    EOR.W R3, R3, R12
    MOV.W LR, R2,ROR#2
    ADD R4, R11
    CMP R10, R9
    ADD.W R4, R4, R0,ROR#27
    MOV R2, R0
    ADD R3, R4
    ADD R3, R1
    MOV R1, R12
    BNE loc_323E6
loc_3240E:
    MOVW R11, #0xBCDC
    MOV R4, R3
    ADD.W R10, SP, #0x188+var_80
    MOVT.W R11, #0x8F1B
    B loc_32424
loc_3241E:
    MOV R5, LR
    MOV R4, R3
    MOV LR, R1
loc_32424:
    LDR.W R1, [R9,#4]!
    ORR.W R2, LR, R5
    ANDS R2, R0
    AND.W R3, LR, R5
    ADD R1, R11
    ORRS R2, R3
    CMP R9, R10
    ADD.W R3, R1, R4,ROR#27
    ADD R3, R2
    MOV.W R1, R0,ROR#2
    ADD R3, R12
    MOV R0, R4
    MOV R12, R5
    BNE loc_3241E
loc_3244A:
    MOV R9, #0xCA62C1D6
    B loc_3245A
loc_32454:
    MOV LR, R1
    MOV R3, R2
    MOV R1, R12
loc_3245A:
    LDR.W R0, [R10,#4]!
    EOR.W R2, R4, R1
    EOR.W R2, R2, LR
    MOV.W R12, R4,ROR#2
    ADD R0, R9
    CMP R10, R8
    ADD.W R0, R0, R3,ROR#27
    MOV R4, R3
    ADD R2, R0
    ADD R2, R5
    MOV R5, LR
    BNE loc_32454
loc_3247C:
    LDR R4, [SP,#0x188+var_184]
    LDR R5, [SP,#0x188+var_180]
    ADD R4, R2
    LDR R0, [SP,#0x188+var_2C]
    ADD R5, R3
    LDR R3, [SP,#0x188+var_178]
    MOV R2, R4
    LDR R4, [R7]
    ADD R3, R1
    STR R2, [R6]
    CMP R0, R4
    LDR R2, [SP,#0x188+var_17C]
    MOV R1, R3
    LDR R3, [SP,#0x188+var_174]
    ADD R2, R12
    STR R5, [R6,#4]
    ADD R3, LR
    STR R2, [R6,#8]
    STR R1, [R6,#0xC]
    STR R3, [R6,#0x10]
    BNE loc_324AC
loc_324A6:
    ADD SP, SP, #0x164
    POP.W {R4-R11,PC}
loc_324AC:
    BLX __stack_chk_fail
```
Output: R3, R12, R1
    ANDS R3, R4
    MOV.W R5, R4,ROR#2
    ADD R0, R11
    EORS R3, R1
    ADD.W R0, R0, R2,ROR#27
    CMP R10, R9
    ADD R3, R0
    MOV R4, R2
    ADD R3, R9
    MOV R9, R1
    BNE loc_323E6
loc_323FE:
    MOV W0, #0
    ADD.W SP, SP, #0x164
    POP.W {R4-R11,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_1FC80:
    PUSH.W {R4-R8,LR}
    MOVW R3, #0xFFFE
    LDR R4, [R1]
    MOVT.W R3, #0x3FF
    LDR R2, [R0]
    CMP R4, R2
    IT 
    MOVLT R4, R2
    ADDS R7, R4, #1
    CMP R7, R3
    BHI loc_1FD12
loc_1FC9C:
    ADDS R4, #2
    MOV R5, R0
    MOV R6, R1
    MOVS R1, #4
    MOV R0, R4
    BL sub_193B8
    LSLS R2, R4, #2
    MOVS R1, #0
    MOV R8, R0
    BLX memset
    STR.W R7, [R8]
    CBZ R7, loc_1FD0E
loc_1FCBA:
    MOV.W LR, #0
    MOV R12, R8
    MOV R2, LR
    MOVS R3, #1
loc_1FCC4:
    LDR R1, [R5]
    LDR R7, [R6]
    CMP R1, R3
    MOV.W R1, #0
    ITE 
    LDRGE.W R0, [R5,R3,LSL#2]
    MOVLT R0, #0
    CMP R7, R3
    ITE 
    LDRGE.W R7, [R6,R3,LSL#2]
    MOVLT R7, #0
    ADDS.W R0, R0, LR
    ADC.W R1, R1, #0
    ADDS R0, R0, R7
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R2
    STR.W R0, [R12,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R4
    MOV LR, R1
    BNE loc_1FCC4
loc_1FD04:
    STR.W R2, [R8]
    MOV R0, R8
    POP.W {R4-R8,PC}
loc_1FD0E:
    MOV R2, R7
    B loc_1FD04
loc_1FD12:
    BL sub_115CC
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:error-or-alternative-path (sub_115CC)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operation-shift-left:2",
  "bitwise-operation-addition-with-carry",
  "bitwise-operation-comparison",
  "address-or-offset-constant:0xFFFE",
  "address-or-offset-constant:0x3FF",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:sub_115CC",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:loop-based-data-processing",
  "inferred-algorithm:error-handling-or-fallback"
]
```<|im_end|>
############
```assembly
loc_11474:
    ADR R12, 0x1147C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(write_ptr - 0x5547C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper",
  "address-or-offset-constant:0x1147C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:write_ptr",
  "magic-number:0x5547C",
  "inferred-algorithm:dynamic-code-execution",
  "inferred-algorithm:data-pointer-update"
]
```<|im_end|>
############
```assembly
loc_12F4C:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return"
]
```<|im_end|>
############
```assembly
loc_11540:
    BX PC
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "unconditional-jump-present",
  "inferred-algorithm:unspecified",
  "inferred-algorithm:program-terminates-immediately"
]
```<|im_end|>
############
```assembly
loc_1F088:

loc_2E3C4:
    ADDS R2, #0x10
    B.W sub_1F088
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "loop-detected",
  "loop-counter-pattern:increment-by-0x10",
  "unconditional-jumps-present",
  "external-function-calls-not-present",
  "integer-size-hint:32-bit",
  "fixed-value-addition:0x10",
  "inferred-algorithm:infinite-loop-with-increment"
]
```<|im_end|>
############
```assembly
loc_56890:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1119C:
    ADR R12, 0x111A4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(getpwuid_ptr - 0x551A4)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (getpwuid_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111A4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:getpwuid_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:system-service-invocation",
  "inferred-algorithm:user-id-resolution"
]
```<|im_end|>
############
```assembly
loc_114E8:
    ADR R12, 0x114F0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(remove_ptr - 0x554F0)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x114F0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:remove_ptr",
  "address-or-offset-constant:0x554F0",
  "inferred-algorithm:jump-table-or-pointer-chasing",
  "inferred-algorithm:data-fetching-or-address-resolution"
]
```<|im_end|>
############
```assembly
loc_231B4:
    LDR R3, [R0]
    CMP R3, #0
    BEQ.W loc_233E0
loc_231BC:
    PUSH.W {R4-R11,LR}
    MOV R4, R0
    SUB SP, SP, #0xC
    MOV R0, R3
    BL sub_1F158
    ADD.W R5, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVPL R5, R0
    LDR R0, [R4,#4]
    BL sub_1F158
    ASRS R5, R5, #2
    ADDS R5, #0xD
    ADDS.W R3, R0, #0xF
    ADD.W R2, R0, #0x12
    LDR R0, [R4,#8]
    IT 
    MOVMI R3, R2
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    ADDS.W R3, R0, #0xF
    ADD.W R2, R0, #0x12
    LDR R0, [R4,#0xC]
    IT 
    MOVMI R3, R2
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    MOVS R1, #1
    ADD.W R3, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVMI R0, R3
    ADD.W R0, R5, R0,ASR#2
    BL sub_193B8
    MOV R7, R0
    CMP R0, #0
    BEQ.W loc_233E4
loc_23226:
    MOV R3, #0x3F57C
    LDRH R2, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    STRH R2, [R0]
    STRB R3, [R0,#2]
    LDR R0, [R4]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE.W loc_233CC
loc_23252:
    MOVW R5, #0xF4DC
    ADD.W R9, R7, #1
    MOVT.W R5, #3
    MOV R8, R6
loc_23260:
    MOV.W R1, R8,ASR#1
    LDR R0, [R4]
    BL sub_1F20C
    AND.W R3, R8, #1
    ADD.W R8, R8, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R8, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R9,#1]!
    BNE loc_23260
loc_2328A:
    MOV R9, #0x3F580
    ADDS R3, R6, #3
    ADDS R2, R6, #6
    LDR.W R0, [R9]
    STR R2, [SP,#0x30+var_2C]
    STR R0, [R7,R3]
    LDR R0, [R4,#4]
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE.W loc_233DA
loc_232C0:
    ADDS R2, R6, #5
    MOV R11, R8
    ADD.W R10, R7, R2
loc_232C8:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#4]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_232C8
loc_232F2:
    LDR.W R0, [R9]
    ADDS R6, #7
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#8]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233D6
loc_23320:
    ADD.W R2, R8, #3
    MOV R11, R6
    ADD.W R10, R7, R2
loc_2332A:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#8]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2332A
loc_23354:
    LDR.W R0, [R9]
    ADD.W R8, R8, #5
    LDR R3, [SP,#0x30+var_2C]
    ADD R8, R6
    ADD R3, R6
    STR.W R0, [R7,R8]
    LDR R0, [R4,#0xC]
    MOV R6, R3
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE loc_233D0
loc_23388:
    ADD.W R10, R6, #3
    MOV R9, R8
    ADD R10, R7
loc_23390:
    MOV.W R1, R9,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R3, R0, #0xF
    ADD R3, R5
    LDRB R3, [R3,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_23390
loc_233BA:
    ADDS R6, #5
    MOV R0, R7
    ADD R7, R6
    MOVS R3, #0
    STRB.W R3, [R7,R8]
loc_233C6:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_233CC:
    MOVS R6, #0
    B loc_23252
loc_233D0:
    MOV.W R8, #0
    B loc_23388
loc_233D6:
    MOVS R6, #0
    B loc_23320
loc_233DA:
    MOV.W R8, #0
    B loc_232C0
loc_233E0:
    MOVS R0, #0
    BX LR
loc_233E4:
    MOVS R0, #0
    B loc_233C6
```
Output: #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2332A
loc_23354:
    LDR.W R0, [R9]
    ADDS R6, #5
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0xC]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233D2
loc_23380:
    ADD.W R2, R8, #1
    MOV R11, R6
    ADD.W R10, R7, R2
loc_2338A:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2338A
loc_233B2:
    LDR.W R0, [R9]
    ADDS R6, #3
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0x10]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233CE
loc_233DE:
    ADD.W R2, R8, #5
    MOV R11, R6
    ADD.W R10, R7, R2
loc_233E8:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_233E8
loc_23402:
    LDR.W R0, [R9]
    ADDS R6, #1
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0x14
############
```assembly
loc_1E058:
    PUSH.W {R4-R10,LR}
    SUB SP, SP, #8
    MOV.W R10, #0xC
    MOV R9, R3
    LDR R7, [SP,#0x28+arg_0]
    MOV R4, R1
    MOV R6, R0
    MOV R1, R2
    MOV R2, R9
    MLA.W R10, R10, R7, R3
    MOV.W R8, R7,LSL#2
    ADD.W R5, R0, R8
    MOV R3, R7
    MOV R0, R5
    STR.W R10, [SP,#0x28+var_28]
    BL sub_1DED4
    MOV R3, R7
    STR.W R10, [SP,#0x28+var_28]
    ADD.W R2, R9, R8
    MOV R1, R4
    MOV R0, R9
    BL sub_1DB88
    MOV.W LR, R7,LSL#1
    SUBS.W R3, LR, #1
    BMI loc_1E166
loc_1E0A2:
    ADD.W LR, R8, #4
    ADD.W R0, R5, R8
    ADD.W LR, LR, R3,LSL#2
    MOVS R2, #0
    ADD LR, R9
loc_1E0B2:
    LDR.W R1, [LR,#-4]!
    MOV.W R10, #0
    ADDS R2, R2, R1
    LDR.W R1, [R0,#-4]
    ADC.W R3, R10, #0
    ADDS.W R9, R2, R1
    STR.W R9, [R0,#-4]!
    ADC.W R10, R3, #0
    CMP R0, R6
    MOV R2, R10
    BNE loc_1E0B2
loc_1E0D6:
    CMP R7, #0
    BLE loc_1E148
loc_1E0DA:
    MOV R3, R6
    MOV R12, R5
    MOV R1, R5
    MOV.W LR, #0
loc_1E0E4:
    LDR R0, [R3]
    STR.W R0, [R1],#4
    STR.W LR, [R3],#4
    CMP R3, R5
    BNE loc_1E0E4
loc_1E0F2:
    CBNZ R2, loc_1E114
loc_1E0F4:
    LDR.W R1, [R6,R7,LSL#2]
    LDR R3, [R4]
    CMP R1, R3
    BNE loc_1E14E
loc_1E0FE:
    MOV R3, R4
    B loc_1E10E
loc_1E102:
    LDR.W R0, [R12,#4]!
    LDR.W R1, [R3,#4]!
    CMP R0, R1
    BNE loc_1E14E
loc_1E10E:
    ADDS R2, #1
    CMP R7, R2
    BNE loc_1E102
loc_1E114:
    CMP R7, #0
    BLE loc_1E148
loc_1E118:
    SUB.W R3, R8, #4
    ADD.W R5, R4, R8
    ADD R8, R3
    MOVS R2, #1
    ADD R6, R8
loc_1E126:
    LDR.W R0, [R5,#-4]!
    MOV.W R8, #0
    LDR R1, [R6]
    MVNS R0, R0
    ADDS R2, R2, R0
    ADC.W R3, R8, #0
    ADDS R7, R2, R1
    ADC.W R8, R3, #0
    CMP R4, R5
    STR.W R7, [R6],#-4
    MOV R2, R8
    BNE loc_1E126
loc_1E148:
    ADD SP, SP, #8
    POP.W {R4-R10,PC}
loc_1E14E:
    CMP R2, R7
    BGE loc_1E114
loc_1E152:
    ADDS R1, R2, R7
    LDR.W R3, [R4,R2,LSL#2]
    LDR.W R2, [R6,R1,LSL#2]
    CMP R2, R3
    BHI loc_1E114
loc_1E160:
    ADD SP, SP, #8
    POP.W {R4-R10,PC}
loc_1E166:
    CMP R7, #0
    IT 
    MOVGT R2, #0
    BGT loc_1E0DA
loc_1E16E:
    B loc_1E148
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-loop-counter",
  "conditional-branching-on-input",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1DED4)",
  "external-call-type:unspecified-helper (sub_1DB88)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offsets:0, 4, 8, 12",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0xC",
  "address-or-offset-constant:sub_1DED4",
  "address-or-offset-constant:sub_1DB88",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:data-comparison-or-matching",
  "inferred-algorithm:bitwise-operations"
]
```<|im_end|>
############
```assembly
loc_20C4C:
    LDR R3, [R0]
    PUSH.W {R4-R11,LR}
    MOV R4, R0
    LSLS R3, R3, #5
    SUB SP, SP, #0x14
    SUBS R3, #1
    BMI.W loc_20D72
loc_20C5E:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_20C74
loc_20C6A:
    B loc_20D72
loc_20C6C:
    LDR.W R2, [R4,R2,LSL#2]
    LSRS R2, R1
    BNE loc_20D72
loc_20C74:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R1, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_20C6C
loc_20C86:
    MOVS R6, #1
    MOVS R0, #2
    MOV R7, R6
    STR R0, [SP,#0x38+var_2C]
loc_20C8E:
    MOVS R1, #1
    BL sub_193B8
    MOVS R1, #4
    STR R0, [SP,#0x38+dest]
    LDR R0, [R4]
    BL sub_193B8
    LDR R3, [R4]
    CMP R3, #0
    STR R0, [SP,#0x38+var_34]
    ITTT 
    MOVGT R2, R0
    SUBGT R1, R2, #4
    MOVGT R2, #0
    BLE loc_20CC0
loc_20CAE:
    SUBS R3, R3, R2
    ADDS R2, #1
    LDR.W R3, [R4,R3,LSL#2]
    STR.W R3, [R1,#4]!
    LDR R3, [R4]
    CMP R3, R2
    BGT loc_20CAE
loc_20CC0:
    LDR R1, [SP,#0x38+dest]
    MOVS R3, #0
    SUBS R5, R7, #1
    MOVW LR, #0xCCCD
    MOVW R8, #0x9999
    ADD.W R11, R1, R5
    STRB R3, [R1,R6]
    MOVT.W LR, #0xCCCC
    LDR R3, [R4]
    MOVT.W R8, #0x1999
    MOV.W R12, #0xA
    MOV.W R9, #6
    CMP R3, #0
    MOV R10, R5
    BLE loc_20D3A
loc_20CEC:
    LDR R2, [SP,#0x38+var_34]
    MOVS R5, #0
    MOV R3, R5
    MOVS R0, #1
loc_20CF4:
    LDR R1, [R2]
    ADDS R3, #1
    UMULL.W R6, R7, R1, LR
    LSRS R7, R7, #3
    MLS.W R6, R12, R7, R1
    MLA.W R1, R8, R5, R7
    MLA.W R5, R9, R5, R6
    UMULL.W R6, R7, R5, LR
    LSRS R6, R7, #3
    ADD R1, R6
    STR.W R1, [R2],#4
    CMP R1, #0
    LDR R1, [R4]
    MLS.W R5, R12, R6, R5
    IT 
    MOVNE R0, #0
    CMP R1, R3
    BGT loc_20CF4
loc_20D26:
    ADDS R5, #0x30
    MOV R1, R11
    STRB.W R5, [R11],#-1
    CBNZ R0, loc_20D48
loc_20D30:
    LDR R3, [R4]
    ADD.W R10, R10, #0xFFFFFFFF
    CMP R3, #0
    BGT loc_20CEC
loc_20D3A:
    LDR R2, [SP,#0x38+dest]
    MOV R5, R10
    MOVS R3, #0x30
    ADDS R1, R2, R5
    STRB.W R3, [R2,R10]
    B loc_20D4A
loc_20D48:
    MOV R5, R10
loc_20D4A:
    CMP R5, #0
    BLE loc_20D58
loc_20D4E:
    LDR R3, [SP,#0x38+var_2C]
    LDR R0, [SP,#0x38+dest]
    SUBS R2, R3, R5
    BLX memmove
loc_20D58:
    LDR R1, [R4]
    LDR R4, [SP,#0x38+var_34]
    LSLS R1, R1, #2
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R0, [SP,#0x38+dest]
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_20D72:
    ADDS R3, #1
    BEQ loc_20C86
loc_20D76:
    MOVS R2, #0x1C
    MOVW R0, #0x2C1
    MUL.W R3, R2, R3
    MOVT.W R0, #0x2C0B
    ADDS R3, #0x5C
    SMULL.W R0, R1, R3, R0
    ASRS R3, R3, #0x1F
    RSB.W R7, R3, R1,ASR#4
    ADDS R3, R7, #1
    STR R3, [SP,#0x38+var_2C]
    MOV R6, R7
    MOV R0, R3
    B loc_20C8E
```
Output: R1
    MOVS R0, #0
    CMP R7, R2
    BNE loc_20D76
    LDR R1, [SP,#0x38+dest]
    ADDS R2, R1, R7
    LDR.W R3, [R4,R7,LSL#2]
    STR.W R3, [R2]
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_1B404:

loc_1B5A8:
    PUSH {R4}
    MOV R3, R1
    MOV R4, R2
    MOV R2, R0
    MOV R1, R4
    MOV R0, R3
    POP.W {R4}
    B sub_1B404
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "loop-detected",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1B404)",
  "integer-size-hint:32-bit",
  "memory-write-to-register",
  "memory-read-from-register",
  "inferred-algorithm:iteration-or-looping",
  "inferred-algorithm:recursive-or-indirect-calls"
]
```<|im_end|>
############
```assembly
loc_2CC16:
    MOV R10, #0x562CC
    ADD.W R11, SP, #0x88+var_6C
    LDM.W R10!, {R0-R3}
    STM.W R11!, {R0-R3}
    LDM.W R10!, {R0-R3}
    STM.W R11!, {R0-R3}
    LDM.W R10!, {R0-R3}
    SUB.W R9, R10, #0x30
    STM.W R11!, {R0-R3}
    MOV R4, R9
    LDM.W R10, {R0-R3}
    STM.W R11, {R0-R3}
    MOV R3, R7
    MOV R7, LR
loc_2CC4C:
    LDR.W R2, [R4,#0x49C]
    ADD R1, SP, #0x88+var_6C
    ADD R0, SP, #0x88+var_80
    SUBS R4, #0x14
    EORS R5, R2
    LDR.W R2, [R4,#0x4B4]
    STR R5, [SP,#0x88+var_80]
    EORS R3, R2
    LDR.W R5, [R4,#0x4C0]
    LDR.W R2, [R4,#0x4B8]
    STR R3, [SP,#0x88+var_7C]
    EORS R6, R5
    LDR.W R3, [R4,#0x4BC]
    EORS R2, R7
    STR R6, [SP,#0x88+var_70]
    EOR.W R3, R3, R12
    STR R2, [SP,#0x88+var_78]
    STR R3, [SP,#0x88+var_74]
    BL sub_322B0
    ADD R3, SP, #0x88+var_7C
    LDR R5, [SP,#0x88+var_80]
    LDR R6, [SP,#0x88+var_70]
    LDM.W R3, {R3,R7,R12}
    STR.W R5, [R4,#0x4B0]
    STR.W R6, [R4,#0x4C0]
    STR.W R3, [R4,#0x4B4]
    STR.W R7, [R4,#0x4B8]
    STR.W R12, [R4,#0x4BC]
    CMP R4, R8
    BNE loc_2CC4C
loc_2CCA2:
    MOV LR, R7
    MOV R7, R3
    LDR R3, [SP,#0x88+var_88]
    SUBS R3, #1
    STR R3, [SP,#0x88+var_88]
    BNE loc_2CC16
loc_2CCAE:
    ADD R4, SP, #0x88+var_80
    ADD R1, SP, #0x88+var_6C
    ADD R0, SP, #0x88+var_80
    MOVS R6, #0x14
    BL sub_322B0
    LDM R4!, {R0-R3}
    LDR R7, [SP,#0x88+var_88]
    STR.W R6, [R9,#(dword_5677C - 0x562CC)]
    LDR R6, [SP,#0x88+var_2C]
    STR.W R7, [R9,#(dword_567D8 - 0x562CC)]
    LDR R7, [R4]
    LDR R4, [SP,#0x88+var_84]
    LDR R5, =byte_56780
    LDR R4, [R4]
    STM R5!, {R0-R3}
    CMP R6, R4
    STR R7, [R5]
    BNE loc_2CCDE
loc_2CCD8:
    ADD SP, SP, #0x64
    POP.W {R4-R11,PC}
loc_2CCDE:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x64",
  "callee-saves-registers-present",
  "standard-function-return",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_322B0)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:16-bit",
  "byte-level-operations",
  "bitwise-operation:EORS",
  "bitwise-operation:EOR.W",
  "fixed-value-assignment:0x562CC",
  "address-or-offset-constant:dword_5677C",
  "address-or-offset-constant:dword_567D8",
  "address-or-offset-constant:byte_56780",
  "address-or-offset-constant:0x14",
  "inferred-algorithm:data-masking-and-filtering",
  "inferred-algorithm:data-encryption-or-decryption",
  "inferred-algorithm:loop-with-side-effects",
  "inferred-algorithm:stateful-processing",
  "inferred-algorithm:array-manipulation"
]
```<|im_end|>
############
```assembly
loc_2A158:
    PUSH {R4-R6,LR}
    MOV R5, #0x1FFFF
    MOV R4, R0
    MOV R6, R1
loc_2A166:
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R4]
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R6]
    LDR R3, [R4]
    MUL.W R3, R3, R0
    CMP R3, R5
    BLS loc_2A166
loc_2A184:
    POP {R4-R6,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x18",
  "callee-saves-registers-present",
  "standard-function-return",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2D1F4)",
  "integer-size-hint:32-bit",
  "bitwise-operation:OR (set bit 8)",
  "memory-write-to-pointer",
  "fixed-value-comparison:0x1FFFF",
  "inferred-algorithm:array-element-update-with-loop",
  "inferred-algorithm:element-wise-logical-or"
]
```<|im_end|>
############
```assembly
loc_24D84:
    LDR R2, [R0]
    PUSH.W {R4-R8,LR}
    MOV R4, R0
    LDR R3, [R2]
    CMP R3, #2
    BEQ loc_24E3E
loc_24D92:
    CBZ R3, loc_24D9A
loc_24D94:
    MOVS R0, #0
    POP.W {R4-R8,PC}
loc_24D9A:
    MOVS R0, #3
    BL sub_1FE48
    LDR R1, [R4,#8]
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R5, R0
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R4]
    MOV R1, R5
    LDR R2, [R3,#0x10]
    MOV R6, R0
    LDR R0, [R4,#4]
    BL sub_20724
    MOV R8, R0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    LDR R1, [R4,#4]
    LDR R2, [R3,#0x10]
    LDR R0, [R3,#0x14]
    BL sub_1EAC0
    MOV R1, R0
    MOV R5, R0
    MOV R0, R8
    BL sub_1FC80
    MOV R7, R0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R0, R7
    LDR R1, [R3,#0x10]
    BL sub_200D4
    MOV R5, R0
    MOV R0, R7
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R0, R5
    LDR R1, [R3,#0x18]
    BL sub_1FC80
    MOV R7, R0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R0, R7
    LDR R1, [R3,#0x10]
    BL sub_200D4
    MOV R5, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R1, R5
    MOV R0, R6
    BL sub_1F358
    CLZ.W R4, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    LSRS R4, R4, #5
    BL sub_1E6B0
    MOV R0, R4
    POP.W {R4-R8,PC}
loc_24E3E:
    LDR R1, [R0,#8]
    LDR R2, [R2,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    LDR R1, [R4,#4]
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R6, R0
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R5, R0
    MOV R1, R0
    LDR R0, [R3,#0x18]
    BL sub_1EAC0
    LDR R3, [R4]
    MOV R1, R6
    LDR R2, [R3,#0x10]
    MOV R8, R0
    BL sub_1EAC0
    MOV R7, R0
    MOV R0, R8
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R5
    MOV R0, R6
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R1, R7
    MOV R0, R8
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R5, R0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    MOV R3, #0x56178
    MOV R0, R5
    LDR R1, [R3]
    BL sub_1F358
    CLZ.W R4, R0
    MOV R0, R5
    BL sub_1E6B0
    LSRS R4, R4, #5
    MOV R0, R4
    POP.W {R4-R8,PC}
```
Output:```json
[
  "return-type:void",
  "Argument-count:1",
  "Arg0-type:pointer",
  "Calling-convention-hint:callee-saves-registers",
  "Calling-convention-hint:registers-for-args",
  "Stack-arg-use:true",
  "Standard-calling-convention-used",
  "Stack-frame-management-present",
  "Explicit-stack-allocation-size:0x10",
  "Callee-saves-registers-present",
  "Standard-function-return",
  "Conditional-branching-on-input",
  "External-function-calls-present",
  "External-call-type:unspecified-helper (sub_1FE48)",
  "External-call-type:unspecified-helper (sub_1EAC0)",
  "External-call-type:unspecified-helper (sub_20724)",
  "External-call-type:unspecified-helper (sub_1E6B0)",
  "External-call-type:unspecified-helper (sub_1FC80)",
  "External-call-type:unspecified-helper (sub_200D4)",
  "External-call-type:unspecified-helper (sub_1F358)",
  "Integer-size-hint:32-bit",
  "Memory-read-from-input-parameter-offset:0",
  "Memory-read-from-input-parameter-offset:8",
  "Memory-read-from-indirect-pointer-offset:0x10",
  "Memory-read-from-indirect-pointer-offset:0x14",
  "Memory-read-from-indirect-pointer-offset:0x18",
  "Fixed-value-comparison:2",
  "Fixed-value-assignment:0",
  "Fixed-value-assignment:3",
  "Address-or-offset-constant:0x56178",
  "Inferred-algorithm:conditional-execution-or-dispatch",
  "Inferred-algorithm:data-processing-helper",
  "Inferred-algorithm:resource-management",
  "Inferred-algorithm:error-or-alternative-path",
  "Inferred-algorithm:object-lookup-and-initialization"
]
```<|im_end|>
############
```assembly
loc_2284C:
    MOVS R1, #0x88
    MOVS R0, #2
    B.W sub_193B8
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:integer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x88",
  "fixed-value-assignment:2",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "inferred-algorithm:constant-value-setting",
  "inferred-algorithm:external-function-invocation-with-predefined-values"
]
```<|im_end|>
############
```assembly
loc_11190:
    ADR R12, 0x11198
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strtol_ptr - 0x55198)]!
```
Output:```json
[
  "return-type:undefined",
  "argument-count:0",
  "calling-convention-hint:not-applicable",
  "calling-convention-hint:not-applicable",
  "calling-convention-hint:not-applicable",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-present",
  "standard-function-return-not-applicable",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (strtol_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11198",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strtol_ptr",
  "inferred-algorithm:external-function-invocation",
  "inferred-algorithm:address-resolution-or-pointer-chasing"
]
```<|im_end|>
############
```assembly
loc_56854:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_32BC0:
    PUSH.W {R4-R9,LR}
    MOVW R8, #0x6190
    LDR R3, [R0,#0x54]
    MOVT.W R8, #5
    LDR R6, [R0,#0x5C]
    SUB SP, SP, #0x4C
    CMP R3, #0x37
    LDR.W R2, [R8]
    ITE 
    RSBGT.W R9, R3, #0x78
    RSBLE.W R9, R3, #0x38
    LDR R7, [R0,#0x58]
    MOV R4, R0
    MOV R5, R1
    MOV.W LR, R6,LSR#29
    STR R2, [SP,#0x68+var_24]
    MOVS R3, #0x40
    MOV R2, R9
    MOVS R1, #0
    ADD R0, SP, #0x68+var_64
    ORR.W R7, LR, R7,LSL#3
    LSLS R6, R6, #3
    BLX __memset_chk
    MOV R2, R9
    ADD R1, SP, #0x68+var_64
    MOV R0, R4
    MOVS R3, #0x80
    STRB.W R3, [SP,#0x68+var_64]
    BL sub_3278C
    MOVS R2, #8
    ADD R1, SP, #0x68+var_64
    MOV R0, R4
    MOV.W LR, R7,LSR#24
    LSRS R3, R7, #0x10
    STRB.W R7, [SP,#0x68+var_61]
    STRB.W R6, [SP,#0x68+var_5D]
    LSRS R7, R2
    STRB.W LR, [SP,#0x68+var_64]
    MOV.W LR, R6,LSR#24
    STRB.W R3, [SP,#0x68+var_63]
    LSRS R3, R6, #0x10
    STRB.W R7, [SP,#0x68+var_62]
    LSRS R6, R2
    STRB.W R3, [SP,#0x68+var_5F]
    STRB.W LR, [SP,#0x68+var_60]
    STRB.W R6, [SP,#0x68+var_5E]
    BL sub_3278C
    LDRB R3, [R4,#3]
    STRB R3, [R5]
    LDRH R3, [R4,#2]
    STRB R3, [R5,#1]
    LDR R3, [R4]
    LSRS R3, R3, #8
    STRB R3, [R5,#2]
    LDR R3, [R4]
    STRB R3, [R5,#3]
    LDRB R3, [R4,#7]
    STRB R3, [R5,#4]
    LDRH R3, [R4,#6]
    STRB R3, [R5,#5]
    LDR R3, [R4,#4]
    LSRS R3, R3, #8
    STRB R3, [R5,#6]
    LDR R3, [R4,#4]
    STRB R3, [R5,#7]
    LDRB R3, [R4,#0xB]
    STRB R3, [R5,#8]
    LDRH R3, [R4,#0xA]
    STRB R3, [R5,#9]
    LDR R3, [R4,#8]
    LSRS R3, R3, #8
    STRB R3, [R5,#0xA]
    LDR R3, [R4,#8]
    STRB R3, [R5,#0xB]
    LDRB R3, [R4,#0xF]
    STRB R3, [R5,#0xC]
    LDRH R3, [R4,#0xE]
    STRB R3, [R5,#0xD]
    LDR R3, [R4,#0xC]
    LSRS R3, R3, #8
    STRB R3, [R5,#0xE]
    LDR R3, [R4,#0xC]
    STRB R3, [R5,#0xF]
    LDRB R3, [R4,#0x13]
    LDR R1, [SP,#0x68+var_24]
    LDR.W R2, [R8]
    STRB R3, [R5,#0x10]
    LDRH R3, [R4,#0x12]
    CMP R1, R2
    STRB R3, [R5,#0x11]
    LDR R3, [R4,#0x10]
    MOV.W R3, R3,LSR#8
    STRB R3, [R5,#0x12]
    LDR R3, [R4,#0x10]
    STRB R3, [R5,#0x13]
    BNE loc_32CB6
loc_32CB0:
    ADD SP, SP, #0x4C
    POP.W {R4-R9,PC}
loc_32CB6:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__memset_chk)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:reverse",
  "byte-level-operations:extract-and-store",
  "byte-level-operations:bitwise-shift",
  "byte-level-operations:bitwise-or",
  "byte-level-operations:bitwise-xor",
  "memory-access-pattern:scatter-gather",
  "memory-write-to-output-parameter-offset",
  "memory-read-from-input-parameter-offset",
  "fixed-value-comparison:0x37",
  "fixed-value-comparison:0x78",
  "fixed-value-comparison:0x38",
  "fixed-value-assignment:0x6190",
  "address-or-offset-constant:0x6190",
  "address-or-offset-constant:__memset_chk",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-packaging",
  "inferred-algorithm:data-reversal",
  "inferred-algorithm:data-transformation",
  "inferred-algorithm:error-detection"
]
```<|im_end|>
############
```assembly
loc_20228:
    PUSH.W {R4-R11,LR}
    MOV R4, R0
    SUB SP, SP, #0x3C
    LDR R0, [R1]
    STR R1, [SP,#0x60+src]
    ADDS R0, #1
    MOVS R1, #4
    BL sub_193B8
    CMP R0, #0
    BEQ.W loc_20716
loc_20242:
    LDR R1, [SP,#0x60+src]
    MOV R10, R0
    LDR R3, [R1]
    ADDS R2, R3, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R0, [R4]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_20716
loc_20262:
    LDR R3, [R4]
    MOV R2, #0x56170
    STR R2, [SP,#0x60+var_48]
    MOV R1, R4
    MOV R7, R2
    ADDS R2, R3, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R6, [R7]
    MOVS R1, #4
    LDR R0, [R6]
    ADDS R0, #1
    BL sub_193B8
    STR R0, [SP,#0x60+var_40]
    CMP R0, #0
    BEQ.W loc_20716
loc_2028E:
    LDR R2, [R6]
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R6, [R7,#(off_56178 - 0x56170)]
    MOVS R1, #4
    LDR R0, [R6]
    ADDS R0, #1
    BL sub_193B8
    STR R0, [SP,#0x60+var_44]
    CMP R0, #0
    BEQ.W loc_20716
loc_202AE:
    LDR R2, [R6]
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R3, [R4]
    LDR.W R3, [R4,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_206FC
loc_202C6:
    LDR R2, [SP,#0x60+src]
    LDR R3, [R2]
    LDR.W R3, [R2,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_206C4
loc_202D4:
    MOV R3, #0x3FFFFFE
    STR R3, [SP,#0x60+var_38]
    MOV R0, R5
    LDR R3, [SP,#0x60+var_48]
    MOVS R2, #1
    STR R2, [SP,#0x60+var_3C]
    LDR R1, [R3,#8]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_20572
loc_202F2:
    LDR R3, [SP,#0x60+var_48]
    MOV R0, R5
    LDR R1, [R3]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_205BE
loc_20302:
    LDR R4, [R5]
    LDR R3, [SP,#0x60+var_38]
    CMP R4, R3
    BHI.W loc_206F8
loc_2030C:
    ADDS R7, R4, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    STR R4, [R6]
    LDR R3, [SP,#0x60+var_38]
    LDR.W R4, [R10]
    CMP R4, R3
    BHI.W loc_206F8
loc_2032E:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.W R11, [R5]
    LDR.W R2, [R5,R11,LSL#2]
    MOV.W R3, R11,LSL#2
    STR R3, [SP,#0x60+var_34]
    CMP R2, #0
    BEQ.W loc_206DE
loc_2035C:
    MOVS R1, #4
    MOV R0, R11
    BL sub_193B8
    CMP.W R11, #0
    IT 
    MOVGT R2, #0
    MOV R9, R0
    IT 
    SUBGT R0, #4
    BLE loc_20386
loc_20374:
    LDR R3, [R5]
    SUBS R3, R3, R2
    ADDS R2, #1
    CMP R11, R2
    LDR.W R3, [R5,R3,LSL#2]
    STR.W R3, [R0,#4]!
    BNE loc_20374
loc_20386:
    LDR.W R4, [R10]
    MOVS R1, #4
    CMP R11, R4
    IT 
    ADDGE.W R4, R11, #1
    MOV R0, R4
    BL sub_193B8
    CMP R4, #0
    MOV.W R3, R4,LSL#2
    STR R3, [SP,#0x60+var_4C]
    MOV R8, R0
    BLE loc_203AE
loc_203A6:
    MOVS R1, #0
    MOV R2, R3
    BLX memset
loc_203AE:
    LDR.W R2, [R10]
    CMP R2, #0
    BLE loc_203D2
loc_203B6:
    LDR R3, [SP,#0x60+var_4C]
    MOV R1, R10
    MOVS R2, #1
    ADD.W LR, R8, R3
loc_203C0:
    LDR.W R3, [R1,#4]!
    ADDS R2, #1
    STR.W R3, [LR,#-4]!
    LDR.W R3, [R10]
    CMP R2, R3
    BLE loc_203C0
loc_203D2:
    LDR.W R0, [R9]
    LSRS R1, R0, #0x10
    MOV.W R2, R0,LSL#16
    IT 
    MOVNE R2, R0
    MOV.W R12, R2,LSL#8
    MOVS.W LR, R2,LSR#24
    IT 
    MOVEQ R2, R12
    CMP R1, #0
    MOV.W R1, R2,LSR#28
    ITE 
    MOVEQ.W R12, #0x10
    MOVNE.W R12, #0
    CMP.W LR, #0
    ITE 
    MOVEQ.W LR, #8
    MOVNE.W LR, #0
    CMP R1, #0
    MOV.W R1, R2,LSL#4
    IT 
    MOVNE R1, R2
    ADD.W R2, R12, LR
    MOV.W LR, R1,LSR#30
    ITE 
    MOVEQ.W R12, #4
    MOVNE.W R12, #0
    CMP.W LR, #0
    ADD R2, R12
    MOV.W R12, R1,LSL#2
    ITE 
    MOVEQ.W LR, #2
    MOVNE.W LR, #0
    ADD R2, LR
    IT 
    MOVEQ R1, R12
    CMP R1, #0
    IT 
    ADDGE R2, #1
    CBZ R2, loc_20460
loc_20448:
    CMP.W R11, #1
    LSL.W R0, R0, R2
    ITTTT 
    RSBGT.W LR, R2, #0x20
    LDRGT.W R1, [R9,#4]
    LSRGT.W R1, R1, LR
    ORRGT R0, R1
loc_20460:
    STR R2, [SP,#0x60+var_30]
    BL sub_1D700
    LDR R2, [SP,#0x60+var_30]
    MOV R3, R11
    MOV R1, R4
    STR R7, [SP,#0x60+var_60]
    STR R2, [SP,#0x60+var_58]
    MOV R2, R9
    STR R0, [SP,#0x60+var_5C]
    MOV R0, R8
    BL sub_1D904
    LDR R3, [R6]
    CMP R3, #0
    ITTT 
    ADDGT.W R4, R4, #0xFFFFFFFF
    MOVGT R2, R6
    MOVGT R3, #1
    BLE loc_204A4
loc_2048A:
    CMP R4, #0
    ADD.W R3, R3, #1
    ITE 
    LDRGE.W R1, [R8,R4,LSL#2]
    MOVLT R1, #0
    SUBS R4, #1
    STR.W R1, [R2,#4]!
    LDR R1, [R6]
    CMP R3, R1
    BLE loc_2048A
loc_204A4:
    LDR R1, [SP,#0x60+var_34]
    MOV R0, R9
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    LDR R1, [SP,#0x60+var_4C]
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R3, [R6]
    CMP R3, #1
    BLS loc_204E2
loc_204C6:
    LDR.W R1, [R6,R3,LSL#2]
    ADD.W R2, R6, R3,LSL#2
    CBNZ R1, loc_204E2
loc_204D0:
    SUBS R3, #1
    B loc_204DC
loc_204D4:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_204E2
loc_204DC:
    CMP R3, #1
    STR R3, [R6]
    BNE loc_204D4
loc_204E2:
    LDR R3, [R7]
    CMP R3, #1
    BLS loc_20504
loc_204E8:
    LDR.W R1, [R7,R3,LSL#2]
    ADD.W R2, R7, R3,LSL#2
    SUBS R3, #1
    CBZ R1, loc_204FE
loc_204F4:
    B loc_20504
loc_204F6:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_20504
loc_204FE:
    CMP R3, #1
    STR R3, [R7]
    BNE loc_204F6
loc_20504:
    LDR.W R1, [R10]
    MOV R0, R10
    LDR R3, [SP,#0x60+var_3C]
    ADDS R1, #1
    NEGS R3, R3
    STR R3, [SP,#0x60+var_3C]
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR.W R8, [SP,#0x60+var_40]
    LDR.W R9, [SP,#0x60+var_44]
    MOV R0, R7
    MOV R10, R5
    MOV R5, R6
    MOV R2, R8
    MOV R1, R9
    BL sub_1FAF0
    LDR.W R1, [R8]
    ADDS R1, #1
    LSLS R1, R1, #2
    MOV R4, R0
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R1, [R7]
    MOV R0, R7
    STR.W R9, [SP,#0x60+var_40]
    ADDS R1, #1
    STR R4, [SP,#0x60+var_44]
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R7
    BL sub_19494
    LDR R3, [SP,#0x60+var_48]
    MOV R0, R5
    LDR R1, [R3,#8]
    BL sub_1F358
    CMP R0, #0
    BNE.W loc_202F2
loc_20572:
    LDR R3, [R5]
    MOV R4, R0
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR.W R3, [R10]
    MOV R0, R10
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR R5, [SP,#0x60+var_40]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R3, [SP,#0x60+var_3C]
    ADDS R3, #1
    IT 
    LDRNE R0, [SP,#0x60+var_44]
    BEQ loc_20616
loc_205B8:
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_205BE:
    LDR R3, [R5]
    MOV R4, R0
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR.W R3, [R10]
    MOV R0, R10
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR R5, [SP,#0x60+var_40]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R5, [SP,#0x60+var_44]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_20616:
    LDR R3, [SP,#0x60+src]
    LDR R6, [R3]
    MOV R3, #0x3FFFFFE
    CMP R6, R3
    BHI loc_206F8
loc_20626:
    ADDS R7, R6, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOV R1, R4
    MOV R5, R0
    BLX memset
    CMP R6, #0
    STR R6, [R5]
    BLE loc_206A4
loc_20640:
    MOVS R1, #1
    MOV R6, R5
    MOV R0, R1
    LDR.W LR, [SP,#0x60+var_44]
    LDR.W R12, [SP,#0x60+src]
    B loc_20666
loc_20650:
    CMP R3, R7
    ITE 
    MOVCC R4, #0
    MOVCS R4, #1
loc_20658:
    LDR R2, [R5]
    CMP R3, #0
    IT 
    MOVNE R0, R1
    ADDS R1, #1
    CMP R2, R1
    BLT loc_206A6
loc_20666:
    LDR.W R3, [R12]
    LDR.W R2, [LR]
    CMP R3, R1
    ITE 
    LDRGE.W R3, [R12,R1,LSL#2]
    MOVLT R3, #0
    CMP R2, R1
    ITEE 
    LDRGE.W R2, [LR,R1,LSL#2]
    MOVLT R2, #0
    MOVLT.W R7, #0xFFFFFFFF
    SUB.W R3, R3, R2
    SUB.W R3, R3, R4
    IT 
    MVNGE R7, R2
    STR.W R3, [R6,#4]!
    CMP R4, #0
    BNE loc_20650
loc_2069A:
    CMP R3, R7
    ITE 
    MOVLS R4, #0
    MOVHI R4, #1
    B loc_20658
loc_206A4:
    MOVS R0, #1
loc_206A6:
    LDR R4, [SP,#0x60+var_44]
    STR R0, [R5]
    LDR R3, [R4]
    MOV R0, R4
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R5
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_206C4:
    MOVW R1, #0xE76C
    MOVW R0, #0xE884
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E3
    BLX __assert_fail
loc_206DE:
    MOVW R1, #0xE76C
    MOVW R0, #0xE7E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBigdivmod
    MOV.W R2, #0x540
    BLX __assert_fail
loc_206F8:
    BL sub_115CC
loc_206FC:
    MOVW R1, #0xE76C
    MOVW R0, #0xE86C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E2
    BLX __assert_fail
loc_20716:
    BLX abort
```
Output:193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR W4, [R7]
    LDR.W R3, [R5]
    LDR.W R4, [R5,R3,LSL#2]
    MOV.W R5, R3,LSL#2
    STR W5, [SP,#0x60+var_30]
    CMP W4, #0
    BEQ.W loc_206B4
loc_203B6:
    MOVS R1, #4
    MOV R0, R3
    BL sub_193B8
    CMP.W R3, #0
    IT 
    SUBGE.W R3, R3, #1
    MOV R0, R3
    BL sub_193B8
    MOV.W R2, R3,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR W3, [R7]
    LDR.W R4, [R10]
    MOVS R1, #4
    CMP.W R3, R4
    IT 
    ADDGE.W R4, R3, #1
    MOV R0, R4
    BL sub_193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR W4, [R7]
    LDR.W R5, [R5]
    LDR.W R4, [R5,R5,LSL#2]
    MOV.W R6, R5,LSL#2
    STR W6, [SP,#0x60+var_2C]
    CMP W4, #0
    BEQ.W loc_20690
loc_20406:
    MOVS R1, #4
    MOV R0, R5
    BL sub_193B8
    CMP.W R5, #0
    IT 
    SUBGE.W R5, R5, #1
    MOV R0, R5
    BL sub_193B8
    MOV.W R2, R5,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR W5, [R7]
    LDR.W R4, [R10]
    MOVS R1, #4
    CMP.W R5, R4
    IT 
    ADDGE.W R4, R5, #1
    MOV R0, R4
    BL sub_193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR W4, [R7]
    LDR.W R6, [R5]
    LDR.W R4, [R5,R6,LSL#2]
    MOV.W R7, R6,LSL#2
    STR W7, [SP,#0x60+var_28]
    CMP W4, #0
    BEQ.W loc_2066C
loc_20456:
    MOVS R1, #4
    MOV R0, R6
    BL sub_193B8
    CMP.W R6, #0
    IT 
    SUBGE.W R6, R6, #1
    MOV R0, R6
    BL sub_193B8
    MOV.W R2, R6,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR W6, [R7]
    LDR.W R4, [R10]
    MOVS R1, #4
    CMP.W R6, R4
    IT 
    ADDGE.W R4, R6, #1
    MOV R0, R4
    BL sub_193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR W4, [R7]
    LDR.W R7, [R5]
    LDR.W R4, [R5,R7,LSL#2]
    MOV.W R8
############
```assembly
loc_1BC50:
    BIC.W R3, R2, #8
    CMP R3, #0x10
    IT 
    CMPNE R2, #0x20
    PUSH.W {R4-R11,LR}
    IT 
    MOVNE R3, #1
    SUB SP, SP, #0x14
    IT 
    MOVEQ R3, #0
    BNE.W loc_1BF60
loc_1BC6C:
    ADDS R7, R2, #3
    MOV R5, R1
    BICS.W R2, R2, R2,ASR#32
    IT 
    MOVCS R2, R7
    MOV R1, #0x19A85
    STR.W R1, [R0,#0x3C0]
    ASRS R7, R2, #2
    MOV R8, R0
    CMP R7, #4
    MOVW R9, #0xC078
    MOV R2, R7
    MOVT.W R9, #3
    IT 
    MOVLT R2, #4
    ADD.W R11, R2, #7
    ADD.W R10, R2, #6
    STR R2, [SP,#0x38+var_38]
    MOV.W R1, R11,LSL#2
    SUB.W R2, R0, R7,LSL#2
    STR.W R10, [R0,#0x3EC]
    MOV R4, R3
    MOV R0, R1
    MOV R3, #0x1A6FD
    STR.W R3, [R8,#0x3C4]
    MOVS R3, #1
    MOVS R1, #4
    SUB.W R6, R8, #4
    STR.W R1, [R8,#0x3E8]
    STR.W R10, [SP,#0x38+var_34]
    MOV R10, R3
    STR.W R8, [SP,#0x38+var_30]
    MOV R8, R0
    STR.W R11, [SP,#0x38+var_2C]
    MOV R11, R9
    MOV R9, R2
    B loc_1BD0C
loc_1BCE0:
    LDRB R0, [R5,#1]
    ADDS R4, #1
    LDRB.W R12, [R5]
    CMP R4, R8
    LDRB R1, [R5,#3]
    ADD.W R6, R6, #4
    LDRB.W LR, [R5,#2]
    MOV.W R0, R0,LSL#16
    ORR.W R0, R0, R12,LSL#24
    ADD.W R5, R5, #4
    ORR.W R1, R1, R0
    ORR.W R1, R1, LR,LSL#8
    STR R1, [R6]
    BEQ loc_1BD78
loc_1BD0C:
    CMP R7, R4
    BGT loc_1BCE0
loc_1BD10:
    MOV R1, R7
    MOV R0, R4
    BL sub_389DC
    LDR R3, [R6]
    CMP R1, #0
    BEQ.W loc_1BF0E
loc_1BD20:
    SUB.W R1, R1, #4
    CMP R7, #6
    CLZ.W R1, R1
    MOV.W R1, R1,LSR#5
    IT 
    MOVLE R1, #0
    CBZ R1, loc_1BD64
loc_1BD34:
    UBFX.W R0, R3, #0x10, #8
    ADD.W R12, R11, R3,LSR#24
    ADD R0, R11
    UBFX.W R1, R3, #8, #8
    LDRB.W R12, [R12,#-0xF8]
    ADD R1, R11
    LDRB.W R0, [R0,#-0xF8]
    UXTAB.W LR, R11, R3
    LDRB.W R1, [R1,#-0xF8]
    ORR.W R0, R0, R12,LSL#8
    LDRB.W LR, [LR,#-0xF8]
    ORR.W R1, R1, R0,LSL#8
    ORR.W R3, LR, R1,LSL#8
loc_1BD64:
    LDR.W R1, [R9,R4,LSL#2]
    EORS R1, R3
    STR R1, [R6,#4]
loc_1BD6C:
    ADDS R4, #1
    ADDS R5, #4
    CMP R4, R8
    ADD.W R6, R6, #4
    BNE loc_1BD0C
loc_1BD78:
    LDR R3, [SP,#0x38+var_38]
    MOVS R6, #3
    LDR.W R8, [SP,#0x38+var_30]
    MOVS R4, #0
    LDR.W R10, [SP,#0x38+var_34]
    LDR.W R11, [SP,#0x38+var_2C]
    ADD.W R1, R8, R3,LSL#4
    MOV R3, #0x3C078
    MOV R0, R8
loc_1BD98:
    LDR R2, [R1,#0x60]
    CMP R4, #0
    BEQ.W loc_1BF7A
loc_1BDA0:
    CMP R10, R4
    BEQ.W loc_1BF90
loc_1BDA6:
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R7, R3, R2
    UBFX.W R5, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD R5, R3
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD R2, R3
    LDRB.W R12, [R5,#-0xF8]
    MOV R5, R6
    LDRB.W R2, [R2,#-0xF8]
    ADD.W R9, R3, R7,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R12, R3, R12,LSL#2
    LDR.W R7, [LR,#8]
    LDR.W LR, [R9,#0x408]
    ADD.W R9, R3, R2,LSL#2
    LDR.W R2, [R12,#0x808]
    EOR.W R7, LR, R7
    LDR.W LR, [R9,#0xC08]
    EORS R2, R7
    EOR.W R2, LR, R2
    STR.W R2, [R0,#0x1E0]
    LDR R2, [R1,#0x64]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W LR, R2, #8, #8
    ADD.W R7, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD LR, R3
    LDRB.W R12, [R2,#-0xF8]
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD.W R12, R3, R12,LSL#2
    ADD.W R7, R3, R7,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R12, [R12,#0x408]
    LDR R7, [R7,#8]
    ADD.W LR, R3, LR,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W R7, R12, R7
    LDR.W LR, [LR,#0xC08]
    EORS R2, R7
    EOR.W R2, LR, R2
    STR.W R2, [R0,#0x1E4]
    LDR R2, [R1,#0x68]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W LR, R2, #8, #8
    ADD.W R7, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD LR, R3
    LDRB.W R12, [R2,#-0xF8]
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD.W R12, R3, R12,LSL#2
    ADD.W R7, R3, R7,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R12, [R12,#0x408]
    LDR R7, [R7,#8]
    ADD.W LR, R3, LR,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W R7, R12, R7
    LDR.W LR, [LR,#0xC08]
    EORS R2, R7
    EOR.W R2, LR, R2
    STR.W R2, [R0,#0x1E8]
    LDR R2, [R1,#0x6C]
    UBFX.W R7, R2, #8, #8
    UBFX.W R9, R2, #0x10, #8
    ADD R7, R3
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD.W R7, R3, R7,LSL#2
    ADD.W LR, R3, LR,LSL#2
    LDR.W R7, [R7,#0xC08]
    LDRB.W R12, [R2,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R12, [R12,#0x408]
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R12, LR
    EOR.W R2, LR, R2
    EORS R2, R7
loc_1BEEE:
    ADDS R4, #1
    ADDS R5, #0x78
    CMP R4, R11
    SUB.W R1, R1, #0x10
    ADD.W R6, R6, #4
    STR.W R2, [R8,R5,LSL#2]
    ADD.W R0, R0, #0x10
    BNE.W loc_1BD98
loc_1BF08:
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_1BF0E:
    UBFX.W R1, R3, #0x10, #8
    UBFX.W R0, R3, #8, #8
    ADD R1, R11
    ADD R0, R11
    UXTAB.W R12, R11, R3
    ADD.W LR, R11, R3,LSR#24
    LDRB.W R1, [R1,#-0xF8]
    LDRB.W R0, [R0,#-0xF8]
    EOR.W R1, R1, R10
    LDRB.W R12, [R12,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ORR.W R0, R0, R1,LSL#8
    MOV.W R1, R10,LSL#1
    ANDS.W R10, R10, #0x80
    UXTB R1, R1
    ORR.W R0, R12, R0,LSL#8
    IT 
    MOVNE.W R10, #0x1B
    EOR.W R10, R1, R10
    LDR.W R1, [R9,R4,LSL#2]
    ORR.W R3, LR, R0,LSL#8
    EORS R1, R3
    STR R1, [R6,#4]
    B loc_1BD6C
loc_1BF60:
    MOVW R1, #0xD380
    MOVW R0, #0xD39C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aAesSetup
    MOVW R2, #0x3A7
    BLX __assert_fail
loc_1BF7A:
    STR.W R2, [R8,#0x1E0]
    MOVS R5, #3
    LDR R2, [R1,#0x64]
    STR.W R2, [R8,#0x1E4]
    LDR R2, [R1,#0x68]
    STR.W R2, [R8,#0x1E8]
    LDR R2, [R1,#0x6C]
    B loc_1BEEE
loc_1BF90:
    STR.W R2, [R0,#0x1E0]
    MOV R5, R6
    LDR R2, [R1,#0x64]
    STR.W R2, [R0,#0x1E4]
    LDR R2, [R1,#0x68]
    STR.W R2, [R0,#0x1E8]
    LDR R2, [R1,#0x6C]
    B loc_1BEEE
loc_1BFB0:
    MOVS R2, #0x10
    B loc_1BC50
```
Output:0xF8]
    ORR.W R5, R5, R7,LSL#8
    ORR.W R5, R5, LR,LSL#8
    ORR.W R2, R2, R12,LSL#8
    ORR.W R5, R5, R2,LSL#8
    STR W5, [R10,#4]
    ADDS R4, #1
    ADDS R10, #4
    BNE loc_1BDA0
loc_1BF0E:
    LDR R3, [SP,#0x38+var_38]
    LDR.W R8, [SP,#0x38+var_30]
    LDR.W R10, [SP,#0x38+var_34]
    LDR.W R11, [SP,#0x38+var_2C]
    ADD.W R1, R8, R3,LSL#4
    MOV R3, #0x3C078
    MOV R0, R8
loc_1BF24:
    LDR R2, [R1,#0x60]
    CMP R4, #0
    BEQ.W loc_1BF7A
loc_1BF2C:
    CMP R10, R4
    BEQ.W loc_1BF90
loc_1BF32:
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R7, R3, R2
    UBFX.W R5, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD R5, R3
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD R2, R3
    LDRB.W R12, [R5,#-0xF8]
    MOV R5, R6
    LDRB.W R2, [R2,#-0xF8]
    ORR.W R5, R5, R7,LSL#8
    ORR.W R5, R5, LR,LSL#8
    ORR.W R2, R2, R12,LSL#8
    ORR.W R5, R5, R2,LSL#8
    STR W5, [R10,#4]
    ADDS R4, #1
    ADDS R10, #4
    BNE loc_1BF2C
loc_1BF7A:
    LDR R3, [SP,#0x38+var_38]
    LDR.W R8, [SP,#0x38+var_30]
    LDR.W R10, [SP,#0x38+var_34]
    LDR.W R11, [SP,#0x38+var_2C]
    ADD.W R1, R8, R3,LSL#4
    MOV R3, #0x3C078
    MOV R0, R8
loc_1BF90:
    LDR R2, [R1,#0x60]
    CMP R4, #0
    BEQ.W loc_1BF7A
loc_1BF98:
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R7, R3, R2
    UBFX.W R5, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD R5, R3
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD R2, R3
    LDRB.W R12, [R5,#-0xF8]
    MOV R5, R6
    LDRB.W R2, [R2,#-0xF8]
    ORR.W R5, R5, R7,LSL#8
    ORR.W R5, R5, LR,LSL#8
    ORR.W R2, R2, R12,LSL#8
    ORR.W R5, R5, R2,LSL#8
    STR W5, [R10,#4]
    ADDS R4, #1
    ADDS R10, #4

############
```assembly
loc_11278:
    ADR R12, 0x11280
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__stack_chk_fail_ptr - 0x55280)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "magic-number:0x11280",
  "magic-number:0x44000",
  "magic-number:__stack_chk_fail_ptr",
  "magic-number:0x55280",
  "inferred-algorithm:security-check-or-protection",
  "inferred-algorithm:error-or-alternative-path"
]
```<|im_end|>
############
```assembly
loc_22278:

loc_22370:
    PUSH {R4}
    MOV R3, R1
    MOV R4, R2
    MOV R2, R0
    MOV R1, R4
    MOV R0, R3
    POP.W {R4}
    B sub_22278
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:unknown",
  "arg2-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_22278)",
  "integer-size-hint:32-bit",
  "register-swapping-between-arguments",
  "inferred-algorithm:loop-without-loop-counter",
  "inferred-algorithm:recursive-or-indirect-call"
]
```<|im_end|>
############
```assembly
loc_5685C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_5695C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2AE54:
    PUSH.W {R4-R11,LR}
    MOV R7, #0x56190
    SUB SP, SP, #0x124
    MOV R4, R0
    MOV R10, R2
    LDR R3, [R7]
    MOV R9, R1
    STR R3, [SP,#0x148+var_2C]
    CMP R1, #0
    BEQ.W loc_2AF8E
loc_2AE72:
    MOV R0, R1
    BLX strlen
    STR R0, [SP,#0x148+var_13C]
loc_2AE7A:
    MOV R0, R4
    MOVW R1, #0x32EC
    MOVS R2, #0
    MOVT.W R1, #4
    BL sub_3694C
    MOV R4, R0
    CMP R0, #0
    BEQ loc_2AF20
loc_2AE90:
    ADD.W R6, SP, #0x148+var_59
    MOVW R5, #0x4801
    ADD.W R8, SP, #0x148+s1
    B loc_2AEAA
loc_2AE9E:
    CMP R0, #0x3A
    BEQ loc_2AF32
loc_2AEA2:
    CMP R8, R6
    BEQ loc_2AEBE
loc_2AEA6:
    STRB.W R0, [R8],#1
loc_2AEAA:
    MOV R0, R4
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2AE9E
loc_2AEB6:
    LSR.W R3, R5, R3
    LSLS R3, R3, #0x1F
    BPL loc_2AEA2
loc_2AEBE:
    MOV.W R9, #0
    MOV R5, R9
loc_2AEC4:
    MOV R0, R4
    MOV R4, R5
    BLX fclose
    CBZ R5, loc_2AF04
loc_2AECE:
    MOVS R4, #0
    MOV R6, R4
    MOV R11, R4
    MOV R8, R4
loc_2AED6:
    MOV R0, R5
    BL sub_19494
    CMP.W R11, #0
    BEQ loc_2AEE8
loc_2AEE2:
    MOV R0, R11
    BL sub_19494
loc_2AEE8:
    CMP.W R8, #0
    BEQ loc_2AEF4
loc_2AEEE:
    MOV R0, R8
    BL sub_19494
loc_2AEF4:
    CBZ R6, loc_2AF04
loc_2AEF6:
    MOV R0, R6
    LDR R1, [SP,#0x148+var_10C]
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
loc_2AF04:
    CMP.W R10, #0
    BEQ loc_2AF2E
loc_2AF0A:
    MOV R0, R4
    STR.W R9, [R10]
loc_2AF10:
    LDR R2, [SP,#0x148+var_2C]
    LDR R3, [R7]
    CMP R2, R3
    BNE.W loc_2B25E
loc_2AF1A:
    ADD SP, SP, #0x124
    POP.W {R4-R11,PC}
loc_2AF20:
    MOV R9, #0x432F0
    CMP.W R10, #0
    BNE loc_2AF0A
loc_2AF2E:
    MOV R0, R4
    B loc_2AF10
loc_2AF32:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2AEBE
loc_2AF3C:
    MOVW R1, #0x347C
    MOVS R5, #0
    MOVT.W R1, #4
    ADD R0, SP, #0x148+s1
    STRB.W R5, [R8]
    BLX strcmp
    CBZ R0, loc_2AF92
loc_2AF52:
    MOVW R1, #0x3494
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_2B068
loc_2AF66:
    ADD R0, SP, #0x148+s1
    MOVW R1, #0x33C4
    MOVS R2, #0x14
    MOVT.W R1, #4
    BLX strncmp
    MOVW R9, #0x3440
    MOVW R3, #0x345C
    MOVT.W R9, #4
    MOVT.W R3, #4
    CMP R0, #0
    IT 
    MOVNE R9, R3
    B loc_2AEC4
loc_2AF8E:
    STR R1, [SP,#0x148+var_13C]
    B loc_2AE7A
loc_2AF92:
    STR R0, [SP,#0x148+s2]
    STR R0, [SP,#0x148+var_134]
loc_2AF96:
    MOVS R1, #1
    MOVS R0, #0x80
    BL sub_193B8
    MOVS R2, #0
    MOV.W R8, #0x80
    MOV R6, R2
    MOV R11, R0
    STRB R2, [R0]
    B loc_2AFBC
loc_2AFAC:
    ADD.W R3, R11, R6
    STRB.W R5, [R3,#-1]
    MOV.W R3, #0
    STRB.W R3, [R11,R6]
loc_2AFBC:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xA
    IT 
    CMPNE R0, #0xD
    MOV R5, R0
    BEQ loc_2AFE8
loc_2AFCC:
    ADDS R0, #1
    BEQ loc_2B000
loc_2AFD0:
    ADDS R6, #1
    CMP R6, R8
    BLT loc_2AFAC
loc_2AFD6:
    ADD.W R8, R8, #0x80
    MOV R0, R11
    MOVS R2, #1
    MOV R1, R8
    BL sub_19420
    MOV R11, R0
    B loc_2AFAC
loc_2AFE8:
    ADDS R5, R0, #1
    BEQ loc_2B000
loc_2AFEC:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xD
    IT 
    CMPNE R0, #0xA
    BEQ loc_2B000
loc_2AFFA:
    MOV R1, R4
    BLX ungetc
loc_2B000:
    CMP.W R11, #0
    BEQ loc_2B05C
loc_2B006:
    MOV R0, R11
    BLX strlen
    MOVW R2, #0xA724
    MOV R1, R11
    MOVT.W R2, #3
    MOV R5, R0
    BL sub_19870
    CBZ R0, loc_2B076
loc_2B01E:
    MOV R3, #0x43AC8
    STR R3, [SP,#0x148+var_12C]
loc_2B028:
    MOV R0, R11
    ADD.W R8, SP, #0x148+s1
    BL sub_19494
    MOVW R5, #0x4801
    ADD.W R6, SP, #0x148+var_59
    B loc_2B048
loc_2B03C:
    CMP R0, #0x3A
    BEQ loc_2B096
loc_2B040:
    CMP R8, R6
    BEQ loc_2B05C
loc_2B044:
    STRB.W R0, [R8],#1
loc_2B048:
    MOV R0, R4
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2B03C
loc_2B054:
    LSR.W R3, R5, R3
    LSLS R1, R3, #0x1F
    BPL loc_2B040
loc_2B05C:
    MOVW R9, #0x32A8
    MOVS R5, #0
    MOVT.W R9, #4
    B loc_2AEC4
loc_2B068:
    MOVS R3, #1
    STR R3, [SP,#0x148+s2]
    MOV R5, R3
    BL sub_3614C
    STR R5, [SP,#0x148+var_134]
    B loc_2AF96
loc_2B076:
    MOVW R2, #0xA710
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CMP R0, #0
    BEQ loc_2B10C
loc_2B08A:
    MOV R3, #0x3F520
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B096:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2B05C
loc_2B0A0:
    MOVS R3, #0
    MOVW R1, #0x34AC
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    STRB.W R3, [R8]
    BLX strcmp
    MOV R6, R0
    CMP R0, #0
    BNE loc_2B05C
loc_2B0BA:
    MOVS R1, #1
    MOVS R0, #0x80
    BL sub_193B8
    MOV R11, R6
    MOV.W R8, #0x80
    MOV R5, R0
    STRB R6, [R0]
    B loc_2B0DE
loc_2B0CE:
    ADD.W R3, R5, R11
    STRB.W R6, [R3,#-1]
    MOV.W R3, #0
    STRB.W R3, [R5,R11]
loc_2B0DE:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xA
    IT 
    CMPNE R0, #0xD
    MOV R6, R0
    BEQ loc_2B12C
loc_2B0EE:
    ADDS R2, R0, #1
    BEQ loc_2B144
loc_2B0F2:
    ADD.W R11, R11, #1
    CMP R11, R8
    BLT loc_2B0CE
loc_2B0FA:
    ADD.W R8, R8, #0x80
    MOV R0, R5
    MOVS R2, #1
    MOV R1, R8
    BL sub_19420
    MOV R5, R0
    B loc_2B0CE
loc_2B10C:
    MOVW R2, #0xFE3C
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CMP R0, #0
    BEQ loc_2B1A6
loc_2B120:
    MOV R3, #0x3FB34
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B12C:
    ADDS R6, R0, #1
    BEQ loc_2B144
loc_2B130:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0xD
    IT 
    CMPNE R0, #0xA
    BEQ loc_2B144
loc_2B13E:
    MOV R1, R4
    BLX ungetc
loc_2B144:
    CMP R5, #0
    BEQ loc_2B05C
loc_2B148:
    MOVW R1, #0xA58C
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBZ R0, loc_2B1C4
loc_2B158:
    MOVW R1, #0xA584
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_2B19C
loc_2B168:
    MOVS R3, #1
    STR R0, [SP,#0x148+var_128]
    STR R3, [SP,#0x148+var_124]
loc_2B16E:
    ADD.W R8, SP, #0x148+var_59
    ADD.W R11, SP, #0x148+s1
    MOVW R6, #0x4801
    B loc_2B188
loc_2B17C:
    CMP R0, #0x3A
    BEQ loc_2B1EE
loc_2B180:
    CMP R11, R8
    BEQ loc_2B19C
loc_2B184:
    STRB.W R0, [R11],#1
loc_2B188:
    MOV R0, R4
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2B17C
loc_2B194:
    LSR.W R3, R6, R3
    LSLS R3, R3, #0x1F
    BPL loc_2B180
loc_2B19C:
    MOV R9, #0x432A8
    B loc_2AEC4
loc_2B1A6:
    MOVW R2, #0xFE28
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CBZ R0, loc_2B1CE
loc_2B1B8:
    MOV R3, #0x3FB70
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B1C4:
    MOVS R3, #0x10
    STR R3, [SP,#0x148+var_124]
    MOVS R3, #1
    STR R3, [SP,#0x148+var_128]
    B loc_2B16E
loc_2B1CE:
    MOVW R2, #0xFE14
    MOV R1, R11
    MOVT.W R2, #3
    MOV R0, R5
    BL sub_19870
    CMP R0, #0
    BEQ loc_2B262
loc_2B1E2:
    MOV R3, #0x3FBAC
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B1EE:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2B19C
loc_2B1F8:
    MOVS R3, #0
    MOVW R1, #0xA63C
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #3
    STRB.W R3, [R11]
    BLX strcmp
    MOV R6, R0
    CMP R0, #0
    BNE loc_2B19C
loc_2B212:
    MOV R0, R4
    BL sub_2A55C
    STR R0, [SP,#0x148+s]
    CMP R0, #0
    BEQ loc_2B19C
loc_2B21E:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_2A438
    CBZ R0, loc_2B258
loc_2B228:
    MOVW R1, #0x34B8
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    MOV R8, R0
    CBZ R0, loc_2B292
loc_2B23A:
    MOV R8, R6
loc_2B23C:
    MOV R0, R4
    MOV.W R11, #0
    BLX fclose
    MOV R9, #0x432A8
    MOV R4, R11
loc_2B250:
    LDR R0, [SP,#0x148+s]
    BL sub_19494
    B loc_2AED6
loc_2B258:
    MOV R6, R0
    MOV R8, R0
    B loc_2B23C
loc_2B25E:
    BLX __stack_chk_fail
loc_2B262:
    MOV R0, R5
    MOVW R2, #0xFE50
    MOV R1, R11
    MOVT.W R2, #3
    BL sub_19870
    MOV R5, R0
    CBZ R0, loc_2B282
loc_2B276:
    MOV R3, #0x3FBE8
    STR R3, [SP,#0x148+var_12C]
    B loc_2B028
loc_2B282:
    MOV R0, R11
    MOVW R9, #0x32A8
    BL sub_19494
loc_2B292:
    MOV R0, R4
    BL sub_2A55C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_2B23A
loc_2B29E:
    MOV R1, R8
    MOVS R2, #0xA
    BLX strtol
    MOV R8, R0
    MOV R0, R6
    BL sub_19494
    MOV R1, R8
    ADD R2, SP, #0x148+var_110
    MOV R0, R4
    BL sub_1160C
    MOV R8, R0
    CBZ R0, loc_2B2DC
loc_2B2BC:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_2A438
    CBZ R0, loc_2B2D8
loc_2B2C6:
    MOVW R1, #0x34C8
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    STR R0, [SP,#0x148+endptr]
    CBZ R0, loc_2B2E0
loc_2B2D8:
    MOVS R6, #0
    B loc_2B23C
loc_2B2DC:
    MOV R6, R0
    B loc_2B23C
loc_2B2E0:
    MOV R0, R4
    BL sub_2A55C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_2B23C
loc_2B2EC:
    MOVS R2, #0xA
    LDR R1, [SP,#0x148+endptr]
    BLX strtol
    MOV R11, R0
    MOV R0, R6
    BL sub_19494
    MOV R1, R11
    ADD R2, SP, #0x148+var_10C
    MOV R0, R4
    BL sub_1160C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_2B23C
loc_2B30C:
    ADD R1, SP, #0x148+s1
    MOV R0, R4
    BL sub_2A438
    CMP R0, #0
    BEQ loc_2B23C
loc_2B318:
    MOVW R1, #0x34D8
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_2B582
loc_2B32C:
    MOVW R1, #0x34E4
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BNE.W loc_2B23C
loc_2B340:
    LDR R3, [SP,#0x148+s2]
    CMP R3, #0
    BEQ.W loc_2B23C
loc_2B348:
    MOV R0, R4
    BL sub_2A55C
    MOV R11, R0
    CMP R0, #0
    BEQ.W loc_2B23C
loc_2B356:
    MOV R0, R4
    BLX fclose
    LDR R3, [SP,#0x148+var_128]
    CMP R3, #0
    BNE.W loc_2B472
loc_2B364:
    ADD R3, SP, #0x148+var_58
    STR R3, [SP,#0x148+s2]
loc_2B368:
    LDR R3, [SP,#0x148+var_134]
    CMP R3, #0
    BEQ.W loc_2B492
loc_2B370:
    LDR R3, [SP,#0x148+var_10C]
    STR R6, [SP,#0x148+var_134]
    STR R3, [SP,#0x148+var_124]
    MOVS R3, #0
    STR R3, [SP,#0x148+var_11C]
loc_2B37A:
    LDR R3, [SP,#0x148+endptr]
    CMP R3, #0
    BEQ loc_2B462
loc_2B380:
    MOV LR, #0x434FC
    LDR R4, [SP,#0x148+s2]
    LDM.W LR!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W LR, {R0-R3}
    STM R4!, {R0-R2}
    ADD R0, SP, #0x148+var_108
    STRH.W R3, [R4],#2
    LSRS R3, R3, #0x10
    STRB R3, [R4]
    BL sub_32750
    ADD R0, SP, #0x148+var_108
    MOVS R2, #0x1E
    LDR R1, [SP,#0x148+s2]
    BL sub_3278C
    CMP.W R9, #0
    BEQ loc_2B3C2
loc_2B3B4:
    LDR R3, [SP,#0x148+var_128]
    CBZ R3, loc_2B3C2
loc_2B3B8:
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R9
    ADD R0, SP, #0x148+var_108
    BL sub_3278C
loc_2B3C2:
    ADD R0, SP, #0x148+var_108
    ADD R1, SP, #0x148+var_94
    BL sub_32BC0
    ADD.W R9, SP, #0x148+var_A8
    ADD R0, SP, #0x148+var_94
    LDR R3, [SP,#0x148+var_124]
    LDR R2, [SP,#0x148+var_134]
    MOVS R1, #0x14
    STR.W R9, [SP,#0x148+var_148]
    BL sub_33A4C
    ADD R0, SP, #0x148+var_94
    MOVS R1, #0x14
    BL sub_194E4
    ADD R0, SP, #0x148+var_108
    MOVS R1, #0x60
    BL sub_194E4
loc_2B3EE:
    LDR R3, [SP,#0x148+var_11C]
    CBZ R3, loc_2B402
loc_2B3F2:
    LDR R4, [SP,#0x148+var_134]
    LDR R1, [SP,#0x148+var_124]
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
loc_2B402:
    MOVS R4, #0
    MOV R3, #0x434F4
    STR R3, [SP,#0x148+var_13C]
loc_2B40E:
    LDRB.W LR, [R9,R4]
    MOVS R1, #1
    LDR R0, [SP,#0x148+s2]
    MOV.W R2, #0xFFFFFFFF
    LDR R3, [SP,#0x148+var_13C]
    ADD.W R0, R0, R4,LSL#1
    STR.W LR, [SP,#0x148+var_148]
    ADD R4, R1
    BLX __sprintf_chk
    CMP R4, #0x14
    BNE loc_2B40E
loc_2B42E:
    LDR R1, [SP,#0x148+s2]
    MOV R0, R11
    BLX strcmp
    MOV R9, R0
    CMP R0, #0
    BEQ.W loc_2B5EC
loc_2B43E:
    LDR R3, [SP,#0x148+var_128]
    MOVW R9, #0x9640
    MOVW R4, #0x62C0
    MOVT.W R9, #3
    CMP R3, #0
    MOV R3, #0x43420
    MOVT.W R4, #5
    ITT 
    MOVEQ R4, #0
    MOVEQ R9, R3
    B loc_2B250
loc_2B462:
    ADD.W R9, SP, #0x148+var_A8
    LDR R1, [SP,#0x148+var_124]
    LDR R0, [SP,#0x148+var_134]
    MOV R2, R9
    BL sub_338F8
    B loc_2B3EE
loc_2B472:
    CMP.W R9, #0
    BEQ loc_2B486
loc_2B478:
    LDR R1, [SP,#0x148+var_124]
    LDR R0, [SP,#0x148+var_10C]
    BL sub_389DC
    CMP R1, #0
    BEQ.W loc_2B596
loc_2B486:
    MOVW R9, #0x32A8
    MOVS R4, #0
    MOVT.W R9, #4
    B loc_2B250
loc_2B492:
    LDR R3, [SP,#0x148+var_12C]
    MOVS R2, #1
    STR R2, [SP,#0x148+var_11C]
    LDR R0, [R3,#0x30]
    BLX strlen
    MOV R4, R0
    MOV R0, R5
    BLX strlen
    STR R0, [SP,#0x148+var_134]
    LDR R0, [SP,#0x148+s]
    BLX strlen
    LDR R3, [SP,#0x148+var_134]
    LDR R2, [SP,#0x148+var_110]
    ADDS R1, R4, R3
    STR R3, [SP,#0x148+n]
    ADD R1, R0
    STR R0, [SP,#0x148+var_118]
    ADD R2, R1
    LDR R0, [SP,#0x148+var_10C]
    ADDS R2, #0x14
    MOVS R1, #1
    ADD R2, R0
    STR R2, [SP,#0x148+var_124]
    MOV R0, R2
    BL sub_193B8
    ASRS R1, R4, #0x18
    ASRS R2, R4, #0x10
    STRB R1, [R0]
    ASRS R1, R4, #8
    STRB R1, [R0,#2]
    LDR R1, [SP,#0x148+var_12C]
    STRB R4, [R0,#3]
    STRB R2, [R0,#1]
    MOV R2, R4
    STR R0, [SP,#0x148+var_134]
    ADDS R0, #4
    LDR R1, [R1,#0x30]
    BLX memcpy
    LDR R0, [SP,#0x148+var_134]
    LDR R3, [SP,#0x148+n]
    ADDS R2, R4, #4
    ADDS R4, R0, R2
    MOV.W R12, R3,ASR#24
    ASRS R1, R3, #0x10
    STRB.W R12, [R0,R2]
    ASRS R2, R3, #8
    STRB R3, [R4,#3]
    ADDS R0, R4, #4
    STRB R1, [R4,#1]
    MOV R1, R5
    STRB R2, [R4,#2]
    MOV R2, R3
    BLX memcpy
    LDR R3, [SP,#0x148+n]
    LDR R0, [SP,#0x148+var_118]
    ADDS R2, R3, #4
    ADDS R3, R4, R2
    STR R3, [SP,#0x148+var_118]
    ASRS R1, R0, #0x18
    STRB R1, [R4,R2]
    MOV R4, R0
    ASRS R1, R0, #0x10
    STRB R0, [R3,#3]
    ASRS R2, R0, #8
    STRB R1, [R3,#1]
    ADDS R0, R3, #4
    STRB R2, [R3,#2]
    MOV R2, R4
    LDR R1, [SP,#0x148+s]
    BLX memcpy
    LDRSB.W R0, [SP,#0x148+var_110+3]
    LDR R3, [SP,#0x148+var_118]
    ADDS R2, R4, #4
    MOV R1, R8
    ADDS R4, R3, R2
    STRB R0, [R3,R2]
    ADDS R0, R4, #4
    LDRSH.W R3, [SP,#0x148+var_110+2]
    STRB R3, [R4,#1]
    LDR R3, [SP,#0x148+var_110]
    ASRS R3, R3, #8
    STRB R3, [R4,#2]
    LDR R3, [SP,#0x148+var_110]
    STRB R3, [R4,#3]
    LDR R3, [SP,#0x148+var_110]
    MOV R2, R3
    STR R3, [SP,#0x148+var_118]
    BLX memcpy
    LDR R3, [SP,#0x148+var_118]
    LDRSB.W R2, [SP,#0x148+var_10C+3]
    MOV R1, R6
    ADDS R0, R3, #4
    ADDS R3, R4, R0
    STRB R2, [R4,R0]
    ADDS R0, R3, #4
    LDRSH.W R2, [SP,#0x148+var_10C+2]
    STRB R2, [R3,#1]
    LDR R2, [SP,#0x148+var_10C]
    ASRS R2, R2, #8
    STRB R2, [R3,#2]
    LDR R2, [SP,#0x148+var_10C]
    STRB R2, [R3,#3]
    LDR R2, [SP,#0x148+var_10C]
    BLX memcpy
    B loc_2B37A
loc_2B582:
    MOV R0, R4
    BL sub_2A55C
    MOV R11, R0
    CMP R0, #0
    BEQ.W loc_2B23C
loc_2B590:
    MOVS R3, #1
    STR R3, [SP,#0x148+endptr]
    B loc_2B356
loc_2B596:
    ADD R3, SP, #0x148+var_58
    ADD R0, SP, #0x148+var_108
    STR R3, [SP,#0x148+s2]
    MOV R4, R3
    BL sub_32750
    ADD R0, SP, #0x148+var_108
    MOVS R2, #4
    LDR R1, =unk_43220
    BL sub_3278C
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R9
    ADD R0, SP, #0x148+var_108
    BL sub_3278C
    MOV R1, R4
    ADD R0, SP, #0x148+var_108
    BL sub_32BC0
    ADD R0, SP, #0x148+var_108
    BL sub_32750
    ADD R0, SP, #0x148+var_108
    MOVS R2, #4
    LDR R1, =unk_43228
    BL sub_3278C
    LDR R2, [SP,#0x148+var_13C]
    MOV R1, R9
    ADD R0, SP, #0x148+var_108
    BL sub_3278C
    ADD R0, SP, #0x148+var_108
    ADD R1, SP, #0x148+var_44
    BL sub_32BC0
    MOV R0, R4
    LDR R2, [SP,#0x148+var_10C]
    MOV R1, R6
    BL sub_1C004
    B loc_2B368
loc_2B5EC:
    MOV R0, R11
    BL sub_19494
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    LDR R4, [SP,#0x148+var_12C]
    LDR.W LR, [SP,#0x148+var_10C]
    MOV R3, R6
    LDR R1, [SP,#0x148+s]
    MOV R2, R0
    MOV R0, R4
    STR R1, [R2,#8]
    MOV R1, R8
    STR R4, [R2]
    STR R2, [SP,#0x148+var_13C]
    STR.W LR, [SP,#0x148+var_148]
    LDR R2, [SP,#0x148+var_110]
    LDR.W R11, [R4,#0x14]
    BLX R11
    LDR R2, [SP,#0x148+var_13C]
    MOV R3, R0
    STR R0, [R2,#4]
    CBZ R0, loc_2B64C
loc_2B624:
    MOV R0, R8
    BL sub_19494
    LDR R1, [SP,#0x148+var_10C]
    MOV R0, R6
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
    MOV R0, R5
    BL sub_19494
    CMP.W R10, #0
    BEQ loc_2B660
loc_2B644:
    STR.W R9, [R10]
    LDR R0, [SP,#0x148+var_13C]
    B loc_2AF10
loc_2B64C:
    MOV R11, R3
    MOV R0, R2
    MOVW R9, #0x342C
    BL sub_19494
    MOV R4, R11
    MOVT.W R9, #4
    B loc_2B250
loc_2B660:
    LDR R0, [SP,#0x148+var_13C]
    B loc_2AF10
loc_2B28C:

```
Output:0, #0x20
    BNE loc_2AFAC
loc_2AFC6:
    MOVW R1, #0x3494
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_2B068
loc_2AFDA:
    ADD R0, SP, #0x148+s1
    MOVW R1, #0x33C4
    MOVS R2, #0x14
    MOVT.W R1, #4
    BLX strncmp
    MOVW R9, #0x3440
    MOVW R3, #0x345C
    MOVT.W R9, #4
    MOVT.W R3, #4
    CMP R0, #0
    IT 
    MOVNE R9, R3
    B loc_2AEC4
loc_2B068:
    MOV R0, R4
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2AEC4
loc_2B072:
    MOVW R1, #0x33C4
    ADD R0, SP, #0x148+s1
    MOVT.W R1, #4
    BLX strncmp
    MOVW R9, #0x3440
    MOVW R3, #0x345C
    MOVT.W R9, #4
    MOVT.W R3, #4
    CMP R0, #0
    IT 
    MOVNE R9, R3
    B loc_2AEC4
loc_2B25E:
    ADD SP, SP, #0x124
    POP.W {R4-R11,PC}
```
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
3
<|im_start|>
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
############
```assembly
loc_36E60:
    PUSH {R3-R7,LR}
    CMP R0, #0
    BEQ loc_36F14
loc_36E66:
    LDRB R3, [R0]
    MOV R5, R0
    CMP R3, #0
    BEQ loc_36F08
loc_36E6E:
    BLX strlen
    ADD.W R0, R0, R0,LSL#1
    ADDS R0, #1
loc_36E78:
    MOVS R1, #1
    BL sub_193B8
    LDRB R2, [R5]
    CMP R2, #0
    BEQ loc_36F20
loc_36E84:
    MOVW R7, #0x5398
    MOV R4, R0
    MOVT.W R7, #4
    MOVW R6, #0x7FED
    MOV.W LR, #0x25
    B loc_36EC0
loc_36E98:
    CMP.W R12, #0x19
    BLS loc_36EF6
loc_36E9E:
    STRB.W LR, [R4]
    ADDS R4, #3
    LDRB R3, [R5]
    LSRS R3, R3, #4
    LDRB R3, [R7,R3]
    STRB.W R3, [R4,#-2]
    LDRB R3, [R5]
    AND.W R3, R3, #0xF
    LDRB R3, [R7,R3]
    STRB.W R3, [R4,#-1]
    LDRB.W R2, [R5,#1]!
    CBZ R2, loc_36F02
loc_36EC0:
    SUB.W R3, R2, #0x2B
    MOVS R1, #1
    SUB.W R12, R2, #0x61
    UXTB R3, R3
    CMP R3, #0xE
    LSR.W R3, R6, R3
    AND.W R3, R3, R1
    IT 
    EORLS R1, R3
    SUB.W R3, R2, #0x40
    CMP R3, #0x1A
    ITE 
    MOVLS R1, #0
    ANDHI.W R1, R1, #1
    CMP R2, #0x5F
    ITE 
    MOVEQ R1, #0
    ANDNE.W R1, R1, #1
    CMP R1, #0
    BNE loc_36E98
loc_36EF6:
    STRB R2, [R4]
    ADDS R4, #1
    LDRB.W R2, [R5,#1]!
    CMP R2, #0
    BNE loc_36EC0
loc_36F02:
    MOVS R3, #0
    STRB R3, [R4]
    POP {R3-R7,PC}
loc_36F08:
    MOVW R5, #0x53C8
    MOVS R0, #0x31
    MOVT.W R5, #4
    B loc_36E78
loc_36F14:
    MOVW R5, #0x53C8
    MOVS R0, #0x31
    MOVT.W R5, #4
    B loc_36E78
loc_36F20:
    MOV R4, R0
    B loc_36F02
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x18",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "conditional-branching-on-loop-counter",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-AND",
  "byte-level-operations:bitwise-OR",
  "byte-level-operations:bitwise-NOT",
  "byte-level-operations:conditional-moves",
  "memory-read-from-input-parameter-offset:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:1",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "address-or-offset-constant:0x5398",
  "address-or-offset-constant:0x7FED",
  "address-or-offset-constant:0x53C8",
  "address-or-offset-constant:0x31",
  "inferred-algorithm:string-processing",
  "inferred-algorithm:character-mapping",
  "inferred-algorithm:conditional-data-processing",
  "inferred-algorithm:loop-with-conditionals"
]
```<|im_end|>
############
```assembly
loc_11380:
    ADR R12, 0x11388
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__ctype_tolower_loc_ptr - 0x55388)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:1",
  "arg0-type:integer",
  "calling-convention-hint:register-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__ctype_tolower_loc_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11388",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__ctype_tolower_loc_ptr",
  "inferred-algorithm:character-case-conversion",
  "inferred-algorithm:data-pointer-access"
]
```<|im_end|>
############
```assembly
loc_31EFC:
    PUSH.W {R4-R8,LR}
    MOV R7, #0x56190
    SUB SP, SP, #0x48
    MOV R4, R1
    ADD R1, SP, #0x60+var_5C
    LDR R3, [R7]
    MOV R8, R0
    ADD R6, SP, #0x60+var_5C
    STR R3, [SP,#0x60+var_1C]
    BL sub_31B84
    ADD.W LR, SP, #0x60+var_2C
loc_31F1E:
    MOV R5, R6
    ADDS R4, #0x10
    LDM R5!, {R0-R3}
    ADDS R6, #0x10
    CMP R5, LR
    STR.W R0, [R4,#-0x10]
    STR.W R1, [R4,#-0xC]
    STR.W R2, [R4,#-8]
    STR.W R3, [R4,#-4]
    BNE loc_31F1E
loc_31F3A:
    MOVS R1, #0xD4
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R2, [SP,#0x60+var_1C]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_31F56
loc_31F50:
    ADD SP, SP, #0x48
    POP.W {R4-R8,PC}
loc_31F56:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x48",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_31B84)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "external-call-type:specialized-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0xD4",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:sub_31B84",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-counter-increment",
  "inferred-algorithm:conditional-data-mutation",
  "inferred-algorithm:error-or-alternative-path"
]
```<|im_end|>
############
```assembly
loc_317F8:
    PUSH {R3-R7,LR}
    MOVS R1, #0xD4
    MOVS R0, #1
    LDR R6, =unk_44028
    BL sub_193B8
    ADD.W LR, R6, #0x40
    MOV R7, R0
    MOV R5, R0
loc_3180C:
    MOV R4, R6
    ADDS R5, #0x10
    LDM R4!, {R0-R3}
    ADDS R6, #0x10
    CMP R4, LR
    STR.W R0, [R5,#-0x10]
    STR.W R1, [R5,#-0xC]
    STR.W R2, [R5,#-8]
    STR.W R3, [R5,#-4]
    BNE loc_3180C
loc_31828:
    MOVS R3, #0
    MOV R0, R7
    STR.W R3, [R7,#0xC0]
    STR.W R3, [R7,#0xC4]
    STR.W R3, [R7,#0xC8]
    STR.W R3, [R7,#0xCC]
    STR.W R3, [R7,#0xD0]
    POP {R3-R7,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0xD4",
  "fixed-value-assignment:1",
  "address-or-offset-constant:unk_44028",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:0x40",
  "address-or-offset-constant:0x10",
  "address-or-offset-constant:0xC0",
  "address-or-offset-constant:0xC4",
  "address-or-offset-constant:0xC8",
  "address-or-offset-constant:0xCC",
  "address-or-offset-constant:0xD0",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:data-looping-with-increment",
  "inferred-algorithm:data-storage-with-offsets"
]
```<|im_end|>
############
```assembly
loc_568B4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1FC80:
    PUSH.W {R4-R8,LR}
    MOVW R3, #0xFFFE
    LDR R4, [R1]
    MOVT.W R3, #0x3FF
    LDR R2, [R0]
    CMP R4, R2
    IT 
    MOVLT R4, R2
    ADDS R7, R4, #1
    CMP R7, R3
    BHI loc_1FD12
loc_1FC9C:
    ADDS R4, #2
    MOV R5, R0
    MOV R6, R1
    MOVS R1, #4
    MOV R0, R4
    BL sub_193B8
    LSLS R2, R4, #2
    MOVS R1, #0
    MOV R8, R0
    BLX memset
    STR.W R7, [R8]
    CBZ R7, loc_1FD0E
loc_1FCBA:
    MOV.W LR, #0
    MOV R12, R8
    MOV R2, LR
    MOVS R3, #1
loc_1FCC4:
    LDR R1, [R5]
    LDR R7, [R6]
    CMP R1, R3
    MOV.W R1, #0
    ITE 
    LDRGE.W R0, [R5,R3,LSL#2]
    MOVLT R0, #0
    CMP R7, R3
    ITE 
    LDRGE.W R7, [R6,R3,LSL#2]
    MOVLT R7, #0
    ADDS.W R0, R0, LR
    ADC.W R1, R1, #0
    ADDS R0, R0, R7
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R2
    STR.W R0, [R12,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R4
    MOV LR, R1
    BNE loc_1FCC4
loc_1FD04:
    STR.W R2, [R8]
    MOV R0, R8
    POP.W {R4-R8,PC}
loc_1FD0E:
    MOV R2, R7
    B loc_1FD04
loc_1FD12:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-detection",
  "loop-counter-pattern:increment-by-1",
  "loop-limit-check:unsigned",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (memset)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_115CC)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "data-packing-serialization-patterns",
  "bitwise-operations:AND",
  "bitwise-operations:XOR",
  "bitwise-operations:ADD",
  "bitwise-operations:CMP",
  "magic-number:0xFFFE",
  "magic-number:0x3FF",
  "memory-access-with-offsets",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:loop-control-flow"
]
```<|im_end|>
############
```assembly
loc_2EC74:
    PUSH {R3-R7,LR}
    MOV R4, R0
    LDR R0, [R0,#8]
    MOV R7, R1
    BL sub_1F18C
    MOV R6, R0
    LDR R0, [R4,#0xC]
    BL sub_1F18C
    MOVS R1, #1
    ADD R0, R6
    ADDS R6, R0, #4
    MOV R0, R6
    BL sub_193B8
    MOV R5, R0
    LDR R0, [R4,#8]
    BL sub_1F158
    ASRS R0, R0, #0x18
    STRB R0, [R5]
    LDR R0, [R4,#8]
    BL sub_1F158
    ASRS R0, R0, #0x10
    STRB R0, [R5,#1]
    LDR R0, [R4,#8]
    BL sub_1F158
    ASRS R0, R0, #8
    STRB R0, [R5,#2]
    LDR R0, [R4,#8]
    BL sub_1F158
    STRB R0, [R5,#3]
    ADDS R0, R5, #4
    LDR R1, [R4,#0xC]
    BL sub_1F294
    LDR R1, [R4,#8]
    ADDS R0, #4
    ADD R0, R5
    BL sub_1F294
    STR R6, [R7]
    MOV R0, R5
    POP {R3-R7,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1F18C)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_1F158)",
  "external-call-type:unspecified-helper (sub_1F294)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shift-right",
  "status-flag-manipulation",
  "direct-memory-access",
  "inferred-algorithm:data-packing",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:byte-order-processing",
  "inferred-algorithm:loop-with-counter-pattern"
]
```<|im_end|>
############
```assembly
loc_340E0:
    CBZ R4, loc_34130
loc_340E2:
    LDR R3, [R4,#0x14]
    CMP R3, R8
    BGT.W loc_3423C
loc_340EA:
    ADDS R3, #1
    SUBS.W R8, R8, R3
    BMI.W loc_3431E
loc_340F4:
    LDR R3, [R4,#0x18]
    CMP R8, R3
    BLT.W loc_34304
loc_340FC:
    ADDS R3, #1
    SUBS.W R8, R8, R3
    BMI.W loc_34418
loc_34106:
    LDR R3, [R4,#0x1C]
    CMP R8, R3
    BLT.W loc_34342
loc_3410E:
    ADDS R3, #1
    SUBS.W R8, R8, R3
    BMI.W loc_34432
loc_34118:
    MOVS R7, #4
    MOVS R3, #2
    MOVS R5, #3
loc_3411E:
    ADD.W R6, R4, R5,LSL#2
    LDR R0, [R6,#4]
    LDR R2, [R0,#0x28]
    CMP R2, #0
    BEQ loc_34188
loc_3412A:
    MOV R4, R0
    CMP R4, #0
    BNE loc_340E2
loc_34130:
    CMP.W R11, #0
    BEQ.W loc_3432A
loc_34138:
    CMP.W R10, #0xFFFFFFFF
    BEQ.W loc_3433A
loc_34140:
    LDR R3, [R4]
    CMP R3, #0
    BEQ.W loc_3434A
loc_34148:
    LDR R2, [R4,#4]
    CMP R2, #0
    BEQ.W loc_343F2
loc_34150:
    ADD.W R5, R4, R10,LSL#2
    LDR R6, [R5,#4]
    LDR R3, [R6,#0x28]
    CMP R3, #0
    BEQ.W loc_343D2
loc_3415E:
    MOV R3, R6
loc_34160:
    LDR R1, [R3,#4]
    CBZ R1, loc_34174
loc_34164:
    LDR R2, [R3,#0x10]
    CMP R2, #0
    BEQ.W loc_3430C
loc_3416C:
    MOV R3, R2
    LDR R1, [R3,#4]
    CMP R1, #0
    BNE loc_34164
loc_34174:
    LDR R2, [R3,#0x2C]
    CMP R2, #0
    BEQ.W loc_34426
loc_3417C:
    LDR R3, [R5,#0x14]
    MOV R4, R6
    STR R2, [R5,#0x24]
    ADD.W R8, R3, #0xFFFFFFFF
    B loc_340E0
loc_34188:
    ADD.W R3, R4, R3,LSL#2
    LDR R1, [R3,#4]
    LDR R2, [R1,#0x28]
    CMP R2, #0
    BEQ.W loc_34440
loc_34196:
    LDR R2, [R0,#8]
    LDR R4, [R1,#0x2C]
    LDR R5, [R0,#0x18]
    CMP R4, #0
    STR R2, [R0,#0xC]
    LDR R4, [R0,#0x24]
    LDR R2, [R0,#0x14]
    IT 
    MOVNE.W LR, #0xC
    LDR R7, [R0,#4]
    IT 
    MOVEQ.W LR, #8
    STR R4, [R0,#0x28]
    ADD LR, R1
    STR R5, [R0,#0x1C]
    IT 
    MOVEQ R4, #1
    STR R7, [R0,#8]
    IT 
    MOVNE R4, #2
    STR R2, [R0,#0x18]
    LDR R2, [R3,#0x24]
    STR R2, [R0,#0x24]
    LDR.W R5, [LR,#4]
    STR R5, [R0,#4]
    LDR.W R2, [LR,#0x14]
    STR R2, [R0,#0x14]
    CBZ R5, loc_341D8
loc_341D6:
    STR R0, [R5]
loc_341D8:
    ADD.W R4, R1, R4,LSL#2
    LDR R2, [R4,#0x24]
    STR R2, [R3,#0x24]
    MOVS R2, #0
    STR.W R2, [LR,#4]
    STR.W R2, [LR,#0x14]
    STR R2, [R4,#0x24]
    LDR R4, [R0,#0x14]
    LDR R2, [R0,#0x18]
    LDR R5, [R0,#0x1C]
    LDR R7, [R0,#0x24]
    ADD R2, R4
    LDR R4, [R0,#0x20]
    ADD R5, R2
    ADD R4, R5
    CBZ R7, loc_34200
loc_341FE:
    ADDS R4, #1
loc_34200:
    LDR R2, [R0,#0x28]
    CBZ R2, loc_34206
loc_34204:
    ADDS R4, #1
loc_34206:
    LDR R2, [R0,#0x2C]
    CBZ R2, loc_3420C
loc_3420A:
    ADDS R4, #1
loc_3420C:
    STR R4, [R6,#0x14]
    LDR R2, [R3,#0x14]
    LDR R5, [R1,#0x14]
    LDR R4, [R1,#0x18]
    ADD R8, R2
    LDR R6, [R1,#0x24]
    LDR R2, [R1,#0x1C]
    ADD R4, R5
    LDR R5, [R1,#0x20]
    ADD R2, R4
    ADD R2, R5
    CBZ R6, loc_34226
loc_34224:
    ADDS R2, #1
loc_34226:
    LDR R4, [R1,#0x28]
    CBZ R4, loc_3422C
loc_3422A:
    ADDS R2, #1
loc_3422C:
    LDR R1, [R1,#0x2C]
    CBZ R1, loc_34232
loc_34230:
    ADDS R2, #1
loc_34232:
    STR R2, [R3,#0x14]
    SUB.W R8, R8, R2
    MOV R4, R0
    B loc_340E0
loc_3423C:
    LDR R0, [R4,#4]
    LDR R5, [R0,#0x28]
    CMP R5, #0
    BNE.W loc_3412A
loc_34246:
    LDR R6, [R4,#8]
    MOVS R7, #1
    CMP R6, #0
    BEQ.W loc_3462C
loc_34250:
    LDR R3, [R6,#0x28]
    CMP R3, #0
    BEQ.W loc_34642
loc_34258:
    ADD.W R5, R4, R5,LSL#2
    LDR R2, [R6,#4]
    LDR R1, [R6,#0x14]
    LDR R3, [R5,#0x24]
    STR R2, [R0,#0xC]
    STR R1, [R0,#0x1C]
    STR R3, [R0,#0x28]
    CBZ R2, loc_3426C
loc_3426A:
    STR R0, [R2]
loc_3426C:
    LDR R3, [R6,#0x24]
    STR R3, [R5,#0x24]
    LDR R3, [R6,#8]
    LDR R2, [R6,#0x18]
    LDR R1, [R6,#0x28]
    STR R3, [R6,#4]
    STR R2, [R6,#0x14]
    CMP R1, #0
    BEQ.W loc_34676
loc_34280:
    LDR R3, [R6,#0xC]
    LDR R2, [R6,#0x1C]
    STR R1, [R6,#0x24]
    LDR R1, [R6,#0x2C]
    STR R3, [R6,#8]
    STR R2, [R6,#0x18]
    CMP R1, #0
    BEQ.W loc_3466E
loc_34292:
    LDR R3, [R6,#0x10]
    MOV.W LR, #3
    LDR R2, [R6,#0x20]
    STR R1, [R6,#0x28]
    MOVS R1, #2
    STR R3, [R6,#0xC]
    STR R2, [R6,#0x1C]
loc_342A2:
    ADDS R1, #8
    ADD.W R2, R6, LR,LSL#2
    ADD.W R3, R6, R1,LSL#2
    MOVS R1, #0
    STR R1, [R2,#4]
    STR R1, [R2,#0x14]
    MOVS R2, #0
    LDR.W LR, [R0,#0x14]
    LDR R1, [R0,#0x18]
    STR R2, [R3,#4]
    LDR R3, [R0,#0x1C]
    ADD R1, LR
    LDR R2, [R0,#0x24]
    ADD R1, R3
    LDR R3, [R0,#0x20]
    ADD R3, R1
    CBZ R2, loc_342CC
loc_342CA:
    ADDS R3, #1
loc_342CC:
    LDR R2, [R0,#0x28]
    CBZ R2, loc_342D2
loc_342D0:
    ADDS R3, #1
loc_342D2:
    LDR R2, [R0,#0x2C]
    CBZ R2, loc_342D8
loc_342D6:
    ADDS R3, #1
loc_342D8:
    STR R3, [R5,#0x14]
    LDR R2, [R6,#0x14]
    LDR R3, [R6,#0x18]
    LDR R1, [R6,#0x1C]
    ADD R3, R2
    LDR R2, [R6,#0x24]
    ADD R1, R3
    LDR R3, [R6,#0x20]
    ADD R3, R1
    CBZ R2, loc_342EE
loc_342EC:
    ADDS R3, #1
loc_342EE:
    LDR R2, [R6,#0x28]
    CBZ R2, loc_342F4
loc_342F2:
    ADDS R3, #1
loc_342F4:
    LDR R2, [R6,#0x2C]
    CBZ R2, loc_342FA
loc_342F8:
    ADDS R3, #1
loc_342FA:
    ADD.W R7, R4, R7,LSL#2
    MOV R4, R0
    STR R3, [R7,#0x14]
    B loc_340E0
loc_34304:
    MOVS R7, #2
    MOVS R3, #0
    MOVS R5, #1
    B loc_3411E
loc_3430C:
    LDR R2, [R3,#0xC]
    CMP R2, #0
    BNE.W loc_3416C
loc_34314:
    LDR R3, [R3,#8]
    CMP R3, #0
    IT 
    MOVEQ R3, R1
    B loc_34160
loc_3431E:
    MOV.W R10, #0
    CMP.W R11, #0
    BNE.W loc_34140
loc_3432A:
    ADD.W R3, R4, R10,LSL#2
    CMP.W R10, #0xFFFFFFFF
    LDR.W R11, [R3,#0x24]
    BNE.W loc_34140
loc_3433A:
    MOVS R0, #0
loc_3433C:
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_34342:
    MOVS R7, #3
    MOVS R3, #1
    MOVS R5, #2
    B loc_3411E
loc_3434A:
    LDR R3, [R4,#0x28]
    CMP R3, #0
    BEQ.W loc_34572
loc_34352:
    LDR R3, [R4,#4]
    CMP R3, #0
    BNE.W loc_34150
loc_3435A:
    CMP.W R10, #1
    ITTT 
    ADDGT.W R4, R4, R10,LSL#2
    MOVGT R0, R11
    STRGT R3, [R4,#0x24]
    BGT loc_3433C
loc_3436A:
    ADD.W R1, R4, R10,LSL#2
    ADD.W R2, R10, #1
    LDR R1, [R1,#0x28]
    CMP R1, #0
    BEQ.W loc_3467C
loc_3437A:
    ADD.W R0, R4, R10,LSL#2
    CMP R2, #1
    STR R1, [R0,#0x24]
    BNE loc_3438A
loc_34384:
    LDR R1, [R4,#0x2C]
    CBZ R1, loc_3438C
loc_34388:
    STR R1, [R4,#0x28]
loc_3438A:
    MOVS R2, #2
loc_3438C:
    ADDS R2, #8
    MOVS R1, #0
    ADD.W R2, R4, R2,LSL#2
    STR R1, [R2,#4]
    CBZ R3, loc_343CA
loc_34398:
    LDR R2, [R3,#4]
    CMP R2, R4
    IT 
    MOVEQ R2, #0
    BEQ loc_343B6
loc_343A2:
    LDR R2, [R3,#8]
    CMP R2, R4
    IT 
    MOVEQ R2, #1
    BEQ loc_343B6
loc_343AC:
    LDR R2, [R3,#0xC]
    CMP R2, R4
    ITE 
    MOVNE R2, #3
    MOVEQ R2, #2
loc_343B6:
    ADD.W R2, R3, R2,LSL#2
    MOV R4, R3
    LDR R1, [R2,#0x14]
    SUBS R1, #1
    STR R1, [R2,#0x14]
    LDR R2, [R3]
    MOV R3, R2
    CMP R2, #0
    BNE loc_34398
loc_343CA:
    MOV R0, R11
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_343D2:
    LDR R0, [R5,#8]
    ADD.W R7, R10, #1
    LDR R3, [R0,#0x28]
    MOV R2, R0
    CBNZ R3, loc_343E2
loc_343DE:
    B loc_34588
loc_343E0:
    MOV R2, R3
loc_343E2:
    LDR R3, [R2,#4]
    CMP R3, #0
    BNE loc_343E0
loc_343E8:
    LDR R2, [R2,#0x24]
    MOV R4, R0
    MOV R8, R3
    STR R2, [R5,#0x24]
    B loc_340E0
loc_343F2:
    LDR R1, [R4,#0x28]
    CMP R1, #0
    BEQ.W loc_34150
loc_343FA:
    CMP.W R10, #1
    BGT.W loc_34698
loc_34402:
    ADD.W R1, R4, R10,LSL#2
    ADD.W R2, R10, #1
    LDR R1, [R1,#0x28]
    CMP R1, #0
    BNE loc_3437A
loc_34410:
    ADD.W R2, R4, R10,LSL#2
    STR R1, [R2,#0x24]
    B loc_34398
loc_34418:
    MOV.W R10, #1
    CMP.W R11, #0
    BNE.W loc_34140
loc_34424:
    B loc_3432A
loc_34426:
    LDR R2, [R3,#0x28]
    CMP R2, #0
    BNE.W loc_3417C
loc_3442E:
    LDR R2, [R3,#0x24]
    B loc_3417C
loc_34432:
    MOV.W R10, #2
    CMP.W R11, #0
    BNE.W loc_34140
loc_3443E:
    B loc_3432A
loc_34440:
    CMP R5, #3
    ITT 
    MOVEQ R7, R5
    MOVEQ R5, #2
    BNE.W loc_34686
loc_3444C:
    LSLS R3, R5, #2
    STR R3, [SP,#0x40+var_40]
    MOV R2, R3
    ADD.W R3, R4, R7,LSL#2
    ADDS R1, R4, R2
    LDR R6, [R3,#4]
    LDR R3, [R1,#0x14]
    LDR R0, [R1,#4]
    ADDS R3, #1
    ADD R8, R3
loc_34462:
    ADD.W R9, R4, R2
    LDR R2, [R6,#0x24]
    LDR R3, [R6,#8]
    LDR.W R12, [R6,#0x18]
    STR R2, [SP,#0x40+var_3C]
    STR R3, [R6,#0x10]
    LDR R2, [R6,#0x14]
    LDR R3, [SP,#0x40+var_3C]
    LDR R1, [R6,#4]
    STR.W R12, [R6,#0x20]
    STR R3, [R6,#0x2C]
    STR R1, [R6,#0xC]
    STR R2, [R6,#0x1C]
    LDR R3, [R0,#8]
    LDR.W LR, [R0,#0x18]
    STR R2, [SP,#0x40+var_38]
    LDR.W R2, [R9,#0x24]
    STR R3, [R6,#8]
    STR.W LR, [R6,#0x18]
    STR R2, [SP,#0x40+var_34]
    STR R2, [R6,#0x28]
    CBZ R3, loc_3449C
loc_3449A:
    STR R6, [R3]
loc_3449C:
    LDR R3, [R0,#0x24]
    LDR R1, [R0,#4]
    MOV R2, R3
    STR R3, [SP,#0x40+var_30]
    LDR R3, [R0,#0x14]
    STR R2, [R6,#0x24]
    STR R1, [R6,#4]
    STR R3, [R6,#0x14]
    CBZ R1, loc_344B0
loc_344AE:
    STR R6, [R1]
loc_344B0:
    LDR R2, [SP,#0x40+var_38]
    ADD R3, LR
    ADD R2, R3
    MOV R3, R2
    LDR R2, [SP,#0x40+var_30]
    ADD R3, R12
    CBZ R2, loc_344C0
loc_344BE:
    ADDS R3, #1
loc_344C0:
    LDR R2, [SP,#0x40+var_34]
    CBZ R2, loc_344C6
loc_344C4:
    ADDS R3, #1
loc_344C6:
    LDR R2, [SP,#0x40+var_3C]
    CMP R2, #0
    BEQ.W loc_34636
loc_344CE:
    ADD.W R1, R4, R7,LSL#2
    ADDS R3, #1
    STR R3, [R1,#0x14]
    BL sub_19494
loc_344DA:
    LSLS R1, R7, #2
    ADDS R0, R4, R1
    LDR R3, [R0,#4]
    CMP R3, #0
    BEQ loc_3454E
loc_344E4:
    STR.W R3, [R9,#4]
    CMP R5, #2
    LDR R3, [R0,#0x14]
    STR.W R3, [R9,#0x14]
    ITE 
    MOVEQ R3, #0
    LDRNE R3, [R0,#0x24]
    CMP R7, #3
    STR.W R3, [R9,#0x24]
    BEQ loc_3453A
loc_344FE:
    LDR.W R3, [R9,#0xC]
    ADDS R1, R5, #2
    CMP R3, #0
    BEQ.W loc_34650
loc_3450A:
    STR R3, [R0,#4]
    CMP R7, #1
    LDR.W R3, [R9,#0x1C]
    STR R3, [R0,#0x14]
    ITE 
    MOVNE R3, #0
    LDREQ.W R3, [R9,#0x2C]
    CMP R1, #2
    STR R3, [R0,#0x24]
    BNE.W loc_34656
loc_34524:
    LDR.W R3, [R9,#0x10]
    ADDS R7, R5, #3
    CBZ R3, loc_3454A
loc_3452C:
    STR R3, [R4,#0xC]
    LSLS R1, R7, #2
    LDR.W R3, [R9,#0x20]
    MOVS R2, #0
    STR R2, [R4,#0x2C]
    STR R3, [R4,#0x1C]
loc_3453A:
    ADD R1, R4
    MOVS R3, #0
    STR R3, [R1,#4]
    STR R3, [R1,#0x14]
    LDR R3, [R4,#0x24]
    CBZ R3, loc_34562
loc_34546:
    MOV R4, R6
    B loc_340E0
loc_3454A:
    MOVS R3, #8
    STR R3, [SP,#0x40+var_40]
loc_3454E:
    LDR R3, [SP,#0x40+var_40]
    ADD R3, R4
    MOV R2, R3
    MOVS R3, #0
    STR R3, [R2,#4]
    STR R3, [R2,#0x14]
    STR R3, [R2,#0x24]
    LDR R3, [R4,#0x24]
    CMP R3, #0
    BNE loc_34546
loc_34562:
    LDR R2, [SP,#0x40+var_2C]
    MOV R0, R4
    MOV R4, R6
    STR R6, [R2]
    STR R3, [R6]
    BL sub_19494
    B loc_340E0
loc_34572:
    LDR R5, [R4,#4]
    CMP R5, #0
    BNE.W loc_34150
loc_3457A:
    MOV R0, R4
    BL sub_19494
    LDR R3, [SP,#0x40+var_2C]
    MOV R0, R11
    STR R5, [R3]
    B loc_3433C
loc_34588:
    LDR R3, [R5,#0x24]
    LDR R2, [R0,#4]
    LDR R1, [R0,#0x14]
    STR R3, [R6,#0x28]
    STR R2, [R6,#0xC]
    STR R1, [R6,#0x1C]
    CBZ R2, loc_34598
loc_34596:
    STR R6, [R2]
loc_34598:
    LDR R2, [R0,#0x24]
    LDR R1, [R0,#8]
    LDR R3, [R0,#0x18]
    STR R2, [R6,#0x2C]
    STR R1, [R6,#0x10]
    STR R3, [R6,#0x20]
    CBZ R1, loc_345A8
loc_345A6:
    STR R6, [R1]
loc_345A8:
    BL sub_19494
    ADD.W R1, R6, #0x14
    LDM R1, {R1-R3}
    ADD R2, R1
    LDR R1, [R6,#0x24]
    ADD R2, R3
    LDR R3, [R6,#0x20]
    ADD R3, R2
    CBZ R1, loc_345C0
loc_345BE:
    ADDS R3, #1
loc_345C0:
    LDR R2, [R6,#0x28]
    CBZ R2, loc_345C6
loc_345C4:
    ADDS R3, #1
loc_345C6:
    LDR R2, [R6,#0x2C]
    CBZ R2, loc_345CC
loc_345CA:
    ADDS R3, #1
loc_345CC:
    CMP.W R10, #1
    STR R3, [R5,#0x14]
    BGT loc_3465A
loc_345D4:
    LDR R1, [R5,#0x28]
    CMP R1, #0
    BEQ loc_3465A
loc_345DA:
    LDR R3, [R5,#0xC]
    CMP R7, #1
    LDR R2, [R5,#0x1C]
    STR R1, [R5,#0x24]
    STR R3, [R5,#8]
    ADD.W R3, R10, #2
    STR R2, [R5,#0x18]
    ITT 
    MOVNE R0, R3
    MOVNE R3, R7
    BNE loc_34606
loc_345F2:
    LDR R2, [R5,#0x2C]
    CMP R2, #0
    BEQ loc_346A0
loc_345F8:
    STR R2, [R4,#0x28]
    ADD.W R0, R10, #3
    LDR R1, [R5,#0x10]
    LDR R2, [R5,#0x20]
    STR R1, [R5,#0xC]
    STR R2, [R5,#0x1C]
loc_34606:
    ADDS R3, #8
    ADD.W R0, R4, R0,LSL#2
    MOVS R2, #0
    ADD.W R3, R4, R3,LSL#2
    STR R2, [R3,#4]
    STR R2, [R0,#4]
    STR R2, [R0,#0x14]
    LDR R3, [R4,#0x24]
    CBZ R3, loc_34660
loc_3461C:
    LDR R3, [R6,#0x14]
    MOV R4, R6
    LDR R2, [R6,#0x18]
    ADD.W R8, R3, R2
    ADD.W R8, R8, #1
    B loc_340E0
loc_3462C:
    MOV R5, R6
    STR R6, [SP,#0x40+var_40]
    MOVS R7, #1
    MOV R2, R6
    B loc_34462
loc_34636:
    ADD.W R1, R4, R7,LSL#2
    STR R3, [R1,#0x14]
    BL sub_19494
    B loc_344DA
loc_34642:
    CBNZ R5, loc_34692
loc_34644:
    LDR R0, [R4,#4]
    MOVS R7, #1
    LDR R6, [R4,#8]
    MOV R2, R5
    STR R5, [SP,#0x40+var_40]
    B loc_34462
loc_34650:
    LSLS R3, R7, #2
    STR R3, [SP,#0x40+var_40]
    B loc_3454E
loc_34656:
    LSLS R1, R1, #2
    B loc_3453A
loc_3465A:
    MOV R0, R7
    MOV R3, R10
    B loc_34606
loc_34660:
    LDR R2, [SP,#0x40+var_2C]
    MOV R0, R4
    STR R6, [R2]
    STR R3, [R6]
    BL sub_19494
    B loc_3461C
loc_3466E:
    MOV.W LR, #2
    MOVS R1, #1
    B loc_342A2
loc_34676:
    MOV.W LR, #1
    B loc_342A2
loc_3467C:
    ADD.W R4, R4, R10,LSL#2
    MOV R0, R11
    STR R1, [R4,#0x24]
    B loc_3433C
loc_34686:
    ADD.W R3, R4, R7,LSL#2
    LDR R6, [R3,#4]
    CMP R6, #0
    BNE.W loc_34250
loc_34692:
    MOV R7, R5
    SUBS R5, #1
    B loc_3444C
loc_34698:
    ADD.W R1, R4, R10,LSL#2
    STR R2, [R1,#0x24]
    B loc_34398
loc_346A0:
    MOV R3, R7
    MOVS R0, #2
    B loc_34606
```
Output:0x10]
    CBZ R2, loc_3420C
loc_34208:
    ADDS R4, #1
loc_3420C:
    LDR R2, [R0,#0x2C]
    CBZ R2, loc_34212
loc_34210:
    ADDS R4, #1
loc_34212:
    LDR R2, [R0,#0x1C]
    CBZ R2, loc_34218
loc_34214:
    ADDS R4, #1
loc_34218:
    LDR R2, [R0,#0x14]
    CBZ R2, loc_3421E
loc_3421A:
    ADDS R4, #1
loc_3421E:
    LDR R2, [R0,#0x20]
    CBZ R2, loc_34224
loc_34220:
    ADDS R4, #1
loc_34224:
    LDR R2, [R0,#0x24]
    CBZ R2, loc_3422A
loc_34226:
    ADDS R4, #1
loc_3422A:
    LDR R2, [R0,#0x10]
    CBZ R2, loc_34230
loc_3422C:
    ADDS R4, #1
loc_34230:
    LDR R2, [R0,#0x28]
    CBZ R2, loc_34236
loc_34232:
    ADDS R4, #1
loc_34236:
    LDR R2, [R0,#0x14]
    CBZ R2, loc_3423C
loc_34238:
    ADDS R4, #1
loc_3423C:
    ADD.W R4, R4, R1,LSL#2
    LDR R2, [R4,#0x24]
    STR R2, [R3,#0x24]
    LDR.R W2, [R0,#0x10]
    STR.W W2, [R3,#0x10]
    LDR.R W2, [R0,#0x28]
    STR.W W2, [R3,#0x28]
    LDR.R W2, [R0,#0x14]
    STR.W W2, [R3,#0x14]
    LDR.R W2, [R0,#0x20]
    STR.W W2, [R3,#0x20]
    LDR.R W2, [R0,#0x24]
    STR.W W2, [R3,#0x24]
    LDR.R W2, [R0,#0x10]
    STR.W W2, [R3,#0x10]
    LDR.R W2, [R0,#0x28]
    STR.W W2, [R3,#0x28]
    LDR.R W2, [R0,#0x14]
    STR.W W2, [R3,#0x14]
    LDR.R W2, [R0,#0x20]
    STR.W W2, [R3,#0x20]
    LDR.R W2, [R0,#0x24]
    STR.W W2, [R3,#0x24]
    LDR.R W2, [R0,#0x10]
    STR.W W2, [R3,#0x10]
    LDR.R W2, [R0,#0x28]
    STR.W W2, [R3,#0x28]
    LDR.R W2, [R0,#0x14]
    STR.W W2, [R3,#0x14]
    LDR.R W2, [R0,#0x20]
    STR.W W2, [R3,#0x20]
    LDR.R W2, [R0,#0x24]
    STR.W W2, [R3,#0x24]
    LDR.R W2, [R0,#0x10]
    STR.W W2, [R3,#0x10]
    LDR.R W2
############
```assembly
loc_11368:
    ADR R12, 0x11370
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__vfprintf_chk_ptr - 0x55370)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:file-pointer",
  "arg1-type:string-pointer",
  "arg2-type:va_list",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__vfprintf_chk)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11370",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__vfprintf_chk_ptr",
  "address-or-offset-constant:-0x55370",
  "inferred-algorithm:formatted-output",
  "inferred-algorithm:variable-argument-list-handling",
  "inferred-algorithm:error-checking-or-handling"
]
```<|im_end|>
############
```assembly
loc_286B4:
    PUSH {R3-R5,LR}
    MOV R4, R0
    MOV R2, R4
    MOV R0, R1
    ADDS R1, R4, #4
    BL sub_285B0
    CBNZ R0, loc_286C8
loc_286C4:
    MOVS R0, #0
    POP {R3-R5,PC}
loc_286C8:
    LDR R2, [R4,#4]
    MOV R3, #0x56178
    LDR R1, [R2,#0x1C]
    LDR R0, [R3]
    BL sub_1F410
    STR R0, [R4,#0x18]
    CMP R0, #0
    BEQ loc_286C4
loc_286E0:
    LDR R1, [R4,#4]
    BL sub_281F4
    MOV R5, R0
    CBZ R0, loc_286FE
loc_286EA:
    LDR R2, [R0,#4]
    MOVS R1, #0
    LDR R3, [R0,#8]
    STR R1, [R4,#0x10]
    STR R2, [R4,#8]
    STR R3, [R4,#0xC]
    BL sub_19494
    MOVS R0, #1
    POP {R3-R5,PC}
loc_286FE:
    LDR R0, [R4,#0x18]
    BL sub_1E6B0
    STR R5, [R4,#0x18]
    MOV R0, R5
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_285B0)",
  "external-call-type:unspecified-helper (sub_1F410)",
  "external-call-type:unspecified-helper (sub_281F4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operations:AND-clear",
  "bitwise-mask-value:0x56178",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:conditional-data-update",
  "inferred-algorithm:object-state-change"
]
```<|im_end|>
############
```assembly
loc_2C770:
    PUSH {R4-R7,LR}
    MOV R7, R0
    SUB SP, SP, #0xC
    LDR R0, [R1,#0xC]
    MOV R4, R1
    BL sub_20C4C
    MOV R6, R0
    LDR R0, [R4,#8]
    BL sub_20C4C
    MOV R5, R0
    LDR R0, [R4,#8]
    BL sub_1F158
    LDR R2, [R4,#0x20]
    MOV R3, #0x437C4
    MOV R1, R0
    CBZ R2, loc_2C7DC
loc_2C79C:
    STR R2, [SP,#0x20+var_1C]
    MOVW R0, #0x37C8
    MOV R2, R6
    STR R3, [SP,#0x20+var_20]
    MOVT.W R0, #4
    MOV R3, R5
    BL sub_18C24
    MOV R4, R0
    MOV R0, R6
    BL sub_19494
    MOV R0, R5
    BL sub_19494
    MOV R3, R4
    MOV R0, R7
    MOVS R1, #1
    MOV R2, #0x393A8
    BLX __fprintf_chk
    MOV R0, R4
    ADD SP, SP, #0xC
    POP.W {R4-R7,LR}
    B.W sub_19494
loc_2C7DC:
    MOV R3, #0x4555C
    MOV R2, R3
    B loc_2C79C
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_20C4C)",
  "external-call-type:data-processing-helper (sub_1F158)",
  "external-call-type:data-processing-helper (sub_18C24)",
  "external-call-type:data-processing-helper (sub_19494)",
  "external-call-type:file-output (fprintf_chk)",
  "integer-size-hint:32-bit",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x37C8",
  "fixed-value-assignment:0x437C4",
  "fixed-value-assignment:0x393A8",
  "fixed-value-assignment:0x4555C",
  "address-or-offset-constant:sub_20C4C",
  "address-or-offset-constant:sub_1F158",
  "address-or-offset-constant:sub_18C24",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:__fprintf_chk",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:conditional-logic",
  "inferred-algorithm:output-generation",
  "inferred-algorithm:loop-construct"
]
```<|im_end|>
############
```assembly
loc_28528:
    CMP R0, #8
    PUSH {R3-R7,LR}
    MOV R4, R0
    MOV R6, R1
    MOV R7, R2
    BEQ loc_2856C
loc_28534:
    CMP R0, #5
    BEQ loc_2853E
loc_28538:
    MOVS R3, #0
loc_2853A:
    MOV R0, R3
    POP {R3-R7,PC}
loc_2853E:
    MOV R5, #0x3F5B0
    MOV R2, R0
    ADD.W R1, R5, #0x568
    MOV R0, R6
    BLX memcmp
    CBZ R0, loc_2859A
loc_28554:
    MOV R2, R4
    MOV R0, R6
    ADD.W R1, R5, #0x570
    BLX memcmp
    CMP R0, #0
    BNE loc_28538
loc_28564:
    MOVS R0, #2
    ADD.W R3, R5, #0x530
    B loc_28588
loc_2856C:
    MOV R5, #0x3F5B0
    MOV R2, R0
    MOV R0, R1
    ADD.W R1, R5, #0x560
    BLX memcmp
    CMP R0, #0
    BNE loc_28538
loc_28584:
    ADD.W R3, R5, #0x540
loc_28588:
    ADD.W R5, R5, R0,LSL#2
    LDR R3, [R3]
    LDR.W R4, [R5,#0x578]
    BLX R3
    MOV R3, R4
    STR R0, [R7]
    B loc_2853A
loc_2859A:
    ADD.W R3, R5, #0x550
    MOVS R0, #1
    B loc_28588
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcmp)",
  "external-call-type:unspecified-helper (BLX instruction for function call)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:8",
  "fixed-value-comparison:5",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:2",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x3F5B0",
  "fixed-value-assignment:0x568",
  "fixed-value-assignment:0x570",
  "fixed-value-assignment:0x560",
  "fixed-value-assignment:0x578",
  "fixed-value-assignment:0x530",
  "fixed-value-assignment:0x540",
  "fixed-value-assignment:0x550",
  "fixed-value-assignment:0x578",
  "byte-order-processing:little-endian",
  "bitwise-operation-shift-left:LSL#2",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:data-comparison-and-selection",
  "inferred-algorithm:function-pointer-invocation"
]
```<|im_end|>
############
```assembly
loc_56898:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_12C80:

loc_12CC4:
    PUSH {R3,LR}
    MOV R0, #0x55F0C
    LDR R3, [R0]
    CBNZ R3, loc_12CD8
loc_12CD2:
    POP.W {R3,LR}
    B sub_12C80
loc_12CD8:
    MOV R3, #0
    CMP R3, #0
    BEQ loc_12CD2
loc_12CE4:
    BLX R3
    B loc_12CD2
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-pointer",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (BLX R3)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x55F0C",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x55F0C",
  "inferred-algorithm:dynamic-function-execution",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:magic-number-check"
]
```<|im_end|>
############
```assembly
loc_1B400:
    B.W sub_19494
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "standard-calling-convention-used:false",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-absent",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "inferred-algorithm:jump-table-or-redirector",
  "inferred-algorithm:program-entry-point-indirection"
]
```<|im_end|>
############
```assembly
loc_56938:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_56864:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_24318:
    PUSH.W {R4-R11,LR}
    MOVW R4, #0x6190
    SUB SP, SP, #0x34
    MOVT.W R4, #5
    MOV R7, R2
    MOV R8, R3
    STR R4, [SP,#0x58+var_3C]
    MOV R5, R1
    LDR R4, [R4]
    MOV R9, R0
    MOVS R2, #1
    MOV R0, R3
    MOVS R1, #4
    MOV.W R3, #0x2800
    STR R4, [SP,#0x58+var_2C]
    MOVS R4, #1
    BLX R7
    MOV R0, R8
    MOVS R2, #1
    MOVS R1, #3
    MOV R3, #0xFFFFD10E
    BLX R7
    LSLS R3, R5, #6
    MOVS R2, #2
    MOV R0, R8
    MOVS R1, #4
    MOVS R6, #2
    BLX R7
    MOV R1, R5
    MOV R0, #0xFFE2A83C
    BL sub_38748
    MOVS R2, #2
    MOVS R1, #3
    MOV R10, #0x56178
    MOV R3, R0
    MOV R0, R8
    BLX R7
    MOV R0, R8
    MOV.W R3, #0x2000
    MOVS R2, #3
    MOVS R1, #4
    BLX R7
    MOVS R2, #3
    MOV R1, R2
    MOV R0, R8
    MOV R3, #0xFFFF8000
    BLX R7
    MOVS R2, #4
    MOV R1, R2
    MOV R0, R8
    MOV.W R3, #0x2000
    BLX R7
    MOV R0, R8
    MOVS R2, #4
    MOVS R1, #3
    MOV R3, #0xFFFF4000
    BLX R7
    MOVS R3, #0
    MOV R2, R3
    MOV R0, R8
    MOVS R1, #5
    BLX R7
    ADD R1, SP, #0x58+var_30
    ADD R0, SP, #0x58+var_34
    BL sub_2A158
    LDR R3, [SP,#0x58+var_30]
    MOVS R2, #2
    STR R4, [SP,#0x58+var_58]
    MOV R1, R2
    STR.W R8, [SP,#0x58+var_50]
    STR R3, [SP,#0x58+var_4C]
    MOVS R0, #0xA0
    MOVS R3, #0
    STR R7, [SP,#0x58+var_54]
    BL sub_29BE0
    LDR R1, [SP,#0x58+var_34]
    STR.W R8, [SP,#0x58+var_50]
    STR R7, [SP,#0x58+var_54]
    STR.W R9, [SP,#0x58+var_40]
    MOV R2, R0
    SUB.W R0, R5, #0xA0
    STR.W R2, [R9,#4]
    MOV R3, R2
    STR R1, [SP,#0x58+var_4C]
    MOV R2, R6
    MOV R1, R6
    STR R6, [SP,#0x58+var_58]
    BL sub_29BE0
    LDR R6, [SP,#0x58+var_40]
    MOVS R5, #0
    LDR R1, [R6,#4]
    MOV R11, R6
    STR R0, [R6]
    BL sub_1FF34
    MOV R9, R0
    MOV R0, R4
    BL sub_1FE48
    MOV R4, R0
    B loc_24430
loc_2441E:
    MOV R0, R4
    MOVS R1, #1
    BL sub_1FE60
    MOV R3, R0
    MOV R0, R4
    MOV R4, R3
    BL sub_1E6B0
loc_24430:
    ADDS R5, #1
    MOVS R2, #3
    MOVS R1, #6
    MOV R0, R8
    MOV R3, R5
    BLX R7
    LDR.W R2, [R11]
    MOV R1, R9
    MOV R0, R4
    BL sub_20724
    LDR.W R1, [R10]
    MOV R6, R0
    BL sub_1F358
    CMP R0, #0
    BLE loc_2441E
loc_24456:
    LDR R5, [SP,#0x58+var_40]
    MOV R0, R4
    MOV.W R9, #0
    STR R6, [R5,#8]
    BL sub_1E6B0
    LDR R0, [R5,#4]
    BL sub_1E688
    STR R0, [SP,#0x58+var_44]
    BL sub_1ED64
loc_24470:
    ADD.W R9, R9, #1
    MOVS R2, #4
    MOVS R1, #6
    MOV R0, R8
    MOV R3, R9
    MOVS R5, #0
    BLX R7
    MOVS R0, #0x9F
    BL sub_1E6C8
    MOV R11, R5
    MOV R4, R5
    MOV R6, R0
loc_2448C:
    CBZ R5, loc_244C8
loc_2448E:
    SUBS R5, #1
loc_24490:
    AND.W R2, R11, #1
    MOV R1, R4
    MOV R0, R6
    ADDS R4, #1
    BL sub_1F258
    CMP R4, #0xA0
    MOV.W R11, R11,ASR#1
    BNE loc_2448C
loc_244A6:
    LDR.W R1, [R10]
    MOV R0, R6
    BL sub_1F358
    CMP R0, #0
    BLE loc_244C0
loc_244B4:
    LDR R1, [SP,#0x58+var_44]
    MOV R0, R6
    BL sub_1F358
    CMP R0, #0
    BLT loc_244D2
loc_244C0:
    MOV R0, R6
    BL sub_1E6B0
    B loc_24470
loc_244C8:
    BL sub_2D1F4
    MOVS R5, #7
    MOV R11, R0
    B loc_24490
loc_244D2:
    LDR R4, [SP,#0x58+var_40]
    LDR R0, [SP,#0x58+var_44]
    STR R6, [R4,#0x10]
    BL sub_1E6B0
    LDR R2, [R4]
    LDR R1, [R4,#0x10]
    LDR R0, [R4,#8]
    BL sub_20724
    LDR R3, [SP,#0x58+var_3C]
    LDR R2, [SP,#0x58+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    STR R0, [R4,#0xC]
    MOV.W R0, #1
    BNE loc_244FC
loc_244F6:
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
loc_244FC:
    BLX __stack_chk_fail
```
Output:    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E688
    STR R0, [SP,#0x58+var_44]
    BL sub_1ED64
    B loc_2448E
loc_244C8:
    LDR.R4, [SP,#0x58+var_44]
    MOVS R0, #0x10
    BL sub_1E6C8
    LDR.R0, [SP,#0x58+var_44]
    BL sub_1E688
    B loc_24470
loc_244D6:
    LDR R5, [SP,#0x58+var_40]
    MOV R0, R4
    MOV.W R9, #0
    STR R6, [R5,#8]
    BL sub_1E6B0
    LDR R0, [R5,#4]
    BL sub_1E688
    STR R0, [SP,#0x58+var_44]
    BL sub_1ED64
loc_244F0:
    ADD.W R9, R9, #1
    MOVS R2, #4
    MOVS R1, #6
    MOV R0, R8
    MOV R3, R9
    MOVS R5, #0
    BLX R7
    MOVS R0, #0x9F
    BL sub_1E6C8
    MOV R11, R5
    MOV R4, R5
    MOV R6, R0
loc_2450C:
    CBZ R5, loc_24548
loc_2450E:
    SUBS R5, #1
loc_24510:
    AND.W R2, R11, #1
    MOV R1, R4
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E688
    STR R0, [SP,#0x58+var_44]
    BL sub_1ED64
    B loc_2450E
loc_24548:
    LDR.R4, [SP,#0x58+var_44]
    MOVS R0, #0x10
    BL sub_1E6C8
    LDR.R0, [SP,#0x58+var_44]
    BL sub_1E688
    B loc_244F0
loc_24556:
    LDR R5, [SP,#0x58+var_40]
    MOV R0, R4
    MOV.W R9, #0
    STR R6, [R5,#8]
    BL sub_1E6B0
    LDR R0, [R5,#4]
    BL sub_1E688
    STR R0, [SP,#0x58+var_44]
    BL sub_1ED64
loc_24570:
    ADD.W R9, R9, #1
    MOVS R2, #4
    MOVS R1, #6
    MOV R0, R8
    MOV R3, R9
    MOVS R5, #0
    BLX R7
    MOVS R0, #0x9F
    BL sub_1E6C8
    MOV R11, R5
    MOV R4, R5
    MOV R6, R0
loc_2458C:
    CBZ R5, loc_245C8
loc_2458E:
    SUBS R5, #1
loc_24590:
    AND.W R2, R11, #1
    MOV R1, R4
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E688
    STR R0, [SP,#0x58+var_44]
    BL sub_1ED64
    B loc_2458E
loc_245C8:
    LDR.R4, [SP,#0x58+var_44]
    MOVS R0, #0x10
    BL
############
```assembly
loc_2ED10:
    PUSH {R4,LR}
    MOV R4, R0
    LDR R0, [R0,#8]
    CBZ R0, loc_2ED1C
loc_2ED18:
    BL sub_1E6B0
loc_2ED1C:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2ED24
loc_2ED20:
    BL sub_1E6B0
loc_2ED24:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2ED2C
loc_2ED28:
    BL sub_1E6B0
loc_2ED2C:
    LDR R0, [R4,#0x14]
    CBZ R0, loc_2ED34
loc_2ED30:
    BL sub_1E6B0
loc_2ED34:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_2ED3C
loc_2ED38:
    BL sub_1E6B0
loc_2ED3C:
    LDR R0, [R4,#0x1C]
    CBZ R0, loc_2ED44
loc_2ED40:
    BL sub_1E6B0
loc_2ED44:
    LDR R0, [R4,#0x20]
    CBZ R0, locret_2ED50
loc_2ED48:
    POP.W {R4,LR}
    B.W sub_19494
loc_2ED50:
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0x8",
  "memory-read-from-input-parameter-offset:0xC",
  "memory-read-from-input-parameter-offset:0x10",
  "memory-read-from-input-parameter-offset:0x14",
  "memory-read-from-input-parameter-offset:0x18",
  "memory-read-from-input-parameter-offset:0x1C",
  "memory-read-from-input-parameter-offset:0x20",
  "fixed-value-comparison:0",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:callback-or-handler-invocation"
]
```<|im_end|>
############
```assembly
loc_2CB90:
    CMP R0, #0xA
    ITTTT 
    MOVLSW R3, #0x3214
    MOVTLS.W R3, #4
    ADDLS.W R3, R3, R0,LSL#2
    LDRLS R0, [R3,#0x54]
    ITT 
    MOVHIW R0, #0x386C
    MOVTHI.W R0, #4
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:caller-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "integer-size-hint:32-bit",
  "conditional-branching-on-input",
  "bitwise-operation-shift-left",
  "bitwise-operation-addition",
  "bitwise-operation-load-with-swap",
  "bitwise-operation-movhiw",
  "bitwise-operation-movthi.w",
  "inferred-algorithm:conditional-data-access",
  "inferred-algorithm:data-processing-with-swapping"
]
```<|im_end|>
############
```assembly
loc_1129C:
    ADR R12, 0x112A4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(realloc_ptr - 0x552A4)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:size_t",
  "arg2-type:size_t",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (realloc)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112A4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:realloc_ptr",
  "inferred-algorithm:dynamic-memory-allocation",
  "inferred-algorithm:memory-resize"
]
```<|im_end|>
############
```assembly
loc_111D4:
    ADR R12, 0x111DC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(getuid_ptr - 0x551DC)]!
```
Output:```json
[
  "return-type:undefined",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (getuid_ptr)",
  "address-or-offset-constant:0x111DC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:getuid_ptr",
  "inferred-algorithm:os-interaction",
  "inferred-algorithm:user-id-fetching"
]
```<|im_end|>
############
```assembly
loc_112C0:
    ADR R12, 0x112C8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__memcpy_chk_ptr - 0x552C8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:size_t",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__memcpy_chk_ptr)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x44000",
  "address-or-offset-constant:0x112C8",
  "address-or-offset-constant:__memcpy_chk_ptr",
  "inferred-algorithm:data-copy-with-checksum",
  "inferred-algorithm:buffer-management",
  "inferred-algorithm:safe-memory-access"
]
```<|im_end|>
############
```assembly
loc_56984:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11310:
    ADR R12, 0x11318
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(opendir_ptr - 0x55318)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:operating-system-interaction (opendir)",
  "address-or-offset-constant:0x11318",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:(opendir_ptr - 0x55318)",
  "inferred-algorithm:file-directory-access",
  "inferred-algorithm:dynamic-function-resolution"
]
```<|im_end|>
############
```assembly
loc_11578:
    ADR R12, 0x11580
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(pclose_ptr - 0x55580)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (pclose_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11580",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:pclose_ptr",
  "inferred-algorithm:file-closing",
  "inferred-algorithm:dynamic-function-pointer-resolution"
]
```<|im_end|>
############
```assembly
loc_1990C:
    PUSH {R3-R5,LR}
    MOV R5, R0
    MOV R0, R1
    MOV R4, R1
    BLX strlen
    MOV R1, R4
    MOV R2, R0
    MOV R0, R5
    BLX memcmp
    CLZ.W R0, R0
    LSRS R0, R0, #5
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (memcmp)",
  "integer-size-hint:32-bit",
  "memory-read-from-stack-offset",
  "inferred-algorithm:string-comparison",
  "inferred-algorithm:bitwise-operation (CLZ)",
  "inferred-algorithm:bitwise-operation (LSRS)"
]
```<|im_end|>
############
```assembly
loc_56950:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2C190:
    PUSH.W {R4-R11,LR}
    MOV R11, #0x56190
    MOV R10, R1
    SUBS R7, R2, #0
    SUB SP, SP, #0xC
    LDR.W R1, [R11]
    MOV R6, R0
    ITTT 
    MOVGT R8, R3
    ADDGT.W R9, SP, #0x30+var_2C
    MOVGT R5, #0
    STR R1, [SP,#0x30+var_2C]
    BLE loc_2C1E8
loc_2C1B6:
    CMP R7, #3
    MOV R3, R7
    MOV R0, R10
    MOV R2, SP
    IT 
    MOVGE R3, #3
    SUBS R7, R7, R3
    MOV R1, R3
    ADD R10, R3
    BL sub_18FA4
    MOV R4, SP
loc_2C1CE:
    CMP R8, R5
    IT 
    ADDGT R5, #1
    BLE loc_2C200
loc_2C1D6:
    LDRB.W R0, [R4],#1
    MOV R1, R6
    BLX fputc
    CMP R9, R4
    BNE loc_2C1CE
loc_2C1E4:
    CMP R7, #0
    BGT loc_2C1B6
loc_2C1E8:
    MOV R1, R6
    MOVS R0, #0xA
    BLX fputc
    LDR R2, [SP,#0x30+var_2C]
    LDR.W R3, [R11]
    CMP R2, R3
    BNE loc_2C20C
loc_2C1FA:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_2C200:
    MOV R1, R6
    MOVS R0, #0xA
    BLX fputc
    MOVS R5, #1
    B loc_2C1D6
loc_2C20C:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:unknown",
  "arg2-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fputc)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:3",
  "fixed-value-assignment:0xA",
  "address-or-offset-constant:0x56190",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:character-output-loop",
  "inferred-algorithm:conditional-check",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_13270:
    PUSH {R4,R5,LR}
    MOVW R5, #0x6190
    MOVW R4, #0x97F0
    MOVT.W R5, #5
    MOVT.W R4, #3
    SUB SP, SP, #0x14
    LDR R3, [R5]
    LDR.W R2, [R4,R1,LSL#2]
    STR R3, [SP,#0x20+var_14]
    CBNZ R2, loc_132B8
loc_1328E:
    ADD.W R3, R4, R1,LSL#2
    LDR.W R3, [R3,#0x2E0]
    CMP R3, #1
    BNE loc_132F4
loc_1329A:
    ADD R3, SP, #0x20+var_10
    LDR R0, [R0]
    STR.W R1, [R3,#-0xC]!
    MOV R1, R3
    BL sub_35A34
    CBZ R0, loc_132D8
loc_132AA:
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R5]
    LDR R0, [R0,#8]
    CMP R2, R3
    BNE loc_132D4
loc_132B4:
    ADD SP, SP, #0x14
    POP {R4,R5,PC}
loc_132B8:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9EFC
    ADD.W R3, R4, #0x5C0
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOV.W R2, #0x108
    BLX __assert_fail
loc_132D4:
    BLX __stack_chk_fail
loc_132D8:
    MOVW R1, #0x9EF4
    MOVW R0, #0xA004
    ADD.W R3, R4, #0x5C0
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOV.W R2, #0x10C
    BLX __assert_fail
loc_132F4:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9F20
    ADD.W R3, R4, #0x5C0
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOVW R2, #0x109
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__assert_fail)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation-shift-left",
  "bitwise-operation-shift-right",
  "bitwise-operation-or",
  "bitwise-operation-and-clear",
  "bitwise-operation-xor",
  "magic-number:0x6190",
  "magic-number:0x97F0",
  "magic-number:0x5",
  "magic-number:0x3",
  "magic-number:0x9EF4",
  "magic-number:0x9EFC",
  "magic-number:0xA004",
  "magic-number:0x9F20",
  "magic-number:0x108",
  "magic-number:0x10C",
  "magic-number:0x109",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:assertion-checking",
  "inferred-algorithm:stack-protection"
]
```<|im_end|>
############
```assembly
loc_36D58:
    PUSH {R4,R5,LR}
    MOV R4, #0x56190
    SUB SP, SP, #0x14
    MOV R5, R0
    MOVS R1, #0
    LDR R3, [R4]
    ADD R0, SP, #0x20+tv
    STR R3, [SP,#0x20+var_14]
    BLX gettimeofday
    ADD R0, SP, #0x20+tv
    MOVS R1, #8
    BLX R5
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_36D84
loc_36D80:
    ADD SP, SP, #0x14
    POP {R4,R5,PC}
loc_36D84:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (gettimeofday)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0",
  "fixed-value-assignment:8",
  "address-or-offset-constant:gettimeofday",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:synchronization-check",
  "inferred-algorithm:time-related-check",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_111E0:
    ADR R12, 0x111E8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(memmove_ptr - 0x551E8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:size_t",
  "calling-convention-hint:unspecified",
  "stack-arg-use:true",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memmove)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111E8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:memmove_ptr",
  "inferred-algorithm:data-movement",
  "inferred-algorithm:dynamic-memory-access"
]
```<|im_end|>
############
```assembly
loc_36254:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB SP, SP, #0x8C
    MOVT.W R3, #5
    MOVW R5, #0x555C
    MOV R8, R0
    LDR R2, [R3]
    MOVT.W R5, #4
    STR R3, [SP,#0xB0+var_B0]
    MOVS R4, #0
    LDR R3, [R0,#0x14]
    STR R2, [SP,#0xB0+var_2C]
    CBZ R3, loc_362A2
loc_36278:
    LDR.W R3, [R8,#0x18]
    MOV R1, R5
    LDR.W R0, [R3,R4,LSL#2]
    ADDS R4, #1
    BL sub_1892C
    LDR.W R3, [R8,#0x14]
    CMP R3, R4
    BHI loc_36278
loc_36290:
    CBZ R3, loc_362A2
loc_36292:
    MOV R3, #0x567E0
    LDR R3, [R3,#(dword_56820 - 0x567E0)]
    CMP R3, #0
    BNE.W loc_36478
loc_362A2:
    MOVW R0, #0x4F9C
    MOVS R1, #2
    MOVT.W R0, #4
    BLX open
    SUBS R6, R0, #0
    BGE.W loc_3648A
loc_362B6:
    MOV R3, #0x56198
    MOVS R6, #0
    STR R3, [SP,#0xB0+var_AC]
    LDR R7, [R3]
loc_362C4:
    LDR.W R3, [R8,#8]
    CBZ R3, loc_36324
loc_362CA:
    LDR.W R5, [R8,#4]
    CBZ R5, loc_36324
loc_362D0:
    MOV R0, R5
    BLX strlen
    SUBS R4, R0, #0
    IT 
    ADDGT.W R9, R5, R4
    BLE loc_36302
loc_362E0:
    LDRB.W R0, [R5],#1
    TST.W R0, #0x60
    ITE 
    MOVNE R3, #1
    MOVEQ R3, #0
    CMP R0, #0xA
    IT 
    ORREQ.W R3, R3, #1
    CBZ R3, loc_362FE
loc_362F8:
    MOV R1, R7
    BLX fputc
loc_362FE:
    CMP R5, R9
    BNE loc_362E0
loc_36302:
    MOV R0, R7
    BLX fflush
    LDR.W R3, [R8,#4]
    ADD R3, R4
    LDRB.W R3, [R3,#-1]
    CMP R3, #0xA
    BEQ loc_36324
loc_36316:
    MOV R1, R7
    MOVS R0, #0xA
    BLX fputc
    MOV R0, R7
    BLX fflush
loc_36324:
    LDR.W R5, [R8,#0xC]
    CBZ R5, loc_3637E
loc_3632A:
    MOV R0, R5
    BLX strlen
    SUBS R4, R0, #0
    IT 
    ADDGT.W R9, R5, R4
    BLE loc_3635C
loc_3633A:
    LDRB.W R0, [R5],#1
    TST.W R0, #0x60
    ITE 
    MOVNE R3, #1
    MOVEQ R3, #0
    CMP R0, #0xA
    IT 
    ORREQ.W R3, R3, #1
    CBZ R3, loc_36358
loc_36352:
    MOV R1, R7
    BLX fputc
loc_36358:
    CMP R5, R9
    BNE loc_3633A
loc_3635C:
    MOV R0, R7
    BLX fflush
    LDR.W R3, [R8,#0xC]
    ADD R3, R4
    LDRB.W R3, [R3,#-1]
    CMP R3, #0xA
    BEQ loc_3637E
loc_36370:
    MOV R1, R7
    MOVS R0, #0xA
    BLX fputc
    MOV R0, R7
    BLX fflush
loc_3637E:
    LDR.W R3, [R8,#0x14]
    MOV.W R9, #0
    MOV R10, R9
    CMP R3, #0
    BEQ.W loc_364CE
loc_3638E:
    LDR.W R3, [R8,#0x18]
    ADD R1, SP, #0xB0+termios_p
    MOV R0, R6
    ADD R4, SP, #0xB0+var_68
    LDR.W R5, [R3,R9,LSL#2]
    BLX tcgetattr
    ADD.W LR, SP, #0xB0+termios_p
    LDM.W LR!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W LR!, {R0-R3}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM R4!, {R0-R3}
    LDM.W LR!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W LR, {R0-R2}
    STM.W R4, {R0-R2}
    LDR R3, [R5,#4]
    CMP R3, #0
    BNE loc_364A4
loc_363C8:
    BIC.W R12, R12, #8
    ORR.W R3, R12, #3
loc_363D0:
    ADD R2, SP, #0xB0+var_68
    MOVS R1, #0
    MOV R0, R6
    STR R3, [SP,#0xB0+var_68.c_lflag]
    BLX tcsetattr
    LDR R4, [R5]
    MOV R0, R4
    BLX strlen
    CMP R0, #0
    IT 
    ADDGT.W R11, R4, R0
    BLE loc_36410
loc_363EE:
    LDRB.W R0, [R4],#1
    TST.W R0, #0x60
    ITE 
    MOVNE R3, #1
    MOVEQ R3, #0
    CMP R0, #0xA
    IT 
    ORREQ.W R3, R3, #1
    CBZ R3, loc_3640C
loc_36406:
    MOV R1, R7
    BLX fputc
loc_3640C:
    CMP R4, R11
    BNE loc_363EE
loc_36410:
    MOV R0, R7
    MOVS R4, #0
    BLX fflush
    B loc_3642A
loc_3641A:
    LDR R3, [R5,#8]
    ADD R4, R0
    ADD R3, R4
    LDRB.W R11, [R3,#-1]
    CMP.W R11, #0xA
    BEQ loc_364AA
loc_3642A:
    ADD.W R1, R4, R4,LSL#2
    MOV R0, R5
    ASRS R1, R1, #2
    ADD.W R1, R1, #0x200
    BL sub_18868
    LDR R2, [R5,#0xC]
    LDR R1, [R5,#8]
    MOV R0, R6
    SUBS R2, #1
    SUBS R2, R2, R4
    ADD R1, R4
    BLX read
    CMP R0, #0
    BGT loc_3641A
loc_3644E:
    ADD R2, SP, #0xB0+termios_p
    MOV R0, R6
    MOVS R1, #0
    BLX tcsetattr
    LDR R3, [R5,#4]
    CBNZ R3, loc_3646A
loc_3645C:
    MOV R1, R7
    MOVS R0, #0xA
    BLX fputc
    MOV R0, R7
    BLX fflush
loc_3646A:
    LDR R3, [SP,#0xB0+var_AC]
    LDR R3, [R3]
    CMP R3, R7
    BEQ loc_36478
loc_36472:
    MOV R0, R7
    BLX fclose
loc_36478:
    MOVS R0, #0
loc_3647A:
    LDR R3, [SP,#0xB0+var_B0]
    LDR R2, [SP,#0xB0+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_364E0
loc_36484:
    ADD SP, SP, #0x8C
    POP.W {R4-R11,PC}
loc_3648A:
    MOV R1, #aW
    BLX fdopen
    MOV R3, #0x56198
    STR R3, [SP,#0xB0+var_AC]
    MOV R7, R0
    B loc_362C4
loc_364A4:
    ORR.W R3, R12, #0xB
    B loc_363D0
loc_364AA:
    ADD R2, SP, #0xB0+termios_p
    MOVS R1, #0
    MOV R0, R6
    SUBS R4, #1
    BLX tcsetattr
    LDR R3, [R5,#4]
    CBZ R3, loc_364E4
loc_364BA:
    LDR R3, [R5,#8]
    ADD.W R9, R9, #1
    STRB.W R10, [R3,R4]
    LDR.W R3, [R8,#0x14]
    CMP R3, R9
    BHI.W loc_3638E
loc_364CE:
    LDR R3, [SP,#0xB0+var_AC]
    LDR R3, [R3]
    CMP R3, R7
    BEQ loc_364DC
loc_364D6:
    MOV R0, R7
    BLX fclose
loc_364DC:
    MOVS R0, #1
    B loc_3647A
loc_364E0:
    BLX __stack_chk_fail
loc_364E4:
    MOV R0, R11
    MOV R1, R7
    BLX fputc
    MOV R0, R7
    BLX fflush
    B loc_364BA
```
Output:    B loc_363CF
loc_363CD:
    ORR.W R12, R12, #8
loc_363CF:
    STR W12, [SP,#0xB0+var_68.c_lflag]
    LDR.W R12, [SP,#0xB0+var_68.c_iflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_cflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_oflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_cc]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_lflag]
    STM.W R4, {R0-R2}
    LDR.W R12, [SP,#0xB0+var_68.c_l
############
```assembly
loc_22384:

loc_2249C:
    PUSH {R4}
    MOV R3, R1
    MOV R4, R2
    ADD.W R2, R0, #0x88
    MOV R1, R4
    MOV R0, R3
    POP.W {R4}
    B sub_22384
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_22384)",
  "integer-size-hint:16-bit",
  "byte-level-operations:ADD.W",
  "inferred-algorithm:loop-with-incremented-counter",
  "inferred-algorithm:data-access-through-pointer-arithmetic"
]
```<|im_end|>
############
```assembly
loc_112B4:
    ADR R12, 0x112BC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__xstat_ptr - 0x552BC)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-used",
  "standard-function-return-not-applicable",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (__xstat_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112BC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__xstat_ptr",
  "inferred-algorithm:system-call-or-interface-access",
  "inferred-algorithm:dynamic-address-resolution",
  "inferred-algorithm:control-flow-transfer-through-indirect-jump"
]
```<|im_end|>
############
```assembly
loc_33A4C:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0x11C
    MOV R5, R3
    MOV R4, R2
    LDR.W R6, [R9]
    MOV R2, R1
    MOV R1, R0
    ADD R0, SP, #0x140+var_100
    LDR.W R10, [SP,#0x140+arg_0]
    STR R6, [SP,#0x140+var_2C]
    BL sub_328D4
    MOV R2, R5
    MOV R1, R4
    ADD R0, SP, #0x140+var_100
    BL sub_3278C
    ADD R0, SP, #0x140+var_100
    ADD R1, SP, #0x140+src
    BL sub_32BC0
    ADD R0, SP, #0x140+var_4C
    LDM R0, {R0,R2,R3}
    MOVS R6, R0
    ADD.W R3, R3, #0x14
    STR R3, [SP,#0x140+var_44]
    IT 
    MOVNE R6, #1
    CMP R0, #0x2B
    IT 
    MOVGT R6, #0
    CMP R3, #0x13
    ITE 
    MOVHI R3, R2
    ADDLS R3, R2, #1
    STR R3, [SP,#0x140+var_48]
    CMP R6, #0
    BNE loc_33B82
loc_33AA8:
    CMP R0, #0x2B
    BLE loc_33BAA
loc_33AAC:
    ADD.W R8, SP, #0x140+var_8C
    ADD R7, SP, #0x140+var_A0
    ADD R4, SP, #0x140+src
    MOV R11, R6
    MOVS R5, #0x14
loc_33AB8:
    RSB.W R2, R0, #0x40
    MOV R1, R4
    ADD R0, R8
    BLX memcpy
    LDR R3, [SP,#0x140+var_4C]
    LDR R6, [SP,#0x140+var_7C]
    MOV R1, SP
    RSB.W LR, R3, #0x40
    LDR R3, [SP,#0x140+var_84]
    REV.W R12, R6
    LDR R6, [SP,#0x140+var_70]
    LDR R2, [SP,#0x140+var_88]
    SUB.W R5, R5, LR
    REV R3, R3
    ADD R4, LR
    STR R3, [SP,#0x140+var_138]
    REV.W LR, R6
    LDR R3, [SP,#0x140+var_80]
    REV R2, R2
    LDR R6, [SP,#0x140+var_6C]
    STR R2, [SP,#0x140+var_13C]
    REV R2, R3
    STR.W R12, [SP,#0x140+var_130]
    REV.W R12, R6
    LDR R3, [SP,#0x140+var_78]
    LDR R6, [SP,#0x140+var_60]
    STR R2, [SP,#0x140+var_134]
    REV R3, R3
    LDR R2, [SP,#0x140+var_74]
    STR R3, [SP,#0x140+var_12C]
    REV R2, R2
    LDR R3, [SP,#0x140+var_68]
    STR R2, [SP,#0x140+var_128]
    STR.W LR, [SP,#0x140+var_124]
    REV.W LR, R6
    LDR R2, [SP,#0x140+var_64]
    REV R3, R3
    LDR R6, [SP,#0x140+var_5C]
    LDR R0, [SP,#0x140+var_8C]
    REV R2, R2
    STR.W R12, [SP,#0x140+var_120]
    REV.W R12, R6
    STR R3, [SP,#0x140+var_11C]
    REV R0, R0
    LDR R3, [SP,#0x140+var_58]
    STR R2, [SP,#0x140+var_118]
    LDR R6, [SP,#0x140+var_54]
    REV R3, R3
    LDR R2, [SP,#0x140+var_50]
    STR R0, [SP,#0x140+var_140]
    MOV R0, R7
    STR.W LR, [SP,#0x140+var_114]
    REV R2, R2
    REV.W LR, R6
    STR.W R12, [SP,#0x140+var_110]
    STR R3, [SP,#0x140+var_10C]
    STR.W LR, [SP,#0x140+var_108]
    STR R2, [SP,#0x140+var_104]
    BL sub_322B0
    CMP R5, #0x3F
    STR.W R11, [SP,#0x140+var_4C]
    MOV.W R0, #0
    BGT loc_33AB8
loc_33B5C:
    MOV R2, R5
loc_33B5E:
    MOV R1, R4
    MOV R0, R8
    MOVS R3, #0x4C
    BLX __memcpy_chk
    STR R5, [SP,#0x140+var_4C]
loc_33B6A:
    MOV R1, R10
    MOV R0, R7
    BL sub_32BC0
    LDR R2, [SP,#0x140+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_33BB8
loc_33B7C:
    ADD SP, SP, #0x11C
    POP.W {R4-R11,PC}
loc_33B82:
    ADD R4, SP, #0x140+src
    ADD R3, SP, #0x140+var_28
    ADDS R6, R3, R0
    ADD R7, SP, #0x140+var_A0
    LDM R4!, {R0-R3}
    STR.W R0, [R6,#-0x64]
    LDR R0, [R4]
    STR.W R1, [R6,#-0x60]
    STR.W R2, [R6,#-0x5C]
    STR.W R0, [R6,#-0x54]
    STR.W R3, [R6,#-0x58]
    LDR R3, [SP,#0x140+var_4C]
    ADDS R3, #0x14
    STR R3, [SP,#0x140+var_4C]
    B loc_33B6A
loc_33BAA:
    MOVS R2, #0x14
    ADD R4, SP, #0x140+src
    MOV R5, R2
    ADD.W R8, SP, #0x140+var_8C
    ADD R7, SP, #0x140+var_A0
    B loc_33B5E
loc_33BB8:
    BLX __stack_chk_fail
```
Output: R2, R5
    MOV R1, R4
    MOV R0, R8
    MOVS R3, #0x4C
    BLX __memcpy_chk
    ADD W5, W5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5C
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5, #0x3F
    B.LT loc_33B5E
    MOV.W R0, #0
    ADD.W R5, R5, #0x1
    CMP W5
############
```assembly
loc_38A44:
    PUSH {R3,LR}
    POP {R3,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "callee-saves-registers-present"
]
```<|im_end|>
############
```assembly
loc_187A4:
    PUSH.W {R4-R8,LR}
    MOV R6, #0x56190
    SUB SP, SP, #0xD0
    MOV R5, R0
    MOVS R0, #0x10
    LDR R3, [R6]
    MOV R8, R1
    MOV R7, R2
    STR R3, [SP,#0xE8+var_1C]
    BLX malloc
    MOV R4, R0
    CBZ R0, loc_1880E
loc_187C6:
    LDR R1, [R5,#0x14]
    MOVS R3, #0
    STR.W R8, [R4]
    ADDS R1, #1
    STR R7, [R4,#4]
    CMP.W R1, #0x20000000
    STR R1, [R5,#0x14]
    STR R3, [R4,#8]
    STR R3, [R4,#0xC]
    LDR R0, [R5,#0x18]
    BCS loc_1883A
loc_187E0:
    LSLS R1, R1, #2
    CBZ R0, loc_18806
loc_187E4:
    BLX realloc
loc_187E8:
    CBZ R0, loc_1883A
loc_187EA:
    LDR R3, [R5,#0x14]
    LDR R2, [SP,#0xE8+var_1C]
    ADD.W R3, R3, #0x40000000
    STR R0, [R5,#0x18]
    SUBS R3, #1
    STR.W R4, [R0,R3,LSL#2]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_18862
loc_18800:
    ADD SP, SP, #0xD0
    POP.W {R4-R8,PC}
loc_18806:
    MOV R0, R1
    BLX malloc
    B loc_187E8
loc_1880E:
    MOV R3, #0x3AE48
    ADD.W LR, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM.W LR!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [LR],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB.W R3, [LR]
    BL sub_12E78
loc_18838:
    B loc_187C6
loc_1883A:
    MOV R3, #0x3AE48
    ADD R7, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM R7!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [R7],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R7]
    BL sub_12E78
loc_1885E:
    MOVS R0, #0
    B loc_187EA
loc_18862:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:size_t",
  "arg2-type:size_t",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (malloc)",
  "external-call-type:data-processing-helper (realloc)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:shift-left",
  "bitwise-operation:shift-right",
  "bitwise-operation:OR",
  "bitwise-operation:XOR",
  "bitwise-mask:0x56190",
  "bitwise-mask:0x20000000",
  "bitwise-mask:0x40000000",
  "bitwise-mask:0x3AE48",
  "bitwise-mask:0x54E4",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:malloc",
  "address-or-offset-constant:realloc",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:dynamically-sized-memory-allocation",
  "inferred-algorithm:loop-with-counter-pattern",
  "inferred-algorithm:dynamic-memory-resizing",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:buffer-management",
  "inferred-algorithm:stack-protection"
]
```<|im_end|>
############
```assembly
loc_112EC:
    ADR R12, 0x112F4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strcpy_ptr - 0x552F4)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:unknown",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strcpy)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112F4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strcpy_ptr",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:data-copy-or-transfer"
]
```<|im_end|>
############
```assembly
loc_28778:
    PUSH.W {R4-R11,LR}
    MOVW R7, #0xA478
    LDR R4, [R0,#0xC]
    MOVT.W R7, #0xD76A
    LDR R2, [R0,#8]
    MOVW R3, #0xB756
    LDR R5, [R0,#0xC]
    MOVT.W R3, #0xE8C7
    EORS R2, R4
    LDR R4, [R0,#4]
    LDR R6, [R0,#0xC]
    SUB SP, SP, #0x34
    ANDS R2, R4
    LDR R4, [R1]
    EORS R2, R5
    LDR R5, [R0]
    ADD R3, R6
    LDR R6, [R0,#4]
    ADD R7, R5
    LDR R5, [R0,#8]
    ADD R7, R2
    LDR R2, [R0,#4]
    ADD R7, R4
    STR R4, [SP,#0x58+var_50]
    EOR.W R8, R2, R5
    LDR R5, [R1,#4]
    ADD.W R9, R6, R7,ROR#25
    MOVW R12, #0x70DB
    ADDS R4, R3, R5
    LDR R3, [R0,#8]
    AND.W R8, R8, R9
    LDR R7, [R0,#4]
    EOR.W R8, R8, R3
    EOR.W R3, R6, R9
    LDR R6, [R1,#8]
    ADD R4, R8
    MOVT.W R12, #0x2420
    STR R5, [SP,#0x58+var_4C]
    ADD.W R4, R9, R4,ROR#20
    MOVW LR, #0xFAF
    MOV R2, R6
    LDR R6, [R0,#8]
    ANDS R3, R4
    STR R2, [SP,#0x58+var_48]
    ADD R12, R6
    EORS R3, R7
    ADD R12, R2
    EOR.W R5, R9, R4
    ADD R3, R12
    LDR R2, [R1,#0xC]
    MOV R6, #0xC1BDCEEE
    ADD.W R3, R4, R3,ROR#15
    ADD R6, R7
    ANDS R5, R3
    ADD R6, R2
    EOR.W R5, R5, R9
    LDR R7, [R1,#0x10]
    ADD R5, R6
    STR R2, [SP,#0x58+var_44]
    LDR R6, [R1,#0x14]
    EOR.W R2, R4, R3
    ADD.W R5, R3, R5,ROR#10
    MOVT.W LR, #0xF57C
    ADD LR, R7
    ANDS R2, R5
    STR R7, [SP,#0x58+var_40]
    EORS R2, R4
    ADD.W R7, R9, LR
    STR R6, [SP,#0x58+var_54]
    ADD R2, R7
    LDR R7, [SP,#0x58+var_54]
    EOR.W R8, R3, R5
    MOVW R6, #0xC62A
    ADD.W R2, R5, R2,ROR#25
    MOVT.W R6, #0x4787
    ADD R6, R7
    AND.W R8, R8, R2
    ADD R4, R6
    EOR.W R8, R8, R3
    ADD R8, R4
    LDR R6, [R1,#0x18]
    EOR.W R12, R5, R2
    MOVW R7, #0x4613
    ADD.W R8, R2, R8,ROR#20
    MOVT.W R7, #0xA830
    ADD R7, R6
    AND.W R12, R12, R8
    ADD R3, R7
    EOR.W R12, R12, R5
    ADD R12, R3
    LDR.W R11, [R1,#0x1C]
    STR R6, [SP,#0x58+var_3C]
    MOVW LR, #0x9501
    ADD.W R12, R8, R12,ROR#15
    EOR.W R6, R2, R8
    MOVT.W LR, #0xFD46
    LDR R3, [R1,#0x20]
    ADD LR, R11
    AND.W R6, R6, R12
    ADD R5, LR
    EORS R6, R2
    ADD R6, R5
    MOV R4, R3
    MOV R3, #0x698098D8
    ADD.W R6, R12, R6,ROR#10
    EOR.W R7, R8, R12
    ADD R3, R4
    MOVW R5, #0xF7AF
    ADD R2, R3
    AND.W R3, R7, R6
    EOR.W R3, R3, R8
    LDR R7, [R1,#0x24]
    ADD R3, R2
    MOVT.W R5, #0x8B44
    EOR.W R2, R12, R6
    ADD R5, R7
    ADD.W R3, R6, R3,ROR#25
    STR R4, [SP,#0x58+var_38]
    ANDS R2, R3
    STR R7, [SP,#0x58+var_34]
    EOR.W R2, R2, R12
    LDR R4, [R1,#0x28]
    ADD R8, R5
    MOVW LR, #0xD7BE
    ADD R8, R2
    MOVT.W LR, #0x895C
    MOV R5, R4
    EOR.W R4, R6, R3
    ADD.W R8, R3, R8,ROR#20
    SUB.W R7, R5, #0xA400
    AND.W R4, R4, R8
    SUBS R7, #0x4F
    EORS R4, R6
    ADD R7, R12
    ADD R7, R4
    STR R5, [SP,#0x58+var_30]
    LDR R5, [R1,#0x2C]
    EOR.W R2, R3, R8
    ADD.W R7, R8, R7,ROR#15
    LDR.W R9, [R1,#0x30]
    ADD LR, R5
    ANDS R2, R7
    EORS R2, R3
    ADD LR, R6
    ADD LR, R2
    MOV R4, #0x6B901122
    EOR.W R2, R8, R7
    ADD.W LR, R7, LR,ROR#10
    ADD R4, R9
    ADD R4, R3
    AND.W R3, R2, LR
    EOR.W R3, R3, R8
    LDR.W R12, [R1,#0x34]
    ADD R4, R3
    EOR.W R6, R7, LR
    MOV R2, #0xFD987193
    ADD.W R4, LR, R4,ROR#25
    ADD R2, R12
    AND.W R3, R6, R4
    ADD R2, R8
    EORS R3, R7
    LDR.W R10, [R1,#0x38]
    ADD R2, R3
    MOVW R6, #0x438E
    EOR.W R3, LR, R4
    MOVT.W R6, #0xA679
    ADD.W R2, R4, R2,ROR#20
    ADD R6, R10
    ANDS R3, R2
    LDR.W R8, [R1,#0x3C]
    EOR.W R3, R3, LR
    ADDS R1, R6, R7
    ADD R1, R3
    EOR.W R7, R4, R2
    MOV R6, #0x49B40821
    ADD.W R1, R2, R1,ROR#15
    STR R5, [SP,#0x58+var_2C]
    ADD R6, R8
    LDR R5, [SP,#0x58+var_4C]
    ANDS R7, R1
    ADD R6, LR
    EORS R7, R4
    MOV R3, #0xF61E2562
    ADD R6, R7
    ADD R3, R5
    MOVW R7, #0xB340
    ADD R4, R3
    LDR R3, [SP,#0x58+var_3C]
    ADD.W R6, R1, R6,ROR#10
    MOVT.W R7, #0xC040
    ADD R7, R3
    EOR.W R3, R1, R6
    ANDS R3, R2
    LDR R5, [SP,#0x58+var_2C]
    EORS R3, R1
    MOVW LR, #0x5A51
    ADD R3, R4
    MOVT.W LR, #0x265E
    ADD R7, R2
    ADD LR, R5
    ADD.W R3, R6, R3,ROR#27
    ADD LR, R1
    EOR.W R2, R6, R3
    LDR R5, [SP,#0x58+var_50]
    ANDS R1, R2
    MOVW R4, #0xC7AA
    EOR.W R2, R1, R6
    MOVT.W R4, #0xE9B6
    ADD R7, R2
    ADD R4, R5
    ADD R4, R6
    LDR R5, [SP,#0x58+var_54]
    ADD.W R7, R3, R7,ROR#23
    MOVW R1, #0x105D
    EOR.W R2, R3, R7
    MOVT.W R1, #0xD62F
    ANDS R6, R2
    MOVW R2, #0x1453
    EORS R6, R3
    MOVT.W R2, #0x244
    ADD LR, R6
    LDR R6, [SP,#0x58+var_30]
    ADD R1, R5
    LDR R5, [SP,#0x58+var_40]
    ADD.W LR, R7, LR,ROR#18
    ADD R2, R6
    EOR.W R6, R7, LR
    ADD R1, R3
    ANDS R3, R6
    ADD R2, R7
    EORS R3, R7
    MOVW R6, #0xE681
    ADD R4, R3
    MOVT.W R6, #0xD8A1
    ADD R6, R8
    ADD.W R4, LR, R4,ROR#12
    ADD R6, LR
    EOR.W R3, LR, R4
    ANDS R3, R7
    MOVW R7, #0xFBC8
    EOR.W R3, R3, LR
    MOVT.W R7, #0xE7D3
    ADD R1, R3
    ADD R7, R5
    ADD R7, R4
    ADD.W R1, R4, R1,ROR#27
    EOR.W R3, R4, R1
    AND.W R3, R3, LR
    MOVW LR, #0xCDE6
    EORS R3, R4
    MOVT.W LR, #0x21E1
    ADD R2, R3
    LDR R3, [SP,#0x58+var_34]
    ADD.W R2, R1, R2,ROR#23
    ADD LR, R3
    EOR.W R3, R1, R2
    ADD LR, R1
    ANDS R3, R4
    MOVW R4, #0x7D6
    EORS R3, R1
    MOVT.W R4, #0xC337
    ADD R6, R3
    ADD R4, R10
    ADD R4, R2
    ADD.W R6, R2, R6,ROR#18
    EOR.W R3, R2, R6
    ANDS R3, R1
    MOVW R1, #0xD87
    EORS R3, R2
    MOVT.W R1, #0xF4D5
    ADD R7, R3
    LDR R3, [SP,#0x58+var_44]
    ADD.W R7, R6, R7,ROR#12
    ADD R1, R3
    EOR.W R3, R6, R7
    ADD R1, R6
    ANDS R3, R2
    STR R1, [SP,#0x58+var_40]
    EORS R3, R6
    LDR R1, [SP,#0x58+var_38]
    ADD R3, LR
    MOV R2, #0x455A14ED
    ADD.W R3, R7, R3,ROR#27
    ADD R2, R1
    EOR.W LR, R7, R3
    LDR R1, [SP,#0x58+var_40]
    AND.W R6, LR, R6
    ADD R2, R7
    EORS R6, R7
    MOVW LR, #0xE905
    ADD R4, R6
    MOVT.W LR, #0xA9E3
    ADD LR, R12
    ADD.W R4, R3, R4,ROR#23
    ADD LR, R3
    EOR.W R6, R3, R4
    ANDS R6, R7
    MOVW R7, #0xA3F8
    EORS R6, R3
    MOVT.W R7, #0xFCEF
    ADD R1, R6
    LDR R6, [SP,#0x58+var_48]
    ADD.W R1, R4, R1,ROR#18
    ADD R7, R6
    EOR.W R6, R4, R1
    ADD R7, R4
    ANDS R6, R3
    MOVW R3, #0x2D9
    EORS R6, R4
    MOVT.W R3, #0x676F
    ADD R2, R6
    ADD R3, R11
    ADD R3, R1
    ADD.W R2, R1, R2,ROR#12
    EOR.W R6, R1, R2
    ANDS R6, R4
    MOVW R4, #0x4C8A
    EORS R6, R1
    MOVT.W R4, #0x8D2A
    ADD R6, LR
    ADD R4, R9
    ADD R4, R2
    ADD.W R6, R2, R6,ROR#27
    EOR.W LR, R2, R6
    AND.W R1, LR, R1
    STR R1, [SP,#0x58+var_40]
    LDR R1, [SP,#0x58+var_54]
    SUB.W LR, R1, #0x5C000
    LDR R1, [SP,#0x58+var_40]
    SUBW LR, LR, #0x6BE
    STR R5, [SP,#0x58+var_40]
    EORS R1, R2
    ADD LR, R6
    ADD R7, R1
    ADD.W R7, R6, R7,ROR#23
    EOR.W R1, R6, R7
    ANDS R1, R2
    MOVW R2, #0xF681
    EORS R1, R6
    MOVT.W R2, #0x8771
    ADD R3, R1
    LDR R1, [SP,#0x58+var_38]
    ADD.W R3, R7, R3,ROR#18
    ADD R2, R1
    EOR.W R1, R7, R3
    ADD R2, R7
    ANDS R6, R1
    EORS R6, R7
    MOVW R7, #0x6122
    ADD R4, R6
    LDR R6, [SP,#0x58+var_2C]
    MOVT.W R7, #0x6D9D
    ADD.W R4, R3, R4,ROR#12
    ADD R7, R6
    EORS R1, R4
    ADD R7, R3
    ADD R1, LR
    EORS R3, R4
    MOV R6, #0xFDE5380C
    ADD.W R1, R4, R1,ROR#28
    ADD R6, R10
    EORS R3, R1
    ADD R6, R4
    ADD R3, R2
    EORS R4, R1
    LDR R2, [SP,#0x58+var_4C]
    MOVW LR, #0xEA44
    ADD.W R3, R1, R3,ROR#21
    MOVT.W LR, #0xA4BE
    EORS R4, R3
    ADD LR, R2
    ADD R4, R7
    ADD LR, R1
    EORS R1, R3
    MOVW R2, #0xCFA9
    ADD.W R4, R3, R4,ROR#16
    MOVT.W R2, #0x4BDE
    EORS R1, R4
    ADD R2, R5
    ADD R1, R6
    ADD R2, R3
    EORS R3, R4
    MOVW R7, #0x4B60
    ADD.W R1, R4, R1,ROR#9
    MOVT.W R7, #0xF6BB
    EORS R3, R1
    ADD R7, R11
    ADD R3, LR
    ADD R7, R4
    EORS R4, R1
    LDR R5, [SP,#0x58+var_30]
    ADD.W R3, R1, R3,ROR#28
    MOVW R6, #0xBC70
    EORS R4, R3
    MOVT.W R6, #0xBEBF
    ADD R4, R2
    ADD R6, R5
    ADD R6, R1
    EORS R1, R3
    ADD.W R4, R3, R4,ROR#21
    MOVW LR, #0x7EC6
    EORS R1, R4
    MOVT.W LR, #0x289B
    ADD R1, R7
    ADD LR, R12
    ADD LR, R3
    EORS R3, R4
    ADD.W R1, R4, R1,ROR#16
    LDR R7, [SP,#0x58+var_50]
    SUB.W R5, R5, #0x100000
    EORS R3, R1
    SUBW R2, R5, #0xB83
    ADD R3, R6
    STR R2, [SP,#0x58+var_30]
    MOV R2, #0xEAA127FA
    ADD.W R3, R1, R3,ROR#9
    ADD R2, R7
    LDR R6, [SP,#0x58+var_44]
    ADD R2, R4
    EORS R4, R1
    EORS R4, R3
    MOVW R7, #0x3085
    ADD R4, LR
    MOVT.W R7, #0xD4EF
    ADD R7, R6
    LDR R5, [SP,#0x58+var_3C]
    ADD.W R4, R3, R4,ROR#28
    ADD R7, R1
    EORS R1, R3
    MOVW R6, #0x1D05
    EORS R1, R4
    MOVT.W R6, #0x488
    ADD R1, R2
    ADD R6, R5
    ADD R6, R3
    EORS R3, R4
    ADD.W R1, R4, R1,ROR#21
    LDR R5, [SP,#0x58+var_34]
    EORS R3, R1
    MOVW LR, #0xD039
    ADD R3, R7
    MOVT.W LR, #0xD9D4
    ADD LR, R5
    MOVW R2, #0x99E5
    ADD.W R3, R1, R3,ROR#16
    ADD LR, R4
    EORS R4, R1
    MOVT.W R2, #0xE6DB
    EORS R4, R3
    ADD R2, R9
    ADD R4, R6
    ADD R2, R1
    EORS R1, R3
    MOVW R7, #0x7CF8
    ADD.W R4, R3, R4,ROR#9
    MOVT.W R7, #0x1FA2
    EORS R1, R4
    ADD R7, R8
    ADD R1, LR
    ADD R7, R3
    EOR.W LR, R3, R4
    LDR R3, [SP,#0x58+var_48]
    ADD.W R1, R4, R1,ROR#28
    MOV R6, #0xC4AC5665
    ADD R6, R3
    EOR.W R3, LR, R1
    ADD R3, R2
    ADD R6, R4
    EORS R4, R1
    LDR R2, [SP,#0x58+var_50]
    ADD.W R3, R1, R3,ROR#21
    MOVW LR, #0x2244
    EORS R4, R3
    MOVT.W LR, #0xF429
    ADD R4, R7
    ADD LR, R2
    EOR.W R2, R1, R3
    ADD LR, R1
    ADD.W R4, R3, R4,ROR#16
    MOVW R1, #0xFF97
    EORS R2, R4
    MOVT.W R1, #0x432A
    ADD R6, R2
    ADD R1, R11
    ADD R1, R3
    MOVW R11, #0x23A7
    ADD.W R6, R4, R6,ROR#9
    MOVT.W R11, #0xAB94
    ORN.W R3, R6, R3
    ADD R11, R10
    EORS R3, R4
    ADD R11, R4
    ADD R3, LR
    LDR R2, [SP,#0x58+var_54]
    MOV R7, #0xFC93A039
    ADD.W R3, R6, R3,ROR#26
    ADD R7, R2
    ORN.W R4, R3, R4
    ADD R7, R6
    EORS R4, R6
    MOVW R2, #0x59C3
    ADD R1, R4
    MOVT.W R2, #0x655B
    ADD R2, R9
    LDR R4, [SP,#0x58+var_44]
    ADD.W R1, R3, R1,ROR#22
    ADD R2, R3
    ORN.W R6, R1, R6
    MOVW LR, #0xCC92
    EORS R6, R3
    MOVT.W LR, #0x8F0C
    ADD R11, R6
    ADD LR, R4
    LDR R4, [SP,#0x58+var_4C]
    ADD LR, R1
    ADD.W R11, R1, R11,ROR#17
    MOVW R9, #0x5DD1
    ORN.W R3, R11, R3
    MOVT.W R9, #0x8584
    EORS R3, R1
    ADD R9, R4
    ADD R7, R3
    LDR R4, [SP,#0x58+var_38]
    MOV R10, #0x6FA87E4F
    ADD.W R7, R11, R7,ROR#11
    ADD R10, R4
    ORN.W R1, R7, R1
    LDR R4, [SP,#0x58+var_30]
    EOR.W R1, R1, R11
    ADD R9, R7
    ADD R2, R1
    ADD R4, R11
    LDR R6, [SP,#0x58+var_3C]
    MOVW R3, #0x11A1
    ADD.W R2, R7, R2,ROR#26
    MOV R5, R4
    ORN.W R11, R2, R11
    MOVW R4, #0xE6E0
    EOR.W R11, R11, R7
    MOVT.W R4, #0xFE2C
    ADD LR, R11
    LDR R1, [SP,#0x58+var_40]
    ADD R4, R8
    MOVW R8, #0x4314
    ADD.W LR, R2, LR,ROR#22
    MOVT.W R8, #0xA301
    ORN.W R7, LR, R7
    ADD R8, R6
    EORS R7, R2
    MOVW R6, #0x7E82
    ADD R5, R7
    MOVT.W R6, #0xF753
    ADD R6, R1
    MOVT.W R3, #0x4E08
    ADD.W R5, LR, R5,ROR#17
    LDR R1, [SP,#0x58+var_2C]
    ADD R10, R2
    LDR R7, [SP,#0x58+var_48]
    ORN.W R2, R5, R2
    ADD R3, R12
    MOV R12, #0xBD3AF235
    EOR.W R11, R2, LR
    ADD R12, R1
    LDR R2, [SP,#0x58+var_34]
    MOV R1, #0x2AD7D2BB
    ADD R4, LR
    ADD R1, R7
    MOV R7, #0xEB86D391
    ADD R8, R5
    ADD R7, R2
    ADD.W R2, R11, R9
    ADD.W R2, R5, R2,ROR#11
    ORN.W LR, R2, LR
    ADD R3, R2
    EOR.W LR, LR, R5
    ADD LR, R10
    ADD.W LR, R2, LR,ROR#26
    ORN.W R5, LR, R5
    ADD R6, LR
    EORS R5, R2
    ADD R5, R4
    ADD.W R5, LR, R5,ROR#22
    ORN.W R2, R5, R2
    ADD R12, R5
    EOR.W R2, R2, LR
    ADD R8, R2
    LDR R2, [R0]
    ADD.W R8, R5, R8,ROR#17
    ORN.W LR, R8, LR
    ADD R1, R8
    EOR.W LR, LR, R5
    ADD R3, LR
    ADD.W R3, R8, R3,ROR#11
    ORN.W R5, R3, R5
    ADD R7, R3
    EOR.W R5, R5, R8
    ADD R6, R5
    ADD.W R6, R3, R6,ROR#26
    ORN.W R8, R6, R8
    ADD R2, R6
    EOR.W R8, R8, R3
    STR R2, [R0]
    ADD R12, R8
    LDR R2, [R0,#0xC]
    ADD.W R12, R6, R12,ROR#22
    ORN.W R3, R12, R3
    ADD R2, R12
    EORS R3, R6
    STR R2, [R0,#0xC]
    ADD R1, R3
    LDR R3, [R0,#4]
    ADD.W R1, R12, R1,ROR#17
    ORN.W R6, R1, R6
    ADDS R2, R3, R1
    EOR.W R6, R6, R12
    LDR R3, [R0,#8]
    ADD R7, R6
    ADD R1, R3
    STR R1, [R0,#8]
    ADD.W R7, R2, R7,ROR#11
    STR R7, [R0,#4]
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
```
Output: R3, R8,ROR#20
    ADD R4, R5
    EOR.W R4, R4, R2
    ADD W0, R8, R4
    ADD W1, R0, R4
    ADD W2, R1, R4
    ADD W3, R2, R4
    ADD W4, R3, R4
    ADD W5, R4, R4
    ADD W6, R5, R4
    ADD W7, R6, R4
    ADD W8, R7, R4
    ADD W9, R8, R4
    ADD W10, R0, R4
    ADD W11, R1, R4
    ADD W12, R2, R4
    ADD W13, R3, R4
    ADD W14, R4, R4
    ADD W15, R5, R4
    ADD W16, R6, R4
    ADD W17, R7, R4
    ADD W18, R8, R4
    ADD W19, R0, R4
    ADD W20, R1, R4
    ADD W21, R2, R4
    ADD W22, R3, R4
    ADD W23, R4, R4
    ADD W24, R5, R4
    ADD W25, R6, R4
    ADD W26, R7, R4
    ADD W27, R8, R4
    ADD W28, R0, R4
    ADD W29, R1, R4
    ADD W30, R2, R4
    ADD W31, R3, R4
    ADD W32, R4, R4
    ADD W33, R5, R4
    ADD W34, R6, R4
    ADD W35, R7, R4
    ADD W36, R8, R4
    ADD W37, R0, R4
    ADD W38, R1, R4
    ADD W39, R2, R4
    ADD W40, R3, R4
    ADD W41, R4, R4
    ADD W42, R5, R4
    ADD W43, R6, R4
    ADD W44, R7, R4
    ADD W45, R8, R4
    ADD W46, R0, R4
    ADD W47, R1, R4
    ADD W48, R2, R4
    ADD W49, R3, R4
    ADD W50, R4, R4
    ADD W51, R5, R4
    ADD W52, R6, R4
    ADD W53, R7, R4
    ADD W54, R8, R4
    ADD W55, R0, R4
    ADD W56, R1, R4
    ADD W57, R2, R4
    ADD W58, R3, R4
    ADD W59, R4, R4
    ADD W60, R5, R4
    ADD W61, R6, R4
    ADD W62, R7, R4
    ADD W63, R8, R4
    ADD W64, R0, R4
    ADD W65, R1, R4
    ADD W66, R2, R4
    ADD W67, R3, R4
    ADD W68, R4, R4
    ADD W69, R5, R4
    ADD W70, R6, R4
    ADD W71, R7, R4
    ADD W72, R8, R4
    ADD W73, R0, R4
    ADD W74, R1, R4
    ADD W75, R2, R4
    ADD W76, R3, R4
    ADD W77, R4, R4
    ADD W78, R5, R4
    ADD W79, R6, R4
    ADD W80, R7, R4
    ADD W81, R8, R4
    ADD W82, R0, R4
    ADD W83,
############
```assembly
loc_56980:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_113E4:
    ADR R12, 0x113EC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strchr_ptr - 0x553EC)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strchr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x113EC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strchr_ptr",
  "inferred-algorithm:string-search",
  "inferred-algorithm:runtime-code-fetch"
]
```<|im_end|>
############
```assembly
loc_1E170:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x24
    MOV.W R9, #0
    MOV R10, R2
    STR R3, [SP,#0x48+var_30]
    SUBS R2, R1, R3
    STR R1, [SP,#0x48+var_34]
    ADDS R3, #1
    STR R0, [SP,#0x48+var_3C]
    STR R2, [SP,#0x48+var_38]
    STR R3, [SP,#0x48+var_2C]
loc_1E18A:
    LDR R3, [SP,#0x48+var_38]
    CMP R9, R3
    BGT loc_1E1A8
loc_1E190:
    LDR R3, [SP,#0x48+var_3C]
    MOV.W R0, R9,LSL#2
    LDR.W R2, [R3,R9,LSL#2]
    CMP R2, #0
    BNE loc_1E230
loc_1E19E:
    LDR R3, [SP,#0x48+var_38]
    ADD.W R9, R9, #1
    CMP R9, R3
    BLE loc_1E190
loc_1E1A8:
    LDR R3, [SP,#0x48+var_34]
    CMP R3, #0
    BLE loc_1E1E4
loc_1E1AE:
    LDR R2, [SP,#0x48+var_30]
    MOV R1, R3
    SUBS R3, R2, R3
    LDR R2, [SP,#0x48+var_3C]
    ADDS R4, R1, R3
    B loc_1E1D4
loc_1E1BA:
    LDR.W R1, [R10,R3,LSL#2]
    LDR R0, [R2]
    CMP R1, R0
    BHI loc_1E22A
loc_1E1C4:
    CMP R0, R1
    ADD.W R3, R3, #1
    ADD.W R2, R2, #4
    BHI loc_1E1E4
loc_1E1D0:
    CMP R3, R4
    BEQ loc_1E1E4
loc_1E1D4:
    CMP R3, #0
    BGE loc_1E1BA
loc_1E1D8:
    LDR R0, [R2]
    MOVS R1, #0
    ADDS R3, #1
    ADDS R2, #4
    CMP R0, R1
    BLS loc_1E1D0
loc_1E1E4:
    LDR R2, [SP,#0x48+var_34]
    SUBS R4, R2, #1
    BMI loc_1E22A
loc_1E1EA:
    LDR R1, [SP,#0x48+var_30]
    LDR R6, [SP,#0x48+var_3C]
    SUBS R3, R1, R2
    ADD R4, R3
    ADD.W R0, R6, R2,LSL#2
    MOVS R2, #1
loc_1E1F8:
    CMP R4, #0
    LDR.W R1, [R0,#-4]
    MOV.W R3, #0
    ITE 
    LDRGE.W R5, [R10,R4,LSL#2]
    MOVLT.W R5, #0xFFFFFFFF
    ADD.W R4, R4, #0xFFFFFFFF
    IT 
    MVNGE R5, R5
    ADDS R2, R2, R1
    ADC.W R3, R3, #0
    ADDS R2, R2, R5
    ADC.W R3, R3, #0
    STR.W R2, [R0,#-4]!
    CMP R6, R0
    MOV R2, R3
    BNE loc_1E1F8
loc_1E22A:
    ADD SP, SP, #0x24
    POP.W {R4-R11,PC}
loc_1E230:
    LSRS R5, R2, #0x10
    MOV.W R3, R2,LSL#16
    ITE 
    MOVNE R1, R2
    MOVEQ R1, R3
    LSRS R4, R1, #0x18
    LSLS R3, R1, #8
    CMP R4, #0
    ITET 
    MOVNE R3, R1
    MOVEQ R4, #8
    MOVNE R4, #0
    CMP R5, #0
    MOV.W R5, R3,LSR#28
    ITE 
    MOVEQ R1, #0x10
    MOVNE R1, #0
    CMP R5, #0
    MOV.W R5, R3,LSL#4
    ADD R1, R4
    ITE 
    MOVEQ R3, R5
    MOVNE R5, #0
    MOV.W R4, R3,LSR#30
    IT 
    MOVEQ R5, #4
    CMP R4, #0
    ADD R1, R5
    MOV.W R4, R3,LSL#2
    ITE 
    MOVEQ R5, #2
    MOVNE R5, #0
    ADD R1, R5
    IT 
    MOVEQ R3, R4
    CMP R3, #0
    IT 
    ADDGE R1, #1
    LSLS R2, R1
    CBZ R1, loc_1E2A4
loc_1E28A:
    LDR R4, [SP,#0x48+var_34]
    ADD.W R3, R9, #1
    CMP R3, R4
    BGE loc_1E2A4
loc_1E294:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E2A4:
    LDR R0, [SP,#0x48+var_2C]
    LDR R3, [SP,#0x48+arg_0]
    ADD.W R8, R0, R9
    LDR R0, [SP,#0x48+var_34]
    UMULL.W R2, R3, R3, R2
    SUB.W R8, R8, R0
    ADD.W R8, R1, R8,LSL#5
    LDR R1, [SP,#0x48+arg_4]
    SUB.W R8, R8, R1
    RSBS.W R8, R8, #1
    STR R3, [SP,#0x48+var_40]
    MOV R7, R3
    BMI loc_1E34A
loc_1E2CA:
    LDR R3, [SP,#0x48+var_38]
    SUB.W R12, R3, R8,ASR#5
    ANDS.W R8, R8, #0x1F
    BEQ loc_1E362
loc_1E2D6:
    LDR R3, [SP,#0x48+var_30]
    SUBS R5, R3, #1
    ADD.W R6, R12, R5
    CMP R9, R6
    BGT.W loc_1E18A
loc_1E2E4:
    LDR R3, [SP,#0x48+var_3C]
    MOVS R7, #0
    MOV R4, R7
    MOVS R2, #1
    ADD.W R6, R3, R6,LSL#2
    RSB.W R3, R8, #0x20
    STR R3, [SP,#0x48+var_44]
loc_1E2F6:
    CMP R5, #0
    ITETE 
    LDRGE.W R0, [R10,R5,LSL#2]
    MOVLT R1, #0
    LDRGE R3, [SP,#0x48+var_40]
    MOVLT R0, #0
    ADD.W R5, R5, #0xFFFFFFFF
    ADD.W R11, R12, R5
    IT 
    UMULLGE.W R0, R1, R0, R3
    MOVS R3, #0
    ADDS R0, R0, R4
    LDR R4, [R6]
    ADC.W R1, R1, #0
    LSL.W LR, R0, R8
    ADDS R2, R2, R4
    ORR.W LR, LR, R7
    ADC.W R3, R3, #0
    LDR R7, [SP,#0x48+var_44]
    MOV R4, R1
    MVN.W LR, LR
    ADDS.W R2, R2, LR
    ADC.W R3, R3, #0
    CMP R9, R11
    STR.W R2, [R6],#-4
    LSR.W R7, R0, R7
    MOV R2, R3
    BLE loc_1E2F6
loc_1E348:
    B loc_1E18A
loc_1E34A:
    CMN.W R8, #0x1F
    BLT.W loc_1E1A8
loc_1E352:
    RSB.W R8, R8, #0
    LSRS.W R7, R3, R8
    BEQ.W loc_1E1A8
loc_1E35E:
    LDR.W R12, [SP,#0x48+var_38]
loc_1E362:
    LDR R3, [SP,#0x48+var_30]
    SUBS R5, R3, #1
    ADD.W R6, R5, R12
    CMP R9, R6
    BGT.W loc_1E18A
loc_1E370:
    LDR R3, [SP,#0x48+var_3C]
    MOVS R2, #1
    MOV.W LR, #0
    ADD.W R6, R3, R6,LSL#2
loc_1E37C:
    CMP R5, #0
    LDR R4, [R6]
    MOV.W R3, #0
    ITEE 
    LDRGE.W R0, [R10,R5,LSL#2]
    MOVLT R1, #0
    MOVLT R0, #0
    ADD.W R5, R5, #0xFFFFFFFF
    IT 
    UMULLGE.W R0, R1, R7, R0
    ADDS.W R0, R0, LR
    ADC.W R1, R1, #0
    ADDS R2, R2, R4
    ADC.W R3, R3, #0
    MVNS R0, R0
    ADDS R2, R2, R0
    ADD.W R0, R12, R5
    ADC.W R3, R3, #0
    CMP R9, R0
    STR.W R2, [R6],#-4
    MOV LR, R1
    MOV R2, R3
    BLE loc_1E37C
loc_1E3BE:
    B loc_1E18A
```
Output:8+var_30]
    ADDS R3, R9, #1
    CMP R3, R0
    BGE loc_1E2BC
loc_1E2B0:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E2BC:
    LDR R0, [SP,#0x48+var_30]
    ADDS R3, R9, #1
    CMP R3, R0
    BGE loc_1E2D4
loc_1E2C0:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E2D4:
    LDR R0, [SP,#0x48+var_30]
    ADDS R3, R9, #1
    CMP R3, R0
    BGE loc_1E2EC
loc_1E2D8:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E2EC:
    LDR R0, [SP,#0x48+var_30]
    ADDS R3, R9, #1
    CMP R3, R0
    BGE loc_1E304
loc_1E2F0:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E304:
    LDR R0, [SP,#0x48+var_30]
    ADDS R3, R9, #1
    CMP R3, R0
    BGE loc_1E31C
loc_1E308:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E31C:
    LDR R0, [SP,#0x48+var_30]
    ADDS R3, R9, #1
    CMP R3, R0
    BGE loc_1E334
loc_1E320:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E334:
    LDR R0, [SP,#0x48+var_30]
    ADDS R3, R9, #1
    CMP R3, R0
    BGE loc_1E34C
loc_1E338:
    LDR R3, [SP,#0x48+var_3C]
    ADD R0, R3
    RSB.W R3, R1, #0x20
    LDR R0, [R0,#4]
    LSR.W R3, R0, R3
    ORRS R2, R3
loc_1E34C:
    LDR R0, [SP,#0x48+var_30]
    ADDS R3, R9, #1
    CMP R3, R0

############
```assembly
loc_2CEC8:
    PUSH.W {R4-R10,LR}
    MOV R4, #0x562CC
    LDR.W R3, [R4,#(dword_567DC - 0x562CC)]
    CMP R3, #0
    BEQ locret_2CF74
loc_2CEDC:
    MOV R6, R0
    LDR.W R0, [R4,#(dword_567D4 - 0x562CC)]
    MOV R5, R1
    RSB.W R2, R0, #0x40
    CMP R1, R2
    ITT 
    ADDLT.W R3, R4, #0x4C8
    ADDLT R0, R0, R3
    BLT loc_2CF62
loc_2CEF4:
    ADD.W R7, R4, #0x4C8
    ADDW R10, R4, #0x4C7
    MOV.W R9, #0
    MOV R8, R7
loc_2CF02:
    MOV R1, R6
    ADD R0, R7
    BLX memcpy
    LDR.W R3, [R4,#(dword_567D4 - 0x562CC)]
    MOV R1, R8
    LDR R0, =byte_56780
    RSB.W R3, R3, #0x40
    ADD R6, R3
    SUBS R5, R5, R3
    BL sub_322B0
    LDR.W R3, [R4,#(dword_5677C - 0x562CC)]
    LDR R1, =(dword_5677C+3)
loc_2CF24:
    ADDS R0, R3, #1
    LDRB.W LR, [R4,R3]
    LDRB.W R2, [R1,#1]!
    CMP.W R0, #0x4B0
    EOR.W R2, LR, R2
    STRB R2, [R4,R3]
    ITE 
    MOVLT R3, R0
    MOVGE R3, #0
    CMP R10, R1
    BNE loc_2CF24
loc_2CF42:
    CMP R3, #0x13
    STR.W R3, [R4,#(dword_5677C - 0x562CC)]
    BGT loc_2CF50
loc_2CF4A:
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R3, loc_2CF78
loc_2CF50:
    CMP R5, #0x3F
    STR.W R9, [R4,#(dword_567D4 - 0x562CC)]
    MOV.W R0, #0
    MOV.W R2, #0x40
    BGT loc_2CF02
loc_2CF60:
    LDR R0, =unk_56794
loc_2CF62:
    MOV R2, R5
    MOV R1, R6
    BLX memcpy
    LDR.W R3, [R4,#(dword_567D4 - 0x562CC)]
    ADD R5, R3
    STR.W R5, [R4,#(dword_567D4 - 0x562CC)]
loc_2CF74:
    POP.W {R4-R10,PC}
loc_2CF78:
    BL sub_2CBB0
    B loc_2CF50
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:unspecified-helper (sub_322B0)",
  "external-call-type:unspecified-helper (sub_2CBB0)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x40",
  "fixed-value-assignment:0x4B0",
  "fixed-value-assignment:0x13",
  "fixed-value-assignment:0x3F",
  "address-or-offset-constant:0x562CC",
  "address-or-offset-constant:dword_567DC",
  "address-or-offset-constant:dword_567D4",
  "address-or-offset-constant:dword_5677C",
  "address-or-offset-constant:dword_567D8",
  "address-or-offset-constant:byte_56780",
  "address-or-offset-constant:unk_56794",
  "bitwise-operation:RSB",
  "bitwise-operation:EOR",
  "inferred-algorithm:data-copying-or-movement",
  "inferred-algorithm:conditional-data-processing",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:byte-level-operations",
  "inferred-algorithm:array-manipulation"
]
```<|im_end|>
############
```assembly
loc_568D4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_200D4:
    PUSH.W {R4-R8,LR}
    MOVW R3, #0xFFFE
    LDR R5, [R1]
    MOVT.W R3, #0x3FF
    CMP R5, R3
    BHI loc_20132
loc_200E6:
    ADDS R7, R5, #1
    MOV R6, R1
    MOV R8, R0
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOVS R1, #0
    MOV R4, R0
    BLX memset
    STR R5, [R4]
    MOV R1, R6
    MOV R0, R8
    MOV R2, R4
    BL sub_1E3C0
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_2012C
loc_20110:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBNZ R1, loc_2012C
loc_2011A:
    SUBS R3, #1
    B loc_20126
loc_2011E:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_2012C
loc_20126:
    CMP R3, #1
    STR R3, [R4]
    BNE loc_2011E
loc_2012C:
    MOV R0, R4
    POP.W {R4-R8,PC}
loc_20132:
    BL sub_115CC
loc_20138:
    PUSH.W {R4-R10,LR}
    MOV R4, R0
    LDR R0, [R0]
    MOV R6, R1
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    CMP R0, #0
    BEQ loc_20220
loc_2014E:
    LDR R2, [R4]
    MOV R1, R4
    MOV R5, R0
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R0, [R6]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    MOV R4, R0
    CMP R0, #0
    BEQ loc_20220
loc_2016C:
    LDR R2, [R6]
    MOV R1, R6
    MOV R6, #0x56170
    ADDS R2, #1
    MOV R7, #0x3FFFFFE
    LSLS R2, R2, #2
    BLX memcpy
    LDR R1, [R6]
    MOV R0, R4
    BL sub_1F358
    CBZ R0, loc_20208
loc_20192:
    LDR.W R9, [R4]
    CMP R9, R7
    BHI loc_20224
loc_2019A:
    ADD.W R10, R9, #1
    MOVS R1, #4
    MOV R0, R10
    BL sub_193B8
    MOV.W R2, R10,LSL#2
    MOVS R1, #0
    MOV R8, R0
    BLX memset
    STR.W R9, [R8]
    MOV R2, R8
    MOV R1, R4
    MOV R0, R5
    BL sub_1E3C0
    LDR.W R3, [R8]
    CMP R3, #1
    BLS loc_201E6
loc_201C8:
    LDR.W R1, [R8,R3,LSL#2]
    ADD.W R2, R8, R3,LSL#2
    CBNZ R1, loc_201E6
loc_201D2:
    SUBS R3, #1
    B loc_201DE
loc_201D6:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_201E6
loc_201DE:
    CMP R3, #1
    STR.W R3, [R8]
    BNE loc_201D6
loc_201E6:
    LDR R1, [R5]
    MOV R0, R5
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    MOV R5, R4
    MOV R4, R8
    BL sub_19494
loc_20208:
    LDR R3, [R4]
    MOV R0, R4
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R5
    POP.W {R4-R10,PC}
loc_20220:
    BLX abort
loc_20224:
    BL sub_115CC
loc_201FC:

```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (abort)",
  "external-call-type:data-processing-helper (sub_1F358)",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:data-processing-helper (sub_19494)",
  "external-call-type:unspecified-helper (sub_115CC)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operations-present",
  "data-packing-serialization-patterns-present",
  "memory-access-present",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:4",
  "fixed-value-assignment:0xFFFFFE",
  "fixed-value-assignment:0x3FF",
  "fixed-value-assignment:0x56170",
  "fixed-value-assignment:0x3FFFFFE",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:memcpy",
  "address-or-offset-constant:abort",
  "address-or-offset-constant:sub_1F358",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:sub_115CC",
  "inferred-algorithm:data-processing-loop",
  "inferred-algorithm:data-validation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:memory-management",
  "inferred-algorithm:control-flow-alteration"
]
```<|im_end|>
############
```assembly
loc_115EC:
    PUSH {R3,LR}
    MOVW R1, #0xFCBC
    MOVW R0, #0xE85C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcfDouble
    MOV.W R2, #0x1EE
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:string",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0xFCBC",
  "fixed-value-assignment:0xE85C",
  "fixed-value-assignment:0x1EE",
  "address-or-offset-constant:aEcfDouble",
  "address-or-offset-constant:__assert_fail",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:assertion-failure",
  "magic-number:0xFCBC",
  "magic-number:0xE85C",
  "magic-number:0x1EE"
]
```<|im_end|>
############
```assembly
loc_56890:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2EAE8:
    PUSH.W {R4-R11,LR}
    MOV R10, #0x56190
    SUB SP, SP, #0xE4
    MOV R6, R2
    MOV R9, R0
    LDR.W R3, [R10]
    ADD R0, SP, #0x108+var_F0
    MOV R11, R1
    STR R3, [SP,#0x108+var_2C]
    BL sub_28FF0
    LDR R0, [R6,#8]
    BL sub_1F18C
    CMP R0, #2
    ITT 
    SUBNE R4, R0, #3
    ADDNE.W R5, SP, #0x108+var_F1
    BEQ loc_2EB36
loc_2EB1A:
    MOV R1, R4
    LDR R0, [R6,#8]
    BL sub_1F20C
    SUBS R4, #1
    MOVS R2, #1
    MOV R1, R5
    STRB.W R0, [SP,#0x108+var_F1]
    ADD R0, SP, #0x108+var_F0
    BL sub_29024
    ADDS R2, R4, #1
    BNE loc_2EB1A
loc_2EB36:
    LDR R0, [R6,#0xC]
    BL sub_1F18C
    CMP R0, #2
    SUB.W R4, R0, #3
    IT 
    ADDNE.W R5, SP, #0x108+var_F1
    BEQ loc_2EB66
loc_2EB4A:
    MOV R1, R4
    LDR R0, [R6,#0xC]
    BL sub_1F20C
    SUBS R4, #1
    MOVS R2, #1
    MOV R1, R5
    STRB.W R0, [SP,#0x108+var_F1]
    ADD R0, SP, #0x108+var_F0
    BL sub_29024
    ADDS R3, R4, #1
    BNE loc_2EB4A
loc_2EB66:
    ADD R0, SP, #0x108+var_94
    ADD R1, SP, #0x108+var_F0
    MOV R8, #0x43854
    MOV R5, R0
    BL sub_29130
    LDR R0, [R6,#8]
    MOVW R4, #0x555C
    BL sub_1F158
    MOVS R1, #1
    MOVW R3, #0x3B6C
    MOVS R2, #0x58
    MOVT.W R3, #4
    MOVT.W R4, #4
    STR R4, [SP,#0x108+var_FC]
    MOV R4, R1
    MOV R7, #0x43B70
    STR R0, [SP,#0x108+var_108]
    ADD R0, SP, #0x108+s
    BLX __sprintf_chk
    MOV R3, R8
    MOV R8, R6
    MOV R6, R3
    B loc_2EBB2
loc_2EBAE:
    ADDS R4, #1
    ADDS R5, #1
loc_2EBB2:
    ADD R0, SP, #0x108+s
    BLX strlen
    CMP R4, #1
    ADD R3, SP, #0x108+s
    LDRB.W LR, [R5]
    ADD R0, R3
    BEQ loc_2EC2C
loc_2EBC4:
    STR R6, [SP,#0x108+var_108]
    MOV R3, R7
    MOV.W R2, #0xFFFFFFFF
    MOVS R1, #1
    STR.W LR, [SP,#0x108+var_104]
    BLX __sprintf_chk
    CMP R4, #0x10
    BNE loc_2EBAE
loc_2EBDA:
    ADD.W R4, R11, #0xFFFFFFFF
    MOV R2, R11
    ADD R1, SP, #0x108+s
    MOV R0, R9
    BLX strncpy
    MOVS R5, #0
    MOV R0, R9
    STRB.W R5, [R9,R4]
    BLX strlen
    LDR.W R2, [R8,#0x20]
    MOV R3, R0
    CBZ R2, loc_2EC1C
loc_2EBFC:
    CMP R0, R4
    BGE loc_2EC1C
loc_2EC00:
    SUB.W R2, R11, R0
    ADDS R0, #1
    MOVS R1, #0x20
    SUBS R2, #1
    STRB.W R1, [R9,R3]
    ADD R0, R9
    LDR.W R1, [R8,#0x20]
    BLX strncpy
    STRB.W R5, [R9,R4]
loc_2EC1C:
    LDR R2, [SP,#0x108+var_2C]
    LDR.W R3, [R10]
    CMP R2, R3
    BNE loc_2EC42
loc_2EC26:
    ADD SP, SP, #0xE4
    POP.W {R4-R11,PC}
loc_2EC2C:
    LDR R3, [SP,#0x108+var_FC]
    MOV.W R2, #0xFFFFFFFF
    MOV R1, R4
    STR.W LR, [SP,#0x108+var_104]
    STR R3, [SP,#0x108+var_108]
    MOV R3, R7
    BLX __sprintf_chk
    B loc_2EBAE
loc_2EC42:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xE4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-loop-counter",
  "conditional-branching-on-string-length",
  "conditional-branching-on-memory-comparison",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_28FF0)",
  "external-call-type:unspecified-helper (sub_1F18C)",
  "external-call-type:unspecified-helper (sub_1F20C)",
  "external-call-type:unspecified-helper (sub_29024)",
  "external-call-type:unspecified-helper (sub_29130)",
  "external-call-type:unspecified-helper (sub_1F158)",
  "external-call-type:unspecified-helper (__sprintf_chk)",
  "external-call-type:unspecified-helper (strlen)",
  "external-call-type:unspecified-helper (strncpy)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:AND",
  "bitwise-operation:XOR",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "memory-write-to-dereferenced-pointer",
  "memory-read-from-dereferenced-pointer",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:0x43854",
  "address-or-offset-constant:0x555C",
  "address-or-offset-constant:0x3B6C",
  "address-or-offset-constant:0x58",
  "address-or-offset-constant:0x43B70",
  "address-or-offset-constant:0x20",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:conditional-data-copying",
  "inferred-algorithm:memory-comparison",
  "inferred-algorithm:buffer-management",
  "inferred-algorithm:sprintf-based-formatting"
]
```<|im_end|>
############
```assembly
loc_56850:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_5697C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_20DC6:
    LDR.W R3, [R4],#4
    LSLS R2, R2, #1
    CMP R3, #0
    BLT loc_20DEA
loc_20DD0:
    ASRS R1, R3, #5
    ADD R0, SP, #0x40+var_28
    AND.W R3, R3, #0x1F
    ADD.W R1, R0, R1,LSL#2
    LDR.W R1, [R1,#-0xC]
    LSR.W R3, R1, R3
    AND.W R3, R3, #1
    ORRS R2, R3
loc_20DEA:
    CMP R4, R5
    BNE loc_20DC6
loc_20DEE:
    ADD.W R0, R4, #0x70
    MOVS R5, #0
loc_20DF4:
    LDR.W R3, [R4],#4
    LSLS R5, R5, #1
    CMP R3, #0
    BLT loc_20E18
loc_20DFE:
    ASRS R1, R3, #5
    ADD R6, SP, #0x40+var_28
    AND.W R3, R3, #0x1F
    ADD.W R1, R6, R1,LSL#2
    LDR.W R1, [R1,#-0xC]
    LSR.W R3, R1, R3
    AND.W R3, R3, #1
    ORRS R5, R3
loc_20E18:
    CMP R4, R0
    BNE loc_20DF4
loc_20E1C:
    LDR R0, =dword_3EA04
    ADD.W R12, R11, #0x1DC
    SUB.W R10, R9, #4
    ADD.W R11, R11, #0x21C
    ADD.W R4, R0, #0x80
    ADD.W R8, R9, #0x3C
loc_20E32:
    LDR.W R6, [R12,#4]!
    MOVS R7, #0
    LDR R1, =dword_3E984
    RSB.W R3, R6, #0x1C
    LSR.W LR, R2, R3
    LSR.W R3, R5, R3
    LSLS R2, R6
    LSLS R5, R6
    ORR.W R2, R2, LR
    ORRS R5, R3
    BIC.W R2, R2, #0xF0000000
    BIC.W R5, R5, #0xF0000000
    STR R2, [SP,#0x40+var_30]
    STR R5, [SP,#0x40+var_34]
loc_20E5C:
    LDR.W R3, [R1],#4
    LSLS R7, R7, #1
    CMP R3, #0
    BLT loc_20E80
loc_20E66:
    MOV.W LR, R3,ASR#5
    AND.W R6, R3, #0x1F
    ADD R3, SP, #0x40+var_28
    ADD.W R3, R3, LR,LSL#2
    LDR.W R3, [R3,#-0xC]
    LSRS R3, R6
    AND.W R3, R3, #1
    ORRS R7, R3
loc_20E80:
    CMP R1, R0
    BNE loc_20E5C
loc_20E84:
    MOVS R1, #0
    MOV R6, R0
    STR.W R7, [R10,#4]!
loc_20E8C:
    LDR.W R3, [R6],#4
    LSLS R1, R1, #1
    CMP R3, #0
    BLT loc_20EB0
loc_20E96:
    MOV.W LR, R3,ASR#5
    AND.W R7, R3, #0x1F
    ADD R3, SP, #0x40+var_28
    ADD.W R3, R3, LR,LSL#2
    LDR.W R3, [R3,#-0xC]
    LSRS R3, R7
    AND.W R3, R3, #1
    ORRS R1, R3
loc_20EB0:
    CMP R6, R4
    BNE loc_20E8C
loc_20EB4:
    CMP R11, R12
    STR.W R1, [R8,#4]!
    BNE loc_20E32
loc_20EBC:
    LDR R2, [SP,#0x40+var_3C]
    MOVS R3, #0
    LDR R1, [SP,#0x40+var_2C]
    STR.W R3, [R9,#0x84]
    LDR R2, [R2]
    STR.W R3, [R9,#0x80]
    CMP R1, R2
    BNE loc_20ED6
loc_20ED0:
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_20ED6:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-patterns:decrementing",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shifts",
  "byte-level-operations:bitwise-and",
  "byte-level-operations:bitwise-or",
  "byte-level-operations:bitwise-xor",
  "byte-level-operations:bitwise-not",
  "byte-level-operations:bitwise-bic",
  "memory-access:direct-memory-access",
  "memory-access:indirect-memory-access",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "memory-write-to-output-parameter-offset",
  "memory-read-from-output-parameter-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:-1",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x3EA04",
  "address-or-offset-constant:0x3E984",
  "address-or-offset-constant:0x1DC",
  "address-or-offset-constant:0x21C",
  "address-or-offset-constant:0x80",
  "address-or-offset-constant:0x3C",
  "address-or-offset-constant:0x4",
  "address-or-offset-constant:0x84",
  "address-or-offset-constant:0x80",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:conditional-data-retrieval-or-processing",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_36D14:
    PUSH {R4,LR}
    MOVW R3, #0x67DC
    MOVW R4, #0x6190
    MOVT.W R3, #5
    MOVT.W R4, #5
    SUB SP, SP, #0x10
    LDR R3, [R3]
    LDR R2, [R4]
    STR R2, [SP,#0x18+var_C]
    CBZ R3, loc_36D46
loc_36D30:
    ADD R1, SP, #0x18+var_14
    ADD R0, SP, #0x18+var_10
    BL sub_2D250
    LDR R0, [SP,#0x18+var_10]
    LDR R1, [SP,#0x18+var_14]
    BL sub_383A8
    LDR R0, [SP,#0x18+var_10]
    BL sub_19494
loc_36D46:
    LDR R2, [SP,#0x18+var_C]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_36D52
loc_36D4E:
    ADD SP, SP, #0x10
    POP {R4,PC}
loc_36D52:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-memory-content",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_2D250)",
  "external-call-type:data-processing-helper (sub_383A8)",
  "external-call-type:data-processing-helper (sub_19494)",
  "external-call-type:specialized-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x67DC",
  "fixed-value-assignment:0x6190",
  "fixed-value-assignment:5",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:security-check",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_1138C:

loc_12C38:
    LDR R3, =(_GLOBAL_OFFSET_TABLE_ - 0x12C48)
    LDR R2, =(__gmon_start___ptr_0 - 0x56000)
    ADD R3, PC, R3
    LDR R2, [R3,R2]
    CMP R2, #0
    BXEQ LR
loc_12C50:
    B __gmon_start__
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:__gmon_start__",
  "integer-size-hint:32-bit",
  "magic-number:0x56000",
  "address-or-offset-constant:_GLOBAL_OFFSET_TABLE_",
  "address-or-offset-constant:__gmon_start___ptr_0",
  "inferred-algorithm:profiling-startup-code",
  "inferred-algorithm:runtime-initialization"
]
```<|im_end|>
############
```assembly
loc_11374:
    ADR R12, 0x1137C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(localtime_ptr - 0x5537C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:operating-system-interaction (localtime_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x1137C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:localtime_ptr",
  "inferred-algorithm:operating-system-time-query"
]
```<|im_end|>
############
```assembly
loc_1FD18:
    PUSH.W {R3-R9,LR}
    MOVW R3, #0xFFFE
    LDR R4, [R1]
    MOVT.W R3, #0x3FF
    LDR R2, [R0]
    CMP R4, R2
    IT 
    MOVLT R4, R2
    CMP R4, R3
    BHI loc_1FDC8
loc_1FD32:
    ADD.W R8, R4, #1
    MOV R6, R0
    MOV R7, R1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R9, R0
    BLX memset
    STR.W R4, [R9]
    CBZ R4, loc_1FDA8
loc_1FD54:
    MOVS R0, #1
    MOV LR, R9
    MOV R3, R0
    MOVS R2, #0
loc_1FD5C:
    LDR R1, [R6]
    MOVS R5, #0
    CMP R1, R3
    LDR R1, [R7]
    ITE 
    LDRGE.W R4, [R6,R3,LSL#2]
    MOVLT R4, #0
    CMP R1, R3
    ITET 
    LDRGE.W R1, [R7,R3,LSL#2]
    MOVLT.W R1, #0xFFFFFFFF
    MVNGE R1, R1
    ADDS R4, R4, R0
    ADC.W R5, R5, #0
    ADDS R4, R4, R1
    ADC.W R5, R5, #0
    CMP R4, #0
    IT 
    CMPNE R3, R2
    STR.W R4, [LR,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R8
    MOV R0, R5
    BNE loc_1FD5C
loc_1FD9C:
    STR.W R2, [R9]
    CBZ R5, loc_1FDB2
loc_1FDA2:
    MOV R0, R9
    POP.W {R3-R9,PC}
loc_1FDA8:
    MOV R0, R9
    STR.W R4, [R9]
    POP.W {R3-R9,PC}
loc_1FDB2:
    ADDS R1, R2, #1
    MOV R0, R9
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    MOV R0, R5
    POP.W {R3-R9,PC}
loc_1FDC8:
    BL sub_115CC
loc_1FDCC:
    PUSH {R4-R6,LR}
    MOV R6, R0
    LDR R0, [R0]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    CBZ R0, loc_1FE42
loc_1FDDC:
    LDR R2, [R6]
    MOV R4, R0
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R2, [R4]
    LDR.W R1, [R6,R2,LSL#2]
    LSLS R5, R2, #2
    ADDS R3, R6, R5
    CBNZ R1, loc_1FE14
loc_1FDF6:
    CMP R2, #0
    BLE loc_1FE3E
loc_1FDFA:
    MOV R0, #0xFFFFFFFC
    SUBS R0, R0, R6
    B loc_1FE08
loc_1FE06:
    CBZ R2, loc_1FE3E
loc_1FE08:
    ADDS R5, R0, R3
    LDR.W R1, [R3,#-4]!
    SUBS R2, #1
    CMP R1, #0
    BEQ loc_1FE06
loc_1FE14:
    CMP R2, #0
    BLE loc_1FE3E
loc_1FE18:
    CMP R1, #1
    MOV.W R3, #1
    BLS loc_1FE28
loc_1FE20:
    LSLS R3, R3, #1
    ADDS R3, #1
    CMP R3, R1
    BCC loc_1FE20
loc_1FE28:
    CMP R2, #1
    STR R3, [R4,R5]
    BEQ loc_1FE3E
loc_1FE2E:
    ADD.W R2, R2, #0x40000000
    MOVS R1, #0xFF
    SUBS R2, #1
    ADDS R0, R4, #4
    LSLS R2, R2, #2
    BLX memset
loc_1FE3E:
    MOV R0, R4
    POP {R4-R6,PC}
loc_1FE42:
    BLX abort
```
Output:```json
[
  "return_TYPE:INTEGER",
  "ARGUMENT_COUNT:2",
  "ARG0_TYPE:POINTER",
  "ARG1_TYPE:POINTER",
  "CALLING_CONVENTION_HINT:CALLEE_SAVES_REGISTERS",
  "CALLING_CONVENTION_HINT:REGISTERS_FOR_ARGS",
  "STACK_ARG_USE:FALSE",
  "STANDARD_CALLING_CONVENTION_USED",
  "STACK_FRAME_MANAGEMENT_PRESENT",
  "EXPLICIT_STACK_ALLOCATION_SIZE:0x20",
  "CALLEE_SAVES_REGISTERS_PRESENT",
  "STANDARD_FUNCTION_RETURN",
  "CONDITIONAL_BRANCHING_ON_INPUT",
  "EXTERNAL_FUNCTION_CALLS_PRESENT",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (SUB_193B8)",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (MEMSET)",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (SUB_194E4)",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (SUB_19494)",
  "EXTERNAL_CALL_TYPE:UNSPECIFIED_HELPER (ABORT)",
  "INTEGER_SIZE_HINT:32-BIT",
  "MEMORY_READ_FROM_INPUT_PARAMETER_OFFSET:0",
  "MEMORY_WRITE_TO_STACK_OFFSET",
  "MEMORY_READ_FROM_STACK_OFFSET",
  "FIXED_VALUE_COMPARISON:0",
  "FIXED_VALUE_ASSIGNMENT:0",
  "ADDRESS_OR_OFFSET_CONSTANT:0xFFFFFE",
  "ADDRESS_OR_OFFSET_CONSTANT:0x3FF",
  "ADDRESS_OR_OFFSET_CONSTANT:0xFFFFFFFC",
  "ADDRESS_OR_OFFSET_CONSTANT:0xFF",
  "INFERRED_ALGORITHM:NETWORKING_PROTOCOL_HANDLING",
  "INFERRED_ALGORITHM:DATA_PROCESSING",
  "INFERRED_ALGORITHM:RESOURCE_MANAGEMENT",
  "INFERRED_ALGORITHM:ERROR_OR_ALTERNATIVE_PATH"
]
```<|im_end|>
############
```assembly
loc_2D764:
    PUSH.W {R3-R11,LR}
    MOV R4, R0
    LDR R0, [R0,#8]
    MOV R7, R2
    MOV R6, R1
    BL sub_1F1CC
    MOV R5, R0
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    ADD R0, R5
    CMP R0, R7
    BLE loc_2D7A6
loc_2D7A2:
    POP.W {R3-R11,PC}
loc_2D7A6:
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,#1]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,#2]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,#3]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    CMP R0, #4
    MOV R9, R0
    SUB.W R5, R0, #5
    BEQ.W loc_2DA2E
loc_2D7E6:
    ADDS R7, R6, #3
loc_2D7E8:
    MOV R1, R5
    LDR R0, [R4,#8]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R2, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_2D7E8
loc_2D7FA:
    ADD.W R5, R9, #4
    ADD.W R11, R9, #1
    ADD.W R10, R9, #2
    ADD.W R7, R9, #3
    MOV R8, R5
loc_2D80C:
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R9, R0, #5
    BEQ loc_2D86E
loc_2D84E:
    ADD.W R7, R6, R8
    MOV R5, R9
loc_2D854:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R7],#1
    BNE loc_2D854
loc_2D866:
    ADD.W R8, R8, #1
    ADD R8, R9
    MOV R5, R8
loc_2D86E:
    LDR R0, [R4,#0x10]
    ADD.W R10, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADDS R7, R5, #3
    ADD.W R11, R8, #4
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D8DE
loc_2D8BC:
    ADD.W R7, R8, #3
    MOV R5, R10
    ADD R7, R6
loc_2D8C4:
    MOV R1, R5
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    SUBS R5, #1
    STRB.W R0, [R7,#1]!
    ADDS R0, R5, #1
    BNE loc_2D8C4
loc_2D8D6:
    ADD.W R8, R8, #5
    ADD.W R11, R10, R8
loc_2D8DE:
    LDR R0, [R4,#0x1C]
    ADD.W R10, R11, #1
    BL sub_1F1CC
    ADD.W R8, R11, #2
    ADD.W R5, R11, #3
    ADD.W R9, R11, #4
    ADDS R7, R6, R5
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R8]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D94C
loc_2D932:
    MOV R5, R10
loc_2D934:
    MOV R1, R5
    LDR R0, [R4,#0x1C]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R1, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_2D934
loc_2D946:
    ADD.W R9, R11, #5
    ADD R9, R10
loc_2D94C:
    LDR R0, [R4,#0x14]
    ADD.W R11, R9, #1
    BL sub_1F1CC
    ADD.W R10, R9, #2
    ADD.W R7, R9, #3
    ADD.W R5, R9, #4
    ADD.W R8, R6, R7
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D9BC
loc_2D9A2:
    MOV R7, R10
loc_2D9A4:
    MOV R1, R7
    LDR R0, [R4,#0x14]
    BL sub_1F20C
    SUBS R7, #1
    ADDS R2, R7, #1
    STRB.W R0, [R8,#1]!
    BNE loc_2D9A4
loc_2D9B6:
    ADD.W R5, R9, #5
    ADD R5, R10
loc_2D9BC:
    LDR R0, [R4,#0x18]
    ADD.W R11, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADD.W R8, R5, #3
    ADD.W R10, R5, #4
    ADD.W R7, R6, R8
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    STRB.W R0, [R6,R8]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R8, R0, #5
    BEQ loc_2DA3E
loc_2DA12:
    MOV R6, R8
loc_2DA14:
    MOV R1, R6
    LDR R0, [R4,#0x18]
    BL sub_1F20C
    SUBS R6, #1
    ADDS R3, R6, #1
    STRB.W R0, [R7,#1]!
    BNE loc_2DA14
loc_2DA26:
    ADDS R0, R5, #5
    ADD R0, R8
    POP.W {R3-R11,PC}
loc_2DA2E:
    MOVS R5, #8
    MOVS R7, #7
    MOV R8, R5
    MOV.W R10, #6
    MOV.W R11, #5
    B loc_2D80C
loc_2DA3E:
    MOV R0, R10
    B locret_2D7A2
```
Output: R2, R5, #1
    BNE loc_2D8C4
loc_2D8CA:
    ADD.W R10, R10, #1
    ADD W10, R10, R9
    MOV R5, W10
loc_2D8CE:
    LDR R0, [R4,#0x14]
    ADD.W R11, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADDS R7, R5, #3
    ADD.W R10, R10, #4
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.R R0, [R6,R5]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R11, R0, #5
    BEQ loc_2D950
loc_2D932:
    ADD.W R7, R10, #3
    MOV R5, R11
    ADD R7, R6
loc_2D93A:
    MOV R1, R5
    LDR R0, [R4,#0x14]
    BL sub_1F20C
    SUBS R5, #1
    STRB.W R0, [R7,#1]!
    ADDS R2, R5, #1
    BNE loc_2D93A
loc_2D948:
    ADD.W R11, R11, #1
    ADD W11, R11, R9
    MOV R5, W11
loc_2D94C:
    LDR R0, [R4,#0x18]
    ADD.W R10, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADDS R7, R5, #3
    ADD.W R11, R11, #4
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.R R0, [R6,R5]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D9DC
loc_2D980:
    ADD.W R7, R11, #3
    MOV R5, R10
    ADD R7, R6
loc_2D988:
    MOV R1, R5
    LDR R0, [R4,#0x18]
    BL sub_1F20C
    SUBS R5, #1
    STRB.W R0, [R7,#1]!
    ADDS R2, R5, #
############
```assembly
loc_11328:

loc_12FD4:
    PUSH {R3,LR}
    MOVW R2, #0x56DC
    MOVW R1, #0x8BCC
    MOVT.W R2, #4
    MOVT.W R1, #3
    MOVS R0, #1
    BLX __printf_chk
    MOV R3, #0x5619C
    MOVW R0, #0x8B28
    MOVS R2, #0xA0
    MOVT.W R0, #3
    LDR R3, [R3]
    MOVS R1, #1
    BLX fwrite
    MOVW R0, #0x8C0C
    POP.W {R3,LR}
    MOVT.W R0, #3
    B.W j_puts
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__printf_chk)",
  "external-call-type:data-processing-helper (fwrite)",
  "external-call-type:data-processing-helper (puts)",
  "integer-size-hint:32-bit",
  "magic-number:0x56DC8BCCh",
  "magic-number:0x5619C8C0h",
  "magic-number:0x8B28A0h",
  "magic-number:0x8C0Ch",
  "inferred-algorithm:output-generation",
  "inferred-algorithm:formatted-string-output",
  "inferred-algorithm:file-i-o"
]
```<|im_end|>
############
```assembly
loc_28FF0:
    MOVW R2, #0x2301
    MOVW R3, #0xAB89
    MOVT.W R2, #0x6745
    MOVT.W R3, #0xEFCD
    STM.W R0, {R2,R3}
    MOVW R2, #0xDCFE
    MOVW R3, #0x5476
    MOVT.W R2, #0x98BA
    MOVT.W R3, #0x1032
    STR R2, [R0,#8]
    STR R3, [R0,#0xC]
    MOVS R3, #0
    STR R3, [R0,#0x50]
    STR R3, [R0,#0x58]
    STR R3, [R0,#0x54]
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "integer-size-hint:32-bit",
  "bitwise-operation:OR",
  "bitwise-mask-value:0x2301AB89",
  "bitwise-mask-value:0x6745EFCD",
  "bitwise-mask-value:0xDCFE5476",
  "bitwise-mask-value:0x98BA1032",
  "memory-write-to-input-parameter-offset",
  "memory-write-to-input-parameter-offset:8",
  "memory-write-to-input-parameter-offset:C",
  "memory-write-to-input-parameter-offset:50",
  "memory-write-to-input-parameter-offset:58",
  "memory-write-to-input-parameter-offset:54",
  "fixed-value-assignment:0",
  "inferred-algorithm:data-packaging-or-serialization",
  "inferred-algorithm:magic-number:0x2301AB89",
  "inferred-algorithm:magic-number:0x6745EFCD",
  "inferred-algorithm:magic-number:0xDCFE5476",
  "inferred-algorithm:magic-number:0x98BA1032"
]
```<|im_end|>
############
```assembly
loc_113FC:
    ADR R12, 0x11404
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fcntl_ptr - 0x55404)]!
```
Output:```json
[
  "return-type:undefined",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fcntl_ptr)",
  "address-or-offset-constant:0x11404",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fcntl_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:dynamic-function-pointer-resolution"
]
```<|im_end|>
############
```assembly
loc_2FB90:
    PUSH.W {R4-R11,LR}
    MOV R11, #0x56190
    SUB SP, SP, #0x8C
    MOV R5, R1
    MOV R4, R0
    LDR.W R3, [R11]
    ADD R0, SP, #0xB0+s
    MOVS R2, #0x40
    MOVS R1, #0x36
    STR R3, [SP,#0xB0+var_2C]
    BLX memset
    ANDS.W R8, R5, #3
    BNE.W loc_2FDFC
loc_2FBBA:
    LDR R2, [SP,#0xB0+s]
    LDR R3, [R5]
    LDR R1, [R5,#4]
    EORS R2, R3
    LDR R3, [SP,#0xB0+var_68]
    STR R2, [SP,#0xB0+s]
    EORS R1, R3
    LDR R2, [SP,#0xB0+var_64]
    LDR R3, [R5,#8]
    STR R1, [SP,#0xB0+var_68]
    EORS R2, R3
    LDR R1, [R5,#0xC]
    LDR R3, [SP,#0xB0+var_60]
    STR R2, [SP,#0xB0+var_64]
    EORS R1, R3
    LDR R2, [R5,#0x10]
    LDR R3, [SP,#0xB0+var_5C]
    STR R1, [SP,#0xB0+var_60]
    EORS R2, R3
    LDR R1, [R5,#0x14]
    LDR R3, [SP,#0xB0+var_58]
    STR R2, [SP,#0xB0+var_5C]
    EORS R1, R3
    LDR R2, [R5,#0x18]
    LDR R3, [SP,#0xB0+var_54]
    STR R1, [SP,#0xB0+var_58]
    EORS R2, R3
    LDR R1, [R5,#0x1C]
    LDR R3, [SP,#0xB0+var_50]
    STR R2, [SP,#0xB0+var_54]
    EORS R3, R1
    STR R3, [SP,#0xB0+var_50]
loc_2FBFA:
    ADD.W LR, R4, #0x20
    ADD.W R9, SP, #0xB0+var_2C
    ADD.W R12, SP, #0xB0+s
    MOVW R2, #0xE667
    MOVW R3, #0xAE85
    MOVT.W R2, #0x6A09
    MOVT.W R3, #0xBB67
    STM.W R4, {R2,R3}
    MOVW R2, #0xF372
    MOVW R3, #0xF53A
    MOVT.W R2, #0x3C6E
    MOVT.W R3, #0xA54F
    STR R2, [R4,#8]
    MOVW R2, #0x527F
    STR R3, [R4,#0xC]
    MOVT.W R2, #0x510E
    MOVW R3, #0x688C
    STR R2, [R4,#0x10]
    MOVT.W R3, #0x9B05
    MOVW R2, #0xD9AB
    STR R3, [R4,#0x14]
    MOVT.W R2, #0x1F83
    MOVW R3, #0xCD19
    STR R2, [R4,#0x18]
    MOVT.W R3, #0x5BE0
    MOVS R2, #0x40
    STR R3, [R4,#0x1C]
    MOVS R3, #0
    STR R2, [R4,#0x68]
    STR R3, [R4,#0x60]
    STR R3, [R4,#0x64]
loc_2FC60:
    MOV R6, R12
    ADD.W LR, LR, #0x10
    LDM R6!, {R0-R3}
    ADD.W R12, R12, #0x10
    CMP R6, R9
    STR.W R0, [LR,#-0x10]
    STR.W R1, [LR,#-0xC]
    STR.W R2, [LR,#-8]
    STR.W R3, [LR,#-4]
    BNE loc_2FC60
loc_2FC80:
    LDR R3, [R4,#0x20]
    ADD R1, SP, #0xB0+var_AC
    LDR R7, [R4,#0x30]
    MOV R0, R4
    LDR R6, [R4,#0x24]
    REV R3, R3
    LDR R2, [R4,#0x28]
    REV.W R12, R7
    STR R3, [SP,#0xB0+var_AC]
    REV R6, R6
    LDR R3, [R4,#0x2C]
    REV R2, R2
    LDR R7, [R4,#0x34]
    REV R3, R3
    STR R6, [SP,#0xB0+var_A8]
    STR R2, [SP,#0xB0+var_A4]
    REV.W LR, R7
    LDR R6, [R4,#0x38]
    LDR R2, [R4,#0x3C]
    STR R3, [SP,#0xB0+var_A0]
    REV R6, R6
    LDR R3, [R4,#0x40]
    REV R2, R2
    LDR R7, [R4,#0x44]
    REV R3, R3
    STR R6, [SP,#0xB0+var_94]
    STR R2, [SP,#0xB0+var_90]
    REV.W R9, R7
    LDR R6, [R4,#0x4C]
    LDR R2, [R4,#0x50]
    STR R3, [SP,#0xB0+var_8C]
    LDR R3, [R4,#0x54]
    REV R2, R2
    STR.W LR, [SP,#0xB0+var_98]
    REV.W LR, R6
    LDR R7, [R4,#0x48]
    REV R6, R3
    STR R2, [SP,#0xB0+var_7C]
    LDR R3, [R4,#0x58]
    LDR R2, [R4,#0x5C]
    REV R3, R3
    STR.W R12, [SP,#0xB0+var_9C]
    REV R2, R2
    REV.W R12, R7
    STR R3, [SP,#0xB0+var_74]
    STR R2, [SP,#0xB0+var_70]
    STR.W R9, [SP,#0xB0+var_88]
    STR.W R12, [SP,#0xB0+var_84]
    STR.W LR, [SP,#0xB0+var_80]
    STR R6, [SP,#0xB0+var_78]
    BL sub_2F354
    MOVS R3, #0
    MOVS R2, #0x40
    STR R3, [R4,#0x60]
    MOVS R1, #0x5C
    ADD R0, SP, #0xB0+s
    BLX memset
    CMP.W R8, #0
    BNE loc_2FDE4
loc_2FD10:
    LDR R1, [R5]
    LDR R3, [SP,#0xB0+s]
    LDR R2, [R5,#4]
    LDR R6, [SP,#0xB0+var_68]
    EOR.W LR, R1, R3
    LDR R0, [R5,#0xC]
    LDR R1, [R5,#8]
    EORS R6, R2
    LDR R3, [SP,#0xB0+var_64]
    LDR R2, [SP,#0xB0+var_60]
    EOR.W R12, R1, R3
    LDR R3, [R5,#0x10]
    EORS R0, R2
    LDR R2, [SP,#0xB0+var_5C]
    LDR R1, [R5,#0x14]
    EORS R2, R3
    LDR.W R10, [R5,#0x18]
    LDR R3, [R5,#0x1C]
    LDR R5, [SP,#0xB0+var_58]
    STR R6, [SP,#0xB0+var_68]
    EORS R1, R5
    LDR R6, [SP,#0xB0+var_50]
    LDR R5, [SP,#0xB0+var_54]
    EORS R3, R6
    STR.W LR, [SP,#0xB0+s]
    EOR.W R5, R10, R5
    STR.W R12, [SP,#0xB0+var_64]
    STR R0, [SP,#0xB0+var_60]
    STR R2, [SP,#0xB0+var_5C]
    STR R1, [SP,#0xB0+var_58]
    STR R5, [SP,#0xB0+var_54]
    STR R3, [SP,#0xB0+var_50]
loc_2FD5C:
    ADD.W R0, R4, #0x6C
    ADD R1, SP, #0xB0+s
    MOVW R3, #0xE667
    MOVW R2, #0xAE85
    MOVT.W R3, #0x6A09
    MOVT.W R2, #0xBB67
    STR R3, [R4,#0x6C]
    MOVW R3, #0xF372
    STR R2, [R4,#0x70]
    MOVT.W R3, #0x3C6E
    MOVW R2, #0xF53A
    STR R3, [R4,#0x74]
    MOVT.W R2, #0xA54F
    MOVW R3, #0x527F
    STR R2, [R4,#0x78]
    MOVT.W R3, #0x510E
    MOVW R2, #0x688C
    STR R3, [R4,#0x7C]
    MOVT.W R2, #0x9B05
    MOVW R3, #0xD9AB
    STR.W R2, [R4,#0x80]
    MOVT.W R3, #0x1F83
    MOVW R2, #0xCD19
    STR.W R3, [R4,#0x84]
    MOVT.W R2, #0x5BE0
    MOVS R3, #0
    STR.W R2, [R4,#0x88]
    MOVS R2, #0x40
    STR.W R3, [R4,#0xCC]
    STR.W R3, [R4,#0xD4]
    STR.W R3, [R4,#0xD0]
    BL sub_2FA48
    ADD R0, SP, #0xB0+s
    MOVS R1, #0x40
    BL sub_194E4
    LDR R2, [SP,#0xB0+var_2C]
    LDR.W R3, [R11]
    CMP R2, R3
    BNE loc_2FE14
loc_2FDDE:
    ADD SP, SP, #0x8C
    POP.W {R4-R11,PC}
loc_2FDE4:
    SUBS R5, #1
    ADD R0, SP, #0xB0+var_4C
    ADD R3, SP, #0xB0+s
loc_2FDEA:
    LDRB R1, [R3]
    LDRB.W R2, [R5,#1]!
    EORS R2, R1
    STRB.W R2, [R3],#1
    CMP R3, R0
    BNE loc_2FDEA
loc_2FDFA:
    B loc_2FD5C
loc_2FDFC:
    SUBS R1, R5, #1
    ADD R6, SP, #0xB0+var_4C
    ADD R3, SP, #0xB0+s
loc_2FE02:
    LDRB R0, [R3]
    LDRB.W R2, [R1,#1]!
    EORS R2, R0
    STRB.W R2, [R3],#1
    CMP R3, R6
    BNE loc_2FE02
loc_2FE12:
    B loc_2FBFA
loc_2FE14:
    BLX __stack_chk_fail
```
Output:,#0x54]
    STR R6, [SP,#0xB0+var_88]
    LDR R7, [R4,#0x58]
    STR R2, [SP,#0xB0+var_84]
    LDR R6, [R4,#0x5C]
    LDR R2, [R4,#0x60]
    STR R3, [SP,#0xB0+var_80]
    LDR R3, [R4,#0x64]
    STR R6, [SP,#0xB0+var_7C]
    LDR R7, [R4,#0x68]
    STR R2, [SP,#0xB0+var_78]
    REV W LR, R7
    LDR R6, [R4,#0x70]
    LDR R2, [R4,#0x74]
    STR R3, [SP,#0xB0+var_74]
    LDR R3, [R4,#0x78]
    STR R6, [SP,#0xB0+var_70]
    LDR R7, [R4,#0x7C]
    STR R2, [SP,#0xB0+var_6C]
    LDR R6, [R4,#0x80]
    LDR R2, [R4,#0x84]
    STR R3, [SP,#0xB0+var_68]
    LDR R3, [R4,#0x88]
    STR R6, [SP,#0xB0+var_64]
    LDR R7, [R4,#0x8C]
    STR R2, [SP,#0xB0+var_60]
    LDR R6, [R4,#0x90]
    LDR R2, [R4,#0x94]
    STR R3, [SP,#0xB0+var_5C]
    LDR R3, [R4,#0x98]
    STR R6, [SP,#0xB0+var_58]
    LDR R7, [R4,#0x9C]
    STR R2, [SP,#0xB0+var_54]
    LDR R6, [R4,#0xA0]
    LDR R2, [R4,#0xA4]
    STR R3, [SP,#0xB0+var_50]
    LDR R3, [R4,#0xA8]
    STR R6, [SP,#0xB0+var_4C]
    LDR R7, [R4,#0xAC]
    STR R2, [SP,#0xB0+var_48]
    LDR R6, [R4,#0xB0]
    LDR R2, [R4,#0xB4]
    STR R3, [SP,#0xB0+var_44]
    LDR R3, [R4,#0xB8]
    STR R6, [SP,#0xB0+var_40]
    LDR R7, [R4,#0xBC]
    STR R2, [SP,#0xB0+var_3C]
    LDR R6, [R4,#0xC0]
    LDR R2, [R4,#0xC4]
    STR R3, [SP,#0xB0+var_38]
    LDR R3, [R4,#0xC8]
    STR R6, [SP,#0xB0+var_34]
    LDR R7, [R4,#0xCC]
    STR R2, [SP,#0xB0+var_30]
    LDR R6, [R4,#0xD0]
    LDR R2, [R4,#0xD4]
    STR R3, [SP,#0xB0+var_2C]
    LDR R3, [R4,#0xD8]
    STR R6, [SP,#0xB0+var_28]
    LDR R7, [R4,#0xDC]
    STR R2, [SP,#0xB0+var_24]
    LDR R6, [R4,#0xE0]
    LDR R2, [R4,#0xE4]
    STR R3, [SP,#0xB0+var_20]
    LDR R3, [R4,#0xE8]
    STR R6, [SP,#0xB0+var_1C]
    LDR R7, [R4,#0xEC]
    STR R2
############
```assembly
loc_1122C:

loc_1D0F4:
    PUSH {R4-R6,LR}
    MOV R4, #0x3D49C
    MOV R5, R0
    MOV.W R6, #0x400
    ADD.W R1, R4, #0xA0
    MOVS R2, #0x48
    ADD.W R0, R0, #0x1000
    BLX memcpy
    ADD.W R1, R4, #0xE8
    MOV R2, R6
    MOV R0, R5
    BLX memcpy
    MOV R2, R6
    ADD.W R1, R4, #0x4E8
    ADDS R0, R5, R6
    BLX memcpy
    MOV R2, R6
    ADDW R1, R4, #0x8E8
    ADD.W R0, R5, #0x800
    BLX memcpy
    MOV R2, R6
    ADDW R1, R4, #0xCE8
    ADD.W R0, R5, #0xC00
    POP.W {R4-R6,LR}
    B.W j_memcpy
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:memcpy",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x3D49C",
  "fixed-value-assignment:0x400",
  "fixed-value-assignment:0x48",
  "fixed-value-assignment:0x1000",
  "fixed-value-assignment:0xE8",
  "fixed-value-assignment:0x4E8",
  "fixed-value-assignment:0x8E8",
  "fixed-value-assignment:0xCE8",
  "fixed-value-assignment:0xC00",
  "byte-level-operations:memmove",
  "inferred-algorithm:data-copying-or-packing",
  "inferred-algorithm:multi-segment-data-transfer"
]
```<|im_end|>
############
```assembly
loc_568FC:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_112CC:

loc_36758:
    MOV R3, #0x5619C
    MOVW R0, #0x4FF4
    MOV.W R2, #0x208
    LDR R3, [R3]
    MOVT.W R0, #4
    MOVS R1, #1
    B.W j_fwrite
```
Output:```json
[
  "return-type:integer",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fwrite)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x5619C",
  "fixed-value-assignment:0x4FF4",
  "fixed-value-assignment:0x208",
  "fixed-value-assignment:1",
  "fixed-value-assignment:4",
  "address-or-offset-constant:0x5619C",
  "address-or-offset-constant:0x4FF4",
  "inferred-algorithm:file-io",
  "inferred-algorithm:buffer-management",
  "inferred-algorithm:byte-order-conversion"
]
```<|im_end|>
############
```assembly
loc_1E6C8:
    PUSH {R3-R7,LR}
    SUBS R4, R0, #0
    BLT loc_1E718
loc_1E6CE:
    ASRS R0, R4, #5
    MOVW R3, #0xFFFE
    ADDS R5, R0, #1
    MOVT.W R3, #0x3FF
    CMP R5, R3
    BGT loc_1E714
loc_1E6DE:
    ADDS R0, #2
    MOVS R1, #4
    LSLS R6, R0, #2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R6
    MOV R7, R0
    BLX memset
    CMP.W R4, R5,LSL#5
    STR R5, [R7]
    BLT loc_1E6FE
loc_1E6FA:
    BLX abort
loc_1E6FE:
    SUBS R6, #4
    MOVS R3, #1
    AND.W R4, R4, #0x1F
    MOV R0, R7
    LDR R2, [R7,R6]
    LSL.W R4, R3, R4
    ORRS R4, R2
    STR R4, [R7,R6]
    POP {R3-R7,PC}
loc_1E714:
    BL sub_115CC
loc_1E718:
    MOVW R1, #0xE76C
    MOVW R0, #0xE7F8
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBnPower2
    MOVS R2, #0x51
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "stack-arg-use:size:0x14",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (memset)",
  "external-call-type:unspecified-helper (abort)",
  "external-call-type:unspecified-helper (sub_115CC)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:shift-left",
  "bitwise-operation:shift-right",
  "bitwise-operation:OR",
  "bitwise-operation:AND-clear",
  "bitwise-mask-value:0xFFFE",
  "bitwise-mask-value:0x3FF",
  "bitwise-mask-value:0x51",
  "address-or-offset-constant:aBnPower2",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:abort",
  "address-or-offset-constant:sub_115CC",
  "address-or-offset-constant:__assert_fail",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:array-manipulation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:power-of-two-check"
]
```<|im_end|>
############
```assembly
loc_2E9B4:
    MOV R3, #0x3F57C
    PUSH.W {R4-R10,LR}
    MOV R7, R0
    LDR.W R8, [R1,#0xC]
    LDRH R2, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    LDR R5, [R1,#8]
    STRH R2, [R0]
    STRB R3, [R0,#2]
    MOV R0, R8
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_2EA94
loc_2E9EA:
    MOVW R4, #0x3A18
    ADD.W R10, R7, #1
    MOVT.W R4, #4
    MOV R9, R6
loc_2E9F8:
    MOV.W R1, R9,ASR#1
    MOV R0, R8
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R4
    LDRB.W R3, [R0,#0x50]
    STRB.W R3, [R10,#1]!
    BNE loc_2E9F8
loc_2EA24:
    MOV R2, #0x3F580
    ADDS R3, R6, #3
    LDR R0, [R2]
    STR R0, [R7,R3]
    MOV R0, R5
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE loc_2EA98
loc_2EA52:
    ADD.W R10, R6, #5
    MOV R9, R8
    ADD R10, R7
loc_2EA5A:
    MOV.W R1, R9,ASR#1
    MOV R0, R5
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R4
    LDRB.W R3, [R0,#0x50]
    STRB.W R3, [R10,#1]!
    BNE loc_2EA5A
loc_2EA86:
    ADD R6, R7
    MOVS R3, #0
    ADD R8, R6
    STRB.W R3, [R8,#7]
    POP.W {R4-R10,PC}
loc_2EA94:
    MOVS R6, #0
    B loc_2E9EA
loc_2EA98:
    MOV.W R8, #0
    B loc_2EA52
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-patterns:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1F158)",
  "external-call-type:unspecified-helper (sub_1F20C)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:3",
  "fixed-value-assignment:6",
  "address-or-offset-constant:0x3F57C",
  "address-or-offset-constant:0x3A18",
  "address-or-offset-constant:0x3F580",
  "address-or-offset-constant:sub_1F158",
  "address-or-offset-constant:sub_1F20C",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:bitwise-manipulation",
  "inferred-algorithm:register-based-arithmetic",
  "inferred-algorithm:memory-access-and-update"
]
```<|im_end|>
############
```assembly
loc_26F30:
    PUSH.W {R4-R11,LR}
    MOVW R4, #0x6190
    SUB SP, SP, #0x154
    MOVT.W R4, #5
    MOV R8, R1
    MOV R9, R2
    LDR R1, [R4]
    LDR R2, [R0]
    STR R3, [SP,#0x178+var_168]
    LDR R3, [R0,#0x18]
    STR R4, [SP,#0x178+var_16C]
    STR R1, [SP,#0x178+var_2C]
    LDR R4, [R2,#0x38]
    CBZ R3, loc_26F8E
loc_26F52:
    LDR R3, [R0,#4]
    MOV R11, R0
    CBZ R3, loc_26F8E
loc_26F58:
    LDR R2, [R3]
    CMP R2, #2
    BEQ.W loc_27208
loc_26F60:
    LDR R3, [R4,#4]
    LDR R5, [R3,#0x14]
    CMP R5, #0x40
    BHI.W loc_2751C
loc_26F6A:
    LDR R3, [R3]
    ADD R7, SP, #0x178+var_6C
    BLX R3
    LDR R3, [R4,#4]
    MOV R2, R9
    MOV R1, R8
    LDR R3, [R3,#8]
    MOV R6, R0
    BLX R3
    LDR R3, [R4,#4]
    MOV R0, R6
    MOV R1, R7
    LDR R3, [R3,#0xC]
    BLX R3
    LDR.W R4, [R11,#4]
    LDR R3, [R4]
    CBZ R3, loc_26FA2
loc_26F8E:
    MOVS R0, #0
loc_26F90:
    LDR R3, [SP,#0x178+var_16C]
    LDR R2, [SP,#0x178+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_27518
loc_26F9C:
    ADD SP, SP, #0x154
    POP.W {R4-R11,PC}
loc_26FA2:
    MOV R1, R5
    MOV R0, R7
    LDR.W R8, [R11,#0x18]
    BL sub_1EDA8
    MOV R6, R0
    LDR R0, [R4,#0x1C]
    BL sub_1F158
    MOV R9, R0
    MOV R0, R6
    BL sub_1F158
    CMP R9, R0
    BLT.W loc_271D8
loc_26FC4:
    MOV R0, R7
    MOV R1, R5
    ADD R2, SP, #0x178+var_80
    BL sub_338F8
    LDR R1, [R4,#0x1C]
    ADD R3, SP, #0x178+var_80
    MOVS R2, #0x14
    MOVW R0, #0xFD78
    STR R2, [SP,#0x178+var_178]
    MOVT.W R0, #3
    MOV R2, R8
    BL sub_24070
    MOV R1, R0
    MOV R7, R0
    ADD.W R0, R4, #0x20
    BL sub_264F8
    MOV R9, R0
    CMP R0, #0
    BEQ.W loc_274E2
loc_26FF8:
    LDR R1, [R4,#0x1C]
    LDR.W R0, [R9,#4]
    BL sub_200D4
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_27014
loc_27010:
    BL sub_1E6B0
loc_27014:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_2701E
loc_2701A:
    BL sub_1E6B0
loc_2701E:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27028
loc_27024:
    BL sub_1E6B0
loc_27028:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R2, [R4,#0x1C]
    MOV R1, R8
    MOV R0, R5
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R7
    BL sub_20228
    MOV R9, R0
    MOV R0, R7
    BL sub_1E6B0
    CMP.W R9, #0
    BEQ.W loc_271EE
loc_2708E:
    LDR R2, [R4,#0x1C]
    MOV R1, R9
    MOV R0, R8
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    CMP R5, #0
    BEQ.W loc_27536
loc_270AC:
    CMP R6, #0
    BEQ.W loc_27200
loc_270B2:
    MOV R0, R5
    BL sub_1F158
    MOV R3, R0
    ADD.W R9, R3, #0xF
    ADDS R3, #8
    MOV R0, R6
    IT 
    MOVPL R9, R3
    BL sub_1F158
    LDR.W R3, [R11]
    MOV.W R2, R9,ASR#3
    SUBS R4, R2, #1
    MOV R7, R2
    ADD.W R8, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R8, R0
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR R2, [SP,#0x178+var_168]
    MOV.W R8, R8,ASR#3
    MOVS R1, #1
    STR R7, [SP,#0x178+var_164]
    MOV R10, R0
    ADDS R0, #8
    ADD R0, R7
    ADD R0, R8
    ADDS R0, #8
    STR R0, [R2]
    BL sub_193B8
    MOV.W R2, R10,ASR#24
    MOV.W R3, R10,ASR#16
    STRB.W R10, [R0,#3]
    MOV R7, R0
    STRB R2, [R0]
    MOV R2, R10
    STRB R3, [R0,#1]
    MOV.W R3, R10,ASR#8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR.W R1, [R11]
    UXTB.W R11, R8
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    MOV R3, R0
    LDR R0, [SP,#0x178+var_164]
    ADD.W R2, R3, R10
    ADD.W R1, R0, R8
    ADDS R1, #8
    MOV R12, R0
    UXTB R0, R0
    MOV.W LR, R1,ASR#24
    STRB.W LR, [R3,R10]
    ASRS R3, R1, #0x10
    STRB R0, [R2,#7]
    STRB R3, [R2,#1]
    ADD.W R3, R0, R11
    MOV R0, R12
    ASRS R1, R1, #8
    ADDS R3, #8
    STRB R1, [R2,#2]
    STRB R3, [R2,#3]
    MOV.W R1, R9,ASR#27
    MOV.W R3, R9,ASR#19
    STRB R1, [R2,#4]
    MOV.W R9, R9,ASR#11
    STRB R3, [R2,#5]
    ADD.W R10, R2, #8
    STRB.W R9, [R2,#6]
    CBZ R0, loc_2718C
loc_27174:
    MOV R9, R10
loc_27176:
    MOV R1, R4
    MOV R0, R5
    BL sub_1F20C
    SUBS R4, #1
    ADDS R2, R4, #1
    STRB.W R0, [R9],#1
    BNE loc_27176
loc_27188:
    LDR R3, [SP,#0x178+var_164]
    ADD R10, R3
loc_2718C:
    MOV.W R3, R8,ASR#24
    STRB.W R11, [R10,#3]
    STRB.W R3, [R10]
    ADD.W R4, R8, #0xFFFFFFFF
    MOV.W R3, R8,ASR#16
    ADD.W R10, R10, #4
    STRB.W R3, [R10,#-3]
    MOV.W R3, R8,ASR#8
    STRB.W R3, [R10,#-2]
    CMP.W R8, #0
    BEQ loc_271C8
loc_271B6:
    MOV R1, R4
    MOV R0, R6
    BL sub_1F20C
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R10],#1
    BNE loc_271B6
loc_271C8:
    MOV R0, R5
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R7
    B loc_26F90
loc_271D8:
    SUB.W R1, R0, R9
    MOV R0, R6
    BL sub_1F910
    MOV R3, R0
    MOV R0, R6
    MOV R6, R3
    BL sub_1E6B0
    B loc_26FC4
loc_271EE:
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    CMP R5, #0
    BEQ.W loc_26F8E
loc_27200:
    MOV R0, R5
    BL sub_1E6B0
    B loc_26F8E
loc_27208:
    LDR R5, [R3,#0xC]
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    ADD.W R4, SP, #0x178+var_155
    MOVS R6, #0
    LSRS R5, R5, #3
    CBZ R5, loc_27236
loc_2721A:
    MOV R1, R6
    LDR.W R0, [R11,#0x18]
    BL sub_1F20C
    ADDS R6, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R6
    BNE loc_2721A
loc_27236:
    ADD R7, SP, #0x178+var_6C
    ADD R0, SP, #0x178+var_154
    MOV R1, R7
    BL sub_31B84
    LDRB.W R3, [SP,#0x178+var_4D]
    LDRB.W R2, [SP,#0x178+var_6C]
    MOVS R1, #0x20
    MOV R0, R7
    AND.W R3, R3, #0x7F
    ORR.W R3, R3, #0x40
    BIC.W R2, R2, #7
    STRB.W R3, [SP,#0x178+var_4D]
    STRB.W R2, [SP,#0x178+var_6C]
    BL sub_1EE64
    STR R0, [SP,#0x178+var_164]
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    LDR.W R3, [R11,#4]
    ADD R0, SP, #0x178+var_154
    LDR R2, [R3,#0xC]
    LSRS R1, R2, #3
    RSB.W R2, R1, R2,LSR#2
    ADD R1, R7
    BL sub_31A54
    MOV R2, R9
    MOV R1, R8
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R1, R7
    ADD R0, SP, #0x178+var_154
    BL sub_31B84
    MOVS R1, #0x40
    MOV R0, R7
    BL sub_1EE64
    MOV R1, R0
    STR R0, [SP,#0x178+var_160]
    LDR.W R0, [R11,#4]
    ADDS R0, #0x1C
    BL sub_264F8
    MOV R6, R0
    CMP R0, #0
    BEQ.W loc_27508
loc_272B0:
    SUBS R5, #1
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    CMP R5, #0
    ADD.W R4, SP, #0x178+var_155
    BLE.W loc_27500
loc_272C2:
    MOV.W R10, #0
    STR R5, [SP,#0x178+var_15C]
loc_272C8:
    MOV R1, R10
    LDR R0, [R6,#8]
    BL sub_1F20C
    ADD.W R10, R10, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R10
    BNE loc_272C8
loc_272E4:
    LDR R1, [SP,#0x178+var_15C]
loc_272E6:
    LDR R0, [R6,#8]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB R0, [R4]
    LDR R0, [R6,#4]
    BL sub_1F234
    LDRB R3, [R4]
    MOVS R2, #1
    MOV R1, R4
    ORR.W R3, R3, R0,LSL#7
    ADD R0, SP, #0x178+var_154
    STRB R3, [R4]
    BL sub_31A54
    CMP R5, #0
    BLE.W loc_274F8
loc_27312:
    MOV.W R10, #0
    STR R5, [SP,#0x178+var_15C]
loc_27318:
    MOV R1, R10
    LDR.W R0, [R11,#0xC]
    BL sub_1F20C
    ADD.W R10, R10, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R10
    BNE loc_27318
loc_27336:
    LDR R1, [SP,#0x178+var_15C]
loc_27338:
    LDR.W R0, [R11,#0xC]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R3, R0, #0x7F
    LDR.W R0, [R11,#8]
    STRB R3, [R4]
    BL sub_1F234
    LDRB R3, [R4]
    MOV R1, R4
    MOVS R2, #1
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R2, R9
    MOV R1, R8
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R1, R7
    ADD R0, SP, #0x178+var_154
    BL sub_31B84
    MOV R0, R7
    MOVS R1, #0x40
    BL sub_1EE64
    LDR.W R3, [R11,#4]
    LDR R7, [SP,#0x178+var_164]
    LDR R2, [R3,#0x14]
    MOV R1, R7
    MOV R4, R0
    BL sub_1EAC0
    MOV R5, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R7, [SP,#0x178+var_160]
    MOV R1, R5
    MOV R0, R7
    BL sub_1FC80
    MOV R4, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR.W R3, [R11,#4]
    MOV R0, R4
    LDR R1, [R3,#0x14]
    BL sub_200D4
    MOV R7, R0
    MOV R0, R4
    BL sub_1E6B0
    LDR.W R3, [R11]
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR.W R3, [R11,#4]
    MOVS R1, #1
    MOV R8, R0
    LDR R0, [R3,#0xC]
    LDR R3, [SP,#0x178+var_168]
    LSRS R0, R0, #3
    ADD.W R0, R8, R0,LSL#1
    ADDS R0, #8
    STR R0, [R3]
    BL sub_193B8
    MOV.W R2, R8,ASR#24
    MOV.W R3, R8,ASR#16
    STRB R2, [R0]
    MOV R5, R0
    STRB R3, [R0,#1]
    MOV.W R3, R8,ASR#8
    STRB.W R8, [R0,#3]
    MOV R2, R8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR.W R1, [R11]
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    LDR.W R1, [R11,#4]
    LDR R1, [R1,#0xC]
    LSRS R1, R1, #0x1A
    STRB.W R1, [R0,R8]
    ADD.W R2, R0, R8
    LDR.W R3, [R11,#4]
    ADDS R4, R2, #4
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #0x12
    STRB R3, [R2,#1]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #0xA
    STRB R3, [R2,#2]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #3
    LSLS R3, R3, #1
    STRB R3, [R2,#3]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    MOV.W R9, R3,LSR#3
    CMP.W R9, #1
    BLE loc_274F0
loc_27454:
    MOV R10, R4
    MOV.W R11, #0
    ADD.W R8, R9, #0xFFFFFFFF
    STR.W R8, [SP,#0x178+var_168]
loc_27462:
    MOV R1, R11
    LDR R0, [R6,#8]
    BL sub_1F20C
    ADD.W R11, R11, #1
    CMP R11, R8
    STRB.W R0, [R10],#1
    BNE loc_27462
loc_27476:
    LDR R1, [SP,#0x178+var_168]
    ADD R4, R11
loc_2747A:
    LDR R0, [R6,#8]
    MOV R8, R4
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB.W R0, [R8],#1
    LDR R0, [R6,#4]
    BL sub_1F234
    LDRB R3, [R4]
    MOVS R2, #0
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R4]
    LDR R0, [R6,#4]
    STR R2, [R6]
    CBZ R0, loc_274A6
loc_274A2:
    BL sub_1E6B0
loc_274A6:
    LDR R0, [R6,#8]
    CBZ R0, loc_274AE
loc_274AA:
    BL sub_1E6B0
loc_274AE:
    LDR R0, [R6,#0xC]
    CBZ R0, loc_274B6
loc_274B2:
    BL sub_1E6B0
loc_274B6:
    MOVS R4, #0
    MOV R0, R6
    STRB R4, [R6,#0x10]
    BL sub_19494
    CMP.W R9, #0
    BEQ loc_274D8
loc_274C6:
    MOV R1, R4
    MOV R0, R7
    BL sub_1F20C
    ADDS R4, #1
    CMP R9, R4
    STRB.W R0, [R8],#1
    BNE loc_274C6
loc_274D8:
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R5
    B loc_26F90
loc_274E2:
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    B loc_26F8E
loc_274F0:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_168]
    MOV R1, R3
    B loc_2747A
loc_274F8:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_15C]
    MOV R1, R3
    B loc_27338
loc_27500:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_15C]
    MOV R1, R3
    B loc_272E6
loc_27508:
    LDR R0, [SP,#0x178+var_160]
    BL sub_1E6B0
    LDR R0, [SP,#0x178+var_164]
    BL sub_1E6B0
    MOV R0, R6
    B loc_26F90
loc_27518:
    BLX __stack_chk_fail
loc_2751C:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD5C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaSign
    MOVW R2, #0x9E9
    BLX __assert_fail
loc_27536:
    CMP R6, #0
    BEQ.W loc_26F8E
loc_2753C:
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    B loc_26F90
```
Output:7128
loc_270CC:
    LDR W0, [R9]
    BL sub_1E6B0
loc_270D8:
    LDR.W R0, [R9,#4]
    CBZ R0, loc_270EC
loc_270DC:
    BL sub_1E6B0
loc_270EC:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_27100
loc_27100:
    BL sub_1E6B0
loc_27104:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27118
loc_27108:
    BL sub_1E6B0
loc_27118:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R1, [R4,#0x1C]
    MOV R0, R8
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R7
    BL sub_20228
    MOV R9, R0
    MOV R0, R7
    BL sub_1E6B0
    CMP.W R9, #0
    BEQ.W loc_27198
loc_2714C:
    LDR W0, [R9]
    BL sub_1E6B0
loc_27158:
    LDR.W R0, [R9,#4]
    CBZ R0, loc_2719C
loc_2715C:
    BL sub_1E6B0
loc_2719C:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_271D0
loc_271A0:
    BL sub_1E6B0
loc_271A4:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_271B8
loc_271A8:
    BL sub_1E6B0
loc_271B8:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R1, [R4,#0x1C]
    MOV R0, R8
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R1, [R4,#0
############
```assembly
loc_35AE4:
    PUSH.W {R4-R8,LR}
    MOV R8, #0x56190
    SUB SP, SP, #0x90
    MOV R7, R0
    MOVS R6, #0
    LDR.W R3, [R8]
    STR R3, [SP,#0xA8+var_1C]
loc_35AFC:
    MOVS R2, #0x1F
    MOV R1, R7
    MOVS R0, #0
    BLX read
    SUBS R5, R0, #0
    BGE loc_35B66
loc_35B0A:
    BLX __errno_location
    LDR R3, [R0]
    MOV R4, R0
    CMP R3, #0xB
    BNE loc_35B66
loc_35B16:
    MOVS R2, #0x80
    MOVS R1, #0
    ADD R0, SP, #0xA8+s
    BLX memset
    MOVS R3, #1
    STR R3, [SP,#0xA8+s]
    B loc_35B2C
loc_35B26:
    LDR R3, [R4]
    CMP R3, #4
    BNE loc_35B64
loc_35B2C:
    MOVS R3, #0
    STR R6, [SP,#0xA8+timeout]
    MOV R2, R3
    ADD R1, SP, #0xA8+s
    MOVS R0, #1
    BLX select
    CMP R0, #0
    BLT loc_35B26
loc_35B3E:
    BEQ loc_35B7C
loc_35B40:
    LDR R3, [SP,#0xA8+s]
    LSLS R3, R3, #0x1F
    BMI loc_35AFC
loc_35B46:
    MOVW R3, #0x4310
    MOVW R1, #0x4F6C
    MOVW R0, #0x4F88
    MOVT.W R3, #4
    MOVT.W R1, #4
    MOVS R2, #0x6E
    MOVT.W R0, #4
    BLX __assert_fail
loc_35B64:
    MOV R5, R0
loc_35B66:
    LDR R2, [SP,#0xA8+var_1C]
    MOV R0, R5
    LDR.W R3, [R8]
    CMP R2, R3
    BNE loc_35B78
loc_35B72:
    ADD SP, SP, #0x90
    POP.W {R4-R8,PC}
loc_35B78:
    BLX __stack_chk_fail
loc_35B7C:
    MOVW R3, #0x4310
    MOVW R1, #0x4F6C
    MOVW R0, #0x4F7C
    MOVT.W R3, #4
    MOVT.W R1, #4
    MOVS R2, #0x6B
    MOVT.W R0, #4
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "Argument-count:0",
  "Calling-convention-hint:callee-saves-registers",
  "Stack-arg-use:true",
  "Standard-calling-convention-used",
  "Stack-frame-management-present",
  "Explicit-stack-allocation-size:0x90",
  "Callee-saves-registers-present",
  "Standard-function-return",
  "Conditional-branching-present",
  "Unconditional-jumps-present",
  "External-function-calls-present",
  "External-call-type:data-processing-helper (read)",
  "External-call-type:data-processing-helper (__errno_location)",
  "External-call-type:data-processing-helper (memset)",
  "External-call-type:data-processing-helper (select)",
  "External-call-type:data-processing-helper (__assert_fail)",
  "External-call-type:data-processing-helper (__stack_chk_fail)",
  "Integer-size-hint:32-bit",
  "Fixed-value-comparison:0",
  "Fixed-value-comparison:0xB",
  "Fixed-value-comparison:4",
  "Address-or-offset-constant:0x56190",
  "Address-or-offset-constant:s",
  "Address-or-offset-constant:timeout",
  "Address-or-offset-constant:var_1C",
  "Inferred-algorithm:error-or-alternative-path",
  "Inferred-algorithm:assertion-check",
  "Inferred-algorithm:resource-management",
  "Inferred-algorithm:conditional-execution",
  "Inferred-algorithm:loop-with-condition"
]
```<|im_end|>
############
```assembly
loc_1F294:
    LDR R2, [R1]
    PUSH {R4-R7,LR}
    MOV R5, R0
    LSLS R2, R2, #5
    SUBS R4, R2, #1
    BMI loc_1F33A
loc_1F2A0:
    ASRS R3, R4, #5
    ADDS R3, #1
    LDR.W R3, [R1,R3,LSL#2]
    CMP R3, #0
    BLT loc_1F34A
loc_1F2AC:
    MOV R3, R4
    B loc_1F2B8
loc_1F2B0:
    LDR.W R2, [R1,R2,LSL#2]
    LSRS R2, R0
    BNE loc_1F2CA
loc_1F2B8:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R0, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_1F2B0
loc_1F2CA:
    ADDS R3, #8
    ASRS R2, R3, #3
    ADDS R0, R2, #2
    B loc_1F2DA
loc_1F2D2:
    LDR.W R3, [R1,R3,LSL#2]
    LSRS R3, R6
    BNE loc_1F2EC
loc_1F2DA:
    SUBS R4, #1
    ADDS R3, R4, #1
    AND.W R6, R4, #0x1F
    MOV.W R3, R4,ASR#5
    ADD.W R3, R3, #1
    BNE loc_1F2D2
loc_1F2EC:
    ADDS R4, #1
    MOV R6, R5
    SUBS R3, R2, #1
    ASRS R7, R4, #8
    STRB.W R7, [R6],#2
    STRB R4, [R5,#1]
    CBZ R2, locret_1F338
loc_1F2FC:
    MOV.W LR, #0
    B loc_1F304
loc_1F302:
    SUBS R3, #1
loc_1F304:
    AND.W R2, R3, #3
    CMP R3, #0
    MOV.W R4, R3,ASR#2
    ADD.W R6, R6, #1
    ADD.W R4, R4, #1
    MOV.W R2, R2,LSL#3
    MOV.W R5, #0
    BLT loc_1F350
loc_1F320:
    LDR R7, [R1]
    CMP.W R3, R7,LSL#2
    ITT 
    LDRLT.W R5, [R1,R4,LSL#2]
    LSRLT R5, R2
    STRB.W R5, [R6,#-1]
    CMP R3, #0
    BNE loc_1F302
loc_1F336:
    POP {R4-R7,PC}
loc_1F338:
    POP {R4-R7,PC}
loc_1F33A:
    ADD.W R3, R2, #0xE
    ADDS R2, #7
    IT 
    MOVMI R2, R3
    ASRS R2, R2, #3
    ADDS R0, R2, #2
    B loc_1F2EC
loc_1F34A:
    ASRS R2, R2, #3
    ADDS R0, R2, #2
    B loc_1F2EC
loc_1F350:
    STRB.W LR, [R6,#-1]
    B loc_1F302
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shift-left-present",
  "bitwise-shift-right-present",
  "bitwise-and-present",
  "bitwise-not-present",
  "conditional-branching-present",
  "loop-detection",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper",
  "memory-read-from-input-parameter-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "memory-write-to-output-parameter-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:7",
  "fixed-value-assignment:2",
  "fixed-value-assignment:3",
  "address-or-offset-constant:0xE",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:loop-based-processing",
  "inferred-algorithm:conditional-execution",
  "inferred-algorithm:output-generation"
]
```<|im_end|>
############
```assembly
loc_252E0:

loc_25510:
    PUSH {R3-R7,LR}
    LDR R6, [R2]
    LDR R6, [R6]
    CMP R6, #2
    BEQ loc_25568
loc_2551A:
    CMP R1, #0
    BLE loc_25526
loc_2551E:
    MOV R4, R2
    LDRB R2, [R0]
    CMP R2, #4
    BEQ loc_2552C
loc_25526:
    MOVS R6, #0
loc_25528:
    MOV R0, R6
    POP {R3-R7,PC}
loc_2552C:
    SUBS R3, R1, #1
    ANDS.W R7, R3, #1
    BEQ loc_25542
loc_25534:
    MOVS R3, #0
    STR R3, [R4,#4]
    MOV R6, R3
    STR R3, [R4,#8]
    STR R3, [R4,#0xC]
    MOV R0, R6
    POP {R3-R7,PC}
loc_25542:
    MOV R5, R4
    MOV R6, R0
    ASRS R4, R3, #1
    ADDS R6, #1
    MOV R1, R4
    MOV R0, R6
    BL sub_1EDA8
    MOV R1, R4
    STR R0, [R5,#4]
    ADDS R0, R6, R4
    BL sub_1EDA8
    LDRB R3, [R5,#0x10]
    STR R7, [R5,#0xC]
    STR R0, [R5,#8]
    CBZ R3, loc_2556E
loc_25564:
    MOVS R6, #1
    B loc_25528
loc_25568:
    POP.W {R3-R7,LR}
    B sub_252E0
loc_2556E:
    MOV R0, R5
    BL sub_24D84
    MOV R6, R0
    CMP R0, #0
    BNE loc_25564
loc_2557A:
    LDR R0, [R5,#4]
    BL sub_1E6B0
    STR R6, [R5,#4]
    LDR R0, [R5,#8]
    BL sub_1E6B0
    STR R6, [R5,#8]
    B loc_25528
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_1EDA8)",
  "external-call-type:data-processing-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:AND-clear",
  "bitwise-operation:OR",
  "bitwise-operation:ASRS (arithmetic shift right and subtract)",
  "memory-read-from-input-parameter-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "address-or-offset-constant:sub_1EDA8",
  "address-or-offset-constant:sub_1E6B0",
  "address-or-offset-constant:0x252E0",
  "address-or-offset-constant:0x252E0",
  "address-or-offset-constant:0x24D84",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:conditional-data-processing",
  "inferred-algorithm:data-manipulation",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_114D0:
    ADR R12, 0x114D8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(readdir_ptr - 0x554D8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:direct-execution",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (readdir_ptr)",
  "address-or-offset-constant:0x114D8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:readdir_ptr",
  "inferred-algorithm:file-directory-access",
  "inferred-algorithm:indirect-function-pointer"
]
```<|im_end|>
############
```assembly
loc_2DCC4:
    PUSH {R3-R7,LR}
    MOVS R0, #1
    MOV R6, R1
    MOVS R1, #0x24
    MOV R5, R2
    BL sub_193B8
    LDR R2, [R5]
    MOVS R3, #0
    CMP R2, #3
    MOV R4, R0
    STR R3, [R0,#0x20]
    IT 
    STRLE R3, [R0,#8]
    BGT loc_2DD7A
loc_2DCE2:
    MOVS R3, #0
    STR R3, [R4,#0xC]
loc_2DCE6:
    MOVS R3, #0
    STR R3, [R4,#0x10]
loc_2DCEA:
    MOVS R3, #0
    STR R3, [R4,#0x1C]
loc_2DCEE:
    MOVS R3, #0
    STR R3, [R4,#0x14]
loc_2DCF2:
    MOVS R1, #0
loc_2DCF4:
    LDR R3, [R4,#8]
    STR R1, [R4,#0x18]
    CBZ R3, loc_2DD40
loc_2DCFA:
    LDR R2, [R4,#0xC]
    CMP R2, #0
    BEQ.W loc_2DF66
loc_2DD02:
    LDR R2, [R4,#0x10]
    CMP R2, #0
    BEQ.W loc_2DF66
loc_2DD0A:
    LDR R2, [R4,#0x1C]
    CMP R2, #0
    BEQ.W loc_2DF66
loc_2DD12:
    LDR R0, [R4,#0x14]
    CMP R0, #0
    IT 
    CMPNE R1, #0
    BEQ.W loc_2DF66
loc_2DD1E:
    BL sub_1FC7C
loc_2DD22:
    LDR R1, [R4,#8]
    MOV R6, R0
    BL sub_1F358
    MOV R5, R0
    MOV R0, R6
    BL sub_1E6B0
    CMP R5, #0
    BEQ.W loc_2DF42
loc_2DD38:
    LDR R0, [R4,#8]
    CBZ R0, loc_2DD40
loc_2DD3C:
    BL sub_1E6B0
loc_2DD40:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2DD48
loc_2DD44:
    BL sub_1E6B0
loc_2DD48:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2DD50
loc_2DD4C:
    BL sub_1E6B0
loc_2DD50:
    LDR R0, [R4,#0x14]
    CBZ R0, loc_2DD58
loc_2DD54:
    BL sub_1E6B0
loc_2DD58:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_2DD60
loc_2DD5C:
    BL sub_1E6B0
loc_2DD60:
    LDR R0, [R4,#0x1C]
    CBZ R0, loc_2DD68
loc_2DD64:
    BL sub_1E6B0
loc_2DD68:
    LDR R0, [R4,#0x20]
    CBZ R0, loc_2DD70
loc_2DD6C:
    BL sub_19494
loc_2DD70:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP {R3-R7,PC}
loc_2DD7A:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT.W loc_2DF52
loc_2DD9C:
    SUBS R3, #4
    LDR R0, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT.W loc_2DF52
loc_2DDB0:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DDC0
loc_2DDBA:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DDC0:
    CMP R3, #3
    STR R0, [R4,#8]
    BLE loc_2DCE2
loc_2DDC6:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT.W loc_2DF62
loc_2DDE8:
    SUBS R3, #4
    LDR R0, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT.W loc_2DF62
loc_2DDFC:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DE0C
loc_2DE06:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DE0C:
    CMP R3, #3
    STR R0, [R4,#0xC]
    BLE.W loc_2DCE6
loc_2DE14:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT.W loc_2DF5E
loc_2DE36:
    SUBS R3, #4
    LDR R0, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT.W loc_2DF5E
loc_2DE4A:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DE5A
loc_2DE54:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DE5A:
    CMP R3, #3
    STR R0, [R4,#0x10]
    BLE.W loc_2DCEA
loc_2DE62:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_2DF5A
loc_2DE82:
    SUBS R3, #4
    LDR R0, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT loc_2DF5A
loc_2DE94:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DEA4
loc_2DE9E:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DEA4:
    CMP R3, #3
    STR R0, [R4,#0x1C]
    BLE.W loc_2DCEE
loc_2DEAC:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT loc_2DF56
loc_2DECC:
    SUBS R3, #4
    LDR R0, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT loc_2DF56
loc_2DEDE:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DEEE
loc_2DEE8:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DEEE:
    CMP R3, #3
    STR R0, [R4,#0x14]
    BLE.W loc_2DCF2
loc_2DEF6:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT.W loc_2DCF2
loc_2DF16:
    LDR R3, [R5]
    LDR R0, [R6]
    SUBS R3, #4
    STR R3, [R5]
    CMP R1, R3
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT.W loc_2DCF2
loc_2DF2C:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CMP R0, #0
    BEQ.W loc_2DCF2
loc_2DF3A:
    BL sub_1EDA8
    MOV R1, R0
    B loc_2DCF4
loc_2DF42:
    MOV R0, R4
    BL sub_2DA44
    CMP R0, #0
    BEQ.W loc_2DD38
loc_2DF4E:
    MOV R0, R4
    POP {R3-R7,PC}
loc_2DF52:
    MOVS R0, #0
    B loc_2DDC0
loc_2DF56:
    MOVS R0, #0
    B loc_2DEEE
loc_2DF5A:
    MOVS R0, #0
    B loc_2DEA4
loc_2DF5E:
    MOVS R0, #0
    B loc_2DE5A
loc_2DF62:
    MOVS R0, #0
    B loc_2DE0C
loc_2DF66:
    MOV R0, R3
    BL sub_1E6B0
    B loc_2DD40
```
Output:    STRGT R0, [R6]
    BGT.W loc_2DF62
loc_2DDF2:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DDFF
loc_2DDFC:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DDFF:
    CMP R3, #3
    STR R0, [R4,#8]
    BLE loc_2DCE6
loc_2DE05:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT.W loc_2DF6A
loc_2DE2A:
    SUBS R3, #4
    LDR R0, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT.W loc_2DF6A
loc_2DE34:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DE44
loc_2DE3E:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DE44:
    CMP R3, #3
    STR R0, [R4,#8]
    BLE loc_2DCEA
loc_2DE4A:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUBS R1, R0, #0
    BLT.W loc_2DF72
loc_2DE6C:
    SUBS R3, #4
    LDR R0, [R6]
    CMP R1, R3
    STR R3, [R5]
    ADD.W R0, R0, #4
    IT 
    STRGT R0, [R6]
    BGT.W loc_2DF72
loc_2DE76:
    SUBS R3, R3, R1
    ADDS R2, R0, R1
    STR R2, [R6]
    STR R3, [R5]
    CBZ R0, loc_2DE86
loc_2DE80:
    BL sub_1EDA8
    LDR R3, [R5]
loc_2DE86:
    CMP R3, #3
    STR R0, [R4,#8]
    BLE loc_2DCEE
loc_2DE8C:
    LDR R2, [R6]
    LDRB R3, [R2,#1]
    LDRB R7, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R7,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    LDR R3, [R5]
    SUB
############
```assembly
loc_2B94C:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R11, R1
    MOV R10, R2
    STR R3, [SP,#0x30+var_2C]
    BL sub_18E74
    BL sub_18F68
    MOVS R1, #0x20
    MOV R9, R0
    BLX strchr
    CMP R0, #0
    BEQ loc_2BA58
loc_2B96C:
    ADDS R4, R0, #1
    MOVS R5, #0
    MOVS R1, #0x20
    STRB R5, [R0]
    MOV R0, R4
    BLX strchr
    MOV R8, R0
    CBZ R0, loc_2B988
loc_2B97E:
    STRB R5, [R0]
    ADDS R0, #1
    BL sub_18A88
    MOV R8, R0
loc_2B988:
    MOV R0, R4
    MOVS R5, #0
    BLX strlen
    MOVS R1, #1
    LSRS R0, R0, #2
    ADD.W R7, R0, R0,LSL#1
    MOV R0, R7
    BL sub_193B8
    MOV R6, R0
    B loc_2B9B4
loc_2B9A2:
    ADDS R3, R5, #2
    CMP R7, R3
    BLE loc_2BA66
loc_2B9A8:
    ADDS R1, R6, R5
    MOV R0, R4
    BL sub_19044
    ADDS R4, #4
    ADD R5, R0
loc_2B9B4:
    MOVS R2, #4
    MOVS R1, #0
    MOV R0, R4
    BLX memchr
    CMP R0, #0
    BEQ loc_2B9A2
loc_2B9C2:
    LDRB R3, [R4]
    CBZ R3, loc_2B9F0
loc_2B9C6:
    MOV R4, #0x43698
loc_2B9CE:
    MOV R0, R9
    BL sub_19494
    MOV R0, R8
    BL sub_19494
    MOV R0, R6
    BL sub_19494
    LDR R3, [SP,#0x30+arg_0]
    MOV R0, R3
    CBZ R3, loc_2B9EA
loc_2B9E6:
    MOVS R0, #0
    STR R4, [R3]
loc_2B9EA:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_2B9F0:
    MOV R0, R9
    BLX strlen
    ADDS R3, R0, #3
    CMP R5, R3
    BLE loc_2BA14
loc_2B9FC:
    LDRB R1, [R6,#1]
    LDRB R4, [R6]
    LDRB R3, [R6,#3]
    LSLS R1, R1, #0x10
    LDRB R2, [R6,#2]
    ORR.W R1, R1, R4,LSL#24
    ORRS R3, R1
    ORR.W R3, R3, R2,LSL#8
    CMP R0, R3
    BEQ loc_2BA1E
loc_2BA14:
    MOV R4, #0x436D4
    B loc_2B9CE
loc_2BA1E:
    MOV R2, R0
    MOV R1, R9
    ADDS R0, R6, #4
    BLX memcmp
    CMP R0, #0
    BNE loc_2BA14
loc_2BA2C:
    CMP.W R11, #0
    BEQ loc_2BA3C
loc_2BA32:
    MOV R0, R9
    BL sub_18A88
    STR.W R0, [R11]
loc_2BA3C:
    CMP.W R10, #0
    BEQ loc_2BA46
loc_2BA42:
    STR.W R5, [R10]
loc_2BA46:
    LDR R3, [SP,#0x30+var_2C]
    CBZ R3, loc_2BA80
loc_2BA4A:
    STR.W R8, [R3]
loc_2BA4E:
    MOV R0, R9
    BL sub_19494
    MOV R0, R6
    B loc_2B9EA
loc_2BA58:
    MOVW R4, #0x3670
    MOV R6, R0
    MOV R8, R0
    MOVT.W R4, #4
    B loc_2B9CE
loc_2BA66:
    MOVW R1, #0x3380
    MOVW R0, #0x370C
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aOpensshLoadpub
    MOVW R2, #0x426
    BLX __assert_fail
loc_2BA80:
    MOV R0, R8
    BL sub_19494
loc_2BA86:

```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:string-pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strchr)",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (memchr)",
  "external-call-type:data-processing-helper (memcmp)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:2",
  "fixed-value-assignment:4",
  "fixed-value-assignment:1",
  "fixed-value-assignment:-1",
  "address-or-offset-constant:aOpensshLoadpub",
  "byte-order-processing:little-endian",
  "bitwise-operation-shift-left",
  "bitwise-operation-or",
  "inferred-algorithm:data-validation",
  "inferred-algorithm:data-parsing",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:file-reading-or-writing"
]
```<|im_end|>
############
```assembly
loc_33C3E:
    CMP R5, #0
    BLT loc_33C80
loc_33C42:
    LDR R7, [R4,#4]
    CMP R7, #0
    BEQ.W loc_33E2A
loc_33C4A:
    LDR R3, [R4,#0x14]
    CMP R3, R5
    BGE loc_33C7A
loc_33C50:
    ADDS R3, #1
    LDR R2, [R4,#0x18]
    SUBS R5, R5, R3
    CMP R5, R2
    BLE.W loc_33E1E
loc_33C5C:
    ADDS R2, #1
    LDR R3, [R4,#0x1C]
    SUBS R5, R5, R2
    CMP R5, R3
    BLE.W loc_33E3A
loc_33C68:
    ADDS R3, #1
    LDR R2, [R4,#0x20]
    SUBS R5, R5, R3
    CMP R5, R2
    BGT.W loc_34008
loc_33C74:
    LDR R7, [R4,#0x10]
    MOVS R2, #3
loc_33C78:
    CBZ R7, loc_33CCE
loc_33C7A:
    CMP R5, #0
    MOV R4, R7
    BGE loc_33C42
loc_33C80:
    LDR.W R3, [R9,#4]
    MOV R0, R6
    LDR R1, [R4,#0x24]
    BLX R3
    CMP R0, #0
    ITT 
    LDRLT R7, [R4,#4]
    MOVLT R2, #0
    BLT loc_33C78
loc_33C94:
    BEQ.W loc_34004
loc_33C98:
    LDR R1, [R4,#0x28]
    CMP R1, #0
    BEQ.W loc_33E1E
loc_33CA0:
    LDR.W R3, [R9,#4]
    MOV R0, R6
    BLX R3
    CMP R0, #0
    BLT.W loc_33E1E
loc_33CAE:
    BEQ.W loc_3409E
loc_33CB2:
    LDR R1, [R4,#0x2C]
    CMP R1, #0
    BEQ.W loc_33E3A
loc_33CBA:
    LDR.W R3, [R9,#4]
    MOV R0, R6
    BLX R3
    CMP R0, #0
    BLT.W loc_33E3A
loc_33CC8:
    BNE loc_33C74
loc_33CCA:
    LDR R2, [R4,#0x2C]
    B loc_33E80
loc_33CCE:
    LDR R1, [R4,#0x28]
    ADD.W R2, R4, R2,LSL#2
    ADD.W R11, R2, #4
    CMP R1, #0
    BEQ.W loc_340B6
loc_33CDE:
    LDR R3, [R4,#0x2C]
    CMP R3, #0
    BEQ.W loc_340A2
loc_33CE6:
    ADDS R3, R4, #4
    STR R3, [SP,#0x38+var_34]
    LDR R3, [SP,#0x38+var_30]
    MOV R10, R11
    STR.W R9, [SP,#0x38+var_2C]
    MOV R6, R7
    MOV R8, R7
    MOV R5, R7
    MOV R11, R3
    MOV R9, R7
loc_33CFC:
    MOVS R1, #0x30
    MOVS R0, #1
    BL sub_193B8
    LDR R3, [R4]
    STR R3, [R0]
    LDR R3, [SP,#0x38+var_34]
    CMP R10, R3
    BEQ.W loc_33E88
loc_33D10:
    ADD.W R3, R4, #8
    CMP R10, R3
    BEQ.W loc_33EC4
loc_33D1A:
    ADD.W R3, R4, #0xC
    CMP R10, R3
    LDR R3, [R4,#4]
    BEQ.W loc_33F00
loc_33D26:
    LDR R1, [R4,#0x14]
    MOV R2, R11
    STR R3, [R0,#4]
    MOV LR, R6
    LDR R3, [R4,#8]
    MOV R12, R5
    STR R1, [R0,#0x14]
    MOV R1, R9
    STR R3, [SP,#0x38+var_34]
    LDR R3, [R4,#0x24]
    STR R3, [R0,#0x24]
    LDR R3, [R4,#0x18]
    STR R3, [R0,#0x18]
    LDR R3, [SP,#0x38+var_34]
    STR R3, [R0,#8]
    LDR R3, [R4,#0xC]
    STR R3, [SP,#0x38+var_34]
    LDR R3, [R4,#0x28]
    STR R3, [R0,#0x28]
    LDR R3, [SP,#0x38+var_34]
    STR R3, [R0,#0xC]
    LDR R3, [R4,#0x1C]
    STR R3, [R0,#0x1C]
    MOV R3, R7
    STR.W R11, [R4,#0x24]
    LDR.W R11, [R4,#0x2C]
    STR.W R9, [R4,#4]
    STR R6, [R4,#0x14]
    STR R7, [R4,#8]
    STR R5, [R4,#0x18]
loc_33D68:
    STR.W R8, [R4,#0xC]
    STR.W R8, [R4,#0x10]
    LDR R5, [R0,#4]
    STR.W R8, [R0,#0x10]
    STR.W R8, [R4,#0x1C]
    STR.W R8, [R4,#0x20]
    STR.W R8, [R0,#0x20]
    STR.W R8, [R4,#0x28]
    STR.W R8, [R4,#0x2C]
    STR.W R8, [R0,#0x2C]
    CBZ R5, loc_33D92
loc_33D90:
    STR R0, [R5]
loc_33D92:
    LDR R5, [R0,#8]
    CBZ R5, loc_33D98
loc_33D96:
    STR R0, [R5]
loc_33D98:
    LDR R5, [R0,#0xC]
    CBZ R5, loc_33D9E
loc_33D9C:
    STR R0, [R5]
loc_33D9E:
    CBZ R1, loc_33DA2
loc_33DA0:
    STR R4, [R1]
loc_33DA2:
    CBZ R3, loc_33DA6
loc_33DA4:
    STR R4, [R3]
loc_33DA6:
    LDR R7, [R0,#0x14]
    LDR R3, [R0,#0x18]
    LDR R1, [R0,#0x24]
    LDR R6, [R0,#0x1C]
    ADD R3, R7
    ADD R6, R3
    CBZ R1, loc_33DB6
loc_33DB4:
    ADDS R6, #1
loc_33DB6:
    LDR R3, [R0,#0x28]
    CBZ R3, loc_33DBC
loc_33DBA:
    ADDS R6, #1
loc_33DBC:
    LDR R5, [R4,#0x20]
    ADD LR, R12
    ADD R5, LR
    CBZ R2, loc_33DC6
loc_33DC4:
    ADDS R5, #1
loc_33DC6:
    LDR R3, [R4,#0x2C]
    CBZ R3, loc_33DCC
loc_33DCA:
    ADDS R5, #1
loc_33DCC:
    LDR R3, [R4]
    CMP R3, #0
    BEQ loc_33E46
loc_33DD2:
    LDR R2, [R3,#4]
    CMP R2, R4
    ITT 
    ADDEQ.W R10, R3, #4
    STREQ.W R10, [SP,#0x38+var_34]
    BEQ loc_33E06
loc_33DE2:
    LDR R2, [R3,#8]
    CMP R2, R4
    ITTT 
    ADDEQ R2, R3, #4
    ADDEQ.W R10, R3, #8
    STREQ R2, [SP,#0x38+var_34]
    BEQ loc_33E06
loc_33DF2:
    LDR R2, [R3,#0xC]
    CMP R2, R4
    ADD.W R2, R3, #4
    ITE 
    ADDEQ.W R10, R3, #0xC
    ADDNE.W R10, R3, #0x10
    STR R2, [SP,#0x38+var_34]
loc_33E06:
    LDR R1, [R3,#0x28]
    CMP R1, #0
    BEQ.W loc_33F36
loc_33E0E:
    LDR R2, [R3,#0x2C]
    MOV R9, R0
    MOV R7, R4
    CMP R2, #0
    BEQ.W loc_33FC4
loc_33E1A:
    MOV R4, R3
    B loc_33CFC
loc_33E1E:
    LDR R7, [R4,#8]
    MOVS R2, #1
    CMP R7, #0
    BNE.W loc_33C7A
loc_33E28:
    B loc_33CCE
loc_33E2A:
    ADD.W R3, R4, R5,LSL#2
    MOV R2, R5
    LDR R7, [R3,#4]
    CMP R7, #0
    BNE.W loc_33C7A
loc_33E38:
    B loc_33CCE
loc_33E3A:
    LDR R7, [R4,#0xC]
    MOVS R2, #2
    CMP R7, #0
    BNE.W loc_33C7A
loc_33E44:
    B loc_33CCE
loc_33E46:
    MOV R10, R5
    MOVS R1, #0x30
    MOV R5, R0
    MOVS R0, #1
    STR R3, [SP,#0x38+var_34]
    LDR.W R9, [SP,#0x38+var_2C]
    BL sub_193B8
    LDR R3, [SP,#0x38+var_34]
    LDR R2, [SP,#0x38+var_30]
    STR.W R0, [R9]
    STR R5, [R0,#4]
    STR R6, [R0,#0x14]
    STR.W R11, [R0,#0x24]
    STR R4, [R0,#8]
    STR.W R10, [R0,#0x18]
    STR R3, [R0,#0x28]
    STR R3, [R0,#0xC]
    STR R3, [R0,#0x1C]
    STR R3, [R0,#0x2C]
    STR R3, [R0,#0x10]
    STR R3, [R0,#0x20]
    STR R3, [R0]
    STR R0, [R5]
    STR R0, [R4]
loc_33E80:
    MOV R0, R2
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_33E88:
    STR.W R9, [R0,#4]
    STR R6, [R0,#0x14]
    STR.W R11, [R0,#0x24]
    STR R7, [R0,#8]
    STR R5, [R0,#0x18]
    LDR R1, [R4,#0x24]
    LDR R2, [R4,#8]
    LDR R3, [R4,#0x18]
    STR R1, [R0,#0x28]
    STR R2, [R0,#0xC]
    LDR R2, [R4,#0x2C]
    LDR R1, [R4,#0xC]
    STR R3, [R0,#0x1C]
    LDR R3, [R4,#0x10]
    LDR.W LR, [R4,#0x1C]
    LDR.W R12, [R4,#0x20]
    STR R2, [R4,#0x24]
    STR R1, [R4,#4]
    STR.W LR, [R4,#0x14]
    STR R3, [R4,#8]
    STR.W R12, [R4,#0x18]
    LDR.W R11, [R4,#0x28]
    B loc_33D68
loc_33EC4:
    LDR R3, [R4,#4]
    LDR R2, [R4,#0x14]
    LDR R1, [R4,#0x24]
    STR R3, [R0,#4]
    STR R2, [R0,#0x14]
    STR R1, [R0,#0x24]
    STR.W R9, [R0,#8]
    STR R7, [R0,#0xC]
    STR R6, [R0,#0x18]
    STR.W R11, [R0,#0x28]
    STR R5, [R0,#0x1C]
    LDR R1, [R4,#0xC]
    LDR.W LR, [R4,#0x1C]
    LDR R2, [R4,#0x2C]
    LDR R3, [R4,#0x10]
    LDR.W R12, [R4,#0x20]
    STR R1, [R4,#4]
    STR.W LR, [R4,#0x14]
    STR R2, [R4,#0x24]
    STR R3, [R4,#8]
    STR.W R12, [R4,#0x18]
    LDR.W R11, [R4,#0x28]
    B loc_33D68
loc_33F00:
    LDR R2, [R4,#0x14]
    MOV LR, R5
    LDR R1, [R4,#0x24]
    STR R3, [R0,#4]
    LDR R3, [R4,#8]
    STR R2, [R0,#0x14]
    STR R1, [R0,#0x24]
    MOV R1, R7
    LDR R2, [R4,#0x18]
    STR R3, [R0,#8]
    LDR R3, [R4,#0x28]
    STR R2, [R0,#0x18]
    STR.W R9, [R0,#0xC]
    STR R3, [R0,#0x28]
    STR R6, [R0,#0x1C]
    LDR R3, [R4,#0x10]
    LDR R2, [R4,#0x2C]
    LDR.W R12, [R4,#0x20]
    STR R7, [R4,#4]
    STR R5, [R4,#0x14]
    STR R3, [R4,#8]
    STR R2, [R4,#0x24]
    STR.W R12, [R4,#0x18]
    B loc_33D68
loc_33F36:
    MOV LR, R11
    MOV R11, R10
    MOV R10, R5
    MOV R5, R0
loc_33F3E:
    LDR R2, [SP,#0x38+var_34]
    CMP R11, R2
    BEQ.W loc_34056
loc_33F46:
    LDR R7, [R3,#4]
    MOV R0, R4
    STR R4, [R3,#0xC]
    MOV R4, R5
    STR.W R10, [R3,#0x1C]
    STR.W LR, [R3,#0x28]
    STR R5, [R3,#8]
    STR R6, [R3,#0x18]
loc_33F5A:
    CBZ R7, loc_33F5E
loc_33F5C:
    STR R3, [R7]
loc_33F5E:
    CBZ R4, loc_33F62
loc_33F60:
    STR R3, [R4]
loc_33F62:
    CBZ R0, loc_33F66
loc_33F64:
    STR R3, [R0]
loc_33F66:
    LDR R5, [R3]
    CBNZ R5, loc_33F6E
loc_33F6A:
    B loc_33FBA
loc_33F6C:
    MOV R5, R0
loc_33F6E:
    LDR R2, [R3,#0x18]
    LDR R4, [R3,#0x14]
    LDR R1, [R3,#0x1C]
    LDR R0, [R3,#0x24]
    ADD R4, R2
    LDR R2, [R3,#0x20]
    ADD R1, R4
    ADD R2, R1
    CBZ R0, loc_33F82
loc_33F80:
    ADDS R2, #1
loc_33F82:
    LDR R1, [R3,#0x28]
    CBZ R1, loc_33F88
loc_33F86:
    ADDS R2, #1
loc_33F88:
    LDR R1, [R3,#0x2C]
    CBZ R1, loc_33F8E
loc_33F8C:
    ADDS R2, #1
loc_33F8E:
    LDR R1, [R5,#4]
    CMP R1, R3
    IT 
    MOVEQ R1, #0
    BEQ loc_33FAC
loc_33F98:
    LDR R1, [R5,#8]
    CMP R1, R3
    IT 
    MOVEQ R1, #1
    BEQ loc_33FAC
loc_33FA2:
    LDR R1, [R5,#0xC]
    CMP R1, R3
    ITE 
    MOVNE R1, #3
    MOVEQ R1, #2
loc_33FAC:
    LDR R0, [R5]
    ADD.W R1, R5, R1,LSL#2
    MOV R3, R5
    STR R2, [R1,#0x14]
    CMP R0, #0
    BNE loc_33F6C
loc_33FBA:
    LDR R2, [SP,#0x38+var_30]
    MOV R0, R2
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_33FC4:
    MOV LR, R11
    MOV R11, R10
    MOV R10, R5
    MOV R5, R0
loc_33FCC:
    LDR R2, [SP,#0x38+var_34]
    CMP R2, R11
    BEQ loc_34074
loc_33FD2:
    ADD.W R0, R3, #8
    CMP R11, R0
    BEQ loc_3400C
loc_33FDA:
    LDR R0, [R3,#4]
    MOV R7, R4
    LDR R1, [R3,#8]
    MOV R2, R5
    STR R4, [R3,#0x10]
    STR.W R10, [R3,#0x20]
    STR.W LR, [R3,#0x2C]
    STR R5, [R3,#0xC]
    STR R6, [R3,#0x1C]
loc_33FF0:
    CBZ R0, loc_33FF4
loc_33FF2:
    STR R3, [R0]
loc_33FF4:
    CBZ R1, loc_33FF8
loc_33FF6:
    STR R3, [R1]
loc_33FF8:
    CBZ R2, loc_33FFC
loc_33FFA:
    STR R3, [R2]
loc_33FFC:
    CMP R7, #0
    BEQ loc_33F66
loc_34000:
    STR R3, [R7]
    B loc_33F66
loc_34004:
    LDR R2, [R4,#0x24]
    B loc_33E80
loc_34008:
    MOVS R2, #0
    B loc_33E80
loc_3400C:
    LDR R0, [R3,#0x1C]
    MOV R2, R4
    LDR R7, [R3,#0xC]
    STR R1, [R3,#0x2C]
    MOV R1, R5
    STR R0, [R3,#0x20]
    STR.W LR, [R3,#0x28]
    STR R5, [R3,#8]
    STR R6, [R3,#0x18]
    STR R7, [R3,#0x10]
    STR R4, [R3,#0xC]
    STR.W R10, [R3,#0x1C]
    LDR R0, [R3,#4]
    B loc_33FF0
loc_3402C:
    MOVS R1, #0x30
    MOVS R0, #1
    BL sub_193B8
    LDR R3, [SP,#0x38+var_30]
    MOV R2, R3
    STR.W R0, [R9]
    STR R4, [R0,#0x2C]
    STR R4, [R0,#0x28]
    STR R4, [R0,#8]
    STR R4, [R0,#4]
    STR R4, [R0,#0x10]
    STR R4, [R0,#0xC]
    STR R4, [R0,#0x18]
    STR R4, [R0,#0x14]
    STR R4, [R0,#0x20]
    STR R4, [R0,#0x1C]
    STR R4, [R0]
    STR R3, [R0,#0x24]
    B loc_33E80
loc_34056:
    LDR R0, [R3,#8]
    MOV R7, R5
    LDR R1, [R3,#0x18]
    LDR R2, [R3,#0x24]
    STR R5, [R3,#4]
    STR R6, [R3,#0x14]
    STR R0, [R3,#0xC]
    STR R4, [R3,#8]
    STR R1, [R3,#0x1C]
    STR.W R10, [R3,#0x18]
    STR R2, [R3,#0x28]
    STR.W LR, [R3,#0x24]
    B loc_33F5A
loc_34074:
    STR R1, [R3,#0x2C]
    MOV R0, R5
    LDR R1, [R3,#0x1C]
    LDR R7, [R3,#0xC]
    LDR R2, [R3,#8]
    STR R5, [R3,#4]
    STR R1, [R3,#0x20]
    MOV R1, R4
    LDR R5, [R3,#0x24]
    STR R4, [R3,#8]
    LDR R4, [R3,#0x18]
    STR R6, [R3,#0x14]
    STR R7, [R3,#0x10]
    STR R2, [R3,#0xC]
    STR R4, [R3,#0x1C]
    STR.W R10, [R3,#0x18]
    STR R5, [R3,#0x28]
    STR.W LR, [R3,#0x24]
    B loc_33FF0
loc_3409E:
    LDR R2, [R4,#0x28]
    B loc_33E80
loc_340A2:
    LDR R2, [SP,#0x38+var_30]
    ADDS R3, R4, #4
    MOV R10, R7
    STR R3, [SP,#0x38+var_34]
    MOV R6, R7
    MOV R3, R4
    MOV LR, R2
    MOV R4, R7
    MOV R5, R7
    B loc_33FCC
loc_340B6:
    LDR R2, [SP,#0x38+var_30]
    ADDS R3, R4, #4
    MOV R10, R7
    STR R3, [SP,#0x38+var_34]
    MOV R6, R7
    MOV R3, R4
    MOV LR, R2
    MOV R4, R7
    MOV R5, R7
    B loc_33F3E
```
Output:, [R4,#0x18]
    STR R8, [R4,#0x1C]
    MOV R7, R3
    STR.W R9, [R4,#0x28]
    STR WZR, [R4,#0x2C]
    LDR.W R11, [R4,#0x24]
    LDR.W R9, [R4,#4]
    LDR.W R6, [R4,#0x14]
    LDR.W R7, [R4,#0x18]
    LDR.W R8, [R4,#0x1C]
    LDR.W R3, [R4,#0x20]
    STR R3, [R0,#0x20]
    LDR R3, [R4,#0x24]
    STR R3, [R0,#0x24]
    LDR R3, [R4,#0x28]
    STR R3, [R0,#0x28]
    LDR R3, [R4,#0x2C]
    STR R3, [R0,#0x2C]
    LDR R3, [R4,#0x30]
    STR R3, [R0,#0x30]
    LDR R3, [R4,#0x34]
    STR R3, [R0,#0x34]
    LDR R3, [R4,#0x38]
    STR R3, [R0,#0x38]
    LDR R3, [R4,#0x3C]
    STR R3, [R0,#0x3C]
    LDR R3, [R4,#0x40]
    STR R3, [R0,#0x40]
    LDR R3, [R4,#0x44]
    STR R3, [R0,#0x44]
    LDR R3, [R4,#0x48]
    STR R3, [R0,#0x48]
    LDR R3, [R4,#0x4C]
    STR R3, [R0,#0x4C]
    LDR R3, [R4,#0x50]
    STR R3, [R0,#0x50]
    LDR R3, [R4,#0x54]
    STR R3, [R0,#0x54]
    LDR R3, [R4,#0x58]
    STR R3, [R0,#0x58]
    LDR R3, [R4,#0x5C]
    STR R3, [R0,#0x5C]
    LDR R3, [R4,#0x60]
    STR R3, [R0,#0x60]
    LDR R3, [R4,#0x64]
    STR R3, [R0,#0x64]
    LDR R3, [R4,#0x68]
    STR R3, [R0,#0x68]
    LDR R3, [R4,#0x6C]
    STR R3, [R0,#0x6C]
    LDR R3, [R4,#0x70]
    STR R3, [R0,#0x70]
    LDR R3, [R4,#0x74]
    STR R3, [R0,#0x74]
    LDR R3, [R4,#0x78]
    STR R3, [R0,#0x78]
    LDR R3, [R4,#0x7C]
    STR R3, [R0,#0x7C]
    LDR R3, [R4,#0x80]
    STR R3, [R0,#0x80]
    LDR R3, [R4,#0x84]
    STR R3, [R0,#0x84]
    LDR R3, [R4,#0x88]
    STR R3, [R0,#0x88]
    LDR R3, [R4,#0x8C]
    STR R3, [R0,#0x8C]
    LDR R3, [R4,#0x90]
    STR R3, [R0,#0x90]
    LDR R3, [R4,#0x94]
    STR R3, [R0,#0x94]
    LDR R3, [R4,#0x98
############
```assembly
loc_116D4:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB SP, SP, #0x114
    MOVT.W R3, #5
    MOVS R4, #0
    MOV R6, R0
    STR R3, [SP,#0x138+var_FC]
    MOV R7, R1
    LDR R3, [R3]
    STR R4, [SP,#0x138+var_BC]
    STR R4, [SP,#0x138+var_B8]
    STR R3, [SP,#0x138+var_2C]
    BL sub_364F8
    MOVW R3, #0x2CE9
    MOVW R2, #0x2DF1
    MOVT.W R3, #1
    MOVT.W R2, #1
    CMP R0, R4
    IT 
    MOVEQ R2, R3
    CMP R6, #1
    STR R2, [SP,#0x138+var_108]
    BLE.W loc_12006
loc_11714:
    MOV R9, #0x56198
    MOV R11, R4
    MOV R10, R4
    STR R3, [SP,#0x138+var_F8]
    MOV.W R2, #0xFFFFFFFF
    MOVW R3, #0x9214
    STR R4, [SP,#0x138+var_F4]
    MOVT.W R3, #3
    STR R4, [SP,#0x138+s]
    STR R3, [SP,#0x138+ptr]
    MOVW R3, #0x91F4
    STR R4, [SP,#0x138+size]
    MOVT.W R3, #3
    STR R4, [SP,#0x138+var_118]
    STR R4, [SP,#0x138+var_104]
    STR R4, [SP,#0x138+var_10C]
    STR R4, [SP,#0x138+var_120]
    STR R4, [SP,#0x138+var_114]
    STR R4, [SP,#0x138+var_11C]
    STR R4, [SP,#0x138+var_130]
    STR R2, [SP,#0x138+var_128]
    STR R3, [SP,#0x138+var_12C]
loc_11750:
    SUBS R6, #1
    BEQ loc_1177E
loc_11754:
    LDR R3, [R7,#4]
    ADDS R5, R7, #4
    LDRB R2, [R3]
    CMP R2, #0x2D
    BEQ loc_1180A
loc_1175E:
    LDR R2, [SP,#0x138+var_130]
    CMP R2, #0
    BEQ.W loc_11BC6
loc_11766:
    LDR.W R3, [R9]
    MOVS R2, #0x31
    MOVS R1, #1
    LDR R0, [SP,#0x138+ptr]
    BLX fwrite
    SUBS R6, #1
    MOV R7, R5
    MOV.W R10, #1
    BNE loc_11754
loc_1177E:
    LDR R3, [SP,#0x138+var_128]
    ADDS R3, #1
    LDR R3, [SP,#0x138+var_11C]
    BEQ.W loc_11E60
loc_11788:
    CMP R3, #4
    BEQ.W loc_11F74
loc_1178E:
    LDR R3, [SP,#0x138+var_11C]
    SUB.W R6, R3, #5
    LDR R3, [SP,#0x138+var_128]
    CLZ.W R6, R6
    LSRS R6, R6, #5
    CMP.W R3, #0x100
    ITE 
    MOVEQ R3, #0
    ANDNE.W R3, R6, #1
    CMP R3, #0
    BNE.W loc_11FAE
loc_117AE:
    LDR R4, [SP,#0x138+var_11C]
    SUBS R3, R4, #1
    CMP R3, #2
    BLS.W loc_11C70
loc_117B8:
    CMP.W R10, #0
    BNE.W loc_11CA6
loc_117C0:
    LDR R3, [SP,#0x138+var_118]
    CMP R3, #0
    BNE.W loc_11DBC
loc_117C8:
    LDR R3, [SP,#0x138+var_130]
    CBNZ R3, loc_117D4
loc_117CC:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #0
    BEQ.W loc_11EFA
loc_117D4:
    LDR R3, [SP,#0x138+var_11C]
    LDR R2, [SP,#0x138+var_130]
    ADDS R3, #0
    IT 
    MOVNE R3, #1
    STR R3, [SP,#0x138+ptr]
    CMP R2, #0
    BEQ.W loc_11DC0
loc_117E6:
    CMP R3, #0
    BEQ.W loc_11DC0
loc_117EC:
    MOV R3, #0x56198
    MOVW R0, #0x930C
    MOVS R2, #0x2E
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_1180A:
    LDRB.W R8, [R3,#1]
    ADDS R4, R3, #1
    MOV R7, R5
    CMP.W R8, #0
    BEQ def_11932
loc_11818:
    MOV R2, R8
loc_1181A:
    SUB.W R1, R2, #0x2D
    CMP R1, #0x47
    BHI.W def_11824
loc_11824:
    TBH.W [PC,R1,LSL#1]
loc_118B8:
    SUBS R2, #0x4C
    CMP R2, #0x25
    BHI.W def_118C0
loc_118C0:
    TBH.W [PC,R2,LSL#1]
loc_11910:
    MOV R8, R2
    LDRB R2, [R3,#2]
    ADDS R4, R3, #2
    CBNZ R2, loc_11924
loc_11918:
    CMP R6, #1
    BEQ.W loc_11C06
loc_1191E:
    LDR R4, [R5,#4]
    SUBS R6, #1
    ADDS R7, R5, #4
loc_11924:
    SUB.W R8, R8, #0x43
    CMP.W R8, #0x31
    BHI.W def_11932
loc_11930:
    ADR R3, jpt_11932
    LDR.W PC, [R3,R8,LSL#2]
loc_11A00:
    LDRB R2, [R3,#2]
    ADDS R3, #2
    CMP R2, #0x3D
    IT 
    CMPNE R2, #0
    BEQ loc_11A18
loc_11A0C:
    LDRB.W R2, [R3,#1]!
    CMP R2, #0
    IT 
    CMPNE R2, #0x3D
    BNE loc_11A0C
loc_11A18:
    CMP R2, #0x3D
    BEQ.W loc_11BCC
loc_11A1E:
    MOVW R1, #0x9044
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11C24
loc_11A32:
    MOVW R1, #0x9078
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11E56
loc_11A46:
    MOVW R1, #0x9084
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11FFA
loc_11A5A:
    MOV.W R8, #0
loc_11A5E:
    MOVW R1, #0x908C
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11C2E
loc_11A72:
    CMP.W R8, #0
    BNE loc_11A86
loc_11A78:
    CMP R6, #1
    ITTT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    ADDGT R7, R5, #4
    LDRGT.W R8, [R5,#4]
loc_11A86:
    CMP.W R8, #0
    BEQ.W loc_11F5A
loc_11A8E:
    MOV R0, R8
    BL sub_12CEC
    STR R0, [SP,#0x138+s]
    CMP R0, #0
    IT 
    MOVEQ.W R10, #1
    B def_11932
loc_11AA0:
    MOV R3, R2
    MOVS R1, #1
    LDR R2, [SP,#0x138+var_12C]
    MOV.W R10, #1
    LDR.W R0, [R9]
    BLX __fprintf_chk
    MOV R3, R4
loc_11AB4:
    CMP R4, #0
    BEQ.W def_11932
loc_11ABA:
    LDRB R2, [R3,#1]
    ADDS R4, #1
    CMP R2, #0
    BNE.W loc_1181A
loc_11AC4:
    B def_11932
loc_11AC6:
    STR R4, [SP,#0x138+var_10C]
    B def_11932
loc_11ACA:
    MOVW R1, #0x9170
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11C1E
loc_11ADE:
    MOVW R1, #0x9178
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11CBA
loc_11AF2:
    MOVS R3, #2
    STR R3, [SP,#0x138+var_120]
    B def_11932
loc_11AF8:
    STR R4, [SP,#0x138+var_114]
    B def_11932
loc_11AFC:
    MOV R0, R4
    MOVS R2, #0xA
    MOVS R1, #0
    BLX strtol
    STR R0, [SP,#0x138+var_128]
    B def_11932
loc_11B0A:
    LDRB R5, [R4]
    CMP R5, #0x72
    BNE loc_11B68
loc_11B10:
    LDRB R3, [R4,#1]
    CMP R3, #0x73
    BNE loc_11B68
loc_11B16:
    LDRB R3, [R4,#2]
    CMP R3, #0x61
    BNE loc_11B68
loc_11B1C:
    LDRB R3, [R4,#3]
    CBNZ R3, loc_11B68
loc_11B20:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    STR R3, [SP,#0x138+var_11C]
    B def_11932
loc_11B28:
    MOVS R2, #1
    MOV R3, R4
    STR R2, [SP,#0x138+var_104]
    B loc_11AB4
loc_11B30:
    LDR R2, [SP,#0x138+var_F8]
    MOV R3, R4
    STR R2, [SP,#0x138+var_108]
    B loc_11AB4
loc_11B38:
    MOVS R2, #1
    MOV R3, R4
    STR R2, [SP,#0x138+var_120]
    B loc_11AB4
loc_11B40:
    MOVS R2, #3
    MOV R3, R4
    STR R2, [SP,#0x138+var_120]
    B loc_11AB4
loc_11B48:
    BL sub_12FD4
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    MOV R3, R4
    B loc_11AB4
loc_11B54:
    MOVS R2, #2
    MOV R3, R4
    STR R2, [SP,#0x138+var_120]
    B loc_11AB4
loc_11B5C:
    BL sub_12F50
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
loc_11B64:
    MOV R3, R4
    B loc_11AB4
loc_11B68:
    MOVW R1, #0x9134
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ loc_11B20
loc_11B7A:
    MOVW R1, #0x913C
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11EE6
loc_11B8E:
    CMP R5, #0x64
    BEQ.W loc_121B4
loc_11B94:
    MOVW R1, #0x9144
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_12212
loc_11BA8:
    MOVW R1, #0xFE54
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_12518
loc_11BBC:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #5
    STR R3, [SP,#0x138+var_11C]
    B def_11932
loc_11BC6:
    STR R3, [SP,#0x138+var_130]
    MOV R7, R5
    B def_11932
loc_11BCC:
    MOVS R2, #0
    MOVW R1, #0x9044
    STRB R2, [R3]
    MOVT.W R1, #3
    MOV R0, R4
    ADD.W R8, R3, #1
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11FCA
loc_11BE8:
    CMP.W R8, #0
    BEQ loc_11C24
loc_11BEE:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x904C
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B def_11932
loc_11C06:
    MOVW R2, #0x9108
    MOV R3, R8
    MOVT.W R2, #3
    MOV R1, R6
    LDR.W R0, [R9]
    MOV R10, R6
    BLX __fprintf_chk
    B loc_11924
loc_11C1E:
    MOVS R3, #1
    STR R3, [SP,#0x138+var_120]
    B def_11932
loc_11C24:
    BL sub_12FD4
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    B def_11932
loc_11C2E:
    MOVW R1, #0x90C8
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11EB6
loc_11C42:
    CMP.W R8, #0
    BNE loc_11C56
loc_11C48:
    CMP R6, #1
    ITTT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    ADDGT R7, R5, #4
    LDRGT.W R8, [R5,#4]
loc_11C56:
    CMP.W R8, #0
    BEQ.W loc_11F5A
loc_11C5E:
    MOV R0, R8
    BL sub_12CEC
    STR R0, [SP,#0x138+var_F4]
    CMP R0, #0
    IT 
    MOVEQ.W R10, #1
    B def_11932
loc_11C70:
    LDR R3, [SP,#0x138+var_128]
    CMP R3, #0xFF
    BGT.W loc_11E74
loc_11C78:
    MOV R1, #0x56198
    MOVW R2, #0x903C
    MOVW R3, #0x9040
    MOVT.W R2, #3
    MOVT.W R3, #3
    LDR R0, [R1]
    CMP R4, #3
    IT 
    MOVEQ R3, R2
    MOVS R1, #1
    MOV R2, #0x39284
    BLX __fprintf_chk
loc_11CA6:
    MOVS R0, #1
loc_11CA8:
    LDR R3, [SP,#0x138+var_FC]
    LDR R2, [SP,#0x138+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_1280A
loc_11CB4:
    ADD SP, SP, #0x114
    POP.W {R4-R11,PC}
loc_11CBA:
    MOVW R1, #0x9188
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11EEE
loc_11CCE:
    MOVW R1, #0x9190
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_12038
loc_11CE2:
    MOVW R1, #0x919C
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_121DC
loc_11CF6:
    MOVW R1, #0x91AC
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_12482
loc_11D0A:
    MOVW R1, #0x91C0
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_1253C
loc_11D1E:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #6
    STR R3, [SP,#0x138+var_120]
    B def_11932
loc_11D28:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_127F2
loc_11D30:
    CMP R4, #0
    BEQ.W loc_12A94
loc_11D36:
    LDM.W R4, {R0,R1}
    BL sub_2CB2C
loc_11D3E:
    MOV R6, R0
loc_11D40:
    LDR R3, [SP,#0x138+var_114]
    CMP R3, #0
    BEQ.W loc_12A76
loc_11D48:
    MOV R0, R8
    MOVS R2, #0
    MOV R1, #0x39760
    BL sub_3694C
    MOV R3, R6
    MOVW R2, #0x93A8
    MOVS R1, #1
    MOVT.W R2, #3
    MOV R8, R0
    BLX __fprintf_chk
    MOV R0, R8
    BLX fclose
loc_11D70:
    MOV R0, R6
    BL sub_19494
loc_11D76:
    LDR R6, [SP,#0x138+s]
    CBZ R6, loc_11D8E
loc_11D7A:
    MOV R0, R6
    BLX strlen
    MOV R1, R0
    MOV R0, R6
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
loc_11D8E:
    CBZ R7, loc_11DA4
loc_11D90:
    MOV R0, R7
    BLX strlen
    MOV R1, R0
    MOV R0, R7
    BL sub_194E4
    MOV R0, R7
    BL sub_19494
loc_11DA4:
    CBZ R5, loc_11DAC
loc_11DA6:
    MOV R0, R5
    BL sub_2ED10
loc_11DAC:
    CBZ R4, loc_11DBC
loc_11DAE:
    LDR R3, [R4]
    LDR R0, [R4,#4]
    LDR R3, [R3,#4]
    BLX R3
    MOV R0, R4
    BL sub_19494
loc_11DBC:
    MOVS R0, #0
    B loc_11CA8
loc_11DC0:
    LDR R3, [SP,#0x138+var_11C]
    CBZ R3, loc_11DEC
loc_11DC4:
    LDR R2, [SP,#0x138+var_120]
    SUBS R3, R2, #4
    CMP R3, #2
    BLS loc_11DEC
loc_11DCC:
    CBZ R2, loc_11DEC
loc_11DCE:
    MOV R3, #0x56198
    MOVW R0, #0x933C
    MOVS R2, #0x45
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_11DEC:
    LDR R3, [SP,#0x138+var_130]
    CMP R3, #0
    BEQ.W loc_11F1C
loc_11DF4:
    MOV R0, R3
    MOV R8, R3
    BL sub_36650
    MOV R7, R0
    BL sub_2CB68
    CMP R0, #0xA
    MOV R5, R0
    STR R0, [SP,#0x138+var_12C]
    BHI.W loc_128C2
loc_11E0C:
    MOVS R4, #1
    LSL.W R3, R4, R0
    TST.W R3, #0x6E8
    BNE.W loc_12040
loc_11E1A:
    TST.W R3, #0x104
    BNE.W loc_121E8
loc_11E22:
    LSLS R5, R3, #0x1E
    BEQ.W loc_128C2
loc_11E28:
    MOV R3, #0x56198
    LDR R5, [R3]
    BL sub_2CB90
    MOV R3, R8
    MOVW R2, #0x9384
    MOV R1, R4
    MOVT.W R2, #3
    STR R0, [SP,#0x138+var_138]
    MOV R0, R5
    BLX __fprintf_chk
    MOV R0, R4
    B loc_11CA8
loc_11E4E:
    CMP.W R8, #0
    BNE.W loc_11BEE
loc_11E56:
    BL sub_12F50
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    B def_11932
loc_11E60:
    CMP R3, #4
    BEQ loc_11EF2
loc_11E64:
    CMP R3, #5
    BNE.W loc_12028
loc_11E6A:
    MOV.W R3, #0x100
    MOVS R6, #1
    STR R3, [SP,#0x138+var_128]
    B loc_117AE
loc_11E74:
    LDR R3, [SP,#0x138+var_128]
    CMP.W R3, #0x800
    BGE.W loc_117B8
loc_11E7E:
    LDR R4, [SP,#0x138+var_11C]
    MOV R1, #0x56198
    MOVW R2, #0x9040
    MOVW R3, #0x903C
    MOVT.W R2, #3
    MOVT.W R3, #3
    LDR R0, [R1]
    CMP R4, #3
    IT 
    MOVNE R3, R2
    MOV.W R1, #0x800
    MOVW R2, #0x92C0
    STR R1, [SP,#0x138+var_138]
    MOVT.W R2, #3
    MOVS R1, #1
    BLX __fprintf_chk
    B loc_117B8
loc_11EB6:
    MOVW R1, #0x90D8
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE loc_11F40
loc_11EC8:
    CMP.W R8, #0
    BNE loc_11EDC
loc_11ECE:
    CMP R6, #1
    ITTT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    ADDGT R7, R5, #4
    LDRGT.W R8, [R5,#4]
loc_11EDC:
    CMP.W R8, #0
    BEQ loc_11F5A
loc_11EE2:
    MOV R11, R8
    B def_11932
loc_11EE6:
    MOVS R3, #1
    STR R3, [SP,#0x138+size]
    STR R3, [SP,#0x138+var_11C]
    B def_11932
loc_11EEE:
    STR R0, [SP,#0x138+var_120]
    B def_11932
loc_11EF2:
    MOV.W R3, #0x180
    STR R3, [SP,#0x138+var_128]
    B loc_1178E
loc_11EFA:
    MOV R3, #0x56198
    MOVS R2, #0xA0
    MOVS R1, #1
    LDR R3, [R3]
    MOV R0, #aUsagePuttygenK
    BLX fwrite
    BL sub_12E5C
    MOVS R0, #1
    B loc_11CA8
loc_11F1C:
    LDR R2, [SP,#0x138+var_120]
    CLZ.W R4, R2
    SUBS R2, #4
    NEGS R3, R2
    ADCS R3, R2
    LDR R2, [SP,#0x138+var_130]
    LSRS R4, R4, #5
    MOV R5, R2
    MOV R7, R2
    STR R2, [SP,#0x138+var_12C]
loc_11F32:
    LDR R2, [SP,#0x138+var_114]
    CMP R2, #0
    BEQ.W loc_1280E
loc_11F3A:
    MOV.W R9, #0
    B loc_12080
loc_11F40:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x90E8
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_11F5A:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x909C
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_11F74:
    LDR R3, [SP,#0x138+var_128]
    BIC.W R3, R3, #0x80
    CMP.W R3, #0x100
    BEQ.W loc_117AE
loc_11F82:
    LDR R2, [SP,#0x138+var_128]
    MOVW R3, #0x209
    CMP R2, R3
    BEQ.W loc_1178E
loc_11F8E:
    MOV R3, #0x56198
    MOVS R1, #1
    MOVW R0, #0x9248
    MOVS R2, #0x39
    LDR R3, [R3]
    MOVT.W R0, #3
    MOV R10, R1
    BLX fwrite
    B.W loc_1178E
loc_11FAE:
    MOV R3, #0x56198
    MOVW R0, #0x97C0
    MOVS R2, #0x2F
    LDR R3, [R3]
    MOVS R1, #1
    MOVT.W R0, #3
    BLX fwrite
    B loc_11CA6
loc_11FCA:
    MOVW R1, #0x9078
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11E4E
loc_11FDE:
    MOVW R1, #0x9084
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11A5E
loc_11FF2:
    CMP.W R8, #0
    BNE.W loc_11BEE
loc_11FFA:
    BL sub_36758
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    B.W def_11932
loc_12006:
    MOV R3, #0x56198
    MOVS R2, #0xA0
    MOVS R1, #1
    LDR R3, [R3]
    MOV R0, #aUsagePuttygenK
    BLX fwrite
    BL sub_12E5C
    MOV R0, R4
    B loc_11CA8
loc_12028:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #4
    MOV.W R3, #0x800
    STR R3, [SP,#0x138+var_128]
    BNE.W loc_1178E
loc_12036:
    B loc_11F8E
loc_12038:
    MOVS R3, #3
    STR R3, [SP,#0x138+var_120]
    B.W def_11932
loc_12040:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_125A4
loc_12048:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
loc_1204C:
    LDR R3, [SP,#0x138+var_120]
    CLZ.W R4, R3
    SUBS R3, R5, #2
    LSRS R4, R4, #5
    CMP R3, #1
    ITE 
    MOVHI R3, #0
    ANDLS.W R3, R4, #1
    CMP R3, #0
    BEQ.W loc_124C0
loc_12066:
    MOV R4, R3
loc_12068:
    LDR R3, [SP,#0x138+var_114]
    MOV.W R9, #0
    CMP R3, #0
    BEQ.W loc_12560
loc_12074:
    LDR R3, [SP,#0x138+var_104]
    CBNZ R3, loc_12080
loc_12078:
    LDR R3, [SP,#0x138+var_10C]
    CMP R3, #0
    BEQ.W loc_1241C
loc_12080:
    LDR R3, [SP,#0x138+var_120]
    CMP R3, #4
    BEQ loc_120A2
loc_12086:
    CBNZ R4, loc_120A2
loc_12088:
    SUBS R3, #5
    CMP R3, #1
    BLS loc_120A2
loc_1208E:
    LDR R3, [SP,#0x138+var_12C]
    SUBS R3, #5
    CMP R3, #1
    BLS loc_120A2
loc_12096:
    SUBS R1, R5, #7
    NEGS R4, R1
    ADCS R4, R1
    CBNZ R4, loc_120A2
loc_1209E:
    MOV R10, R4
    B loc_120B0
loc_120A2:
    LDR R3, [SP,#0x138+var_12C]
    SUBS R3, #8
    CMP R3, #2
    BLS.W loc_124EE
loc_120AC:
    MOV.W R10, #1
loc_120B0:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #0
    BNE.W loc_12348
loc_120B8:
    LDR R3, [SP,#0x138+var_11C]
    STR R3, [SP,#0x138+var_B4]
    LDR R3, [SP,#0x138+var_130]
    CMP R3, #0
    BEQ.W loc_1293A
loc_120C4:
    CMP R5, #2
    ADD.W R8, SP, #0x138+var_BC
    BEQ.W loc_12532
loc_120CE:
    CMP R5, #3
    BEQ.W loc_1250E
loc_120D4:
    MOV R1, R5
    MOV R0, R7
    MOV R2, R8
    BL sub_17190
loc_120DE:
    CMP R0, #0
    BEQ.W loc_1221E
loc_120E4:
    CMP.W R10, #0
    BEQ.W loc_1221E
loc_120EC:
    LDR R3, [SP,#0x138+s]
    CMP R3, #0
    BEQ.W loc_129A6
loc_120F4:
    LDR R3, [SP,#0x138+var_12C]
    MOVS R0, #1
    LSL.W R3, R0, R3
    TST.W R3, #0x608
    BNE.W loc_12308
loc_12104:
    ANDS.W R6, R3, #0x104
    BNE.W loc_126CE
loc_1210C:
    TST.W R3, #0xE0
    BEQ.W loc_12A4A
loc_12114:
    MOV R1, R5
    MOV R0, R7
    ADD R3, SP, #0x138+var_B4
    LDR R2, [SP,#0x138+s]
    BL sub_17B24
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_1257C
loc_12128:
    MOV R3, #0x562C0
    CMP R0, R3
    BEQ.W loc_12756
loc_12136:
    MOV R5, R6
loc_12138:
    LDR R3, [SP,#0x138+var_10C]
    CBZ R3, loc_12158
loc_1213C:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_124D8
loc_12144:
    CMP R4, #0
    BEQ.W loc_12AA4
loc_1214A:
    LDR R0, [R4,#8]
    BL sub_19494
    LDR R0, [SP,#0x138+var_10C]
    BL sub_18A88
    STR R0, [R4,#8]
loc_12158:
    LDR R3, [SP,#0x138+var_104]
    CMP R3, #0
    BNE.W loc_12442
loc_12160:
    LDR R3, [SP,#0x138+s]
    CMP R3, #0
    BEQ.W loc_12442
loc_12168:
    LDR R3, [SP,#0x138+var_F4]
    CMP R3, #0
    BEQ.W loc_1243A
loc_12170:
    LDR R7, [SP,#0x138+var_F4]
loc_12172:
    LDRB R3, [R7]
    CMP R3, #0
    BEQ loc_12224
loc_12178:
    CMP.W R9, #0
    BEQ.W loc_124A8
loc_12180:
    MOV R0, R9
    BL sub_36650
    MOV R8, R0
loc_12188:
    LDR R3, [SP,#0x138+var_120]
    CMP R3, #6
    BHI.W def_12192
loc_12190:
    ADR R2, jpt_12192
    LDR.W PC, [R2,R3,LSL#2]
loc_121B4:
    LDRB R3, [R4,#1]
    CMP R3, #0x73
    BNE.W loc_11B94
loc_121BC:
    LDRB R3, [R4,#2]
    CMP R3, #0x61
    BEQ loc_121C8
loc_121C2:
    CMP R3, #0x73
    BNE.W loc_11B94
loc_121C8:
    LDRB R3, [R4,#3]
    CMP R3, #0
    BNE.W loc_11B94
loc_121D0:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #3
    STR R3, [SP,#0x138+var_11C]
    B.W def_11932
loc_121DC:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #4
    STR R3, [SP,#0x138+var_120]
    B.W def_11932
loc_121E8:
    LDR R3, [SP,#0x138+size]
    CMP R3, #2
    IT 
    STRNE R4, [SP,#0x138+size]
    BNE.W loc_1204C
loc_121F4:
    MOV R3, #0x56198
    MOVW R0, #0x93AC
    MOVS R2, #0x3C
    LDR R3, [R3]
    MOVT.W R0, #3
    MOV R1, R4
    BLX fwrite
    MOV R0, R4
    B loc_11CA8
loc_12212:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #4
    STR R3, [SP,#0x138+var_11C]
    B.W def_11932
loc_1221E:
    MOVS R3, #0
    STR R3, [SP,#0x138+s]
    B loc_120F4
loc_12224:
    MOV R0, R7
    MOV R7, R3
    BL sub_19494
    B loc_12178
loc_1222E:
    LDR R3, [SP,#0x138+size]
    CMP R3, #2
    BNE.W loc_128A2
loc_12236:
    CMP R4, #0
    BEQ.W loc_12882
loc_1223C:
    BL sub_2D134
    LDR R3, [SP,#0x138+var_120]
    CMP R3, #5
    BEQ.W loc_1287E
loc_12248:
    CMP R3, #6
    ITE 
    MOVEQ R1, #7
    MOVNE R1, #4
loc_12250:
    MOV R0, R8
    MOV R3, R7
    MOV R2, R4
    BL sub_18338
    CMP R0, #0
    BEQ.W loc_12860
loc_12260:
    CMP.W R9, #0
    BEQ.W def_12192
loc_12268:
    LDR R1, [SP,#0x138+var_114]
    MOV R0, R9
    BL sub_12DBC
    CMP R0, #0
    BNE.W def_12192
loc_12276:
    B loc_11CA6
loc_12278:
    LDR R3, [SP,#0x138+var_114]
    CMP R3, #0
    BEQ.W loc_12978
loc_12280:
    MOV R0, R8
    MOVW R1, #0x9760
    MOVS R2, #0
    MOVT.W R1, #3
    BL sub_3694C
    MOV R8, R0
loc_12292:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_1296E
loc_1229A:
    CMP R6, #0
    BEQ.W loc_1295E
loc_122A0:
    CMP R4, #0
    BEQ.W loc_1295A
loc_122A6:
    LDR R1, [R4,#8]
loc_122A8:
    LDR R2, [SP,#0x138+var_120]
    LDR R3, [SP,#0x138+tp]
    CMP R2, #1
    MOV R2, R6
    ITE 
    MOVNE R0, #0xA
    MOVEQ R0, #9
    STR R0, [SP,#0x138+var_138]
    MOV R0, R8
    BL sub_2C82C
loc_122BE:
    LDR R3, [SP,#0x138+var_114]
    CMP R3, #0
    BEQ.W def_12192
loc_122C6:
    MOV R0, R8
    BLX fclose
    B def_12192
loc_122CE:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_12902
loc_122D6:
    CMP R4, #0
    BEQ.W loc_128E2
loc_122DC:
    MOV R0, R8
    MOV R2, R7
    MOV R1, R4
    BL sub_2C210
loc_122E6:
    CMP R0, #0
    BNE loc_12260
loc_122EA:
    MOV R3, #0x56198
    MOVW R0, #0x9734
    MOVS R2, #0x2B
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_12308:
    CMP.W R10, #0
    BNE.W loc_1245E
loc_12310:
    ADD R1, SP, #0x138+var_B4
    MOV R3, R8
    STR R1, [SP,#0x138+var_138]
    MOV R0, R7
    ADD R2, SP, #0x138+tp
    ADD R1, SP, #0x138+var_B8
    BL sub_2BA8C
    MOV R6, R0
    LDR R0, [SP,#0x138+var_B8]
    CMP R6, #0
    BEQ.W loc_129FC
loc_1232A:
    BL sub_2AD9C
    CMP R0, #0
    BEQ.W loc_12556
loc_12334:
    LDR R3, [R0,#0x24]
    MOV R1, R6
    LDR R2, [SP,#0x138+tp]
    MOV R4, R10
    BLX R3
    LDR R0, [SP,#0x138+var_B8]
    BL sub_19494
loc_12344:
    MOVS R5, #0
    B loc_12138
loc_12348:
    ADD R4, SP, #0x138+var_F0
    ADD R0, SP, #0x138+var_F0
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x138+var_B0]
    STR R3, [SP,#0x138+var_AC]
    BL sub_33BBC
    LDM R4!, {R0-R3}
    ADD R5, SP, #0x138+tp
    STM R5!, {R0-R3}
    LDM R4!, {R0-R3}
    STM R5!, {R0-R3}
    LDM.W R4, {R0-R2}
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #3
    STM.W R5, {R0-R2}
    BEQ.W loc_1265A
loc_12372:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #4
    BEQ.W loc_12762
loc_1237A:
    CMP R6, #0
    BNE.W loc_125E6
loc_12380:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x959C
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_125C6
loc_123B4:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x24
    MOVS R0, #1
    MOVS R4, #0
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_2F078
loc_123E0:
    LDR R3, [SP,#0x138+var_11C]
    STR R4, [R5,#0x20]
    CMP R3, #1
    BEQ loc_1248E
loc_123E8:
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    MOV R3, #0x43AC8
    MOV R4, R0
    STR R5, [R0,#4]
    STR R3, [R0]
loc_123FE:
    MOV R0, R7
    MOV.W R3, #0xFFFFFFFF
    MOV R2, #0x7FFFFFFF
    MOVS R1, #6
    LDR R5, [SP,#0x138+var_108]
    BLX R5
    MOV R0, R6
    BL sub_18A88
    MOVS R5, #0
    STR R0, [R4,#8]
loc_12418:
    MOVS R6, #0
    B loc_12138
loc_1241C:
    MOV R3, #0x56198
    MOVW R0, #0x9478
    MOVS R2, #0x36
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_1243A:
    LDR R0, [SP,#0x138+s]
    BL sub_18A88
    STR R0, [SP,#0x138+var_F4]
loc_12442:
    LDR R3, [SP,#0x138+var_F4]
    CMP R3, #0
    BNE.W loc_12170
loc_1244A:
    LDR R3, [SP,#0x138+var_104]
    CMP R3, #0
    BNE.W loc_12B06
loc_12452:
    LDR R3, [SP,#0x138+ptr]
    CMP R3, #0
    BNE.W loc_12B06
loc_1245A:
    MOVS R7, #0
    B loc_12178
loc_1245E:
    ADD R2, SP, #0x138+var_B4
    MOV R0, R7
    LDR R1, [SP,#0x138+s]
    BL sub_2AE54
    MOV R2, #0x562C0
    CMP R0, R2
    MOV R4, R0
    BEQ.W loc_12748
loc_12478:
    CMP R0, #0
    BEQ.W loc_12748
loc_1247E:
    MOVS R6, #0
    B loc_12344
loc_12482:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #5
    STR R3, [SP,#0x138+var_120]
    B.W def_11932
loc_1248E:
    MOV R0, R7
    MOV.W R3, #0xFFFFFFFF
    MOV R2, #0x7FFFFFFF
    MOVS R1, #6
    LDR R7, [SP,#0x138+var_108]
    BLX R7
    MOV R0, R6
    BL sub_18A88
    STR R0, [R5,#0x20]
    B loc_12418
loc_124A8:
    LDR R3, [SP,#0x138+var_114]
    MOV R0, #0x4555C
    CMP R3, #0
    IT 
    MOVNE R0, R3
    BL sub_36650
    MOV R8, R0
    B loc_12188
loc_124C0:
    LDR R3, [SP,#0x138+var_120]
    SUBS R0, R3, #4
    NEGS R3, R0
    ADCS R3, R0
    CMP R5, #5
    BNE.W loc_12AC4
loc_124CE:
    CMP R3, #0
    BEQ.W loc_12AC4
loc_124D4:
    MOVS R5, #5
    B loc_12068
loc_124D8:
    CMP R5, #0
    BEQ.W loc_127D2
loc_124DE:
    LDR R0, [R5,#0x20]
    BL sub_19494
    LDR R0, [SP,#0x138+var_10C]
    BL sub_18A88
    STR R0, [R5,#0x20]
    B loc_12158
loc_124EE:
    MOV R3, #0x56198
    MOVW R0, #0x94DC
    MOVS R2, #0x45
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_1250E:
    MOV R0, R7
    MOV R1, R8
    BL sub_2BE7C
    B loc_120DE
loc_12518:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x914C
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_12532:
    MOV R0, R7
    MOV R1, R8
    BL sub_2A674
    B loc_120DE
loc_1253C:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x91D0
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_12556:
    LDR R0, [SP,#0x138+var_B8]
    MOV R4, R10
    BL sub_19494
    B loc_12344
loc_12560:
    LDR.W R8, [SP,#0x138+var_130]
    MOV R2, R3
    MOV R1, #0x39470
    MOV R0, R8
    BL sub_18AFC
    STR.W R8, [SP,#0x138+var_114]
    MOV R9, R0
    B loc_12074
loc_1257C:
    LDR R3, [SP,#0x138+var_B4]
    CMP R3, #0
    BEQ.W loc_12A08
loc_12584:
    MOV R2, #0x56198
    STR R3, [SP,#0x138+var_138]
    MOVS R1, #1
    LDR R3, [SP,#0x138+var_130]
    LDR R0, [R2]
    MOV R2, #0x3979C
    BLX __fprintf_chk
    B.W loc_11CA6
loc_125A4:
    LDR R4, [SP,#0x138+size]
    MOV R3, #0x56198
    MOVW R0, #0x93EC
    MOVS R2, #0x3C
    MOVT.W R0, #3
    LDR R3, [R3]
    MOV R1, R4
    BLX fwrite
    MOV R0, R4
    B.W loc_11CA8
loc_125C6:
    MOV R3, #0x56198
    MOVW R0, #0x9534
    MOVS R2, #0x3C
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_125E6:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x9588
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ loc_125C6
loc_12618:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_2870C
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    MOV R3, #0x3FBE8
    MOV R4, R0
    STR R5, [R0,#4]
    STR R3, [R0]
    B loc_123FE
loc_1265A:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x9524
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ loc_125C6
loc_1268C:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_24318
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    MOV R3, #0x3F520
    MOV R4, R0
    STR R5, [R0,#4]
    STR R3, [R0]
    B loc_123FE
loc_126CE:
    MOVS R1, #0x24
    BL sub_193B8
    MOV R5, R0
    CMP.W R10, #0
    BNE loc_12738
loc_126DC:
    MOV R3, R8
    ADD R1, SP, #0x138+var_B4
    ADD R2, SP, #0x138+tp
    STR R1, [SP,#0x138+var_138]
    MOV R0, R7
    ADD R1, SP, #0x138+var_B0
    BL sub_2A6E4
    LDR R6, [SP,#0x138+var_B0]
    LDR R1, [SP,#0x138+tp]
    ADD.W R2, R5, #0xC
    SUBS R1, #4
    MOV R4, R0
    ADDS R0, R6, #4
    BL sub_1F088
    CMP R0, #0
    BLT.W loc_12A6A
loc_12704:
    LDR R3, [SP,#0x138+tp]
    ADDS R1, R0, #4
    ADDS R0, R6, R1
    ADD.W R2, R5, #8
    SUBS R1, R3, R1
    BL sub_1F088
    CMP R0, #0
    BLT.W loc_12A6A
loc_1271A:
    LDR R0, [SP,#0x138+var_BC]
    BL sub_18A88
    MOVS R3, #0
    STR R3, [R5,#0x10]
    STR R3, [R5,#0x14]
    STR R3, [R5,#0x18]
    STR R3, [R5,#0x1C]
    STR R0, [R5,#0x20]
loc_1272C:
    CMP R4, #0
    BLE.W loc_1257C
loc_12732:
    MOVS R6, #0
    MOV R4, R6
    B loc_12138
loc_12738:
    MOV R0, R7
    ADD R3, SP, #0x138+var_B4
    LDR R2, [SP,#0x138+s]
    MOV R1, R5
    BL sub_2A5C8
    MOV R4, R0
    B loc_1272C
loc_12748:
    LDR R3, [SP,#0x138+var_B4]
    CMP R3, #0
    BNE.W loc_12584
loc_12750:
    CMP R4, R2
    BNE.W loc_12A08
loc_12756:
    MOV R3, #0x39640
    STR R3, [SP,#0x138+var_B4]
    B loc_12584
loc_12762:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x9574
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_125C6
loc_12796:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_286B4
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    LDR R3, [R5]
    MOV R4, R0
    STM.W R0, {R3,R5}
    B loc_123FE
loc_127D2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9654
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x38A
    MOVT.W R0, #3
    BLX __assert_fail
loc_127F2:
    CBZ R5, loc_12820
loc_127F4:
    LDR R1, [SP,#0x138+size]
    MOVS R0, #0x80
    BL sub_193B8
    MOV R2, R5
    MOVS R1, #0x80
    MOV R6, R0
    BL sub_2EAE8
    B.W loc_11D40
loc_1280A:
    BLX __stack_chk_fail
loc_1280E:
    CBNZ R3, loc_12840
loc_12810:
    CBNZ R4, loc_12840
loc_12812:
    LDR R3, [SP,#0x138+var_120]
    SUBS R3, #5
    CMP R3, #1
    BLS loc_12840
loc_1281A:
    LDR.W R9, [SP,#0x138+var_114]
    B loc_1208E
loc_12820:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9654
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x407
    MOVT.W R0, #3
    BLX __assert_fail
loc_12840:
    MOV R3, #0x56198
    MOVW R0, #0x94B0
    MOVS R2, #0x29
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_12860:
    MOV R3, #0x56198
    MOVW R0, #0x977C
    MOVS R2, #0x1F
    LDR R3, [R3]
    MOVS R1, #1
    MOVT.W R0, #3
    BLX fwrite
    B.W loc_11CA6
loc_1287E:
    MOVS R1, #6
    B loc_12250
loc_12882:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x424
    MOVT.W R0, #3
    BLX __assert_fail
loc_128A2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9770
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x423
    MOVT.W R0, #3
    BLX __assert_fail
loc_128C2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9438
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x26B
    MOVT.W R0, #3
    BLX __assert_fail
loc_128E2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x3D5
    MOVT.W R0, #3
    BLX __assert_fail
loc_12902:
    CMP R5, #0
    BEQ.W loc_12B88
loc_12908:
    MOV R0, R8
    MOV R2, R7
    MOV R1, R5
    BL sub_2A8BC
    CMP R0, #0
    BNE.W loc_12260
loc_12918:
    LDR R4, [SP,#0x138+size]
    MOV R3, #0x56198
    MOVW R0, #0x9708
    MOVS R2, #0x2B
    MOVT.W R0, #3
    LDR R3, [R3]
    MOV R1, R4
    BLX fwrite
    MOV R0, R4
    B.W loc_11CA8
loc_1293A:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x95AC
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x2FE
    MOVT.W R0, #3
    BLX __assert_fail
loc_1295A:
    LDR R1, [SP,#0x138+var_BC]
    B loc_122A8
loc_1295E:
    CBZ R4, loc_12986
loc_12960:
    LDR R3, [R4]
    ADD R1, SP, #0x138+tp
    LDR R0, [R4,#4]
    LDR R3, [R3,#0xC]
    BLX R3
    MOV R6, R0
    B loc_122A6
loc_1296E:
    MOV R1, R5
    MOV R0, R8
    BL sub_2C770
loc_12976:
    B loc_122BE
loc_12978:
    MOV R3, #0x5619C
    LDR.W R8, [R3]
    B loc_12292
loc_12986:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOV.W R2, #0x3F0
    MOVT.W R0, #3
    BLX __assert_fail
loc_129A6:
    MOV R0, R3
    MOV R6, R3
    BL sub_18738
    MOV R4, R0
    MOVW R0, #0x9668
    STR R6, [R4]
    MOVT.W R0, #3
    BL sub_18A88
    STR R0, [R4,#4]
    MOV R0, #0x395BC
    BL sub_18A88
    MOV R2, R6
    MOV R1, R0
    MOV R0, R4
    BL sub_187A4
    MOV R2, R6
    MOV R1, R6
    MOV R0, R4
    BL sub_36254
    CMP R0, #0
    BLT loc_12A2A
loc_129E4:
    BNE loc_12A14
loc_129E6:
    MOV R0, R4
    BL sub_18A10
    MOV R0, #aPuttygenUnable
    BLX perror
    B.W loc_11CA6
loc_129FC:
    BL sub_19494
    LDR R3, [SP,#0x138+var_B4]
    CMP R3, #0
    BNE.W loc_12584
loc_12A08:
    MOV R3, #0x39630
    STR R3, [SP,#0x138+var_B4]
    B loc_12584
loc_12A14:
    LDR R3, [R4,#0x18]
    LDR R3, [R3]
    LDR R0, [R3,#8]
    BL sub_18A88
    STR R0, [SP,#0x138+s]
    MOV R0, R4
    BL sub_18A10
    B.W loc_120F4
loc_12A2A:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x95DC
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x315
    MOVT.W R0, #3
    BLX __assert_fail
loc_12A4A:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0xE83C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x37B
    MOVT.W R0, #3
    BLX __assert_fail
loc_12A6A:
    MOV R3, #0x3960C
    STR R3, [SP,#0x138+var_B4]
    B loc_1271A
loc_12A76:
    MOV R1, #0x5619C
    MOVW R2, #0x93A8
    MOV R3, R6
    LDR R0, [R1]
    MOVT.W R2, #3
    MOVS R1, #1
    BLX __fprintf_chk
    B.W loc_11D70
loc_12A94:
    CBZ R6, loc_12AE6
loc_12A96:
    MOV R0, R6
    LDR R1, [SP,#0x138+tp]
    BL sub_2C994
    MOV R6, R0
    B.W loc_11D40
loc_12AA4:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x38E
    MOVT.W R0, #3
    BLX __assert_fail
loc_12AC4:
    CMP R5, #6
    BNE loc_12AD4
loc_12AC8:
    LDR R2, [SP,#0x138+var_120]
    CMP R2, #5
    IT 
    MOVEQ R5, #6
    BEQ.W loc_12068
loc_12AD4:
    CMP R5, #7
    BNE.W loc_11F32
loc_12ADA:
    LDR R2, [SP,#0x138+var_120]
    CMP R2, #6
    BEQ.W loc_12068
loc_12AE2:
    B.W loc_11F32
loc_12AE6:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9764
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x40F
    MOVT.W R0, #3
    BLX __assert_fail
loc_12B06:
    MOVS R0, #0
    MOV R7, R0
    BL sub_18738
    MOV R8, R0
    STR R7, [R0]
    MOV R0, #0x39664
    BL sub_18A88
    STR.W R0, [R8,#4]
    MOV R0, #0x3967C
    BL sub_18A88
    MOV R2, R7
    MOV R1, R0
    MOV R0, R8
    BL sub_187A4
    MOV R0, #0x3969C
    BL sub_18A88
    MOV R2, R7
    MOV R1, R0
    MOV R0, R8
    BL sub_187A4
    MOV R2, R7
    MOV R1, R7
    MOV R0, R8
    BL sub_36254
    CMP R0, R7
    BLT loc_12BE6
loc_12B5C:
    BEQ loc_12BCE
loc_12B5E:
    LDR.W R3, [R8,#0x18]
    LDM R3, {R2,R3}
    LDR R7, [R2,#8]
    LDR R1, [R3,#8]
    MOV R0, R7
    BLX strcmp
    CBNZ R0, loc_12BA8
loc_12B70:
    MOV R0, R7
    BL sub_18A88
    MOV R7, R0
    MOV R0, R8
    BL sub_18A10
    CMP R7, #0
    BEQ.W loc_1245A
loc_12B84:
    B.W loc_12172
loc_12B88:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9654
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x3CE
    MOVT.W R0, #3
    BLX __assert_fail
loc_12BA8:
    MOV R0, R8
    BL sub_18A10
    MOV R3, #0x56198
    MOVW R0, #0x96E4
    MOVS R2, #0x23
    MOVT.W R0, #3
    LDR R3, [R3]
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_12BCE:
    MOV R0, R8
    BL sub_18A10
    MOV R0, #aPuttygenUnable_0
    BLX perror
    MOVS R0, #1
    B.W loc_11CA8
loc_12BE6:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x95DC
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOV.W R2, #0x3A8
    MOVT.W R0, #3
    BLX __assert_fail
```
Output:0A:
    LDR R2, [SP,#0x138+var_130]
    CMP R2, #0
    BEQ.W loc_11BC6
loc_11812:
    LDR.W R3, [R9]
    MOVS R2, #0x2F
    MOVS R1, #1
    LDR R0, [SP,#0x138+ptr]
    BLX fwrite
    SUBS R6, #1
    MOV R7, R5
    MOV.W R10, #1
    BNE loc_11754
loc_11830:
    LDR R3, [SP,#0x138+var_128]
    ADDS R3, #1
    LDR R3, [SP,#0x138+var_11C]
    BEQ.W loc_11E60
loc_11838:
    CMP R3, #4
    BEQ.W loc_11F74
loc_1183E:
    LDR R3, [SP,#0x138+var_11C]
    SUB.W R6, R3, #5
    LDR R3, [SP,#0x138+var_128]
    CLZ.W R6, R6
    LSRS R6, R6, #5
    CMP.W R3, #0x100
    ITE 
    MOVEQ R3, #0
    ANDNE.W R3, R6, #1
    CMP R3, #0
    BNE.W loc_11FAE
loc_1184E:
    LDR R4, [SP,#0x138+var_11C]
    SUBS R3, R4, #1
    CMP R3, #2
    BLS.W loc_11C70
loc_11858:
    CMP.W R10, #0
    BNE.W loc_11CA6
loc_11860:
    LDR R3, [SP,#0x138+var_118]
    CMP R3, #0
    BNE.W loc_11DBC
loc_11868:
    LDR R3, [SP,#0x138+var_130]
    CBNZ R3, loc_11874
loc_1186C:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #0
    BEQ.W loc_11EFA
loc_11874:
    LDR R3, [SP,#0x138+var_11C]
    LDR R2, [SP,#0x138+var_130]
    ADDS R3, #0
    IT 
    MOVNE R3, #1
    STR R3, [SP,#0x138+ptr]
    CMP R2, #0
    BEQ.W loc_11DC0
loc_11886:
    CMP R3, #0
    BEQ.W loc_11DC0
loc_1188C:
    MOV R3, #0x56198
    MOVW R0, #0x930C
    MOVS R2, #0x2E
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_118A6:
    LDR R2, [SP,#0x138+var_130]
    CMP R2, #0
    BEQ.W loc_11BC6
loc_118AE:
    LDR.W R3, [R9]
    MOVS R2, #0x2F
    MOVS R1, #1
    LDR R0, [SP,#0x138+ptr]
    BLX fwrite
    SUBS R6, #1
    MOV R7, R5
    MOV.W R10, #1
    BNE loc_11754
loc_118CC:
    LDR R3, [SP,#0x138+var_128]
    ADDS R
############
```assembly
loc_18738:
    PUSH {R4-R7,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0xD4
    MOV R6, R0
    MOVS R0, #0x24
    LDR R3, [R5]
    STR R3, [SP,#0xE8+var_1C]
    BLX malloc
    MOV R4, R0
    CBZ R0, loc_18778
loc_18754:
    LDR R1, [SP,#0xE8+var_1C]
    MOVS R3, #0
    LDR R2, [R5]
    MOV R0, R4
    MOVS R5, #1
    STR R6, [R4,#0x1C]
    CMP R1, R2
    STR R3, [R4,#0x18]
    STR R3, [R4,#0x14]
    STR R3, [R4,#0x20]
    STR R3, [R4,#0xC]
    STR R3, [R4,#4]
    STR R3, [R4,#0x10]
    STR R3, [R4,#8]
    STR R5, [R4]
    BNE loc_1879E
loc_18774:
    ADD SP, SP, #0xD4
    POP {R4-R7,PC}
loc_18778:
    MOV R3, #0x3AE48
    ADD R7, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM R7!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [R7],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R7]
    BL sub_12E78
loc_1879C:
    B loc_18754
loc_1879E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-malloc-result",
  "conditional-branching-on-loop-condition",
  "external-function-calls-present",
  "external-call-type:memory-allocation (malloc)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x24",
  "fixed-value-assignment:0x3AE48",
  "fixed-value-assignment:0x54E4",
  "fixed-value-assignment:0x1C",
  "fixed-value-assignment:0x18",
  "fixed-value-assignment:0x14",
  "fixed-value-assignment:0x20",
  "fixed-value-assignment:0xC",
  "fixed-value-assignment:0x4",
  "fixed-value-assignment:0x10",
  "fixed-value-assignment:0x8",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "byte-order-processing:reverse",
  "bitwise-operation:left-shift",
  "bitwise-operation:right-shift",
  "bitwise-operation:OR",
  "bitwise-operation:AND-clear",
  "bitwise-operation:XOR",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:0x24",
  "address-or-offset-constant:0x3AE48",
  "address-or-offset-constant:0x54E4",
  "address-or-offset-constant:0x1C",
  "address-or-offset-constant:0x18",
  "address-or-offset-constant:0x14",
  "address-or-offset-constant:0x20",
  "address-or-offset-constant:0xC",
  "address-or-offset-constant:0x4",
  "address-or-offset-constant:0x10",
  "address-or-offset-constant:0x8",
  "address-or-offset-constant:0",
  "address-or-offset-constant:1",
  "inferred-algorithm:dynamic-memory-allocation",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:error-checking-or-failure-handling",
  "inferred-algorithm:loop-with-conditional-exit"
]
```<|im_end|>
############
```assembly
loc_14370:
    CMP R1, #0
    BEQ loc_1441E
loc_14374:
    PUSH {R3-R7,LR}
    MOV R6, R0
    MOV R7, R3
    LDRB R3, [R0]
    LDR R0, [SP,#0x18+arg_0]
    AND.W R3, R3, #0xE0
    STR R3, [R0]
    LDRB R3, [R6]
    AND.W R3, R3, #0x1F
    CMP R3, #0x1F
    ITTT 
    STRNE R3, [R2]
    ADDNE.W R1, R1, #0xFFFFFFFF
    ADDNE R4, R6, #1
    BEQ loc_143AC
loc_14398:
    CMP R1, #0
    BEQ loc_14414
loc_1439C:
    LDRB R3, [R4]
    LSLS R2, R3, #0x18
    ITT 
    ADDPL R5, R4, #1
    STRPL R3, [R7]
    BMI loc_143E4
loc_143A8:
    SUBS R0, R5, R6
    POP {R3-R7,PC}
loc_143AC:
    MOVS R0, #0
    STR R0, [R2]
    LDRSB.W R3, [R6]
    CMP R3, R0
    BGE loc_14424
loc_143B8:
    SUBS R1, #1
    ADD.W R3, R6, #1
    BNE loc_143C6
loc_143C0:
    B loc_14414
loc_143C2:
    SUBS R1, #1
    BEQ loc_14414
loc_143C6:
    MOV R4, R3
    LDRB.W R5, [R3],#1
    AND.W R5, R5, #0x7F
    ORR.W R0, R5, R0,LSL#7
    STR R0, [R2]
    LDRSB.W R5, [R4]
    CMP R5, #0
    BLT loc_143C2
loc_143DE:
    ADDS R4, #1
    SUBS R1, #1
    B loc_14398
loc_143E4:
    AND.W LR, R3, #0x7F
    ADDS R5, R4, #1
    CMP R1, LR
    BLE loc_14414
loc_143EE:
    CMP.W LR, #0
    BEQ loc_1441A
loc_143F4:
    ADD.W R1, R4, LR
    MOV R2, R4
    MOVS R0, #0
loc_143FC:
    LDRB.W R3, [R2,#1]!
    CMP R1, R2
    ORR.W R0, R3, R0,LSL#8
    BNE loc_143FC
loc_14408:
    ADD R5, LR
loc_1440A:
    BL nullsub_2
    STR R0, [R7]
    SUBS R0, R5, R6
    POP {R3-R7,PC}
loc_14414:
    MOV.W R0, #0xFFFFFFFF
    POP {R3-R7,PC}
loc_1441A:
    MOV R0, LR
    B loc_1440A
loc_1441E:
    MOV.W R0, #0xFFFFFFFF
    BX LR
loc_14424:
    MOV R4, R6
    B loc_143DE
```
Output:```json
[
  "return-type:unsigned-integer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:unsigned-integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (nullsub_2)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operations:AND",
  "bitwise-operations:OR",
  "bitwise-operations:LSL",
  "bitwise-operations:BMI",
  "bitwise-operations:BLT",
  "bitwise-operations:ADD",
  "bitwise-operations:SUB",
  "bitwise-mask-values:0xE0",
  "bitwise-mask-values:0x1F",
  "bitwise-mask-values:0x7F",
  "bitwise-mask-values:0x7F",
  "fixed-value-comparison:0",
  "fixed-value-comparison:0x1F",
  "fixed-value-comparison:0xFFFFFFFF",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0xFFFFFFFF",
  "fixed-value-assignment:0xFFFFFFFF",
  "address-or-offset-constant:nullsub_2",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:conditional-data-masking",
  "inferred-algorithm:register-based-iteration",
  "inferred-algorithm:address-pointer-increment",
  "inferred-algorithm:byte-order-processing",
  "inferred-algorithm:conditional-branching",
  "inferred-algorithm:external-helper-invocation"
]
```<|im_end|>
############
```assembly
loc_18C24:
    PUSH {R0-R3}
    MOVS R1, #0
    PUSH {R4-R6,LR}
    SUB SP, SP, #0x18
    ADD R5, SP, #0x38+varg_r0
    MOV R4, #0x56190
    ADD R2, SP, #0x38+var_20
    LDR.W R3, [R5],#4
    MOV R0, R1
    LDR R6, [R4]
    STR R5, [SP,#0x38+var_38]
    STR.W R1, [R2,#-8]!
    STR R6, [SP,#0x38+var_24]
    STR R5, [SP,#0x38+var_2C]
    BL sub_183C0
    LDR R2, [SP,#0x38+var_24]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_18C60
loc_18C56:
    ADD SP, SP, #0x18
    POP.W {R4-R6,LR}
    ADD SP, SP, #0x10
    BX LR
loc_18C60:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x28",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_183C0)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:varg_r0",
  "address-or-offset-constant:var_20",
  "address-or-offset-constant:var_38",
  "address-or-offset-constant:var_24",
  "address-or-offset-constant:var_2C",
  "address-or-offset-constant:sub_183C0",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-validation-or-safety-check",
  "inferred-algorithm:control-flow-guard"
]
```<|im_end|>
############
```assembly
loc_11550:
    ADR R12, 0x11558
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strspn_ptr - 0x55558)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:string",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strspn_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11558",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strspn_ptr",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:character-set-matching",
  "inferred-algorithm:loop-based-operation"
]
```<|im_end|>
############
```assembly
loc_1F08C:
    PUSH.W {R4-R10,LR}
    ADD.W R8, R0, #2
    LDRB R3, [R0]
    LDRB.W R9, [R0,#1]
    ADD.W R9, R9, R3,LSL#8
    ADD.W R9, R9, #7
    MOV.W R9, R9,ASR#3
    ADD.W R3, R9, #1
    CMP R1, R3
    BLE loc_1F14A
loc_1F0AE:
    CMP R2, #0
    BEQ loc_1F142
loc_1F0B2:
    ADD.W R5, R9, #3
    MOV R6, R0
    MOVS R1, #4
    MOV R7, R2
    ASRS R5, R5, #2
    ADDS R0, R5, #1
    MOV.W R10, R0,LSL#2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R10
    MOV R4, R0
    BLX memset
    STR R5, [R4]
    CBZ R5, loc_1F0E2
loc_1F0D6:
    SUB.W R2, R10, #4
    MOVS R1, #0
    ADDS R0, R4, #4
    BLX memset
loc_1F0E2:
    ADD.W R0, R9, #0xFFFFFFFF
    MOV R12, R8
    MOV.W LR, R0,LSL#3
    CMP.W R9, #0
    BEQ loc_1F116
loc_1F0F2:
    ASRS R2, R0, #2
    LDRB.W R1, [R12],#1
    ADDS R2, #1
    AND.W R3, LR, #0x1F
    SUBS R0, #1
    SUB.W LR, LR, #8
    LDR.W R5, [R4,R2,LSL#2]
    LSL.W R3, R1, R3
    ORRS R3, R5
    STR.W R3, [R4,R2,LSL#2]
    ADDS R3, R0, #1
    BNE loc_1F0F2
loc_1F116:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1F136
loc_1F11C:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBZ R1, loc_1F12E
loc_1F126:
    B loc_1F136
loc_1F128:
    LDR.W R1, [R2,#-4]!
    CBNZ R1, loc_1F136
loc_1F12E:
    SUBS R3, #1
    STR R3, [R4]
    CMP R3, #1
    BNE loc_1F128
loc_1F136:
    ADD R9, R8
    STR R4, [R7]
    SUB.W R0, R9, R6
    POP.W {R4-R10,PC}
loc_1F142:
    ADD.W R0, R9, #2
    POP.W {R4-R10,PC}
loc_1F14A:
    MOV.W R0, #0xFFFFFFFF
    POP.W {R4-R10,PC}
loc_1F152:
    MOV.W R0, #0xFFFFFFFF
    BX LR
```
Output:```json
[
  "return-type:unsigned-integer",
  "Argument-count:3",
  "Arg0-type:unsigned-integer",
  "Arg1-type:unsigned-integer",
  "Arg2-type:unsigned-integer",
  "Calling-convention-hint:callee-saves-registers",
  "Calling-convention-hint:registers-for-args",
  "Calling-convention-hint:return-via-register",
  "Stack-arg-use:true",
  "Standard-calling-convention-used",
  "Stack-frame-management-present",
  "Explicit-stack-allocation-size:0x14",
  "Callee-saves-registers-present",
  "Standard-function-return",
  "Conditional-branching-on-input",
  "Unconditional-jumps-present",
  "External-function-calls-present",
  "External-call-type:unspecified-helper (memset)",
  "Integer-size-hint:32-bit",
  "Byte-level-operations:bitwise-shift-left",
  "Byte-level-operations:bitwise-shift-right",
  "Byte-level-operations:bitwise-or",
  "Byte-level-operations:bitwise-and",
  "Fixed-value-comparison:0",
  "Fixed-value-comparison:-1",
  "Address-or-offset-constant:0x1F",
  "Address-or-offset-constant:0x8",
  "Address-or-offset-constant:0x12",
  "Address-or-offset-constant:0x14",
  "Address-or-offset-constant:0x15",
  "Address-or-offset-constant:0x19",
  "Address-or-offset-constant:0x20",
  "Address-or-offset-constant:0x21",
  "Address-or-offset-constant:0x22",
  "Address-or-offset-constant:0x23",
  "Address-or-offset-constant:0x24",
  "Address-or-offset-constant:0x25",
  "Address-or-offset-constant:0x26",
  "Address-or-offset-constant:0x27",
  "Address-or-offset-constant:0x28",
  "Address-or-offset-constant:0x29",
  "Address-or-offset-constant:0x2A",
  "Address-or-offset-constant:0x2B",
  "Address-or-offset-constant:0x2C",
  "Address-or-offset-constant:0x2D",
  "Address-or-offset-constant:0x2E",
  "Address-or-offset-constant:0x2F",
  "Address-or-offset-constant:0x30",
  "Address-or-offset-constant:0x31",
  "Address-or-offset-constant:0x32",
  "Address-or-offset-constant:0x33",
  "Address-or-offset-constant:0x34",
  "Address-or-offset-constant:0x35",
  "Address-or-offset-constant:0x36",
  "Address-or-offset-constant:0x37",
  "Address-or-offset-constant:0x38",
  "Address-or-offset-constant:0x39",
  "Address-or-offset-constant:0x3A",
  "Address-or-offset-constant:0x3B",
  "Address-or-offset-constant:0x3C",
  "Address-or-offset-constant:0x3D",
  "Address-or-offset-constant:0x3E",
  "Address-or-offset-constant:0x3F",
  "Address-or-offset-constant:0x40",
  "Address-or-offset-constant:0x41",
  "Address-or-offset-constant:0x42",
  "Address-or-offset-constant:0x43",
  "Address-or-offset-constant:0x44",
  "Address-or-offset-constant:0x45",
  "Address-or-offset-constant:0x46",
  "Address-or-offset-constant:0x47",
  "Address-or-offset-constant:0x48",
  "Address-or-offset-constant:0x49",
  "Address-or-offset-constant:0x4A",
  "Address-or-offset-constant:0x4B",
  "Address-or-offset-constant:0x4C",
  "Address-or-offset-constant:0x4D",
  "Address-or-offset-constant:0x4E",
  "Address-or-offset-constant:0x4F",
  "Address-or-offset-constant:0x50",
  "Address-or-offset-constant:0x51",
  "Address-or-offset-constant:0x52",
  "Address-or-offset-constant:0x53",
  "Address-or-offset-constant:0x54",
  "Address-or
############
```assembly
loc_36A08:
    PUSH {R3-R5,LR}
    MOV R5, R2
    MOV R2, R1
    MOVS R1, #0
    MOV R4, R0
    BLX memchr
    CBZ R0, loc_36A36
loc_36A18:
    SUBS R0, R0, R4
    MOVS R1, #4
    ADDS R3, R0, #1
    MOVS R0, #1
    STR R3, [R5]
    BL sub_193B8
    MOV R5, R0
    MOV R0, R4
    BL sub_18A88
    MOV R3, R5
    STR R0, [R5]
loc_36A32:
    MOV R0, R3
    POP {R3-R5,PC}
loc_36A36:
    MOV R3, R0
    B loc_36A32
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:byte",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-function-result",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (memchr)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "integer-size-hint:32-bit",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "byte-level-operations",
  "bitwise-operation:AND-clear",
  "inferred-algorithm:string-search-or-processing",
  "inferred-algorithm:data-transformation-or-mutation",
  "inferred-algorithm:loop-with-counter"
]
```<|im_end|>
############
```assembly
loc_112E0:
    ADR R12, 0x112E8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(tcsetattr_ptr - 0x552E8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "direct-addressing-used",
  "function-pointer-indirection",
  "external-function-calls-present",
  "external-call-type:operating-system-interaction (tcsetattr)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "address-or-offset-constant:0x112E8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:tcsetattr_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:file-descriptor-manipulation",
  "inferred-algorithm:terminal-control"
]
```<|im_end|>
############
```assembly
loc_1EF20:
    MOV R3, #0x56170
    PUSH.W {R4-R11,LR}
    MOV R9, R0
    LDR R4, [R3]
    SUB SP, SP, #0xC
    MOVS R1, #4
    STR R3, [SP,#0x30+var_2C]
    LDR R0, [R4]
    ADDS R0, #1
    BL sub_193B8
    CMP R0, #0
    BEQ.W loc_1F07E
loc_1EF44:
    LDR R2, [R4]
    MOV R1, R4
    MOV R8, R0
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDRB.W R4, [R9]
    CMP R4, #0
    BEQ loc_1F054
loc_1EF5A:
    BLX __ctype_b_loc
    MOV R11, #0x3FFFFFE
    MOV R10, R0
loc_1EF68:
    LDR.W R3, [R10]
    LDRH.W R3, [R3,R4,LSL#1]
    ANDS.W R3, R3, #0x800
    BEQ loc_1F060
loc_1EF76:
    LDR R3, [SP,#0x30+var_2C]
    MOV R0, R8
    LDR R1, [R3,#4]
    BL sub_1E548
    MOVS R1, #4
    LDRB.W R6, [R9]
    SUBS R6, #0x30
    MOV R5, R0
    MOVS R0, #2
    BL sub_193B8
    MOV R4, R0
    MOV R0, R8
    STR R6, [R4,#4]
    ADDS R6, #0
    IT 
    MOVNE R6, #1
    STR R6, [R4]
    LDR.W R1, [R8]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R6, [R4]
    LDR R3, [R5]
    CMP R6, R3
    IT 
    MOVLT R6, R3
    ADDS R7, R6, #1
    CMP R7, R11
    BHI loc_1F082
loc_1EFC0:
    ADDS R6, #2
    MOVS R1, #4
    MOV R0, R6
    BL sub_193B8
    LSLS R2, R6, #2
    MOVS R1, #0
    MOV R8, R0
    BLX memset
    STR.W R7, [R8]
    CMP R7, #0
    BEQ loc_1F05C
loc_1EFDC:
    MOVS R2, #0
    MOV R12, R8
    MOV LR, R2
    MOVS R3, #1
loc_1EFE4:
    LDR R1, [R5]
    LDR R7, [R4]
    CMP R1, R3
    MOV.W R1, #0
    ITE 
    LDRGE.W R0, [R5,R3,LSL#2]
    MOVLT R0, #0
    CMP R7, R3
    ITE 
    LDRGE.W R7, [R4,R3,LSL#2]
    MOVLT R7, #0
    ADDS.W R0, R0, LR
    ADC.W R1, R1, #0
    ADDS R0, R0, R7
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R2
    STR.W R0, [R12,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R6
    MOV LR, R1
    BNE loc_1EFE4
loc_1F024:
    STR.W R2, [R8]
    MOV R0, R5
    LDR R1, [R5]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R1, [R4]
    MOV R0, R4
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDRB.W R4, [R9,#1]!
    CMP R4, #0
    BNE loc_1EF68
loc_1F054:
    MOV R0, R8
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F05C:
    MOV R2, R7
    B loc_1F024
loc_1F060:
    MOV R4, R3
    LDR.W R3, [R8]
    MOV R0, R8
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F07E:
    BLX abort
loc_1F082:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (abort)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:data-processing-helper (__ctype_b_loc)",
  "external-call-type:data-processing-helper (sub_115CC)",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (sub_19494)",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:data-processing-helper (sub_195CC)",
  "external-call-type:data-processing-helper (sub_1E548)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x56170",
  "address-or-offset-constant:0x3FFFFFE",
  "address-or-offset-constant:abort",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:memcpy",
  "address-or-offset-constant:__ctype_b_loc",
  "address-or-offset-constant:sub_115CC",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:sub_195CC",
  "address-or-offset-constant:sub_1E548",
  "inferred-algorithm:data-processing-loop",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:data-verification",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:data-deserialization"
]
```<|im_end|>
############
```assembly
loc_11420:
    ADR R12, 0x11428
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__sprintf_chk_ptr - 0x55428)]!
```
Output:```json
[
  "return-type:unknown",
  "argument-count:unknown",
  "calling-convention-hint:unknown",
  "stack-arg-use:unknown",
  "standard-calling-convention-used:unknown",
  "stack-frame-management-present:unknown",
  "explicit-stack-allocation-size:unknown",
  "callee-saves-registers-present:unknown",
  "standard-function-return:unknown",
  "conditional-branching-present:unknown",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:sprintf_chk",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11428",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:sprintf_chk_ptr",
  "inferred-algorithm:string-formatting-or-output"
]
```<|im_end|>
############
```assembly
loc_1119C:
    ADR R12, 0x111A4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(getpwuid_ptr - 0x551A4)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:0",
  "calling-convention-hint:register-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "no-stack-frame-management",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-not-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (getpwuid_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111A4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:getpwuid_ptr",
  "inferred-algorithm:os-interaction",
  "inferred-algorithm:user-account-information-retrieval"
]
```<|im_end|>
############
```assembly
loc_116B4:
    PUSH {R3,LR}
    MOVW R1, #0x53DC
    MOVW R0, #0x53EC
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aReadSettingS
    MOVW R2, #0x18F
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:string",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:string",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "magic-number:0x53DC",
  "magic-number:0x53EC",
  "magic-number:0x18F",
  "address-or-offset-constant:aReadSettingS",
  "address-or-offset-constant:__assert_fail",
  "inferred-algorithm:error-checking",
  "inferred-algorithm:assertion-failure"
]
```<|im_end|>
############
```assembly
loc_114F4:
    ADR R12, 0x114FC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(getrusage_ptr - 0x554FC)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (getrusage_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x114FC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:getrusage_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_31A54:
    PUSH.W {R4-R11,LR}
    MOV R10, R0
    LDR.W R6, [R0,#0xC4]
    MOVW R9, #0x6190
    LDR.W R4, [R0,#0xC8]
    MOVT.W R9, #5
    ADD R6, R2
    LDR.W R0, [R0,#0xCC]
    CMP R2, R6
    STR.W R6, [R10,#0xC4]
    LDR.W R7, [R9]
    SUB SP, SP, #0x8C
    ITE 
    MOVLS R3, #0
    MOVHI R3, #1
    ADD R4, R3
    STR.W R4, [R10,#0xC8]
    CMP R4, R3
    LDR.W R4, [R10,#0xD0]
    MOV R5, R2
    STR R7, [SP,#0xB0+n]
    ITE 
    MOVCS R3, #0
    MOVCC R3, #1
    ADDS R6, R3, R0
    LDR.W R0, [R10,#0xC0]
    CMP R6, R3
    ITE 
    MOVCS R3, R4
    ADDCC R3, R4, #1
    STR.W R6, [R10,#0xCC]
    STR.W R3, [R10,#0xD0]
    MOV R6, R1
    CMP R0, #0
    BNE loc_31B64
loc_31AB4:
    CMP R2, #0x7F
    IT 
    ADDLE.W R7, R10, #0x40
    BLE loc_31B46
loc_31ABE:
    ADD.W R7, R10, #0x40
    ADD R4, SP, #0xB0+n
    MOV.W R8, #0
loc_31AC8:
    RSB.W R2, R0, #0x80
    MOV R1, R6
    ADD R0, R7
    BLX memcpy
    LDR.W R2, [R10,#0xC0]
    ADD R0, SP, #0xB0+var_AC
    MOV R3, R10
    RSB.W R2, R2, #0x80
    ADD R6, R2
    SUBS R5, R5, R2
loc_31AE4:
    LDRB.W LR, [R3,#0x45]
    ADDS R0, #8
    LDRB.W R11, [R3,#0x44]
    ADDS R3, #8
    LDRB.W R2, [R3,#0x39]
    LDRB.W R12, [R3,#0x38]
    MOV.W LR, LR,LSL#16
    LDRB.W R1, [R3,#0x3F]
    ORR.W LR, LR, R11,LSL#24
    LSLS R2, R2, #0x10
    LDRB.W R11, [R3,#0x3E]
    ORR.W R12, R2, R12,LSL#24
    ORR.W R1, LR, R1
    LDRB.W R2, [R3,#0x3B]
    LDRB.W LR, [R3,#0x3A]
    ORR.W R1, R1, R11,LSL#8
    ORR.W R2, R12, R2
    STR.W R1, [R0,#-4]
    ORR.W R2, R2, LR,LSL#8
    STR.W R2, [R0,#-8]
    CMP R4, R0
    BNE loc_31AE4
loc_31B32:
    MOV R0, R10
    ADD R1, SP, #0xB0+var_AC
    BL sub_30838
    CMP R5, #0x7F
    STR.W R8, [R10,#0xC0]
    MOV.W R0, #0
    BGT loc_31AC8
loc_31B46:
    MOV R1, R6
    MOV R0, R7
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R10,#0xC0]
loc_31B54:
    LDR R2, [SP,#0xB0+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_31B80
loc_31B5E:
    ADD SP, SP, #0x8C
    POP.W {R4-R11,PC}
loc_31B64:
    ADDS R3, R2, R0
    CMP R3, #0x7F
    BGT loc_31ABE
loc_31B6A:
    ADD.W R3, R10, #0x40
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0xC0]
    ADD R3, R5
    STR.W R3, [R10,#0xC0]
    B loc_31B54
loc_31B80:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-OR",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right",
  "byte-order-processing:little-endian",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:0x6190",
  "address-or-offset-constant:0x7F",
  "address-or-offset-constant:sub_30838",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:data-transformation",
  "inferred-algorithm:error-checking-or-failure-handling"
]
```<|im_end|>
############
```assembly
loc_2F250:
    PUSH {R4,LR}
    MOVS R1, #0x6C
    MOV R4, R0
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x6C",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:helper-invocation-or-proxy"
]
```<|im_end|>
############
```assembly
loc_5694C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_113A4:
    ADR R12, 0x113AC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(rename_ptr - 0x553AC)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-used",
  "standard-function-return-not-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x113AC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:rename_ptr",
  "address-or-offset-constant:0x553AC",
  "inferred-algorithm:indirect-code-execution",
  "inferred-algorithm:dynamic-symbol-resolution"
]
```<|im_end|>
############
```assembly
loc_31B84:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    MOV R5, R0
    SUB SP, SP, #0x124
    MOVT.W R3, #5
    LDR.W R2, [R5,#0xC8]
    LDR.W R11, [R0,#0xC0]
    MOV R6, R1
    LDR.W R0, [R0,#0xCC]
    ADD R4, SP, #0x148+var_AC
    STR R3, [SP,#0x148+var_144]
    LSRS R1, R2, #0x1D
    LDR R3, [R3]
    CMP.W R11, #0x6F
    LDR.W LR, [R5,#0xC4]
    ORR.W R1, R1, R0,LSL#3
    ITE 
    RSBGT.W R7, R11, #0xF0
    RSBLE.W R7, R11, #0x70
    STR R3, [SP,#0x148+var_2C]
    LSRS R3, R0, #0x1D
    LDR.W R0, [R5,#0xD0]
    STR R1, [SP,#0x148+var_134]
    MOV.W R1, LR,LSR#29
    ORR.W R1, R1, R2,LSL#3
    MOV R2, R7
    ORR.W R3, R3, R0,LSL#3
    STR R1, [SP,#0x148+var_138]
    STR R3, [SP,#0x148+var_130]
    MOVS R1, #0
    MOVS R3, #0x80
    MOV R0, R4
    MOV.W LR, LR,LSL#3
    STR.W LR, [SP,#0x148+var_13C]
    BLX __memset_chk
    LDR.W R1, [R5,#0xC4]
    LDR.W R0, [R5,#0xC8]
    MOV.W LR, #0x80
    ADD R1, R7
    LDR.W R2, [R5,#0xCC]
    CMP R7, R1
    STR.W R1, [R5,#0xC4]
    LDR.W R1, [R5,#0xD0]
    ITE 
    MOVLS R3, #0
    MOVHI R3, #1
    STRB.W LR, [SP,#0x148+var_AC]
    ADD R0, R3
    STR.W R0, [R5,#0xC8]
    CMP R3, R0
    ITE 
    MOVLS R3, #0
    MOVHI R3, #1
    ADD R2, R3
    STR.W R2, [R5,#0xCC]
    CMP R3, R2
    ITE 
    MOVLS R3, R1
    ADDHI R3, R1, #1
    STR.W R3, [R5,#0xD0]
    CMP.W R11, #0
    BEQ.W loc_31EB0
loc_31C3C:
    ADD.W R3, R7, R11
    CMP R3, #0x7F
    BLE.W loc_31EC0
loc_31C46:
    ADD.W R9, R5, #0x40
    MOV R8, R4
    MOV.W R10, #0
    MOV R0, R11
loc_31C52:
    RSB.W R2, R0, #0x80
    MOV R1, R8
    ADD R0, R9
    BLX memcpy
    LDR.W R3, [R5,#0xC0]
    ADD.W R12, SP, #0x148+var_12C
    MOV LR, R5
    RSB.W R3, R3, #0x80
    ADD R8, R3
    SUBS R7, R7, R3
loc_31C70:
    LDRB.W R2, [LR,#0x45]
    ADD.W R12, R12, #8
    LDRB.W R1, [LR,#0x44]
    ADD.W LR, LR, #8
    LDRB.W R3, [LR,#0x39]
    LDRB.W R0, [LR,#0x38]
    LSLS R2, R2, #0x10
    ORR.W R2, R2, R1,LSL#24
    LDRB.W R1, [LR,#0x3F]
    LSLS R3, R3, #0x10
    ORR.W R11, R3, R0,LSL#24
    ORRS R2, R1
    LDRB.W R0, [LR,#0x3E]
    LDRB.W R3, [LR,#0x3B]
    LDRB.W R1, [LR,#0x3A]
    ORR.W R3, R11, R3
    ORR.W R2, R2, R0,LSL#8
    STR.W R2, [R12,#-4]
    ORR.W R3, R3, R1,LSL#8
    STR.W R3, [R12,#-8]
    CMP R12, R4
    BNE loc_31C70
loc_31CBE:
    MOV R0, R5
    ADD R1, SP, #0x148+var_12C
    BL sub_30838
    CMP R7, #0x7F
    MOV.W R0, #0
    STR.W R10, [R5,#0xC0]
    BGT loc_31C52
loc_31CD2:
    MOV R1, R8
    MOV R0, R9
    MOV R2, R7
    BLX memcpy
    STR.W R7, [R5,#0xC0]
loc_31CE0:
    LDR R7, [SP,#0x148+var_130]
    MOV R1, R4
    LDR R0, [SP,#0x148+var_134]
    MOVS R2, #0x10
    LDR R4, [SP,#0x148+var_138]
    LDR R3, [SP,#0x148+var_13C]
    MOV.W LR, R7,LSR#24
    STRB.W R7, [SP,#0x148+var_A9]
    STRB.W LR, [SP,#0x148+var_AC]
    LSR.W LR, R7, R2
    STRB.W R0, [SP,#0x148+var_A5]
    LSRS R7, R7, #8
    STRB.W R7, [SP,#0x148+var_AA]
    LSRS R7, R0, #0x18
    STRB.W R7, [SP,#0x148+var_A8]
    LSR.W R7, R0, R2
    LSRS R0, R0, #8
    STRB.W R0, [SP,#0x148+var_A6]
    MOV R0, R5
    STRB.W R7, [SP,#0x148+var_A7]
    STRB.W R4, [SP,#0x148+var_A1]
    LSRS R7, R4, #0x18
    STRB.W R3, [SP,#0x148+var_9D]
    STRB.W R7, [SP,#0x148+var_A4]
    LSR.W R7, R4, R2
    STRB.W LR, [SP,#0x148+var_AB]
    LSRS R4, R4, #8
    STRB.W R7, [SP,#0x148+var_A3]
    STRB.W R4, [SP,#0x148+var_A2]
    LSRS R4, R3, #0x18
    STRB.W R4, [SP,#0x148+var_A0]
    LSR.W R4, R3, R2
    LSRS R3, R3, #8
    STRB.W R4, [SP,#0x148+var_9F]
    STRB.W R3, [SP,#0x148+var_9E]
    BL sub_31A54
    LDM.W R5, {R2,R3}
    LSRS R1, R2, #0x18
    STRB R1, [R6]
    STRB R2, [R6,#3]
    LSRS R1, R2, #0x10
    STRB R3, [R6,#7]
    LSRS R2, R2, #8
    STRB R1, [R6,#1]
    LSRS R1, R3, #0x18
    STRB R2, [R6,#2]
    LSRS R2, R3, #0x10
    STRB R1, [R6,#4]
    LSRS R3, R3, #8
    STRB R2, [R6,#5]
    STRB R3, [R6,#6]
    LDR R2, [R5,#8]
    LDR R3, [R5,#0xC]
    LSRS R1, R2, #0x18
    STRB R2, [R6,#0xB]
    STRB R1, [R6,#8]
    LSRS R1, R2, #0x10
    STRB R3, [R6,#0xF]
    LSRS R2, R2, #8
    STRB R1, [R6,#9]
    LSRS R1, R3, #0x18
    STRB R2, [R6,#0xA]
    LSRS R2, R3, #0x10
    STRB R1, [R6,#0xC]
    LSRS R3, R3, #8
    STRB R2, [R6,#0xD]
    STRB R3, [R6,#0xE]
    LDR R2, [R5,#0x10]
    LDR R3, [R5,#0x14]
    LSRS R1, R2, #0x18
    STRB R2, [R6,#0x13]
    STRB R1, [R6,#0x10]
    LSRS R1, R2, #0x10
    STRB R3, [R6,#0x17]
    LSRS R2, R2, #8
    STRB R1, [R6,#0x11]
    LSRS R1, R3, #0x18
    STRB R2, [R6,#0x12]
    LSRS R2, R3, #0x10
    STRB R1, [R6,#0x14]
    LSRS R3, R3, #8
    STRB R2, [R6,#0x15]
    STRB R3, [R6,#0x16]
    LDR R2, [R5,#0x18]
    LDR R3, [R5,#0x1C]
    LSRS R1, R2, #0x18
    LSRS R4, R2, #0x10
    STRB R1, [R6,#0x18]
    LSRS R0, R2, #8
    STRB R2, [R6,#0x1B]
    LSRS R1, R3, #0x18
    STRB R3, [R6,#0x1F]
    LSRS R2, R3, #0x10
    STRB R4, [R6,#0x19]
    LSRS R3, R3, #8
    STRB R0, [R6,#0x1A]
    STRB R1, [R6,#0x1C]
    STRB R2, [R6,#0x1D]
    STRB R3, [R6,#0x1E]
    LDR R2, [R5,#0x20]
    LDR R3, [R5,#0x24]
    LSRS R1, R2, #0x18
    STRB.W R2, [R6,#0x23]
    STRB.W R1, [R6,#0x20]
    LSRS R1, R2, #0x10
    STRB.W R3, [R6,#0x27]
    LSRS R2, R2, #8
    STRB.W R1, [R6,#0x21]
    LSRS R1, R3, #0x18
    STRB.W R2, [R6,#0x22]
    LSRS R2, R3, #0x10
    STRB.W R1, [R6,#0x24]
    LSRS R3, R3, #8
    STRB.W R2, [R6,#0x25]
    STRB.W R3, [R6,#0x26]
    LDR R2, [R5,#0x28]
    LDR R3, [R5,#0x2C]
    LSRS R1, R2, #0x18
    STRB.W R2, [R6,#0x2B]
    STRB.W R1, [R6,#0x28]
    LSRS R1, R2, #0x10
    STRB.W R3, [R6,#0x2F]
    LSRS R2, R2, #8
    STRB.W R1, [R6,#0x29]
    LSRS R1, R3, #0x18
    STRB.W R2, [R6,#0x2A]
    LSRS R2, R3, #0x10
    STRB.W R1, [R6,#0x2C]
    LSRS R3, R3, #8
    STRB.W R2, [R6,#0x2D]
    STRB.W R3, [R6,#0x2E]
    LDR R3, [R5,#0x34]
    LDR R2, [R5,#0x30]
    LSRS R1, R2, #0x18
    LSRS R0, R2, #0x10
    STRB.W R1, [R6,#0x30]
    LSRS R1, R2, #8
    STRB.W R0, [R6,#0x31]
    LSRS R0, R3, #0x18
    STRB.W R1, [R6,#0x32]
    LSRS R1, R3, #0x10
    STRB.W R2, [R6,#0x33]
    LSRS R2, R3, #8
    STRB.W R1, [R6,#0x35]
    LDR R1, [SP,#0x148+var_144]
    STRB.W R0, [R6,#0x34]
    LDR R0, [SP,#0x148+var_2C]
    LDR R1, [R1]
    STRB.W R3, [R6,#0x37]
    STRB.W R2, [R6,#0x36]
    CMP R0, R1
    LDR R3, [R5,#0x3C]
    LDR R2, [R5,#0x38]
    STRB.W R3, [R6,#0x3F]
    MOV.W R5, R2,LSR#24
    MOV.W R4, R2,LSR#16
    STRB.W R2, [R6,#0x3B]
    MOV.W R2, R2,LSR#8
    STRB.W R5, [R6,#0x38]
    MOV.W R5, R3,LSR#24
    STRB.W R4, [R6,#0x39]
    MOV.W R4, R3,LSR#16
    STRB.W R2, [R6,#0x3A]
    MOV.W R3, R3,LSR#8
    STRB.W R5, [R6,#0x3C]
    STRB.W R4, [R6,#0x3D]
    STRB.W R3, [R6,#0x3E]
    BNE loc_31EDA
loc_31EAA:
    ADD SP, SP, #0x124
    POP.W {R4-R11,PC}
loc_31EB0:
    CMP R7, #0x7F
    ITT 
    ADDLE.W R9, R5, #0x40
    MOVLE R8, R4
    BGT.W loc_31C46
loc_31EBE:
    B loc_31CD2
loc_31EC0:
    ADD.W R0, R5, #0x40
    MOV R2, R7
    ADD R0, R11
    MOV R1, R4
    BLX memcpy
    LDR.W R3, [R5,#0xC0]
    ADD R3, R7
    STR.W R3, [R5,#0xC0]
    B loc_31CE0
loc_31EDA:
    BLX __stack_chk_fail
```
Output: R5, #0x80
    BLX memset
    MOV W0, R7
    ADDS R7, #0x124
    MOV SP, R7
    POP.W {R4-R11,PC}
```<|im_end|>
############
```assembly
loc_56914:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2C82C:
    PUSH.W {R4-R10,LR}
    SUB SP, SP, #0x10
    MOV R6, #0x56190
    LDR.W LR, [SP,#0x30+arg_0]
    MOV R5, R0
    LDR R0, [R6]
    MOV R4, R1
    CMP.W LR, #9
    MOV R9, R2
    MOV R7, R3
    STR R0, [SP,#0x30+var_24]
    BEQ loc_2C88A
loc_2C850:
    CMP.W LR, #0xA
    BNE.W loc_2C976
loc_2C858:
    MOV R2, R3
    MOV R1, R9
    MOV R0, R4
    BL sub_2A480
    MOVW R2, #0x93A8
    MOVS R1, #1
    MOVT.W R2, #3
    MOV R4, R0
    MOV R3, R0
    MOV R0, R5
    BLX __fprintf_chk
    MOV R0, R4
    BL sub_19494
loc_2C87C:
    LDR R2, [SP,#0x30+var_24]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_2C972
loc_2C884:
    ADD SP, SP, #0x10
    POP.W {R4-R10,PC}
loc_2C88A:
    MOVW R0, #0x37D8
    MOV R3, R5
    MOVT.W R0, #4
    MOVS R2, #0x20
    MOVS R1, #1
    BLX fwrite
    CBZ R4, loc_2C8E8
loc_2C89E:
    MOVW R0, #0xAD70
    MOV R3, R5
    MOVT.W R0, #3
    MOVS R2, #0xA
    MOVS R1, #1
    BLX fwrite
    LDRB R0, [R4]
    CBNZ R0, loc_2C8C2
loc_2C8B4:
    B loc_2C8D6
loc_2C8B6:
    MOV R1, R5
    BLX fputc
    LDRB.W R0, [R4,#1]!
    CBZ R0, loc_2C8D6
loc_2C8C2:
    CMP R0, #0x22
    IT 
    CMPNE R0, #0x5C
    BNE loc_2C8B6
loc_2C8CA:
    MOV R1, R5
    MOVS R0, #0x5C
    BLX fputc
    LDRB R0, [R4]
    B loc_2C8B6
loc_2C8D6:
    MOVW R0, #0x37FC
    MOV R3, R5
    MOVT.W R0, #4
    MOVS R2, #2
    MOVS R1, #1
    BLX fwrite
loc_2C8E8:
    CMP R7, #0
    BLE loc_2C95E
loc_2C8EC:
    CMP R7, #3
    MOV R4, R7
    MOV R0, R9
    ADD R2, SP, #0x30+s
    IT 
    MOVGE R4, #3
    MOV.W R10, #0
    MOV R1, R4
    MOV.W R8, #1
    BL sub_18FA4
    ADD R0, SP, #0x30+s
    MOV R1, R5
    STRB.W R10, [SP,#0x30+var_28]
    BLX fputs
loc_2C912:
    CMP R7, R4
    BLE loc_2C950
loc_2C916:
    SUBS R1, R7, R4
    ADD.W R0, R9, R4
    CMP R1, #3
    ADD R2, SP, #0x30+s
    ADD.W R8, R8, #1
    IT 
    MOVGE R1, #3
    ADD R4, R1
    BL sub_18FA4
    MOV R1, R5
    ADD R0, SP, #0x30+s
    STRB.W R10, [SP,#0x30+var_28]
    BLX fputs
    CMP.W R8, #0x10
    BNE loc_2C912
loc_2C940:
    MOV R1, R5
    MOVS R0, #0xA
    BLX fputc
    CMP R7, R4
    MOV.W R8, #0
    BGT loc_2C916
loc_2C950:
    CMP.W R8, #0
    BEQ loc_2C95E
loc_2C956:
    MOV R1, R5
    MOVS R0, #0xA
    BLX fputc
loc_2C95E:
    MOV R3, R5
    MOVW R0, #0x3800
    MOVS R2, #0x1E
    MOVS R1, #1
    MOVT.W R0, #4
    BLX fwrite
    B loc_2C87C
loc_2C972:
    BLX __stack_chk_fail
loc_2C976:
    MOVW R1, #0x3380
    MOVW R0, #0x3820
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aSsh2WritePubke
    MOVW R2, #0x623
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__fprintf_chk)",
  "external-call-type:data-processing-helper (fwrite)",
  "external-call-type:data-processing-helper (fputc)",
  "external-call-type:data-processing-helper (puts)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "external-call-type:data-processing-helper (__assert_fail)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:aSsh2WritePubke",
  "address-or-offset-constant:0x37D8",
  "address-or-offset-constant:0x37FC",
  "address-or-offset-constant:0xAD70",
  "address-or-offset-constant:0x3380",
  "address-or-offset-constant:0x3820",
  "address-or-offset-constant:0x623",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:sub_2A480",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4",
  "address-or-offset-constant:sub_18FA4
############
```assembly
loc_11534:
    ADR R12, 0x1153C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(close_ptr - 0x5553C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (close)",
  "address-or-offset-constant:0x1153C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:close_ptr",
  "inferred-algorithm:file-or-resource-cleanup",
  "inferred-algorithm:program-exit-or-shutdown"
]
```<|im_end|>
############
```assembly
loc_111AC:
    ADR R12, 0x111B4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fopen_ptr - 0x551B4)]!
```
Output:```json
[
  "return-type:file-pointer",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fopen)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111B4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fopen_ptr",
  "address-or-offset-constant:0x551B4",
  "inferred-algorithm:file-opening",
  "inferred-algorithm:path-construction"
]
```<|im_end|>
############
```assembly
loc_24604:
    LDR R3, [R0]
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R4, R0
    LDR R0, [R3,#0x30]
    STR R1, [SP,#0x30+var_2C]
    BLX strlen
    LDR R5, [R4,#4]
    LDR R3, [R5]
    CMP R3, #2
    MOV R7, R0
    BEQ loc_24716
loc_24620:
    CMP R3, #0
    BNE.W loc_247B0
loc_24626:
    LDR R0, [R5,#4]
    CMP R0, #0
    BEQ.W loc_247CE
loc_2462E:
    BLX strlen
    MOV R11, R0
    LDR R0, [R5,#0x10]
    BL sub_1F158
    ADD.W R8, R7, R11
    MOVS R1, #1
    ADD.W R8, R8, #0xD
    ADD.W R9, R0, #0xE
    ADDS R0, #7
    IT 
    MOVMI R0, R9
    MOV.W R9, R0,ASR#3
    ADD.W R5, R9, #0xFFFFFFFF
    LSL.W R10, R9, R1
    ADD R8, R10
    MOV R0, R8
    BL sub_193B8
    ASRS R2, R7, #0x18
    ASRS R3, R7, #0x10
    STRB R7, [R0,#3]
    MOV R6, R0
    STRB R2, [R0]
    MOV R2, R7
    STRB R3, [R0,#1]
    ASRS R3, R7, #8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR R1, [R4]
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    MOV.W R1, R11,ASR#24
    MOV.W R3, R11,ASR#16
    ADDS R2, R0, R7
    STRB R1, [R0,R7]
    STRB R3, [R2,#1]
    MOV.W R3, R11,ASR#8
    STRB.W R11, [R2,#3]
    STRB R3, [R2,#2]
    ADDS R3, R2, #4
    LDR R1, [R4,#4]
    MOV R2, R11
    MOV R0, R3
    LDR R1, [R1,#4]
    BLX memcpy
    ADD.W R2, R10, #1
    ASRS R7, R2, #0x18
    ADD.W R1, R0, R11
    MOV R3, R0
    STRB.W R7, [R3,R11]
    MOVS R0, #4
    ASRS R3, R2, #0x10
    STRB R2, [R1,#3]
    STRB R3, [R1,#1]
    ASRS R2, R2, #8
    STRB R0, [R1,#4]
    ADDS R7, R1, #5
    STRB R2, [R1,#2]
    CMP.W R9, #0
    BEQ loc_246FE
loc_246CC:
    MOV R11, R5
    MOV R10, R7
loc_246D0:
    MOV R1, R11
    LDR R0, [R4,#8]
    BL sub_1F20C
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_246D0
loc_246E6:
    ADD R7, R9
    MOV R11, R7
loc_246EA:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R11],#1
    BNE loc_246EA
loc_246FC:
    ADD R7, R9
loc_246FE:
    ADD.W R3, R6, R8
    CMP R7, R3
    ITTT 
    LDREQ R3, [SP,#0x30+var_2C]
    MOVEQ R0, R6
    STREQ.W R8, [R3]
    BNE loc_247B4
loc_24710:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_24716:
    LDR R3, [R5,#0xC]
    MOV.W R10, R3,LSR#3
    CMP.W R10, #1
    BLS loc_247B0
loc_24722:
    ADD.W R8, R0, #8
    MOVS R1, #1
    ADD R8, R10
    ADD.W R9, R10, #0xFFFFFFFF
    MOVS R5, #0
    MOV R0, R8
    BL sub_193B8
    ASRS R1, R7, #0x18
    ASRS R2, R7, #0x10
    STRB R7, [R0,#3]
    ADDS R3, R0, #4
    STRB R2, [R0,#1]
    ASRS R2, R7, #8
    STRB R1, [R0]
    MOV R6, R0
    STRB R2, [R0,#2]
    MOV R2, R7
    LDR R1, [R4]
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    MOV.W R1, R10,ASR#24
    MOV.W R3, R10,ASR#8
    ADDS R2, R0, R7
    STRB R1, [R0,R7]
    ADD.W R11, R2, #4
    MOV.W R1, R10,ASR#16
    STRB.W R10, [R2,#3]
    MOV R7, R11
    STRB R1, [R2,#1]
    STRB R3, [R2,#2]
loc_24772:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    ADDS R5, #1
    CMP R9, R5
    STRB.W R0, [R7],#1
    BNE loc_24772
loc_24784:
    MOV R1, R9
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    MOVS R1, #0
    ADD.W R7, R11, R9
    ADDS R7, #1
    AND.W R0, R0, #0x7F
    STRB.W R0, [R11,R9]
    LDR R0, [R4,#8]
    BL sub_1F234
    LDRB.W R3, [R11,R9]
    ORR.W R0, R3, R0,LSL#7
    STRB.W R0, [R11,R9]
    B loc_246FE
loc_247B0:
    MOVS R0, #0
    B loc_24710
loc_247B4:
    MOVW R1, #0xFCBC
    MOVW R0, #0xF568
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaPublicBlo
    MOVW R2, #0x777
    BLX __assert_fail
loc_247CE:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFCC8
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaPublicBlo
    MOVW R2, #0x756
    BLX __assert_fail
```
Output: R1, R0, R10
    MOV R3, R0
    STRB W3, [R1,R10]
    STRB R3, [R1,#1]
    ASRS R3, R2, #0x10
    STRB R0, [R1,#4]
    ADDS R7, R1, #5
    STRB R3, [R1,#2]
    CMP.W R9, #0
    BEQ loc_24764
loc_24742:
    MOV R11, R5
    MOV R10, R7
loc_24746:
    MOV R1, R11
    LDR R0, [R4,#8]
    BL sub_1F20C
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_24746
loc_24752:
    ADD R7, R9
    MOV R11, R7
loc_24756:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R11],#1
    BNE loc_24756
loc_24764:
    ADD.W R3, R6, R8
    CMP R7, R3
    ITTT 
    LDREQ R3, [SP,#0x30+var_2C]
    MOVEQ R0, R6
    STREQ.W R8, [R3]
    BNE loc_247B4
loc_247B0:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_247B4:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_297EC:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    MOV R6, R1
    SUB SP, SP, #0xAC
    CMP R6, #0x3F
    LDR.W R1, [R9]
    MOV.W R7, #0
    STR R2, [SP,#0xD0+var_D0]
    MOVW R3, #0xAB89
    MOVW R2, #0x2301
    MOVT.W R3, #0xEFCD
    MOVT.W R2, #0x6745
    STR R3, [SP,#0xD0+var_84]
    STR R2, [SP,#0xD0+var_88]
    MOVW R3, #0x5476
    MOVW R2, #0xDCFE
    MOVT.W R3, #0x1032
    MOVT.W R2, #0x98BA
    MOV R11, R0
    STR R6, [SP,#0xD0+var_30]
    STR R1, [SP,#0xD0+var_2C]
    STR R2, [SP,#0xD0+var_80]
    STR R3, [SP,#0xD0+var_7C]
    STR R7, [SP,#0xD0+var_38]
    STR R7, [SP,#0xD0+var_34]
    BLS loc_29902
loc_2983C:
    SUB.W R3, R6, #0x40
    ADD.W R12, R0, #0x40
    ADD.W R8, SP, #0xD0+var_88
    LSRS R3, R3, #6
    STR R3, [SP,#0xD0+var_CC]
    ADD.W R10, R3, #2
    ADD.W R10, R0, R10,LSL#6
loc_29854:
    SUB.W R4, R12, #0x40
    ADD.W LR, SP, #0xD0+dest
loc_2985C:
    LDR R0, [R4]
    ADDS R4, #0x10
    LDR.W R1, [R4,#-0xC]
    MOV R5, LR
    LDR.W R2, [R4,#-8]
    ADD.W LR, LR, #0x10
    LDR.W R3, [R4,#-4]
    CMP R4, R12
    STM R5!, {R0-R3}
    BNE loc_2985C
loc_29878:
    LDR R3, [SP,#0xD0+var_74]
    ADD R1, SP, #0xD0+var_C8
    LDR R2, [SP,#0xD0+dest]
    MOV R0, R8
    LDR R5, [SP,#0xD0+var_70]
    STR R3, [SP,#0xD0+var_C4]
    LDR R3, [SP,#0xD0+var_6C]
    STR R2, [SP,#0xD0+var_C8]
    LDR R2, [SP,#0xD0+var_68]
    STR R3, [SP,#0xD0+var_BC]
    LDR R3, [SP,#0xD0+var_64]
    STR R2, [SP,#0xD0+var_B8]
    LDR R2, [SP,#0xD0+var_60]
    STR R3, [SP,#0xD0+var_B4]
    LDR R3, [SP,#0xD0+var_5C]
    STR R2, [SP,#0xD0+var_B0]
    LDR R2, [SP,#0xD0+var_58]
    STR R3, [SP,#0xD0+var_AC]
    LDR R3, [SP,#0xD0+var_54]
    STR R2, [SP,#0xD0+var_A8]
    LDR R2, [SP,#0xD0+var_50]
    STR R3, [SP,#0xD0+var_A4]
    LDR R3, [SP,#0xD0+var_4C]
    STR R2, [SP,#0xD0+var_A0]
    LDR R2, [SP,#0xD0+var_48]
    STR R3, [SP,#0xD0+var_9C]
    LDR R3, [SP,#0xD0+var_44]
    STR R2, [SP,#0xD0+var_98]
    LDR R2, [SP,#0xD0+var_40]
    STR R3, [SP,#0xD0+var_94]
    LDR R3, [SP,#0xD0+var_3C]
    STR R5, [SP,#0xD0+var_C0]
    STR R2, [SP,#0xD0+var_90]
    STR R3, [SP,#0xD0+var_8C]
    BL sub_28778
    ADD.W R12, R4, #0x40
    STR R7, [SP,#0xD0+var_38]
    CMP R12, R10
    BNE loc_29854
loc_298CA:
    LDR R1, [SP,#0xD0+var_CC]
    AND.W R6, R6, #0x3F
    ADD R0, SP, #0xD0+dest
    MOVS R3, #0x4C
    ADDS R1, #1
    MOV R2, R6
    ADD.W R1, R11, R1,LSL#6
    BLX __memcpy_chk
    STR R6, [SP,#0xD0+var_38]
loc_298E2:
    LDR R0, [SP,#0xD0+var_D0]
    MOV R1, R8
    BL sub_29130
    MOV R0, R8
    MOVS R1, #0x5C
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
loc_298FC:
    ADD SP, SP, #0xAC
    POP.W {R4-R11,PC}
loc_29902:
    MOV R1, R0
    MOV R2, R6
    ADD R0, SP, #0xD0+dest
    ADD.W R8, SP, #0xD0+var_88
    BLX memcpy
    LDR R3, [SP,#0xD0+var_38]
    ADD R3, R6
    STR R3, [SP,#0xD0+var_38]
    B loc_298E2
loc_29918:
    BLX __stack_chk_fail
```
Output:0xD0+var_2C
    BL sub_29130
    MOV R0, R6
    MOVS R1, #0x5C
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x60
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x64
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x68
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x6C
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x70
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x74
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x78
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x7C
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x80
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x84
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x88
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29918
    MOV R0, R6
    MOVS R1, #0x8C
    BL sub_194E4
    LDR R2, [SP,#0xD0+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    B
############
```assembly
loc_19A80:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-function-return"
]
```<|im_end|>
############
```assembly
loc_12CAC:
    PUSH {R4,LR}
    MOV R4, #0x561A0
    LDRB R3, [R4]
    CBNZ R3, locret_12CC2
loc_12CBA:
    BL sub_12C5C
    MOVS R3, #1
    STRB R3, [R4]
loc_12CC2:
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "conditional-branching-on-condition",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_12C5C)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x561A0",
  "fixed-value-assignment:1",
  "byte-level-operations",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:status-flag-check-and-modification"
]
```<|im_end|>
############
```assembly
loc_198D4:
    LDR R3, [R0]
    PUSH {R4-R7,LR}
    CMP R3, #3
    IT 
    MOVLE R6, #0
    BLE loc_19906
loc_198E0:
    LDR R5, [R1]
    MOVS R6, #1
    ADDS R7, R5, #4
    LDRB R4, [R5,#1]
    LDRB.W LR, [R5]
    LDRB R3, [R5,#3]
    LSLS R4, R4, #0x10
    LDRB R5, [R5,#2]
    ORR.W R4, R4, LR,LSL#24
    ORRS R3, R4
    ORR.W R3, R3, R5,LSL#8
    STR R3, [R2]
    LDR R3, [R0]
    SUBS R3, #4
    STR R3, [R0]
    STR R7, [R1]
loc_19906:
    MOV R0, R6
    POP {R4-R7,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-not-present",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shifts-present",
  "bitwise-OR-operations-present",
  "memory-access-to-input-parameter",
  "memory-write-to-output-parameter",
  "fixed-value-comparison:3",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:loop-with-counter"
]
```<|im_end|>
############
```assembly
loc_1B79C:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB SP, SP, #0x34
    MOVT.W R3, #5
    STR R3, [SP,#0x58+var_54]
    LDR R3, [R3]
    STR R3, [SP,#0x58+var_2C]
    LSLS R3, R2, #0x1C
    BNE.W loc_1B934
loc_1B7B6:
    ADD.W R11, R0, #0x3C8
    MOV R10, R2
    MOV R9, R0
    MOV R4, R1
    ADD.W R8, SP, #0x58+var_4C
    LDR.W R0, [R11]
    LDR.W R1, [R11,#4]
    CMP.W R10, #0
    LDR.W R2, [R11,#8]
    MOV R5, R8
    LDR.W R3, [R11,#0xC]
    STM R5!, {R0-R3}
    BLE.W loc_1B910
loc_1B7E0:
    LDR R5, [SP,#0x58+var_40]
    ADD.W R10, R10, #0xFFFFFFFF
    ADDS R4, #0x10
    ADD R6, SP, #0x58+var_3C
    ADDS R3, R5, #2
    ADDS R5, #1
    ADD.W R10, R3, R10,LSR#4
loc_1B7F2:
    LDM.W R8, {R0-R3}
    LDR.W R7, [R9,#0x3C0]
    STM.W R6, {R0-R3}
    MOV R1, R6
    MOV R0, R9
    BLX R7
    LDRB.W LR, [R4,#-0xB]
    LDRB.W R12, [R4,#-0xC]
    LDRB.W R7, [R4,#-0xF]
    LDRB.W R3, [R4,#-7]
    MOV.W LR, LR,LSL#16
    LDRB.W R1, [R4,#-0x10]
    ORR.W LR, LR, R12,LSL#24
    LDRB.W R0, [R4,#-8]
    LSLS R7, R7, #0x10
    LDRB.W R2, [R4,#-3]
    LSLS R3, R3, #0x10
    LDRB.W R12, [R4,#-4]
    ORR.W R1, R7, R1,LSL#24
    LDRB.W R7, [R4,#-0xD]
    ORR.W R3, R3, R0,LSL#24
    LSLS R2, R2, #0x10
    LDRB.W R0, [R4,#-0xE]
    ORRS R7, R1
    ORR.W R2, R2, R12,LSL#24
    LDRB.W R1, [R4,#-0xA]
    LDRB.W R12, [R4,#-9]
    ORR.W R0, R7, R0,LSL#8
    LDR R7, [SP,#0x58+var_3C]
    ORR.W LR, LR, R12
    LDRB.W R12, [R4,#-5]
    ORR.W LR, LR, R1,LSL#8
    LDRB.W R1, [R4,#-1]
    EORS R7, R0
    LDRB.W R0, [R4,#-2]
    ORR.W R3, R3, R12
    ORRS R2, R1
    LDRB.W R12, [R4,#-6]
    LDR R1, [SP,#0x58+var_38]
    ORR.W R2, R2, R0,LSL#8
    LDR R0, [SP,#0x58+var_34]
    EOR.W LR, LR, R1
    LDR R1, [SP,#0x58+var_30]
    ORR.W R3, R3, R12,LSL#8
    STRB.W R7, [R4,#-0xD]
    EORS R3, R0
    EORS R2, R1
    LSRS R0, R7, #0x10
    MOV.W R12, R7,LSR#24
    STRB.W R0, [R4,#-0xF]
    MOV.W R1, LR,LSR#16
    MOV.W R0, LR,LSR#24
    STRB.W R1, [R4,#-0xB]
    STRB.W R0, [R4,#-0xC]
    MOV.W R1, LR,LSR#8
    LSRS R0, R3, #0x18
    STRB.W R3, [R4,#-5]
    STRB.W R1, [R4,#-0xA]
    LSRS R7, R7, #8
    LSRS R1, R3, #0x10
    STRB.W R0, [R4,#-8]
    LSRS R3, R3, #8
    STRB.W R1, [R4,#-7]
    STRB.W R3, [R4,#-6]
    LSRS R0, R2, #0x18
    STRB.W R12, [R4,#-0x10]
    LSRS R1, R2, #0x10
    STRB.W LR, [R4,#-9]
    LSRS R3, R2, #8
    STRB.W R7, [R4,#-0xE]
    STRB.W R0, [R4,#-4]
    STRB.W R2, [R4,#-1]
    STR R5, [SP,#0x58+var_40]
    STRB.W R1, [R4,#-3]
    STRB.W R3, [R4,#-2]
    CBNZ R5, loc_1B906
loc_1B8F0:
    LDR R3, [SP,#0x58+var_44]
    ADDS R3, #1
    STR R3, [SP,#0x58+var_44]
    CBNZ R3, loc_1B906
loc_1B8F8:
    LDR R3, [SP,#0x58+var_48]
    ADDS R3, #1
    STR R3, [SP,#0x58+var_48]
    CBNZ R3, loc_1B906
loc_1B900:
    LDR R3, [SP,#0x58+var_4C]
    ADDS R3, #1
    STR R3, [SP,#0x58+var_4C]
loc_1B906:
    ADDS R5, #1
    ADDS R4, #0x10
    CMP R10, R5
    BNE.W loc_1B7F2
loc_1B910:
    LDM.W R8!, {R0-R3}
    LDR R4, [SP,#0x58+var_2C]
    STR.W R0, [R9,#0x3C8]
    LDR R0, [SP,#0x58+var_54]
    STR.W R1, [R11,#4]
    STR.W R2, [R11,#8]
    LDR R0, [R0]
    STR.W R3, [R11,#0xC]
    CMP R4, R0
    BNE loc_1B94E
loc_1B92E:
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
loc_1B934:
    MOVW R1, #0xD380
    MOVW R0, #0xD38C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aAesSdctr
    MOVW R2, #0x437
    BLX __assert_fail
loc_1B94E:
    BLX __stack_chk_fail
```
Output:Z R3, loc_1B8C2
    ADD.W R0, SP, #0x58+var_58
    ADD.W R0, R0, #0x20
    LDR.W R1, [R0]
    LDR.W R2, [R0,#4]
    LDR.W R3, [R0,#8]
    LDR.W R4, [R0,#0xC]
    LDR.W R5, [R0,#0x10]
    LDR.W R6, [R0,#0x14]
    LDR.W R7, [R0,#0x18]
    LDR.W R8, [R0,#0x1C]
    LDR.W R9, [R0,#0x20]
    LDR.W R10, [R0,#0x24]
    LDR.W R11, [R0,#0x28]
    LDR.W LR, [R0,#0x2C]
    LDR.W R0, [R0,#0x30]
    LDR.W R1, [R0,#0x34]
    LDR.W R2, [R0,#0x38]
    LDR.W R3, [R0,#0x3C]
    LDR.W R4, [R0,#0x40]
    LDR.W R5, [R0,#0x44]
    LDR.W R6, [R0,#0x48]
    LDR.W R7, [R0,#0x4C]
    LDR.W R8, [R0,#0x50]
    LDR.W R9, [R0,#0x54]
    LDR.W R10, [R0,#0x58]
    LDR.W R11, [R0,#0x5C]
    LDR.W LR, [R0,#0x60]
    LDR.W R0, [R0,#0x64]
    LDR.W R1, [R0,#0x68]
    LDR.W R2, [R0,#0x6C]
    LDR.W R3, [R0,#0x70]
    LDR.W R4, [R0,#0x74]
    LDR.W R5, [R0,#0x78]
    LDR.W R6, [R0,#0x7C]
    LDR.W R7, [R0,#0x80]
    LDR.W R8, [R0,#0x84]
    LDR.W R9, [R0,#0x88]
    LDR.W R10, [R0,#0x8C]
    LDR.W R11, [R0,#0x90]
    LDR.W LR, [R0,#0x94]
    LDR.W R0, [R0,#0x98]
    LDR.W R1, [R0,#0x9C]
    LDR.W R2, [R0,#0xA0]
    LDR.W R3, [R0,#0xA4]
    LDR.W R4, [R0,#0xA8]
    LDR.W R5, [R0,#0xAC]
    LDR.W R6, [R0,#0xB0]
    LDR.W R7, [R0,#0xB4]
    LDR.W R8, [R0,#0xB8]
    LDR.W R9, [R0,#0xBC]
    LDR.W R10, [R0,#0xC0]
    LDR.W R11, [R0,#0xC4]
    LDR.W LR, [R0,#0xC8]
    LDR.W R0, [R0,#0xCC]
    LDR.W R1, [R0,#0xD0]
    LDR.W R2, [R0,#0xD4]
    LDR.W R3, [R0,#0xD8]
    LDR.W R4, [R0,#0xDC]
    LDR.W R5, [R0,#0xE0]
    LDR.W R6, [R0,#0xE4]
    LDR.W R7, [R0,#0xE8]
    LDR.W R8, [R0,#0xEC]
    LDR.W R9, [R0,#0xF0]
    LDR.W R10, [R0,#0xF4]
    LDR.W R11, [R0,#0xF8]
    LDR.W LR
############
```assembly
loc_112D0:
    ADR R12, 0x112D8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fwrite_ptr - 0x552D8)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "arg3-type:integer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fwrite)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112D8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fwrite_ptr",
  "address-or-offset-constant:-0x552D8",
  "inferred-algorithm:file-writing",
  "inferred-algorithm:dynamic-function-pointer-resolution"
]
```<|im_end|>
############
```assembly
loc_28EA4:
    MOV R1, R0
    MOVS R2, #0x5C
    PUSH {R3,LR}
    ADDS R0, #0xB8
    BLX memcpy
    POP {R3,PC}
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0xB8",
  "fixed-value-assignment:0x5C",
  "byte-level-operation:copy",
  "inferred-algorithm:data-copy-or-transfer"
]
```<|im_end|>
############
```assembly
loc_2A674:
    PUSH {R4-R6,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0x50
    MOV R6, R1
    MOVS R2, #0
    LDR R3, [R5]
    MOV R1, #0x432EC
    STR R3, [SP,#0x60+var_14]
    BL sub_3694C
    MOV R4, R0
    CBZ R0, loc_2A6CA
loc_2A698:
    MOV R2, R0
    MOVS R1, #0x40
    ADD R0, SP, #0x60+s
    BLX fgets
    CBZ R0, loc_2A6B6
loc_2A6A4:
    ADD R0, SP, #0x60+s
    MOV R1, #aSshPrivateKeyF
    BLX strcmp
    MOV R2, R0
    CBZ R0, loc_2A6CC
loc_2A6B6:
    MOV R0, R4
    BLX fclose
    MOVS R0, #0
loc_2A6BE:
    LDR R2, [SP,#0x60+var_14]
    LDR R3, [R5]
    CMP R2, R3
    BNE loc_2A6DE
loc_2A6C6:
    ADD SP, SP, #0x50
    POP {R4-R6,PC}
loc_2A6CA:
    B loc_2A6BE
loc_2A6CC:
    ADD R1, SP, #0x60+var_58
    STR R0, [SP,#0x60+var_60]
    STR R1, [SP,#0x60+var_5C]
    MOV R3, R6
    MOV R0, R4
    MOV R1, R2
    BL sub_2A188
    B loc_2A6BE
loc_2A6DE:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x50",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "conditional-branching-on-memory-content",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (fgets)",
  "external-call-type:unspecified-helper (strcmp)",
  "external-call-type:unspecified-helper (fclose)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "external-call-type:unspecified-helper (sub_3694C)",
  "external-call-type:unspecified-helper (sub_2A188)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x432EC",
  "fixed-value-assignment:0x40",
  "fixed-value-assignment:aSshPrivateKeyF",
  "address-or-offset-constant:sub_3694C",
  "address-or-offset-constant:fgets",
  "address-or-offset-constant:strcmp",
  "address-or-offset-constant:fclose",
  "address-or-offset-constant:__stack_chk_fail",
  "address-or-offset-constant:sub_2A188",
  "inferred-algorithm:file-handling",
  "inferred-algorithm:string-comparison",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:data-validation",
  "inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_1F1CC:
    LDR R3, [R0]
    LSLS R3, R3, #5
    SUBS R3, #1
    BMI loc_1F1FC
loc_1F1D4:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_1F1EA
loc_1F1E0:
    B loc_1F1FC
loc_1F1E2:
    LDR.W R2, [R0,R2,LSL#2]
    LSRS R2, R1
    BNE loc_1F1FC
loc_1F1EA:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R1, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_1F1E2
loc_1F1FC:
    ADD.W R0, R3, #0x10
    ADDS R3, #9
    IT 
    MOVMI R3, R0
    ASRS R0, R3, #3
    ADDS R0, #4
    BX LR
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "bitwise-shift-operations-present",
  "bitwise-and-operation-present",
  "bitwise-or-operation-present",
  "loop-counter-pattern:decrementing",
  "conditional-branching-present",
  "unconditional-jumps-present",
  "integer-size-hint:32-bit",
  "memory-access-to-pointer-offset",
  "memory-write-to-register",
  "magic-number:0x10",
  "magic-number:0x1F",
  "magic-number:0x4",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:complex-loop-with-conditionals",
  "inferred-algorithm:register-based-mathematics"
]
```<|im_end|>
############
```assembly
loc_2FE18:
    PUSH.W {R4-R9,LR}
    MOVW R8, #0x6190
    LDR R3, [R0,#0x60]
    MOVT.W R8, #5
    LDR R6, [R0,#0x68]
    SUB SP, SP, #0x4C
    CMP R3, #0x37
    LDR.W R2, [R8]
    ITE 
    RSBGT.W R9, R3, #0x78
    RSBLE.W R9, R3, #0x38
    LDR R7, [R0,#0x64]
    MOV R4, R0
    MOV R5, R1
    MOV.W LR, R6,LSR#29
    STR R2, [SP,#0x68+var_24]
    MOVS R3, #0x40
    MOV R2, R9
    MOVS R1, #0
    ADD R0, SP, #0x68+var_64
    ORR.W R7, LR, R7,LSL#3
    LSLS R6, R6, #3
    BLX __memset_chk
    MOV R2, R9
    ADD R1, SP, #0x68+var_64
    MOV R0, R4
    MOVS R3, #0x80
    STRB.W R3, [SP,#0x68+var_64]
    BL sub_2FA48
    MOVS R2, #8
    ADD R1, SP, #0x68+var_64
    MOV R0, R4
    MOV.W LR, R7,LSR#24
    LSRS R3, R7, #0x10
    STRB.W R7, [SP,#0x68+var_61]
    STRB.W R6, [SP,#0x68+var_5D]
    LSRS R7, R2
    STRB.W LR, [SP,#0x68+var_64]
    MOV.W LR, R6,LSR#24
    STRB.W R3, [SP,#0x68+var_63]
    LSRS R3, R6, #0x10
    STRB.W LR, [SP,#0x68+var_60]
    LSRS R6, R2
    STRB.W R3, [SP,#0x68+var_5F]
    STRB.W R7, [SP,#0x68+var_62]
    STRB.W R6, [SP,#0x68+var_5E]
    BL sub_2FA48
    LDRB R3, [R4,#3]
    MOVS R1, #0x6C
    MOV R0, R4
    STRB R3, [R5]
    LDRH R3, [R4,#2]
    STRB R3, [R5,#1]
    LDR R3, [R4]
    LSRS R3, R3, #8
    STRB R3, [R5,#2]
    LDR R3, [R4]
    STRB R3, [R5,#3]
    LDRB R3, [R4,#7]
    STRB R3, [R5,#4]
    LDRH R3, [R4,#6]
    STRB R3, [R5,#5]
    LDR R3, [R4,#4]
    LSRS R3, R3, #8
    STRB R3, [R5,#6]
    LDR R3, [R4,#4]
    STRB R3, [R5,#7]
    LDRB R3, [R4,#0xB]
    STRB R3, [R5,#8]
    LDRH R3, [R4,#0xA]
    STRB R3, [R5,#9]
    LDR R3, [R4,#8]
    LSRS R3, R3, #8
    STRB R3, [R5,#0xA]
    LDR R3, [R4,#8]
    STRB R3, [R5,#0xB]
    LDRB R3, [R4,#0xF]
    STRB R3, [R5,#0xC]
    LDRH R3, [R4,#0xE]
    STRB R3, [R5,#0xD]
    LDR R3, [R4,#0xC]
    LSRS R3, R3, #8
    STRB R3, [R5,#0xE]
    LDR R3, [R4,#0xC]
    STRB R3, [R5,#0xF]
    LDRB R3, [R4,#0x13]
    STRB R3, [R5,#0x10]
    LDRH R3, [R4,#0x12]
    STRB R3, [R5,#0x11]
    LDR R3, [R4,#0x10]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x12]
    LDR R3, [R4,#0x10]
    STRB R3, [R5,#0x13]
    LDRB R3, [R4,#0x17]
    STRB R3, [R5,#0x14]
    LDRH R3, [R4,#0x16]
    STRB R3, [R5,#0x15]
    LDR R3, [R4,#0x14]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x16]
    LDR R3, [R4,#0x14]
    STRB R3, [R5,#0x17]
    LDRB R3, [R4,#0x1B]
    STRB R3, [R5,#0x18]
    LDRH R3, [R4,#0x1A]
    STRB R3, [R5,#0x19]
    LDR R3, [R4,#0x18]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x1A]
    LDR R3, [R4,#0x18]
    STRB R3, [R5,#0x1B]
    LDRB R3, [R4,#0x1F]
    STRB R3, [R5,#0x1C]
    LDRH R3, [R4,#0x1E]
    STRB R3, [R5,#0x1D]
    LDR R3, [R4,#0x1C]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x1E]
    LDR R3, [R4,#0x1C]
    STRB R3, [R5,#0x1F]
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R2, [SP,#0x68+var_24]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE loc_2FF50
loc_2FF4A:
    ADD SP, SP, #0x4C
    POP.W {R4-R9,PC}
loc_2FF50:
    BLX __stack_chk_fail
```
Output:1C]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x1E]
    LDR R3, [R4,#0x1C]
    STRB R3, [R5,#0x1F]
    LDRB R3, [R4,#0x23]
    STRB R3, [R5,#0x20]
    LDRH R3, [R4,#0x22]
    STRB R3, [R5,#0x21]
    LDR R3, [R4,#0x20]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x22]
    LDR R3, [R4,#0x20]
    STRB R3, [R5,#0x23]
    LDRB R3, [R4,#0x27]
    STRB R3, [R5,#0x24]
    LDRH R3, [R4,#0x26]
    STRB R3, [R5,#0x25]
    LDR R3, [R4,#0x24]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x26]
    LDR R3, [R4,#0x24]
    STRB R3, [R5,#0x27]
    LDRB R3, [R4,#0x2C]
    STRB R3, [R5,#0x28]
    LDRH R3, [R4,#0x2B]
    STRB R3, [R5,#0x29]
    LDR R3, [R4,#0x28]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x2A]
    LDR R3, [R4,#0x28]
    STRB R3, [R5,#0x2B]
    LDRB R3, [R4,#0x31]
    STRB R3, [R5,#0x2C]
    LDRH R3, [R4,#0x30]
    STRB R3, [R5,#0x2D]
    LDR R3, [R4,#0x2C]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x2E]
    LDR R3, [R4,#0x2C]
    STRB R3, [R5,#0x2F]
    LDRB R3, [R4,#0x36]
    STRB R3, [R5,#0x30]
    LDRH R3, [R4,#0x35]
    STRB R3, [R5,#0x31]
    LDR R3, [R4,#0x33]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x32]
    LDR R3, [R4,#0x33]
    STRB R3, [R5,#0x33]
    LDRB R3, [R4,#0x3B]
    STRB R3, [R5,#0x34]
    LDRH R3, [R4,#0x3A]
    STRB R3, [R5,#0x35]
    LDR R3, [R4,#0x38]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x36]
    LDR R3, [R4,#0x38]
    STRB R3, [R5,#0x37]
    LDRB R3, [R4,#0x3F]
    STRB R3, [R5,#0x38]
    LDRH R3, [R4,#0x3E]
    STRB R3, [R5,#0x39]
    LDR R3, [R4,#0x3C]
    LSRS R3, R3, #8
    STRB R3, [R5,#0x3A]
    LDR R3, [R4,#0x3C]
    STRB R3, [R5,#0x3B]
    LDRB R3, [R4,#0x43]
    STRB R3, [R5,#
############
```assembly
loc_1B38C:
    LDRB R2, [R1]
    PUSH {R4,R5}
    LDRB R5, [R1,#1]
    LSLS R2, R2, #0x18
    LDRB R4, [R1,#2]
    LDRB R3, [R1,#3]
    ORR.W R2, R2, R5,LSL#16
    ORRS R3, R2
    ORR.W R3, R3, R4,LSL#8
    STR.W R3, [R0,#0x3C8]
    LDRB R5, [R1,#4]
    LDRB R4, [R1,#5]
    LDRB R3, [R1,#7]
    LDRB R2, [R1,#6]
    ORR.W R3, R3, R5,LSL#24
    ORR.W R3, R3, R4,LSL#16
    ORR.W R3, R3, R2,LSL#8
    STR.W R3, [R0,#0x3CC]
    LDRB R5, [R1,#8]
    LDRB R4, [R1,#9]
    LDRB R3, [R1,#0xB]
    LDRB R2, [R1,#0xA]
    ORR.W R3, R3, R5,LSL#24
    ORR.W R3, R3, R4,LSL#16
    ORR.W R3, R3, R2,LSL#8
    STR.W R3, [R0,#0x3D0]
    LDRB R5, [R1,#0xC]
    LDRB R4, [R1,#0xD]
    LDRB R3, [R1,#0xF]
    LDRB R2, [R1,#0xE]
    ORR.W R3, R3, R5,LSL#24
    ORR.W R3, R3, R4,LSL#16
    ORR.W R3, R3, R2,LSL#8
    STR.W R3, [R0,#0x3D4]
    POP {R4,R5}
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "byte-level-operations",
  "bitwise-OR-operation",
  "bitwise-LSL-operation",
  "data-packing-pattern",
  "direct-memory-access",
  "fixed-value-assignment:0x3C8",
  "fixed-value-assignment:0x3CC",
  "fixed-value-assignment:0x3D0",
  "fixed-value-assignment:0x3D4",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:byte-order-conversion"
]
```<|im_end|>
############
```assembly
loc_56994:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2D134:
    PUSH {R4,LR}
    MOV R4, #dword_562CC
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    CBZ R1, loc_2D14C
loc_2D144:
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    POP {R4,PC}
loc_2D14C:
    MOV.W R2, #0x510
    MOV R0, R4
    BLX memset
    MOV R0, #0x2CCE9
    BL sub_36BA8
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R3, loc_2D19A
loc_2D168:
    MOVW R2, #0x62CC
    MOVW R1, #0xCF8D
    MOVT.W R2, #5
    MOVT.W R1, #2
    MOV R0, #0x493E0
    BL sub_19A7C
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    MOV R3, #0x56840
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    STR R0, [R3]
    POP {R4,PC}
loc_2D19A:
    BL sub_2CBB0
    B loc_2D168
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-variable",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:unspecified-helper (sub_36BA8)",
  "external-call-type:unspecified-helper (sub_19A7C)",
  "external-call-type:unspecified-helper (sub_2CBB0)",
  "integer-size-hint:32-bit",
  "bitwise-operation-shift-left",
  "bitwise-operation-shift-right",
  "bitwise-operation-or",
  "bitwise-operation-and-clear",
  "bitwise-operation-xor",
  "bitwise-mask-value:0x510",
  "bitwise-mask-value:0x62CC",
  "bitwise-mask-value:0xCF8D",
  "bitwise-mask-value:0x493E0",
  "bitwise-mask-value:0x56840",
  "magic-number:0x562CC",
  "magic-number:0x567DC",
  "magic-number:0x567D8",
  "magic-number:0x56840",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "memory-write-to-global-variable",
  "memory-read-from-global-variable",
  "memory-write-to-memory-address",
  "memory-read-from-memory-address",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:variable-update-in-loop",
  "inferred-algorithm:global-state-modification",
  "inferred-algorithm:memory-packing-or-unpacking",
  "inferred-algorithm:data-encryption-or-decryption",
  "inferred-algorithm:error-or-alternative-path"
]
```<|im_end|>
############
```assembly
loc_12DBC:
    PUSH {R3-R5,LR}
    MOV R5, R0
    MOV R4, R1
    BLX rename
    CBNZ R0, loc_12DCC
loc_12DC8:
    MOVS R0, #1
    POP {R3-R5,PC}
loc_12DCC:
    MOV R0, R4
    BLX remove
    MOV R1, R4
    MOV R0, R5
    BLX rename
    CMP R0, #0
    BEQ loc_12DC8
loc_12DDE:
    MOV R0, #aPuttygenCannot
    BLX perror
    MOVS R0, #0
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:string",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (rename)",
  "external-call-type:unspecified-helper (remove)",
  "external-call-type:unspecified-helper (perror)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0",
  "string-literal:aPuttygenCannot",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:file-or-resource-management",
  "inferred-algorithm:loop-with-condition-check"
]
```<|im_end|>
############
```assembly
loc_1E688:
    PUSH {R3-R5,LR}
    MOV R4, R0
    LDR R0, [R0]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    CBZ R0, loc_1E6AA
loc_1E698:
    LDR R2, [R4]
    MOV R5, R0
    MOV R1, R4
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    MOV R0, R5
    POP {R3-R5,PC}
loc_1E6AA:
    BLX abort
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:memory-copy (memcpy)",
  "external-call-type:error-or-alternative-path (abort)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shift-left",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-pointer",
  "memory-write-to-pointer",
  "inferred-algorithm:data-copy-or-transfer",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:conditional-execution-or-dispatch"
]
```<|im_end|>
############
```assembly
loc_27F90:
    LDR R3, [R2]
    CMP R3, #3
    BGT loc_27F9A
loc_27F96:
    MOVS R0, #0
    BX LR
loc_27F9A:
    PUSH.W {R4-R10,LR}
    MOV R5, R2
    LDR R2, [R1]
    MOV R8, R1
    LDR R4, [R0,#0x38]
    MOV R9, R0
    LDRB R3, [R2,#1]
    LDRB R6, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R6,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    CMP R0, #0
    BLT loc_28034
loc_27FC4:
    LDR R3, [R5]
    LDR.W R2, [R8]
    SUBS R3, #4
    STR R3, [R5]
    CMP R0, R3
    ADD.W R2, R2, #4
    IT 
    STRGT.W R2, [R8]
    BGT loc_28034
loc_27FDC:
    SUBS R3, R3, R0
    ADD R0, R2
    STR.W R0, [R8]
    STR R3, [R5]
    CBZ R2, loc_28034
loc_27FE8:
    LDR R3, [R4]
    BLX R3
    LDR R6, [R0]
    MOV R7, R0
    CMP R6, #0
    BNE.W loc_281D6
loc_27FF6:
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    STRB R6, [R0,#0x14]
    MOV R4, R0
    LDR R3, [R5]
    ADD.W R10, R0, #4
    STR.W R9, [R0]
    CMP R3, #3
    STR R7, [R0,#4]
    STR R6, [R0,#8]
    STR R6, [R0,#0xC]
    STR R6, [R0,#0x10]
    BGT loc_2803A
loc_28018:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_28020
loc_2801C:
    BL sub_1E6B0
loc_28020:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_28028
loc_28024:
    BL sub_1E6B0
loc_28028:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R4-R10,PC}
loc_28034:
    MOVS R0, #0
    POP.W {R4-R10,PC}
loc_2803A:
    LDR.W R2, [R8]
    LDRB R3, [R2,#1]
    LDRB R6, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R6,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_280B2
loc_2805A:
    LDR R2, [R5]
    LDR.W R3, [R8]
    SUBS R2, #4
    STR R2, [R5]
    CMP R1, R2
    ADD.W R0, R3, #4
    IT 
    STRGT.W R0, [R8]
    BGT loc_280B2
loc_28072:
    SUBS R2, R2, R1
    ADDS R3, R0, R1
    STR.W R3, [R8]
    STR R2, [R5]
    CBZ R0, loc_280B2
loc_2807E:
    MOV R2, R10
    BL sub_25510
    CBZ R0, loc_280B2
loc_28086:
    LDR R0, [R4,#8]
    MOVS R3, #0
    STR R3, [R4,#0x18]
    CBZ R0, loc_280BA
loc_2808E:
    LDR R3, [R4,#0xC]
    CBZ R3, loc_280B6
loc_28092:
    LDR R1, [R7,#0x10]
    BL sub_1F358
    CMP R0, #0
    BGE loc_280B2
loc_2809C:
    LDR R1, [R7,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1F358
    CMP R0, #0
    BGE loc_280B2
loc_280A8:
    LDR R3, [R5]
    CMP R3, #3
    BGT loc_280C6
loc_280AE:
    MOVS R3, #0
    STR R3, [R4,#0x18]
loc_280B2:
    LDR R0, [R4,#8]
    CBZ R0, loc_280BA
loc_280B6:
    BL sub_1E6B0
loc_280BA:
    LDR R0, [R4,#0xC]
    CMP R0, #0
    BEQ loc_28018
loc_280C0:
    BL sub_1E6B0
    B loc_28018
loc_280C6:
    LDR.W R2, [R8]
    LDRB R3, [R2,#1]
    LDRB R6, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R6,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_280AE
loc_280E6:
    LDR R3, [R5]
    LDR.W R2, [R8]
    SUBS R3, #4
    STR R3, [R5]
    CMP R1, R3
    ADD.W R0, R2, #4
    IT 
    STRGT.W R0, [R8]
    BGT loc_280AE
loc_280FE:
    SUBS R3, R3, R1
    ADDS R6, R0, R1
    STR.W R6, [R8]
    STR R3, [R5]
    CMP R0, #0
    BEQ loc_280AE
loc_2810C:
    LDRSB.W R3, [R2,#4]
    CMP R3, #0
    BLT loc_280AE
loc_28114:
    BL sub_1EDA8
    STR R0, [R4,#0x18]
    CMP R0, #0
    BEQ loc_280B2
loc_2811E:
    LDR R2, [R4,#4]
    LDR R3, [R2]
    CMP R3, #0
    BEQ loc_281C8
loc_28126:
    CMP R3, #2
    BNE loc_280B2
loc_2812A:
    MOV R1, R2
    BL sub_27AEC
    MOV R5, R0
loc_28132:
    CMP R5, #0
    BEQ loc_280B2
loc_28136:
    LDR R1, [R5,#4]
    LDR R0, [R4,#8]
    BL sub_1F358
    CBNZ R0, loc_28176
loc_28140:
    LDR R1, [R5,#8]
    LDR R0, [R4,#0xC]
    BL sub_1F358
    CBNZ R0, loc_28176
loc_2814A:
    LDR R3, [R5,#4]
    STR R0, [R5]
    CBZ R3, loc_28156
loc_28150:
    MOV R0, R3
    BL sub_1E6B0
loc_28156:
    LDR R0, [R5,#8]
    CBZ R0, loc_2815E
loc_2815A:
    BL sub_1E6B0
loc_2815E:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_28166
loc_28162:
    BL sub_1E6B0
loc_28166:
    MOVS R3, #0
    MOV R0, R5
    STRB R3, [R5,#0x10]
    BL sub_19494
    MOV R0, R4
    POP.W {R4-R10,PC}
loc_28176:
    LDR R0, [R4,#8]
    CBZ R0, loc_2817E
loc_2817A:
    BL sub_1E6B0
loc_2817E:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_28186
loc_28182:
    BL sub_1E6B0
loc_28186:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2818E
loc_2818A:
    BL sub_1E6B0
loc_2818E:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_28196
loc_28192:
    BL sub_1E6B0
loc_28196:
    MOV R0, R4
    BL sub_19494
    LDR R0, [R5,#4]
    MOVS R3, #0
    STR R3, [R5]
    CBZ R0, loc_281A8
loc_281A4:
    BL sub_1E6B0
loc_281A8:
    LDR R0, [R5,#8]
    CBZ R0, loc_281B0
loc_281AC:
    BL sub_1E6B0
loc_281B0:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_281B8
loc_281B4:
    BL sub_1E6B0
loc_281B8:
    MOVS R4, #0
    MOV R0, R5
    STRB R4, [R5,#0x10]
    BL sub_19494
    MOV R0, R4
    POP.W {R4-R10,PC}
loc_281C8:
    MOV R1, R0
    ADD.W R0, R2, #0x20
    BL sub_264F8
    MOV R5, R0
    B loc_28132
loc_281D6:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD98
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaOpensshCr
    MOVW R2, #0x854
    BLX __assert_fail
```
Output:DR W0, [R4,#0x18]
    BLX R0
    MOVS R0, #0
    POP.W {R4-R10,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_568C4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_24534:
    PUSH.W {R3-R11,LR}
    LDR R3, [R0,#0x18]
    CMP R3, #0
    BEQ loc_245DE
loc_2453E:
    LDR R2, [R0,#4]
    MOV R5, R0
    MOV R10, R1
    MOV R0, R3
    LDR R2, [R2]
    CMP R2, #2
    BEQ loc_245B0
loc_2454C:
    BL sub_1F158
    ADD.W R6, R0, #0xF
    ADDS R0, #8
    IT 
    MOVMI R0, R6
    ASRS R6, R0, #3
loc_2455C:
    ADD.W R11, R6, #4
    MOVS R1, #1
    MOV R0, R11
    BL sub_193B8
    ASRS R3, R6, #0x10
    ASRS R2, R6, #0x18
    STRB R3, [R0,#1]
    ASRS R3, R6, #8
    STRB R6, [R0,#3]
    MOV R8, R0
    STRB R2, [R0]
    ADD.W R9, R0, #4
    STRB R3, [R0,#2]
    LDR R3, [R5,#4]
    LDR R3, [R3]
    CMP R3, #2
    BEQ loc_245C2
loc_24584:
    SUBS R4, R6, #1
    MOV R7, R9
    CBZ R6, loc_2459E
loc_2458A:
    MOV R1, R4
    LDR R0, [R5,#0x18]
    BL sub_1F20C
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R7],#1
    BNE loc_2458A
loc_2459C:
    ADD R9, R6
loc_2459E:
    ADD.W R3, R8, R11
    CMP R9, R3
    BNE loc_245E4
loc_245A6:
    STR.W R11, [R10]
    MOV R0, R8
    POP.W {R3-R11,PC}
loc_245B0:
    BL sub_1F158
    ADD.W R6, R0, #0xE
    ADDS R0, #7
    IT 
    MOVMI R0, R6
    ASRS R6, R0, #3
    B loc_2455C
loc_245C2:
    CMP R6, #0
    BLE loc_2459E
loc_245C6:
    MOV R7, R9
    MOVS R4, #0
loc_245CA:
    MOV R1, R4
    LDR R0, [R5,#0x18]
    BL sub_1F20C
    ADDS R4, #1
    CMP R6, R4
    STRB.W R0, [R7],#1
    BNE loc_245CA
loc_245DC:
    B loc_2459C
loc_245DE:
    MOV R0, R3
    POP.W {R3-R11,PC}
loc_245E4:
    MOVW R3, #0xF5B0
    MOVW R1, #0xFCBC
    MOVW R0, #0xF568
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOV.W R2, #0x7A0
    MOVT.W R0, #3
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x18",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_1F158)",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (sub_1F20C)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift",
  "byte-level-operations:bitwise-or",
  "byte-level-operations:bitwise-and",
  "byte-level-operations:bitwise-not",
  "byte-level-operations:bitwise-xor",
  "byte-level-operations:load-byte",
  "byte-level-operations:store-byte",
  "byte-level-operations:addition",
  "byte-level-operations:subtraction",
  "byte-level-operations:multiplication",
  "byte-level-operations:division",
  "byte-level-operations:modulus",
  "byte-level-operations:increment",
  "byte-level-operations:decrement",
  "byte-level-operations:logical-not",
  "byte-level-operations:logical-and",
  "byte-level-operations:logical-or",
  "byte-level-operations:logical-xor",
  "byte-level-operations:conditional-move",
  "byte-level-operations:compare",
  "byte-level-operations:test",
  "byte-level-operations:popcount",
  "byte-level-operations:reverse-bits",
  "byte-level-operations:rotate-left",
  "byte-level-operations:rotate-right",
  "byte-level-operations:extract-subfield",
  "byte-level-operations:set-subfield",
  "byte-level-operations:sign-extend",
  "byte-level-operations zero-extend",
  "byte-level-operations:clear-lower-n-bits",
  "byte-level-operations:set-lower-n-bits",
  "byte-level-operations:clear-upper-n-bits",
  "byte-level-operations:set-upper-n-bits",
  "byte-level-operations:swap-endianness",
  "byte-level-operations:encode-base64",
  "byte-level-operations:decode-base64",
  "byte-level-operations:encode-hex",
  "byte-level-operations:decode-hex",
  "byte-level-operations:encode-url-safe",
  "byte-level-operations:decode-url-safe",
  "byte-level-operations:encode-utf-8",
  "byte-level-operations:decode-utf-8",
  "byte-level-operations:encode-ascii",
  "byte-level-operations:decode-ascii",
  "byte-level-operations:encode-binary",
  "byte-level-operations:decode-binary",
  "byte-level-operations:encode-json",
  "byte-level-operations:decode-json",
  "byte-level-operations:encode-xml",
  "byte-level-operations:decode-xml",
  "byte-level-operations:encode-yaml",
  "byte-level-operations:decode-yaml",
  "byte-level-operations:encode-toml",
  "byte-level-operations:decode-toml",
  "byte-level-operations:encode-properties",
  "byte-level-operations:decode-properties",
  "byte-level-operations:encode-config",
  "byte-level-operations:decode-config",
  "byte-level-operations:encode-log",
  "byte-level-operations:decode-log",
  "byte-level-operations:encode-debug",
  "byte-level-operations:decode-debug",
  "byte-level-operations:encode-info",
  "byte-level-operations:decode-info",
  "byte-level-operations:encode-warn",
  "byte-level-operations:decode-warn",
  "byte-level-operations:encode-error",
  "byte-level-operations:decode-error",
  "byte-level-operations:encode-fatal",
  "byte-level-operations:decode-fatal",
  "byte-level-operations:encode-trace",
  "byte-level-operations:decode-trace",
  "byte-level-operations:encode-profile",
  "byte-level-operations:decode-profile",
  "byte-level-operations:encode-metric",
  "byte-level-operations:decode-metric",
  "byte-level-
############
```assembly
loc_2A480:
    CMP R2, #3
    PUSH.W {R4-R9,LR}
    MOV R8, R0
    SUB SP, SP, #0xC
    MOV R7, R1
    MOV R6, R2
    BLE loc_2A4B2
loc_2A490:
    LDRB R3, [R1,#1]
    LDRB R1, [R1]
    LDRB R5, [R7,#3]
    LSLS R3, R3, #0x10
    LDRB R2, [R7,#2]
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R5
    ORR.W R5, R3, R2,LSL#8
    CMP R5, #0
    BLE loc_2A4B2
loc_2A4A8:
    SUBS R3, R6, #4
    CMP R5, R3
    BGE loc_2A54E
loc_2A4AE:
    ADDS R4, R7, #4
    BNE loc_2A4BC
loc_2A4B2:
    MOV R4, #0x432D0
    MOVS R5, #0x11
loc_2A4BC:
    ADDS R3, R6, #2
    MOV R0, #0x55555556
    SMULL.W R0, R1, R3, R0
    MOV R0, R8
    SUB.W R3, R1, R3,ASR#31
    ADD.W R9, R5, R3,LSL#2
    CMP.W R8, #0
    BEQ loc_2A4DE
loc_2A4DA:
    BLX strlen
loc_2A4DE:
    ADD.W R9, R9, #3
    MOVS R1, #1
    ADD R0, R9
    BL sub_193B8
    STR R5, [SP,#0x28+var_28]
    STR R4, [SP,#0x28+var_24]
    MOVW R3, #0x32E4
    MOV.W R2, #0xFFFFFFFF
    MOVT.W R3, #4
    MOVS R1, #1
    MOV R9, R0
    BLX __sprintf_chk
    CMP R6, #0
    ADD.W R5, R9, R0
    BLE loc_2A528
loc_2A50A:
    MOVS R4, #0
loc_2A50C:
    SUBS R1, R6, R4
    MOV R2, R5
    CMP R1, #3
    ADD.W R0, R7, R4
    ADD.W R5, R5, #4
    IT 
    MOVGE R1, #3
    ADD R4, R1
    BL sub_18FA4
    CMP R6, R4
    BGT loc_2A50C
loc_2A528:
    LDRB.W R3, [R8]
    CBNZ R3, loc_2A538
loc_2A52E:
    MOV R0, R9
    STRB R3, [R5]
    ADD SP, SP, #0xC
    POP.W {R4-R9,PC}
loc_2A538:
    MOV R0, R5
    MOVS R3, #0x20
    MOV R1, R8
    STRB.W R3, [R0],#1
    BLX strcpy
    MOV R0, R9
    ADD SP, SP, #0xC
    POP.W {R4-R9,PC}
loc_2A54E:
    MOVW R4, #0x32D0
    MOVS R5, #0x11
    MOVT.W R4, #4
    B loc_2A4BC
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "conditional-branching-on-loop-counter",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (__sprintf_chk)",
  "external-call-type:data-processing-helper (strcpy)",
  "external-call-type:data-processing-helper (sub_18FA4)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-or",
  "byte-level-operations:bitwise-not",
  "byte-level-operations:bitwise-xor",
  "byte-level-operations:logical-or",
  "byte-level-operations:logical-and",
  "byte-level-operations:logical-not",
  "byte-level-operations:logical-equal",
  "byte-level-operations:logical-not-equal",
  "byte-level-operations:logical-greater-than-or-equal",
  "byte-level-operations:logical-less-than-or-equal",
  "byte-level-operations:logical-greater-than",
  "byte-level-operations:logical-less-than",
  "byte-level-operations:addition-with-carry",
  "byte-level-operations:subtraction-with-borrow",
  "byte-level-operations:multiplication-with-sign-extension",
  "byte-level-operations:division-with-sign-extension",
  "byte-level-operations:modulus-with-sign-extension",
  "byte-level-operations:binary-complement",
  "byte-level-operations:bitwise-and",
  "byte-level-operations:bitwise-or-clear",
  "byte-level-operations:bitwise-xor",
  "byte-level-operations:bitwise-nand",
  "byte-level-operations:bitwise-nor",
  "byte-level-operations:bitwise-xnor",
  "byte-level-operations:bitwise-select",
  "byte-level-operations:bitwise-invert",
  "byte-level-operations:bitwise-shift-right-arithmetic",
  "byte-level-operations:bitwise-shift-right-logarithmic",
  "byte-level-operations:bitwise-shift-left-logarithmic",
  "byte-level-operations:bitwise-shift-left-arithmetic",
  "byte-level-operations:bitwise-shift-right",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right-arithmetic",
  "byte-level-operations:bitwise-shift-right-logarithmic",
  "byte-level-operations:bitwise-shift-left-logarithmic",
  "byte-level-operations:bitwise-shift-left-arithmetic",
  "byte-level-operations:bitwise-shift-right",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right-arithmetic",
  "byte-level-operations:bitwise-shift-right-logarithmic",
  "byte-level-operations:bitwise-shift-left-logarithmic",
  "byte-level-operations:bitwise-shift-left-arithmetic",
  "byte-level-operations:bitwise-shift-right",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right-arithmetic",
  "byte-level-operations:bitwise-shift-right-logarithmic",
  "byte-level-operations:bitwise-shift-left-logarithmic",
  "byte-level-operations:bitwise-shift-left-arithmetic",
  "byte-level-operations:bitwise-shift-right",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right-arithmetic",
  "byte-level-operations:bitwise-shift-right-logarithmic",
  "byte-level-operations:bitwise-shift-left-logarithmic",
  "byte-level-operations:bitwise-shift-left-arithmetic",
  "byte-level-operations:bitwise-shift-right",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right-arithmetic",
  "byte-level-operations:bitwise-shift-right-logarithmic",
  "byte-level-operations:bitwise-shift-left-logarithmic",
  "byte-level-operations:bitwise-shift-left-arithmetic",
  "byte-level-operations:bitwise-shift-right",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-shift-right-arithmetic",
  "byte-level-operations:bitwise-shift
############
```assembly
loc_2FB90:
    PUSH.W {R4-R11,LR}
    MOV R11, #0x56190
    SUB SP, SP, #0x8C
    MOV R5, R1
    MOV R4, R0
    LDR.W R3, [R11]
    ADD R0, SP, #0xB0+s
    MOVS R2, #0x40
    MOVS R1, #0x36
    STR R3, [SP,#0xB0+var_2C]
    BLX memset
    ANDS.W R8, R5, #3
    BNE.W loc_2FDFC
loc_2FBBA:
    LDR R2, [SP,#0xB0+s]
    LDR R3, [R5]
    LDR R1, [R5,#4]
    EORS R2, R3
    LDR R3, [SP,#0xB0+var_68]
    STR R2, [SP,#0xB0+s]
    EORS R1, R3
    LDR R2, [SP,#0xB0+var_64]
    LDR R3, [R5,#8]
    STR R1, [SP,#0xB0+var_68]
    EORS R2, R3
    LDR R1, [R5,#0xC]
    LDR R3, [SP,#0xB0+var_60]
    STR R2, [SP,#0xB0+var_64]
    EORS R1, R3
    LDR R2, [R5,#0x10]
    LDR R3, [SP,#0xB0+var_5C]
    STR R1, [SP,#0xB0+var_60]
    EORS R2, R3
    LDR R1, [R5,#0x14]
    LDR R3, [SP,#0xB0+var_58]
    STR R2, [SP,#0xB0+var_5C]
    EORS R1, R3
    LDR R2, [R5,#0x18]
    LDR R3, [SP,#0xB0+var_54]
    STR R1, [SP,#0xB0+var_58]
    EORS R2, R3
    LDR R1, [R5,#0x1C]
    LDR R3, [SP,#0xB0+var_50]
    STR R2, [SP,#0xB0+var_54]
    EORS R3, R1
    STR R3, [SP,#0xB0+var_50]
loc_2FBFA:
    ADD.W LR, R4, #0x20
    ADD.W R9, SP, #0xB0+var_2C
    ADD.W R12, SP, #0xB0+s
    MOVW R2, #0xE667
    MOVW R3, #0xAE85
    MOVT.W R2, #0x6A09
    MOVT.W R3, #0xBB67
    STM.W R4, {R2,R3}
    MOVW R2, #0xF372
    MOVW R3, #0xF53A
    MOVT.W R2, #0x3C6E
    MOVT.W R3, #0xA54F
    STR R2, [R4,#8]
    MOVW R2, #0x527F
    STR R3, [R4,#0xC]
    MOVT.W R2, #0x510E
    MOVW R3, #0x688C
    STR R2, [R4,#0x10]
    MOVT.W R3, #0x9B05
    MOVW R2, #0xD9AB
    STR R3, [R4,#0x14]
    MOVT.W R2, #0x1F83
    MOVW R3, #0xCD19
    STR R2, [R4,#0x18]
    MOVT.W R3, #0x5BE0
    MOVS R2, #0x40
    STR R3, [R4,#0x1C]
    MOVS R3, #0
    STR R2, [R4,#0x68]
    STR R3, [R4,#0x60]
    STR R3, [R4,#0x64]
loc_2FC60:
    MOV R6, R12
    ADD.W LR, LR, #0x10
    LDM R6!, {R0-R3}
    ADD.W R12, R12, #0x10
    CMP R6, R9
    STR.W R0, [LR,#-0x10]
    STR.W R1, [LR,#-0xC]
    STR.W R2, [LR,#-8]
    STR.W R3, [LR,#-4]
    BNE loc_2FC60
loc_2FC80:
    LDR R3, [R4,#0x20]
    ADD R1, SP, #0xB0+var_AC
    LDR R7, [R4,#0x30]
    MOV R0, R4
    LDR R6, [R4,#0x24]
    REV R3, R3
    LDR R2, [R4,#0x28]
    REV.W R12, R7
    STR R3, [SP,#0xB0+var_AC]
    REV R6, R6
    LDR R3, [R4,#0x2C]
    REV R2, R2
    LDR R7, [R4,#0x34]
    REV R3, R3
    STR R6, [SP,#0xB0+var_A8]
    STR R2, [SP,#0xB0+var_A4]
    REV.W LR, R7
    LDR R6, [R4,#0x38]
    LDR R2, [R4,#0x3C]
    STR R3, [SP,#0xB0+var_A0]
    REV R6, R6
    LDR R3, [R4,#0x40]
    REV R2, R2
    LDR R7, [R4,#0x44]
    REV R3, R3
    STR R6, [SP,#0xB0+var_94]
    STR R2, [SP,#0xB0+var_90]
    REV.W R9, R7
    LDR R6, [R4,#0x4C]
    LDR R2, [R4,#0x50]
    STR R3, [SP,#0xB0+var_8C]
    LDR R3, [R4,#0x54]
    REV R2, R2
    STR.W LR, [SP,#0xB0+var_98]
    REV.W LR, R6
    LDR R7, [R4,#0x48]
    REV R6, R3
    STR R2, [SP,#0xB0+var_7C]
    LDR R3, [R4,#0x58]
    LDR R2, [R4,#0x5C]
    REV R3, R3
    STR.W R12, [SP,#0xB0+var_9C]
    REV R2, R2
    REV.W R12, R7
    STR R3, [SP,#0xB0+var_74]
    STR R2, [SP,#0xB0+var_70]
    STR.W R9, [SP,#0xB0+var_88]
    STR.W R12, [SP,#0xB0+var_84]
    STR.W LR, [SP,#0xB0+var_80]
    STR R6, [SP,#0xB0+var_78]
    BL sub_2F354
    MOVS R3, #0
    MOVS R2, #0x40
    STR R3, [R4,#0x60]
    MOVS R1, #0x5C
    ADD R0, SP, #0xB0+s
    BLX memset
    CMP.W R8, #0
    BNE loc_2FDE4
loc_2FD10:
    LDR R1, [R5]
    LDR R3, [SP,#0xB0+s]
    LDR R2, [R5,#4]
    LDR R6, [SP,#0xB0+var_68]
    EOR.W LR, R1, R3
    LDR R0, [R5,#0xC]
    LDR R1, [R5,#8]
    EORS R6, R2
    LDR R3, [SP,#0xB0+var_64]
    LDR R2, [SP,#0xB0+var_60]
    EOR.W R12, R1, R3
    LDR R3, [R5,#0x10]
    EORS R0, R2
    LDR R2, [SP,#0xB0+var_5C]
    LDR R1, [R5,#0x14]
    EORS R2, R3
    LDR.W R10, [R5,#0x18]
    LDR R3, [R5,#0x1C]
    LDR R5, [SP,#0xB0+var_58]
    STR R6, [SP,#0xB0+var_68]
    EORS R1, R5
    LDR R6, [SP,#0xB0+var_50]
    LDR R5, [SP,#0xB0+var_54]
    EORS R3, R6
    STR.W LR, [SP,#0xB0+s]
    EOR.W R5, R10, R5
    STR.W R12, [SP,#0xB0+var_64]
    STR R0, [SP,#0xB0+var_60]
    STR R2, [SP,#0xB0+var_5C]
    STR R1, [SP,#0xB0+var_58]
    STR R5, [SP,#0xB0+var_54]
    STR R3, [SP,#0xB0+var_50]
loc_2FD5C:
    ADD.W R0, R4, #0x6C
    ADD R1, SP, #0xB0+s
    MOVW R3, #0xE667
    MOVW R2, #0xAE85
    MOVT.W R3, #0x6A09
    MOVT.W R2, #0xBB67
    STR R3, [R4,#0x6C]
    MOVW R3, #0xF372
    STR R2, [R4,#0x70]
    MOVT.W R3, #0x3C6E
    MOVW R2, #0xF53A
    STR R3, [R4,#0x74]
    MOVT.W R2, #0xA54F
    MOVW R3, #0x527F
    STR R2, [R4,#0x78]
    MOVT.W R3, #0x510E
    MOVW R2, #0x688C
    STR R3, [R4,#0x7C]
    MOVT.W R2, #0x9B05
    MOVW R3, #0xD9AB
    STR.W R2, [R4,#0x80]
    MOVT.W R3, #0x1F83
    MOVW R2, #0xCD19
    STR.W R3, [R4,#0x84]
    MOVT.W R2, #0x5BE0
    MOVS R3, #0
    STR.W R2, [R4,#0x88]
    MOVS R2, #0x40
    STR.W R3, [R4,#0xCC]
    STR.W R3, [R4,#0xD4]
    STR.W R3, [R4,#0xD0]
    BL sub_2FA48
    ADD R0, SP, #0xB0+s
    MOVS R1, #0x40
    BL sub_194E4
    LDR R2, [SP,#0xB0+var_2C]
    LDR.W R3, [R11]
    CMP R2, R3
    BNE loc_2FE14
loc_2FDDE:
    ADD SP, SP, #0x8C
    POP.W {R4-R11,PC}
loc_2FDE4:
    SUBS R5, #1
    ADD R0, SP, #0xB0+var_4C
    ADD R3, SP, #0xB0+s
loc_2FDEA:
    LDRB R1, [R3]
    LDRB.W R2, [R5,#1]!
    EORS R2, R1
    STRB.W R2, [R3],#1
    CMP R3, R0
    BNE loc_2FDEA
loc_2FDFA:
    B loc_2FD5C
loc_2FDFC:
    SUBS R1, R5, #1
    ADD R6, SP, #0xB0+var_4C
    ADD R3, SP, #0xB0+s
loc_2FE02:
    LDRB R0, [R3]
    LDRB.W R2, [R1,#1]!
    EORS R2, R0
    STRB.W R2, [R3],#1
    CMP R3, R6
    BNE loc_2FE02
loc_2FE12:
    B loc_2FBFA
loc_2FE14:
    BLX __stack_chk_fail
```
Output:,#0x54]
    LDR R7, [R4,#0x58]
    LDR R6, [R4,#0x5C]
    LDR R2, [R4,#0x60]
    STR R3, [SP,#0xB0+var_88]
    STR R6, [SP,#0xB0+var_84]
    STR R2, [SP,#0xB0+var_80]
    LDR R3, [R4,#0x64]
    LDR R7, [R4,#0x68]
    LDR R6, [R4,#0x6C]
    LDR R2, [R4,#0x70]
    LDR R3, [R4,#0x74]
    LDR R7, [R4,#0x78]
    LDR R6, [R4,#0x7C]
    LDR R2, [R4,#0x80]
    STR R3, [SP,#0xB0+var_7C]
    STR R6, [SP,#0xB0+var_78]
    STR R2, [SP,#0xB0+var_74]
    LDR R3, [R4,#0x84]
    LDR R7, [R4,#0x88]
    LDR R6, [R4,#0x8C]
    LDR R2, [R4,#0x90]
    LDR R3, [R4,#0x94]
    LDR R7, [R4,#0x98]
    LDR R6, [R4,#0x9C]
    LDR R2, [R4,#0xA0]
    STR R3, [SP,#0xB0+var_70]
    STR R6, [SP,#0xB0+var_6C]
    STR R2, [SP,#0xB0+var_68]
    LDR R3, [R4,#0xA4]
    LDR R7, [R4,#0xA8]
    LDR R6, [R4,#0xAC]
    LDR R2, [R4,#0xB0]
    LDR R3, [R4,#0xB4]
    LDR R7, [R4,#0xB8]
    LDR R6, [R4,#0xBC]
    LDR R2, [R4,#0xC0]
    STR R3, [SP,#0xB0+var_64]
    STR R6, [SP,#0xB0+var_60]
    STR R2, [SP,#0xB0+var_5C]
    LDR R3, [R4,#0xC4]
    LDR R7, [R4,#0xC8]
    LDR R6, [R4,#0xCC]
    LDR R2, [R4,#0xD0]
    LDR R3, [R4,#0xD4]
    LDR R7, [R4,#0xD8]
    LDR R6, [R4,#0xDC]
    LDR R2, [R4,#0xE0]
    STR R3, [SP,#0xB0+var_58]
    STR R6, [SP,#0xB0+var_54]
    STR R2, [SP,#0xB0+var_50]
    LDR R3, [R4,#0xE4]
    LDR R7, [R4,#0xE8]
    LDR R6, [R4,#0xEC]
    LDR R2, [R4,#0xF0]
    LDR R3, [R4,#0xF4]
    LDR R7, [R4,#0xF8]
    LDR R6, [R4,#0xFC]
    LDR R2, [R4,#0x100]
    STR R3, [SP,#0xB0+var_4C]
    STR R6, [SP,#0xB0+var_48]
    STR R2, [SP,#0xB0+var_44]
    LDR R3, [R4,#0x104]
    LDR R7, [R4,#0x108]
    LDR R6, [R4,#0x10C]
    LDR R2, [R4,#0x110]
    LDR R3, [R4,#0x114]
    LDR R7, [R4,#0x118]

############
```assembly
loc_2870C:
    PUSH {R3-R5,LR}
    MOV R5, R1
    MOV R4, R0
    MOV R2, R0
    ADDS R1, R0, #4
    MOV R0, R5
    BL sub_28610
    CBNZ R0, loc_28722
loc_2871E:
    MOVS R0, #0
    POP {R3-R5,PC}
loc_28722:
    MOV R0, R5
    BL sub_1E6C8
    MOV R5, R0
    CMP R0, #0
    BEQ loc_2871E
loc_2872E:
    MOV R3, #0x56170
    MOV R1, R0
    LDR R0, [R3]
    BL sub_1F410
    STR R0, [R4,#0x18]
    MOV R0, R5
    BL sub_1E6B0
    LDR R0, [R4,#0x18]
    CMP R0, #0
    BEQ loc_2871E
loc_2874C:
    LDR R1, [R4,#4]
    BL sub_281F4
    MOV R5, R0
    CBZ R0, loc_2876A
loc_28756:
    LDR R2, [R0,#4]
    MOVS R1, #0
    LDR R3, [R0,#8]
    STR R1, [R4,#0x10]
    STR R2, [R4,#8]
    STR R3, [R4,#0xC]
    BL sub_19494
    MOVS R0, #1
    POP {R3-R5,PC}
loc_2876A:
    LDR R0, [R4,#0x18]
    BL sub_1E6B0
    STR R5, [R4,#0x18]
    MOV R0, R5
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_28610)",
  "external-call-type:unspecified-helper (sub_1E6C8)",
  "external-call-type:unspecified-helper (sub_1F410)",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "external-call-type:unspecified-helper (sub_281F4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x56170",
  "address-or-offset-constant:sub_28610",
  "address-or-offset-constant:sub_1E6C8",
  "address-or-offset-constant:sub_1F410",
  "address-or-offset-constant:sub_1E6B0",
  "address-or-offset-constant:sub_281F4",
  "address-or-offset-constant:sub_19494",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:conditional-data-retrieval-or-processing",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:array-access-or-pointer-arithmetic"
]
```<|im_end|>
############
```assembly
loc_56950:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_22830:
    B.W sub_19494
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_19494)"
]
```<|im_end|>
############
```assembly
loc_3666C:
    PUSH {R3-R5,LR}
    MOVS R1, #4
    LDR R5, [R0]
    MOVS R0, #1
    BL sub_193B8
    MOV R4, R0
    MOV R0, R5
    BL sub_18A88
    STR R0, [R4]
    MOV R0, R4
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:4",
  "fixed-value-assignment:1",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:sub_18A88",
  "inferred-algorithm:data-modification-or-update",
  "inferred-algorithm:object-oriented-method-invocation"
]
```<|im_end|>
############
```assembly
loc_112F8:
    ADR R12, 0x11300
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(gettimeofday_ptr - 0x55300)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "no-stack-frame-management",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (gettimeofday_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11300",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:gettimeofday_ptr",
  "inferred-algorithm:time-related",
  "inferred-algorithm:system-interface-access"
]
```<|im_end|>
############
```assembly
loc_2FA48:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    LDR R4, [R0,#0x68]
    LDR R3, [R0,#0x64]
    MOV R10, R0
    LDR.W R7, [R9]
    SUB SP, SP, #0x4C
    LDR R0, [R0,#0x60]
    ADD R4, R2
    CMP R2, R4
    IT 
    ADDHI R3, #1
    MOV R5, R2
    MOV R6, R1
    STR.W R4, [R10,#0x68]
    STR.W R3, [R10,#0x64]
    STR R7, [SP,#0x70+n]
    CMP R0, #0
    BNE loc_2FB6E
loc_2FA7C:
    CMP R2, #0x3F
    IT 
    ADDLE.W R11, R10, #0x20
    BLE loc_2FB50
loc_2FA86:
    ADD.W R11, R10, #0x20
    MOV.W R8, #0
loc_2FA8E:
    RSB.W R2, R0, #0x40
    MOV R1, R6
    ADD R0, R11
    BLX memcpy
    LDR.W R7, [R10,#0x2C]
    LDR.W R3, [R10,#0x60]
    MOV R0, R10
    REV.W R12, R7
    LDR.W R4, [R10,#0x20]
    LDR.W R7, [R10,#0x38]
    RSB.W LR, R3, #0x40
    LDR.W R2, [R10,#0x24]
    SUB.W R5, R5, LR
    LDR.W R3, [R10,#0x28]
    REV R4, R4
    REV R2, R2
    STR R4, [SP,#0x70+var_6C]
    STR R2, [SP,#0x70+var_68]
    ADD R6, LR
    LDR.W R4, [R10,#0x30]
    REV.W LR, R7
    LDR.W R2, [R10,#0x34]
    REV R3, R3
    LDR.W R7, [R10,#0x40]
    REV R4, R4
    STR R3, [SP,#0x70+var_64]
    REV R2, R2
    LDR.W R3, [R10,#0x3C]
    ADD R1, SP, #0x70+var_6C
    STR.W R12, [SP,#0x70+var_60]
    REV.W R12, R7
    STR R4, [SP,#0x70+var_5C]
    REV R3, R3
    LDR.W R7, [R10,#0x4C]
    LDR.W R4, [R10,#0x44]
    STR R2, [SP,#0x70+var_58]
    LDR.W R2, [R10,#0x48]
    REV R4, R4
    STR.W LR, [SP,#0x70+var_54]
    REV.W LR, R7
    REV R2, R2
    STR R3, [SP,#0x70+var_50]
    STR R4, [SP,#0x70+var_48]
    LDR.W R3, [R10,#0x50]
    LDR.W R4, [R10,#0x58]
    LDR.W R7, [R10,#0x54]
    REV R3, R3
    STR R2, [SP,#0x70+var_44]
    REV R4, R4
    LDR.W R2, [R10,#0x5C]
    STR.W R12, [SP,#0x70+var_4C]
    REV.W R12, R7
    STR.W LR, [SP,#0x70+var_40]
    REV R2, R2
    STR R3, [SP,#0x70+var_3C]
    STR.W R12, [SP,#0x70+var_38]
    STR R4, [SP,#0x70+var_34]
    STR R2, [SP,#0x70+var_30]
    BL sub_2F354
    CMP R5, #0x3F
    STR.W R8, [R10,#0x60]
    MOV.W R0, #0
    BGT loc_2FA8E
loc_2FB50:
    MOV R1, R6
    MOV R0, R11
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R10,#0x60]
loc_2FB5E:
    LDR R2, [SP,#0x70+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_2FB8A
loc_2FB68:
    ADD SP, SP, #0x4C
    POP.W {R4-R11,PC}
loc_2FB6E:
    ADDS R3, R2, R0
    CMP R3, #0x3F
    BGT loc_2FA86
loc_2FB74:
    ADD.W R3, R10, #0x20
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0x60]
    ADD R3, R5
    STR.W R3, [R10,#0x60]
    B loc_2FB5E
loc_2FB8A:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0x60,0x64,0x68",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:0x3F",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x20",
  "fixed-value-assignment:0x40",
  "address-or-offset-constant:__stack_chk_fail",
  "address-or-offset-constant:memcpy",
  "inferred-algorithm:data-mapping-or-transformation",
  "inferred-algorithm:loop-with-condition",
  "inferred-algorithm:buffer-management",
  "inferred-algorithm:synchronization-check"
]
```<|im_end|>
############
```assembly
loc_292F4:
    PUSH.W {R4-R9,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0xB4
    MOV R4, R0
    MOVS R2, #0x5C
    LDR.W R3, [R9]
    MOV R8, R1
    ADD R0, SP, #0xD0+dest
    ADD.W R1, R4, #0xB8
    STR R3, [SP,#0xD0+var_24]
    BLX memcpy
    ADD R1, SP, #0xD0+dest
    ADD R0, SP, #0xD0+src
    BL sub_29130
    ADD.W R1, R4, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xD0+dest
    BLX memcpy
    LDR R3, [SP,#0xD0+var_38]
    LDR R2, [SP,#0xD0+var_40]
    LDR R1, [SP,#0xD0+var_3C]
    ADDS R3, #0x10
    ADD.W R4, R2, #0x10
    STR R3, [SP,#0xD0+var_38]
    CMP R3, #0xF
    ITE 
    MOVHI R3, R1
    ADDLS R3, R1, #1
    CMP R4, #0x3F
    STR R3, [SP,#0xD0+var_3C]
    BLS loc_293E6
loc_29348:
    ADD R4, SP, #0xD0+src
    MOV R0, R2
    MOVS R5, #0x10
    MOVS R6, #0
loc_29350:
    ADD R3, SP, #0xD0+var_80
    MOV R1, R4
    RSB.W R2, R2, #0x40
    ADD R0, R3
    BLX memcpy
    LDR R3, [SP,#0xD0+var_40]
    LDR R7, [SP,#0xD0+var_74]
    MOV R1, SP
    RSB.W R12, R3, #0x40
    SUB.W LR, R3, #0x40
    LDR R3, [SP,#0xD0+var_78]
    ADD R5, LR
    STR R7, [SP,#0xD0+var_C4]
    ADD R4, R12
    LDR R7, [SP,#0xD0+var_70]
    STR R3, [SP,#0xD0+var_C8]
    LDR R3, [SP,#0xD0+var_64]
    STR R7, [SP,#0xD0+var_C0]
    LDR R7, [SP,#0xD0+var_6C]
    STR R3, [SP,#0xD0+var_B4]
    LDR R3, [SP,#0xD0+var_50]
    LDR R2, [SP,#0xD0+var_7C]
    STR R7, [SP,#0xD0+var_BC]
    STR R3, [SP,#0xD0+var_A0]
    LDR R7, [SP,#0xD0+var_60]
    LDR R3, [SP,#0xD0+var_4C]
    STR R2, [SP,#0xD0+var_CC]
    STR R7, [SP,#0xD0+var_B0]
    LDR R2, [SP,#0xD0+var_68]
    LDR R7, [SP,#0xD0+var_5C]
    STR R3, [SP,#0xD0+var_9C]
    LDR R3, [SP,#0xD0+var_48]
    LDR R0, [SP,#0xD0+var_80]
    STR R2, [SP,#0xD0+var_B8]
    STR R7, [SP,#0xD0+var_AC]
    LDR R2, [SP,#0xD0+var_54]
    LDR R7, [SP,#0xD0+var_58]
    STR R3, [SP,#0xD0+var_98]
    LDR R3, [SP,#0xD0+var_44]
    STR R0, [SP,#0xD0+var_D0]
    ADD R0, SP, #0xD0+dest
    STR R2, [SP,#0xD0+var_A4]
    STR R7, [SP,#0xD0+var_A8]
    STR R3, [SP,#0xD0+var_94]
    BL sub_28778
    CMP R5, #0x3F
    MOV.W R0, #0
    STR R6, [SP,#0xD0+var_40]
    MOV R2, R0
    BHI loc_29350
loc_293C0:
    MOV R1, R4
    ADD R0, SP, #0xD0+var_80
    MOVS R3, #0x4C
    MOV R2, R5
    BLX __memcpy_chk
    STR R5, [SP,#0xD0+var_40]
loc_293CE:
    ADD R1, SP, #0xD0+dest
    MOV R0, R8
    BL sub_29130
    LDR R2, [SP,#0xD0+var_24]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29406
loc_293E0:
    ADD SP, SP, #0xB4
    POP.W {R4-R9,PC}
loc_293E6:
    ADD R5, SP, #0xD0+src
    ADD R3, SP, #0xD0+var_20
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x60]
    STR.W R1, [R4,#-0x5C]
    STR.W R2, [R4,#-0x58]
    STR.W R3, [R4,#-0x54]
    LDR R3, [SP,#0xD0+var_40]
    ADDS R3, #0x10
    STR R3, [SP,#0xD0+var_40]
    B loc_293CE
loc_29406:
    BLX __stack_chk_fail
```
Output: memset
    ADD SP, SP, #0xB4
    POP.W {R4-R9,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_56948:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1145C:
    ADR R12, 0x11464
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fgetc_ptr - 0x55464)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fgetc)",
  "address-or-offset-constant:0x11464",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fgetc_ptr",
  "inferred-algorithm:file-i-o",
  "inferred-algorithm:character-reading"
]
```<|im_end|>
############
```assembly
loc_35A34:
    PUSH {LR}
    SUB SP, SP, #0xC
    MOVS R3, #0
    STR R3, [SP,#0x10+var_10]
    BL sub_358D0
    ADD SP, SP, #0xC
    POP.W {PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_358D0)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0",
  "memory-write-to-stack-offset",
  "inferred-algorithm:simple-procedure-invocation",
  "inferred-algorithm:data-zeroing-or-reset"
]
```<|im_end|>
############
```assembly
loc_2CC16:
    MOV R10, #0x562CC
    ADD.W R11, SP, #0x88+var_6C
    LDM.W R10!, {R0-R3}
    STM.W R11!, {R0-R3}
    LDM.W R10!, {R0-R3}
    STM.W R11!, {R0-R3}
    LDM.W R10!, {R0-R3}
    SUB.W R9, R10, #0x30
    STM.W R11!, {R0-R3}
    MOV R4, R9
    LDM.W R10, {R0-R3}
    STM.W R11, {R0-R3}
    MOV R3, R7
    MOV R7, LR
loc_2CC4C:
    LDR.W R2, [R4,#0x49C]
    ADD R1, SP, #0x88+var_6C
    ADD R0, SP, #0x88+var_80
    SUBS R4, #0x14
    EORS R5, R2
    LDR.W R2, [R4,#0x4B4]
    STR R5, [SP,#0x88+var_80]
    EORS R3, R2
    LDR.W R5, [R4,#0x4C0]
    LDR.W R2, [R4,#0x4B8]
    STR R3, [SP,#0x88+var_7C]
    EORS R6, R5
    LDR.W R3, [R4,#0x4BC]
    EORS R2, R7
    STR R6, [SP,#0x88+var_70]
    EOR.W R3, R3, R12
    STR R2, [SP,#0x88+var_78]
    STR R3, [SP,#0x88+var_74]
    BL sub_322B0
    ADD R3, SP, #0x88+var_7C
    LDR R5, [SP,#0x88+var_80]
    LDR R6, [SP,#0x88+var_70]
    LDM.W R3, {R3,R7,R12}
    STR.W R5, [R4,#0x4B0]
    STR.W R6, [R4,#0x4C0]
    STR.W R3, [R4,#0x4B4]
    STR.W R7, [R4,#0x4B8]
    STR.W R12, [R4,#0x4BC]
    CMP R4, R8
    BNE loc_2CC4C
loc_2CCA2:
    MOV LR, R7
    MOV R7, R3
    LDR R3, [SP,#0x88+var_88]
    SUBS R3, #1
    STR R3, [SP,#0x88+var_88]
    BNE loc_2CC16
loc_2CCAE:
    ADD R4, SP, #0x88+var_80
    ADD R1, SP, #0x88+var_6C
    ADD R0, SP, #0x88+var_80
    MOVS R6, #0x14
    BL sub_322B0
    LDM R4!, {R0-R3}
    LDR R7, [SP,#0x88+var_88]
    STR.W R6, [R9,#(dword_5677C - 0x562CC)]
    LDR R6, [SP,#0x88+var_2C]
    STR.W R7, [R9,#(dword_567D8 - 0x562CC)]
    LDR R7, [R4]
    LDR R4, [SP,#0x88+var_84]
    LDR R5, =byte_56780
    LDR R4, [R4]
    STM R5!, {R0-R3}
    CMP R6, R4
    STR R7, [R5]
    BNE loc_2CCDE
loc_2CCD8:
    ADD SP, SP, #0x64
    POP.W {R4-R11,PC}
loc_2CCDE:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x64",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-detected",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_322B0)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operations-present",
  "specific-bitwise-mask-values:0x14",
  "fixed-value-comparisons-present",
  "address-or-offset-constants-present",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:array-manipulation",
  "inferred-algorithm:loop-with-counter-update",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_30514:
    PUSH.W {R4-R11,LR}
    MOV R8, #0x56190
    ADD.W R4, R0, #0xD8
    SUB SP, SP, #0xFC
    MOV R5, R0
    LDR.W R6, [R8]
    MOV R10, R1
    MOV R9, R2
    MOV R1, R5
    MOVS R2, #0x6C
    MOV R0, R4
    STRB.W R3, [SP,#0x120+var_6D]
    STR R6, [SP,#0x120+var_2C]
    LSRS R6, R3, #0x18
    STRB.W R6, [SP,#0x120+var_70]
    LSRS R6, R3, #0x10
    LSRS R3, R3, #8
    STRB.W R6, [SP,#0x120+var_6F]
    STRB.W R3, [SP,#0x120+var_6E]
    BLX memcpy
    MOV R0, R4
    MOVS R2, #4
    ADD R1, SP, #0x120+var_70
    BL sub_2FA48
    MOV R2, R9
    MOV R1, R10
    MOV R0, R4
    BL sub_2FA48
    MOVS R2, #0x6C
    MOV R1, R4
    ADD R0, SP, #0x120+dest
    BLX memcpy
    ADD R0, SP, #0x120+dest
    ADD R1, SP, #0x120+src
    BL sub_2FF54
    MOVS R2, #0x6C
    ADD.W R1, R5, #0x6C
    ADD R0, SP, #0x120+dest
    BLX memcpy
    ADD R0, SP, #0x120+var_7C
    LDM R0, {R0,R2,R3}
    MOVS R6, R0
    ADD.W R3, R3, #0x20
    STR R3, [SP,#0x120+var_74]
    IT 
    MOVNE R6, #1
    CMP R0, #0x1F
    IT 
    MOVGT R6, #0
    CMP R3, #0x1F
    ITE 
    MOVHI R3, R2
    ADDLS R3, R2, #1
    STR R3, [SP,#0x120+var_78]
    CMP R6, #0
    BNE loc_3068C
loc_305A8:
    CMP R0, #0x1F
    ITTTT 
    ADDLE R4, SP, #0x120+src
    ADDLE R7, SP, #0x120+var_BC
    MOVLE R2, #0x20
    MOVLE R5, R2
    BLE loc_3065C
loc_305B6:
    ADD R7, SP, #0x120+var_BC
    ADD R4, SP, #0x120+src
    MOV R11, R6
    MOVS R5, #0x20
loc_305BE:
    RSB.W R2, R0, #0x40
    MOV R1, R4
    ADD R0, R7
    BLX memcpy
    LDR R3, [SP,#0x120+var_7C]
    LDR R2, [SP,#0x120+var_B8]
    ADD R1, SP, #0x120+var_11C
    RSB.W LR, R3, #0x40
    LDR R3, [SP,#0x120+var_B4]
    REV R2, R2
    STR R2, [SP,#0x120+var_118]
    LDR R2, [SP,#0x120+var_B0]
    REV R3, R3
    LDR R6, [SP,#0x120+var_AC]
    SUB.W R5, R5, LR
    STR R3, [SP,#0x120+var_114]
    REV R2, R2
    LDR R3, [SP,#0x120+var_A8]
    ADD R4, LR
    STR R2, [SP,#0x120+var_110]
    REV.W LR, R6
    LDR R2, [SP,#0x120+var_A4]
    REV R3, R3
    LDR R6, [SP,#0x120+var_A0]
    REV R2, R2
    STR R3, [SP,#0x120+var_108]
    STR R2, [SP,#0x120+var_104]
    LDR R3, [SP,#0x120+var_9C]
    LDR R2, [SP,#0x120+var_98]
    STR.W LR, [SP,#0x120+var_10C]
    REV R3, R3
    REV.W LR, R6
    REV R2, R2
    LDR R6, [SP,#0x120+var_94]
    STR R3, [SP,#0x120+var_FC]
    STR R2, [SP,#0x120+var_F8]
    LDR R3, [SP,#0x120+var_90]
    LDR R2, [SP,#0x120+var_8C]
    LDR R0, [SP,#0x120+var_BC]
    REV R3, R3
    STR.W LR, [SP,#0x120+var_100]
    REV R2, R2
    REV.W LR, R6
    STR R3, [SP,#0x120+var_F0]
    LDR R6, [SP,#0x120+var_88]
    REV R0, R0
    LDR R3, [SP,#0x120+var_84]
    STR R2, [SP,#0x120+var_EC]
    LDR R2, [SP,#0x120+var_80]
    REV R3, R3
    STR R0, [SP,#0x120+var_11C]
    ADD R0, SP, #0x120+dest
    STR.W LR, [SP,#0x120+var_F4]
    REV R2, R2
    REV.W LR, R6
    STR R3, [SP,#0x120+var_E4]
    STR.W LR, [SP,#0x120+var_E8]
    STR R2, [SP,#0x120+var_E0]
    BL sub_2F354
    CMP R5, #0x3F
    STR.W R11, [SP,#0x120+var_7C]
    MOV.W R0, #0
    BGT loc_305BE
loc_3065A:
    MOV R2, R5
loc_3065C:
    MOV R1, R4
    MOV R0, R7
    MOVS R3, #0x4C
    BLX __memcpy_chk
    STR R5, [SP,#0x120+var_7C]
loc_30668:
    ADD R0, SP, #0x120+dest
    ADD R1, SP, #0x120+var_6C
    BL sub_2FF54
    MOVS R2, #0x20
    ADD R0, SP, #0x120+var_6C
    ADD.W R1, R10, R9
    BL sub_19844
    LDR R2, [SP,#0x120+var_2C]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE loc_306BE
loc_30686:
    ADD SP, SP, #0xFC
    POP.W {R4-R11,PC}
loc_3068C:
    ADD R4, SP, #0x120+src
    ADD R3, SP, #0x120+var_28
    ADDS R6, R3, R0
    LDM R4!, {R0-R3}
    STR.W R0, [R6,#-0x94]
    STR.W R1, [R6,#-0x90]
    STR.W R2, [R6,#-0x8C]
    STR.W R3, [R6,#-0x88]
    LDM R4!, {R0-R3}
    STR.W R0, [R6,#-0x84]
    STR.W R1, [R6,#-0x80]
    STR.W R2, [R6,#-0x7C]
    STR.W R3, [R6,#-0x78]
    LDR R3, [SP,#0x120+var_7C]
    ADDS R3, #0x20
    STR R3, [SP,#0x120+var_7C]
    B loc_30668
loc_306BE:
    BLX __stack_chk_fail
```
Output:C]
    LDR R0, [SP,#0x120+var_7C]
    LDR R2, [SP,#0x120+var_78]
    STR.W LR, [SP,#0x120+var_118]
    REV R2, R2
    LDR R3, [SP,#0x120+var_74]
    LDR R0, [SP,#0x120+var_70]
    STR W2, [SP,#0x120+var_114]
    LDR R2, [SP,#0x120+var_6C]
    LDR R3, [SP,#0x120+var_68]
    LDR R0, [SP,#0x120+var_64]
    STR W3, [SP,#0x120+var_110]
    LDR R2, [SP,#0x120+var_60]
    LDR R3, [SP,#0x120+var_5C]
    LDR R0, [SP,#0x120+var_58]
    STR W0, [SP,#0x120+var_108]
    LDR R2, [SP,#0x120+var_54]
    LDR R3, [SP,#0x120+var_50]
    LDR R0, [SP,#0x120+var_4C]
    STR W1, [SP,#0x120+var_104]
    LDR R2, [SP,#0x120+var_48]
    LDR R3, [SP,#0x120+var_44]
    LDR R0, [SP,#0x120+var_40]
    STR W2, [SP,#0x120+var_100]
    LDR R2, [SP,#0x120+var_3C]
    LDR R3, [SP,#0x120+var_38]
    LDR R0, [SP,#0x120+var_34]
    STR W3, [SP,#0x120+var_EC]
    LDR R2, [SP,#0x120+var_30]
    LDR R3, [SP,#0x120+var_2C]
    LDR R0, [SP,#0x120+var_28]
    STR W0, [SP,#0x120+var_11C]
    LDR R2, [SP,#0x120+var_24]
    LDR R3, [SP,#0x120+var_20]
    LDR R0, [SP,#0x120+var_1C]
    STR W1, [SP,#0x120+var_118]
    LDR R2, [SP,#0x120+var_18]
    LDR R3, [SP,#0x120+var_14]
    LDR R0, [SP,#0x120+var_10]
    STR W2, [SP,#0x120+var_114]
    LDR R2, [SP,#0x120+var_C]
    LDR R3, [SP,#0x120+var_8]
    LDR R0, [SP,#0x120+var_4]
    STR W3, [SP,#0x120+var_110]
    LDR R2, [SP,#0x120+var_0]
    LDR R3, [SP,#0x120+var_4]
    LDR R0, [SP,#0x120+var_0]
    STR W0, [SP,#0x120+var_108]
    LDR R2, [SP,#0x120+var_4]
    LDR R3, [SP,#0x120+var_0]
    LDR R0, [SP,#0x120+var_4]
    STR W1, [SP,#0x120+var_104]
    LDR R2, [SP,#0x120+var_4]
    LDR R3, [SP
############
```assembly
loc_1E548:

```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_5696C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_20228:
    PUSH.W {R4-R11,LR}
    MOV R4, R0
    SUB SP, SP, #0x3C
    LDR R0, [R1]
    STR R1, [SP,#0x60+src]
    ADDS R0, #1
    MOVS R1, #4
    BL sub_193B8
    CMP R0, #0
    BEQ.W loc_20716
loc_20242:
    LDR R1, [SP,#0x60+src]
    MOV R10, R0
    LDR R3, [R1]
    ADDS R2, R3, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R0, [R4]
    MOVS R1, #4
    ADDS R0, #1
    BL sub_193B8
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_20716
loc_20262:
    LDR R3, [R4]
    MOV R2, #0x56170
    STR R2, [SP,#0x60+var_48]
    MOV R1, R4
    MOV R7, R2
    ADDS R2, R3, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R6, [R7]
    MOVS R1, #4
    LDR R0, [R6]
    ADDS R0, #1
    BL sub_193B8
    STR R0, [SP,#0x60+var_40]
    CMP R0, #0
    BEQ.W loc_20716
loc_2028E:
    LDR R2, [R6]
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R6, [R7,#(off_56178 - 0x56170)]
    MOVS R1, #4
    LDR R0, [R6]
    ADDS R0, #1
    BL sub_193B8
    STR R0, [SP,#0x60+var_44]
    CMP R0, #0
    BEQ.W loc_20716
loc_202AE:
    LDR R2, [R6]
    MOV R1, R6
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDR R3, [R4]
    LDR.W R3, [R4,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_206FC
loc_202C6:
    LDR R2, [SP,#0x60+src]
    LDR R3, [R2]
    LDR.W R3, [R2,R3,LSL#2]
    CMP R3, #0
    BEQ.W loc_206C4
loc_202D4:
    MOV R3, #0x3FFFFFE
    STR R3, [SP,#0x60+var_38]
    MOV R0, R5
    LDR R3, [SP,#0x60+var_48]
    MOVS R2, #1
    STR R2, [SP,#0x60+var_3C]
    LDR R1, [R3,#8]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_20572
loc_202F2:
    LDR R3, [SP,#0x60+var_48]
    MOV R0, R5
    LDR R1, [R3]
    BL sub_1F358
    CMP R0, #0
    BEQ.W loc_205BE
loc_20302:
    LDR R4, [R5]
    LDR R3, [SP,#0x60+var_38]
    CMP R4, R3
    BHI.W loc_206F8
loc_2030C:
    ADDS R7, R4, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    STR R4, [R6]
    LDR R3, [SP,#0x60+var_38]
    LDR.W R4, [R10]
    CMP R4, R3
    BHI.W loc_206F8
loc_2032E:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.W R11, [R5]
    LDR.W R2, [R5,R11,LSL#2]
    MOV.W R3, R11,LSL#2
    STR R3, [SP,#0x60+var_34]
    CMP R2, #0
    BEQ.W loc_206DE
loc_2035C:
    MOVS R1, #4
    MOV R0, R11
    BL sub_193B8
    CMP.W R11, #0
    IT 
    MOVGT R2, #0
    MOV R9, R0
    IT 
    SUBGT R0, #4
    BLE loc_20386
loc_20374:
    LDR R3, [R5]
    SUBS R3, R3, R2
    ADDS R2, #1
    CMP R11, R2
    LDR.W R3, [R5,R3,LSL#2]
    STR.W R3, [R0,#4]!
    BNE loc_20374
loc_20386:
    LDR.W R4, [R10]
    MOVS R1, #4
    CMP R11, R4
    IT 
    ADDGE.W R4, R11, #1
    MOV R0, R4
    BL sub_193B8
    CMP R4, #0
    MOV.W R3, R4,LSL#2
    STR R3, [SP,#0x60+var_4C]
    MOV R8, R0
    BLE loc_203AE
loc_203A6:
    MOVS R1, #0
    MOV R2, R3
    BLX memset
loc_203AE:
    LDR.W R2, [R10]
    CMP R2, #0
    BLE loc_203D2
loc_203B6:
    LDR R3, [SP,#0x60+var_4C]
    MOV R1, R10
    MOVS R2, #1
    ADD.W LR, R8, R3
loc_203C0:
    LDR.W R3, [R1,#4]!
    ADDS R2, #1
    STR.W R3, [LR,#-4]!
    LDR.W R3, [R10]
    CMP R2, R3
    BLE loc_203C0
loc_203D2:
    LDR.W R0, [R9]
    LSRS R1, R0, #0x10
    MOV.W R2, R0,LSL#16
    IT 
    MOVNE R2, R0
    MOV.W R12, R2,LSL#8
    MOVS.W LR, R2,LSR#24
    IT 
    MOVEQ R2, R12
    CMP R1, #0
    MOV.W R1, R2,LSR#28
    ITE 
    MOVEQ.W R12, #0x10
    MOVNE.W R12, #0
    CMP.W LR, #0
    ITE 
    MOVEQ.W LR, #8
    MOVNE.W LR, #0
    CMP R1, #0
    MOV.W R1, R2,LSL#4
    IT 
    MOVNE R1, R2
    ADD.W R2, R12, LR
    MOV.W LR, R1,LSR#30
    ITE 
    MOVEQ.W R12, #4
    MOVNE.W R12, #0
    CMP.W LR, #0
    ADD R2, R12
    MOV.W R12, R1,LSL#2
    ITE 
    MOVEQ.W LR, #2
    MOVNE.W LR, #0
    ADD R2, LR
    IT 
    MOVEQ R1, R12
    CMP R1, #0
    IT 
    ADDGE R2, #1
    CBZ R2, loc_20460
loc_20448:
    CMP.W R11, #1
    LSL.W R0, R0, R2
    ITTTT 
    RSBGT.W LR, R2, #0x20
    LDRGT.W R1, [R9,#4]
    LSRGT.W R1, R1, LR
    ORRGT R0, R1
loc_20460:
    STR R2, [SP,#0x60+var_30]
    BL sub_1D700
    LDR R2, [SP,#0x60+var_30]
    MOV R3, R11
    MOV R1, R4
    STR R7, [SP,#0x60+var_60]
    STR R2, [SP,#0x60+var_58]
    MOV R2, R9
    STR R0, [SP,#0x60+var_5C]
    MOV R0, R8
    BL sub_1D904
    LDR R3, [R6]
    CMP R3, #0
    ITTT 
    ADDGT.W R4, R4, #0xFFFFFFFF
    MOVGT R2, R6
    MOVGT R3, #1
    BLE loc_204A4
loc_2048A:
    CMP R4, #0
    ADD.W R3, R3, #1
    ITE 
    LDRGE.W R1, [R8,R4,LSL#2]
    MOVLT R1, #0
    SUBS R4, #1
    STR.W R1, [R2,#4]!
    LDR R1, [R6]
    CMP R3, R1
    BLE loc_2048A
loc_204A4:
    LDR R1, [SP,#0x60+var_34]
    MOV R0, R9
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    LDR R1, [SP,#0x60+var_4C]
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R3, [R6]
    CMP R3, #1
    BLS loc_204E2
loc_204C6:
    LDR.W R1, [R6,R3,LSL#2]
    ADD.W R2, R6, R3,LSL#2
    CBNZ R1, loc_204E2
loc_204D0:
    SUBS R3, #1
    B loc_204DC
loc_204D4:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_204E2
loc_204DC:
    CMP R3, #1
    STR R3, [R6]
    BNE loc_204D4
loc_204E2:
    LDR R3, [R7]
    CMP R3, #1
    BLS loc_20504
loc_204E8:
    LDR.W R1, [R7,R3,LSL#2]
    ADD.W R2, R7, R3,LSL#2
    SUBS R3, #1
    CBZ R1, loc_204FE
loc_204F4:
    B loc_20504
loc_204F6:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_20504
loc_204FE:
    CMP R3, #1
    STR R3, [R7]
    BNE loc_204F6
loc_20504:
    LDR.W R1, [R10]
    MOV R0, R10
    LDR R3, [SP,#0x60+var_3C]
    ADDS R1, #1
    NEGS R3, R3
    STR R3, [SP,#0x60+var_3C]
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR.W R8, [SP,#0x60+var_40]
    LDR.W R9, [SP,#0x60+var_44]
    MOV R0, R7
    MOV R10, R5
    MOV R5, R6
    MOV R2, R8
    MOV R1, R9
    BL sub_1FAF0
    LDR.W R1, [R8]
    ADDS R1, #1
    LSLS R1, R1, #2
    MOV R4, R0
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R1, [R7]
    MOV R0, R7
    STR.W R9, [SP,#0x60+var_40]
    ADDS R1, #1
    STR R4, [SP,#0x60+var_44]
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R7
    BL sub_19494
    LDR R3, [SP,#0x60+var_48]
    MOV R0, R5
    LDR R1, [R3,#8]
    BL sub_1F358
    CMP R0, #0
    BNE.W loc_202F2
loc_20572:
    LDR R3, [R5]
    MOV R4, R0
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR.W R3, [R10]
    MOV R0, R10
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR R5, [SP,#0x60+var_40]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R3, [SP,#0x60+var_3C]
    ADDS R3, #1
    IT 
    LDRNE R0, [SP,#0x60+var_44]
    BEQ loc_20616
loc_205B8:
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_205BE:
    LDR R3, [R5]
    MOV R4, R0
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR.W R3, [R10]
    MOV R0, R10
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    LDR R5, [SP,#0x60+var_40]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R5, [SP,#0x60+var_44]
    LDR R3, [R5]
    MOV R0, R5
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_20616:
    LDR R3, [SP,#0x60+src]
    LDR R6, [R3]
    MOV R3, #0x3FFFFFE
    CMP R6, R3
    BHI loc_206F8
loc_20626:
    ADDS R7, R6, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOV R1, R4
    MOV R5, R0
    BLX memset
    CMP R6, #0
    STR R6, [R5]
    BLE loc_206A4
loc_20640:
    MOVS R1, #1
    MOV R6, R5
    MOV R0, R1
    LDR.W LR, [SP,#0x60+var_44]
    LDR.W R12, [SP,#0x60+src]
    B loc_20666
loc_20650:
    CMP R3, R7
    ITE 
    MOVCC R4, #0
    MOVCS R4, #1
loc_20658:
    LDR R2, [R5]
    CMP R3, #0
    IT 
    MOVNE R0, R1
    ADDS R1, #1
    CMP R2, R1
    BLT loc_206A6
loc_20666:
    LDR.W R3, [R12]
    LDR.W R2, [LR]
    CMP R3, R1
    ITE 
    LDRGE.W R3, [R12,R1,LSL#2]
    MOVLT R3, #0
    CMP R2, R1
    ITEE 
    LDRGE.W R2, [LR,R1,LSL#2]
    MOVLT R2, #0
    MOVLT.W R7, #0xFFFFFFFF
    SUB.W R3, R3, R2
    SUB.W R3, R3, R4
    IT 
    MVNGE R7, R2
    STR.W R3, [R6,#4]!
    CMP R4, #0
    BNE loc_20650
loc_2069A:
    CMP R3, R7
    ITE 
    MOVLS R4, #0
    MOVHI R4, #1
    B loc_20658
loc_206A4:
    MOVS R0, #1
loc_206A6:
    LDR R4, [SP,#0x60+var_44]
    STR R0, [R5]
    LDR R3, [R4]
    MOV R0, R4
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R5
    ADD SP, SP, #0x3C
    POP.W {R4-R11,PC}
loc_206C4:
    MOVW R1, #0xE76C
    MOVW R0, #0xE884
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E3
    BLX __assert_fail
loc_206DE:
    MOVW R1, #0xE76C
    MOVW R0, #0xE7E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBigdivmod
    MOV.W R2, #0x540
    BLX __assert_fail
loc_206F8:
    BL sub_115CC
loc_206FC:
    MOVW R1, #0xE76C
    MOVW R0, #0xE86C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModinv
    MOVW R2, #0x7E2
    BLX __assert_fail
loc_20716:
    BLX abort
```
Output:193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.R4, [R5]
    LDR.R3, [SP,#0x60+var_34]
    CMP R4, R3
    BHI.W loc_206F8
loc_203B2:
    ADD.W R4, R3, #1
    MOVS R1, #4
    MOV R0, R4
    BL sub_193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.W R3, [R10]
    LDR.W R2, [R10,R3,LSL#2]
    MOV.W R4, R3,LSL#2
    STR W4, [SP,#0x60+var_30]
    CMP R2, #0
    BEQ.W loc_206DE
loc_203E2:
    MOVS R1, #4
    MOV R0, R3
    BL sub_193B8
    CMP.W R3, #0
    IT 
    ADDGE.W R3, R11, #1
    MOV R0, R3
    BL sub_193B8
    MOV.W R2, R3,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R3, [R7]
    LDR.W R4, [R5]
    LDR.W R3, [SP,#0x60+var_30]
    CMP R4, R3
    BHI.W loc_206F8
loc_2040E:
    ADD.W R4, R3, #1
    MOVS R1, #4
    MOV R0, R4
    BL sub_193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.W R3, [R10]
    LDR.W R2, [R10,R3,LSL#2]
    MOV.W R4, R3,LSL#2
    STR W4, [SP,#0x60+var_2C]
    CMP R2, #0
    BEQ.W loc_206DE
loc_20438:
    MOVS R1, #4
    MOV R0, R3
    BL sub_193B8
    CMP.W R3, #0
    IT 
    ADDGE.W R3, R11, #1
    MOV R0, R3
    BL sub_193B8
    MOV.W R2, R3,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R3, [R7]
    LDR.W R4, [R5]
    LDR.W R3, [SP,#0x60+var_2C]
    CMP R4, R3
    BHI.W loc_206F8
loc_2045E:
    ADD.W R4, R3, #1
    MOVS R1, #4
    MOV R0, R4
    BL sub_193B8
    MOV.W R2, R4,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    LDR.W R3, [R10]
    LDR.W R2, [R10,R3,LSL#2]
    MOV.W R4, R3,LSL#2
    STR W4, [SP,#0x60+var_28]
    CMP R2, #0
    BEQ.W loc_206DE
loc_20488:
    MOVS R1, #4
    MOV R0, R3
    BL sub_193B8
    CMP.W R3, #0
    IT 
    ADDGE.W R
############
```assembly
loc_2E100:
    PUSH {R3-R5,LR}
    BL sub_2DF70
    CBZ R0, loc_2E154
loc_2E108:
    MOV R4, R0
    LDR R0, [R0,#8]
    BL sub_1F158
    MOV R5, R0
    LDR R0, [R4,#8]
    CBZ R0, loc_2E11A
loc_2E116:
    BL sub_1E6B0
loc_2E11A:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2E122
loc_2E11E:
    BL sub_1E6B0
loc_2E122:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2E12A
loc_2E126:
    BL sub_1E6B0
loc_2E12A:
    LDR R0, [R4,#0x14]
    CBZ R0, loc_2E132
loc_2E12E:
    BL sub_1E6B0
loc_2E132:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_2E13A
loc_2E136:
    BL sub_1E6B0
loc_2E13A:
    LDR R0, [R4,#0x1C]
    CBZ R0, loc_2E142
loc_2E13E:
    BL sub_1E6B0
loc_2E142:
    LDR R0, [R4,#0x20]
    CBZ R0, loc_2E14A
loc_2E146:
    BL sub_19494
loc_2E14A:
    MOV R0, R4
    BL sub_19494
    MOV R0, R5
    POP {R3-R5,PC}
loc_2E154:
    MOV.W R0, #0xFFFFFFFF
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2DF70)",
  "external-call-type:unspecified-helper (sub_1F158)",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-read-from-input-parameter-offset:10",
  "memory-read-from-input-parameter-offset:14",
  "memory-read-from-input-parameter-offset:18",
  "memory-read-from-input-parameter-offset:1C",
  "memory-read-from-input-parameter-offset:20",
  "fixed-value-comparison:0",
  "fixed-value-assignment:FFFFFFFF",
  "inferred-algorithm:loop-based-processing",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path"
]
```<|im_end|>
############
```assembly
loc_1EF20:
    MOV R3, #0x56170
    PUSH.W {R4-R11,LR}
    MOV R9, R0
    LDR R4, [R3]
    SUB SP, SP, #0xC
    MOVS R1, #4
    STR R3, [SP,#0x30+var_2C]
    LDR R0, [R4]
    ADDS R0, #1
    BL sub_193B8
    CMP R0, #0
    BEQ.W loc_1F07E
loc_1EF44:
    LDR R2, [R4]
    MOV R1, R4
    MOV R8, R0
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDRB.W R4, [R9]
    CMP R4, #0
    BEQ loc_1F054
loc_1EF5A:
    BLX __ctype_b_loc
    MOV R11, #0x3FFFFFE
    MOV R10, R0
loc_1EF68:
    LDR.W R3, [R10]
    LDRH.W R3, [R3,R4,LSL#1]
    ANDS.W R3, R3, #0x800
    BEQ loc_1F060
loc_1EF76:
    LDR R3, [SP,#0x30+var_2C]
    MOV R0, R8
    LDR R1, [R3,#4]
    BL sub_1E548
    MOVS R1, #4
    LDRB.W R6, [R9]
    SUBS R6, #0x30
    MOV R5, R0
    MOVS R0, #2
    BL sub_193B8
    MOV R4, R0
    MOV R0, R8
    STR R6, [R4,#4]
    ADDS R6, #0
    IT 
    MOVNE R6, #1
    STR R6, [R4]
    LDR.W R1, [R8]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R6, [R4]
    LDR R3, [R5]
    CMP R6, R3
    IT 
    MOVLT R6, R3
    ADDS R7, R6, #1
    CMP R7, R11
    BHI loc_1F082
loc_1EFC0:
    ADDS R6, #2
    MOVS R1, #4
    MOV R0, R6
    BL sub_193B8
    LSLS R2, R6, #2
    MOVS R1, #0
    MOV R8, R0
    BLX memset
    STR.W R7, [R8]
    CMP R7, #0
    BEQ loc_1F05C
loc_1EFDC:
    MOVS R2, #0
    MOV R12, R8
    MOV LR, R2
    MOVS R3, #1
loc_1EFE4:
    LDR R1, [R5]
    LDR R7, [R4]
    CMP R1, R3
    MOV.W R1, #0
    ITE 
    LDRGE.W R0, [R5,R3,LSL#2]
    MOVLT R0, #0
    CMP R7, R3
    ITE 
    LDRGE.W R7, [R4,R3,LSL#2]
    MOVLT R7, #0
    ADDS.W R0, R0, LR
    ADC.W R1, R1, #0
    ADDS R0, R0, R7
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R2
    STR.W R0, [R12,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R6
    MOV LR, R1
    BNE loc_1EFE4
loc_1F024:
    STR.W R2, [R8]
    MOV R0, R5
    LDR R1, [R5]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R1, [R4]
    MOV R0, R4
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDRB.W R4, [R9,#1]!
    CMP R4, #0
    BNE loc_1EF68
loc_1F054:
    MOV R0, R8
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F05C:
    MOV R2, R7
    B loc_1F024
loc_1F060:
    MOV R4, R3
    LDR.W R3, [R8]
    MOV R0, R8
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F07E:
    BLX abort
loc_1F082:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (abort)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:data-processing-helper (__ctype_b_loc)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_1E548)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "external-call-type:unspecified-helper (sub_115CC)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operations-present",
  "bitwise-operation-types:AND",
  "bitwise-operation-types:XOR",
  "bitwise-operation-types:OR",
  "bitwise-operation-types:NOT",
  "bitwise-operation-types:SHL",
  "bitwise-operation-types:SHR",
  "magic-number:0x56170",
  "magic-number:0x3FFFFFE",
  "magic-number:0x30",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:loop-counter-patterns",
  "inferred-algorithm:conditional-data-retrieval-or-processing"
]
```<|im_end|>
############
```assembly
loc_1D040:
    MOVW R1, #0x1050
    MOVS R0, #1
    B.W sub_193B8
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:integer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "magic-number:0x1050",
  "magic-number:1",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "integer-size-hint:16-bit",
  "fixed-value-assignment:0x1050",
  "fixed-value-assignment:1",
  "inferred-algorithm:data-processing-or-mathematical-computation"
]
```<|im_end|>
############
```assembly
loc_11374:
    ADR R12, 0x1137C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(localtime_ptr - 0x5537C)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:0",
  "calling-convention-hint:direct-execution",
  "stack-arg-use:false",
  "magic-number:0x1137C",
  "magic-number:0x44000",
  "magic-number:0x5537C",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (localtime_ptr dereferencing)"
]
```<|im_end|>
############
```assembly
loc_568C4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_56970:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_22D64:
    PUSH.W {R4-R9,LR}
    MOV R4, R0
    LDRB R7, [R0,#5]
    MOV R5, R1
    LDRB.W LR, [R4,#4]
    MOV R8, R2
    LDRB R0, [R0,#1]
    MOVW R6, #0x6190
    LDRB R1, [R4]
    LSLS R7, R7, #0x10
    LDRB R2, [R4,#7]
    MOVT.W R6, #5
    ORR.W R7, R7, LR,LSL#24
    LSLS R0, R0, #0x10
    LDRB.W LR, [R4,#2]
    ORRS R7, R2
    ORR.W R0, R0, R1,LSL#24
    LDRB R2, [R4,#3]
    LDRB R1, [R4,#6]
    MOV R9, R3
    LDR R3, [R6]
    SUB SP, SP, #0x1A4
    ORRS R0, R2
    ADD R2, SP, #0x1C0+var_1BC
    ORR.W R1, R7, R1,LSL#8
    ORR.W R0, R0, LR,LSL#8
    STR R3, [SP,#0x1C0+var_24]
    BL sub_20D9C
    LDRB R7, [R4,#0xD]
    ADD R2, SP, #0x1C0+var_134
    LDRB R1, [R4,#0xC]
    LDRB R3, [R4,#9]
    LDRB R0, [R4,#8]
    LSLS R7, R7, #0x10
    LDRB.W LR, [R4,#0xF]
    ORR.W R7, R7, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#0xE]
    ORR.W R7, R7, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#0xB]
    LDRB R0, [R4,#0xA]
    ORR.W R1, R7, R1,LSL#8
    ORR.W R3, R3, LR
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    LDRB R3, [R4,#0x15]
    LDRB R1, [R4,#0x14]
    ADD R2, SP, #0x1C0+var_AC
    LDRB R7, [R4,#0x11]
    LDRB R0, [R4,#0x10]
    LSLS R3, R3, #0x10
    LDRB.W LR, [R4,#0x17]
    ORR.W R3, R3, R1,LSL#24
    LSLS R7, R7, #0x10
    LDRB R1, [R4,#0x16]
    ORR.W R3, R3, LR
    ORR.W R7, R7, R0,LSL#24
    LDRB.W LR, [R4,#0x13]
    LDRB R0, [R4,#0x12]
    ORR.W R1, R3, R1,LSL#8
    ORR.W R7, R7, LR
    ORR.W R0, R7, R0,LSL#8
    BL sub_20D9C
    LDRB R2, [R5,#5]
    LDRB R7, [R5,#1]
    MOV R1, R9
    LDRB.W LR, [R5]
    MOV R0, R8
    LDRB.W R12, [R5,#4]
    LSLS R3, R2, #0x10
    LSLS R7, R7, #0x10
    LDRB R4, [R5,#3]
    ORR.W R7, R7, LR,LSL#24
    LDRB.W LR, [R5,#2]
    ORR.W R2, R3, R12,LSL#24
    LDRB R3, [R5,#7]
    LDRB R5, [R5,#6]
    ORRS R4, R7
    ORRS R3, R2
    ADD R2, SP, #0x1C0+var_1BC
    ORR.W R4, R4, LR,LSL#8
    STR R4, [SP,#0x1C0+var_13C]
    ORR.W R3, R3, R5,LSL#8
    STR R3, [SP,#0x1C0+var_138]
    BL sub_225EC
    ADD R0, SP, #0x1C0+var_1BC
    MOV.W R1, #0x198
    BL sub_194E4
    LDR R2, [SP,#0x1C0+var_24]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_22E70
loc_22E6A:
    ADD SP, SP, #0x1A4
    POP.W {R4-R9,PC}
loc_22E70:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1A4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_20D9C)",
  "external-call-type:unspecified-helper (sub_225EC)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shift-left",
  "bitwise-or",
  "memory-read-from-input-parameter-offset:5",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:1",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:7",
  "memory-read-from-input-parameter-offset:2",
  "memory-read-from-input-parameter-offset:3",
  "memory-read-from-input-parameter-offset:6",
  "memory-read-from-input-parameter-offset:15",
  "memory-read-from-input-parameter-offset:14",
  "memory-read-from-input-parameter-offset:11",
  "memory-read-from-input-parameter-offset:10",
  "memory-read-from-input-parameter-offset:17",
  "memory-read-from-input-parameter-offset:16",
  "memory-read-from-input-parameter-offset:13",
  "memory-read-from-input-parameter-offset:12",
  "memory-read-from-input-parameter-offset:9",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x198",
  "address-or-offset-constant:sub_20D9C",
  "address-or-offset-constant:sub_225EC",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:looping-with-counter-pattern",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:error-checking-or-exception-handling",
  "inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_1F410:
    LDR R3, [R1]
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x34
    LSLS R3, R3, #5
    MOV R8, R1
    SUBS R3, #1
    STR R0, [SP,#0x58+var_44]
    BMI loc_1F452
loc_1F422:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R1,R2,LSL#2]
    CMP R2, #0
    BGE loc_1F444
loc_1F42E:
    B loc_1F452
loc_1F430:
    ASRS R2, R3, #5
    AND.W R1, R3, #0x1F
    ADDS R2, #1
    LDR.W R0, [R8,R2,LSL#2]
    MOV R2, R1
    LSRS.W R2, R0, R2
    BNE loc_1F452
loc_1F444:
    ADDS.W R3, R3, #0xFFFFFFFF
    BCS loc_1F430
loc_1F44A:
    MOVS R3, #0
    STR R3, [SP,#0x58+var_50]
    MOV R5, R3
    B loc_1F472
loc_1F452:
    ADD.W R5, R3, #8
    ADDS R3, #1
    IT 
    MOVPL R5, R3
    NEGS R2, R3
    AND.W R2, R2, #7
    AND.W R3, R3, #7
    IT 
    NEGPL R3, R2
    ASRS R5, R5, #3
    STR R3, [SP,#0x58+var_50]
    CBZ R3, loc_1F472
loc_1F470:
    ADDS R5, #1
loc_1F472:
    MOVS R1, #1
    MOV R0, R5
    BL sub_193B8
    LDR R3, [SP,#0x58+var_50]
    SUBS R4, R5, #1
    ADDS R6, R5, #3
    RSB.W R1, R3, #8
    BIC.W R3, R5, R5,ASR#31
    ASRS R6, R6, #2
    MOV R7, R4
    MOVW R9, #0xFFFE
    SUBS R3, #1
    MOVS R2, #0xFF
    STR R4, [SP,#0x58+var_40]
    ASRS R2, R1
    LSLS R4, R6, #2
    ADDS R1, R6, #1
    STR R4, [SP,#0x58+var_38]
    STR.W R8, [SP,#0x58+var_34]
    STR R1, [SP,#0x58+var_4C]
    LSLS R1, R1, #2
    STR R1, [SP,#0x58+n]
    SXTB R1, R2
    STR R1, [SP,#0x58+var_2C]
    ADDS R3, R0, R3
    STR R3, [SP,#0x58+var_30]
    LSLS R3, R7, #3
    STR R3, [SP,#0x58+var_3C]
    MOV R3, R9
    MOVT.W R3, #0x3FF
    ADDS R4, R0, R5
    MOVT.W R9, #0xFFF
    MOV R8, R3
    STR R0, [SP,#0x58+var_54]
loc_1F4C4:
    CMP R5, #0
    BLE loc_1F4D8
loc_1F4C8:
    LDR.W R10, [SP,#0x58+var_54]
loc_1F4CC:
    BL sub_2D1F4
    STRB.W R0, [R10],#1
    CMP R10, R4
    BNE loc_1F4CC
loc_1F4D8:
    LDR R3, [SP,#0x58+var_50]
    CBZ R3, loc_1F4E6
loc_1F4DC:
    LDR R2, [SP,#0x58+var_30]
    LDR R1, [SP,#0x58+var_2C]
    LDRB R3, [R2]
    ANDS R3, R1
    STRB R3, [R2]
loc_1F4E6:
    CMP R5, R9
    BHI loc_1F5BC
loc_1F4EA:
    CMP R6, R8
    BGT loc_1F5B8
loc_1F4EE:
    MOVS R1, #4
    LDR R0, [SP,#0x58+var_4C]
    BL sub_193B8
    LDR R2, [SP,#0x58+n]
    MOVS R1, #0
    MOV R10, R0
    BLX memset
    CMP R6, #0
    STR.W R6, [R10]
    BLE loc_1F514
loc_1F508:
    LDR R2, [SP,#0x58+var_38]
    MOVS R1, #0
    ADD.W R0, R10, #4
    BLX memset
loc_1F514:
    LDR.W LR, [SP,#0x58+var_40]
    LDR.W R12, [SP,#0x58+var_3C]
    LDR.W R11, [SP,#0x58+var_54]
    CBZ R5, loc_1F54E
loc_1F522:
    MOV.W R1, LR,ASR#2
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R10,R1,LSL#2]
    LSL.W R3, R2, R3
    SUB.W R12, R12, #8
    ORR.W R3, R3, R0
    STR.W R3, [R10,R1,LSL#2]
    BNE loc_1F522
loc_1F54E:
    LDR.W R7, [R10]
    CMP R7, #1
    BLS loc_1F576
loc_1F556:
    LDR.W R2, [R10,R7,LSL#2]
    ADD.W R3, R10, R7,LSL#2
    CBNZ R2, loc_1F576
loc_1F560:
    SUBS R7, #1
    B loc_1F56E
loc_1F564:
    LDR.W R2, [R3,#-4]!
    SUBS R1, R7, #1
    CBNZ R2, loc_1F576
loc_1F56C:
    MOV R7, R1
loc_1F56E:
    CMP R7, #1
    STR.W R7, [R10]
    BNE loc_1F564
loc_1F576:
    LDR R1, [SP,#0x58+var_44]
    MOV R0, R10
    BL sub_1F358
    CMP R0, #0
    BLT loc_1F58E
loc_1F582:
    LDR R1, [SP,#0x58+var_34]
    MOV R0, R10
    BL sub_1F358
    CMP R0, #0
    BLE loc_1F5A0
loc_1F58E:
    ADDS R1, R7, #1
    MOV R0, R10
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R10
    BL sub_19494
    B loc_1F4C4
loc_1F5A0:
    LDR R4, [SP,#0x58+var_54]
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R10
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
loc_1F5B8:
    BL sub_115CC
loc_1F5BC:
    MOVW R1, #0xE76C
    MOVW R0, #0xE800
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumFromByte
    MOVW R2, #0x583
    BLX __assert_fail
```
Output:    BNE loc_1F52E
loc_1F52E:
    AND.W R2, R2, #0x1F
    LDRB.W R3, [R0,R2,LSL#2]
    CMP.W R3, #0x1F
    BNE loc_1F53C
loc_1F532:
    LDR.W R1, [R10,R1,LSL#2]
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R10,R1,LSL#2]
    BNE loc_1F53E
loc_1F53E:
    AND.W R2, R2, #0x1F
    LDRB.W R3, [R0,R2,LSL#2]
    CMP.W R3, #0x1F
    BNE loc_1F54C
loc_1F542:
    LDR.W R1, [R10,R1,LSL#2]
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R10,R1,LSL#2]
    BNE loc_1F54E
loc_1F54E:
    LDR.W R1, [R10,R1,LSL#2]
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R10,R1,LSL#2]
    BNE loc_1F550
loc_1F550:
    AND.W R2, R2, #0x1F
    LDRB.W R3, [R0,R2,LSL#2]
    CMP.W R3, #0x1F
    BNE loc_1F558
loc_1F558:
    LDR.W R1, [R10,R1,LSL#2]
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R10,R1,LSL#2]
    BNE loc_1F55A
loc_1F55A:
    AND.W R2, R2, #0x1F
    LDRB.W R3, [R0,R2,LSL#2]
    CMP.W R3, #0x1F
    BNE loc_1F568
loc_1F562:
    LDR.W R1, [R10,R1,LSL#2]
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R10,R1,LSL#2]
    BNE loc_1F56A
loc_1F56A:
    AND.W R2, R2, #0x1F
    LDRB.W R3, [R0,R2,LSL#2]
    CMP.W R3, #0x1F
    BNE loc_1F578
loc_1F572:
    LDR.W R1, [R10,R1,LSL#2]
    LDRB.W R2, [R11],#1
    ADDS R1, #1
    ADD.W LR, LR, #0xFFFFFFFF
    AND.W R3, R12, #0x1F
    CMP.W LR, #0xFFFFFFFF
    LDR.W R0, [R1
############
```assembly
loc_29BE0:
    PUSH.W {R4-R11,LR}
    SUB.W SP, SP, #0x13200
    SUB SP, SP, #0x104
    MOV R4, #0x56190
    MOV R10, R0
    STR R3, [SP,#0x13328+var_13310]
    ADD.W R3, SP, #0x13328+var_128
    LDR R0, [R4]
    ADDS R3, #0xFC
    STR R4, [SP,#0x13328+var_132DC]
    STR R1, [SP,#0x13328+var_132EC]
    STR R0, [R3]
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x12C
    STR R2, [SP,#0x13328+var_132E8]
    LDR R3, [R3]
    STR R3, [SP,#0x13328+var_1330C]
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x130
    LDR R3, [R3]
    STR R3, [SP,#0x13328+var_13308]
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x134
    LDR R3, [R3]
    CMP R3, #0
    BEQ.W loc_2A10E
loc_29C2E:
    ADD.W R2, SP, #0x13328+var_128
    MOVS R3, #0
    ADD.W R2, R2, #0x134
    LDR R2, [R2]
loc_29C3A:
    ADDS R3, #1
    LSRS.W R1, R2, R3
    BNE loc_29C3A
loc_29C42:
    CMP.W R10, #0x95
    STR R3, [SP,#0x13328+var_132F0]
    ADD.W R2, SP, #0x13328+var_CCA8
    MOV R9, R10
    ITE 
    MOVGT R3, #0x12
    MOVLE R3, #0x1B
    STR R3, [SP,#0x13328+var_132E0]
    MOVS R3, #0
    MOV R11, R3
    MOV R5, R3
    ADDS R2, #8
    STR R2, [SP,#0x13328+var_132E4]
    ADD.W R2, R10, #0xFFFFFFFF
    STR R2, [SP,#0x13328+var_13328]
loc_29C66:
    ADD.W R2, SP, #0x13328+var_128
    ADDS R3, #1
    ADD.W R2, R2, #0x128
    STR R3, [SP,#0x13328+var_132F4]
    MOVS R1, #6
    LDR R0, [SP,#0x13328+var_13308]
    LDR R2, [R2]
    STR R3, [SP,#0x13328+var_13314]
    LDR R4, [SP,#0x13328+var_1330C]
    BLX R4
    LDR.W R10, [SP,#0x13328+var_13328]
    MOV R0, R10
    BL sub_1E6C8
    CMP.W R9, #0
    MOV R4, R0
    BLE loc_29CF6
loc_29C90:
    LDR R2, [SP,#0x13328+var_132F0]
    MOV.W R8, #0
    SUB.W R7, R2, R9
    SUB.W R6, R9, R2
    MOV R3, R7
    MOV R7, R8
    MOV R8, R3
    B loc_29CCA
loc_29CA6:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R2, R8, R7
    ADD.W R3, R3, #0x134
    LDR R3, [R3]
    LSR.W R2, R3, R2
    AND.W R2, R2, #1
loc_29CBC:
    MOV R1, R7
    MOV R0, R4
    ADDS R7, #1
    BL sub_1F258
    CMP R9, R7
    BEQ loc_29CF6
loc_29CCA:
    CMP R10, R7
    IT 
    CMPNE R7, #0
    BEQ.W loc_2A11E
loc_29CD4:
    CMP R6, R7
    BLE loc_29CA6
loc_29CD8:
    CMP R5, #0
    BEQ.W loc_2A05E
loc_29CDE:
    SUBS R5, #1
loc_29CE0:
    AND.W R2, R11, #1
    MOV R1, R7
    MOV R0, R4
    ADDS R7, #1
    BL sub_1F258
    CMP R9, R7
    MOV.W R11, R11,ASR#1
    BNE loc_29CCA
loc_29CF6:
    LDR R3, [SP,#0x13328+var_13310]
    CMP R3, #0
    BEQ.W loc_2A090
loc_29CFE:
    MOV R1, R3
    MOV R0, R4
    BL sub_1FC7C
loc_29D06:
    MOV R6, R0
    STR R0, [SP,#0x13328+var_13304]
    MOV R0, R4
    BL sub_1E6B0
    MOV R0, R6
    MOVS R1, #0
    BL sub_1F234
    MOV R4, R0
    CMP R0, #0
    BNE.W loc_2A130
loc_29D20:
    ADD.W R3, SP, #0x13328+var_6628
    LDR R7, =unk_3FED2
    MOVS R2, #1
    MOV R1, R0
    LDR R0, [SP,#0x13328+var_13304]
    MOV R6, R3
    STR R3, [SP,#0x13328+var_13320]
    BL sub_1F258
    ADD.W R3, SP, #0x13328+var_CCA8
    SUB.W R10, R6, #0x40
    ADDS R3, #0xC
    STR.W R11, [SP,#0x13328+var_13318]
    STR R5, [SP,#0x13328+var_13300]
    MOV R5, R7
    LDR.W R11, [SP,#0x13328+var_13304]
    MOVW R8, #0x198D
    LDR R7, [SP,#0x13328+var_13310]
    ADD R2, SP, #0x13328+var_132D4
    STR.W R9, [SP,#0x13328+var_132FC]
    MOV R9, R10
    MOV R10, R3
    STR R3, [SP,#0x13328+var_13324]
    STR R2, [SP,#0x13328+var_1331C]
loc_29D5E:
    LDRH.W R6, [R5,#2]!
    ADD R3, SP, #0x13328+var_132D4
    MOV R0, R11
    STR.W R6, [R3,R4,LSL#2]
    MOV R1, R6
    BL sub_1FEF0
    MOV R1, R6
    STR.W R0, [R10,R4,LSL#2]
    MOV R0, R7
    BL sub_1FEF0
    ADDS R4, #1
    CMP R4, R8
    STR.W R0, [R9,#4]!
    BNE loc_29D5E
loc_29D86:
    LDR R6, [SP,#0x13328+var_132EC]
    LDR R3, [SP,#0x13328+var_13320]
    LDR R2, [SP,#0x13328+var_132E4]
    UXTH R4, R6
    SUBS R3, #0x3C
    LDR R0, [SP,#0x13328+var_13304]
    MOV R1, R4
    MOV R7, R3
    STR R6, [R2]
    STR R3, [SP,#0x13328+var_13320]
    LDR.W R11, [SP,#0x13328+var_13318]
    LDR R5, [SP,#0x13328+var_13300]
    LDR.W R9, [SP,#0x13328+var_132FC]
    BL sub_1FEF0
    LDR R2, [SP,#0x13328+var_132E8]
    MOV R1, R4
    MOVW R4, #0x6634
    ADDS R3, R0, R6
    LDR R0, [SP,#0x13328+var_13310]
    SUBS R3, R3, R2
    LDR R2, [SP,#0x13328+var_13324]
    STR R3, [R2,R4]
    BL sub_1FEF0
    STR R0, [R7,R4]
loc_29DC0:
    LDR R1, [SP,#0x13328+var_13324]
    MOVS R2, #2
    MOV R0, R2
    LDR R3, [SP,#0x13328+var_13320]
    ADD.W R7, R1, #0x6600
    STR R5, [SP,#0x13328+var_132FC]
    LDR R2, [R1]
    ADDS R7, #0x34
    LDR R3, [R3]
    MOVS R6, #0
    STR.W R9, [SP,#0x13328+var_132F8]
    MOV R4, R2
    MOV R2, R0
    MOVT.W R2, #1
    MOV R5, R4
    LSLS R3, R3, #1
    STR R3, [SP,#0x13328+var_13318]
    MOV R0, R2
    LDR R2, [SP,#0x13328+var_1331C]
    LDR R2, [R2]
    STR R2, [SP,#0x13328+var_13300]
    LDR.W R8, [SP,#0x13328+var_13300]
    STR.W R11, [SP,#0x13328+var_13300]
    MOV R11, R0
loc_29DFA:
    MOV R1, R8
    MOV R0, R5
    BL sub_3872C
    CBZ R1, loc_29E2C
loc_29E04:
    LDR R4, [SP,#0x13328+var_13324]
    LDR.W R10, [SP,#0x13328+var_13320]
    LDR.W R9, [SP,#0x13328+var_1331C]
    B loc_29E14
loc_29E10:
    CMP R4, R7
    BEQ loc_29E4A
loc_29E14:
    LDR.W R0, [R10,#4]!
    LDR.W R3, [R4,#4]!
    LDR.W R1, [R9,#4]!
    MLA.W R0, R0, R6, R3
    BL sub_3872C
    CMP R1, #0
    BNE loc_29E10
loc_29E2C:
    ADDS R6, #2
    LDR R3, [SP,#0x13328+var_13318]
    CMP R6, R11
    ADD R5, R3
    BNE loc_29DFA
loc_29E36:
    LDR R0, [SP,#0x13328+var_13304]
    LDR.W R11, [SP,#0x13328+var_13300]
    LDR R5, [SP,#0x13328+var_132FC]
    LDR.W R9, [SP,#0x13328+var_132F8]
    BL sub_1E6B0
    LDR R3, [SP,#0x13328+var_132F4]
    B loc_29C66
loc_29E4A:
    LDR R3, [SP,#0x13328+var_13310]
    LDR.W R11, [SP,#0x13328+var_13300]
    LDR R5, [SP,#0x13328+var_132FC]
    LDR.W R9, [SP,#0x13328+var_132F8]
    CMP R3, #0
    BEQ.W loc_2A102
loc_29E5C:
    MOV R0, R6
    BL sub_1FE48
    LDR R2, [SP,#0x13328+var_13304]
    LDR R1, [SP,#0x13328+var_13310]
    MOV R4, R0
    BL sub_1FAF0
    MOV R7, R0
    MOV R0, R4
    BL sub_1E6B0
loc_29E74:
    LDR R0, [SP,#0x13328+var_13304]
    BL sub_1E6B0
    CMP.W R9, #0xC7
    IT 
    LDRLE R4, [SP,#0x13328+var_132E0]
    BLE loc_29EE6
loc_29E84:
    CMP.W R9, #0xF9
    IT 
    MOVLE R4, #0xF
    BLE loc_29EE6
loc_29E8E:
    CMP.W R9, #0x12C
    IT 
    MOVLT R4, #0xC
    BLT loc_29EE6
loc_29E98:
    CMP.W R9, #0x15E
    IT 
    MOVLT R4, #9
    BLT loc_29EE6
loc_29EA2:
    CMP.W R9, #0x190
    IT 
    MOVLT R4, #8
    BLT loc_29EE6
loc_29EAC:
    CMP.W R9, #0x1C2
    IT 
    MOVLT R4, #7
    BLT loc_29EE6
loc_29EB6:
    MOVW R3, #0x225
    CMP R9, R3
    IT 
    MOVLE R4, #6
    BLE loc_29EE6
loc_29EC2:
    MOVW R3, #0x289
    CMP R9, R3
    IT 
    MOVLE R4, #5
    BLE loc_29EE6
loc_29ECE:
    MOVW R3, #0x351
    CMP R9, R3
    IT 
    MOVLE R4, #4
    BLE loc_29EE6
loc_29EDA:
    MOVW R4, #0x513
    CMP R9, R4
    ITE 
    MOVGT R4, #2
    MOVLE R4, #3
loc_29EE6:
    MOV.W R10, #0
loc_29EEA:
    MOV R1, R10
    MOV R0, R7
    BL sub_1F234
    CLZ.W R3, R10
    LSRS R3, R3, #5
    CMP R0, R3
    BEQ.W loc_2A08A
loc_29EFE:
    MOV R1, R10
    MOV R0, R7
    BL sub_1F910
    ADD.W R10, R10, #0xFFFFFFFF
    STR R0, [SP,#0x13328+var_13320]
    MOV R0, R7
    BL sub_1E688
    STR R0, [SP,#0x13328+var_13304]
    BL sub_1ED64
    LDR R3, [SP,#0x13328+var_132F4]
    MOV R2, #0x56178
    STR R2, [SP,#0x13328+var_1331C]
    ADD R3, R4
    STR R3, [SP,#0x13328+var_13318]
    MOV R3, #0x56170
    STR R3, [SP,#0x13328+var_13324]
loc_29F32:
    LDR R0, [SP,#0x13328+var_13328]
    BL sub_1E6C8
    CMP.W R9, #0
    MOV R8, R0
    BLE loc_29F5E
loc_29F40:
    MOVS R4, #0
loc_29F42:
    CMP R5, #0
    BEQ loc_2A044
loc_29F46:
    SUBS R5, #1
loc_29F48:
    AND.W R2, R11, #1
    MOV R1, R4
    MOV R0, R8
    ADDS R4, #1
    BL sub_1F258
    CMP R9, R4
    MOV.W R11, R11,ASR#1
    BNE loc_29F42
loc_29F5E:
    MOV R0, R8
    BL sub_1E660
    MOV R1, R7
    MOV R0, R8
    BL sub_1F358
    CMP R0, #0
    BGE loc_2A04E
loc_29F70:
    LDR R3, [SP,#0x13328+var_13324]
    MOV R0, R8
    LDR R1, [R3]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_2A04E
loc_29F7E:
    ADD.W R2, SP, #0x13328+var_128
    LDR R3, [SP,#0x13328+var_13314]
    ADD.W R2, R2, #0x128
    MOVS R1, #6
    ADDS R3, #1
    LDR R0, [SP,#0x13328+var_13308]
    STR R3, [SP,#0x13328+var_13314]
    LDR R2, [R2]
    LDR R4, [SP,#0x13328+var_1330C]
    BLX R4
    LDR R1, [SP,#0x13328+var_13320]
    MOV R2, R7
    MOV R0, R8
    BL sub_20724
    MOV R6, R0
    MOV R0, R8
    BL sub_1E6B0
    LDR R3, [SP,#0x13328+var_1331C]
    MOV R0, R6
    LDR R1, [R3]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_2A056
loc_29FB6:
    LDR R1, [SP,#0x13328+var_13304]
    MOV R0, R6
    BL sub_1F358
    CMP R0, #0
    BEQ loc_2A056
loc_29FC2:
    CMP.W R10, #0
    BLE loc_2A068
loc_29FC8:
    MOV.W R8, #0
    STR R5, [SP,#0x13328+var_13300]
    MOV R5, R8
    LDR.W R8, [SP,#0x13328+var_13304]
    B loc_29FE4
loc_29FDC:
    ADDS R5, #1
    MOV R6, R4
    CMP R5, R10
    BEQ loc_2A086
loc_29FE4:
    MOV R1, R6
    MOV R2, R7
    MOV R0, R6
    BL sub_1EAC0
    MOV R4, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R4
    BL sub_1F358
    CMP R0, #0
    BNE loc_29FDC
loc_2A002:
    MOV R8, R5
    CMP R10, R8
    LDR R5, [SP,#0x13328+var_13300]
    BLE loc_2A06A
loc_2A00A:
    MOV R0, R4
    BL sub_1E6B0
loc_2A010:
    LDR R3, [SP,#0x13328+var_13314]
    LDR R2, [SP,#0x13328+var_13318]
    CMP R3, R2
    BNE loc_29F32
loc_2A018:
    LDR.W R9, [SP,#0x13328+var_13304]
    LDR R0, [SP,#0x13328+var_13320]
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    ADD.W R3, SP, #0x13328+var_128
    ADDS R3, #0xFC
    MOV R0, R7
    LDR R2, [R3]
    LDR R3, [SP,#0x13328+var_132DC]
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_2A11A
loc_2A03A:
    ADD.W SP, SP, #0x13200
    ADD SP, SP, #0x104
    POP.W {R4-R11,PC}
loc_2A044:
    BL sub_2D1F4
    MOVS R5, #7
    MOV R11, R0
    B loc_29F48
loc_2A04E:
    MOV R0, R8
    BL sub_1E6B0
    B loc_29F32
loc_2A056:
    MOV R0, R6
    BL sub_1E6B0
    B loc_2A010
loc_2A05E:
    BL sub_2D1F4
    MOVS R5, #7
    MOV R11, R0
    B loc_29CE0
loc_2A068:
    MOV R4, R6
loc_2A06A:
    MOV R0, R4
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    LDR R0, [SP,#0x13328+var_13304]
    BL sub_1E6B0
    LDR R0, [SP,#0x13328+var_13320]
    BL sub_1E6B0
    LDR R3, [SP,#0x13328+var_13314]
    B loc_29C66
loc_2A086:
    LDR R5, [SP,#0x13328+var_13300]
    B loc_2A06A
loc_2A08A:
    ADD.W R10, R10, #1
    B loc_29EEA
loc_2A090:
    ADD.W R3, SP, #0x13328+var_6628
    ADD.W R2, SP, #0x13328+var_CC28
    LDR R7, =unk_3FED2
    ADD.W R10, SP, #0x13328+var_132D8
    SUB.W R6, R2, #0x78
    SUB.W R8, R3, #0x40
    STR R3, [SP,#0x13328+var_13320]
loc_2A0A8:
    LDRH.W R3, [R7,#2]!
    MOV R0, R4
    MOV R1, R3
    STR.W R3, [R10,#4]!
    BL sub_1FEF0
    MOVS R3, #1
    STR.W R3, [R8,#4]!
    LDR R3, =unk_431EC
    CMP R7, R3
    STR.W R0, [R6,#4]!
    BNE loc_2A0A8
loc_2A0C8:
    LDR R7, [SP,#0x13328+var_132EC]
    ADD.W R2, SP, #0x13328+var_CC28
    ADD R3, SP, #0x13328+var_132D4
    SUBS R2, #0x74
    MOVW LR, #0x6634
    MOV R0, R4
    UXTH R1, R7
    MOV R6, R2
    STR R3, [SP,#0x13328+var_1331C]
    STR R2, [SP,#0x13328+var_13324]
    STR.W R7, [R3,LR]
    BL sub_1FEF0
    LDR R3, [SP,#0x13328+var_13320]
    MOVW R1, #0x6634
    MOVS R2, #1
    STR R4, [SP,#0x13328+var_13304]
    SUBS R3, #0x3C
    STR R3, [SP,#0x13328+var_13320]
    STR R2, [R3,R1]
    LDR R3, [SP,#0x13328+var_132E8]
    ADD R0, R7
    SUBS R3, R0, R3
    STR R3, [R6,R1]
    B loc_29DC0
loc_2A102:
    MOV R1, R6
    LDR R0, [SP,#0x13328+var_13304]
    BL sub_1FE60
    MOV R7, R0
    B loc_29E74
loc_2A10E:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x134
    LDR R3, [R3]
    B loc_29C42
loc_2A11A:
    BLX __stack_chk_fail
loc_2A11E:
    LDR R3, [SP,#0x13328+var_13310]
    CLZ.W R2, R3
    LSRS R2, R2, #5
    CMP R7, #0
    IT 
    ORRNE.W R2, R2, #1
    B loc_29CBC
loc_2A130:
    MOVW R3, #0xFEC8
    MOVW R1, #0x31F0
    MOVW R0, #0x31FC
    MOVT.W R3, #3
    MOVT.W R1, #4
    MOVW R2, #0x381
    MOVT.W R0, #4
    BLX __assert_fail
```
Output: R7, R0
    MOV R0, R6
    BL sub_1F258
    CMP R3, R0
    BEQ.W loc_2A090
loc_29D12:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D22
loc_29D22:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D32
loc_29D32:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D42
loc_29D42:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D52
loc_29D52:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D62
loc_29D62:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D72
loc_29D72:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D82
loc_29D82:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29D92
loc_29D92:
    ADD.W R3, SP, #0x13328+var_128
    ADD.W R3, R3, #0x128
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    LDR R3, [R3]
    CMP R3, #0
    BNE loc_29DA2
loc_29DA2:
    ADD.W R3, SP, #0x13328+var_1
############
```assembly
loc_1595C:
    MOV R3, #0x3F520
    CMP R0, R3
    BEQ.W loc_160CC
loc_1596A:
    MOVW R3, #0xFB34
    MOVW R2, #0xFB70
    MOVT.W R3, #3
    MOVT.W R2, #3
    CMP R0, R2
    IT 
    CMPNE R0, R3
    MOV R2, #0x3FBAC
    ITE 
    MOVEQ R3, #1
    MOVNE R3, #0
    CMP R0, R2
    IT 
    ORREQ.W R3, R3, #1
    CMP R3, #0
    BEQ.W loc_168B4
loc_1599C:
    ADD R1, SP, #0x150+n
    BL sub_285A4
    LDR R3, [R4,#4]
    LDR R1, [SP,#0x150+var_104]
    LDR R2, [R3,#4]
    SUBS R1, #4
    CMP R1, #0x7F
    LDR R4, [R2,#0xC]
    IT 
    MOVLE R3, #5
    ADD.W R4, R4, #7
    MOV.W R4, R4,LSR#3
    MOV.W R4, R4,LSL#1
    MOV R7, R0
    BLE loc_159E6
loc_159C2:
    ASRS R3, R1, #8
    IT 
    MOVNE R3, #1
    BEQ loc_159E4
loc_159CA:
    ADDS R0, R3, #1
    LSLS R2, R0, #3
    ASR.W R2, R1, R2
    CMP R2, #0
    BLE loc_159E4
loc_159D6:
    MOV R3, R0
    ADDS R0, R3, #1
    LSLS R2, R0, #3
    ASR.W R2, R1, R2
    CMP R2, #0
    BGT loc_159D6
loc_159E4:
    ADDS R3, #6
loc_159E6:
    LDR R2, [SP,#0x150+n]
    ADD R1, R3
    CMP R2, #0x7F
    BGT.W loc_15F6C
loc_159F0:
    CMP R2, #0x7D
    BLE.W loc_168CE
loc_159F6:
    MOVS R5, #0
loc_159F8:
    CMP R2, #0x7F
    ADD.W R3, R5, #3
    ADD R1, R3
    IT 
    MOVLE R3, #2
    BGT.W loc_15FCA
loc_15A08:
    ADD.W R9, R4, #2
    ADD R3, R1
    CMP.W R9, #0x7F
    ADD.W R10, R2, R3
    BLE.W loc_15FB8
loc_15A1A:
    MOVS.W R3, R9,ASR#8
    IT 
    MOVNE R3, #1
    BEQ loc_15A3E
loc_15A24:
    ADDS R1, R3, #1
    LSLS R2, R1, #3
    ASR.W R2, R9, R2
    CMP R2, #0
    BLE loc_15A3E
loc_15A30:
    MOV R3, R1
    ADDS R1, R3, #1
    LSLS R2, R1, #3
    ASR.W R2, R9, R2
    CMP R2, #0
    BGT loc_15A30
loc_15A3E:
    ADDS R3, #3
    ADD R3, R9
loc_15A42:
    CMP R3, #0xFF
    IT 
    MOVGT R1, #1
    BLE.W loc_16482
loc_15A4C:
    ADDS R0, R1, #1
    LSLS R2, R0, #3
    ASR.W R2, R3, R2
    CMP R2, #0
    BLE loc_15A66
loc_15A58:
    MOV R1, R0
    ADDS R0, R1, #1
    LSLS R2, R0, #3
    ASR.W R2, R3, R2
    CMP R2, #0
    BGT loc_15A58
loc_15A66:
    CMP.W R9, #0x7F
    ADD.W R1, R1, #3
    ADD R1, R10
    IT 
    MOVLE.W R10, #2
    BGT.W loc_16020
loc_15A7A:
    ADD R10, R1
    ADD R10, R9
    CMP.W R10, #0x7F
    BLE.W loc_15FF0
loc_15A86:
    MOVS.W R11, R10,ASR#8
    IT 
    MOVNE R6, #1
    BEQ.W loc_1647C
loc_15A92:
    ADDS R2, R6, #1
    LSLS R3, R2, #3
    ASR.W R3, R10, R3
    CMP R3, #0
    BLE loc_15AAC
loc_15A9E:
    MOV R6, R2
    ADDS R2, R6, #1
    LSLS R3, R2, #3
    ASR.W R3, R10, R3
    CMP R3, #0
    BGT loc_15A9E
loc_15AAC:
    ADDS R6, #3
    MOVS R1, #1
    ADD R6, R10
    MOV R0, R6
    BL sub_193B8
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_1642A
loc_15AC0:
    MOVS R3, #0x30
    ADDS R1, R0, #1
    STRB R3, [R0]
    MOVS R2, #1
    CMP.W R11, #0
    BEQ loc_15ADA
loc_15ACE:
    ADDS R2, #1
    LSLS R3, R2, #3
    ASR.W R3, R10, R3
    CMP R3, #0
    BGT loc_15ACE
loc_15ADA:
    CBZ R1, loc_15AE4
loc_15ADC:
    ADDS R1, R5, #2
    ORN.W R3, R2, #0x7F
    STRB R3, [R5,#1]
loc_15AE4:
    SUBS R3, R2, #1
    LSLS R3, R3, #3
loc_15AE8:
    CBZ R1, loc_15AF4
loc_15AEA:
    ASR.W R0, R10, R3
    ADDS R1, #1
    STRB.W R0, [R1,#-1]
loc_15AF4:
    SUBS R3, #8
    CMN.W R3, #8
    BNE loc_15AE8
loc_15AFC:
    ADDS R0, R2, #5
    ADDS R1, R2, #2
    ADDS R2, #4
    MOV R3, R0
loc_15B04:
    ADDS.W LR, R5, R1
    BEQ loc_15B1E
loc_15B0A:
    CMP.W LR, #0xFFFFFFFF
    MOV.W R12, #2
    STRB.W R12, [R5,R1]
    ITT 
    MOVNE R1, #1
    STRBNE.W R1, [LR,#1]
loc_15B1E:
    MOV.W LR, #1
    STRB.W LR, [R5,R2]
    LDR R2, [SP,#0x150+var_104]
    ADDS R1, R5, R3
    SUB.W R2, R2, #4
    BEQ.W loc_16410
loc_15B32:
    CMP R2, #0x7F
    MOV.W R12, #4
    STRB.W R12, [R5,R3]
    ADD.W R3, R1, LR
    BLE.W loc_160BA
loc_15B44:
    LSRS R1, R2, #8
    BEQ loc_15B5C
loc_15B48:
    MOV.W LR, #1
loc_15B4C:
    ADD.W LR, LR, #1
    MOV.W R1, LR,LSL#3
    ASR.W R1, R2, R1
    CMP R1, #0
    BGT loc_15B4C
loc_15B5C:
    CMP R3, #0
    BEQ.W loc_1659A
loc_15B62:
    ORN.W R1, LR, #0x7F
    STRB R1, [R3]
    ADDS R1, R3, #1
loc_15B6A:
    ADD.W R3, LR, #0xFFFFFFFF
    LSLS R3, R3, #3
loc_15B70:
    CBZ R1, loc_15B7C
loc_15B72:
    ASR.W R12, R2, R3
    ADDS R1, #1
    STRB.W R12, [R1,#-1]
loc_15B7C:
    SUBS R3, #8
    CMN.W R3, #8
    BNE loc_15B70
loc_15B84:
    LDR R2, [SP,#0x150+var_104]
    ADD.W LR, LR, #2
    SUBS R2, #4
loc_15B8C:
    LDR R3, [SP,#0x150+var_150]
    ADD.W R10, R0, LR
    ADD.W R0, R5, R10
    ADDS R1, R3, #4
    BLX memcpy
    LDR R3, [SP,#0x150+var_104]
    LDR R2, [SP,#0x150+n]
    SUBS R0, R3, #4
    CMP R2, #0x7F
    ADD R10, R0
    ADD.W R3, R5, R10
    IT 
    MOVLE.W LR, #2
    BLE loc_15BE0
loc_15BB2:
    MOVS.W LR, R2,ASR#8
    IT 
    MOVNE.W LR, #1
    BEQ loc_15BDC
loc_15BBE:
    ADD.W R0, LR, #1
    LSLS R1, R0, #3
    ASR.W R1, R2, R1
    CMP R1, #0
    BLE loc_15BDC
loc_15BCC:
    MOV LR, R0
    ADD.W R0, LR, #1
    LSLS R1, R0, #3
    ASR.W R1, R2, R1
    CMP R1, #0
    BGT loc_15BCC
loc_15BDC:
    ADD.W LR, LR, #3
loc_15BE0:
    ADD LR, R2
    CMP R3, #0
    BEQ.W loc_16458
loc_15BE8:
    CMP.W LR, #0x7F
    MOV.W R2, #0xA0
    STRB R2, [R3]
    ADD.W R2, R3, #1
    BLE.W loc_16088
loc_15BFA:
    MOVS.W R3, LR,LSR#8
    IT 
    MOVEQ R1, #1
    BEQ loc_15C12
loc_15C04:
    MOVS R1, #1
loc_15C06:
    ADDS R1, #1
    LSLS R3, R1, #3
    ASR.W R3, LR, R3
    CMP R3, #0
    BGT loc_15C06
loc_15C12:
    CMP R2, #0
    BEQ.W loc_165AC
loc_15C18:
    ORN.W R3, R1, #0x7F
    STRB R3, [R2]
    ADDS R3, R2, #1
loc_15C20:
    SUBS R2, R1, #1
    LSLS R2, R2, #3
loc_15C24:
    CBZ R3, loc_15C30
loc_15C26:
    ASR.W R0, LR, R2
    ADDS R3, #1
    STRB.W R0, [R3,#-1]
loc_15C30:
    SUBS R2, #8
    CMN.W R2, #8
    BNE loc_15C24
loc_15C38:
    LDR R2, [SP,#0x150+n]
    ADDS R0, R1, #2
loc_15C3C:
    ADD R0, R10
    ADDS R1, R5, R0
    BEQ.W loc_1609E
loc_15C44:
    CMP R2, #0x7F
    MOV.W R3, #6
    STRB R3, [R5,R0]
    ADD.W R3, R1, #1
    BLE.W loc_16078
loc_15C54:
    LSRS R1, R2, #8
    IT 
    MOVEQ.W R10, #1
    BEQ loc_15C72
loc_15C5E:
    MOV.W R10, #1
loc_15C62:
    ADD.W R10, R10, #1
    MOV.W R1, R10,LSL#3
    ASR.W R1, R2, R1
    CMP R1, #0
    BGT loc_15C62
loc_15C72:
    CMP R3, #0
    BEQ.W loc_165B2
loc_15C78:
    ORN.W R1, R10, #0x7F
    STRB R1, [R3]
    ADDS R1, R3, #1
loc_15C80:
    ADD.W R3, R10, #0xFFFFFFFF
    LSLS R3, R3, #3
loc_15C86:
    CBZ R1, loc_15C92
loc_15C88:
    ASR.W LR, R2, R3
    ADDS R1, #1
    STRB.W LR, [R1,#-1]
loc_15C92:
    SUBS R3, #8
    CMN.W R3, #8
    BNE loc_15C86
loc_15C9A:
    LDR R2, [SP,#0x150+n]
    ADD.W R10, R10, #2
loc_15CA0:
    ADD R10, R0
    MOV R1, R7
    ADD.W R0, R5, R10
    BLX memcpy
    LDR R0, [SP,#0x150+n]
    CMP.W R9, #0x7F
    ADD R0, R10
    ADD.W R3, R5, R0
    IT 
    MOVLE R1, #2
    BLE loc_15CE4
loc_15CBE:
    MOVS.W R1, R9,ASR#8
    IT 
    MOVNE R1, #1
    BEQ loc_15CE2
loc_15CC8:
    ADDS R7, R1, #1
    LSLS R2, R7, #3
    ASR.W R2, R9, R2
    CMP R2, #0
    BLE loc_15CE2
loc_15CD4:
    MOV R1, R7
    ADDS R7, R1, #1
    LSLS R2, R7, #3
    ASR.W R2, R9, R2
    CMP R2, #0
    BGT loc_15CD4
loc_15CE2:
    ADDS R1, #3
loc_15CE4:
    ADD R1, R9
    CMP R3, #0
    BEQ.W loc_16444
loc_15CEC:
    CMP R1, #0x7F
    MOV.W R2, #0xA1
    STRB R2, [R3]
    ADD.W R2, R3, #1
    BLE.W loc_16054
loc_15CFC:
    LSRS R3, R1, #8
    IT 
    MOVEQ R7, #1
    BEQ loc_15D12
loc_15D04:
    MOVS R7, #1
loc_15D06:
    ADDS R7, #1
    LSLS R3, R7, #3
    ASR.W R3, R1, R3
    CMP R3, #0
    BGT loc_15D06
loc_15D12:
    CMP R2, #0
    BEQ.W loc_165A0
loc_15D18:
    ORN.W R3, R7, #0x7F
    STRB R3, [R2]
    ADDS R3, R2, #1
loc_15D20:
    SUBS R2, R7, #1
    LSLS R2, R2, #3
loc_15D24:
    CBZ R3, loc_15D30
loc_15D26:
    ASR.W LR, R1, R2
    ADDS R3, #1
    STRB.W LR, [R3,#-1]
loc_15D30:
    SUBS R2, #8
    CMN.W R2, #8
    BNE loc_15D24
loc_15D38:
    ADDS R7, #2
    ADD R0, R7
    ADDS R2, R5, R0
    BEQ.W loc_16062
loc_15D42:
    CMP.W R9, #0x7F
    MOV.W R3, #3
    ADD.W R7, R2, #1
    STRB R3, [R5,R0]
    BLE.W loc_1604A
loc_15D54:
    MOVS.W R3, R9,LSR#8
    IT 
    MOVEQ R1, #1
    BEQ loc_15D6C
loc_15D5E:
    MOVS R1, #1
loc_15D60:
    ADDS R1, #1
    LSLS R3, R1, #3
    ASR.W R3, R9, R3
    CMP R3, #0
    BGT loc_15D60
loc_15D6C:
    CMP R7, #0
    BEQ.W loc_165A6
loc_15D72:
    ADDS R2, R7, #1
    ORN.W R3, R1, #0x7F
    STRB R3, [R7]
loc_15D7A:
    SUBS R3, R1, #1
    LSLS R3, R3, #3
loc_15D7E:
    CBZ R2, loc_15D8A
loc_15D80:
    ASR.W R7, R9, R3
    ADDS R2, #1
    STRB.W R7, [R2,#-1]
loc_15D8A:
    SUBS R3, #8
    CMN.W R3, #8
    BNE loc_15D7E
loc_15D92:
    ADDS R1, #2
loc_15D94:
    ADD R0, R1
    MOVW R10, #0xA7CC
    ADDS R3, R0, #1
    MOVS R1, #0
    MOVT.W R10, #3
    STRB R1, [R5,R0]
    ADDS R2, R4, #1
    MOV R7, R1
    STR R1, [SP,#0x150+var_13C]
    ADDS R0, R5, R3
    ADD.W R1, R8, #0x27
    ADDS R4, R3, R2
    BLX memcpy
    MOVW R3, #0xA7EC
    STR R7, [SP,#0x150+var_148]
    MOVT.W R3, #3
    STR R3, [SP,#0x150+var_138]
loc_15DC2:
    LDR R3, [SP,#0x150+s]
    CMP R3, #0
    BEQ.W loc_163EC
loc_15DCA:
    ADD.W R7, R6, #8
    MOVS R1, #1
    BIC.W R7, R7, #7
    MOV R0, R7
    BL sub_193B8
    MOV R2, R6
    MOV R1, R5
    MOV R9, R0
    BLX memcpy
    MOV R1, R6
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    CMP R4, R6
    BNE.W loc_16878
loc_15DF8:
    CMP R4, R7
    BGE loc_15E08
loc_15DFC:
    SUBS R2, R7, R4
    ADD.W R0, R9, R4
    UXTB R1, R2
    BLX memset
loc_15E08:
    ADD.W R5, SP, #0x150+var_55
    ADDW R6, SP, #0x150+var_4D
    MOV R4, R5
loc_15E12:
    BL sub_2D1F4
    STRB.W R0, [R4,#1]!
    CMP R4, R6
    BNE loc_15E12
loc_15E1E:
    ADD R0, SP, #0x150+var_B4
    BL sub_28FF0
    LDR R4, [SP,#0x150+s]
    MOV R0, R4
    BLX strlen
    MOV R1, R4
    MOV R2, R0
    ADD R0, SP, #0x150+var_B4
    BL sub_29024
    MOVS R2, #8
    ADD R0, SP, #0x150+var_B4
    ADD R1, SP, #0x150+var_54
    BL sub_29024
    ADD R1, SP, #0x150+var_B4
    ADD R0, SP, #0x150+var_4C
    BL sub_29130
    ADD R0, SP, #0x150+var_B4
    BL sub_28FF0
    ADD R1, SP, #0x150+var_4C
    MOVS R2, #0x10
    ADD R0, SP, #0x150+var_B4
    BL sub_29024
    MOV R0, R4
    BLX strlen
    MOV R1, R4
    MOV R2, R0
    ADD R0, SP, #0x150+var_B4
    BL sub_29024
    MOVS R2, #8
    ADD R1, SP, #0x150+var_54
    ADD R0, SP, #0x150+var_B4
    BL sub_29024
    ADD R1, SP, #0x150+var_B4
    ADD R0, SP, #0x150+var_3C
    BL sub_29130
    MOV R3, R7
    MOV R2, R9
    ADD R1, SP, #0x150+var_54
    ADD R0, SP, #0x150+var_4C
    BL sub_22D64
    ADD R0, SP, #0x150+var_B4
    MOVS R1, #0x5C
    BL sub_194E4
    ADD R0, SP, #0x150+var_4C
    MOVS R1, #0x20
    BL sub_194E4
    LDR R0, [SP,#0x150+var_140]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R4, R0
    CBZ R0, loc_15F12
loc_15EAA:
    MOV R1, R4
    LDR R0, [SP,#0x150+var_138]
    BLX fputs
    MOV R3, R4
    MOVW R0, #0xA85C
    MOVS R2, #0x2E
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOV R11, #0x3A850
loc_15ECC:
    LDRB.W R3, [R5,#1]!
    MOV R2, R11
    MOVS R1, #1
    MOV R0, R4
    BLX __fprintf_chk
    CMP R6, R5
    BNE loc_15ECC
loc_15EDE:
    MOVW R0, #0xA858
    MOV R3, R4
    MOVT.W R0, #3
    MOVS R2, #2
    MOVS R1, #1
    BLX fwrite
loc_15EF0:
    MOVS R3, #0x40
    MOV R2, R7
    MOV R0, R4
    MOV R1, R9
    BL sub_2C190
    MOV R1, R4
    MOV R0, R10
    BLX fputs
    MOV R0, R4
    BLX fclose
    MOVS R4, #1
loc_15F0C:
    CMP.W R9, #0
    BEQ loc_15F20
loc_15F12:
    MOV R0, R9
    MOV R1, R7
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
loc_15F20:
    LDR R5, [SP,#0x150+var_148]
    CBZ R5, loc_15F32
loc_15F24:
    MOV R0, R5
    LDR R1, [SP,#0x150+var_13C]
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
loc_15F32:
    LDR R5, [SP,#0x150+var_150]
    CBZ R5, loc_15F44
loc_15F36:
    MOV R0, R5
    LDR R1, [SP,#0x150+var_104]
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
loc_15F44:
    CMP.W R8, #0
    BEQ loc_15F58
loc_15F4A:
    MOV R0, R8
    LDR R1, [SP,#0x150+var_108]
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
loc_15F58:
    LDR R3, [SP,#0x150+var_144]
    MOV R0, R4
    LDR R2, [SP,#0x150+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_16892
loc_15F66:
    ADD SP, SP, #0x12C
    POP.W {R4-R11,PC}
loc_15F6C:
    ASRS R3, R2, #8
    IT 
    MOVNE R3, #1
    BEQ loc_15F8E
loc_15F74:
    ADDS R5, R3, #1
    LSLS R0, R5, #3
    ASR.W R0, R2, R0
    CMP R0, #0
    BLE loc_15F8E
loc_15F80:
    MOV R3, R5
    ADDS R5, R3, #1
    LSLS R0, R5, #3
    ASR.W R0, R2, R0
    CMP R0, #0
    BGT loc_15F80
loc_15F8E:
    ADDS R3, #3
    ADD R3, R2
    CMP R3, #0xFF
    BLE.W loc_159F6
loc_15F98:
    MOVS R5, #1
    ADDS R6, R5, #1
    LSLS R0, R6, #3
    ASR.W R0, R3, R0
    CMP R0, #0
    BLE.W loc_159F8
loc_15FA8:
    MOV R5, R6
    ADDS R6, R5, #1
    LSLS R0, R6, #3
    ASR.W R0, R3, R0
    CMP R0, #0
    BGT loc_15FA8
loc_15FB6:
    B loc_159F8
loc_15FB8:
    ADDS R3, R4, #4
    CMP R3, #0x7F
    BGT.W loc_15A42
loc_15FC0:
    ADD.W R1, R10, #2
    MOV.W R10, #2
    B loc_15A7A
loc_15FCA:
    ASRS R3, R2, #8
    IT 
    MOVNE R3, #1
    BEQ loc_15FEC
loc_15FD2:
    ADDS R5, R3, #1
    LSLS R0, R5, #3
    ASR.W R0, R2, R0
    CMP R0, #0
    BLE loc_15FEC
loc_15FDE:
    MOV R3, R5
    ADDS R5, R3, #1
    LSLS R0, R5, #3
    ASR.W R0, R2, R0
    CMP R0, #0
    BGT loc_15FDE
loc_15FEC:
    ADDS R3, #3
    B loc_15A08
loc_15FF0:
    ADD.W R6, R10, #2
    MOVS R1, #1
    MOV R0, R6
    BL sub_193B8
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_1642A
loc_16004:
    MOV R3, R5
    MOVS R2, #0x30
    STRB.W R2, [R3],#1
    CMP R3, #0
    BEQ.W loc_16488
loc_16012:
    MOVS R3, #5
    STRB.W R10, [R5,#1]
    MOV R0, R3
    MOVS R2, #4
    MOVS R1, #2
    B loc_15B04
loc_16020:
    MOVS.W R3, R9,ASR#8
    IT 
    MOVNE R3, #1
    BEQ loc_16044
loc_1602A:
    ADDS R0, R3, #1
    LSLS R2, R0, #3
    ASR.W R2, R9, R2
    CMP R2, #0
    BLE loc_16044
loc_16036:
    MOV R3, R0
    ADDS R0, R3, #1
    LSLS R2, R0, #3
    ASR.W R2, R9, R2
    CMP R2, #0
    BGT loc_16036
loc_16044:
    ADD.W R10, R3, #3
    B loc_15A7A
loc_1604A:
    CBZ R7, loc_16050
loc_1604C:
    STRB.W R9, [R2,#1]
loc_16050:
    MOVS R1, #2
    B loc_15D94
loc_16054:
    CBZ R2, loc_16058
loc_16056:
    STRB R1, [R3,#1]
loc_16058:
    MOVS R7, #2
    ADD R0, R7
    ADDS R2, R5, R0
    BNE.W loc_15D42
loc_16062:
    CMP.W R9, #0x7F
    BLE loc_16050
loc_16068:
    MOVS.W R3, R9,LSR#8
    IT 
    MOVEQ R1, #1
    BEQ.W loc_15D7A
loc_16074:
    MOV R7, R2
    B loc_15D5E
loc_16078:
    CMP R3, #0
    BEQ.W loc_16896
loc_1607E:
    STRB R2, [R1,#1]
    MOV.W R10, #2
    LDR R2, [SP,#0x150+n]
    B loc_15CA0
loc_16088:
    CMP R2, #0
    BEQ.W loc_168A0
loc_1608E:
    MOVS R0, #2
    ADD R0, R10
    ADDS R1, R5, R0
    STRB.W LR, [R3,#1]
    LDR R2, [SP,#0x150+n]
    BNE.W loc_15C44
loc_1609E:
    CMP R2, #0x7F
    IT 
    MOVLE.W R10, #2
    BLE.W loc_15CA0
loc_160AA:
    LSRS R3, R2, #8
    IT 
    MOVEQ.W R10, #1
    BEQ.W loc_15C80
loc_160B6:
    MOV R3, R1
    B loc_15C5E
loc_160BA:
    CMP R3, #0
    BEQ.W loc_168A8
loc_160C0:
    STRB R2, [R1,#1]
    MOV.W LR, #2
    LDR R2, [SP,#0x150+var_104]
    SUBS R2, #4
    B loc_15B8C
loc_160CC:
    LDRB.W R2, [R8,#1]
    LDRB.W R3, [R8]
    LDRB.W R4, [R8,#3]
    LSLS R2, R2, #0x10
    LDRB.W R1, [R8,#2]
    ORR.W R2, R2, R3,LSL#24
    LDR R3, [SP,#0x150+var_108]
    ORRS R4, R2
    ORR.W R4, R4, R1,LSL#8
    ADDS R4, #4
    SUBS R6, R3, R4
    CMP R6, #3
    BGT loc_161E8
loc_160F2:
    MOV.W R11, #0xFFFFFFFF
    MOVS R5, #0
loc_160F8:
    ADD R4, R6
    SUBS R6, R3, R4
    CMP R6, #3
    BGT loc_161B6
loc_16100:
    MOV.W R9, #0xFFFFFFFF
    MOVS R2, #0
    STR R2, [SP,#0x150+var_148]
loc_16108:
    ADD R4, R6
    SUBS R7, R3, R4
    CMP R7, #3
    BGT loc_16180
loc_16110:
    MOV.W R6, #0xFFFFFFFF
    MOVS R2, #0
    STR R2, [SP,#0x150+var_134]
loc_16118:
    ADD R7, R4
    SUB.W R10, R3, R7
    CMP.W R10, #3
    BGT loc_1614E
loc_16124:
    MOV.W R7, #0xFFFFFFFF
    MOVS R4, #0
loc_1612A:
    LDR.W R10, [SP,#0x150+var_104]
    CMP.W R10, #3
    BGT loc_16218
loc_16134:
    MOVW R1, #0xA624
    MOVW R0, #0xA824
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x40B
    BLX __assert_fail
loc_1614E:
    ADD.W R4, R8, R7
    LDRB.W R0, [R8,R7]
    LDRB R3, [R4,#1]
    LDRB R2, [R4,#3]
    LDRB R1, [R4,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS R7, R0, #0
    BLT loc_16124
loc_16172:
    SUB.W R10, R10, #3
    CMP R7, R10
    IT 
    ADDLT R4, #4
    BGE loc_16124
loc_1617E:
    B loc_1612A
loc_16180:
    ADD.W R10, R8, R4
    LDRB.W R0, [R8,R4]
    LDRB.W R3, [R10,#1]
    LDRB.W R2, [R10,#3]
    LDRB.W R1, [R10,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS R6, R0, #0
    BLT loc_161B2
loc_161AA:
    SUBS R3, R7, #3
    CMP R6, R3
    BLT.W loc_16494
loc_161B2:
    LDR R3, [SP,#0x150+var_108]
    B loc_16110
loc_161B6:
    ADD.W R7, R8, R4
    LDRB.W R0, [R8,R4]
    LDRB R3, [R7,#1]
    LDRB R2, [R7,#3]
    LDRB R1, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS.W R9, R0, #0
    BLT loc_161E4
loc_161DC:
    SUBS R3, R6, #3
    CMP R9, R3
    BLT.W loc_164AA
loc_161E4:
    LDR R3, [SP,#0x150+var_108]
    B loc_16100
loc_161E8:
    ADD.W R5, R8, R4
    LDRB.W R1, [R8,R4]
    LDRB R3, [R5,#1]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R11, R0, #0
    BLT loc_16214
loc_1620C:
    SUBS R3, R6, #3
    CMP R11, R3
    BLT.W loc_164A0
loc_16214:
    LDR R3, [SP,#0x150+var_108]
    B loc_160F2
loc_16218:
    LDR R1, [SP,#0x150+var_150]
    LDRB R3, [R1,#1]
    LDRB R0, [R1]
    LDRB R2, [R1,#3]
    LSLS R3, R3, #0x10
    LDRB R1, [R1,#2]
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    CMP R0, #0
    BLT.W loc_16134
loc_1623A:
    SUB.W R10, R10, #3
    CMP R0, R10
    BGE.W loc_16134
loc_16244:
    LDR R3, [SP,#0x150+var_150]
    ADDS R1, R3, #4
    CMP R4, #0
    BEQ.W loc_16134
loc_1624E:
    CMP R1, #0
    BEQ.W loc_16134
loc_16254:
    LDR R2, [SP,#0x150+var_148]
    MOV R10, #0x3A788
    MOVS R3, #0
    STR R5, [SP,#0x150+var_F4]
    MOVS R5, #1
    STR R2, [SP,#0x150+var_EC]
    MOV R2, #0x3A7A8
    STR R2, [SP,#0x150+var_138]
    LDR R2, [SP,#0x150+var_134]
    STR R4, [SP,#0x150+var_DC]
    ADD R4, SP, #0x150+var_58
    STR R3, [SP,#0x150+var_13C]
    STR R2, [SP,#0x150+var_E4]
    MOVS R2, #6
    STR.W R11, [SP,#0x150+var_F0]
    STR.W R9, [SP,#0x150+var_E8]
    STR R3, [SP,#0x150+var_148]
    STR R6, [SP,#0x150+var_E0]
    STR R7, [SP,#0x150+var_D8]
    STR R1, [SP,#0x150+var_D4]
    STR R0, [SP,#0x150+var_D0]
    STRB.W R3, [SP,#0x150+var_58]
    STR R4, [SP,#0x150+var_FC]
    STR R5, [SP,#0x150+var_F8]
loc_16296:
    ADD.W R11, SP, #0x150+var_FC
    MOV.W R9, #0
    ADD.W R7, R11, R2,LSL#3
    MOV R4, R11
loc_162A4:
    LDR R1, [R4,#4]
    CMP R1, #0x7F
    IT 
    MOVLE R3, #2
    BLE loc_162D4
loc_162AE:
    ASRS R2, R1, #8
    IT 
    MOVNE R3, #1
    BEQ.W loc_164C2
loc_162B8:
    ADDS R0, R3, #1
    LSLS R2, R0, #3
    ASR.W R2, R1, R2
    CMP R2, #0
    BLE loc_162D2
loc_162C4:
    MOV R3, R0
    ADDS R0, R3, #1
    LSLS R2, R0, #3
    ASR.W R2, R1, R2
    CMP R2, #0
    BGT loc_162C4
loc_162D2:
    ADDS R3, #3
loc_162D4:
    ADDS R4, #8
    ADD R3, R9
    CMP R7, R4
    ADD.W R9, R1, R3
    BNE loc_162A4
loc_162E0:
    CMP.W R9, #0x7F
    BLE.W loc_164C6
loc_162E8:
    MOVS.W R4, R9,ASR#8
    IT 
    MOVNE R1, #1
    BEQ.W loc_165B8
loc_162F4:
    ADDS R2, R1, #1
    LSLS R3, R2, #3
    ASR.W R3, R9, R3
    CMP R3, #0
    BLE loc_1630E
loc_16300:
    MOV R1, R2
    ADDS R2, R1, #1
    LSLS R3, R2, #3
    ASR.W R3, R9, R3
    CMP R3, #0
    BGT loc_16300
loc_1630E:
    ADDS R6, R1, #3
    MOVS R1, #1
    ADD R6, R9
    MOV R0, R6
    BL sub_193B8
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_165C4
loc_16322:
    MOVS R2, #0x30
    ADDS R1, R0, #1
    STRB R2, [R0]
    CMP R4, #0
    BEQ.W loc_165BC
loc_1632E:
    MOVS R4, #1
loc_16330:
    ADDS R4, #1
    LSLS R3, R4, #3
    ASR.W R3, R9, R3
    CMP R3, #0
    BGT loc_16330
loc_1633C:
    CBZ R1, loc_16348
loc_1633E:
    ORN.W R2, R4, #0x7F
    ADDS R1, #1
    STRB.W R2, [R1,#-1]
loc_16348:
    SUBS R2, R4, #1
    LSLS R2, R2, #3
loc_1634C:
    CBZ R1, loc_16358
loc_1634E:
    ASR.W R3, R9, R2
    ADDS R1, #1
    STRB.W R3, [R1,#-1]
loc_16358:
    SUBS R2, #8
    CMN.W R2, #8
    BNE loc_1634C
loc_16360:
    ADDS R4, #2
loc_16362:
    ADDS R1, R5, R4
    MOV.W R9, #2
    LDR.W R2, [R11,#4]
    BEQ loc_163DC
loc_1636E:
    CMP R2, #0x7F
    STRB.W R9, [R5,R4]
    ADD.W LR, R1, #1
    BLE.W loc_164B6
loc_1637C:
    LSRS R3, R2, #8
    IT 
    MOVEQ R0, #1
    BEQ loc_16392
loc_16384:
    MOVS R0, #1
loc_16386:
    ADDS R0, #1
    LSLS R3, R0, #3
    ASR.W R3, R2, R3
    CMP R3, #0
    BGT loc_16386
loc_16392:
    CMP.W LR, #0
    BEQ.W loc_164EC
loc_1639A:
    ADD.W R1, LR, #1
    ORN.W R3, R0, #0x7F
    STRB.W R3, [LR]
loc_163A6:
    SUBS R3, R0, #1
    LSLS R3, R3, #3
loc_163AA:
    CBZ R1, loc_163B6
loc_163AC:
    ASR.W LR, R2, R3
    ADDS R1, #1
    STRB.W LR, [R1,#-1]
loc_163B6:
    SUBS R3, #8
    CMN.W R3, #8
    BNE loc_163AA
loc_163BE:
    ADDS R0, #2
loc_163C0:
    ADD R4, R0
    LDR.W R1, [R11],#8
    ADDS R0, R5, R4
    ADD R4, R2
    BLX memcpy
    CMP R7, R11
    BEQ.W loc_15DC2
loc_163D4:
    ADDS R1, R5, R4
    LDR.W R2, [R11,#4]
    BNE loc_1636E
loc_163DC:
    CMP R2, #0x7F
    BLE loc_164BE
loc_163E0:
    LSRS R3, R2, #8
    IT 
    MOVEQ R0, #1
    BEQ loc_163A6
loc_163E8:
    MOV LR, R1
    B loc_16384
loc_163EC:
    LDR R0, [SP,#0x150+var_140]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R4, R0
    CMP R0, #0
    BEQ loc_164F0
loc_16402:
    LDR R0, [SP,#0x150+var_138]
    MOV R1, R4
    MOV R7, R6
    MOV R9, R5
    BLX fputs
    B loc_15EF0
loc_16410:
    CMP R2, #0x7F
    IT 
    MOVLE.W LR, #2
    BLE.W loc_15B8C
loc_1641C:
    LSRS R3, R2, #8
    IT 
    MOVNE R3, R1
    BNE.W loc_15B48
loc_16426:
    B.W loc_15B6A
loc_1642A:
    MOVW R1, #0xA624
    MOVW R0, #0xA838
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x45D
    BLX __assert_fail
loc_16444:
    CMP R1, #0x7F
    BLE.W loc_16058
loc_1644A:
    LSRS R2, R1, #8
    IT 
    MOVEQ R7, #1
    BEQ.W loc_15D20
loc_16454:
    MOV R2, R3
    B loc_15D04
loc_16458:
    CMP.W LR, #0x7F
    IT 
    MOVLE R0, #2
    BLE.W loc_15C3C
loc_16464:
    MOVS.W R2, LR,LSR#8
    IT 
    MOVEQ R1, #1
    BEQ.W loc_15C20
loc_16470:
    MOV R2, R3
    B.W loc_15C04
loc_1647C:
    MOV R6, R11
    B.W loc_15AAC
loc_16482:
    MOVS R1, #0
    B.W loc_15A66
loc_16488:
    MOVS R3, #5
    MOVS R2, #4
    MOV R0, R3
    MOVS R1, #2
    B.W loc_15B04
loc_16494:
    ADD.W R3, R10, #4
    ADDS R7, R6, #4
    STR R3, [SP,#0x150+var_134]
    LDR R3, [SP,#0x150+var_108]
    B loc_16118
loc_164A0:
    ADDS R5, #4
    ADD.W R6, R11, #4
    LDR R3, [SP,#0x150+var_108]
    B loc_160F8
loc_164AA:
    ADDS R3, R7, #4
    ADD.W R6, R9, #4
    STR R3, [SP,#0x150+var_148]
    LDR R3, [SP,#0x150+var_108]
    B loc_16108
loc_164B6:
    CMP.W LR, #0
    BEQ loc_164BE
loc_164BC:
    STRB R2, [R1,#1]
loc_164BE:
    MOVS R0, #2
    B loc_163C0
loc_164C2:
    MOV R3, R2
    B loc_162D2
loc_164C6:
    ADD.W R6, R9, #2
    MOVS R1, #1
    MOV R0, R6
    BL sub_193B8
    MOV R5, R0
    CMP R0, #0
    BEQ loc_165C0
loc_164D8:
    MOV R2, R5
    MOVS R1, #0x30
    STRB.W R1, [R2],#1
    CMP R2, #0
    BEQ loc_165C0
loc_164E4:
    MOVS R4, #2
    STRB.W R9, [R5,#1]
    B loc_16362
loc_164EC:
    MOV R1, LR
    B loc_163A6
loc_164F0:
    MOV R7, R6
    MOV R9, R5
    LDR R4, [SP,#0x150+s]
    B loc_15F0C
loc_164F8:
    LDRB.W R2, [R8,#1]
    LDRB.W R3, [R8]
    LDRB.W R4, [R8,#3]
    LSLS R2, R2, #0x10
    LDRB.W R1, [R8,#2]
    ORR.W R2, R2, R3,LSL#24
    LDR R3, [SP,#0x150+var_108]
    ORRS R4, R2
    ORR.W R4, R4, R1,LSL#8
    ADDS R4, #4
    SUBS R5, R3, R4
    CMP R5, #3
    BGT.W loc_16822
loc_16520:
    MOV.W R2, #0xFFFFFFFF
    STR R2, [SP,#0x150+var_120]
    MOVS R2, #0
    STR R2, [SP,#0x150+var_11C]
loc_1652A:
    ADD R4, R5
    SUBS R5, R3, R4
    CMP R5, #3
    BGT.W loc_167EA
loc_16534:
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x150+var_118]
    MOVS R3, #0
    STR R3, [SP,#0x150+var_114]
loc_1653E:
    LDR R4, [SP,#0x150+var_104]
    CMP R4, #3
    ITT 
    MOVLE R3, R4
    MOVLE R5, #0
    BGT.W loc_167A6
loc_1654C:
    MOV.W R2, #0xFFFFFFFF
    STR R2, [SP,#0x150+var_130]
    MOVS R2, #0
    STR R2, [SP,#0x150+var_138]
loc_16556:
    CMP R5, #3
    BGT.W loc_16776
loc_1655C:
    MOV.W R2, #0xFFFFFFFF
    STR R2, [SP,#0x150+var_134]
    MOVS R2, #0
    STR R2, [SP,#0x150+var_128]
loc_16566:
    ADD R4, R5
    SUBS R5, R3, R4
    CMP R5, #3
    BGT.W loc_16748
loc_16570:
    MOV.W R11, #0xFFFFFFFF
    MOVS R2, #0
    STR R2, [SP,#0x150+var_12C]
loc_16578:
    ADD R4, R5
    SUBS R5, R3, R4
    CMP R5, #3
    BGT loc_165D0
loc_16580:
    MOVW R1, #0xA624
    MOVW R0, #0xA80C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x3D3
    BLX __assert_fail
loc_1659A:
    MOV R1, R3
    B.W loc_15B6A
loc_165A0:
    MOV R3, R2
    B.W loc_15D20
loc_165A6:
    MOV R2, R7
    B.W loc_15D7A
loc_165AC:
    MOV R3, R2
    B.W loc_15C20
loc_165B2:
    MOV R1, R3
    B.W loc_15C80
loc_165B8:
    MOV R1, R4
    B loc_1630E
loc_165BC:
    MOVS R4, #1
    B loc_1633C
loc_165C0:
    MOVS R4, #2
    B loc_16362
loc_165C4:
    MOV R1, R0
    CMP R4, #0
    BNE.W loc_1632E
loc_165CC:
    MOVS R4, #1
    B loc_16348
loc_165D0:
    LDR R3, [SP,#0x150+var_150]
    ADDS R6, R3, R4
    LDRB R0, [R3,R4]
    LDRB R3, [R6,#1]
    LDRB R2, [R6,#3]
    LDRB R1, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    STR R3, [SP,#0x150+var_110]
    MOV R2, R3
    BLT loc_16580
loc_165F6:
    SUBS R3, R5, #3
    CMP R2, R3
    BGE loc_16580
loc_165FC:
    LDR R2, [SP,#0x150+var_11C]
    ADDS R3, R6, #4
    STR R3, [SP,#0x150+var_10C]
    CMP R2, #0
    BEQ loc_16580
loc_16606:
    CMP R3, #0
    BEQ loc_16580
loc_1660A:
    LDR R1, [SP,#0x150+var_130]
    LDR R0, [SP,#0x150+var_138]
    BL sub_1EDA8
    LDR R1, [SP,#0x150+var_134]
    MOV R7, R0
    LDR R0, [SP,#0x150+var_128]
    BL sub_1EDA8
    MOV R1, R11
    MOV R9, R0
    LDR R0, [SP,#0x150+var_12C]
    BL sub_1EDA8
    MOV R6, R0
    MOV R0, R9
    BL sub_1ED64
    MOV R0, R6
    BL sub_1ED64
    MOV R1, R9
    MOV R0, R7
    BL sub_200D4
    MOV R1, R6
    MOV R5, R0
    MOV R0, R7
    BL sub_200D4
    MOV R4, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1F158
    ADD.W R6, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R6, R0
    MOV R0, R4
    BL sub_1F158
    ASRS R6, R6, #3
    MOVS R1, #1
    ADD.W R7, R0, #0xF
    ADDS R0, #8
    IT 
    MOVMI R0, R7
    ASRS R7, R0, #3
    ADDS R3, R6, R7
    STR R3, [SP,#0x150+var_13C]
    MOV R0, R3
    BL sub_193B8
    CMP R6, #0
    IT 
    ADDGT.W R10, R6, #0xFFFFFFFF
    MOV R3, R0
    STR R0, [SP,#0x150+var_148]
    ADD R3, R6
    IT 
    LDRGT.W R9, [SP,#0x150+var_148]
    STR R3, [SP,#0x150+var_124]
    BLE loc_166B8
loc_166A2:
    MOV R1, R10
    MOV R0, R5
    BL sub_1F20C
    ADD.W R10, R10, #0xFFFFFFFF
    CMP.W R10, #0xFFFFFFFF
    STRB.W R0, [R9],#1
    BNE loc_166A2
loc_166B8:
    CMP R7, #0
    ITT 
    ADDGT.W R10, R7, #0xFFFFFFFF
    LDRGT.W R9, [SP,#0x150+var_124]
    BLE loc_166DC
loc_166C6:
    MOV R1, R10
    MOV R0, R4
    BL sub_1F20C
    ADD.W R10, R10, #0xFFFFFFFF
    CMP.W R10, #0xFFFFFFFF
    STRB.W R0, [R9],#1
    BNE loc_166C6
loc_166DC:
    MOV R0, R5
    MOVW R10, #0xA744
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R4, [SP,#0x150+var_138]
    LDR R3, [SP,#0x150+var_114]
    ADD R0, SP, #0x150+var_58
    LDR R2, [SP,#0x150+var_120]
    MOVS R1, #1
    STR R4, [SP,#0x150+var_E4]
    MOVT.W R10, #3
    LDR R4, [SP,#0x150+var_128]
    STR R3, [SP,#0x150+var_F4]
    LDR R3, [SP,#0x150+var_118]
    STR R4, [SP,#0x150+var_DC]
    LDR R4, [SP,#0x150+var_134]
    STR R3, [SP,#0x150+var_F0]
    STR R2, [SP,#0x150+var_E8]
    MOVW R2, #0xA764
    STR R4, [SP,#0x150+var_D8]
    MOVT.W R2, #3
    LDR R4, [SP,#0x150+var_12C]
    LDR R3, [SP,#0x150+var_11C]
    STR R2, [SP,#0x150+var_138]
    STR R4, [SP,#0x150+var_D4]
    LDR R4, [SP,#0x150+var_148]
    LDR R2, [SP,#0x150+var_130]
    STR R3, [SP,#0x150+var_EC]
    MOVS R3, #0
    STR R4, [SP,#0x150+var_CC]
    LDR R4, [SP,#0x150+var_124]
    STR R2, [SP,#0x150+var_E0]
    MOVS R2, #9
    STR.W R11, [SP,#0x150+var_D0]
    STR R4, [SP,#0x150+var_C4]
    LDR R4, [SP,#0x150+var_10C]
    STR R6, [SP,#0x150+var_C8]
    STR R7, [SP,#0x150+var_C0]
    STR R4, [SP,#0x150+var_BC]
    LDR R4, [SP,#0x150+var_110]
    STR R0, [SP,#0x150+var_FC]
    STR R1, [SP,#0x150+var_F8]
    STR R4, [SP,#0x150+var_B8]
    STRB.W R3, [SP,#0x150+var_58]
    B loc_16296
loc_16748:
    LDR R3, [SP,#0x150+var_150]
    ADDS R6, R3, R4
    LDRB R0, [R3,R4]
    LDRB R3, [R6,#1]
    LDRB R2, [R6,#3]
    LDRB R1, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS.W R11, R0, #0
    BLT loc_16772
loc_1676C:
    SUBS R3, R5, #3
    CMP R11, R3
    BLT loc_16866
loc_16772:
    LDR R3, [SP,#0x150+var_104]
    B loc_16570
loc_16776:
    LDR R3, [SP,#0x150+var_150]
    ADDS R6, R3, R4
    LDRB R0, [R3,R4]
    LDRB R3, [R6,#1]
    LDRB R2, [R6,#3]
    LDRB R1, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    STR R3, [SP,#0x150+var_134]
    BLT loc_167A2
loc_1679A:
    MOV R2, R3
    SUBS R3, R5, #3
    CMP R2, R3
    BLT loc_1685C
loc_167A2:
    LDR R3, [SP,#0x150+var_104]
    B loc_1655C
loc_167A6:
    LDR R0, [SP,#0x150+var_150]
    LDRB R3, [R0,#1]
    LDRB R1, [R0]
    LDRB R2, [R0,#3]
    LSLS R3, R3, #0x10
    LDRB R0, [R0,#2]
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    STR R3, [SP,#0x150+var_130]
    ITT 
    LDRLT R3, [SP,#0x150+var_104]
    SUBLT R5, R3, R4
    BLT.W loc_1654C
loc_167CE:
    MOV R2, R3
    SUBS R3, R4, #3
    CMP R2, R3
    LDR R3, [SP,#0x150+var_104]
    IT 
    SUBGE R5, R3, R4
    BGE.W loc_1654C
loc_167DE:
    ADDS R4, R2, #4
    LDR R2, [SP,#0x150+var_150]
    SUBS R5, R3, R4
    ADDS R2, #4
    STR R2, [SP,#0x150+var_138]
    B loc_16556
loc_167EA:
    ADD.W R6, R8, R4
    LDRB.W R1, [R8,R4]
    LDRB R3, [R6,#1]
    LDRB R2, [R6,#3]
    LDRB R0, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    STR R3, [SP,#0x150+var_118]
    MOV R2, R3
    BLT.W loc_16534
loc_16812:
    SUBS R3, R5, #3
    CMP R2, R3
    ITT 
    ADDLT R3, R6, #4
    STRLT R3, [SP,#0x150+var_114]
    BGE.W loc_16534
loc_16820:
    B loc_1653E
loc_16822:
    ADD.W R6, R8, R4
    LDRB.W R1, [R8,R4]
    LDRB R3, [R6,#1]
    LDRB R2, [R6,#3]
    LDRB R0, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    STR R3, [SP,#0x150+var_120]
    BLT loc_1684E
loc_16846:
    MOV R2, R3
    SUBS R3, R5, #3
    CMP R2, R3
    BLT loc_16852
loc_1684E:
    LDR R3, [SP,#0x150+var_108]
    B loc_16520
loc_16852:
    ADDS R3, R6, #4
    ADDS R5, R2, #4
    STR R3, [SP,#0x150+var_11C]
    LDR R3, [SP,#0x150+var_108]
    B loc_1652A
loc_1685C:
    ADDS R3, R6, #4
    ADDS R5, R2, #4
    STR R3, [SP,#0x150+var_128]
    LDR R3, [SP,#0x150+var_104]
    B loc_16566
loc_16866:
    ADDS R3, R6, #4
    ADD.W R5, R11, #4
    STR R3, [SP,#0x150+var_12C]
    LDR R3, [SP,#0x150+var_104]
    B loc_16578
loc_16878:
    MOVW R1, #0xA624
    MOVW R0, #0xA840
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x4A3
    BLX __assert_fail
loc_16892:
    BLX __stack_chk_fail
loc_16896:
    LDR R2, [SP,#0x150+n]
    MOV.W R10, #2
    B.W loc_15CA0
loc_168A0:
    LDR R2, [SP,#0x150+n]
    MOVS R0, #2
    B.W loc_15C3C
loc_168A8:
    LDR R2, [SP,#0x150+var_104]
    MOV.W LR, #2
    SUBS R2, #4
    B.W loc_15B8C
loc_168B4:
    MOVW R1, #0xA624
    MOVW R0, #0xE83C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshPemWrit
    MOVW R2, #0x477
    BLX __assert_fail
loc_168CE:
    ADDS R1, #2
    MOVS R3, #2
    B.W loc_15A08
```
Output:B R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #2
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #3
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #4
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #5
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #6
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #7
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #8
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #9
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #10
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #11
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #12
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #13
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #14
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #15
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #16
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #17
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #18
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #19
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #20
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #21
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #22
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #23
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #24
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #25
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #26
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #27
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #28
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #29
    STRB R3, [R1]
    MOVS R3, #0x3F
    ADDS R1, R0, #30
    STRB R3, [R1]
    MOVS R3, #0x
############
```assembly
loc_22A6C:
    PUSH {R4-R7,LR}
    MOV R4, R0
    LDRB R6, [R0,#5]
    MOVW R7, #0x6190
    LDRB.W LR, [R0,#4]
    MOVT.W R7, #5
    LDRB R3, [R0,#1]
    MOV R5, R1
    LDRB R0, [R0]
    LSLS R6, R6, #0x10
    ORR.W R6, R6, LR,LSL#24
    LDRB.W LR, [R4,#3]
    LSLS R3, R3, #0x10
    LDRB.W R12, [R4,#6]
    LDRB R1, [R4,#7]
    ORR.W R3, R3, R0,LSL#24
    LDRB R0, [R4,#2]
    ORR.W R3, R3, LR
    LDR.W LR, [R7]
    SUB SP, SP, #0x1A4
    ORRS R1, R6
    MOV R6, R2
    ORR.W R1, R1, R12,LSL#8
    ORR.W R0, R3, R0,LSL#8
    ADD R2, SP, #0x1B8+var_1B4
    STR.W LR, [SP,#0x1B8+var_1C]
    BL sub_20D9C
    LDRB R2, [R4,#0xD]
    LDRB R1, [R4,#0xC]
    LDRB R3, [R4,#9]
    LDRB R0, [R4,#8]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#0xF]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#0xE]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#0xB]
    LDRB R0, [R4,#0xA]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_12C
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    LDRB R2, [R4,#5]
    LDRB R1, [R4,#4]
    LDRB R3, [R4,#1]
    LDRB R0, [R4]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#7]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#6]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#3]
    LDRB R0, [R4,#2]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_A4
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    ADD R2, SP, #0x1B8+var_A4
    MOV R1, R6
    MOV R0, R5
    BL sub_22384
    ADD R2, SP, #0x1B8+var_12C
    MOV R1, R6
    MOV R0, R5
    BL sub_22278
    ADD R2, SP, #0x1B8+var_1B4
    MOV R1, R6
    MOV R0, R5
    BL sub_22384
    ADD R0, SP, #0x1B8+var_1B4
    MOV.W R1, #0x198
    BL sub_194E4
    LDR R2, [SP,#0x1B8+var_1C]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_22B5C
loc_22B58:
    ADD SP, SP, #0x1A4
    POP {R4-R7,PC}
loc_22B5C:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1A4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_20D9C)",
  "external-call-type:unspecified-helper (sub_22384)",
  "external-call-type:unspecified-helper (sub_22278)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-or",
  "address-or-offset-constant:sub_20D9C",
  "address-or-offset-constant:sub_22384",
  "address-or-offset-constant:sub_22278",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-counter-pattern",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:memory-access-with-offsets",
  "inferred-algorithm:register-based-loop-control",
  "inferred-algorithm:complex-data-serialization"
]
```<|im_end|>
############
```assembly
loc_31EE0:
    PUSH {R4,LR}
    MOV R4, R0
    BL sub_31B84
    MOV R0, R4
    MOVS R1, #0xD4
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_31B84)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0xD4",
  "inferred-algorithm:input-parameter-processing",
  "inferred-algorithm:external-service-invocation",
  "inferred-algorithm:conditional-execution"
]
```<|im_end|>
############
```assembly
loc_56850:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_5689C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2239E:
    MOV R11, R1
    MOV R10, R2
    LDR.W R8, [R2,#0x80]
    LDR.W R9, [R2,#0x84]
    CMP R1, #0
    BEQ loc_2245E
loc_223AE:
    ADD.W R4, R0, #8
loc_223B2:
    LDRB.W R1, [R4,#-7]
    MOV R3, R10
    LDRB.W R2, [R4,#-3]
    ADD R0, SP, #0x40+var_34
    LDRB.W LR, [R4,#-8]
    ADDS R7, #8
    LDRB.W R5, [R4,#-4]
    LSLS R1, R1, #0x10
    LSLS R2, R2, #0x10
    LDRB.W R6, [R4,#-5]
    ORR.W R1, R1, LR,LSL#24
    LDRB.W R12, [R4,#-6]
    ORR.W R2, R2, R5,LSL#24
    LDRB.W LR, [R4,#-2]
    LDRB.W R5, [R4,#-1]
    ORRS R6, R1
    ORR.W R6, R6, R12,LSL#8
    ADDS R4, #8
    ORRS R5, R2
    ORR.W R5, R5, LR,LSL#8
    MOV R1, R6
    MOV R2, R5
    BL sub_21828
    LDR R2, [SP,#0x40+var_34]
    LDR R3, [SP,#0x40+var_30]
    CMP R11, R7
    EOR.W R2, R8, R2
    MOV R8, R6
    EOR.W R3, R9, R3
    STRB.W R2, [R4,#-0xD]
    MOV.W R1, R2,LSR#16
    STRB.W R3, [R4,#-9]
    MOV.W R0, R2,LSR#24
    STRB.W R1, [R4,#-0xF]
    MOV.W R2, R2,LSR#8
    MOV.W R1, R3,LSR#24
    STRB.W R2, [R4,#-0xE]
    MOV R9, R5
    MOV.W R2, R3,LSR#16
    STRB.W R0, [R4,#-0x10]
    STRB.W R1, [R4,#-0xC]
    MOV.W R3, R3,LSR#8
    STRB.W R2, [R4,#-0xB]
    STRB.W R3, [R4,#-0xA]
    BHI loc_223B2
loc_22446:
    LDR R3, [SP,#0x40+var_3C]
    LDR R2, [SP,#0x40+var_2C]
    STR.W R6, [R10,#0x80]
    LDR R3, [R3]
    STR.W R5, [R10,#0x84]
    CMP R2, R3
    BNE loc_22464
loc_22458:
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_2245E:
    MOV R5, R9
    MOV R6, R8
    B loc_22446
loc_22464:
    BLX __stack_chk_fail
loc_22468:
    MOVW R1, #0xF460
    MOVW R0, #0xE634
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aDesCbcDecrypt
    MOVW R2, #0x279
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-pattern:decrementing",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_21828)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operations:shift-left",
  "bitwise-operations:shift-right",
  "bitwise-operations:OR",
  "bitwise-operations:AND-clear",
  "bitwise-operations:XOR",
  "memory-access-with-offset",
  "memory-write-to-output-parameter-offset",
  "memory-read-from-output-parameter-offset",
  "memory-read-from-input-parameter-offset",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0xF460",
  "fixed-value-assignment:0xE634",
  "fixed-value-assignment:0x279",
  "fixed-value-assignment:3",
  "address-or-offset-constant:aDesCbcDecrypt",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:encryption-or-decryption",
  "inferred-algorithm:loop-based-data-manipulation"
]
```<|im_end|>
############
```assembly
loc_11214:
    ADR R12, 0x1121C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(clock_gettime_ptr - 0x5521C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:pointer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (clock_gettime)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x1121C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:clock_gettime_ptr",
  "address-or-offset-constant:0x5521C",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:time-related-functions"
]
```<|im_end|>
############
```assembly
loc_29568:
    PUSH.W {R4-R9,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0xC4
    MOV R4, R0
    MOVS R2, #0x5C
    LDR.W R3, [R9]
    MOV R8, R1
    ADD R0, SP, #0xE0+dest
    ADD.W R1, R4, #0xB8
    STR R3, [SP,#0xE0+var_24]
    BLX memcpy
    ADD R1, SP, #0xE0+dest
    ADD R0, SP, #0xE0+src
    BL sub_29130
    ADD.W R1, R4, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xE0+dest
    BLX memcpy
    LDR R3, [SP,#0xE0+var_48]
    LDR R2, [SP,#0xE0+var_50]
    LDR R1, [SP,#0xE0+var_4C]
    ADDS R3, #0x10
    ADD.W R4, R2, #0x10
    STR R3, [SP,#0xE0+var_48]
    CMP R3, #0xF
    ITE 
    MOVHI R3, R1
    ADDLS R3, R1, #1
    CMP R4, #0x3F
    STR R3, [SP,#0xE0+var_4C]
    BLS loc_29664
loc_295BC:
    ADD R4, SP, #0xE0+src
    MOV R0, R2
    MOVS R5, #0x10
    MOVS R6, #0
loc_295C4:
    ADD R3, SP, #0xE0+var_90
    MOV R1, R4
    RSB.W R2, R2, #0x40
    ADD R0, R3
    BLX memcpy
    LDR R3, [SP,#0xE0+var_50]
    LDR R7, [SP,#0xE0+var_84]
    MOV R1, SP
    RSB.W R12, R3, #0x40
    SUB.W LR, R3, #0x40
    LDR R3, [SP,#0xE0+var_88]
    ADD R5, LR
    STR R7, [SP,#0xE0+var_D4]
    ADD R4, R12
    LDR R7, [SP,#0xE0+var_80]
    STR R3, [SP,#0xE0+var_D8]
    LDR R3, [SP,#0xE0+var_74]
    STR R7, [SP,#0xE0+var_D0]
    LDR R7, [SP,#0xE0+var_7C]
    STR R3, [SP,#0xE0+var_C4]
    LDR R3, [SP,#0xE0+var_60]
    LDR R2, [SP,#0xE0+var_8C]
    STR R7, [SP,#0xE0+var_CC]
    STR R3, [SP,#0xE0+var_B0]
    LDR R7, [SP,#0xE0+var_70]
    LDR R3, [SP,#0xE0+var_5C]
    STR R2, [SP,#0xE0+var_DC]
    STR R7, [SP,#0xE0+var_C0]
    LDR R2, [SP,#0xE0+var_78]
    LDR R7, [SP,#0xE0+var_6C]
    STR R3, [SP,#0xE0+var_AC]
    LDR R3, [SP,#0xE0+var_58]
    LDR R0, [SP,#0xE0+var_90]
    STR R2, [SP,#0xE0+var_C8]
    STR R7, [SP,#0xE0+var_BC]
    LDR R2, [SP,#0xE0+var_64]
    LDR R7, [SP,#0xE0+var_68]
    STR R3, [SP,#0xE0+var_A8]
    LDR R3, [SP,#0xE0+var_54]
    STR R0, [SP,#0xE0+var_E0]
    ADD R0, SP, #0xE0+dest
    STR R2, [SP,#0xE0+var_B4]
    STR R7, [SP,#0xE0+var_B8]
    STR R3, [SP,#0xE0+var_A4]
    BL sub_28778
    CMP R5, #0x3F
    MOV.W R0, #0
    STR R6, [SP,#0xE0+var_50]
    MOV R2, R0
    BHI loc_295C4
loc_29634:
    MOV R1, R4
    ADD R0, SP, #0xE0+var_90
    MOVS R3, #0x4C
    MOV R2, R5
    BLX __memcpy_chk
    STR R5, [SP,#0xE0+var_50]
loc_29642:
    ADD R1, SP, #0xE0+dest
    ADD R0, SP, #0xE0+var_44
    BL sub_29130
    MOVS R2, #0x10
    ADD R0, SP, #0xE0+var_44
    MOV R1, R8
    BL sub_19844
    LDR R2, [SP,#0xE0+var_24]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29684
loc_2965E:
    ADD SP, SP, #0xC4
    POP.W {R4-R9,PC}
loc_29664:
    ADD R5, SP, #0xE0+src
    ADD R3, SP, #0xE0+var_20
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x70]
    STR.W R1, [R4,#-0x6C]
    STR.W R2, [R4,#-0x68]
    STR.W R3, [R4,#-0x64]
    LDR R3, [SP,#0xE0+var_50]
    ADDS R3, #0x10
    STR R3, [SP,#0xE0+var_50]
    B loc_29642
loc_29684:
    BLX __stack_chk_fail
```
Output:4C]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x60]
    STR.W R1, [R4,#-0x5C]
    STR.W R2, [R4,#-0x58]
    STR.W R3, [R4,#-0x54]
    LDR R3, [SP,#0xE0+var_50]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x50]
    STR.W R1, [R4,#-0x4C]
    STR.W R2, [R4,#-0x48]
    STR.W R3, [R4,#-0x44]
    LDR R3, [SP,#0xE0+var_54]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x40]
    STR.W R1, [R4,#-0x3C]
    STR.W R2, [R4,#-0x38]
    STR.W R3, [R4,#-0x34]
    LDR R3, [SP,#0xE0+var_58]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x30]
    STR.W R1, [R4,#-0x2C]
    STR.W R2, [R4,#-0x28]
    STR.W R3, [R4,#-0x24]
    LDR R3, [SP,#0xE0+var_5C]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x20]
    STR.W R1, [R4,#-0x1C]
    STR.W R2, [R4,#-0x18]
    STR.W R3, [R4,#-0x14]
    LDR R3, [SP,#0xE0+var_60]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x10]
    STR.W R1, [R4,#-0xc]
    STR.W R2, [R4,#-0x8]
    STR.W R3, [R4,#-0x4]
    LDR R3, [SP,#0xE0+var_64]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#0]
    STR.W R1, [R4,#4]
    STR.W R2, [R4,#8]
    STR.W R3, [R4,#12]
    LDR R3, [SP,#0xE0+var_68]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#16]
    STR.W R1, [R4,#20]
    STR.W R2, [R4,#24]
    STR.W R3, [R4,#28]
    LDR R3, [SP,#0xE0+var_6c]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#32]
    STR.W R1, [R4,#36]
    STR.W R2, [R4,#40]
    STR.W R3, [R4,#44]
    LDR R3, [SP,#0xE0+var_70]
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#48]
    STR.W R1, [R4,#52]
    STR.W R2, [R4,#56]
    STR.W R3, [R4,#60]
    LDR R3, [SP,#0xE0+var_74]
    ADDS R4, R3, R2
    LDM R
############
```assembly
loc_11338:
    ADR R12, 0x11340
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(malloc_ptr - 0x55340)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (malloc)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11340",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:malloc_ptr",
  "address-or-offset-constant:0x55340",
  "inferred-algorithm:dynamically-allocated-memory-acquisition",
  "inferred-algorithm:indirect-addressing-through-pointer"
]
```<|im_end|>
############
```assembly
loc_1151C:
    ADR R12, 0x11524
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strncmp_ptr - 0x55524)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:string-pointer",
  "arg1-type:string-pointer",
  "arg2-type:unsigned-integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strncmp)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11524",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strncmp_ptr",
  "inferred-algorithm:string-comparison",
  "inferred-algorithm:dynamic-function-pointer-resolution"
]
```<|im_end|>
############
```assembly
loc_113FC:
    ADR R12, 0x11404
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fcntl_ptr - 0x55404)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fcntl_ptr)",
  "address-or-offset-constant:0x11404",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fcntl_ptr",
  "inferred-algorithm:system-call-invocation",
  "inferred-algorithm:file-descriptor-manipulation"
]
```<|im_end|>
############
```assembly
loc_11474:
    ADR R12, 0x1147C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(write_ptr - 0x5547C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:undefined",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "address-or-offset-constant:0x1147C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:write_ptr",
  "address-or-offset-constant:-0x5547C",
  "inferred-algorithm:dynamic-memory-access",
  "inferred-algorithm:jump-table-or-virtual-method-table"
]
```<|im_end|>
############
```assembly
loc_1F294:
    LDR R2, [R1]
    PUSH {R4-R7,LR}
    MOV R5, R0
    LSLS R2, R2, #5
    SUBS R4, R2, #1
    BMI loc_1F33A
loc_1F2A0:
    ASRS R3, R4, #5
    ADDS R3, #1
    LDR.W R3, [R1,R3,LSL#2]
    CMP R3, #0
    BLT loc_1F34A
loc_1F2AC:
    MOV R3, R4
    B loc_1F2B8
loc_1F2B0:
    LDR.W R2, [R1,R2,LSL#2]
    LSRS R2, R0
    BNE loc_1F2CA
loc_1F2B8:
    SUBS R3, #1
    ADDS R2, R3, #1
    AND.W R0, R3, #0x1F
    MOV.W R2, R3,ASR#5
    ADD.W R2, R2, #1
    BNE loc_1F2B0
loc_1F2CA:
    ADDS R3, #8
    ASRS R2, R3, #3
    ADDS R0, R2, #2
    B loc_1F2DA
loc_1F2D2:
    LDR.W R3, [R1,R3,LSL#2]
    LSRS R3, R6
    BNE loc_1F2EC
loc_1F2DA:
    SUBS R4, #1
    ADDS R3, R4, #1
    AND.W R6, R4, #0x1F
    MOV.W R3, R4,ASR#5
    ADD.W R3, R3, #1
    BNE loc_1F2D2
loc_1F2EC:
    ADDS R4, #1
    MOV R6, R5
    SUBS R3, R2, #1
    ASRS R7, R4, #8
    STRB.W R7, [R6],#2
    STRB R4, [R5,#1]
    CBZ R2, locret_1F338
loc_1F2FC:
    MOV.W LR, #0
    B loc_1F304
loc_1F302:
    SUBS R3, #1
loc_1F304:
    AND.W R2, R3, #3
    CMP R3, #0
    MOV.W R4, R3,ASR#2
    ADD.W R6, R6, #1
    ADD.W R4, R4, #1
    MOV.W R2, R2,LSL#3
    MOV.W R5, #0
    BLT loc_1F350
loc_1F320:
    LDR R7, [R1]
    CMP.W R3, R7,LSL#2
    ITT 
    LDRLT.W R5, [R1,R4,LSL#2]
    LSRLT R5, R2
    STRB.W R5, [R6,#-1]
    CMP R3, #0
    BNE loc_1F302
loc_1F336:
    POP {R4-R7,PC}
loc_1F338:
    POP {R4-R7,PC}
loc_1F33A:
    ADD.W R3, R2, #0xE
    ADDS R2, #7
    IT 
    MOVMI R2, R3
    ASRS R2, R2, #3
    ADDS R0, R2, #2
    B loc_1F2EC
loc_1F34A:
    ASRS R2, R2, #3
    ADDS R0, R2, #2
    B loc_1F2EC
loc_1F350:
    STRB.W LR, [R6,#-1]
    B loc_1F302
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shift-left",
  "bitwise-shift-right",
  "bitwise-AND",
  "bitwise-OR",
  "magic-number:0xE",
  "magic-number:0x7",
  "magic-number:0x3",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:8",
  "memory-write-to-output-parameter-offset:1",
  "memory-write-to-output-parameter-offset:-1",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:conditional-data-access",
  "inferred-algorithm:register-mapping"
]
```<|im_end|>
############
```assembly
loc_2E7B8:
    PUSH.W {R4-R11,LR}
    MOV R8, #0x56190
    SUB SP, SP, #0x24
    ADD.W R9, SP, #0x48+var_40
    MOV R5, R1
    LDR.W R4, [R8]
    MOV R1, R2
    MOV R10, R0
    MOV R2, R9
    MOV R0, R5
    STR R3, [SP,#0x48+var_44]
    STR R4, [SP,#0x48+var_2C]
    BL sub_338F8
    LDR.W R0, [R10,#8]
    BL sub_1F158
    ADDS R4, R0, #6
    SUBS R0, #1
    IT 
    MOVMI R0, R4
    ASRS R4, R0, #3
    CMP R4, #0x24
    BLE.W loc_2E956
loc_2E7F8:
    MOVS R1, #1
    MOV R0, R4
    BL sub_193B8
    CMP R4, #0x25
    MOV.W R3, #1
    MOV R6, R0
    STRB R3, [R0]
    BEQ loc_2E818
loc_2E80C:
    SUB.W R2, R4, #0x25
    MOVS R1, #0xFF
    ADDS R0, #1
    BLX memset
loc_2E818:
    LDR R7, =byte_43A4C
    SUB.W R12, R4, #0x14
    SUB.W R5, R4, #0x10
    ADD.W LR, R6, R12
    ADD R5, R6
    ADD.W R11, SP, #0x48+var_3C
    LDM R7!, {R0-R3}
    CMP LR, R11
    IT 
    CMPCC R9, R5
    ADD.W R7, R6, R4
    ITE 
    MOVCS R5, #1
    MOVCC R5, #0
    TST.W LR, #3
    AND.W R5, R5, #1
    STR.W R0, [R7,#-0x24]
    IT 
    MOVNE R5, #0
    STR.W R1, [R7,#-0x20]
    STR.W R2, [R7,#-0x1C]
    STR.W R3, [R7,#-0x18]
    CMP R5, #0
    BEQ loc_2E93A
loc_2E85E:
    LDR R3, [SP,#0x48+var_40]
    STR.W R3, [R6,R12]
    LDR R3, [SP,#0x48+var_3C]
    STR.W R3, [LR,#4]
    LDR R3, [SP,#0x48+var_38]
    STR.W R3, [LR,#8]
    LDR R3, [SP,#0x48+var_34]
    STR.W R3, [LR,#0xC]
    LDR R3, [SP,#0x48+var_30]
    STR.W R3, [LR,#0x10]
loc_2E87C:
    MOV R1, R4
    MOV R0, R6
    BL sub_1EDA8
    MOV R4, R0
    MOV R0, R6
    BL sub_19494
    MOV R1, R10
    MOV R0, R4
    MOV.W R10, #7
    BL sub_2E53C
    MOV R6, R0
    MOV R0, R4
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1F158
    MOVS R1, #1
    ADD.W R5, R0, #0xE
    ADDS R0, #7
    IT 
    MOVPL R5, R0
    ASRS R4, R5, #3
    ADD.W R9, R4, #0xF
    MOV R0, R9
    BL sub_193B8
    MOV R3, #0x3A724
    ASRS R1, R5, #0x1B
    LDRH.W LR, [R3,#(word_3A728 - 0x3A724)]
    LDRB.W R12, [R3,#(byte_3A72A - 0x3A724)]
    MOV R7, R0
    LDR R0, [R3]
    MOVS R3, #0
    CMP R4, R3
    STRB R4, [R7,#0xE]
    IT 
    ADDGT.W R4, R4, #0xFFFFFFFF
    STR R0, [R7,#4]
    MOV.W R0, R5,ASR#19
    STRB.W R10, [R7,#3]
    MOV.W R5, R5,ASR#11
    STRB R3, [R7]
    STRB R5, [R7,#0xD]
    IT 
    ADDGT.W R5, R7, #0xE
    STRB R3, [R7,#1]
    STRB R3, [R7,#2]
    STRH.W LR, [R7,#8]
    STRB.W R12, [R7,#0xA]
    STRB R1, [R7,#0xB]
    STRB R0, [R7,#0xC]
    BLE loc_2E91C
loc_2E90A:
    MOV R1, R4
    MOV R0, R6
    BL sub_1F20C
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R5,#1]!
    BNE loc_2E90A
loc_2E91C:
    MOV R0, R6
    BL sub_1E6B0
    LDR R2, [SP,#0x48+var_2C]
    LDR.W R3, [R8]
    MOV R0, R7
    LDR R1, [SP,#0x48+var_44]
    CMP R2, R3
    STR.W R9, [R1]
    BNE loc_2E970
loc_2E934:
    ADD SP, SP, #0x24
    POP.W {R4-R11,PC}
loc_2E93A:
    SUB.W R2, R4, #0x15
    ADD.W R3, SP, #0x48+var_44+3
    ADD R2, R6
    ADD.W R0, SP, #0x48+var_30+3
loc_2E948:
    LDRB.W R1, [R3,#1]!
    CMP R3, R0
    STRB.W R1, [R2,#1]!
    BNE loc_2E948
loc_2E954:
    B loc_2E87C
loc_2E956:
    MOVW R1, #0x3B04
    MOVW R0, #0x3B50
    MOVT.W R1, #4
    MOVT.W R0, #4
    LDR R3, =aRsa2Sign
    MOVW R2, #0x36E
    BLX __assert_fail
loc_2E970:
    BLX __stack_chk_fail
```
Output::
    LDR W0, [R7,#0x20]
    B loc_2E98C
loc_2E93A:
    LDR R3, [SP,#0x48+var_3C]
    STR.W R3, [R6,R12]
    LDR R3, [SP,#0x48+var_38]
    STR.W R3, [LR,#4]
    LDR R3, [SP,#0x48+var_34]
    STR.W R3, [LR,#8]
    LDR R3, [SP,#0x48+var_30]
    STR.W R3, [LR,#0xC]
    LDR R3, [SP,#0x48+var_2C]
    STR.W R3, [LR,#0x10]
    MOV R1, R4
    MOV R0, R6
    BL sub_1EDA8
    MOV R4, R0
    MOV R0, R6
    BL sub_19494
    MOV R1, R10
    MOV R0, R4
    MOV.W R10, #7
    BL sub_2E53C
    MOV R6, R0
    MOV R0, R4
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1F158
    MOVS R1, #1
    ADD.W R5, R0, #0xE
    ADDS R0, #7
    IT 
    MOVPL R5, R0
    ASRS R4, R5, #3
    ADD.W R9, R4, #0xF
    MOV R0, R9
    BL sub_193B8
    MOV R3, #0x3A724
    ASRS R1, R5, #0x1B
    LDRH.W LR, [R3,#(word_3A728 - 0x3A724)]
    LDRB.W R12, [R3,#(byte_3A72A - 0x3A724)]
    MOV R7, R0
    LDR R0, [R3]
    MOVS R3, #0
    CMP R4, R3
    STRB R4, [R7,#0xE]
    IT 
    ADDGT.W R4, R4, #0xFFFFFFFF
    STR R0, [R7,#4]
    MOV.W R0, R5,ASR#19
    STRB.W R10, [R7,#3]
    MOV.W R5, R5,ASR#11
    STRB R3, [R7]
    STRB R5, [R7,#0xD]
    IT 
    ADDGT.W R5, R7, #0xE
    STRB R3, [R7,#1]
    STRB R3, [R7,#2]
    STRH.W LR, [R7,#8]
    STRB.W R12, [R7,#0xA]
    STRB R1, [R7,#0xB]
    STRB R0, [R7,#0xC]
    B loc_2E98C
loc_2E970:
    LDR W0, [R7,#0x20]
    B loc_2E98C
loc_2E98C:
    LDR R0, [SP,#0x48+var_44]
    LDR R1, [SP,#0x48+var_2C]
    ADDS R2, R1, #1
    LDR W3, [R7,#0x20]
    LDR R1, [SP,#0x48+var_3C]
    ADDS R3, R1, #1
    LDR W4, [R7,#0x20]
    LDR R1, [SP,#0x48+var_38]
    ADDS R4, R1, #1
    LDR W5, [R7,#0x20]
    LDR R1, [SP,#0x48+var_34]
    ADDS R5, R1, #1
    LDR W6, [R7,#0x20]
    LDR R1, [SP,#0x48+var_30]
    ADDS R6, R1, #1
    LDR W7,
############
```assembly
loc_12E78:
    PUSH {R0-R3}
    MOVS R2, #0xD
    PUSH {R4-R7,LR}
    SUB SP, SP, #0xC
    ADD R6, SP, #0x30+varg_r0
    MOV R5, #0x56190
    MOVW R4, #0x6198
    LDR.W R7, [R6],#4
    MOVT.W R4, #5
    LDR.W LR, [R5]
    MOVS R1, #1
    LDR R3, [R4]
    MOV R0, #aFatalError
    STR.W LR, [SP,#0x30+var_2C]
    BLX fwrite
    MOV R2, R7
    MOV R3, R6
    MOVS R1, #1
    LDR R0, [R4]
    STR R6, [SP,#0x30+var_30]
    BLX __vfprintf_chk
    LDR R1, [R4]
    MOVS R0, #0xA
    BLX fputc
    MOVS R0, #1
    BL sub_35C10
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x3c",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fwrite)",
  "external-call-type:data-processing-helper (__vfprintf_chk)",
  "external-call-type:data-processing-helper (fputc)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0xd",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x6198",
  "fixed-value-assignment:0xa",
  "fixed-value-assignment:1",
  "address-or-offset-constant:aFatalError",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:file-output",
  "inferred-algorithm:console-output",
  "inferred-algorithm:debugging-support"
]
```<|im_end|>
############
```assembly
loc_2A158:
    PUSH {R4-R6,LR}
    MOV R5, #0x1FFFF
    MOV R4, R0
    MOV R6, R1
loc_2A166:
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R4]
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R6]
    LDR R3, [R4]
    MUL.W R3, R3, R0
    CMP R3, R5
    BLS loc_2A166
loc_2A184:
    POP {R4-R6,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2D1F4)",
  "integer-size-hint:32-bit",
  "bitwise-operation:OR",
  "bitwise-mask-value:0x100",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0x1FFFF",
  "loop-counter-pattern:decrementing",
  "inferred-algorithm:array-element-update-with-multiplication",
  "inferred-algorithm:data-scaling"
]
```<|im_end|>
############
```assembly
loc_111F0:
    ADR R12, 0x111F8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(free_ptr - 0x551F8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "direct-memory-access",
  "address-or-offset-constant:0x111F8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:free_ptr",
  "address-or-offset-constant:0x551F8",
  "inferred-algorithm:dynamic-memory-management",
  "inferred-algorithm:heap-pointer-update",
  "inferred-algorithm:indirect-jump-through-indirection-table"
]
```<|im_end|>
############
```assembly
loc_11398:
    ADR R12, 0x113A0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(open_ptr - 0x553A0)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-not-present",
  "standard-function-return",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (open_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x113A0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:open_ptr",
  "inferred-algorithm:external-resource-access",
  "inferred-algorithm:file-or-network-operation"
]
```<|im_end|>
############
```assembly
loc_568CC:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_31A54:
    PUSH.W {R4-R11,LR}
    MOV R10, R0
    LDR.W R6, [R0,#0xC4]
    MOVW R9, #0x6190
    LDR.W R4, [R0,#0xC8]
    MOVT.W R9, #5
    ADD R6, R2
    LDR.W R0, [R0,#0xCC]
    CMP R2, R6
    STR.W R6, [R10,#0xC4]
    LDR.W R7, [R9]
    SUB SP, SP, #0x8C
    ITE 
    MOVLS R3, #0
    MOVHI R3, #1
    ADD R4, R3
    STR.W R4, [R10,#0xC8]
    CMP R4, R3
    LDR.W R4, [R10,#0xD0]
    MOV R5, R2
    STR R7, [SP,#0xB0+n]
    ITE 
    MOVCS R3, #0
    MOVCC R3, #1
    ADDS R6, R3, R0
    LDR.W R0, [R10,#0xC0]
    CMP R6, R3
    ITE 
    MOVCS R3, R4
    ADDCC R3, R4, #1
    STR.W R6, [R10,#0xCC]
    STR.W R3, [R10,#0xD0]
    MOV R6, R1
    CMP R0, #0
    BNE loc_31B64
loc_31AB4:
    CMP R2, #0x7F
    IT 
    ADDLE.W R7, R10, #0x40
    BLE loc_31B46
loc_31ABE:
    ADD.W R7, R10, #0x40
    ADD R4, SP, #0xB0+n
    MOV.W R8, #0
loc_31AC8:
    RSB.W R2, R0, #0x80
    MOV R1, R6
    ADD R0, R7
    BLX memcpy
    LDR.W R2, [R10,#0xC0]
    ADD R0, SP, #0xB0+var_AC
    MOV R3, R10
    RSB.W R2, R2, #0x80
    ADD R6, R2
    SUBS R5, R5, R2
loc_31AE4:
    LDRB.W LR, [R3,#0x45]
    ADDS R0, #8
    LDRB.W R11, [R3,#0x44]
    ADDS R3, #8
    LDRB.W R2, [R3,#0x39]
    LDRB.W R12, [R3,#0x38]
    MOV.W LR, LR,LSL#16
    LDRB.W R1, [R3,#0x3F]
    ORR.W LR, LR, R11,LSL#24
    LSLS R2, R2, #0x10
    LDRB.W R11, [R3,#0x3E]
    ORR.W R12, R2, R12,LSL#24
    ORR.W R1, LR, R1
    LDRB.W R2, [R3,#0x3B]
    LDRB.W LR, [R3,#0x3A]
    ORR.W R1, R1, R11,LSL#8
    ORR.W R2, R12, R2
    STR.W R1, [R0,#-4]
    ORR.W R2, R2, LR,LSL#8
    STR.W R2, [R0,#-8]
    CMP R4, R0
    BNE loc_31AE4
loc_31B32:
    MOV R0, R10
    ADD R1, SP, #0xB0+var_AC
    BL sub_30838
    CMP R5, #0x7F
    STR.W R8, [R10,#0xC0]
    MOV.W R0, #0
    BGT loc_31AC8
loc_31B46:
    MOV R1, R6
    MOV R0, R7
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R10,#0xC0]
loc_31B54:
    LDR R2, [SP,#0xB0+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_31B80
loc_31B5E:
    ADD SP, SP, #0x8C
    POP.W {R4-R11,PC}
loc_31B64:
    ADDS R3, R2, R0
    CMP R3, #0x7F
    BGT loc_31ABE
loc_31B6A:
    ADD.W R3, R10, #0x40
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0xC0]
    ADD R3, R5
    STR.W R3, [R10,#0xC0]
    B loc_31B54
loc_31B80:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:unknown",
  "arg2-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operations-shift-left",
  "bitwise-operations-shift-right",
  "bitwise-operations-or",
  "bitwise-operations-and-clear",
  "bitwise-operations-xor",
  "bitwise-mask-values:0x80",
  "bitwise-mask-values:0x7F",
  "bitwise-mask-values:0x40",
  "memory-access-patterns:byte-wise",
  "memory-access-patterns:incremental-pointer-update",
  "inferred-algorithm:buffer-copying",
  "inferred-algorithm:conditional-data-processing",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_32750:
    MOVW R2, #0x2301
    MOVW R3, #0xAB89
    MOVT.W R2, #0x6745
    MOVT.W R3, #0xEFCD
    STM.W R0, {R2,R3}
    MOVW R2, #0xDCFE
    MOVW R3, #0x5476
    MOVT.W R2, #0x98BA
    MOVT.W R3, #0x1032
    STR R2, [R0,#8]
    STR R3, [R0,#0xC]
    MOVW R2, #0xE1F0
    MOVS R3, #0
    MOVT.W R2, #0xC3D2
    STR R3, [R0,#0x54]
    STR R2, [R0,#0x10]
    STR R3, [R0,#0x5C]
    STR R3, [R0,#0x58]
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:caller-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "integer-size-hint:16-bit",
  "byte-level-operations",
  "bitwise-operation:OR",
  "bitwise-operation:XOR",
  "bitwise-operation:AND-clear",
  "bitwise-mask-value:0x2301AB89",
  "bitwise-mask-value:0x6745EFCD",
  "bitwise-mask-value:0xDCFE5476",
  "bitwise-mask-value:0x98BA1032",
  "bitwise-mask-value:0xE1F0C3D2",
  "fixed-value-assignment:0",
  "memory-write-to-output-parameter-offset",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:encryption-or-cryptography",
  "inferred-algorithm:hashing-or-checksum"
]
```<|im_end|>
############
```assembly
loc_29130:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB SP, SP, #0x94
    LDR R7, [R1,#0x50]
    MOVT.W R3, #5
    LDR.W R9, [R1,#0x58]
    CMP R7, #0x37
    STR R3, [SP,#0xB8+var_B4]
    LDR R3, [R3]
    ITE 
    RSBGT.W R5, R7, #0x78
    RSBLE.W R5, R7, #0x38
    LDR R6, [R1,#0x54]
    MOV R4, R1
    MOV R8, R0
    STR R3, [SP,#0xB8+var_2C]
    MOV R2, R5
    MOVS R3, #0x40
    ADD R0, SP, #0xB8+src
    MOVS R1, #0
    MOV.W R11, R9,LSR#29
    BLX __memset_chk
    ADD.W R2, R5, R9
    ADDS R3, R5, R7
    ORR.W R11, R11, R6,LSL#3
    CMP R5, R2
    IT 
    ADDHI R6, #1
    CMP R3, #0x3F
    STR R2, [R4,#0x58]
    MOV R0, R7
    MOV.W R2, R9,LSL#3
    STR R6, [R4,#0x54]
    STR R2, [SP,#0xB8+var_B8]
    IT 
    ADDHI.W R9, R4, #0x10
    MOV.W R2, #0x80
    IT 
    ADDHI R6, SP, #0xB8+src
    STRB.W R2, [SP,#0xB8+src]
    IT 
    MOVHI.W R10, #0
    BLS.W loc_292DA
loc_291A6:
    RSB.W R2, R7, #0x40
    MOV R1, R6
    ADD R0, R9
    BLX memcpy
    LDR R3, [R4,#0x50]
    LDR R2, [R4,#0x14]
    ADD R1, SP, #0xB8+var_AC
    SUB.W R7, R3, #0x40
    RSB.W LR, R3, #0x40
    ADD R5, R7
    LDR R3, [R4,#0x18]
    LDR R7, [R4,#0x1C]
    ADD R6, LR
    STR R2, [SP,#0xB8+var_A8]
    STR R3, [SP,#0xB8+var_A4]
    LDR R2, [R4,#0x20]
    LDR R3, [R4,#0x24]
    STR R7, [SP,#0xB8+var_A0]
    LDR R7, [R4,#0x28]
    STR R2, [SP,#0xB8+var_9C]
    STR R3, [SP,#0xB8+var_98]
    LDR R2, [R4,#0x2C]
    LDR R3, [R4,#0x30]
    STR R7, [SP,#0xB8+var_94]
    LDR R7, [R4,#0x34]
    STR R2, [SP,#0xB8+var_90]
    STR R3, [SP,#0xB8+var_8C]
    LDR R2, [R4,#0x38]
    LDR R3, [R4,#0x3C]
    STR R7, [SP,#0xB8+var_88]
    LDR R7, [R4,#0x40]
    LDR R0, [R4,#0x10]
    STR R2, [SP,#0xB8+var_84]
    STR R3, [SP,#0xB8+var_80]
    LDR R2, [R4,#0x44]
    LDR R3, [R4,#0x48]
    STR R7, [SP,#0xB8+var_7C]
    LDR R7, [R4,#0x4C]
    STR R0, [SP,#0xB8+var_AC]
    MOV R0, R4
    STR R2, [SP,#0xB8+var_78]
    STR R3, [SP,#0xB8+var_74]
    STR R7, [SP,#0xB8+var_70]
    BL sub_28778
    CMP R5, #0x3F
    MOV.W R0, #0
    STR.W R10, [R4,#0x50]
    MOV R7, R0
    BHI loc_291A6
loc_29216:
    MOV R1, R6
    MOV R0, R9
    MOV R2, R5
    BLX memcpy
    STR R5, [R4,#0x50]
loc_29222:
    LDR R5, [SP,#0xB8+var_B8]
    MOVS R2, #8
    MOV.W R3, R11,LSR#24
    ADD R1, SP, #0xB8+src
    STRB.W R3, [SP,#0xB8+var_65]
    MOV R0, R4
    MOV.W R3, R11,LSR#16
    STRB.W R3, [SP,#0xB8+var_66]
    LSRS R3, R5, #0x18
    STRB.W R3, [SP,#0xB8+var_69]
    MOV R3, R5
    STRB.W R11, [SP,#0xB8+var_68]
    LSRS R3, R2
    LSR.W R11, R11, R2
    STRB.W R5, [SP,#0xB8+src]
    LSRS R5, R5, #0x10
    STRB.W R3, [SP,#0xB8+var_6B]
    STRB.W R11, [SP,#0xB8+var_67]
    STRB.W R5, [SP,#0xB8+var_6A]
    BL sub_29024
    LDRB R3, [R4,#3]
    STRB.W R3, [R8,#3]
    LDRH R3, [R4,#2]
    STRB.W R3, [R8,#2]
    LDR R3, [R4]
    LSRS R3, R3, #8
    STRB.W R3, [R8,#1]
    LDR R3, [R4]
    STRB.W R3, [R8]
    LDRB R3, [R4,#7]
    STRB.W R3, [R8,#7]
    LDRH R3, [R4,#6]
    STRB.W R3, [R8,#6]
    LDR R3, [R4,#4]
    LSRS R3, R3, #8
    STRB.W R3, [R8,#5]
    LDR R3, [R4,#4]
    STRB.W R3, [R8,#4]
    LDRB R3, [R4,#0xB]
    STRB.W R3, [R8,#0xB]
    LDRH R3, [R4,#0xA]
    STRB.W R3, [R8,#0xA]
    LDR R3, [R4,#8]
    LSRS R3, R3, #8
    STRB.W R3, [R8,#9]
    LDR R3, [R4,#8]
    STRB.W R3, [R8,#8]
    LDRB R3, [R4,#0xF]
    STRB.W R3, [R8,#0xF]
    LDRH R3, [R4,#0xE]
    STRB.W R3, [R8,#0xE]
    LDR R3, [R4,#0xC]
    LSRS R3, R3, #8
    STRB.W R3, [R8,#0xD]
    LDR R3, [R4,#0xC]
    STRB.W R3, [R8,#0xC]
    LDR R2, [SP,#0xB8+var_2C]
    LDR R3, [SP,#0xB8+var_B4]
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_292F0
loc_292D4:
    ADD SP, SP, #0x94
    POP.W {R4-R11,PC}
loc_292DA:
    ADD.W R0, R4, #0x10
    MOV R2, R5
    ADD R0, R7
    ADD R1, SP, #0xB8+src
    BLX memcpy
    LDR R3, [R4,#0x50]
    ADD R3, R5
    STR R3, [R4,#0x50]
    B loc_29222
loc_292F0:
    BLX __stack_chk_fail
```
Output:.W R3, [SP,#0xB8+var_6C]
    LDRB R3, [R4,#2]
    STRB.W R3, [SP,#0xB8+var_6D]
    LDRB R3, [R4,#1]
    STRB.W R3, [SP,#0xB8+var_6E]
    LDRB R3, [R4,#0]
    STRB.W R3, [SP,#0xB8+var_6F]
    LDR R5, [SP,#0xB8+var_6C]
    LDR R7, [SP,#0xB8+var_6E]
    LDR R3, [SP,#0xB8+var_6D]
    LDR R2, [SP,#0xB8+var_6F]
    LDR R0, [R4,#0x50]
    STR R5, [R0,#0x10]
    STR R7, [R0,#0x14]
    STR R3, [R0,#0x18]
    STR R2, [R0,#0x1C]
    LDR R5, [SP,#0xB8+var_6B]
    LDR R7, [SP,#0xB8+var_6D]
    LDR R3, [SP,#0xB8+var_6C]
    LDR R2, [SP,#0xB8+var_6E]
    LDR R0, [R4,#0x50]
    STR R5, [R0,#0x20]
    STR R7, [R0,#0x24]
    STR R3, [R0,#0x28]
    STR R2, [R0,#0x2C]
    LDR R5, [SP,#0xB8+var_6A]
    LDR R7, [SP,#0xB8+var_6C]
    LDR R3, [SP,#0xB8+var_6B]
    LDR R2, [SP,#0xB8+var_6D]
    LDR R0, [R4,#0x50]
    STR R5, [R0,#0x30]
    STR R7, [R0,#0x34]
    STR R3, [R0,#0x38]
    STR R2, [R0,#0x3C]
    LDR R5, [SP,#0xB8+var_69]
    LDR R7, [SP,#0xB8+var_6B]
    LDR R3, [SP,#0xB8+var_6A]
    LDR R2, [SP,#0xB8+var_6C]
    LDR R0, [R4,#0x50]
    STR R5, [R0,#0x40]
    STR R7, [R0,#0x44]
    STR R3, [R0,#0x48]
    STR R2, [R0,#0x4C]
    LDR R5, [SP,#0xB8+var_68]
    LDR R7, [SP,#0xB8+var_6A]
    LDR R3, [SP,#0xB8+var_69]
    LDR R2, [SP,#0xB8+var_6B]
    LDR R0, [R4,#0x50]
    STR R5, [R0,#0x50]
    STR R7, [R0,#0x54]
    STR R3, [R0,#0x58]
    STR R2, [R0,#0x5C]
    LDR R5, [SP,#0xB8+var_67]
    LDR R7, [SP,#0xB8+var_69]
    LDR R3, [SP,#0xB8+var_68]
    LDR R2, [SP,#0xB8+var_6A]
    LDR R0, [R4,#0x50]
    STR R5, [R0,#0x60]
    STR R7, [R0,#0x64]
    STR R3, [R0,#0x68]
    STR R2, [R0,#0x6C]
    LDR R5, [SP,#0xB8+var_66]
    LDR R7, [SP,#0xB8+var_68]
    LDR R3, [SP,#0xB8+var_67]

############
```assembly
loc_11480:
    BX PC
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "standard-calling-convention-not-applicable",
  "stack-frame-management-not-applicable",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "conditional-branching-not-applicable",
  "unconditional-jumps-present",
  "unconditional-jump-target:self",
  "inferred-algorithm:infinite-loop"
]
```<|im_end|>
############
```assembly
loc_56934:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_36D14:
    PUSH {R4,LR}
    MOVW R3, #0x67DC
    MOVW R4, #0x6190
    MOVT.W R3, #5
    MOVT.W R4, #5
    SUB SP, SP, #0x10
    LDR R3, [R3]
    LDR R2, [R4]
    STR R2, [SP,#0x18+var_C]
    CBZ R3, loc_36D46
loc_36D30:
    ADD R1, SP, #0x18+var_14
    ADD R0, SP, #0x18+var_10
    BL sub_2D250
    LDR R0, [SP,#0x18+var_10]
    LDR R1, [SP,#0x18+var_14]
    BL sub_383A8
    LDR R0, [SP,#0x18+var_10]
    BL sub_19494
loc_36D46:
    LDR R2, [SP,#0x18+var_C]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_36D52
loc_36D4E:
    ADD SP, SP, #0x10
    POP {R4,PC}
loc_36D52:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2D250)",
  "external-call-type:unspecified-helper (sub_383A8)",
  "external-call-type:unspecified-helper (sub_19494)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x67DC",
  "fixed-value-assignment:0x6190",
  "fixed-value-assignment:5",
  "address-or-offset-constant:sub_2D250",
  "address-or-offset-constant:sub_383A8",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-validation-or-checksum",
  "inferred-algorithm:error-detection",
  "inferred-algorithm:routine-invocation"
]
```<|im_end|>
############
```assembly
loc_170A0:
    LDR.W R1, [R0,#0x100]
    MOV R0, #0x3F6FF9EB
    LDRB R2, [R1,#1]
    LDRB R7, [R1]
    LDRB R3, [R1,#3]
    LSLS R2, R2, #0x10
    LDRB R6, [R1,#2]
    ORR.W R2, R2, R7,LSL#24
    ORRS R3, R2
    ORR.W R3, R3, R6,LSL#8
    CMP R3, R0
    BEQ loc_170F6
loc_170C4:
    MOVS R6, #0
loc_170C6:
    MOV R0, R4
    BL sub_18A88
    LDR.W R1, [R4,#0x108]
    STR R0, [R5]
    LDR.W R0, [R4,#0x100]
    BL sub_194E4
    LDR.W R0, [R4,#0x100]
    BL sub_19494
    MOV.W R1, #0x10C
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOV R0, R6
    POP {R3-R7,PC}
loc_170F6:
    LDR.W R3, [R4,#0x104]
    CMP R3, #0xB
    BLE loc_170C4
loc_170FE:
    LDRB R3, [R1,#9]
    LDRB R6, [R1,#8]
    LDRB R2, [R1,#0xB]
    LDRB R0, [R1,#0xA]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R6,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R6, R0, #0
    BLT loc_170C4
loc_1711A:
    LDR.W R3, [R4,#0x104]
    SUBS R3, #0xB
    CMP R6, R3
    BGE loc_170C4
loc_17124:
    LDR.W R3, [R4,#0x100]
    ADD.W R7, R6, #0xC
    ADDS R2, R3, R7
    LDRB.W LR, [R3,R7]
    LDRB R1, [R2,#1]
    LDRB R3, [R2,#3]
    LDRB R0, [R2,#2]
    ORR.W R3, R3, LR,LSL#24
    ORR.W R3, R3, R1,LSL#16
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R2, R0, #0
    BLT loc_170C4
loc_1714C:
    LDR.W R3, [R4,#0x104]
    SUBS R3, R3, R7
    SUBS R3, #3
    CMP R2, R3
    BGE loc_170C4
loc_17158:
    CMP R2, #4
    BEQ loc_17174
loc_1715C:
    MOVS R6, #1
    B loc_170C6
loc_17160:
    MOV R0, #0x4555C
    BL sub_18A88
    MOV R6, R4
    STR R0, [R5]
    MOV R0, R6
    POP {R3-R7,PC}
loc_17174:
    LDR.W R0, [R4,#0x100]
    ADDS R6, #0x10
    MOV R1, #dword_3A584
    ADD R0, R6
    BLX memcmp
    CMP R0, #0
    BNE loc_1715C
loc_1718C:
    B loc_170C4
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcmp)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "external-call-type:unspecified-helper (nullsub_2)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operations-present",
  "bitwise-mask-values:0x3F6FF9EB",
  "address-or-offset-constant:dword_3A584",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:error-or-alternative-path"
]
```<|im_end|>
############
```assembly
loc_568F4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_5688C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2F27C:
    PUSH {R4,LR}
    MOVS R1, #0x6C
    MOV R4, R0
    MOVS R0, #1
    BL sub_193B8
    MOV R1, R4
    MOVS R2, #0x6C
    BLX memcpy
    POP {R4,PC}
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x6C",
  "fixed-value-assignment:1",
  "byte-level-operation:copy",
  "inferred-algorithm:data-copying",
  "inferred-algorithm:memory-mapping"
]
```<|im_end|>
############
```assembly
loc_27B88:
    PUSH {R4-R6,LR}
    MOV R5, R3
    LDR R6, [SP,#0x10+arg_0]
    BL sub_26328
    CMP R0, #0
    BEQ.W loc_27CBC
loc_27B98:
    LDR R3, [R0,#4]
    MOV R4, R0
    LDR R3, [R3]
    BICS.W R2, R3, #2
    BNE.W loc_27CC2
loc_27BA6:
    CMP R3, #2
    BEQ loc_27C70
loc_27BAA:
    CMP R6, #3
    BGT loc_27C3A
loc_27BAE:
    MOVS R5, #0
loc_27BB0:
    STR R5, [R4,#0x18]
    CMP R5, #0
    BEQ.W loc_27CEC
loc_27BB8:
    LDR R0, [R4,#4]
    LDR R3, [R0]
    CMP R3, #0
    BEQ loc_27CB0
loc_27BC0:
    CMP R3, #2
    BNE loc_27C36
loc_27BC4:
    MOV R1, R0
    MOV R0, R5
    BL sub_27AEC
    MOV R5, R0
loc_27BCE:
    CMP R5, #0
    BEQ loc_27C36
loc_27BD2:
    LDR R1, [R4,#8]
    LDR R0, [R5,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27CA2
loc_27BDE:
    LDR R0, [R4,#8]
    CBZ R0, loc_27BE6
loc_27BE2:
    BL sub_1E6B0
loc_27BE6:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_27BEE
loc_27BEA:
    BL sub_1E6B0
loc_27BEE:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_27BF6
loc_27BF2:
    BL sub_1E6B0
loc_27BF6:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_27BFE
loc_27BFA:
    BL sub_1E6B0
loc_27BFE:
    MOV R0, R4
    BL sub_19494
    CMP R5, #0
    BEQ loc_27CBC
loc_27C08:
    MOVS R4, #0
loc_27C0A:
    LDR R0, [R5,#4]
    MOVS R3, #0
    STR R3, [R5]
    CBZ R0, loc_27C16
loc_27C12:
    BL sub_1E6B0
loc_27C16:
    LDR R0, [R5,#8]
    CBZ R0, loc_27C1E
loc_27C1A:
    BL sub_1E6B0
loc_27C1E:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_27C26
loc_27C22:
    BL sub_1E6B0
loc_27C26:
    MOVS R3, #0
    MOV R0, R5
    STRB R3, [R5,#0x10]
    MOV R5, R4
    BL sub_19494
loc_27C32:
    MOV R0, R5
    POP {R4-R6,PC}
loc_27C36:
    MOVS R5, #0
    B loc_27BDE
loc_27C3A:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_27BAE
loc_27C56:
    SUBS R6, #4
    CMP R1, R6
    BGT loc_27BAE
loc_27C5C:
    ADDS R0, R5, #4
    BEQ loc_27BAE
loc_27C60:
    LDRSB.W R3, [R5,#4]
    CMP R3, #0
    BLT loc_27BAE
loc_27C68:
    BL sub_1EDA8
    MOV R5, R0
    B loc_27BB0
loc_27C70:
    CMP R6, #3
    BLE loc_27BAE
loc_27C74:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_27BAE
loc_27C90:
    SUBS R6, #4
    CMP R1, R6
    BGT loc_27BAE
loc_27C96:
    ADDS R0, R5, #4
    BEQ loc_27BAE
loc_27C9A:
    BL sub_1EE64
    MOV R5, R0
    B loc_27BB0
loc_27CA2:
    LDR R1, [R4,#0xC]
    LDR R0, [R5,#8]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27C0A
loc_27CAE:
    B loc_27BDE
loc_27CB0:
    MOV R1, R5
    ADDS R0, #0x20
    BL sub_264F8
    MOV R5, R0
    B loc_27BCE
loc_27CBC:
    MOVS R5, #0
    MOV R0, R5
    POP {R4-R6,PC}
loc_27CC2:
    LDR R0, [R0,#8]
    CBZ R0, loc_27CCA
loc_27CC6:
    BL sub_1E6B0
loc_27CCA:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_27CD2
loc_27CCE:
    BL sub_1E6B0
loc_27CD2:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_27CDA
loc_27CD6:
    BL sub_1E6B0
loc_27CDA:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_27CE2
loc_27CDE:
    BL sub_1E6B0
loc_27CE2:
    MOV R0, R4
    MOVS R5, #0
    BL sub_19494
    B loc_27C32
loc_27CEC:
    LDR R0, [R4,#8]
    CBZ R0, loc_27CF4
loc_27CF0:
    BL sub_1E6B0
loc_27CF4:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_27CFC
loc_27CF8:
    BL sub_1E6B0
loc_27CFC:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_27D04
loc_27D00:
    BL sub_1E6B0
loc_27D04:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_27D0C
loc_27D08:
    BL sub_1E6B0
loc_27D0C:
    MOV R0, R4
    BL sub_19494
    B loc_27C32
```
Output:58
    CMP R0, #0
    BEQ loc_27CB0
loc_27CA8:
    BL sub_1E6B0
loc_27CAC:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_27CAD
loc_27CAF:
    BL sub_1E6B0
loc_27CAD:
    LDR R0, [R4,#0x14]
    CBZ R0, loc_27CB6
loc_27CB2:
    BL sub_1E6B0
loc_27CB6:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_27CBF
loc_27CB4:
    BL sub_1E6B0
loc_27CBF:
    MOV R0, R4
    BL sub_19494
    CMP R5, #0
    BEQ loc_27CBC
loc_27CC2:
    LDR R3, [R0,#4]
    MOV R4, R0
    LDR R3, [R3]
    BICS.W R2, R3, #2
    BNE.W loc_27CD4
loc_27CCC:
    CMP R3, #2
    BEQ loc_27D08
loc_27CCG:
    CMP R6, #3
    BGT loc_27D2A
loc_27CD2:
    MOVS R5, #0
loc_27CD4:
    STR R5, [R4,#0x18]
    CMP R5, #0
    BEQ.W loc_27D42
loc_27CDC:
    LDR R0, [R4,#4]
    LDR R3, [R0]
    CMP R3, #0
    BEQ loc_27D20
loc_27CDD:
    CMP R3, #2
    BNE loc_27D26
loc_27CDF:
    MOV R1, R0
    MOV R0, R5
    BL sub_27AEC
    MOV R5, R0
loc_27CE7:
    CMP R5, #0
    BEQ loc_27D26
loc_27CEB:
    LDR R1, [R4,#8]
    LDR R0, [R5,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27D02
loc_27CF1:
    LDR R0, [R4,#8]
    CBZ R0, loc_27CF9
loc_27CF5:
    BL sub_1E6B0
loc_27CF9:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_27CFB
loc_27CFD:
    BL sub_1E6B0
loc_27CFB:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_27D03
loc_27D01:
    BL sub_1E6B0
loc_27D03:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_27D0B
loc_27D05:
    BL sub_1E6B0
loc_27D0B:
    MOV R0, R4
    BL sub_19494
    CMP R5, #0
    BEQ loc_27CBC
loc_27D17:
    MOVS R4, #0
loc_27D19:
    LDR R0, [R5,#4]
    MOVS R3, #0
    STR R3, [R5]
    CBZ R0, loc_27D25
loc_27D1F:
    BL sub_1E6B0
loc_27D25:
    LDR R0, [R5,#8]
    CBZ R0, loc_27D2D
loc_27D21:
    BL sub_1E6B0
loc_27D2D:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_27D35

############
```assembly
loc_1149C:
    ADR R12, 0x114A4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(access_ptr - 0x554A4)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "no-standard-calling-convention-evident",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-access",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x114A4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:access_ptr",
  "address-or-offset-constant:0x554A4",
  "inferred-algorithm:data-pointer-dereferencing",
  "inferred-algorithm:data-access-through-indirect-addressing"
]
```<|im_end|>
############
```assembly
loc_112C0:
    ADR R12, 0x112C8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__memcpy_chk_ptr - 0x552C8)]!
```
Output:```json
[
  "return-type:undefined",
  "argument-count:undefined",
  "calling-convention-hint:unknown",
  "stack-arg-use:unknown",
  "standard-calling-convention-not-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "conditional-branching-not-applicable",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__memcpy_chk_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112C8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__memcpy_chk_ptr",
  "inferred-algorithm:data-copy-or-memset"
]
```<|im_end|>
############
```assembly
loc_285B0:
    CMP.W R0, #0x180
    PUSH {R4,LR}
    BEQ loc_285F4
loc_285B8:
    MOVW R3, #0x209
    CMP R0, R3
    BEQ loc_285E6
loc_285C0:
    CMP.W R0, #0x100
    IT 
    MOVNE R3, #0
    BEQ loc_285CE
loc_285CA:
    MOV R0, R3
    POP {R4,PC}
loc_285CE:
    LDR R0, =off_3FB34
    MOV R3, #0x24FDD
    STR R0, [R2]
loc_285DA:
    MOV R4, R1
    BLX R3
    MOVS R3, #1
    STR R0, [R4]
    MOV R0, R3
    POP {R4,PC}
loc_285E6:
    LDR R0, =off_3FBAC
    MOV R3, #0x24CF9
    STR R0, [R2]
    B loc_285DA
loc_285F4:
    LDR R0, =off_3FB70
    MOV R3, #0x25085
    STR R0, [R2]
    B loc_285DA
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (BLX R3)",
  "integer-size-hint:16-bit",
  "magic-number:0x180",
  "magic-number:0x209",
  "magic-number:0x100",
  "magic-number:0x24FDD",
  "magic-number:0x24CF9",
  "magic-number:0x25085",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "address-or-offset-constant:off_3FB34",
  "address-or-offset-constant:off_3FBAC",
  "address-or-offset-constant:off_3FB70",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:register-value-check-and-update",
  "inferred-algorithm:indirect-function-call"
]
```<|im_end|>
############
```assembly
loc_1B994:
    LDRB R6, [R1,#1]
    ADDS R2, #1
    LDRB.W R8, [R1]
    CMP R2, #0x3C
    LDRB R3, [R1,#3]
    ADD.W R5, R5, #4
    LDRB.W R12, [R1,#2]
    MOV.W R6, R6,LSL#16
    ORR.W R6, R6, R8,LSL#24
    ADD.W R1, R1, #4
    ORR.W R3, R3, R6
    ORR.W R3, R3, R12,LSL#8
    STR.W R3, [R5,#-4]
    BEQ loc_1BA34
loc_1B9C2:
    CMP R2, #7
    BLE loc_1B994
loc_1B9C6:
    LDR.W R3, [R5,#-4]
    MOV.W R6, LR,LSL#1
    ANDS.W R9, R2, #7
    UBFX.W R8, R3, #0x10, #8
    UBFX.W R12, R3, #8, #8
    ADD R8, R7
    ADD R12, R7
    UXTAB.W R11, R7, R3
    ADD.W R10, R7, R3,LSR#24
    UXTB R6, R6
    BNE.W loc_1BBCA
loc_1B9EC:
    LDRB.W R3, [R8,#-0xF8]
    ANDS.W R8, LR, #0x80
    LDRB.W R12, [R12,#-0xF8]
    EOR.W LR, R3, LR
    LDRB.W R3, [R11,#-0xF8]
    LDRB.W R9, [R10,#-0xF8]
    IT 
    MOVNE.W R8, #0x1B
    ORR.W R12, R12, LR,LSL#8
    EOR.W LR, R6, R8
    ORR.W R3, R3, R12,LSL#8
    ORR.W R3, R9, R3,LSL#8
loc_1BA1A:
    ADDS R2, #1
    LDR.W R6, [R5,#-0x20]
    CMP R2, #0x3C
    ADD.W R1, R1, #4
    EOR.W R3, R3, R6
    ADD.W R5, R5, #4
    STR.W R3, [R5,#-4]
    BNE loc_1B9C2
loc_1BA34:
    MOVS R6, #0
    MOVW R3, #0xC078
    MOV R5, R6
    MOVT.W R3, #3
    MOV R1, R0
    MOVS R7, #1
    B loc_1BA50
loc_1BA46:
    ADDS R5, #1
    SUBS R1, #0x10
    ADDS R7, #1
    ADDS R6, #4
    ADDS R4, #0x10
loc_1BA50:
    RSB.W LR, R6, #0x38
    LDR.W R2, [R1,#0xE0]
    CMP R5, #0
    BEQ.W loc_1BC2C
loc_1BA5E:
    CMP R5, #0xE
    BEQ.W loc_1BC04
loc_1BA64:
    ADD.W R8, R3, R2,LSR#24
    UXTAB.W R12, R3, R2
    UBFX.W LR, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD LR, R3
    LDRB.W R9, [R8,#-0xF8]
    ADD R2, R3
    LDRB.W R8, [R12,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    CMP R7, #0xF
    LDRB.W R12, [R2,#-0xF8]
    ADD.W R9, R3, R9,LSL#2
    ADD.W R8, R3, R8,LSL#2
    ADD.W R2, R3, LR,LSL#2
    LDR.W LR, [R9,#8]
    LDR.W R8, [R8,#0x408]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E0]
    LDR.W R2, [R1,#0xE4]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E4]
    LDR.W R2, [R1,#0xE8]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E8]
    LDR.W R2, [R1,#0xEC]
    UBFX.W LR, R2, #8, #8
    UBFX.W R9, R2, #0x10, #8
    ADD LR, R3
    ADD.W R12, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W LR, R3, LR,LSL#2
    ADD.W R12, R3, R12,LSL#2
    LDR.W LR, [LR,#0xC08]
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDR.W R12, [R12,#8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W R2, [R2,#0x808]
    EOR.W R12, R8, R12
    EOR.W R2, R12, R2
    EOR.W R2, R2, LR
    STR.W R2, [R4,#0x1EC]
    BNE.W loc_1BA46
loc_1BBC6:
    POP.W {R4-R11,PC}
loc_1BBCA:
    CMP.W R9, #4
    BNE.W loc_1BA1A
loc_1BBD2:
    UBFX.W R6, R3, #0x10, #8
    ADD.W R8, R7, R3,LSR#24
    ADD R6, R7
    UBFX.W R12, R3, #8, #8
    LDRB.W R8, [R8,#-0xF8]
    ADD R12, R7
    LDRB.W R6, [R6,#-0xF8]
    UXTAB.W R9, R7, R3
    LDRB.W R3, [R12,#-0xF8]
    ORR.W R6, R6, R8,LSL#8
    LDRB.W R12, [R9,#-0xF8]
    ORR.W R3, R3, R6,LSL#8
    ORR.W R3, R12, R3,LSL#8
    B loc_1BA1A
loc_1BC04:
    STR.W R2, [R4,#0x1E0]
    ADD.W R6, R0, R6,LSL#2
    LDR.W R3, [R1,#0xE4]
    ADD.W LR, LR, #3
    STR.W R3, [R4,#0x1E4]
    LDR.W R3, [R1,#0xE8]
    STR.W R3, [R6,#0x1E8]
    LDR.W R3, [R0,LR,LSL#2]
    STR.W R3, [R6,#0x1EC]
    POP.W {R4-R11,PC}
loc_1BC2C:
    STR.W R2, [R0,#0x1E0]
    LDR.W R2, [R1,#0xE4]
    STR.W R2, [R0,#0x1E4]
    LDR.W R2, [R1,#0xE8]
    STR.W R2, [R0,#0x1E8]
    LDR.W R2, [R1,#0xEC]
    STR.W R2, [R0,#0x1EC]
    B loc_1BA46
```
Output:4]
    ADDS R5, #1
    CMP R5, #0
    BNE.W loc_1BA5E
loc_1BC04:
    ADD.W R8, R3, R2,LSR#24
    UXTAB.W R12, R3, R2
    UBFX.W LR, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD LR, R3
    LDRB.W R9, [R8,#-0xF8]
    ADD R2, R3
    LDRB.W R8, [R12,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R12, [R2,#-0xF8]
    ADD.W R9, R3, R9,LSL#2
    ADD.W R8, R3, R8,LSL#2
    ADD.W R2, R3, LR,LSL#2
    LDR.W LR, [R9,#8]
    LDR.W R8, [R8,#0x408]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E0]
    LDR.W R2, [R1,#0xE8]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E4]
    ADDS R5, #1
    CMP R5, #0
    BNE.W loc_1BA5E
loc_1BC2C:
    LDR.W R2, [R1,#0xEC]
    CMP R5, #0
    BEQ.W loc_1BD08
loc_1BC34:
    CMP R5, #0xD
    BEQ.W loc_1BD04
loc_1BC3A:
    ADD.W R8, R3, R2,LSR#24
    UXTAB.W R12, R3, R2
    UBFX.W LR, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD LR, R3
    LDRB.W R9, [R8,#-0xF8]
    ADD R2, R3
    LDRB.W R8, [R12,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R12, [R2,#-0xF8]
    ADD.W R9, R3, R9,LSL#2
    ADD.W R8, R3, R8,LSL#2
    ADD.W R2, R3, LR,LSL#
############
```assembly
loc_2CEC8:
    PUSH.W {R4-R10,LR}
    MOV R4, #0x562CC
    LDR.W R3, [R4,#(dword_567DC - 0x562CC)]
    CMP R3, #0
    BEQ locret_2CF74
loc_2CEDC:
    MOV R6, R0
    LDR.W R0, [R4,#(dword_567D4 - 0x562CC)]
    MOV R5, R1
    RSB.W R2, R0, #0x40
    CMP R1, R2
    ITT 
    ADDLT.W R3, R4, #0x4C8
    ADDLT R0, R0, R3
    BLT loc_2CF62
loc_2CEF4:
    ADD.W R7, R4, #0x4C8
    ADDW R10, R4, #0x4C7
    MOV.W R9, #0
    MOV R8, R7
loc_2CF02:
    MOV R1, R6
    ADD R0, R7
    BLX memcpy
    LDR.W R3, [R4,#(dword_567D4 - 0x562CC)]
    MOV R1, R8
    LDR R0, =byte_56780
    RSB.W R3, R3, #0x40
    ADD R6, R3
    SUBS R5, R5, R3
    BL sub_322B0
    LDR.W R3, [R4,#(dword_5677C - 0x562CC)]
    LDR R1, =(dword_5677C+3)
loc_2CF24:
    ADDS R0, R3, #1
    LDRB.W LR, [R4,R3]
    LDRB.W R2, [R1,#1]!
    CMP.W R0, #0x4B0
    EOR.W R2, LR, R2
    STRB R2, [R4,R3]
    ITE 
    MOVLT R3, R0
    MOVGE R3, #0
    CMP R10, R1
    BNE loc_2CF24
loc_2CF42:
    CMP R3, #0x13
    STR.W R3, [R4,#(dword_5677C - 0x562CC)]
    BGT loc_2CF50
loc_2CF4A:
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R3, loc_2CF78
loc_2CF50:
    CMP R5, #0x3F
    STR.W R9, [R4,#(dword_567D4 - 0x562CC)]
    MOV.W R0, #0
    MOV.W R2, #0x40
    BGT loc_2CF02
loc_2CF60:
    LDR R0, =unk_56794
loc_2CF62:
    MOV R2, R5
    MOV R1, R6
    BLX memcpy
    LDR.W R3, [R4,#(dword_567D4 - 0x562CC)]
    ADD R5, R3
    STR.W R5, [R4,#(dword_567D4 - 0x562CC)]
loc_2CF74:
    POP.W {R4-R10,PC}
loc_2CF78:
    BL sub_2CBB0
    B loc_2CF50
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:unspecified-helper (sub_322B0)",
  "external-call-type:unspecified-helper (sub_2CBB0)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x562CC",
  "fixed-value-assignment:0x40",
  "fixed-value-assignment:0x4B0",
  "fixed-value-assignment:0x13",
  "fixed-value-assignment:0x3F",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x40",
  "address-or-offset-constant:dword_567DC",
  "address-or-offset-constant:dword_567D4",
  "address-or-offset-constant:dword_5677C",
  "address-or-offset-constant:dword_567D8",
  "address-or-offset-constant:byte_56780",
  "address-or-offset-constant:unk_56794",
  "bitwise-operation:AND",
  "bitwise-operation:XOR",
  "inferred-algorithm:data-copy-and-manipulation",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:conditional-data-update",
  "inferred-algorithm:module-initialization-or-configuration"
]
```<|im_end|>
############
```assembly
loc_568FC:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1F5DC:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    MOV R11, R1
    MOV R1, R2
    MOV R5, R2
    STR R0, [SP,#0x30+var_2C]
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_1F8B6
loc_1F5F4:
    LDR R4, [R5]
    MOV R3, #0x3FFFFFE
    CMP R4, R3
    BHI.W loc_1F906
loc_1F604:
    ADDS R7, R4, #1
    MOVS R1, #4
    MOV R0, R7
    BL sub_193B8
    LSLS R2, R7, #2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    STR R4, [R6]
    MOV R2, R6
    MOV R1, R5
    LDR R0, [SP,#0x30+var_2C]
    BL sub_1E3C0
    LDR R3, [R6]
    CMP R3, #1
    BLS loc_1F646
loc_1F62A:
    LDR.W R1, [R6,R3,LSL#2]
    ADD.W R2, R6, R3,LSL#2
    CBNZ R1, loc_1F646
loc_1F634:
    SUBS R3, #1
    B loc_1F640
loc_1F638:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1F646
loc_1F640:
    CMP R3, #1
    STR R3, [R6]
    BNE loc_1F638
loc_1F646:
    MOV R1, R5
    MOV R0, R11
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_1F778
loc_1F654:
    LDR R4, [R5]
    MOV R3, #0x3FFFFFE
    CMP R4, R3
    BHI.W loc_1F906
loc_1F664:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    STR R4, [R7]
    MOV R2, R7
    MOV R1, R5
    MOV R0, R11
    BL sub_1E3C0
    LDR R4, [R7]
    CMP R4, #1
    BLS loc_1F6AC
loc_1F68E:
    LDR.W R2, [R7,R4,LSL#2]
    ADD.W R3, R7, R4,LSL#2
    CBNZ R2, loc_1F6AC
loc_1F698:
    SUBS R4, #1
    B loc_1F6A6
loc_1F69C:
    LDR.W R2, [R3,#-4]!
    SUBS R1, R4, #1
    CBNZ R2, loc_1F6AC
loc_1F6A4:
    MOV R4, R1
loc_1F6A6:
    CMP R4, #1
    STR R4, [R7]
    BNE loc_1F69C
loc_1F6AC:
    MOV R1, R7
    MOV R0, R6
    BL sub_1F358
    CMP R0, #0
    BLT loc_1F78A
loc_1F6B8:
    LDR R2, [R6]
    MOV R3, #0x3FFFFFE
    CMP R4, R2
    IT 
    MOVLT R4, R2
    CMP R4, R3
    BHI.W loc_1F906
loc_1F6CE:
    ADD.W R8, R4, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R9, R0
    BLX memset
    STR.W R4, [R9]
    CMP R4, #0
    BEQ.W loc_1F8BA
loc_1F6F0:
    MOVS R0, #1
    MOV LR, R9
    MOV R3, R0
    MOVS R2, #0
loc_1F6F8:
    LDR R1, [R6]
    MOVS R5, #0
    CMP R1, R3
    LDR R1, [R7]
    ITE 
    LDRGE.W R4, [R6,R3,LSL#2]
    MOVLT R4, #0
    CMP R1, R3
    ITET 
    LDRGE.W R1, [R7,R3,LSL#2]
    MOVLT.W R1, #0xFFFFFFFF
    MVNGE R1, R1
    ADDS R4, R4, R0
    ADC.W R5, R5, #0
    ADDS R4, R4, R1
    ADC.W R5, R5, #0
    CMP R4, #0
    IT 
    CMPNE R3, R2
    STR.W R4, [LR,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R8
    MOV R0, R5
    BNE loc_1F6F8
loc_1F738:
    STR.W R2, [R9]
    CMP R5, #0
    BEQ.W loc_1F8C0
loc_1F742:
    LDR R3, [SP,#0x30+var_2C]
    CMP R6, R3
    BEQ loc_1F75A
loc_1F748:
    LDR R1, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
loc_1F75A:
    CMP R7, R11
    BEQ loc_1F770
loc_1F75E:
    LDR R1, [R7]
    MOV R0, R7
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R7
    BL sub_19494
loc_1F770:
    MOV R0, R9
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F778:
    MOV R7, R11
    MOV R0, R6
    MOV R1, R7
    LDR.W R4, [R11]
    BL sub_1F358
    CMP R0, #0
    BGE loc_1F6B8
loc_1F78A:
    LDR R2, [R5]
    MOV R3, #0x3FFFFFE
    CMP R4, R2
    IT 
    MOVLT R4, R2
    CMP R4, R3
    MOV R8, R4
    BHI.W loc_1F906
loc_1F7A2:
    ADDS R3, R4, #1
    MOVS R1, #4
    STR R3, [SP,#0x30+var_30]
    MOV R0, R3
    MOV R9, R3
    BL sub_193B8
    MOV R3, R9
    LSLS R2, R3, #2
    MOVS R1, #0
    MOV R4, R0
    BLX memset
    STR.W R8, [R4]
    CMP.W R8, #0
    BEQ.W loc_1F8D4
loc_1F7C8:
    MOV.W R12, #1
    MOV LR, R4
    MOV R3, R12
    MOVS R2, #0
loc_1F7D2:
    LDR R1, [R5]
    MOV.W R9, #0
    CMP R1, R3
    LDR R1, [R7]
    ITE 
    LDRGE.W R0, [R5,R3,LSL#2]
    MOVLT R0, #0
    CMP R1, R3
    ITET 
    LDRGE.W R1, [R7,R3,LSL#2]
    MOVLT.W R10, #0xFFFFFFFF
    MVNGE.W R10, R1
    ADDS.W R0, R0, R12
    ADC.W R1, R9, #0
    ADDS.W R0, R0, R10
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R2, R3
    STR.W R0, [LR,#4]!
    MOV R12, R1
    LDR R1, [SP,#0x30+var_30]
    IT 
    MOVLT R2, R3
    ADDS R3, #1
    CMP R3, R1
    BNE loc_1F7D2
loc_1F81C:
    STR R2, [R4]
    CMP.W R12, #0
    BEQ loc_1F8DC
loc_1F824:
    LDR R3, [R6]
    MOV R1, #0x3FFFFFE
    CMP R2, R3
    IT 
    MOVLT R2, R3
    ADD.W R10, R2, #1
    CMP R10, R1
    BGT loc_1F906
loc_1F83C:
    ADD.W R8, R2, #2
    MOVS R1, #4
    MOVS R5, #0
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R9, R0
    BLX memset
    MOV LR, R9
    MOV R12, R5
    MOVS R3, #1
    STR.W R10, [R9]
loc_1F860:
    LDR R2, [R4]
    MOVS R1, #0
    CMP R3, R2
    LDR R2, [R6]
    ITE 
    LDRLE.W R0, [R4,R3,LSL#2]
    MOVGT R0, #0
    CMP R3, R2
    ITE 
    LDRLE.W R2, [R6,R3,LSL#2]
    MOVGT R2, #0
    ADDS.W R0, R0, R12
    ADC.W R1, R1, #0
    ADDS R0, R0, R2
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R5
    STR.W R0, [LR,#4]!
    IT 
    MOVGT R5, R3
    ADDS R3, #1
    CMP R3, R8
    MOV R12, R1
    BNE loc_1F860
loc_1F89E:
    STR.W R5, [R9]
    MOV R0, R4
    LDR R1, [R4]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    B loc_1F742
loc_1F8B6:
    LDR R6, [SP,#0x30+var_2C]
    B loc_1F646
loc_1F8BA:
    STR.W R4, [R9]
    B loc_1F742
loc_1F8C0:
    ADDS R1, R2, #1
    MOV R0, R9
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R9
    BL sub_19494
    MOV R9, R5
    B loc_1F742
loc_1F8D4:
    STR.W R8, [R4]
    MOV R2, R8
    B loc_1F824
loc_1F8DC:
    ADDS R1, R2, #1
    MOV R0, R4
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVW R1, #0xE76C
    MOVW R0, #0xE85C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aModsub
    MOVW R2, #0x523
    BLX __assert_fail
loc_1F906:
    BL sub_115CC
```
Output: #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
    LSLS R1, #2
    MOV R2, R0
    BLX memset
    LDR R3, [R6]
    MOV R0, R6
    ADDS R1, #1
   
############
```assembly
loc_2367C:
    PUSH.W {R3-R11,LR}
    MOV R4, R0
    LDR R0, [R0]
    MOV R7, R2
    MOV R6, R1
    BL sub_1F1CC
    MOV R5, R0
    LDR R0, [R4,#4]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#8]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    ADD R0, R5
    CMP R0, R7
    BLE loc_236B6
loc_236B2:
    POP.W {R3-R11,PC}
loc_236B6:
    LDR R0, [R4]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6]
    LDR R0, [R4]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,#1]
    LDR R0, [R4]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,#2]
    LDR R0, [R4]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,#3]
    LDR R0, [R4]
    BL sub_1F1CC
    CMP R0, #4
    MOV R9, R0
    SUB.W R5, R0, #5
    BEQ.W loc_238D0
loc_236F6:
    ADDS R7, R6, #3
loc_236F8:
    MOV R1, R5
    LDR R0, [R4]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_236F8
loc_2370A:
    ADD.W R5, R9, #4
    ADD.W R11, R9, #1
    ADD.W R10, R9, #2
    ADD.W R7, R9, #3
    MOV R8, R5
loc_2371C:
    LDR R0, [R4,#4]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#4]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#4]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#4]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#4]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R9, R0, #5
    BEQ loc_2377E
loc_2375E:
    ADD.W R7, R6, R8
    MOV R5, R9
loc_23764:
    MOV R1, R5
    LDR R0, [R4,#4]
    BL sub_1F20C
    SUBS R5, #1
    STRB.W R0, [R7],#1
    ADDS R0, R5, #1
    BNE loc_23764
loc_23776:
    ADD.W R8, R8, #1
    ADD R8, R9
    MOV R5, R8
loc_2377E:
    LDR R0, [R4,#8]
    ADD.W R11, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADDS R7, R5, #3
    ADD.W R10, R8, #4
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R9, R0, #5
    BEQ loc_237EE
loc_237CC:
    ADD.W R7, R8, #3
    MOV R5, R9
    ADD R7, R6
loc_237D4:
    MOV R1, R5
    LDR R0, [R4,#8]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R1, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_237D4
loc_237E6:
    ADD.W R8, R8, #5
    ADD.W R10, R9, R8
loc_237EE:
    LDR R0, [R4,#0xC]
    ADD.W R11, R10, #1
    BL sub_1F1CC
    ADD.W R9, R10, #2
    ADD.W R7, R10, #3
    ADD.W R5, R10, #4
    ADD.W R8, R6, R7
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R9, R0, #5
    BEQ loc_2385E
loc_23844:
    MOV R7, R9
loc_23846:
    MOV R1, R7
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R7, #1
    ADDS R2, R7, #1
    STRB.W R0, [R8,#1]!
    BNE loc_23846
loc_23858:
    ADD.W R5, R10, #5
    ADD R5, R9
loc_2385E:
    LDR R0, [R4,#0x10]
    ADD.W R11, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADD.W R8, R5, #3
    ADD.W R10, R5, #4
    ADD.W R7, R6, R8
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    STRB.W R0, [R6,R8]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R8, R0, #5
    BEQ loc_238E0
loc_238B4:
    MOV R6, R8
loc_238B6:
    MOV R1, R6
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    SUBS R6, #1
    ADDS R3, R6, #1
    STRB.W R0, [R7,#1]!
    BNE loc_238B6
loc_238C8:
    ADDS R0, R5, #5
    ADD R0, R8
    POP.W {R3-R11,PC}
loc_238D0:
    MOVS R5, #8
    MOVS R7, #7
    MOV R8, R5
    MOV.W R10, #6
    MOV.W R11, #5
    B loc_2371C
loc_238E0:
    MOV R0, R10
    B locret_236B2
```
Output: R11, R10, #1
    BL sub_1F1CC
    ADD.W R9, R10, #2
    ADDS R7, R10, #3
    ADD.W R10, R8, R9
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R10]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R9, R0, #5
    BEQ loc_2385E
loc_2383C:
    ADD.W R7, R10, R8
    MOV R5, R9
    ADD R7, R6
loc_23844:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R1, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_23844
loc_23856:
    ADD.W R8, R8, #7
    ADD.W R10, R9, R8
loc_2385E:
    LDR R0, [R4,#0x10]
    ADD.W R11, R10, #1
    BL sub_1F1CC
    ADD.W R9, R10, #2
    ADDS R7, R10, #3
    ADD.W R10, R8, R9
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R10]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R9, R0, #5
    BEQ loc_238DE
loc_238BC:
    ADD.W R7, R10, R8
    MOV R5, R9
    ADD R7, R6
loc_238C4:
    MOV R1, R5
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R1, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_238C4
loc_238DC:
    ADD.W R8, R8, #9
    ADD.W R10, R9, R8
loc_238DE:
    LDR R0, [R4]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB WZR, [R6]
    LDR R0
############
```assembly
loc_568BC:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1708C:

loc_17190:
    CMP R1, #5
    PUSH {R4,R5,LR}
    MOV R4, R0
    SUB SP, SP, #0xC
    BEQ loc_171B4
loc_1719A:
    CMP R1, #6
    BEQ loc_171F4
loc_1719E:
    CMP R1, #7
    BEQ loc_171A8
loc_171A2:
    MOVS R0, #0
    ADD SP, SP, #0xC
    POP {R4,R5,PC}
loc_171A8:
    MOV R1, R2
    ADD SP, SP, #0xC
    POP.W {R4,R5,LR}
    B.W sub_1708C
loc_171B4:
    STR R2, [SP,#0x18+var_14]
    BL sub_36688
    BL sub_18A88
    LDR R2, [SP,#0x18+var_14]
    MOVS R1, #0
    STR R0, [R2]
    MOV R0, R4
    BL sub_14428
    MOV R5, R0
    CMP R0, #0
    BEQ loc_171A2
loc_171D0:
    LDR R1, [R0,#0x34]
    LDR R0, [R0,#0x2C]
    LDR R4, [R5,#4]
    BL sub_194E4
    LDR R0, [R5,#0x2C]
    BL sub_19494
    MOVS R1, #0x38
loc_171E2:
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0xC
    POP {R4,R5,PC}
loc_171F4:
    STR R2, [SP,#0x18+var_14]
    BL sub_36688
    BL sub_18A88
    LDR R2, [SP,#0x18+var_14]
    MOVS R1, #0
    STR R0, [R2]
    MOV R0, R4
    BL sub_1492C
    MOV R5, R0
    CMP R0, #0
    BEQ loc_171A2
loc_17210:
    LDR R3, [R0]
    LDR R1, [R0,#0x2C]
    MOVS R4, R3
    LDR R0, [R0,#0x24]
    IT 
    MOVNE R4, #1
    BL sub_194E4
    LDR R0, [R5,#0x24]
    BL sub_19494
    MOVS R1, #0x30
    B loc_171E2
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "loop-counter-patterns:decrementing",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_36688)",
  "external-call-type:data-processing-helper (sub_18A88)",
  "external-call-type:data-processing-helper (sub_14428)",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:data-processing-helper (sub_19494)",
  "external-call-type:data-processing-helper (sub_1492C)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-comparison:5",
  "fixed-value-comparison:6",
  "fixed-value-comparison:7",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x38",
  "fixed-value-assignment:0x30",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:sub_36688",
  "address-or-offset-constant:sub_18A88",
  "address-or-offset-constant:sub_14428",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:sub_1492C",
  "inferred-algorithm:switch-case-statement",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:iteration-with-condition",
  "inferred-algorithm:data-processing-loop",
  "inferred-algorithm:resource-management",
  "inferred-algorithm:bitwise-operation"
]
```<|im_end|>
############
```assembly
loc_18F68:
    PUSH {R4,LR}
    MOV R4, R0
    CBZ R0, loc_18F9E
loc_18F6E:
    BLX strlen
    CMP R0, #0
    BLE loc_18F98
loc_18F76:
    SUBS R3, R0, #1
    ADDS R2, R4, R3
    LDRB R3, [R4,R3]
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BEQ loc_18F92
loc_18F84:
    B loc_18F98
loc_18F86:
    LDRB.W R3, [R2,#-1]!
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_18F9A
loc_18F92:
    SUBS R0, #1
    MOV R1, R0
    BNE loc_18F86
loc_18F98:
    MOV R1, R0
loc_18F9A:
    MOVS R3, #0
    STRB R3, [R4,R1]
loc_18F9E:
    MOV R0, R4
    POP {R4,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-length",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (strlen)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "byte-order-processing:reverse",
  "bitwise-operation-shift-right",
  "bitwise-operation-or-clear",
  "address-or-offset-constant:0xA",
  "address-or-offset-constant:0xD",
  "inferred-algorithm:string-manipulation",
  "inferred-algorithm:data-parsing",
  "inferred-algorithm:character-identification-or-classification"
]
```<|im_end|>
############
```assembly
loc_24FDC:
    PUSH {R3-R5,LR}
    MOV R4, #0x561A8
    LDRB.W R5, [R4,#(byte_56250 - 0x561A8)]
    CMP R5, #0
    BNE loc_25064
loc_24FEE:
    MOVS R1, #0x20
    LDR R0, =unk_3F8B0
    MOV.W R3, #0x100
    STR.W R5, [R4,#(dword_56254 - 0x561A8)]
    STR.W R3, [R4,#(dword_56260 - 0x561A8)]
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56264 - 0x561A8)]
    LDR R0, =unk_3F8D0
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56268 - 0x561A8)]
    LDR R0, =unk_3F8F0
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_5626C - 0x561A8)]
    LDR R0, =unk_3F910
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56270 - 0x561A8)]
    LDR R0, =unk_3F930
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56278 - 0x561A8)]
    LDR R0, =unk_3F950
    BL sub_1EDA8
    ADD.W R2, R4, #0xAC
    MOVW R3, #0xFD08
    STR.W R2, [R4,#(dword_56274 - 0x561A8)]
    MOVT.W R3, #3
    MOVS R2, #1
    STRB.W R5, [R4,#(byte_56284 - 0x561A8)]
    STR.W R3, [R4,#(dword_56258 - 0x561A8)]
    STR.W R3, [R4,#(dword_5625C - 0x561A8)]
    STRB.W R2, [R4,#(byte_56250 - 0x561A8)]
    STR.W R0, [R4,#(dword_5627C - 0x561A8)]
loc_25064:
    LDR R0, =dword_56254
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1EDA8)",
  "integer-size-hint:32-bit",
  "bitwise-operation-shift-left:0xFD08",
  "bitwise-operation-shift-left:0x3",
  "bitwise-operation-or",
  "address-or-offset-constant:0x561A8",
  "address-or-offset-constant:0x56250",
  "address-or-offset-constant:0x56254",
  "address-or-offset-constant:0x56258",
  "address-or-offset-constant:0x5625C",
  "address-or-offset-constant:0x56260",
  "address-or-offset-constant:0x56264",
  "address-or-offset-constant:0x56268",
  "address-or-offset-constant:0x5626C",
  "address-or-offset-constant:0x56270",
  "address-or-offset-constant:0x56274",
  "address-or-offset-constant:0x56278",
  "address-or-offset-constant:0x5627C",
  "address-or-offset-constant:0x56284",
  "address-or-offset-constant:dword_56254",
  "address-or-offset-constant:unk_3F8B0",
  "address-or-offset-constant:unk_3F8D0",
  "address-or-offset-constant:unk_3F8F0",
  "address-or-offset-constant:unk_3F910",
  "address-or-offset-constant:unk_3F930",
  "address-or-offset-constant:unk_3F950",
  "inferred-algorithm:data-loading-and-storing",
  "inferred-algorithm:loop-with-counter-pattern",
  "inferred-algorithm:bitwise-masking"
]
```<|im_end|>
############
```assembly
loc_1FEF0:
    PUSH.W {R4-R8,LR}
    MOV R7, R0
    NEGS R0, R1
    MOV R6, R1
    BL sub_3872C
    LDR R5, [R7]
    CMP R5, #0
    BLE loc_1FF2E
loc_1FF04:
    ADD.W R5, R7, R5,LSL#2
    MOV R8, R1
    MOVS R3, #0
loc_1FF0C:
    LDR.W R0, [R5],#-4
    MOV R1, R6
    MUL.W R4, R3, R8
    BL sub_3872C
    ADDS R0, R4, R1
    MOV R1, R6
    BL sub_3872C
    CMP R7, R5
    MOV R3, R1
    BNE loc_1FF0C
loc_1FF28:
    UXTH R0, R1
    POP.W {R4-R8,PC}
loc_1FF2E:
    MOVS R0, #0
    POP.W {R4-R8,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_3872C)",
  "integer-size-hint:32-bit",
  "byte-level-operations:LSL",
  "bitwise-operation:MUL",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:array-indexing",
  "inferred-algorithm:iteration-over-range",
  "inferred-algorithm:result-shifting"
]
```<|im_end|>
############
```assembly
loc_27D14:
    PUSH.W {R3-R11,LR}
    LDR R3, [R2]
    CMP R3, #3
    BGT loc_27D24
loc_27D1E:
    MOVS R0, #0
    POP.W {R3-R11,PC}
loc_27D24:
    MOV R6, R2
    LDR R2, [R1]
    MOV R9, R1
    MOV R10, R0
    LDRB R3, [R2,#1]
    LDRB R4, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R4,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R7, R0, #0
    BLT loc_27D1E
loc_27D48:
    LDR R3, [R6]
    LDR.W R2, [R9]
    SUBS R3, #4
    STR R3, [R6]
    CMP R7, R3
    ADD.W R8, R2, #4
    IT 
    STRGT.W R8, [R9]
    BGT loc_27D1E
loc_27D60:
    SUBS R3, R3, R7
    ADD.W R2, R8, R7
    STR.W R2, [R9]
    STR R3, [R6]
    CMP.W R8, #0
    BEQ loc_27D1E
loc_27D72:
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    MOV R5, #0x561A8
    ADD.W R3, R5, #0x74
    LDRB.W R11, [R5,#(byte_56218 - 0x561A8)]
    MOV R4, R0
    STR.W R10, [R0]
    CMP.W R11, #0
    BEQ.W loc_27ED6
loc_27D98:
    STR R3, [R4,#4]
    ADDS R2, R4, #4
    MOVS R3, #0
    MOV R1, R7
    STRB R3, [R4,#0x14]
    MOV R0, R8
    STR R3, [R4,#0x18]
    STR R3, [R4,#8]
    STR R3, [R4,#0x10]
    STR R3, [R4,#0xC]
    BL sub_252E0
    CBZ R0, loc_27DB8
loc_27DB2:
    LDR R3, [R6]
    CMP R3, #3
    BGT loc_27DE4
loc_27DB8:
    LDR R0, [R4,#8]
    CBZ R0, loc_27DC0
loc_27DBC:
    BL sub_1E6B0
loc_27DC0:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_27DC8
loc_27DC4:
    BL sub_1E6B0
loc_27DC8:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_27DD0
loc_27DCC:
    BL sub_1E6B0
loc_27DD0:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_27DD8
loc_27DD4:
    BL sub_1E6B0
loc_27DD8:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R3-R11,PC}
loc_27DE4:
    LDR.W R2, [R9]
    LDRB R3, [R2,#1]
    LDRB R5, [R2]
    LDRB R1, [R2,#3]
    LDRB R0, [R2,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R5,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_27DB8
loc_27E04:
    LDR R2, [R6]
    LDR.W R5, [R9]
    SUBS R2, #4
    STR R2, [R6]
    CMP R1, R2
    ADD.W R0, R5, #4
    IT 
    STRGT.W R0, [R9]
    BGT loc_27DB8
loc_27E1C:
    CLZ.W R3, R0
    SUBS R2, R2, R1
    ADD.W LR, R0, R1
    STR.W LR, [R9]
    LSRS R3, R3, #5
    STR R2, [R6]
    CMP R1, #0x40
    IT 
    ORRNE.W R3, R3, #1
    CMP R3, #0
    BNE loc_27DB8
loc_27E3A:
    MOVS R1, #0x20
    BL sub_1EE64
    LDR R2, [R4,#4]
    LDR R3, [R2]
    MOV R1, R0
    STR R0, [R4,#0x18]
    CMP R3, #0
    BEQ.W loc_27F52
loc_27E4E:
    CMP R3, #2
    BNE loc_27F40
loc_27E52:
    MOV R1, R2
    BL sub_27AEC
    MOV R6, R0
loc_27E5A:
    CMP R6, #0
    BEQ loc_27F40
loc_27E5E:
    LDR R1, [R4,#8]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F44
loc_27E6A:
    LDR R0, [R4,#8]
    CBZ R0, loc_27E72
loc_27E6E:
    BL sub_1E6B0
loc_27E72:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_27E7A
loc_27E76:
    BL sub_1E6B0
loc_27E7A:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_27E82
loc_27E7E:
    BL sub_1E6B0
loc_27E82:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_27E8A
loc_27E86:
    BL sub_1E6B0
loc_27E8A:
    MOV R0, R4
    BL sub_19494
    CMP R6, #0
    BEQ loc_27F66
loc_27E94:
    MOVS R4, #0
loc_27E96:
    LDR R0, [R6,#4]
    MOVS R3, #0
    STR R3, [R6]
    CBZ R0, loc_27EA2
loc_27E9E:
    BL sub_1E6B0
loc_27EA2:
    LDR R0, [R6,#8]
    CBZ R0, loc_27EAA
loc_27EA6:
    BL sub_1E6B0
loc_27EAA:
    LDR R0, [R6,#0xC]
    CBZ R0, loc_27EB2
loc_27EAE:
    BL sub_1E6B0
loc_27EB2:
    MOVS R3, #0
    MOV R0, R6
    STRB R3, [R6,#0x10]
    BL sub_19494
    CMP R7, #0x20
    BNE loc_27F5E
loc_27EC0:
    MOV R2, R7
    MOV R1, R8
    ADD.W R0, R5, #0x24
    BLX memcmp
    CMP R0, #0
    BNE loc_27F5E
loc_27ED0:
    MOV R0, R4
    POP.W {R3-R11,PC}
loc_27ED6:
    MOVS R1, #0x20
    LDR R0, =unk_3F810
    MOVS R3, #2
    STR.W R11, [R5,#(dword_56220 - 0x561A8)]
    STR R3, [R5,#(dword_5621C - 0x561A8)]
    MOV.W R3, #0x100
    STR.W R3, [R5,#(dword_56228 - 0x561A8)]
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R5,#(dword_5622C - 0x561A8)]
    LDR R0, =unk_3F830
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R5,#(dword_56230 - 0x561A8)]
    LDR R0, =unk_3F850
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R5,#(dword_56234 - 0x561A8)]
    LDR R0, =unk_3F870
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R5,#(dword_5623C - 0x561A8)]
    LDR R0, =unk_3F890
    BL sub_1EDA8
    MOVW R2, #0xFD00
    ADD.W R3, R5, #0x74
    MOVT.W R2, #3
    STRB.W R11, [R5,#(byte_56248 - 0x561A8)]
    STR R2, [R5,#(dword_56224 - 0x561A8)]
    MOVS R2, #1
    STR.W R3, [R5,#(dword_56238 - 0x561A8)]
    STRB.W R2, [R5,#(byte_56218 - 0x561A8)]
    STR.W R0, [R5,#(dword_56240 - 0x561A8)]
    B loc_27D98
loc_27F40:
    MOVS R6, #0
    B loc_27E6A
loc_27F44:
    LDR R1, [R4,#0xC]
    LDR R0, [R6,#8]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27E96
loc_27F50:
    B loc_27E6A
loc_27F52:
    ADD.W R0, R2, #0x20
    BL sub_264F8
    MOV R6, R0
    B loc_27E5A
loc_27F5E:
    CMP R4, #0
    BNE.W loc_27DB8
loc_27F64:
    B loc_27D1E
loc_27F66:
    CMP R7, #0x20
    BNE.W loc_27D1E
loc_27F6C:
    MOV R2, R7
    MOV R1, R8
    ADD.W R0, R5, #0x24
    BLX memcmp
    B loc_27D1E
```
Output:, #0
    BEQ loc_27F40
loc_27E6A:
    LDR R1, [R4,#0xC]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27E76:
    LDR R1, [R4,#0x10]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27E82:
    LDR R1, [R4,#0x18]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27E8E:
    LDR R1, [R4,#8]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27E9A:
    LDR R1, [R4,#0xC]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27EA6:
    LDR R1, [R4,#0x10]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27EB2:
    LDR R1, [R4,#0x18]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27EBE:
    LDR R1, [R4,#8]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27ECA:
    LDR R1, [R4,#0xC]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27ED6:
    LDR R1, [R4,#0x10]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27EE2:
    LDR R1, [R4,#0x18]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27EEE:
    LDR R1, [R4,#8]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27EF4:
    LDR R1, [R4,#0xC]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27F00:
    LDR R1, [R4,#0x10]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27F0C:
    LDR R1, [R4,#0x18]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27F18:
    LDR R1, [R4,#8]
    LDR R0, [R6,#4]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_27F40
loc_27F24:
    LDR R1,
############
```assembly
loc_1F910:
    PUSH.W {R4-R8,LR}
    SUBS R5, R1, #0
    BLT loc_1F9D4
loc_1F918:
    LDR R3, [R0]
    MOV R4, R0
    LSLS R3, R3, #5
    SUBS R3, #1
    BMI loc_1F94A
loc_1F922:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_1F944
loc_1F92E:
    B loc_1F94A
loc_1F930:
    ASRS R2, R3, #5
    AND.W R1, R3, #0x1F
    ADDS R2, #1
    LDR.W R0, [R4,R2,LSL#2]
    MOV R2, R1
    LSRS.W R2, R0, R2
    BNE loc_1F94A
loc_1F944:
    ADDS.W R3, R3, #0xFFFFFFFF
    BCS loc_1F930
loc_1F94A:
    ADDS R3, #1
    MOVW R2, #0xFFFE
    SUBS R3, R3, R5
    MOVT.W R2, #0x3FF
    ADD.W R6, R3, #0x3E
    ADDS R3, #0x1F
    IT 
    MOVMI R3, R6
    ASRS R6, R3, #5
    CMP R6, R2
    BHI loc_1F9EE
loc_1F966:
    ADD.W R8, R6, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R7, R0
    BLX memset
    MOV.W R12, R5,ASR#5
    AND.W R5, R5, #0x1F
    ADD.W R0, R12, #1
    STR R6, [R7]
    RSB.W R8, R5, #0x20
    LDR.W R1, [R4,R0,LSL#2]
    LSLS R0, R0, #2
    CBZ R6, loc_1F9CE
loc_1F998:
    ADDS R0, #4
    MOV LR, R7
    ADD R0, R4
    MOVS R2, #1
    B loc_1F9A4
loc_1F9A2:
    MOV R1, R6
loc_1F9A4:
    LDR R3, [R4]
    ADD.W R6, R2, R12
    LSRS R1, R5
    ADDS R2, #1
    CMP R3, R6
    ADD.W R0, R0, #4
    ITEET 
    LDRGT.W R6, [R0,#-4]
    MOVLE R3, #0
    MOVLE R6, R3
    LSLGT.W R3, R6, R8
    ORRS R3, R1
    STR.W R3, [LR,#4]!
    LDR R3, [R7]
    CMP R3, R2
    BGE loc_1F9A2
loc_1F9CE:
    MOV R0, R7
    POP.W {R4-R8,PC}
loc_1F9D4:
    MOVW R1, #0xE76C
    MOVW R0, #0xE860
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumRshift
    MOVW R2, #0x67D
    BLX __assert_fail
loc_1F9EE:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-loop-counter",
  "conditional-branching-on-input",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (sub_115CC)",
  "external-call-type:data-processing-helper (__assert_fail)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (memset)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shifts-left",
  "bitwise-shifts-right",
  "bitwise-OR",
  "bitwise-AND-clear",
  "bitwise-XOR",
  "status-flag-bit-manipulation",
  "direct-structure-field-updates",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:4",
  "address-or-offset-constant:aBignumRshift",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:sub_115CC",
  "address-or-offset-constant:__assert_fail",
  "inferred-algorithm:large-number-arithmetic",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:conditional-data-update",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_19844:
    CBZ R2, loc_1986A
loc_19846:
    ADD R2, R0
    PUSH {R4,R5}
    MOVS R4, #0
loc_1984C:
    LDRB.W R5, [R0],#1
    LDRB.W R3, [R1],#1
    CMP R0, R2
    EOR.W R3, R3, R5
    ORR.W R4, R4, R3
    BNE loc_1984C
loc_19860:
    RSB.W R0, R4, #0x100
    POP {R4,R5}
    LSRS R0, R0, #8
    BX LR
loc_1986A:
    MOVS R0, #1
    BX LR
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "loop-counter-pattern:decrementing",
  "byte-level-operations",
  "bitwise-operation:XOR",
  "bitwise-operation:OR",
  "bitwise-operation:NOT",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x100",
  "fixed-value-assignment:8",
  "inferred-algorithm:data-comparison-and-checksum",
  "inferred-algorithm:byte-wise-xor-and-or"
]
```<|im_end|>
############
```assembly
loc_225EC:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB SP, SP, #0x1C
    MOVT.W R3, #5
    ANDS.W R7, R1, #7
    STR R3, [SP,#0x40+var_3C]
    LDR R3, [R3]
    STR R3, [SP,#0x40+var_2C]
    BNE loc_226DE
loc_22606:
    MOV R9, R1
    MOV R8, R2
    LDR.W R1, [R2,#0x80]
    LDR.W R2, [R2,#0x84]
    CMP.W R9, #0
    BEQ loc_226C6
loc_22618:
    ADD.W R4, R0, #8
    ADD.W R11, R8, #0x88
    ADD.W R10, R8, #0x110
loc_22624:
    LDRB.W R0, [R4,#-3]
    MOV R3, R8
    LDRB.W R6, [R4,#-4]
    ADDS R7, #8
    LDRB.W R5, [R4,#-7]
    ADDS R4, #8
    LDRB.W LR, [R4,#-0x10]
    LSLS R0, R0, #0x10
    ORR.W R6, R0, R6,LSL#24
    LDRB.W R0, [R4,#-9]
    LSLS R5, R5, #0x10
    LDRB.W R12, [R4,#-0xD]
    ORR.W R5, R5, LR,LSL#24
    ORRS R0, R6
    LDRB.W LR, [R4,#-0xA]
    ORR.W R5, R5, R12
    LDRB.W R6, [R4,#-0xE]
    ORR.W R0, R0, LR,LSL#8
    ORR.W R5, R5, R6,LSL#8
    EORS R2, R0
    EORS R1, R5
    ADD R0, SP, #0x40+var_34
    BL sub_20EE4
    MOV R3, R11
    LDR R2, [SP,#0x40+var_30]
    ADD R0, SP, #0x40+var_34
    LDR R1, [SP,#0x40+var_34]
    BL sub_21828
    MOV R3, R10
    LDR R2, [SP,#0x40+var_30]
    ADD R0, SP, #0x40+var_34
    LDR R1, [SP,#0x40+var_34]
    BL sub_20EE4
    LDR R1, [SP,#0x40+var_34]
    LDR R2, [SP,#0x40+var_30]
    CMP R9, R7
    MOV.W R0, R1,LSR#24
    MOV.W R3, R1,LSR#16
    STRB.W R0, [R4,#-0x10]
    MOV.W R0, R1,LSR#8
    STRB.W R3, [R4,#-0xF]
    MOV.W R3, R2,LSR#24
    STRB.W R0, [R4,#-0xE]
    MOV.W R0, R2,LSR#16
    STRB.W R3, [R4,#-0xC]
    MOV.W R3, R2,LSR#8
    STRB.W R1, [R4,#-0xD]
    STRB.W R2, [R4,#-9]
    STRB.W R0, [R4,#-0xB]
    STRB.W R3, [R4,#-0xA]
    BHI loc_22624
loc_226C6:
    LDR R3, [SP,#0x40+var_3C]
    LDR R0, [SP,#0x40+var_2C]
    STR.W R1, [R8,#0x80]
    LDR R3, [R3]
    STR.W R2, [R8,#0x84]
    CMP R0, R3
    BNE loc_226F8
loc_226D8:
    ADD SP, SP, #0x1C
    POP.W {R4-R11,PC}
loc_226DE:
    MOVW R1, #0xF460
    MOVW R0, #0xE634
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aDesCbc3Encrypt
    MOVW R2, #0x29B
    BLX __assert_fail
loc_226F8:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-compare",
  "conditional-branching-on-loop-counter",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "external-call-type:data-processing-helper (sub_20EE4)",
  "external-call-type:data-processing-helper (sub_21828)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:aDesCbc3Encrypt",
  "address-or-offset-constant:0xF460",
  "address-or-offset-constant:0xE634",
  "address-or-offset-constant:0x29B",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-OR",
  "byte-level-operations:bitwise-SHL",
  "byte-level-operations:bitwise-LSR",
  "byte-level-operations:load-and-store-bytes",
  "inferred-algorithm:symmetric-key-encryption",
  "inferred-algorithm:block-cipher-mode-of-operation",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_11328:

loc_12FD4:
    PUSH {R3,LR}
    MOVW R2, #0x56DC
    MOVW R1, #0x8BCC
    MOVT.W R2, #4
    MOVT.W R1, #3
    MOVS R0, #1
    BLX __printf_chk
    MOV R3, #0x5619C
    MOVW R0, #0x8B28
    MOVS R2, #0xA0
    MOVT.W R0, #3
    LDR R3, [R3]
    MOVS R1, #1
    BLX fwrite
    MOVW R0, #0x8C0C
    POP.W {R3,LR}
    MOVT.W R0, #3
    B.W j_puts
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__printf_chk)",
  "external-call-type:data-processing-helper (fwrite)",
  "external-call-type:data-processing-helper (puts)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0xA0",
  "fixed-value-assignment:0x5619C",
  "fixed-value-assignment:0x8B28",
  "fixed-value-assignment:0x8BDC",
  "fixed-value-assignment:0x8C0C",
  "address-or-offset-constant:__printf_chk",
  "address-or-offset-constant:fwrite",
  "address-or-offset-constant:j_puts",
  "inferred-algorithm:output-printing",
  "inferred-algorithm:file-io"
]
```<|im_end|>
############
```assembly
loc_56904:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1EDA8:
    MOV R3, #0xFFFFFFE
    CMP R1, R3
    PUSH.W {R4-R8,LR}
    BHI loc_1EE42
loc_1EDB8:
    ADDS R6, R1, #3
    MOV R3, #0x3FFFFFE
    MOV R7, R1
    ASRS R6, R6, #2
    CMP R6, R3
    BGT loc_1EE5C
loc_1EDCA:
    MOV R5, R0
    ADDS R0, R6, #1
    MOVS R1, #4
    MOV.W R8, R0,LSL#2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R8
    MOV R4, R0
    BLX memset
    STR R6, [R4]
    CBZ R6, loc_1EDF2
loc_1EDE6:
    SUB.W R2, R8, #4
    MOVS R1, #0
    ADDS R0, R4, #4
    BLX memset
loc_1EDF2:
    SUBS R0, R7, #1
    CBZ R7, loc_1EE1A
loc_1EDF6:
    LSLS R7, R0, #3
loc_1EDF8:
    ASRS R1, R0, #2
    LDRB.W R2, [R5],#1
    ADDS R1, #1
    AND.W R3, R7, #0x1F
    SUBS R0, #1
    SUBS R7, #8
    LDR.W R6, [R4,R1,LSL#2]
    LSL.W R3, R2, R3
    ORRS R3, R6
    STR.W R3, [R4,R1,LSL#2]
    ADDS R3, R0, #1
    BNE loc_1EDF8
loc_1EE1A:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1EE3C
loc_1EE20:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBNZ R1, loc_1EE3C
loc_1EE2A:
    SUBS R3, #1
    B loc_1EE36
loc_1EE2E:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1EE3C
loc_1EE36:
    CMP R3, #1
    STR R3, [R4]
    BNE loc_1EE2E
loc_1EE3C:
    MOV R0, R4
    POP.W {R4-R8,PC}
loc_1EE42:
    MOVW R1, #0xE76C
    MOVW R0, #0xE800
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumFromByte
    MOVW R2, #0x583
    BLX __assert_fail
loc_1EE5C:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (__assert_fail)",
  "external-call-type:data-processing-helper (sub_115CC)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shifts-left",
  "bitwise-shifts-right",
  "bitwise-OR",
  "bitwise-AND",
  "bitwise-XOR",
  "magic-number:0xFFFFFFE",
  "magic-number:0x3FFFFFE",
  "magic-number:0xE76C",
  "magic-number:0xE800",
  "magic-number:0x583",
  "magic-number:aBignumFromByte",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:memory-manipulation",
  "inferred-algorithm:conditional-data-processing",
  "inferred-algorithm:loop-with-condition-check"
]
```<|im_end|>
############
```assembly
loc_56938:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11174:
    BX PC
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "unconditional-jumps-present",
  "inferred-algorithm:loop-end-or-infinite-loop"
]
```<|im_end|>
############
```assembly
loc_56860:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_19044:
    PUSH {R4-R7}
    LDRB R2, [R0]
    SUB.W R3, R2, #0x41
    UXTB R4, R3
    CMP R4, #0x19
    BLS loc_19102
loc_19052:
    SUB.W R3, R2, #0x61
    CMP R3, #0x19
    BHI loc_19138
loc_1905A:
    LDRB R4, [R0,#1]
    SUB.W R7, R2, #0x47
    SUB.W R5, R4, #0x41
    UXTB R3, R5
    CMP R3, #0x19
    BHI loc_19110
loc_1906A:
    MOV R6, R5
loc_1906C:
    LDRB R4, [R0,#2]
    SUB.W R5, R4, #0x41
    UXTB R3, R5
    CMP R3, #0x19
    BLS loc_1909E
loc_19078:
    SUB.W R3, R4, #0x61
    CMP R3, #0x19
    BLS loc_1915A
loc_19080:
    SUB.W R3, R4, #0x30
    CMP R3, #9
    BLS loc_19164
loc_19088:
    CMP R4, #0x2B
    BEQ.W loc_1919E
loc_1908E:
    CMP R4, #0x2F
    BEQ.W loc_191B2
loc_19094:
    CMP R4, #0x3D
    IT 
    MOVEQ.W R5, #0xFFFFFFFF
    BNE loc_19132
loc_1909E:
    LDRB R0, [R0,#3]
    SUB.W R3, R0, #0x41
    UXTB R2, R3
    CMP R2, #0x19
    BLS loc_190C4
loc_190AA:
    SUB.W R3, R0, #0x61
    CMP R3, #0x19
    IT 
    SUBLS.W R3, R0, #0x47
    BLS loc_190C4
loc_190B8:
    SUB.W R3, R0, #0x30
    CMP R3, #9
    IT 
    ADDLS R3, R0, #4
    BHI loc_1916C
loc_190C4:
    ADDS R2, R7, #1
    BEQ loc_19132
loc_190C8:
    ADDS R4, R6, #1
    BEQ loc_19132
loc_190CC:
    ADDS R2, R5, #1
    BEQ loc_1917E
loc_190D0:
    LSLS R6, R6, #0xC
    AND.W R2, R3, #0x3F
    ORR.W R7, R6, R7,LSL#18
    ADDS R3, #1
    ORR.W R3, R7, R2
    ORR.W R3, R3, R5,LSL#6
    ITE 
    MOVNE R0, #3
    MOVEQ R0, #2
    CMP R0, #3
    MOV.W R4, R3,LSR#16
    MOV.W R2, R3,LSR#8
    STRB R4, [R1]
    STRB R2, [R1,#1]
    IT 
    STRBEQ R3, [R1,#2]
    BNE loc_19192
loc_190FE:
    POP {R4-R7}
    BX LR
loc_19102:
    MOV R7, R3
loc_19104:
    LDRB R4, [R0,#1]
    SUB.W R5, R4, #0x41
    UXTB R3, R5
    CMP R3, #0x19
    BLS loc_1906A
loc_19110:
    SUB.W R3, R4, #0x61
    CMP R3, #0x19
    BLS loc_19154
loc_19118:
    SUB.W R3, R4, #0x30
    CMP R3, #9
    BLS loc_19168
loc_19120:
    CMP R4, #0x2B
    BEQ loc_1919A
loc_19124:
    CMP R4, #0x2F
    BEQ loc_191AA
loc_19128:
    CMP R4, #0x3D
    IT 
    MOVEQ.W R6, #0xFFFFFFFF
    BEQ loc_1906C
loc_19132:
    MOVS R0, #0
    POP {R4-R7}
    BX LR
loc_19138:
    SUB.W R3, R2, #0x30
    CMP R3, #9
    BLS loc_19160
loc_19140:
    CMP R2, #0x2B
    BEQ loc_19196
loc_19144:
    CMP R2, #0x2F
    BEQ loc_191A6
loc_19148:
    CMP R2, #0x3D
    IT 
    MOVEQ.W R7, #0xFFFFFFFF
    BEQ loc_19104
loc_19152:
    B loc_19132
loc_19154:
    SUB.W R6, R4, #0x47
    B loc_1906C
loc_1915A:
    SUB.W R5, R4, #0x47
    B loc_1909E
loc_19160:
    ADDS R7, R2, #4
    B loc_19104
loc_19164:
    ADDS R5, R4, #4
    B loc_1909E
loc_19168:
    ADDS R6, R4, #4
    B loc_1906C
loc_1916C:
    CMP R0, #0x2B
    BEQ loc_191A2
loc_19170:
    CMP R0, #0x2F
    BEQ loc_191AE
loc_19174:
    CMP R0, #0x3D
    BNE loc_19132
loc_19178:
    MOV.W R3, #0xFFFFFFFF
    B loc_190C4
loc_1917E:
    ADDS R3, #1
    BNE loc_19132
loc_19182:
    LSLS R3, R6, #0xC
    MOVS R0, #1
    ORR.W R3, R3, R7,LSL#18
    POP {R4-R7}
    LSRS R3, R3, #0x10
    STRB R3, [R1]
    BX LR
loc_19192:
    MOVS R0, #2
    B loc_190FE
loc_19196:
    MOVS R7, #0x3E
    B loc_19104
loc_1919A:
    MOVS R6, #0x3E
    B loc_1906C
loc_1919E:
    MOVS R5, #0x3E
    B loc_1909E
loc_191A2:
    MOVS R3, #0x3E
    B loc_190C4
loc_191A6:
    MOVS R7, #0x3F
    B loc_19104
loc_191AA:
    MOVS R6, #0x3F
    B loc_1906C
loc_191AE:
    MOVS R3, #0x3F
    B loc_190C4
loc_191B2:
    MOVS R5, #0x3F
    B loc_1909E
```
Output: R5, R4, #4
    B loc_19104
loc_1916C:
    ADDS R6, R4, #4
    B loc_1909E
loc_1917E:
    ADDS R2, R5, #4
    B loc_1909E
loc_19184:
    ADDS R4, R6, #4
    B loc_1909E
loc_1918A:
    ADDS R6, R4, #4
    B loc_1909E
loc_19192:
    ADDS R4, R5, #4
    B loc_1909E
loc_19196:
    ADDS R7, R2, #1
    B loc_1909E
loc_1919A:
    ADDS R7, R2, #1
    B loc_1909E
loc_1919E:
    ADDS R7, R2, #1
    B loc_1909E
loc_191A2:
    ADDS R4, R5, #1
    B loc_1909E
loc_191A6:
    ADDS R7, R2, #1
    B loc_1909E
loc_191AA:
    ADDS R7, R2, #1
    B loc_1909E
loc_191B2:
    ADDS R7, R2, #1
    B loc_1909E
```
<|im_start|><|im_end|>
############
```assembly
loc_1F234:
    CMP R1, #0
    BLT loc_1F254
loc_1F238:
    LDR R3, [R0]
    CMP.W R1, R3,LSL#5
    BGE loc_1F254
loc_1F240:
    ASRS R3, R1, #5
    AND.W R1, R1, #0x1F
    ADDS R3, #1
    LDR.W R0, [R0,R3,LSL#2]
    LSRS R0, R1
    AND.W R0, R0, #1
    BX LR
loc_1F254:
    MOVS R0, #0
    BX LR
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:1",
  "bitwise-operation-shift-left:5",
  "bitwise-operation-shift-right:5",
  "bitwise-operation-and:0x1F",
  "bitwise-operation-and:1",
  "memory-read-from-input-parameter-offset",
  "memory-read-from-pointer-indirectly-with-offset",
  "conditional-branching-on-compare",
  "unconditional-jumps-present",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:index-based-access",
  "inferred-algorithm:value-extraction-or-filtering"
]
```<|im_end|>
############
```assembly
loc_1B38C:
    LDRB R2, [R1]
    PUSH {R4,R5}
    LDRB R5, [R1,#1]
    LSLS R2, R2, #0x18
    LDRB R4, [R1,#2]
    LDRB R3, [R1,#3]
    ORR.W R2, R2, R5,LSL#16
    ORRS R3, R2
    ORR.W R3, R3, R4,LSL#8
    STR.W R3, [R0,#0x3C8]
    LDRB R5, [R1,#4]
    LDRB R4, [R1,#5]
    LDRB R3, [R1,#7]
    LDRB R2, [R1,#6]
    ORR.W R3, R3, R5,LSL#24
    ORR.W R3, R3, R4,LSL#16
    ORR.W R3, R3, R2,LSL#8
    STR.W R3, [R0,#0x3CC]
    LDRB R5, [R1,#8]
    LDRB R4, [R1,#9]
    LDRB R3, [R1,#0xB]
    LDRB R2, [R1,#0xA]
    ORR.W R3, R3, R5,LSL#24
    ORR.W R3, R3, R4,LSL#16
    ORR.W R3, R3, R2,LSL#8
    STR.W R3, [R0,#0x3D0]
    LDRB R5, [R1,#0xC]
    LDRB R4, [R1,#0xD]
    LDRB R3, [R1,#0xF]
    LDRB R2, [R1,#0xE]
    ORR.W R3, R3, R5,LSL#24
    ORR.W R3, R3, R4,LSL#16
    ORR.W R3, R3, R2,LSL#8
    STR.W R3, [R0,#0x3D4]
    POP {R4,R5}
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "byte-level-operations",
  "bitwise-operations:OR",
  "bitwise-operations:LSL",
  "memory-write-to-output-parameter-offset",
  "memory-read-from-input-parameter-offset",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:byte-order-processing"
]
```<|im_end|>
############
```assembly
loc_568D4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_252FC:
    SUBS R1, #1
    LDR R0, [R4,#8]
    BL sub_1F234
    LDR R3, [R4]
    MOVS R2, #0
    MOV R7, #0x56178
    LDR R1, [R3,#0xC]
    SUBS R1, #1
    STR R0, [SP,#0x30+var_2C]
    LDR R0, [R4,#8]
    BL sub_1F258
    LDR R0, [R4,#8]
    BL sub_1E660
    LDR R5, [R4]
    LDR R1, [R4,#8]
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    LDR R2, [R5,#0x10]
    MOV R1, R0
    MOV R8, R0
    LDR R0, [R5,#0x18]
    BL sub_1EAC0
    LDR R1, [R5,#0x10]
    LDR R6, [R7]
    MOV R9, R0
    BL sub_200D4
    LDR R1, [R5,#0x10]
    MOV R11, R0
    MOV R0, R6
    BL sub_200D4
    MOV R1, R0
    MOV R10, R0
    MOV R0, R11
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R10
    BL sub_1E6B0
    LDR R1, [R5,#0x10]
    MOV R0, R6
    BL sub_200D4
    MOV R10, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    LDR R1, [R5,#0x10]
    MOV R0, R10
    BL sub_20228
    MOV R6, R0
    MOV R0, R10
    BL sub_1E6B0
    CMP R6, #0
    BEQ.W loc_254B6
loc_25392:
    LDR R2, [R5,#0x10]
    MOV R0, R8
    LDR R1, [R7]
    BL sub_1F5DC
    MOV R10, R0
    MOV R0, R8
    BL sub_1E6B0
    LDR R2, [R5,#0x10]
    MOV R1, R6
    MOV R0, R10
    BL sub_1EAC0
    MOV R8, R0
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1E6B0
    MOVS R1, #3
    LDR R0, [R5,#0x10]
    BL sub_1FE60
    MOVS R1, #3
    MOV R6, R0
    BL sub_1F910
    MOV R10, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R10
    LDR R2, [R5,#0x10]
    MOV R0, R8
    BL sub_20724
    MOV R6, R0
    MOV R0, R10
    BL sub_1E6B0
    MOV R1, R6
    LDR R2, [R5,#0x10]
    MOV R0, R6
    BL sub_1EAC0
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R11, R0
    BL sub_1F5DC
    MOV R10, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    MOV R3, #0x56170
    MOV R0, R10
    LDR R1, [R3]
    BL sub_1F358
    CBNZ R0, loc_2545C
loc_2541A:
    MOV R0, R10
    BL sub_1E6B0
loc_25420:
    MOVS R1, #0
    MOV R0, R6
    BL sub_1F234
    MOV R1, R6
    CBZ R0, loc_25440
loc_2542C:
    LDR R2, [R5,#0x10]
    MOV R1, R6
    MOV R0, R2
    BL sub_1F5DC
    MOV R5, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R5
loc_25440:
    STR R1, [R4,#4]
    CMP R1, #0
    BEQ loc_254BE
loc_25446:
    LDR R3, [SP,#0x30+var_2C]
    CMP R3, #0
    BNE loc_254D2
loc_2544C:
    LDRB R3, [R4,#0x10]
    CMP R3, #0
    BEQ loc_254EC
loc_25452:
    MOVS R5, #1
    MOV R0, R5
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_2545C:
    MOV R0, R10
    BL sub_1E6B0
    LDR R2, [R5,#0x10]
    LDR R1, [R7]
    MOV R0, R2
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R10, R0
    BL sub_20724
    MOV R7, R0
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    MOV R1, R7
    LDR R2, [R5,#0x10]
    MOV R0, R6
    BL sub_1EAC0
    MOV R3, R0
    MOV R0, R6
    MOV R6, R3
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    B loc_25420
loc_254B6:
    MOV R0, R8
    BL sub_1E6B0
    STR R6, [R4,#4]
loc_254BE:
    LDR R0, [R4,#8]
    BL sub_1E6B0
    MOVS R3, #0
    MOV R5, R3
    STR R3, [R4,#8]
    MOV R0, R5
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_254D2:
    LDR R3, [R4]
    LDR R2, [R3,#0x10]
    MOV R0, R2
    BL sub_1F5DC
    MOV R5, R0
    LDR R0, [R4,#4]
    BL sub_1E6B0
    LDRB R3, [R4,#0x10]
    STR R5, [R4,#4]
    CMP R3, #0
    BNE loc_25452
loc_254EC:
    MOV R0, R4
    BL sub_24D84
    MOV R5, R0
    CMP R0, #0
    BNE loc_25452
loc_254F8:
    LDR R0, [R4,#4]
    BL sub_1E6B0
    LDR R0, [R4,#8]
    STR R5, [R4,#4]
    BL sub_1E6B0
    MOV R0, R5
    STR R5, [R4,#8]
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
```
Output:, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5DC
    MOVS R1, #2
    MOV R7, R0
    BL sub_1F910
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    MOVS R0, #2
    BL sub_1FE48
    MOV R1, R8
    LDR R2, [R5,#0x10]
    MOV R0, R1
    BL sub_1F5
############
```assembly
loc_56980:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1FC7C:

loc_2F078:
    PUSH.W {R4-R10,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0x20
    MOV R8, R1
    MOV R4, R0
    LDR.W R7, [R9]
    MOV R5, R2
    MOV R6, R3
    MOV R0, R3
    MOVS R2, #1
    MOV.W R3, #0x10000
    STR R7, [SP,#0x40+var_24]
    ADD.W R7, R8, R8,LSR#31
    MOVS R1, #4
    MOV.W R10, #1
    ASRS R7, R7, #1
    BLX R5
    MOV R0, #0xFFE2A83C
    MOV R1, R7
    SUB.W R8, R8, R7
    BL sub_38748
    MOV R2, R10
    MOVS R1, #3
    MOV R3, R0
    MOV R0, R6
    BLX R5
    MOV.W R3, #0x10000
    MOVS R2, #2
    MOV R0, R6
    MOVS R1, #4
    BLX R5
    MOV R1, R8
    MOV R0, #0xFFE2A83C
    BL sub_38748
    MOVS R2, #2
    MOVS R1, #3
    MOV R3, R0
    MOV R0, R6
    BLX R5
    MOV R0, R6
    MOV.W R3, #0x4000
    MOVS R2, #3
    MOVS R1, #4
    BLX R5
    MOV R0, R6
    MOVS R3, #5
    MOVS R2, #3
    MOVS R1, #2
    BLX R5
    MOVS R3, #0
    MOV R2, R3
    MOVS R1, #5
    MOV R0, R6
    BLX R5
    MOVS R0, #0x25
    BL sub_1FE48
    ADD R1, SP, #0x40+var_28
    STR R0, [R4,#0xC]
    ADD R0, SP, #0x40+var_2C
    BL sub_2A158
    LDR R3, [SP,#0x40+var_2C]
    MOV R2, R10
    MOV R0, R7
    STR.W R10, [SP,#0x40+var_40]
    MOVS R1, #0x25
    STR R3, [SP,#0x40+var_34]
    MOVS R3, #0
    STR R6, [SP,#0x40+var_38]
    STR R5, [SP,#0x40+var_3C]
    BL sub_29BE0
    LDR R3, [SP,#0x40+var_28]
    MOV R2, R10
    STR R6, [SP,#0x40+var_38]
    STR R5, [SP,#0x40+var_3C]
    MOVS R1, #2
    STR R3, [SP,#0x40+var_34]
    MOVS R3, #0
    STR R1, [SP,#0x40+var_40]
    MOVS R1, #0x25
    STR R0, [R4,#0x14]
    MOV R0, R8
    BL sub_29BE0
    MOV R1, R0
    STR R0, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1F358
    MOVS R1, #6
    CMP R0, #0
    MOV R0, R6
    ITTT 
    LDRLT R2, [R4,#0x14]
    LDRLT R3, [R4,#0x18]
    STRLT R2, [R4,#0x18]
    MOV.W R2, #3
    IT 
    STRLT R3, [R4,#0x14]
    MOVS R3, #1
    BLX R5
    LDR R1, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1FC7C
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x40",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_38748)",
  "external-call-type:unspecified-helper (sub_1FE48)",
  "external-call-type:unspecified-helper (sub_2A158)",
  "external-call-type:unspecified-helper (sub_29BE0)",
  "external-call-type:unspecified-helper (sub_1F358)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:2",
  "fixed-value-assignment:3",
  "fixed-value-assignment:4",
  "fixed-value-assignment:5",
  "fixed-value-assignment:6",
  "fixed-value-assignment:0xFFE2A83C",
  "fixed-value-assignment:0x4000",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:sub_38748",
  "address-or-offset-constant:sub_1FE48",
  "address-or-offset-constant:sub_2A158",
  "address-or-offset-constant:sub_29BE0",
  "address-or-offset-constant:sub_1F358",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-conditionals",
  "inferred-algorithm:conditional-memory-access",
  "inferred-algorithm:register-mapping-or-redirection"
]
```<|im_end|>
############
```assembly
loc_36D58:
    PUSH {R4,R5,LR}
    MOV R4, #0x56190
    SUB SP, SP, #0x14
    MOV R5, R0
    MOVS R1, #0
    LDR R3, [R4]
    ADD R0, SP, #0x20+tv
    STR R3, [SP,#0x20+var_14]
    BLX gettimeofday
    ADD R0, SP, #0x20+tv
    MOVS R1, #8
    BLX R5
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_36D84
loc_36D80:
    ADD SP, SP, #0x14
    POP {R4,R5,PC}
loc_36D84:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (gettimeofday)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0",
  "fixed-value-assignment:8",
  "address-or-offset-constant:gettimeofday",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:time-related-check",
  "inferred-algorithm:safety-check-or-protection",
  "inferred-algorithm:stack-protection"
]
```<|im_end|>
############
```assembly
loc_19420:
    PUSH {R4-R7,LR}
    MOV R4, #0x56190
    SUB SP, SP, #0xD4
    MOV R5, R1
    MOV R7, R0
    LDR R3, [R4]
    MOV R0, #0x7FFFFFFF
    MOV R1, R2
    MOV R6, R2
    STR R3, [SP,#0xE8+var_1C]
    BL sub_384D0
    CMP R0, R5
    BCC loc_19466
loc_19444:
    MUL.W R1, R5, R6
    CBZ R7, loc_1945E
loc_1944A:
    MOV R0, R7
    BLX realloc
loc_19450:
    CBZ R0, loc_19466
loc_19452:
    LDR R2, [SP,#0xE8+var_1C]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_1948E
loc_1945A:
    ADD SP, SP, #0xD4
    POP {R4-R7,PC}
loc_1945E:
    MOV R0, R1
    BLX malloc
    B loc_19450
loc_19466:
    MOV R3, #0x3AE48
    ADD R5, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM R5!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [R5],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R5]
    BL sub_12E78
loc_1948A:
    MOVS R0, #0
    B loc_19452
loc_1948E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_384D0)",
  "external-call-type:memory-allocation-helper (realloc)",
  "external-call-type:memory-allocation-helper (malloc)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "external-call-type:data-processing-helper (sub_12E78)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift",
  "byte-level-operations:bitwise-multiply",
  "byte-level-operations:bitwise-load/store",
  "byte-level-operations:bitwise-addition",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x7FFFFFFF",
  "fixed-value-assignment:0x3AE48",
  "fixed-value-assignment:0x54E4",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:sub_384D0",
  "address-or-offset-constant:realloc",
  "address-or-offset-constant:malloc",
  "address-or-offset-constant:__stack_chk_fail",
  "address-or-offset-constant:sub_12E78",
  "inferred-algorithm:dynamic-memory-management",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:conditional-execution",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_56870:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_568B4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11534:
    ADR R12, 0x1153C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(close_ptr - 0x5553C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (close)",
  "address-or-offset-constant:0x1153C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:close_ptr",
  "inferred-algorithm:file-or-resource-cleanup"
]
```<|im_end|>
############
```assembly
loc_56978:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2D764:
    PUSH.W {R3-R11,LR}
    MOV R4, R0
    LDR R0, [R0,#8]
    MOV R7, R2
    MOV R6, R1
    BL sub_1F1CC
    MOV R5, R0
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    ADD R5, R0
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    ADD R0, R5
    CMP R0, R7
    BLE loc_2D7A6
loc_2D7A2:
    POP.W {R3-R11,PC}
loc_2D7A6:
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB R0, [R6,#1]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB R0, [R6,#2]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,#3]
    LDR R0, [R4,#8]
    BL sub_1F1CC
    CMP R0, #4
    MOV R9, R0
    SUB.W R5, R0, #5
    BEQ.W loc_2DA2E
loc_2D7E6:
    ADDS R7, R6, #3
loc_2D7E8:
    MOV R1, R5
    LDR R0, [R4,#8]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R2, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_2D7E8
loc_2D7FA:
    ADD.W R5, R9, #4
    ADD.W R11, R9, #1
    ADD.W R10, R9, #2
    ADD.W R7, R9, #3
    MOV R8, R5
loc_2D80C:
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0xC]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R9, R0, #5
    BEQ loc_2D86E
loc_2D84E:
    ADD.W R7, R6, R8
    MOV R5, R9
loc_2D854:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R7],#1
    BNE loc_2D854
loc_2D866:
    ADD.W R8, R8, #1
    ADD R8, R9
    MOV R5, R8
loc_2D86E:
    LDR R0, [R4,#0x10]
    ADD.W R10, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADDS R7, R5, #3
    ADD.W R11, R8, #4
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x10]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D8DE
loc_2D8BC:
    ADD.W R7, R8, #3
    MOV R5, R10
    ADD R7, R6
loc_2D8C4:
    MOV R1, R5
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    SUBS R5, #1
    STRB.W R0, [R7,#1]!
    ADDS R0, R5, #1
    BNE loc_2D8C4
loc_2D8D6:
    ADD.W R8, R8, #5
    ADD.W R11, R10, R8
loc_2D8DE:
    LDR R0, [R4,#0x1C]
    ADD.W R10, R11, #1
    BL sub_1F1CC
    ADD.W R8, R11, #2
    ADD.W R5, R11, #3
    ADD.W R9, R11, #4
    ADDS R7, R6, R5
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R8]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D94C
loc_2D932:
    MOV R5, R10
loc_2D934:
    MOV R1, R5
    LDR R0, [R4,#0x1C]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R1, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_2D934
loc_2D946:
    ADD.W R9, R11, #5
    ADD R9, R10
loc_2D94C:
    LDR R0, [R4,#0x14]
    ADD.W R11, R9, #1
    BL sub_1F1CC
    ADD.W R10, R9, #2
    ADD.W R7, R9, #3
    ADD.W R5, R9, #4
    ADD.W R8, R6, R7
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D9BC
loc_2D9A2:
    MOV R7, R10
loc_2D9A4:
    MOV R1, R7
    LDR R0, [R4,#0x14]
    BL sub_1F20C
    SUBS R7, #1
    ADDS R2, R7, #1
    STRB.W R0, [R8,#1]!
    BNE loc_2D9A4
loc_2D9B6:
    ADD.W R5, R9, #5
    ADD R5, R10
loc_2D9BC:
    LDR R0, [R4,#0x18]
    ADD.W R11, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADD.W R8, R5, #3
    ADD.W R10, R5, #4
    ADD.W R7, R6, R8
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R11]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    SUBS R0, #4
    STRB.W R0, [R6,R8]
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R8, R0, #5
    BEQ loc_2DA3E
loc_2DA12:
    MOV R6, R8
loc_2DA14:
    MOV R1, R6
    LDR R0, [R4,#0x18]
    BL sub_1F20C
    SUBS R6, #1
    ADDS R3, R6, #1
    STRB.W R0, [R7,#1]!
    BNE loc_2DA14
loc_2DA26:
    ADDS R0, R5, #5
    ADD R0, R8
    POP.W {R3-R11,PC}
loc_2DA2E:
    MOVS R5, #8
    MOVS R7, #7
    MOV R8, R5
    MOV.W R10, #6
    MOV.W R11, #5
    B loc_2D80C
loc_2DA3E:
    MOV R0, R10
    B locret_2D7A2
```
Output: R3, R5, #1
    BNE loc_2D8C4
loc_2D8CE:
    ADD.W R10, R10, #1
    ADD W10, R10, R9
    MOV R5, W10
loc_2D8DE:
    LDR R0, [R4,#0x1C]
    ADD.W R11, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADDS R7, R5, #3
    ADD.W R10, R10, #4
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x1C]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R11, R0, #5
    BEQ loc_2D93E
loc_2D91C:
    ADD.W R7, R10, #3
    MOV R5, R11
    ADD R7, R6
loc_2D924:
    MOV R1, R5
    LDR R0, [R4,#0x1C]
    BL sub_1F20C
    SUBS R5, #1
    STRB.W R0, [R7,#1]!
    ADDS R3, R5, #1
    BNE loc_2D924
loc_2D92E:
    ADD.W R11, R11, #1
    ADD W11, R11, R9
    MOV R5, W11
loc_2D93E:
    LDR R0, [R4,#0x14]
    ADD.W R10, R5, #1
    BL sub_1F1CC
    ADD.W R9, R5, #2
    ADDS R7, R5, #3
    ADD.W R11, R11, #4
    SUBS R0, #4
    ASRS R0, R0, #0x18
    STRB R0, [R6,R5]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #0x10
    STRB.W R0, [R6,R10]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    ASRS R0, R0, #8
    STRB.W R0, [R6,R9]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    SUBS R0, #4
    STRB R0, [R6,R7]
    LDR R0, [R4,#0x14]
    BL sub_1F1CC
    CMP R0, #4
    SUB.W R10, R0, #5
    BEQ loc_2D9AE
loc_2D97C:
    ADD.W R7, R11, #3
    MOV R5, R10
    ADD R7, R6
loc_2D984:
    MOV R1, R5
    LDR R0, [R4,#0x14]
    BL sub_1F20C
    SUBS R5, #1
    STRB.W R0, [R7,#1]!
    ADDS R3, R5, #1

############
```assembly
loc_56874:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_112A8:
    ADR R12, 0x112B0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(perror_ptr - 0x552B0)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (perror_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112B0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:perror_ptr",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:program-termination-or-failure"
]
```<|im_end|>
############
```assembly
loc_24500:
    CBZ R0, locret_24530
loc_24502:
    PUSH {R4,LR}
    MOV R4, R0
    LDR R0, [R0,#8]
    CBZ R0, loc_2450E
loc_2450A:
    BL sub_1E6B0
loc_2450E:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_24516
loc_24512:
    BL sub_1E6B0
loc_24516:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2451E
loc_2451A:
    BL sub_1E6B0
loc_2451E:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_24526
loc_24522:
    BL sub_1E6B0
loc_24526:
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
loc_24530:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-read-from-input-parameter-offset:10",
  "memory-read-from-input-parameter-offset:18",
  "inferred-algorithm:iteration-over-pointer-array",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:function-invocation-or-processing"
]
```<|im_end|>
############
```assembly
loc_111E0:
    ADR R12, 0x111E8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(memmove_ptr - 0x551E8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:size_t",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memmove_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111E8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:memmove_ptr",
  "inferred-algorithm:data-movement-or-copy",
  "inferred-algorithm:indirect-function-call"
]
```<|im_end|>
############
```assembly
loc_1D05C:
    PUSH {R4-R7,LR}
    MOV R7, #0x56190
    SUB SP, SP, #0x14
    LDR R3, [R7]
    STR R3, [SP,#0x28+var_1C]
    LSLS R3, R1, #0x1D
    BNE loc_1D0D0
loc_1D070:
    CMP R1, #0
    BLE loc_1D0C4
loc_1D074:
    SUBS R5, R1, #1
    MOV R4, R0
    BIC.W R5, R5, #7
    MOV R6, R2
    ADDS R5, #8
    ADD R5, R0
loc_1D082:
    LDR R1, [R4,#4]
    MOV R3, R6
    LDR R0, [R4]
    ADD R2, SP, #0x28+var_24
    BL sub_1C44C
    LDR R2, [SP,#0x28+var_24]
    LDR R3, [SP,#0x28+var_20]
    ADDS R4, #8
    STRB.W R2, [R4,#-8]
    LSRS R1, R2, #0x10
    STRB.W R3, [R4,#-4]
    LSRS R0, R2, #8
    STRB.W R1, [R4,#-6]
    LSRS R2, R2, #0x18
    STRB.W R0, [R4,#-7]
    LSRS R1, R3, #8
    STRB.W R2, [R4,#-5]
    LSRS R2, R3, #0x10
    STRB.W R1, [R4,#-3]
    LSRS R3, R3, #0x18
    STRB.W R2, [R4,#-2]
    STRB.W R3, [R4,#-1]
    CMP R5, R4
    BNE loc_1D082
loc_1D0C4:
    LDR R2, [SP,#0x28+var_1C]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_1D0EA
loc_1D0CC:
    ADD SP, SP, #0x14
    POP {R4-R7,PC}
loc_1D0D0:
    MOVW R1, #0xE628
    MOVW R0, #0xE634
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBlowfishLsbEnc
    MOVW R2, #0x14F
    BLX __assert_fail
loc_1D0EA:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (__assert_fail)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "external-call-type:unspecified-helper (sub_1C44C)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift",
  "byte-level-operations:bitwise-and-clear",
  "byte-level-operations:bitwise-or",
  "byte-level-operations:reverse-endianness",
  "byte-level-operations:store-bytes",
  "fixed-value-comparison:0",
  "fixed-value-comparison:1",
  "fixed-value-assignment:0xE628",
  "fixed-value-assignment:0xE634",
  "address-or-offset-constant:aBlowfishLsbEnc",
  "address-or-offset-constant:__assert_fail",
  "address-or-offset-constant:__stack_chk_fail",
  "address-or-offset-constant:sub_1C44C",
  "inferred-algorithm:data-encryption",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:input-validation",
  "inferred-algorithm:loop-with-counter"
]
```<|im_end|>
############
```assembly
loc_2CB2C:
    PUSH {R4-R6,LR}
    MOV R4, #0x56190
    SUB SP, SP, #8
    LDR R3, [R0,#0xC]
    MOV R0, R1
    LDR R2, [R4]
    MOV R1, SP
    STR R2, [SP,#0x18+var_14]
    BLX R3
    LDR R1, [SP,#0x18+var_18]
    MOV R6, R0
    BL sub_2C994
    MOV R5, R0
    MOV R0, R6
    BL sub_19494
loc_2CB54:

```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (BLX R3)",
  "external-call-type:unspecified-helper (sub_2C994)",
  "external-call-type:unspecified-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56190",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:sub_2C994",
  "address-or-offset-constant:sub_19494",
  "inferred-algorithm:function-wrapper-or-trampoline",
  "inferred-algorithm:parameter-modification-or-copying",
  "inferred-algorithm:conditional-execution-or-dispatch"
]
```<|im_end|>
############
```assembly
loc_231B4:
    LDR R3, [R0]
    CMP R3, #0
    BEQ.W loc_233E0
loc_231BC:
    PUSH.W {R4-R11,LR}
    MOV R4, R0
    SUB SP, SP, #0xC
    MOV R0, R3
    BL sub_1F158
    ADD.W R5, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVPL R5, R0
    LDR R0, [R4,#4]
    BL sub_1F158
    ASRS R5, R5, #2
    ADDS R5, #0xD
    ADDS.W R3, R0, #0xF
    ADD.W R2, R0, #0x12
    LDR R0, [R4,#8]
    IT 
    MOVMI R3, R2
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    ADDS.W R3, R0, #0xF
    ADD.W R2, R0, #0x12
    LDR R0, [R4,#0xC]
    IT 
    MOVMI R3, R2
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    MOVS R1, #1
    ADD.W R3, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVMI R0, R3
    ADD.W R0, R5, R0,ASR#2
    BL sub_193B8
    MOV R7, R0
    CMP R0, #0
    BEQ.W loc_233E4
loc_23226:
    MOV R3, #0x3F57C
    LDRH R2, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    STRH R2, [R0]
    STRB R3, [R0,#2]
    LDR R0, [R4]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE.W loc_233CC
loc_23252:
    MOVW R5, #0xF4DC
    ADD.W R9, R7, #1
    MOVT.W R5, #3
    MOV R8, R6
loc_23260:
    MOV.W R1, R8,ASR#1
    LDR R0, [R4]
    BL sub_1F20C
    AND.W R3, R8, #1
    ADD.W R8, R8, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R8, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R9,#1]!
    BNE loc_23260
loc_2328A:
    MOV R9, #0x3F580
    ADDS R3, R6, #3
    ADDS R2, R6, #6
    LDR.W R0, [R9]
    STR R2, [SP,#0x30+var_2C]
    STR R0, [R7,R3]
    LDR R0, [R4,#4]
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE.W loc_233DA
loc_232C0:
    ADDS R2, R6, #5
    MOV R11, R8
    ADD.W R10, R7, R2
loc_232C8:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#4]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_232C8
loc_232F2:
    LDR.W R0, [R9]
    ADDS R6, #7
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#8]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233D6
loc_23320:
    ADD.W R2, R8, #3
    MOV R11, R6
    ADD.W R10, R7, R2
loc_2332A:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#8]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2332A
loc_23354:
    LDR.W R0, [R9]
    ADD.W R8, R8, #5
    LDR R3, [SP,#0x30+var_2C]
    ADD R8, R6
    ADD R3, R6
    STR.W R0, [R7,R8]
    LDR R0, [R4,#0xC]
    MOV R6, R3
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE loc_233D0
loc_23388:
    ADD.W R10, R6, #3
    MOV R9, R8
    ADD R10, R7
loc_23390:
    MOV.W R1, R9,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R3, R0, #0xF
    ADD R3, R5
    LDRB R3, [R3,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_23390
loc_233BA:
    ADDS R6, #5
    MOV R0, R7
    ADD R7, R6
    MOVS R3, #0
    STRB.W R3, [R7,R8]
loc_233C6:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_233CC:
    MOVS R6, #0
    B loc_23252
loc_233D0:
    MOV.W R8, #0
    B loc_23388
loc_233D6:
    MOVS R6, #0
    B loc_23320
loc_233DA:
    MOV.W R8, #0
    B loc_232C0
loc_233E0:
    MOVS R0, #0
    BX LR
loc_233E4:
    MOVS R0, #0
    B loc_233C6
```
Output: #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2332A
loc_23354:
    LDR.W R0, [R9]
    ADDS R6, #7
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0xC]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233CE
loc_23384:
    ADD.W R2, R8, #3
    MOV R11, R6
    ADD.W R10, R7, R2
loc_2338E:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2338E
loc_233BE:
    LDR.W R0, [R9]
    ADDS R6, #7
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0x10]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233E2
loc_233EC:
    ADD.W R2, R8, #3
    MOV R11, R6
    ADD.W R10, R7, R2
loc_233F6:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_233F6
loc_23410:
    LDR.W R0, [R9]
    ADDS R6, #7
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0x14]

############
```assembly
loc_18738:
    PUSH {R4-R7,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0xD4
    MOV R6, R0
    MOVS R0, #0x24
    LDR R3, [R5]
    STR R3, [SP,#0xE8+var_1C]
    BLX malloc
    MOV R4, R0
    CBZ R0, loc_18778
loc_18754:
    LDR R1, [SP,#0xE8+var_1C]
    MOVS R3, #0
    LDR R2, [R5]
    MOV R0, R4
    MOVS R5, #1
    STR R6, [R4,#0x1C]
    CMP R1, R2
    STR R3, [R4,#0x18]
    STR R3, [R4,#0x14]
    STR R3, [R4,#0x20]
    STR R3, [R4,#0xC]
    STR R3, [R4,#4]
    STR R3, [R4,#0x10]
    STR R3, [R4,#8]
    STR R5, [R4]
    BNE loc_1879E
loc_18774:
    ADD SP, SP, #0xD4
    POP {R4-R7,PC}
loc_18778:
    MOV R3, #0x3AE48
    ADD R7, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM R7!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [R7],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R7]
    BL sub_12E78
loc_1879C:
    B loc_18754
loc_1879E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-memory-access",
  "external-function-calls-present",
  "external-call-type:malloc",
  "external-call-type:__stack_chk_fail",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x24",
  "fixed-value-assignment:0x3AE48",
  "fixed-value-assignment:0x54E4",
  "fixed-value-assignment:0x1C",
  "fixed-value-assignment:0x18",
  "fixed-value-assignment:0x14",
  "fixed-value-assignment:0x20",
  "fixed-value-assignment:0xC",
  "fixed-value-assignment:0x4",
  "fixed-value-assignment:0x10",
  "fixed-value-assignment:0x8",
  "fixed-value-assignment:0x5",
  "fixed-value-assignment:1",
  "byte-level-operations:LSRS",
  "byte-level-operations:MOVT.W",
  "byte-level-operations:STRH.W",
  "byte-level-operations:STRB",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:dynamic-memory-allocation",
  "inferred-algorithm:memory-layout-definition",
  "inferred-algorithm:stack-protection"
]
```<|im_end|>
############
```assembly
loc_12E5C:
    MOV R3, #0x56198
    MOVW R0, #0x8AD4
    MOVS R2, #0x27
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    B.W j_fwrite
```
Output:```json
[
  "return-type:integer",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fwrite)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x56198",
  "fixed-value-assignment:0x8AD4",
  "fixed-value-assignment:0x27",
  "fixed-value-assignment:1",
  "fixed-value-assignment:3",
  "inferred-algorithm:file-io",
  "inferred-algorithm:string-writing"
]
```<|im_end|>
############
```assembly
loc_17282:
    LDR.W R3, [R4,#0x100]
    MOV R0, #0x3F6FF9EB
    LDRB R1, [R3,#1]
    LDRB R6, [R3]
    LDRB R2, [R3,#3]
    LSLS R1, R1, #0x10
    ORR.W R1, R1, R6,LSL#24
    LDRB R6, [R3,#2]
    ORRS R2, R1
    ORR.W R2, R2, R6,LSL#8
    CMP R2, R0
    BEQ loc_172EE
loc_172A6:
    MOV R11, #0x3ABD4
    MOVS R2, #0
    STR R2, [SP,#0x118+var_10C]
loc_172B2:
    MOV R0, R3
    LDR.W R1, [R4,#0x108]
    BL sub_194E4
    LDR.W R0, [R4,#0x100]
    BL sub_19494
    MOV R0, R4
    MOV.W R1, #0x10C
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    CMP R7, #0
    BEQ loc_17372
loc_172D8:
    LDR R0, [SP,#0x118+var_10C]
    STR.W R11, [R7]
loc_172DE:
    LDR R2, [SP,#0x118+var_2C]
    LDR R3, [R5]
    CMP R2, R3
    BNE.W loc_17418
loc_172E8:
    ADD SP, SP, #0xF4
    POP.W {R4-R11,PC}
loc_172EE:
    LDR.W R2, [R4,#0x104]
    CMP R2, #0xB
    BGT loc_17304
loc_172F6:
    MOVW R11, #0xAB04
    MOVS R2, #0
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_17304:
    LDRB R2, [R3,#9]
    LDRB R6, [R3,#8]
    LDRB R1, [R3,#0xB]
    LDRB R0, [R3,#0xA]
    LSLS R2, R2, #0x10
    ORR.W R3, R2, R6,LSL#24
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R6, R0, #0
    BLT loc_17360
loc_17320:
    LDR.W R9, [R4,#0x104]
    SUB.W R3, R9, #0xB
    CMP R6, R3
    BGE loc_17360
loc_1732C:
    CMP R6, #0x10
    BLS loc_1737A
loc_17330:
    LDR.W R3, [R4,#0x100]
    ADD R1, SP, #0x118+s2
    MOVS R2, #0x10
    ADD.W R10, R3, #0xC
    STR R3, [SP,#0x118+var_10C]
    MOV R0, R10
    BLX memcmp
    LDR R3, [SP,#0x118+var_10C]
    CBNZ R0, loc_1738E
loc_17348:
    STR R0, [SP,#0x118+n]
loc_1734A:
    ADD.W R2, R6, #0xF
    CMP R9, R2
    BGT loc_173B0
loc_17352:
    MOVW R11, #0xAB30
    MOVS R2, #0
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_17360:
    MOVW R11, #0xAB04
    MOVS R2, #0
    LDR.W R3, [R4,#0x100]
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_17372:
    LDR R0, [SP,#0x118+var_10C]
    B loc_172DE
loc_17376:
    MOV R0, R4
    B loc_172DE
loc_1737A:
    LDR.W R9, [R4,#0x100]
    MOV R11, #0x3AC58
loc_17386:
    MOVS R2, #0
    MOV R3, R9
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_1738E:
    ADD R1, SP, #0x118+var_60
    MOV R0, R10
    MOVS R2, #0x10
    BLX memcmp
    LDR R3, [SP,#0x118+var_10C]
    CBNZ R0, loc_173A2
loc_1739C:
    MOVS R2, #1
    STR R2, [SP,#0x118+n]
    B loc_1734A
loc_173A2:
    MOVW R11, #0xAC58
    MOVS R2, #0
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_173B0:
    ADD.W R11, R6, #0xC
    ADD.W R2, R3, R11
    LDRB.W LR, [R3,R11]
    LDRB R1, [R2,#1]
    LDRB R3, [R2,#3]
    LDRB R0, [R2,#2]
    ORR.W R3, R3, LR,LSL#24
    ORR.W R3, R3, R1,LSL#16
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R10, R0, #0
    BLT loc_17406
loc_173D8:
    LDR.W R3, [R4,#0x104]
    STR R3, [SP,#0x118+var_10C]
    SUB.W R3, R3, R11
    SUBS R3, #3
    CMP R10, R3
    BGE loc_17406
loc_173E8:
    CMP.W R10, #4
    BEQ loc_1741C
loc_173EE:
    CMP.W R10, #8
    BEQ loc_17440
loc_173F4:
    MOVW R11, #0xABB0
    MOVS R2, #0
    LDR.W R3, [R4,#0x100]
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_17406:
    MOVW R11, #0xAB30
    MOVS R2, #0
    LDR.W R3, [R4,#0x100]
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_17418:
    BLX __stack_chk_fail
loc_1741C:
    LDR.W R9, [R4,#0x100]
    ADD.W R0, R6, #0x10
    MOVW R1, #0xA584
    MOV R2, R10
    ADD R0, R9
    MOVT.W R1, #3
    BLX memcmp
    CBZ R0, loc_17482
loc_17436:
    MOV R11, #0x3ABB0
    B loc_17386
loc_17440:
    LDR.W R9, [R4,#0x100]
    ADD.W R0, R6, #0x10
    MOVW R1, #0xAC70
    MOV R2, R10
    ADD R0, R9
    MOVT.W R1, #3
    STR.W R9, [SP,#0x118+var_104]
    BLX memcmp
    LDR R3, [SP,#0x118+var_104]
    CBNZ R0, loc_17486
loc_17460:
    MOVS R6, #1
loc_17462:
    ADD.W R10, R10, #4
    LDR R2, [SP,#0x118+var_10C]
    ADD R11, R10
    ADD.W R3, R11, #3
    CMP R2, R3
    BGT loc_17494
loc_17472:
    MOVW R11, #0xAB60
    MOVS R2, #0
    MOV R3, R9
    STR R2, [SP,#0x118+var_10C]
    MOVT.W R11, #3
    B loc_172B2
loc_17482:
    MOV R6, R0
    B loc_17462
loc_17486:
    MOVW R11, #0xABB0
    MOVS R2, #0
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_17494:
    ADD.W R2, R9, R11
    LDRB.W LR, [R9,R11]
    LDRB R3, [R2,#3]
    LDRB R1, [R2,#1]
    LDRB R0, [R2,#2]
    ORR.W R3, R3, LR,LSL#24
    ORR.W R3, R3, R1,LSL#16
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R10, R0, #0
    BLT loc_174F4
loc_174B8:
    LDR.W R3, [R4,#0x104]
    SUB.W R3, R3, R11
    SUBS R3, #3
    CMP R10, R3
    BGE loc_174F4
loc_174C6:
    LDR.W R3, [R4,#0x100]
    ADD.W R11, R11, #4
    ADD.W R9, R3, R11
    CMP.W R10, #0
    BEQ.W loc_17ACC
loc_174DA:
    CMP R6, #0
    BEQ.W loc_17AC8
loc_174E0:
    ANDS.W R11, R10, #7
    BEQ loc_17506
loc_174E6:
    MOVW R11, #0xABFC
    MOVS R2, #0
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_174F4:
    MOVW R11, #0xAB60
    MOVS R2, #0
    LDR.W R3, [R4,#0x100]
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_17506:
    ADD R0, SP, #0x118+var_D8
    BL sub_28FF0
    MOV R0, R8
    BLX strlen
    MOV R1, R8
    MOV R2, R0
    ADD R0, SP, #0x118+var_D8
    BL sub_29024
    MOVW R3, #0x62C0
    ADD R1, SP, #0x118+var_D8
    ADD R0, SP, #0x118+var_4C
    MOV R6, R3
    BL sub_29130
    ADD R0, SP, #0x118+var_D8
    BL sub_28FF0
    MOV R0, R8
    BLX strlen
    MOV R1, R8
    MOV R2, R0
    ADD R0, SP, #0x118+var_D8
    BL sub_29024
    MOVS R2, #0x10
    ADD R1, SP, #0x118+var_4C
    ADD R0, SP, #0x118+var_D8
    BL sub_29024
    ADD R1, SP, #0x118+var_D8
    ADD R0, SP, #0x118+var_3C
    MOV R3, R6
    MOVT.W R3, #5
    STR R3, [SP,#0x118+var_10C]
    BL sub_29130
    ADD R0, SP, #0x118+var_4C
    MOV R3, R10
    ADD R1, SP, #0x118+var_7C
    MOV R2, R9
    STR.W R11, [SP,#0x118+var_7C]
    STR.W R11, [SP,#0x118+var_78]
    BL sub_22C54
    ADD R0, SP, #0x118+var_D8
    MOVS R1, #0x5C
    BL sub_194E4
    ADD R0, SP, #0x118+var_4C
    MOVS R1, #0x20
    BL sub_194E4
loc_1757E:
    LDRB.W R3, [R9,#1]
    LDRB.W R1, [R9]
    LDRB.W R2, [R9,#3]
    LDRB.W R0, [R9,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    STR R3, [SP,#0x118+var_104]
    BLT loc_175AE
loc_175A4:
    LDR R3, [SP,#0x118+var_104]
    SUB.W R10, R10, #3
    CMP R3, R10
    BLT loc_175BC
loc_175AE:
    MOVW R11, #0xAB8C
    LDR.W R3, [R4,#0x100]
    MOVT.W R11, #3
    B loc_172B2
loc_175BC:
    LDR R6, [SP,#0x118+var_104]
    MOVS R1, #1
    ADD.W R11, R9, #4
    ADD.W R10, R6, #0x100
    MOV R0, R10
    BL sub_193B8
    LDR R2, [SP,#0x118+n]
    MOV R8, R0
    CMP R2, #0
    BNE.W loc_178E2
loc_175D8:
    CMP R6, #3
    BLE.W loc_178CA
loc_175DE:
    LDRB.W R3, [R9,#5]
    LDRB.W R0, [R9,#4]
    LDRB.W R2, [R9,#7]
    LSLS R3, R3, #0x10
    LDRB.W R1, [R9,#6]
    ORR.W R3, R3, R0,LSL#24
    ORRS R2, R3
    ORR.W R2, R2, R1,LSL#8
    ADDS R2, #7
    LSRS R2, R2, #3
    ADDS R3, R2, #4
    CMP R3, R6
    BHI.W loc_178CA
loc_17606:
    SUBS R0, R6, R3
    ADD.W R1, R9, #8
    CMP R0, #3
    STR R1, [SP,#0x118+var_F8]
    STR R2, [SP,#0x118+var_F4]
    ADD.W LR, R11, R3
    BLE.W loc_178BE
loc_1761A:
    LDRB.W R1, [LR,#1]
    LDRB.W R9, [R11,R3]
    LDRB.W R2, [LR,#3]
    LSLS R1, R1, #0x10
    LDRB.W R12, [LR,#2]
    ORR.W R1, R1, R9,LSL#24
    ORRS R1, R2
    ORR.W R1, R1, R12,LSL#8
    ADDS R1, #7
    LSRS R1, R1, #3
    ADDS R2, R1, #4
    CMP R2, R0
    BHI.W loc_178BE
loc_17642:
    ADD.W R0, LR, #4
    STR R0, [SP,#0x118+src]
    MOV R0, R2
    STR R1, [SP,#0x118+n]
loc_1764C:
    LDR R2, [SP,#0x118+var_104]
    ADD R3, R0
    ADD.W LR, R11, R3
    SUBS R1, R2, R3
    CMP R1, #3
    BLE.W loc_178B4
loc_1765C:
    LDRB.W R0, [LR,#1]
    LDRB.W R9, [R11,R3]
    LDRB.W R2, [LR,#3]
    LSLS R0, R0, #0x10
    LDRB.W R12, [LR,#2]
    ORR.W R0, R0, R9,LSL#24
    ORRS R0, R2
    ORR.W R2, R0, R12,LSL#8
    ADDS R2, #7
    LSRS R2, R2, #3
    ADDS R0, R2, #4
    CMP R0, R1
    BHI.W loc_178B4
loc_17684:
    ADD.W R1, LR, #4
    MOV R9, R2
    STR R1, [SP,#0x118+var_FC]
    MOV R1, R0
loc_1768E:
    ADD.W R12, R1, R3
    LDR R3, [SP,#0x118+var_104]
    ADD.W R1, R11, R12
    SUB.W R0, R3, R12
    CMP R0, #3
    BLE.W loc_178A8
loc_176A2:
    LDRB R2, [R1,#1]
    LDRB.W LR, [R11,R12]
    LDRB R6, [R1,#3]
    LSLS R2, R2, #0x10
    LDRB R3, [R1,#2]
    ORR.W R2, R2, LR,LSL#24
    ORRS R2, R6
    ORR.W R3, R2, R3,LSL#8
    ADDS R3, #7
    LSRS R3, R3, #3
    ADDS R2, R3, #4
    CMP R2, R0
    BHI.W loc_178A8
loc_176C4:
    MOV R0, R2
    ADDS R1, #4
    STR R3, [SP,#0x118+var_E8]
    STR R1, [SP,#0x118+var_E4]
loc_176CC:
    LDR R3, [SP,#0x118+var_104]
    ADD R12, R0
    ADD.W R1, R11, R12
    SUB.W R0, R3, R12
    CMP R0, #3
    BLE.W loc_1789C
loc_176DE:
    LDRB R2, [R1,#1]
    LDRB.W LR, [R11,R12]
    LDRB R6, [R1,#3]
    LSLS R2, R2, #0x10
    LDRB R3, [R1,#2]
    ORR.W R2, R2, LR,LSL#24
    ORRS R2, R6
    ORR.W R3, R2, R3,LSL#8
    ADDS R3, #7
    LSRS R3, R3, #3
    ADDS R2, R3, #4
    CMP R2, R0
    BHI.W loc_1789C
loc_17700:
    MOV R0, R2
    ADDS R1, #4
    STR R3, [SP,#0x118+var_F0]
    STR R1, [SP,#0x118+var_EC]
loc_17708:
    LDR R2, [SP,#0x118+var_104]
    ADD.W R3, R12, R0
    SUB.W R12, R2, R3
    ADD.W R2, R11, R3
    CMP.W R12, #3
    BLE.W loc_17892
loc_1771E:
    LDRB R1, [R2,#1]
    LDRB.W R0, [R11,R3]
    LDRB.W LR, [R2,#2]
    LDRB R3, [R2,#3]
    LSLS R1, R1, #0x10
    ORR.W R1, R1, R0,LSL#24
    ORRS R1, R3
    ORR.W R3, R1, LR,LSL#8
    ADDS R3, #7
    LSRS R3, R3, #3
    STR R3, [SP,#0x118+var_E0]
    ADDS R3, #4
    CMP R3, R12
    BHI.W loc_17892
loc_17744:
    ADDS R1, R2, #4
    STR R1, [SP,#0x118+var_DC]
    BEQ.W loc_17892
loc_1774C:
    MOV R3, #0x3A724
    MOV.W LR, #0
    STRB.W LR, [R8]
    LDR R0, [R3]
    MOVW R6, #0x3AC8
    LDRH.W R12, [R3,#(word_3A728 - 0x3A724)]
    LDRB.W R11, [R3,#(byte_3A72A - 0x3A724)]
    ADD.W R3, R8, #4
    STRB.W LR, [R8,#1]
    STRB.W LR, [R8,#2]
    MOV LR, R3
    STR.W R0, [R8,#4]
    MOVS R0, #7
    LDR R2, [SP,#0x118+var_F4]
    STRB.W R0, [R8,#3]
    ADD.W R0, R8, #0xB
    STRH.W R12, [R3,#4]
    MOV R3, R6
    STRB.W R11, [LR,#6]
    MOVT.W R3, #4
    LDR R1, [SP,#0x118+var_F8]
    STR R3, [SP,#0x118+var_104]
    BL sub_11588
    MOV R2, R9
    LDR R1, [SP,#0x118+var_FC]
    ADD.W R9, R0, #0xB
    ADD.W R0, R8, R9
    BL sub_11588
    LDR R6, [SP,#0x118+n]
    LDR R1, [SP,#0x118+src]
    MOV.W R12, R6,ASR#24
    MOV.W LR, R6,ASR#16
    MOV.W R11, R6,ASR#8
    MOV R2, R6
    ADD R9, R0
    ADD.W R3, R8, R9
    STR R3, [SP,#0x118+src]
    STRB.W R12, [R8,R9]
    ADDS R0, R3, #4
    STRB.W LR, [R3,#1]
    STRB.W R11, [R3,#2]
    STRB R6, [R3,#3]
    BLX memcpy
    LDR R3, [SP,#0x118+n]
    LDR R2, [SP,#0x118+var_E0]
    ADD.W R11, R3, #4
    LDR R1, [SP,#0x118+var_DC]
    ADD R11, R9
    ADD.W R0, R8, R11
    BL sub_11588
    LDR R2, [SP,#0x118+var_F0]
    LDR R1, [SP,#0x118+var_EC]
    ADD R11, R0
    ADD.W R0, R8, R11
    BL sub_11588
    LDR R2, [SP,#0x118+var_E8]
    LDR R1, [SP,#0x118+var_E4]
    ADD R11, R0
    ADD.W R0, R8, R11
    BL sub_11588
    LDR R3, [SP,#0x118+src]
    ADD R0, R11
    SUB.W R11, R0, R9
loc_17814:
    CMP.W R11, #0
    BLE loc_17878
loc_1781A:
    MOVS R1, #0xC
    MOVS R0, #1
    STR R3, [SP,#0x118+n]
    BL sub_193B8
    LDR R3, [SP,#0x118+n]
    MOV R1, R8
    MOV R2, R0
    MOV R6, R0
    LDR R0, [SP,#0x118+var_104]
    STR R0, [R2]
    MOV R2, R9
    STR.W R11, [SP,#0x118+var_118]
    LDR.W R9, [R0,#0x14]
    BLX R9
    STR R0, [R6,#4]
    CBZ R0, loc_17868
loc_17840:
    MOV R0, R4
    STR R6, [SP,#0x118+var_10C]
    BL sub_18A88
    MOV.W R11, #0
    STR R0, [R6,#8]
loc_1784E:
    CMP.W R8, #0
    BEQ loc_17862
loc_17854:
    MOV R0, R8
    MOV R1, R10
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
loc_17862:
    LDR.W R3, [R4,#0x100]
    B loc_172B2
loc_17868:
    MOV R0, R6
    MOVW R11, #0xA644
    BL sub_19494
    MOVT.W R11, #3
    B loc_1784E
loc_17878:
    MOVW R1, #0xA624
    MOVW R0, #0xAC7C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aSshcomRead
    MOVW R2, #0x99B
    BLX __assert_fail
loc_17892:
    MOV R11, #0x3AA8C
    B loc_1784E
loc_1789C:
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x118+var_F0]
    MOVS R3, #0
    STR R3, [SP,#0x118+var_EC]
    B loc_17708
loc_178A8:
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x118+var_E8]
    MOVS R3, #0
    STR R3, [SP,#0x118+var_E4]
    B loc_176CC
loc_178B4:
    MOVS R2, #0
    MOV.W R9, #0xFFFFFFFF
    STR R2, [SP,#0x118+var_FC]
    B loc_1768E
loc_178BE:
    LDR R2, [SP,#0x118+n]
    STR R2, [SP,#0x118+src]
    MOV.W R2, #0xFFFFFFFF
    STR R2, [SP,#0x118+n]
    B loc_1764C
loc_178CA:
    LDR R3, [SP,#0x118+n]
    MOV.W R2, #0xFFFFFFFF
    MOV R9, R2
    STR R2, [SP,#0x118+n]
    STR R2, [SP,#0x118+var_F4]
    STR R3, [SP,#0x118+var_F8]
    MOV R1, R3
    STR R3, [SP,#0x118+src]
    STR R3, [SP,#0x118+var_FC]
    LDR R3, [SP,#0x118+var_104]
    B loc_1768E
loc_178E2:
    LDRB.W R3, [R9,#5]
    LDRB.W R0, [R9,#4]
    LDRB.W R1, [R9,#7]
    LSLS R3, R3, #0x10
    LDRB.W R2, [R9,#6]
    ORR.W R3, R3, R0,LSL#24
    ORRS R3, R1
    ORRS.W R1, R3, R2,LSL#8
    BNE.W loc_17B14
loc_17902:
    LDR R3, [SP,#0x118+var_104]
    SUBS R2, R3, #4
    CMP R2, #3
    BLE.W loc_17B0A
loc_1790C:
    LDRB.W R0, [R9,#9]
    LDRB.W R12, [R9,#8]
    LDRB.W R3, [R9,#0xB]
    LSLS R0, R0, #0x10
    LDRB.W LR, [R9,#0xA]
    ORR.W R0, R0, R12,LSL#24
    ORRS R0, R3
    ORR.W R0, R0, LR,LSL#8
    ADDS R0, #7
    LSRS R0, R0, #3
    ADDS R3, R0, #4
    CMP R3, R2
    BHI.W loc_17B0A
loc_17934:
    ADD.W R2, R9, #0xC
    MOV R6, R0
    STR R2, [SP,#0x118+var_EC]
    MOV R2, R3
loc_1793E:
    LDR R3, [SP,#0x118+var_104]
    ADDS R2, #4
    ADD.W LR, R11, R2
    SUBS R0, R3, R2
    CMP R0, #3
    BLE.W loc_17AFE
loc_1794E:
    LDRB.W R1, [LR,#1]
    LDRB.W R9, [R11,R2]
    LDRB.W R3, [LR,#3]
    LSLS R1, R1, #0x10
    LDRB.W R12, [LR,#2]
    ORR.W R1, R1, R9,LSL#24
    ORRS R1, R3
    ORR.W R3, R1, R12,LSL#8
    ADDS R3, #7
    LSRS R3, R3, #3
    ADDS R1, R3, #4
    CMP R1, R0
    BHI.W loc_17AFE
loc_17976:
    ADD.W R0, LR, #4
    STR R0, [SP,#0x118+var_F8]
    MOV R0, R1
    STR R3, [SP,#0x118+var_FC]
loc_17980:
    LDR R3, [SP,#0x118+var_104]
    ADD.W R9, R2, R0
    ADD.W R0, R11, R9
    SUB.W R2, R3, R9
    CMP R2, #3
    BLE.W loc_17AF2
loc_17994:
    LDRB R1, [R0,#1]
    LDRB.W R12, [R11,R9]
    LDRB R3, [R0,#3]
    LSLS R1, R1, #0x10
    LDRB.W LR, [R0,#2]
    ORR.W R1, R1, R12,LSL#24
    ORRS R1, R3
    ORR.W R3, R1, LR,LSL#8
    ADDS R3, #7
    LSRS R3, R3, #3
    ADDS R1, R3, #4
    CMP R1, R2
    BHI.W loc_17AF2
loc_179B8:
    ADDS R2, R0, #4
    STR R2, [SP,#0x118+var_F0]
    MOV R2, R1
    STR R3, [SP,#0x118+var_F4]
loc_179C0:
    LDR R3, [SP,#0x118+var_104]
    ADD R2, R9
    ADD.W R0, R11, R2
    SUB.W R9, R3, R2
    CMP.W R9, #3
    BLE.W loc_17AE6
loc_179D4:
    LDRB R1, [R0,#1]
    LDRB.W R12, [R11,R2]
    LDRB R3, [R0,#3]
    LSLS R1, R1, #0x10
    LDRB.W LR, [R0,#2]
    ORR.W R1, R1, R12,LSL#24
    ORRS R1, R3
    ORR.W R3, R1, LR,LSL#8
    ADDS R3, #7
    LSRS R3, R3, #3
    ADDS R1, R3, #4
    CMP R1, R9
    BHI loc_17AE6
loc_179F6:
    MOV R9, R1
    ADDS R0, #4
    STR R3, [SP,#0x118+n]
    STR R0, [SP,#0x118+src]
loc_179FE:
    LDR R3, [SP,#0x118+var_104]
    ADD R2, R9
    ADD.W R1, R11, R2
    SUB.W R12, R3, R2
    CMP.W R12, #3
    BLE loc_17ADC
loc_17A10:
    LDRB R0, [R1,#1]
    LDRB.W LR, [R11,R2]
    LDRB R3, [R1,#3]
    LSLS R2, R0, #0x10
    LDRB R0, [R1,#2]
    ORR.W R2, R2, LR,LSL#24
    ORRS R2, R3
    ORR.W R3, R2, R0,LSL#8
    ADDS R3, #7
    MOV.W R11, R3,LSR#3
    ADD.W R3, R11, #4
    CMP R3, R12
    BHI loc_17ADC
loc_17A34:
    ADDS R3, R1, #4
    STR R3, [SP,#0x118+var_E8]
    BEQ loc_17ADC
loc_17A3A:
    MOV R3, #0x3A710
    MOV.W LR, #0
    MOV R2, R6
    LDR R0, [R3]
    MOVW R6, #0xF520
    LDRH.W R12, [R3,#(word_3A714 - 0x3A710)]
    MOVT.W R6, #3
    LDRB.W R9, [R3,#(byte_3A716 - 0x3A710)]
    STRB.W LR, [R8]
    STRB.W LR, [R8,#1]
    STRB.W LR, [R8,#2]
    STRH.W R12, [R8,#8]
    LDR R1, [SP,#0x118+var_EC]
    STR.W R0, [R8,#4]
    MOVS R0, #7
    STRB.W R9, [R8,#0xA]
    STRB.W R0, [R8,#3]
    ADD.W R0, R8, #0xB
    STR R6, [SP,#0x118+var_104]
    BL sub_11588
    LDR R2, [SP,#0x118+var_F4]
    LDR R1, [SP,#0x118+var_F0]
    ADD.W R9, R0, #0xB
    ADD.W R0, R8, R9
    BL sub_11588
    LDR R2, [SP,#0x118+var_FC]
    LDR R1, [SP,#0x118+var_F8]
    ADD R9, R0
    ADD.W R0, R8, R9
    BL sub_11588
    LDR R2, [SP,#0x118+n]
    LDR R1, [SP,#0x118+src]
    ADD R9, R0
    ADD.W R0, R8, R9
    BL sub_11588
    MOV R2, R11
    LDR R1, [SP,#0x118+var_E8]
    ADD R9, R0
    ADD.W R3, R8, R9
    STR R3, [SP,#0x118+n]
    MOV R0, R3
    BL sub_11588
    LDR R3, [SP,#0x118+n]
    MOV R11, R0
    B loc_17814
loc_17AC8:
    STR R6, [SP,#0x118+var_10C]
    B loc_1757E
loc_17ACC:
    MOVW R11, #0xAC3C
    STR.W R10, [SP,#0x118+var_10C]
    MOVT.W R11, #3
    B.W loc_172B2
loc_17ADC:
    MOV R11, #0x3AAB4
    B loc_1784E
loc_17AE6:
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x118+n]
    MOVS R3, #0
    STR R3, [SP,#0x118+src]
    B loc_179FE
loc_17AF2:
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x118+var_F4]
    MOVS R3, #0
    STR R3, [SP,#0x118+var_F0]
    B loc_179C0
loc_17AFE:
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x118+var_FC]
    MOVS R3, #0
    STR R3, [SP,#0x118+var_F8]
    B loc_17980
loc_17B0A:
    MOV.W R3, #0xFFFFFFFF
    STR R1, [SP,#0x118+var_EC]
    MOV R6, R3
    B loc_1793E
loc_17B14:
    MOV R11, #0x3AADC
    B loc_1784E
```
Output: R1, SP, #0x118+var_60
    MOV R0, R11
    MOV R2, #0x10
    BLX memcpy
    LDR R3, [SP,#0x118+var_10C]
    CBNZ R0, loc_173C6
loc_173C0:
    MOV W11, #0x3AD54
    MOVS R2, #0
    MOV W11, #0x3AD54
    MOV W11, #0x3AD54
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_173C6:
    MOVW R11, #0xAC58
    MOVS R2, #0
    MOVT.W R11, #3
    STR R2, [SP,#0x118+var_10C]
    B loc_172B2
loc_173D0:
    MOV R0, R4
    B loc_172DE
```
<|im_start|><|im_end|>
############
```assembly
loc_111C4:
    BX PC
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unknown",
  "stack-arg-use:false",
  "standard-calling-convention-not-applicable",
  "stack-frame-management-not-applicable",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "conditional-branching-not-applicable",
  "unconditional-jumps-present",
  "external-function-calls-not-applicable",
  "integer-size-hint:not-applicable",
  "memory-access-not-applicable",
  "inferred-algorithm:not-applicable"
]
```<|im_end|>
############
```assembly
loc_1BC50:
    BIC.W R3, R2, #8
    CMP R3, #0x10
    IT 
    CMPNE R2, #0x20
    PUSH.W {R4-R11,LR}
    IT 
    MOVNE R3, #1
    SUB SP, SP, #0x14
    IT 
    MOVEQ R3, #0
    BNE.W loc_1BF60
loc_1BC6C:
    ADDS R7, R2, #3
    MOV R5, R1
    BICS.W R2, R2, R2,ASR#32
    IT 
    MOVCS R2, R7
    MOV R1, #0x19A85
    STR.W R1, [R0,#0x3C0]
    ASRS R7, R2, #2
    MOV R8, R0
    CMP R7, #4
    MOVW R9, #0xC078
    MOV R2, R7
    MOVT.W R9, #3
    IT 
    MOVLT R2, #4
    ADD.W R11, R2, #7
    ADD.W R10, R2, #6
    STR R2, [SP,#0x38+var_38]
    MOV.W R1, R11,LSL#2
    SUB.W R2, R0, R7,LSL#2
    STR.W R10, [R0,#0x3EC]
    MOV R4, R3
    MOV R0, R1
    MOV R3, #0x1A6FD
    STR.W R3, [R8,#0x3C4]
    MOVS R3, #1
    MOVS R1, #4
    SUB.W R6, R8, #4
    STR.W R1, [R8,#0x3E8]
    STR.W R10, [SP,#0x38+var_34]
    MOV R10, R3
    STR.W R8, [SP,#0x38+var_30]
    MOV R8, R0
    STR.W R11, [SP,#0x38+var_2C]
    MOV R11, R9
    MOV R9, R2
    B loc_1BD0C
loc_1BCE0:
    LDRB R0, [R5,#1]
    ADDS R4, #1
    LDRB.W R12, [R5]
    CMP R4, R8
    LDRB R1, [R5,#3]
    ADD.W R6, R6, #4
    LDRB.W LR, [R5,#2]
    MOV.W R0, R0,LSL#16
    ORR.W R0, R0, R12,LSL#24
    ADD.W R5, R5, #4
    ORR.W R1, R1, R0
    ORR.W R1, R1, LR,LSL#8
    STR R1, [R6]
    BEQ loc_1BD78
loc_1BD0C:
    CMP R7, R4
    BGT loc_1BCE0
loc_1BD10:
    MOV R1, R7
    MOV R0, R4
    BL sub_389DC
    LDR R3, [R6]
    CMP R1, #0
    BEQ.W loc_1BF0E
loc_1BD20:
    SUB.W R1, R1, #4
    CMP R7, #6
    CLZ.W R1, R1
    MOV.W R1, R1,LSR#5
    IT 
    MOVLE R1, #0
    CBZ R1, loc_1BD64
loc_1BD34:
    UBFX.W R0, R3, #0x10, #8
    ADD.W R12, R11, R3,LSR#24
    ADD R0, R11
    UBFX.W R1, R3, #8, #8
    LDRB.W R12, [R12,#-0xF8]
    ADD R1, R11
    LDRB.W R0, [R0,#-0xF8]
    UXTAB.W LR, R11, R3
    LDRB.W R1, [R1,#-0xF8]
    ORR.W R0, R0, R12,LSL#8
    LDRB.W LR, [LR,#-0xF8]
    ORR.W R1, R1, R0,LSL#8
    ORR.W R3, LR, R1,LSL#8
loc_1BD64:
    LDR.W R1, [R9,R4,LSL#2]
    EORS R1, R3
    STR R1, [R6,#4]
loc_1BD6C:
    ADDS R4, #1
    ADDS R5, #4
    CMP R4, R8
    ADD.W R6, R6, #4
    BNE loc_1BD0C
loc_1BD78:
    LDR R3, [SP,#0x38+var_38]
    MOVS R6, #3
    LDR.W R8, [SP,#0x38+var_30]
    MOVS R4, #0
    LDR.W R10, [SP,#0x38+var_34]
    LDR.W R11, [SP,#0x38+var_2C]
    ADD.W R1, R8, R3,LSL#4
    MOV R3, #0x3C078
    MOV R0, R8
loc_1BD98:
    LDR R2, [R1,#0x60]
    CMP R4, #0
    BEQ.W loc_1BF7A
loc_1BDA0:
    CMP R10, R4
    BEQ.W loc_1BF90
loc_1BDA6:
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R7, R3, R2
    UBFX.W R5, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD R5, R3
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD R2, R3
    LDRB.W R12, [R5,#-0xF8]
    MOV R5, R6
    LDRB.W R2, [R2,#-0xF8]
    ADD.W R9, R3, R7,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R12, R3, R12,LSL#2
    LDR.W R7, [LR,#8]
    LDR.W LR, [R9,#0x408]
    ADD.W R9, R3, R2,LSL#2
    LDR.W R2, [R12,#0x808]
    EOR.W R7, LR, R7
    LDR.W LR, [R9,#0xC08]
    EORS R2, R7
    EOR.W R2, LR, R2
    STR.W R2, [R0,#0x1E0]
    LDR R2, [R1,#0x64]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W LR, R2, #8, #8
    ADD.W R7, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD LR, R3
    LDRB.W R12, [R2,#-0xF8]
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD.W R12, R3, R12,LSL#2
    ADD.W R7, R3, R7,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R12, [R12,#0x408]
    LDR R7, [R7,#8]
    ADD.W LR, R3, LR,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W R7, R12, R7
    LDR.W LR, [LR,#0xC08]
    EORS R2, R7
    EOR.W R2, LR, R2
    STR.W R2, [R0,#0x1E4]
    LDR R2, [R1,#0x68]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W LR, R2, #8, #8
    ADD.W R7, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD LR, R3
    LDRB.W R12, [R2,#-0xF8]
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD.W R12, R3, R12,LSL#2
    ADD.W R7, R3, R7,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R12, [R12,#0x408]
    LDR R7, [R7,#8]
    ADD.W LR, R3, LR,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W R7, R12, R7
    LDR.W LR, [LR,#0xC08]
    EORS R2, R7
    EOR.W R2, LR, R2
    STR.W R2, [R0,#0x1E8]
    LDR R2, [R1,#0x6C]
    UBFX.W R7, R2, #8, #8
    UBFX.W R9, R2, #0x10, #8
    ADD R7, R3
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    LDRB.W R7, [R7,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ADD.W R7, R3, R7,LSL#2
    ADD.W LR, R3, LR,LSL#2
    LDR.W R7, [R7,#0xC08]
    LDRB.W R12, [R2,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R12, [R12,#0x408]
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R12, LR
    EOR.W R2, LR, R2
    EORS R2, R7
loc_1BEEE:
    ADDS R4, #1
    ADDS R5, #0x78
    CMP R4, R11
    SUB.W R1, R1, #0x10
    ADD.W R6, R6, #4
    STR.W R2, [R8,R5,LSL#2]
    ADD.W R0, R0, #0x10
    BNE.W loc_1BD98
loc_1BF08:
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_1BF0E:
    UBFX.W R1, R3, #0x10, #8
    UBFX.W R0, R3, #8, #8
    ADD R1, R11
    ADD R0, R11
    UXTAB.W R12, R11, R3
    ADD.W LR, R11, R3,LSR#24
    LDRB.W R1, [R1,#-0xF8]
    LDRB.W R0, [R0,#-0xF8]
    EOR.W R1, R1, R10
    LDRB.W R12, [R12,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    ORR.W R0, R0, R1,LSL#8
    MOV.W R1, R10,LSL#1
    ANDS.W R10, R10, #0x80
    UXTB R1, R1
    ORR.W R0, R12, R0,LSL#8
    IT 
    MOVNE.W R10, #0x1B
    EOR.W R10, R1, R10
    LDR.W R1, [R9,R4,LSL#2]
    ORR.W R3, LR, R0,LSL#8
    EORS R1, R3
    STR R1, [R6,#4]
    B loc_1BD6C
loc_1BF60:
    MOVW R1, #0xD380
    MOVW R0, #0xD39C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aAesSetup
    MOVW R2, #0x3A7
    BLX __assert_fail
loc_1BF7A:
    STR.W R2, [R8,#0x1E0]
    MOVS R5, #3
    LDR R2, [R1,#0x64]
    STR.W R2, [R8,#0x1E4]
    LDR R2, [R1,#0x68]
    STR.W R2, [R8,#0x1E8]
    LDR R2, [R1,#0x6C]
    B loc_1BEEE
loc_1BF90:
    STR.W R2, [R0,#0x1E0]
    MOV R5, R6
    LDR R2, [R1,#0x64]
    STR.W R2, [R0,#0x1E4]
    LDR R2, [R1,#0x68]
    STR.W R2, [R0,#0x1E8]
    LDR R2, [R1,#0x6C]
    B loc_1BEEE
loc_1BFB0:
    MOVS R2, #0x10
    B loc_1BC50
```
Output:0xF8]
    ORR.W R7, R7, R12,LSL#8
    ORR.W R2, R2, R0,LSL#8
    ORR.W R1, LR, R2,LSL#8
    EORS R1, R1, R0
    STR R1, [R8,#4]
    ADDS R4, #1
    ADDS R1, #0x60
    BNE loc_1BDBA
loc_1BDBA:
    ADDS R3, R3, #1
    CMP R3, #0x3C1
    BNE loc_1BD98
loc_1BDC8:
    ADD.W R8, R8, #0x100
    ADD.W R1, R1, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R10
    BNE loc_1BD98
loc_1BDD4:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R11
    BNE loc_1BD98
loc_1BDE0:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R6
    BNE loc_1BD98
loc_1BDF0:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R9
    BNE loc_1BD98
loc_1BE00:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R1
    BNE loc_1BD98
loc_1BE10:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R2
    BNE loc_1BD98
loc_1BE20:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R0
    BNE loc_1BD98
loc_1BE30:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R7
    BNE loc_1BD98
loc_1BE40:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R5
    BNE loc_1BD98
loc_1BE50:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R12
    BNE loc_1BD98
loc_1BE60:
    ADD.W R1, R1, #0x100
    ADD.W R8, R8, #0x100
    ADDS R4, #1
    ADDS R3, R3, #1
    CMP R4, R11
    BNE loc_1BD98
loc_1BE70:
    ADD
############
```assembly
loc_56954:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_241C0:
    PUSH.W {R4-R11,LR}
    MOV R7, #0x56190
    SUB SP, SP, #0x2C
    MOV R5, R1
    MOV R6, R0
    LDR R4, [R7]
    MOV R1, R2
    MOV R0, R5
    ADD R2, SP, #0x50+var_40
    STR R3, [SP,#0x50+var_44]
    MOV.W R9, #0x14
    STR R4, [SP,#0x50+var_2C]
    BL sub_338F8
    LDR R1, [R6,#4]
    ADD R3, SP, #0x50+var_40
    LDR R2, [R6,#0x10]
    MOVW R0, #0xF588
    STR.W R9, [SP,#0x50+var_50]
    MOVT.W R0, #3
    BL sub_24070
    LDR R1, [R6,#4]
    MOV R10, R0
    BL sub_20228
    CMP R0, #0
    BEQ loc_242F4
loc_24208:
    LDR R2, [R6]
    MOV R8, R0
    MOV R1, R10
    LDR R0, [R6,#8]
    BL sub_20724
    LDR R1, [R6,#4]
    MOVS R4, #0x13
    MOV R11, R0
    BL sub_200D4
    MOV R5, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R1, R9
    ADD R0, SP, #0x50+var_40
    BL sub_1EDA8
    MOV R1, R5
    MOV R9, R0
    MOV R2, R0
    LDR R0, [R6,#0x10]
    BL sub_1FAF0
    LDR R2, [R6,#4]
    MOV R1, R0
    MOV R11, R0
    MOV R0, R8
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    MOVS R1, #1
    MOVS R0, #0x37
    BL sub_193B8
    MOV R3, #0x3A710
    MOV.W R12, #7
    MOVS R2, #0x28
    LDRH.W LR, [R3,#(word_3A714 - 0x3A710)]
    LDRB R1, [R3,#(byte_3A716 - 0x3A710)]
    MOV R10, R0
    LDR R0, [R3]
    ADD.W R9, R10, #0x22
    MOV R8, R10
    MOVS R3, #0
    STRB.W R12, [R10,#3]
    STR.W R0, [R10,#4]
    STRB.W R3, [R10]
    STRB.W R3, [R10,#1]
    STRB.W R3, [R10,#2]
    STRH.W LR, [R10,#8]
    STRB.W R1, [R10,#0xA]
    STRB.W R3, [R10,#0xB]
    STRB.W R3, [R10,#0xC]
    STRB.W R3, [R10,#0xD]
    STRB.W R2, [R8,#0xE]!
loc_242B4:
    MOV R1, R4
    MOV R0, R5
    BL sub_1F20C
    MOV R1, R4
    SUBS R4, #1
    STRB.W R0, [R8,#1]!
    MOV R0, R6
    BL sub_1F20C
    ADDS R3, R4, #1
    STRB.W R0, [R9,#1]!
    BNE loc_242B4
loc_242D2:
    MOV R0, R5
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1E6B0
    LDR R2, [SP,#0x50+var_2C]
    LDR R3, [R7]
    MOVS R1, #0x37
    LDR R4, [SP,#0x50+var_44]
    MOV R0, R10
    CMP R2, R3
    STR R1, [R4]
    BNE loc_2430E
loc_242EE:
    ADD SP, SP, #0x2C
    POP.W {R4-R11,PC}
loc_242F4:
    MOVW R1, #0xF55C
    MOVW R0, #0xF5A8
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aDssSign
    MOVW R2, #0x26F
    BLX __assert_fail
loc_2430E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x2c",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "external-call-type:unspecified-helper (sub_338F8)",
  "external-call-type:unspecified-helper (sub_24070)",
  "external-call-type:unspecified-helper (sub_20228)",
  "external-call-type:unspecified-helper (sub_20724)",
  "external-call-type:unspecified-helper (sub_200D4)",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "external-call-type:unspecified-helper (sub_1EDA8)",
  "external-call-type:unspecified-helper (sub_1FAF0)",
  "external-call-type:unspecified-helper (sub_1EAC0)",
  "external-call-type:unspecified-helper (sub_1F20C)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operations",
  "magic-number:0x56190",
  "magic-number:0xF588",
  "magic-number:0xF55C",
  "magic-number:0xF5A8",
  "magic-number:0x26F",
  "address-or-offset-constant:aDssSign",
  "inferred-algorithm:data-encryption-or-signature-generation",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:conditional-check-and-jump",
  "inferred-algorithm:memory-layout-and-field-access",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:stack-protection"
]
```<|im_end|>
############
```assembly
loc_2EC48:
    PUSH {R4-R6,LR}
    MOV R4, R0
    LDR R1, [R0,#0x18]
    LDR R0, [R0,#0x14]
    BL sub_1FC7C
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1FC7C)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0x14",
  "memory-read-from-input-parameter-offset:0x18",
  "inferred-algorithm:function-wrapper-or-trampoline",
  "inferred-algorithm:argument-forwarding",
  "inferred-algorithm:internal-state-access"
]
```<|im_end|>
############
```assembly
loc_26328:
    CMP R2, #3
    BGT loc_26330
loc_2632C:
    MOVS R0, #0
    BX LR
loc_26330:
    PUSH.W {R3-R9,LR}
    MOV R4, R1
    LDRB R3, [R1,#1]
    MOV R8, R0
    LDRB R1, [R1]
    MOV R6, R2
    LDRB R0, [R4,#2]
    LDRB R2, [R4,#3]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    LDR.W R5, [R8,#0x38]
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R9, R0, #0
    BLT loc_263FA
loc_2635C:
    SUBS R6, #4
    CMP R9, R6
    BGT loc_263FA
loc_26362:
    ADDS R4, #4
    SUB.W R6, R6, R9
    ADD.W R7, R4, R9
    CMP R4, #0
    BEQ loc_263FA
loc_26370:
    LDR R3, [R5]
    BLX R3
    LDR R3, [R0]
    MOV R5, R0
    BICS.W R2, R3, #2
    BNE loc_26466
loc_2637E:
    CBNZ R3, loc_263B8
loc_26380:
    CMP R6, #3
    BLE loc_263FA
loc_26384:
    LDRB R3, [R7,#1]
    LDRB.W R1, [R4,R9]
    LDRB R2, [R7,#3]
    LDRB R0, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    CMP R0, #0
    BLT loc_263FA
loc_263A2:
    SUBS R3, R6, #4
    CMP R0, R3
    BGT loc_263FA
loc_263A8:
    ADDS R1, R7, #4
    SUBS R6, R3, R0
    ADDS R7, R1, R0
    CBZ R1, loc_263FA
loc_263B0:
    LDR R2, [R5,#4]
    BL sub_19870
    CBZ R0, loc_263FA
loc_263B8:
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    CMP R6, #3
    MOV.W R3, #0
    STR.W R8, [R0]
    MOV R4, R0
    STR R5, [R0,#4]
    ADD.W R8, R0, #4
    STRB R3, [R0,#0x14]
    STR R3, [R0,#8]
    STR R3, [R0,#0xC]
    STR R3, [R0,#0x10]
    STR R3, [R0,#0x18]
    BGT loc_26400
loc_263DE:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_263E6
loc_263E2:
    BL sub_1E6B0
loc_263E6:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_263EE
loc_263EA:
    BL sub_1E6B0
loc_263EE:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_263FA:
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_26400:
    LDRB R3, [R7,#1]
    LDRB R1, [R7]
    LDRB R2, [R7,#3]
    LDRB R0, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_26452
loc_2641C:
    SUBS R3, R6, #4
    CMP R1, R3
    BGT loc_26452
loc_26422:
    ADDS R0, R7, #4
    BEQ loc_26452
loc_26426:
    MOV R2, R8
    BL sub_25510
    CBZ R0, loc_26452
loc_2642E:
    LDR R0, [R4,#8]
    CBZ R0, loc_2645A
loc_26432:
    LDR R3, [R4,#0xC]
    CBZ R3, loc_26456
loc_26436:
    LDR R1, [R5,#0x10]
    BL sub_1F358
    CMP R0, #0
    BGE loc_26452
loc_26440:
    LDR R1, [R5,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1F358
    CMP R0, #0
    BGE loc_26452
loc_2644C:
    MOV R0, R4
    POP.W {R3-R9,PC}
loc_26452:
    LDR R0, [R4,#8]
    CBZ R0, loc_2645A
loc_26456:
    BL sub_1E6B0
loc_2645A:
    LDR R0, [R4,#0xC]
    CMP R0, #0
    BEQ loc_263DE
loc_26460:
    BL sub_1E6B0
    B loc_263DE
loc_26466:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD20
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaNewkey
    MOVW R2, #0x6E9
    BLX __assert_fail
```
Output:8]
    CBZ R0, loc_2645A
loc_26456:
    MOV R0, R4
    POP.W {R3-R9,PC}
loc_2645A:
    MOV R0, R4
    POP.W {R3-R9,PC}
```
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3

############
```assembly
loc_5698C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1FE60:
    PUSH.W {R4-R8,LR}
    MOV R4, R0
    LDR R0, [R0]
    MOV R6, R1
    CMP R0, #0
    BLE loc_1FEE4
loc_1FE6E:
    MOVW R3, #0xFFFE
    ADDS R5, R0, #1
    MOVT.W R3, #0x3FF
    CMP R5, R3
    BGT loc_1FEEC
loc_1FE7C:
    ADDS R0, #2
    LSLS R7, R0, #2
loc_1FE80:
    MOVS R1, #4
    BL sub_193B8
    MOV R2, R7
    MOVS R1, #0
    MOV R8, R0
    BLX memset
    MOVS R1, #0
    MOV R12, R8
    MOV R3, R1
    MOV LR, R1
    MOVS R2, #1
    STR.W R1, [R8]
loc_1FE9E:
    LDR R7, [R4]
    CMP R3, #0
    MOV.W R1, #0
    ITE 
    MOVEQ R0, R6
    MOVNE R0, #0
    CMP R3, R7
    ITE 
    LDRCC.W R7, [R4,R2,LSL#2]
    MOVCS R7, #0
    ADDS.W R0, R0, LR
    ADC.W R1, R1, #0
    ADDS R0, R0, R7
    ADC.W R1, R1, #0
    STR.W R0, [R12,#4]!
    MOV LR, R1
    MOV R1, R2
    CBZ R0, loc_1FED2
loc_1FECE:
    STR.W R2, [R8]
loc_1FED2:
    CMP R5, R1
    ADD.W R3, R3, #1
    ADD.W R2, R2, #1
    BGT loc_1FE9E
loc_1FEDE:
    MOV R0, R8
    POP.W {R4-R8,PC}
loc_1FEE4:
    MOVS R7, #0xC
    MOVS R0, #3
    MOVS R5, #2
    B loc_1FE80
loc_1FEEC:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-patterns:incrementing",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_115CC)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:2",
  "fixed-value-assignment:3",
  "fixed-value-assignment:4",
  "fixed-value-assignment:0xC",
  "byte-level-operations:bitwise-shift-left",
  "byte-level-operations:bitwise-addition",
  "byte-level-operations:bitwise-AND",
  "byte-level-operations:bitwise-OR",
  "byte-level-operations:bitwise-XOR",
  "memory-access-with-offset",
  "memory-access-with-pointer-arithmetic",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:loop-based-data-processing",
  "inferred-algorithm:conditional-data-masking",
  "inferred-algorithm:data-compression-decompression"
]
```<|im_end|>
############
```assembly
loc_2F240:
    MOV R1, R0
    MOVS R2, #0x6C
    PUSH {R3,LR}
    ADDS R0, #0xD8
    BLX memcpy
    POP {R3,PC}
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:unsigned-integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "inferred-algorithm:data-copying-or-memmove"
]
```<|im_end|>
############
```assembly
loc_2C994:
    PUSH.W {R4-R11,LR}
    MOV R10, #0x56190
    SUB SP, SP, #0x54
    ADD R2, SP, #0x78+var_6C
    MOV R9, R0
    LDR.W R3, [R10]
    MOV R11, R1
    MOVW R7, #0x3854
    MOVW R6, #0x384C
    MOVT.W R7, #4
    ADD.W R8, SP, #0x78+var_2F
    STR R3, [SP,#0x78+var_2C]
    BL sub_297EC
    LDRB.W R2, [SP,#0x78+var_6C]
    MOVT.W R6, #4
    ADD R5, SP, #0x78+var_6C
    ADD R4, SP, #0x78+var_5C
loc_2C9CE:
    STR R2, [SP,#0x78+var_78]
    MOV R0, R4
    MOV.W R2, #0xFFFFFFFF
    STR R7, [SP,#0x78+var_74]
    MOV R3, R6
    MOVS R1, #1
    ADDS R4, #3
    BLX __sprintf_chk
    CMP R4, R8
    LDRB.W R2, [R5,#1]!
    BNE loc_2C9CE
loc_2C9EA:
    STR R2, [SP,#0x78+var_78]
    MOV R0, R4
    MOVS R1, #1
    MOVW R2, #0x555C
    MOVW R3, #0x384C
    MOVT.W R2, #4
    MOVT.W R3, #4
    STR R2, [SP,#0x78+var_74]
    MOV.W R2, #0xFFFFFFFF
    BLX __sprintf_chk
    LDRB.W R3, [R9,#1]
    LDRB.W R1, [R9]
    LDRB.W R2, [R9,#3]
    LDRB.W R0, [R9,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R4, R0, #0
    BLE loc_2CA36
loc_2CA2E:
    SUB.W R3, R11, #4
    CMP R4, R3
    BLT loc_2CA4C
loc_2CA36:
    ADD R0, SP, #0x78+var_5C
    BL sub_18A88
loc_2CA3C:
    LDR R2, [SP,#0x78+var_2C]
    LDR.W R3, [R10]
    CMP R2, R3
    BNE loc_2CB28
loc_2CA46:
    ADD SP, SP, #0x54
    POP.W {R4-R11,PC}
loc_2CA4C:
    ADD.W R5, R9, #4
    MOV R2, #0x3A724
    MOV R1, R5
    BL sub_19870
    CBZ R0, loc_2CA88
loc_2CA60:
    MOV R0, #0x43AC8
loc_2CA68:
    MOV R2, R11
    MOV R1, R9
    LDR R3, [R0,#0x24]
    BLX R3
    ADD R3, SP, #0x78+var_5C
    MOV R2, R5
    STR R3, [SP,#0x78+var_78]
    MOV R1, R4
    MOV R3, R0
    MOV R0, #0x43858
    BL sub_18C24
    B loc_2CA3C
loc_2CA88:
    MOVW R2, #0xA710
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CAA4
loc_2CA9A:
    MOV R0, #0x3F520
    B loc_2CA68
loc_2CAA4:
    MOVW R2, #0xFE3C
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CAC0
loc_2CAB6:
    MOV R0, #0x3FB34
    B loc_2CA68
loc_2CAC0:
    MOVW R2, #0xFE28
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CADC
loc_2CAD2:
    MOV R0, #0x3FB70
    B loc_2CA68
loc_2CADC:
    MOVW R2, #0xFE14
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CAF8
loc_2CAEE:
    MOV R0, #0x3FBAC
    B loc_2CA68
loc_2CAF8:
    MOVW R2, #0xFE50
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CB14
loc_2CB0A:
    MOV R0, #0x3FBE8
    B loc_2CA68
loc_2CB14:
    ADD R3, SP, #0x78+var_5C
    MOV R2, R5
    MOV R1, R4
    MOV R0, #0x43864
    BL sub_18C24
    B loc_2CA3C
loc_2CB28:
    BLX __stack_chk_fail
```
Output:_chk_fail
```
<|im_start|>```<|im_end|>
############
```assembly
loc_14428:
    PUSH.W {R4-R11,LR}
    MOV R8, #0x56190
    SUB SP, SP, #0x2C
    MOV R5, R0
    MOV R11, R1
    LDR.W R3, [R8]
    MOVS R1, #0x38
    MOVS R0, #1
    MOVS R4, #0
    STR R3, [SP,#0x50+var_2C]
    BL sub_193B8
    MOV R2, R4
    MOV R1, #0x3A374
    MOV R6, R0
    MOV R0, R5
    STR R4, [R6,#0x2C]
    STR R4, [R6,#0x34]
    STR R4, [R6,#0x30]
    BL sub_3694C
    MOV R7, R0
    CMP R0, #0
    BEQ loc_1452E
loc_14468:
    BL sub_18E74
    MOV R5, R0
    CMP R0, #0
    BEQ loc_1451E
loc_14472:
    BLX strlen
    ADD R0, R5
    CMP R5, R0
    BCS loc_144A0
loc_1447C:
    LDRB.W R3, [R0,#-1]
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_144A0
loc_14488:
    SUBS R0, #1
    MOV R2, R4
    B loc_1449A
loc_1448E:
    LDRB.W R3, [R0,#-1]!
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_144A0
loc_1449A:
    CMP R5, R0
    STRB R2, [R0]
    BNE loc_1448E
loc_144A0:
    MOVW R1, #0xA248
    MOV R0, R5
    MOVT.W R1, #3
    BL sub_1990C
    CMP R0, #0
    BNE loc_1453E
loc_144B2:
    MOV R4, #0x3A11C
    ADD R3, SP, #0x50+var_30
    STR R3, [SP,#0x50+var_50]
loc_144BE:
    MOV R0, R5
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R0, [SP,#0x50+var_50]
loc_144D4:
    MOVS R1, #4
    BL sub_194E4
    LDR R0, [R6,#0x2C]
    CBZ R0, loc_144EA
loc_144DE:
    LDR R1, [R6,#0x34]
    BL sub_194E4
    LDR R0, [R6,#0x2C]
    BL sub_19494
loc_144EA:
    MOV R0, R6
    MOVS R1, #0x38
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
    CMP.W R11, #0
    BEQ loc_14502
loc_144FE:
    STR.W R4, [R11]
loc_14502:
    MOV R0, R7
    CBZ R7, loc_1450C
loc_14506:
    BLX fclose
    MOVS R0, #0
loc_1450C:
    LDR R2, [SP,#0x50+var_2C]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE.W loc_148FA
loc_14518:
    ADD SP, SP, #0x2C
    POP.W {R4-R11,PC}
loc_1451E:
    ADD R3, SP, #0x50+var_30
    MOVW R4, #0xA104
    STR R3, [SP,#0x50+var_50]
    MOVT.W R4, #3
    MOV R0, R3
    B loc_144D4
loc_1452E:
    ADD R3, SP, #0x50+var_30
    MOVW R4, #0xA0EC
    STR R3, [SP,#0x50+var_50]
    MOVT.W R4, #3
    MOV R0, R3
    B loc_144D4
loc_1453E:
    MOVW R1, #0xA254
    MOV R0, R5
    MOVT.W R1, #3
    BL sub_1992C
    CMP R0, #0
    BEQ loc_144B2
loc_14550:
    MOVW R1, #0xA268
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_1469C
loc_14564:
    MOVW R1, #0xA288
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_1486C
loc_14578:
    STR R0, [R6]
loc_1457A:
    MOV R0, R5
    MOVS R4, #0
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOVS R2, #0x20
    STR R4, [R6,#4]
    MOV R1, R4
    ADD.W R0, R6, #0xC
    BLX memset
    MOV R2, #0x47FF1
    STR R7, [SP,#0x50+var_4C]
    STR.W R8, [SP,#0x50+var_40]
    MOV R8, R4
    MOV R7, R2
    MOVW R3, #0xA2EC
    STR.W R11, [SP,#0x50+var_44]
    MOVT.W R3, #3
    STR R3, [SP,#0x50+var_48]
    ADD R3, SP, #0x50+var_30
    STR R3, [SP,#0x50+var_50]
loc_145C2:
    LDR R0, [SP,#0x50+var_4C]
    BL sub_18E74
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_148A0
loc_145D0:
    BLX strlen
    ADD R0, R5
    CMP R5, R0
    BCS loc_145FE
loc_145DA:
    LDRB.W R3, [R0,#-1]
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_145FE
loc_145E6:
    SUBS R0, #1
    MOVS R2, #0
    B loc_145F8
loc_145EC:
    LDRB.W R3, [R0,#-1]!
    CMP R3, #0xA
    IT 
    CMPNE R3, #0xD
    BNE loc_145FE
loc_145F8:
    CMP R0, R5
    STRB R2, [R0]
    BNE loc_145EC
loc_145FE:
    LDR R1, [SP,#0x50+var_48]
    MOV R0, R5
    BL sub_1990C
    CMP R0, #0
    BNE.W loc_14746
loc_1460C:
    MOVS R1, #0x3A
    MOV R0, R5
    BLX strchr
    CMP R0, #0
    BEQ.W loc_147A4
loc_1461A:
    CMP.W R8, #0
    BNE.W loc_148B6
loc_14622:
    LDRB.W R9, [R0,#1]
    ADD.W R10, R0, #1
    STRB.W R8, [R0]
    CMP.W R9, #0
    BEQ loc_146A2
loc_14634:
    BLX __ctype_b_loc
    MOV R3, R9
    LDR R2, [R0]
    B loc_14644
loc_1463E:
    LDRB.W R3, [R10,#1]!
    CBZ R3, loc_146A2
loc_14644:
    LDRH.W R1, [R2,R3,LSL#1]
    LSLS R0, R1, #0x12
    BMI loc_1463E
loc_1464C:
    MOVW R1, #0xA2F8
    MOV R0, R5
    MOVT.W R1, #3
    MOV R9, R3
    BLX strcmp
    CBNZ R0, loc_146B6
loc_1465E:
    CMP.W R9, #0x34
    BNE.W loc_148CA
loc_14666:
    LDRB.W R3, [R10,#1]
    CMP R3, #0x2C
    BNE.W loc_148CA
loc_14670:
    MOVW R1, #0xA304
    ADD.W R0, R10, #2
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_14686
loc_14682:
    MOVS R3, #1
    STR R3, [R6,#4]
loc_14686:
    MOV R0, R5
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    B loc_145C2
loc_1469C:
    MOVS R3, #1
    STR R3, [R6]
    B loc_1457A
loc_146A2:
    MOVW R1, #0xA2F8
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_148CA
loc_146B6:
    MOVW R1, #0xA310
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE loc_14686
loc_146C8:
    MOVW R1, #0xA31C
    MOVS R2, #0xD
    MOVT.W R1, #3
    MOV R0, R10
    BLX strncmp
    CMP R0, #0
    BNE.W loc_14826
loc_146DE:
    MOV.W R9, #8
    STR R0, [R6,#8]
loc_146E4:
    MOV R0, R10
    MOVS R1, #0x2C
    BLX strchr
    MOV R11, #0x3A33C
    STR R4, [SP,#0x50+var_3C]
    ADD.W R9, R0, R9,LSL#1
    ADD.W R10, R0, #1
    ADD.W R3, R9, #1
    ADD.W R9, R6, #0xB
    MOV R4, R9
    MOV R9, R3
loc_1470A:
    ADD R2, SP, #0x50+var_38
    MOV R1, R11
    MOV R0, R10
    BLX __isoc99_sscanf
    CMP R0, #1
    BNE.W loc_14844
loc_1471A:
    LDR R2, [SP,#0x50+var_38]
    ADD.W R10, R10, #2
    CMP R10, R9
    STRB.W R2, [R4,#1]!
    BNE loc_1470A
loc_14728:
    LDRB.W R3, [R10]
    LDR R4, [SP,#0x50+var_3C]
    CMP R3, #0
    BEQ loc_14686
loc_14732:
    MOVW R4, #0xA18C
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_14746:
    MOVW R1, #0xA254
    MOV R0, R5
    MOVT.W R1, #3
    BL sub_1992C
    CMP R0, #0
    BEQ.W loc_1460C
loc_1475A:
    LDR R7, [SP,#0x50+var_4C]
    MOV R0, R5
    LDR.W R11, [SP,#0x50+var_44]
    LDR.W R8, [SP,#0x50+var_40]
    BL sub_19494
    MOV R0, R7
    BLX fclose
    LDR R3, [R6,#0x30]
    CMP R3, #0
    BEQ.W loc_148EC
loc_14778:
    LDR R7, [R6,#0x2C]
    CMP R7, #0
    BEQ.W loc_14920
loc_14780:
    LDR R2, [R6,#4]
    CBZ R2, loc_1478A
loc_14784:
    LSLS R3, R3, #0x1D
    BNE.W loc_148FE
loc_1478A:
    LDR R0, [SP,#0x50+var_50]
    MOVS R1, #4
    BL sub_194E4
    MOV R0, R6
    CMP.W R11, #0
    BEQ.W loc_1450C
loc_1479C:
    MOVS R3, #0
    STR.W R3, [R11]
    B loc_1450C
loc_147A4:
    ADD.W R8, R5, #0xFFFFFFFF
loc_147A8:
    LDRB.W R2, [R8,#1]!
    BIC.W R3, R2, #0x20
    SUBS R3, #0x41
    CMP R3, #0x19
    BLS loc_147CE
loc_147B6:
    SUB.W R3, R2, #0x2B
    UXTB R3, R3
    CMP R3, #0x12
    BLS loc_147C6
loc_147C0:
    MOV.W R8, #1
    B loc_14686
loc_147C6:
    LSR.W R3, R7, R3
    LSLS R1, R3, #0x1F
    BPL loc_147C0
loc_147CE:
    ADD R3, SP, #0x50+var_28
    ADD R3, R4
    ADDS R4, #1
    CMP R4, #4
    STRB.W R2, [R3,#-8]
    BNE loc_147A8
loc_147DC:
    ADD R1, SP, #0x50+src
    LDR R0, [SP,#0x50+var_50]
    BL sub_19044
    SUBS R4, R0, #0
    BLE loc_14858
loc_147E8:
    LDR R3, [R6,#0x30]
    LDR R2, [R6,#0x34]
    ADDS R1, R4, R3
    CMP R1, R2
    BGT loc_14810
loc_147F2:
    LDR R2, [R6,#0x2C]
loc_147F4:
    ADDS R0, R2, R3
    ADD R1, SP, #0x50+src
    MOV R2, R4
    BLX memcpy
    LDR R3, [R6,#0x30]
    MOVS R1, #3
    ADD R0, SP, #0x50+src
    ADD R4, R3
    STR R4, [R6,#0x30]
    BL sub_194E4
    MOVS R4, #0
    B loc_147A8
loc_14810:
    ADD.W R1, R1, #0x100
    MOVS R2, #1
    STR R1, [R6,#0x34]
    LDR R0, [R6,#0x2C]
    BL sub_19420
    LDR R3, [R6,#0x30]
    MOV R2, R0
    STR R0, [R6,#0x2C]
    B loc_147F4
loc_14826:
    MOVW R1, #0xA32C
    MOVS R2, #0xC
    MOVT.W R1, #3
    MOV R0, R10
    BLX strncmp
    CMP R0, #0
    BNE loc_1490C
loc_1483A:
    MOVS R3, #1
    MOV.W R9, #0x10
    STR R3, [R6,#8]
    B loc_146E4
loc_14844:
    MOVW R4, #0xA1B4
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_14858:
    MOVW R4, #0xA174
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_1486C:
    MOVW R1, #0xA2A8
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_14882
loc_1487C:
    MOVS R3, #2
    STR R3, [R6]
    B loc_1457A
loc_14882:
    MOVW R1, #0xA2C8
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CBNZ R0, loc_148DE
loc_14892:
    MOVW R4, #0xA228
    ADD R3, SP, #0x50+var_30
    MOVT.W R4, #3
    STR R3, [SP,#0x50+var_50]
    B loc_144BE
loc_148A0:
    MOVW R4, #0xA104
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    LDR R0, [SP,#0x50+var_50]
    B loc_144D4
loc_148B6:
    MOVW R4, #0xA1EC
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_148CA:
    MOVW R4, #0xA148
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_148DE:
    MOVW R4, #0xA210
    ADD R3, SP, #0x50+var_30
    MOVT.W R4, #3
    STR R3, [SP,#0x50+var_50]
    B loc_144BE
loc_148EC:
    MOVW R4, #0xA098
    MOV R7, R3
    MOVT.W R4, #3
    LDR R0, [SP,#0x50+var_50]
    B loc_144D4
loc_148FA:
    BLX __stack_chk_fail
loc_148FE:
    MOVW R4, #0xA0B0
    MOVS R7, #0
    MOVT.W R4, #3
    LDR R0, [SP,#0x50+var_50]
    B loc_144D4
loc_1490C:
    MOVW R4, #0xA1D8
    LDR R7, [SP,#0x50+var_4C]
    LDR.W R11, [SP,#0x50+var_44]
    MOVT.W R4, #3
    LDR.W R8, [SP,#0x50+var_40]
    B loc_144BE
loc_14920:
    MOVW R4, #0xA098
    LDR R0, [SP,#0x50+var_50]
    MOVT.W R4, #3
    B loc_144D4
```
Output:, R4
    LDR R1, [R6,#0x2C]
    BL sub_194E4
    LDR R0, [R6,#0x34]
    BL sub_194E4
    LDR R0, [R6,#0x2C]
    BL sub_19494
    LDR R0, [R6,#0x34]
    BL sub_19494
    MOV R0, R6
    MOVS R1, #0x38
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
    CMP.W R11, #0
    BEQ loc_145FE
loc_145A2:
    STR.W R4, [R11]
loc_145FE:
    MOV R0, R7
    CBZ R7, loc_14608
loc_14602:
    BLX fclose
    MOVS R0, #0
loc_14608:
    LDR R2, [SP,#0x50+var_2C]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE.W loc_148FA
loc_1461A:
    ADD SP, SP, #0x2C
    POP.W {R4-R11,PC}
loc_14620:
    MOVW R1, #0xA254
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_1486C
loc_14634:
    STR R0, [R6]
loc_14636:
    MOV R0, R5
    MOVS R4, #0
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    MOVS R2, #0x20
    STR R4, [R6,#4]
    MOV R1, R4
    ADD.W R0, R6, #0xC
    BLX memset
    MOV R2, R4
    LDR R1, [R6,#0x2C]
    BL sub_194E4
    LDR R0, [R6,#0x34]
    BL sub_194E4
    LDR R0, [R6,#0x2C]
    BL sub_19494
    LDR R0, [R6,#0x34]
    BL sub_19494
    MOV R0, R6
    MOVS R1, #0x38
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
    CMP.W R11, #0
    BEQ loc_146FE
loc_14672:
    STR.W R4, [R11]
loc_146FE:
    MOV R0, R7
    CBZ R7, loc_14708
loc_14702:
    BLX fclose
    MOVS R0, #0
loc_14708:
    LDR R2, [SP,#0x50+var_2C]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE.W loc_148FA
loc_1471A:
    ADD SP, SP, #0x2C
    POP.W {R4-R11,PC}
loc_14720:
    MOVW R1, #0xA254
    MOV R0, R5
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_1486C
loc_14734:
    STR R0, [R6]
loc_14736:
    MOV R0, R5
    MOVS R4, #0
    BLX strlen
    MOV R1, R0
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
############
```assembly
loc_36D88:
    PUSH {R4-R6,LR}
    MOV R6, #0x56190
    SUB.W SP, SP, #0x250
    MOVW R0, #0x537C
    MOVS R1, #0
    LDR R3, [R6]
    MOVT.W R0, #4
    STR R3, [SP,#0x260+var_14]
    BLX open
    SUBS R5, R0, #0
    IT 
    ADDGE R4, SP, #0x260+buf
    BGE loc_36DB8
loc_36DB0:
    B loc_36DCE
loc_36DB2:
    MOV R0, R4
    BL sub_2CEC8
loc_36DB8:
    MOV R1, R4
    MOV.W R2, #0x200
    MOV R0, R5
    BLX read
    SUBS R1, R0, #0
    BGT loc_36DB2
loc_36DC8:
    MOV R0, R5
    BLX close
loc_36DCE:
    MOVW R0, #0x538C
    MOVS R1, #0
    MOVT.W R0, #4
    BLX open
    SUBS R5, R0, #0
    IT 
    ADDGE R4, SP, #0x260+buf
    BGE loc_36DEC
loc_36DE4:
    B loc_36E02
loc_36DE6:
    MOV R0, R4
    BL sub_2CEC8
loc_36DEC:
    MOV R1, R4
    MOV.W R2, #0x200
    MOV R0, R5
    BLX read
    SUBS R1, R0, #0
    BGT loc_36DE6
loc_36DFC:
    MOV R0, R5
    BLX close
loc_36E02:
    ADD R1, SP, #0x260+usage
    MOVS R0, #0
    BLX getrusage
    ADD R0, SP, #0x260+usage
    MOVS R1, #0x48
    BL sub_2CEC8
    LDR R2, [SP,#0x260+var_14]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_36E20
loc_36E1A:
    ADD.W SP, SP, #0x250
    POP {R4-R6,PC}
loc_36E20:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x250",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:file-io (open)",
  "external-call-type:file-io (read)",
  "external-call-type:file-io (close)",
  "external-call-type:performance-monitoring (getrusage)",
  "external-call-type:safety-check (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x537C",
  "fixed-value-assignment:0x538C",
  "fixed-value-assignment:0x200",
  "fixed-value-assignment:0x48",
  "address-or-offset-constant:buf",
  "address-or-offset-constant:usage",
  "address-or-offset-constant:var_14",
  "address-or-offset-constant:sub_2CEC8",
  "address-or-offset-constant:getrusage",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:file-processing",
  "inferred-algorithm:performance-monitoring",
  "inferred-algorithm:safety-check",
  "inferred-algorithm:data-validation-or-sanitization"
]
```<|im_end|>
############
```assembly
loc_2615C:
    PUSH.W {R4-R11,LR}
    MOV R8, R1
    SUB SP, SP, #0xC
    MOV R10, R2
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_262FC
loc_2616E:
    LDM.W R0, {R3,R7}
    STR R3, [SP,#0x30+var_2C]
    CBZ R7, loc_2617E
loc_26176:
    MOV R0, R7
    BL sub_1E688
    MOV R7, R0
loc_2617E:
    LDR R6, [R4,#8]
    CBZ R6, loc_2618A
loc_26182:
    MOV R0, R6
    BL sub_1E688
    MOV R6, R0
loc_2618A:
    LDR R5, [R4,#0xC]
    CBZ R5, loc_26196
loc_2618E:
    MOV R0, R5
    BL sub_1E688
    MOV R5, R0
loc_26196:
    MOVS R1, #0x14
    MOVS R0, #1
    LDRB.W R9, [R4,#0x10]
    BL sub_193B8
    LDR R2, [SP,#0x30+var_2C]
    MOVS R1, #0x14
    MOVS.W R3, R9
    IT 
    MOVNE R3, #1
    MOV R11, R0
    STR R2, [R0]
    STRB R3, [R0,#0x10]
    MOVS R0, #1
    LDR R4, [R4]
    STR.W R6, [R11,#8]
    STR.W R7, [R11,#4]
    STR.W R5, [R11,#0xC]
    BL sub_193B8
    MOVS R2, #0
    MOVS R1, #1
    MOV R6, R0
    STR R4, [R0]
    STRB R1, [R0,#0x10]
    STR R2, [R0,#4]
    MOV R0, R8
    STR R2, [R6,#8]
    STR R2, [R6,#0xC]
    BL sub_1F158
    SUBS.W R9, R0, #0
    BLE loc_262B2
loc_261E4:
    MOVS R4, #0
    MOV R5, R4
    B loc_2623C
loc_261EA:
    ADDS R4, #1
    CMP R4, R9
    BEQ loc_262AC
loc_261F0:
    LDRB.W R2, [R11,#0x10]
    CMP R2, #0
    BNE loc_2628A
loc_261F8:
    LDR.W R2, [R11]
    LDR R2, [R2]
    CMP R2, #2
    BEQ loc_262EA
loc_26202:
    CMP R2, #0
    BEQ loc_2627E
loc_26206:
    MOV R0, R11
    BL sub_2558C
    MOV R7, R0
loc_2620E:
    LDR.W R0, [R11,#4]
    STR.W R5, [R11]
    CBZ R0, loc_2621C
loc_26218:
    BL sub_1E6B0
loc_2621C:
    LDR.W R0, [R11,#8]
    CBZ R0, loc_26226
loc_26222:
    BL sub_1E6B0
loc_26226:
    LDR.W R0, [R11,#0xC]
    CBZ R0, loc_26230
loc_2622C:
    BL sub_1E6B0
loc_26230:
    STRB.W R5, [R11,#0x10]
    MOV R0, R11
    BL sub_19494
    MOV R11, R7
loc_2623C:
    MOV R1, R4
    MOV R0, R8
    BL sub_1F234
    CMP R0, #0
    BEQ loc_261EA
loc_26248:
    MOV R2, R10
    MOV R1, R11
    MOV R0, R6
    BL sub_25B60
    MOV R7, R0
    CMP R6, #0
    BEQ loc_262F8
loc_26258:
    LDR R0, [R6,#4]
    STR R5, [R6]
    CBZ R0, loc_26262
loc_2625E:
    BL sub_1E6B0
loc_26262:
    LDR R0, [R6,#8]
    CBZ R0, loc_2626A
loc_26266:
    BL sub_1E6B0
loc_2626A:
    LDR R0, [R6,#0xC]
    CBZ R0, loc_26272
loc_2626E:
    BL sub_1E6B0
loc_26272:
    STRB R5, [R6,#0x10]
    MOV R0, R6
    BL sub_19494
    MOV R6, R7
    B loc_261EA
loc_2627E:
    MOV R1, R10
    MOV R0, R11
    BL sub_2576C
    MOV R7, R0
    B loc_2620E
loc_2628A:
    LDR.W R2, [R11]
    MOVS R1, #0x14
    MOVS R0, #1
    STR R2, [SP,#0x30+var_2C]
    BL sub_193B8
    LDR R2, [SP,#0x30+var_2C]
    MOV.W R3, #1
    MOV R7, R0
    STM.W R0, {R2,R5}
    STR R5, [R0,#8]
    STR R5, [R0,#0xC]
    STRB R3, [R0,#0x10]
    B loc_2620E
loc_262AC:
    CMP.W R11, #0
    BEQ loc_262E2
loc_262B2:
    LDR.W R0, [R11,#4]
    MOVS R2, #0
    STR.W R2, [R11]
    CBZ R0, loc_262C2
loc_262BE:
    BL sub_1E6B0
loc_262C2:
    LDR.W R0, [R11,#8]
    CBZ R0, loc_262CC
loc_262C8:
    BL sub_1E6B0
loc_262CC:
    LDR.W R0, [R11,#0xC]
    CBZ R0, loc_262D6
loc_262D2:
    BL sub_1E6B0
loc_262D6:
    MOVS R2, #0
    MOV R0, R11
    STRB.W R2, [R11,#0x10]
    BL sub_19494
loc_262E2:
    MOV R0, R6
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_262EA:
    MOV R2, R10
    MOV R1, R11
    MOV R0, R11
    BL sub_25B60
    MOV R7, R0
    B loc_2620E
loc_262F8:
    MOV R6, R0
    B loc_261EA
loc_262FC:
    LDR R5, [R0]
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_193B8
    MOVS R3, #1
    MOV R6, R0
    STR R5, [R0]
    STR R4, [R0,#4]
    MOV R0, R8
    STR R4, [R6,#8]
    STR R4, [R6,#0xC]
    STRB R3, [R6,#0x10]
    BL sub_1F158
    SUBS.W R9, R0, #0
    IT 
    MOVGT R11, R4
    BGT.W loc_261E4
loc_26326:
    B loc_262E2
```
Output: STRB.R3, [R2,#0x10]
    MOV W0, #1
    LDR R4, [R4]
    STR.W R6, [R11,#8]
    STR.W R7, [R11,#4]
    STR.W R5, [R11,#0xC]
    BL sub_193B8
    MOVS R2, #0
    MOVS R1, #1
    MOV R6, R0
    STR R4, [R0]
    STRB R1, [R0,#0x10]
    STR R2, [R0,#4]
    MOV R0, R8
    STR R2, [R6,#8]
    STR R2, [R6,#0xC]
    BL sub_1F158
    SUBS.W R9, R0, #0
    BLE loc_262B2
loc_262B2:
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
    MOV R0, R8
    BL sub_1F158
############
```assembly
loc_264F8:

loc_27AEC:

loc_281F4:
    LDR R3, [R1]
    CBZ R3, loc_28202
loc_281F8:
    CMP R3, #2
    BNE loc_281FE
loc_281FC:
    B sub_27AEC
loc_281FE:
    MOVS R0, #0
    BX LR
loc_28202:
    PUSH {R4}
    MOV R2, R1
    POP.W {R4}
    MOV R1, R0
    ADD.W R0, R2, #0x20
    B.W sub_264F8
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "conditional-branching-on-variable",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_27AEC)",
  "integer-size-hint:32-bit",
  "byte-level-operations:increment",
  "byte-level-operations:addition",
  "memory-read-from-input-parameter-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:2",
  "fixed-value-assignment:0",
  "address-or-offset-constant:sub_27AEC",
  "inferred-algorithm:loop-with-condition",
  "inferred-algorithm:data-pointer-increment",
  "inferred-algorithm:conditional-execution-or-dispatch"
]
```<|im_end|>
############
```assembly
loc_2F250:
    PUSH {R4,LR}
    MOVS R1, #0x6C
    MOV R4, R0
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_194E4)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x6C",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:parameter-modification"
]
```<|im_end|>
############
```assembly
loc_56984:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11304:
    ADR R12, 0x1130C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fread_ptr - 0x5530C)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fread)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x1130C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fread_ptr",
  "address-or-offset-constant:-0x5530C",
  "inferred-algorithm:file-io",
  "inferred-algorithm:buffered-data-access",
  "inferred-algorithm:data-pointer-updating"
]
```<|im_end|>
############
```assembly
loc_11420:
    ADR R12, 0x11428
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__sprintf_chk_ptr - 0x55428)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:string-pointer",
  "arg1-type:buffer-pointer",
  "arg2-type:size-t",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__sprintf_chk)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11428",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__sprintf_chk_ptr",
  "inferred-algorithm:string-formatting",
  "inferred-algorithm:safe-string-handling"
]
```<|im_end|>
############
```assembly
loc_22FEC:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x14
    MOV R4, R0
    LDR R0, [R0]
    STR R1, [SP,#0x38+var_2C]
    BL sub_1F158
    MOV R3, R0
    ADD.W R5, R3, #0xF
    ADDS R3, #8
    LDR R0, [R4,#4]
    IT 
    MOVPL R5, R3
    BL sub_1F158
    ADDS.W R9, R0, #8
    ADD.W R3, R0, #0xF
    LDR R0, [R4,#8]
    IT 
    MOVMI R9, R3
    ASRS R3, R5, #3
    ADD.W R11, R3, #0xFFFFFFFF
    MOV.W R9, R9,ASR#3
    MOV R6, R3
    BL sub_1F158
    ADD.W R10, R6, #0x1B
    ADD R10, R9
    ADD.W R2, R0, #0xF
    ADDS.W R8, R0, #8
    LDR R0, [R4,#0xC]
    IT 
    MOVMI R8, R2
    BL sub_1F158
    MOV.W R8, R8,ASR#3
    MOVS R1, #1
    ADD R10, R8
    STR R6, [SP,#0x38+var_30]
    ADD.W R7, R0, #0xF
    ADDS R0, #8
    IT 
    MOVMI R0, R7
    ASRS R7, R0, #3
    ADD.W R3, R10, R7
    STR R3, [SP,#0x38+var_34]
    MOV R0, R3
    BL sub_193B8
    MOV R2, #0x3A710
    LDR R1, [SP,#0x38+var_30]
    MOV.W LR, #7
    ASRS R3, R5, #0x1B
    LDRH.W R12, [R2,#(word_3A714 - 0x3A710)]
    MOV R6, R0
    LDR R0, [R2]
    LDRB R2, [R2,#(byte_3A716 - 0x3A710)]
    STRB.W LR, [R6,#3]
    MOV.W LR, R5,ASR#11
    STR R0, [R6,#4]
    MOVS R0, #0
    STRH.W R12, [R6,#8]
    STRB R0, [R6]
    STRB R0, [R6,#1]
    STRB R0, [R6,#2]
    ASRS R0, R5, #0x13
    STRB R2, [R6,#0xA]
    ADD.W R5, R6, #0xF
    STRB R3, [R6,#0xB]
    STRB R1, [R6,#0xE]
    STRB R0, [R6,#0xC]
    STRB.W LR, [R6,#0xD]
    CBZ R1, loc_230C6
loc_230AA:
    MOV R10, R5
loc_230AC:
    MOV R1, R11
    LDR R0, [R4]
    BL sub_1F20C
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_230AC
loc_230C2:
    LDR R3, [SP,#0x38+var_30]
    ADD R5, R3
loc_230C6:
    MOV.W R3, R9,ASR#24
    STRB.W R9, [R5,#3]
    STRB R3, [R5]
    ADD.W R11, R9, #0xFFFFFFFF
    MOV.W R3, R9,ASR#16
    ADDS R5, #4
    STRB.W R3, [R5,#-3]
    MOV.W R3, R9,ASR#8
    STRB.W R3, [R5,#-2]
    CMP.W R9, #0
    BEQ loc_23106
loc_230EC:
    MOV R10, R5
loc_230EE:
    MOV R1, R11
    LDR R0, [R4,#4]
    BL sub_1F20C
    ADD.W R11, R11, #0xFFFFFFFF
    CMP.W R11, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_230EE
loc_23104:
    ADD R5, R9
loc_23106:
    MOV.W R3, R8,ASR#24
    STRB.W R8, [R5,#3]
    STRB R3, [R5]
    ADD.W R9, R8, #0xFFFFFFFF
    MOV.W R3, R8,ASR#16
    ADDS R5, #4
    STRB.W R3, [R5,#-3]
    MOV.W R3, R8,ASR#8
    STRB.W R3, [R5,#-2]
    CMP.W R8, #0
    BEQ loc_23146
loc_2312C:
    MOV R11, R5
loc_2312E:
    MOV R1, R9
    LDR R0, [R4,#8]
    BL sub_1F20C
    ADD.W R9, R9, #0xFFFFFFFF
    CMP.W R9, #0xFFFFFFFF
    STRB.W R0, [R11],#1
    BNE loc_2312E
loc_23144:
    ADD R5, R8
loc_23146:
    ASRS R3, R7, #0x18
    STRB R7, [R5,#3]
    STRB R3, [R5]
    ADD.W R8, R7, #0xFFFFFFFF
    ASRS R3, R7, #0x10
    ADDS R5, #4
    STRB.W R3, [R5,#-3]
    ASRS R3, R7, #8
    STRB.W R3, [R5,#-2]
    CBZ R7, loc_2317A
loc_23160:
    MOV R9, R5
loc_23162:
    MOV R1, R8
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    ADD.W R8, R8, #0xFFFFFFFF
    CMP.W R8, #0xFFFFFFFF
    STRB.W R0, [R9],#1
    BNE loc_23162
loc_23178:
    ADD R5, R7
loc_2317A:
    LDR R3, [SP,#0x38+var_34]
    ADDS R3, R6, R3
    CMP R5, R3
    BNE loc_23192
loc_23182:
    LDR R3, [SP,#0x38+var_2C]
    MOV R0, R6
    MOV R2, R3
    LDR R3, [SP,#0x38+var_34]
    STR R3, [R2]
    ADD SP, SP, #0x14
    POP.W {R4-R11,PC}
loc_23192:
    MOVW R3, #0xF4DC
    MOVW R1, #0xF55C
    MOVW R0, #0xF568
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x155
    MOVT.W R0, #3
    BLX __assert_fail
```
Output: R3, R7, #8
    STRB.W R3, [R5,#-2]
    CMP.W R7, #0
    BEQ loc_23186
loc_2316C:
    MOV R10, R5
loc_2316E:
    MOV R1, R8
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    ADD.W R8, R8, #0xFFFFFFFF
    CMP.W R8, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_2316E
loc_23184:
    ADD R5, R7
loc_23186:
    ASRS R3, R6, #0x18
    STRB R6, [R5,#3]
    STRB R3, [R5]
    ADD.W R7, R6, #0xFFFFFFFF
    ASRS R3, R6, #0x10
    ADDS R5, #4
    STRB.W R3, [R5,#-3]
    ASRS R3, R6, #8
    STRB.W R3, [R5,#-2]
    CMP.W R6, #0
    BEQ loc_231C6
loc_231AC:
    MOV R11, R5
loc_231AE:
    MOV R1, R7
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    ADD.W R7, R7, #0xFFFFFFFF
    CMP.W R7, #0xFFFFFFFF
    STRB.W R0, [R11],#1
    BNE loc_231AE
loc_231CC:
    ADD R5, R6
loc_231CE:
    LDR R3, [SP,#0x38+var_34]
    ADD R6, R3
loc_231D2:
    ASRS R3, R10, #0x18
    STRB R10, [R6,#3]
    STRB R3, [R6]
    ADD.W R10, R10, #0xFFFFFFFF
    ASRS R3, R10, #0x10
    ADDS R6, #4
    STRB.W R3, [R6,#-3]
    ASRS R3, R10, #8
    STRB.W R3, [R6,#-2]
    CMP.W R10, #0
    BEQ loc_23216
loc_231F2:
    MOV R11, R6
loc_231F4:
    MOV R1, R9
    LDR R0, [R4,#0x14]
    BL sub_1F20C
    ADD.W R9, R9, #0xFFFFFFFF
    CMP.W R9, #0xFFFFFFFF
    STRB.W R0, [R11],#1
    BNE loc_231F4
loc_23214:
    ADD R6, R9
loc_23216:
    CMP.W R9, #0
    BEQ loc_23246
loc_23224:
    MOV R10, R6
loc_23226:
    MOV R1, R8
    LDR R0, [R4,#0x18]
    BL sub_1F20C
    ADD.W R8, R8, #0xFFFFFFFF
    CMP.W R8, #0xFFFFFFFF
    STRB.W R0, [R10],#1
    BNE loc_23226
loc_23244:
    ADD R6, R8
loc_23246:
    LDR R3, [SP,#0x38+var_34]
    ADD R6, R3
loc_2324A:
    ASRS R3, R11, #0x18
    STRB R11, [R6,#3]
    STRB R3, [R6]
    ADD.W R11, R11, #0xFFFFFFFF
    ASRS R3, R11, #0x10
    ADDS R6, #4
    STRB.W R3, [R6,#-3]
    ASRS R3,
############
```assembly
loc_2E9B4:
    MOV R3, #0x3F57C
    PUSH.W {R4-R10,LR}
    MOV R7, R0
    LDR.W R8, [R1,#0xC]
    LDRH R2, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    LDR R5, [R1,#8]
    STRH R2, [R0]
    STRB R3, [R0,#2]
    MOV R0, R8
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_2EA94
loc_2E9EA:
    MOVW R4, #0x3A18
    ADD.W R10, R7, #1
    MOVT.W R4, #4
    MOV R9, R6
loc_2E9F8:
    MOV.W R1, R9,ASR#1
    MOV R0, R8
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R4
    LDRB.W R3, [R0,#0x50]
    STRB.W R3, [R10,#1]!
    BNE loc_2E9F8
loc_2EA24:
    MOV R2, #0x3F580
    ADDS R3, R6, #3
    LDR R0, [R2]
    STR R0, [R7,R3]
    MOV R0, R5
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE loc_2EA98
loc_2EA52:
    ADD.W R10, R6, #5
    MOV R9, R8
    ADD R10, R7
loc_2EA5A:
    MOV.W R1, R9,ASR#1
    MOV R0, R5
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R4
    LDRB.W R3, [R0,#0x50]
    STRB.W R3, [R10,#1]!
    BNE loc_2EA5A
loc_2EA86:
    ADD R6, R7
    MOVS R3, #0
    ADD R8, R6
    STRB.W R3, [R8,#7]
    POP.W {R4-R10,PC}
loc_2EA94:
    MOVS R6, #0
    B loc_2E9EA
loc_2EA98:
    MOV.W R8, #0
    B loc_2EA52
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1F158)",
  "external-call-type:unspecified-helper (sub_1F20C)",
  "integer-size-hint:32-bit",
  "magic-number:0x3F57C",
  "magic-number:0x3A18",
  "magic-number:0x3F580",
  "address-or-offset-constant:byte_3F57E",
  "address-or-offset-constant:sub_1F158",
  "address-or-offset-constant:sub_1F20C",
  "bitwise-operation:AND",
  "bitwise-operation:OR",
  "bitwise-operation:NOT",
  "bitwise-operation:XOR",
  "bitwise-operation:SHL",
  "bitwise-operation:SHR",
  "fixed-value-comparison:0",
  "fixed-value-comparison:-1",
  "fixed-value-comparison:7",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:2",
  "fixed-value-assignment:3",
  "fixed-value-assignment:4",
  "fixed-value-assignment:5",
  "fixed-value-assignment:6",
  "fixed-value-assignment:7",
  "fixed-value-assignment:8",
  "fixed-value-assignment:9",
  "fixed-value-assignment:10",
  "fixed-value-assignment:11",
  "fixed-value-assignment:12",
  "fixed-value-assignment:13",
  "fixed-value-assignment:14",
  "fixed-value-assignment:15",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-counter-update",
  "inferred-algorithm:array-indexing",
  "inferred-algorithm:conditional-execution",
  "inferred-algorithm:register-mapping"
]
```<|im_end|>
############
```assembly
loc_2754C:
    PUSH.W {R4-R11,LR}
    MOV R4, #0x56190
    MOV R6, R1
    MOV R7, R2
    LDR R2, [R0,#8]
    LDR R1, [R4]
    SUB SP, SP, #0x12C
    STR R1, [SP,#0x150+var_2C]
    CBZ R2, loc_27576
loc_27566:
    MOV R8, R3
    LDR R3, [R0,#0xC]
    MOV R5, R0
    CBZ R3, loc_27576
loc_2756E:
    LDR R3, [R0,#4]
    CBZ R3, loc_27576
loc_27572:
    CMP R7, #3
    BGT loc_2758C
loc_27576:
    MOV.W R11, #0
loc_2757A:
    LDR R2, [SP,#0x150+var_2C]
    MOV R0, R11
    LDR R3, [R4]
    CMP R2, R3
    BNE.W loc_27A56
loc_27586:
    ADD SP, SP, #0x12C
    POP.W {R4-R11,PC}
loc_2758C:
    LDRB R3, [R6,#1]
    LDRB R2, [R6]
    LDRB R1, [R6,#3]
    LDRB R0, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R2,LSL#24
    LDR R2, [R5]
    ORRS R3, R1
    ORR.W R0, R3, R0,LSL#8
    LDR.W R9, [R2,#0x38]
    BL nullsub_2
    SUBS.W R10, R0, #0
    BLT loc_27576
loc_275B0:
    SUBS R7, #4
    CMP R10, R7
    BGT loc_27576
loc_275B6:
    ADDS R6, #4
    SUB.W R7, R7, R10
    BEQ loc_27576
loc_275BE:
    LDR R3, [R5]
    MOV R1, R6
    LDR R2, [R3,#0x30]
    BL sub_19870
    CMP R0, #0
    BEQ loc_27576
loc_275CC:
    CMP R7, #3
    BLE loc_27576
loc_275D0:
    ADD.W R11, R6, R10
    LDRB.W R1, [R6,R10]
    LDRB.W R3, [R11,#1]
    LDRB.W R2, [R11,#3]
    LDRB.W R0, [R11,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R6, R0, #0
    BLT loc_27576
loc_275F8:
    SUBS R7, #4
    CMP R6, R7
    BGT loc_27576
loc_275FE:
    ADDS.W R10, R11, #4
    BEQ loc_27576
loc_27604:
    LDR R7, [R5,#4]
    LDR R3, [R7]
    CMP R3, #2
    BNE.W loc_277F8
loc_2760E:
    LDR R2, [R7,#0xC]
    LSRS R3, R2, #3
    LSLS R3, R3, #1
    CMP R3, R6
    IT 
    CMPEQ.W R2, #0x100
    ITE 
    MOVNE R6, #1
    MOVEQ R6, #0
    BNE loc_27576
loc_27624:
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_193B8
    STRB R6, [R0,#0x10]
    MOV R9, R0
    STR R7, [R0]
    MOV R2, R0
    LDR R3, [R5,#4]
    MOV R0, R10
    STR.W R6, [R9,#4]
    STR.W R6, [R9,#8]
    LDR R1, [R3,#0xC]
    STR.W R6, [R9,#0xC]
    LSRS R1, R1, #3
    BL sub_25510
    MOV R11, R0
    CMP R0, #0
    BEQ.W loc_27A4E
loc_27654:
    LDR R3, [R5,#4]
    LDR R1, [R3,#0xC]
    LSRS R1, R1, #3
    ADD.W R0, R10, R1
    BL sub_1EE64
    MOV R7, R0
    ADD R0, SP, #0x150+var_140
    BL sub_319CC
    LDR R2, [R5,#4]
    MOV R1, R10
    ADD R0, SP, #0x150+var_140
    LDR R2, [R2,#0xC]
    LSRS R2, R2, #3
    BL sub_31A54
    LDR R3, [R5,#4]
    LDR R3, [R3,#0xC]
    MOV.W R11, R3,LSR#3
    CMP.W R11, #1
    BLE.W loc_27A6A
loc_27688:
    ADD.W R11, R11, #0xFFFFFFFF
    ADD.W R10, SP, #0x150+var_141
loc_27690:
    MOV R1, R6
    LDR R0, [R5,#0xC]
    BL sub_1F20C
    ADDS R6, #1
    MOVS R2, #1
    MOV R1, R10
    STRB.W R0, [R10]
    ADD R0, SP, #0x150+var_140
    BL sub_31A54
    CMP R6, R11
    BNE loc_27690
loc_276AC:
    MOV R1, R11
    LDR R0, [R5,#0xC]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB.W R0, [R10]
    LDR R0, [R5,#8]
    BL sub_1F234
    LDRB.W R3, [R10]
    MOV R1, R10
    MOVS R2, #1
    ORR.W R0, R3, R0,LSL#7
    STRB.W R0, [R10]
    ADD R0, SP, #0x150+var_140
    BL sub_31A54
    LDR R2, [SP,#0x150+arg_0]
    MOV R1, R8
    ADD R0, SP, #0x150+var_140
    BL sub_31A54
    ADD R0, SP, #0x150+var_140
    ADD R1, SP, #0x150+var_6C
    BL sub_31B84
    MOVS R1, #0x40
    ADD R0, SP, #0x150+var_6C
    BL sub_1EE64
    MOV R1, R7
    MOV R8, R0
    LDR R0, [R5,#4]
    ADDS R0, #0x1C
    BL sub_264F8
    MOV R6, R0
    MOV R0, R7
    BL sub_1E6B0
    CMP R6, #0
    BEQ.W loc_27A5A
loc_2770E:
    ADDS R0, R5, #4
    MOV R1, R8
    BL sub_264F8
    MOV R7, R0
    MOV R0, R8
    BL sub_1E6B0
    CMP R7, #0
    BEQ.W loc_27A46
loc_27724:
    MOVS R2, #0
    MOV R1, R7
    MOV R0, R9
    BL sub_25B60
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_27740
loc_2773C:
    BL sub_1E6B0
loc_27740:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_2774A
loc_27746:
    BL sub_1E6B0
loc_2774A:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27754
loc_27750:
    BL sub_1E6B0
loc_27754:
    MOV.W R8, #0
    MOV R0, R9
    STRB.W R8, [R9,#0x10]
    BL sub_19494
    LDR R0, [R7,#4]
    STR.W R8, [R7]
    CBZ R0, loc_2776E
loc_2776A:
    BL sub_1E6B0
loc_2776E:
    LDR R0, [R7,#8]
    CBZ R0, loc_27776
loc_27772:
    BL sub_1E6B0
loc_27776:
    LDR R0, [R7,#0xC]
    CBZ R0, loc_2777E
loc_2777A:
    BL sub_1E6B0
loc_2777E:
    MOV.W R11, #0
    MOV R0, R7
    STRB.W R11, [R7,#0x10]
    BL sub_19494
    CMP R5, #0
    BEQ.W loc_27A72
loc_27792:
    LDR R1, [R5,#4]
    LDR R0, [R6,#4]
    BL sub_1F358
    CBNZ R0, loc_277AC
loc_2779C:
    LDR R1, [R5,#8]
    LDR R0, [R6,#8]
    BL sub_1F358
    CLZ.W R11, R0
    MOV.W R11, R11,LSR#5
loc_277AC:
    LDR R0, [R6,#4]
    MOVS R3, #0
    STR R3, [R6]
    CBZ R0, loc_277B8
loc_277B4:
    BL sub_1E6B0
loc_277B8:
    LDR R0, [R6,#8]
    CBZ R0, loc_277C0
loc_277BC:
    BL sub_1E6B0
loc_277C0:
    LDR R0, [R6,#0xC]
    CBZ R0, loc_277C8
loc_277C4:
    BL sub_1E6B0
loc_277C8:
    MOVS R7, #0
    MOV R0, R6
    STRB R7, [R6,#0x10]
    BL sub_19494
    LDR R0, [R5,#4]
    STR R7, [R5]
    CBZ R0, loc_277DC
loc_277D8:
    BL sub_1E6B0
loc_277DC:
    LDR R0, [R5,#8]
    CBZ R0, loc_277E4
loc_277E0:
    BL sub_1E6B0
loc_277E4:
    LDR R0, [R5,#0xC]
    CBZ R0, loc_277EC
loc_277E8:
    BL sub_1E6B0
loc_277EC:
    MOVS R3, #0
    MOV R0, R5
    STRB R3, [R5,#0x10]
    BL sub_19494
    B loc_2757A
loc_277F8:
    CMP R6, #3
    BLE.W loc_27576
loc_277FE:
    LDRB.W R3, [R11,#5]
    LDRB.W R1, [R11,#4]
    LDRB.W R2, [R11,#7]
    LDRB.W R0, [R11,#6]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R10, R0, #0
    BLT.W loc_27576
loc_27826:
    SUBS R7, R6, #4
    CMP R10, R7
    BGT.W loc_27576
loc_2782E:
    LDRSB.W R2, [R11,#8]
    ADD.W R11, R11, #8
    ADD.W R3, R11, R10
    SUB.W R7, R7, R10
    CMP R2, #0
    STR R3, [SP,#0x150+var_150]
    BLT.W loc_27576
loc_27846:
    MOV R1, R10
    MOV R0, R11
    BL sub_1EDA8
    MOV R6, R0
    CMP R0, #0
    BEQ.W loc_27576
loc_27856:
    CMP R7, #3
    LDR R3, [SP,#0x150+var_150]
    BGT loc_27864
loc_2785C:
    MOV R0, R6
    BL sub_1E6B0
    B loc_27576
loc_27864:
    LDRB R2, [R3,#1]
    LDRB.W LR, [R11,R10]
    LDRB R1, [R3,#3]
    LDRB R0, [R3,#2]
    LSLS R2, R2, #0x10
    ORR.W R2, R2, LR,LSL#24
    ORRS R2, R1
    ORR.W R0, R2, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_2785C
loc_27882:
    SUBS R7, #4
    CMP R1, R7
    BGT loc_2785C
loc_27888:
    LDR R3, [SP,#0x150+var_150]
    ADDS R0, R3, #4
    BEQ loc_2785C
loc_2788E:
    LDRSB.W R3, [R3,#4]
    CMP R3, #0
    BLT loc_2785C
loc_27896:
    BL sub_1EDA8
    MOV R7, R0
    CMP R0, #0
    BEQ loc_2785C
loc_278A0:
    LDR.W R3, [R9,#4]
    LDR.W R10, [R3,#0x14]
    CMP.W R10, #0x40
    BHI.W loc_27A7C
loc_278B0:
    LDR R3, [R3]
    BLX R3
    LDR.W R3, [R9,#4]
    MOV R1, R8
    LDR R2, [SP,#0x150+arg_0]
    LDR R3, [R3,#8]
    MOV R11, R0
    BLX R3
    LDR.W R3, [R9,#4]
    MOV R0, R11
    ADD R1, SP, #0x150+var_6C
    LDR R3, [R3,#0xC]
    BLX R3
    LDR R3, [R5,#4]
    LDR R3, [R3]
    CBZ R3, loc_278E6
loc_278D4:
    MOV.W R11, #0
loc_278D8:
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    B loc_2757A
loc_278E6:
    MOV R8, #0x56170
    MOV R0, R6
    LDR.W R1, [R8]
    BL sub_1F358
    CMP R0, #0
    BEQ loc_278D4
loc_278FC:
    LDR R3, [R5,#4]
    MOV R0, R6
    LDR R1, [R3,#0x1C]
    BL sub_1F358
    CMP R0, #0
    BGE loc_278D4
loc_2790A:
    LDR.W R1, [R8]
    MOV R0, R7
    BL sub_1F358
    CMP R0, #0
    BEQ loc_278D4
loc_27918:
    LDR R3, [R5,#4]
    MOV R0, R7
    LDR R1, [R3,#0x1C]
    BL sub_1F358
    CMP R0, #0
    BGE loc_278D4
loc_27926:
    MOV R1, R10
    ADD R0, SP, #0x150+var_6C
    BL sub_1EDA8
    LDR R3, [R5,#4]
    MOV R8, R0
    LDR R0, [R3,#0x1C]
    BL sub_1F158
    MOV R9, R0
    MOV R0, R8
    BL sub_1F158
    CMP R9, R0
    BLT.W loc_27AD0
loc_27946:
    LDR R3, [R5,#4]
    MOV R0, R8
    LDR R1, [R3,#0x1C]
    BL sub_200D4
    MOV R9, R0
    MOV R0, R8
    BL sub_1E6B0
    LDR R3, [R5,#4]
    MOV R0, R7
    LDR R1, [R3,#0x1C]
    BL sub_20228
    MOV R8, R0
    CMP R0, #0
    BEQ.W loc_27AC6
loc_2796A:
    LDR R3, [R5,#4]
    MOV R1, R0
    MOV R0, R9
    LDR R2, [R3,#0x1C]
    BL sub_1EAC0
    LDR R3, [R5,#4]
    MOV R1, R8
    LDR R2, [R3,#0x1C]
    MOV R11, R0
    MOV R0, R6
    BL sub_1EAC0
    STR R0, [SP,#0x150+var_150]
    MOV R0, R8
    BL sub_1E6B0
    LDR.W R8, [R5,#4]
    LDR.W R3, [R8]
    CMP R3, #0
    BNE.W loc_27AA6
loc_2799A:
    MOVS R1, #3
    LDR.W R0, [R8,#0x14]
    BL sub_1FE60
    MOV R1, R0
    MOV R10, R0
    LDR.W R0, [R8,#0x10]
    BL sub_1F358
    CLZ.W R8, R0
    MOV R0, R10
    BL sub_1E6B0
    LDR R0, [R5,#4]
    MOV.W R8, R8,LSR#5
    MOV R1, R11
    ADDS R0, #0x20
    MOV R2, R8
    BL sub_2615C
    MOV R10, R0
    CMP R0, #0
    BEQ loc_27AA6
loc_279D0:
    MOV R2, R8
    LDR R1, [SP,#0x150+var_150]
    ADDS R0, R5, #4
    BL sub_2615C
    CMP R0, #0
    BEQ loc_27ABE
loc_279DE:
    MOV R2, R8
    MOV R1, R0
    STR R0, [SP,#0x150+var_14C]
    MOV R0, R10
    BL sub_25B60
    MOV R8, R0
    MOV R0, R10
    BL sub_264C4
    LDR R3, [SP,#0x150+var_14C]
    MOV R0, R3
    BL sub_264C4
    CMP.W R8, #0
    BEQ loc_27AA0
loc_27A00:
    LDRB.W R3, [R8,#0x10]
    CMP R3, #0
    BEQ loc_27A96
loc_27A08:
    MOV R0, R11
    BL sub_1E6B0
    LDR R0, [SP,#0x150+var_150]
    BL sub_1E6B0
    LDR R3, [R5,#4]
    LDR.W R0, [R8,#4]
    LDR R1, [R3,#0x1C]
    BL sub_200D4
    MOV R5, R0
    MOV R0, R8
    BL sub_264C4
    MOV R1, R5
    MOV R0, R6
    BL sub_1F358
    CLZ.W R11, R0
    MOV R0, R5
    BL sub_1E6B0
    MOV R0, R9
    MOV.W R11, R11,LSR#5
    BL sub_1E6B0
    B loc_278D8
loc_27A46:
    MOV R0, R6
    MOV R11, R7
    BL sub_264C4
loc_27A4E:
    MOV R0, R9
    BL sub_264C4
    B loc_2757A
loc_27A56:
    BLX __stack_chk_fail
loc_27A5A:
    MOV R0, R9
    MOV R11, R6
    BL sub_264C4
    MOV R0, R8
    BL sub_1E6B0
    B loc_2757A
loc_27A6A:
    ADD.W R10, SP, #0x150+var_141
    MOV R11, R6
    B loc_276AC
loc_27A72:
    MOV R0, R6
    MOV R11, R5
    BL sub_264C4
    B loc_2757A
loc_27A7C:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD5C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaVerifysig
    MOV.W R2, #0x950
    BLX __assert_fail
loc_27A96:
    MOV R0, R8
    BL sub_24A8C
    CMP R0, #0
    BNE loc_27A08
loc_27AA0:
    MOV R0, R8
    BL sub_264C4
loc_27AA6:
    MOV R0, R11
    MOV.W R11, #0
    BL sub_1E6B0
    LDR R0, [SP,#0x150+var_150]
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    B loc_278D8
loc_27ABE:
    MOV R0, R10
    BL sub_264C4
    B loc_27AA6
loc_27AC6:
    MOV R0, R9
    MOV R11, R8
    BL sub_1E6B0
    B loc_278D8
loc_27AD0:
    SUB.W R1, R0, R9
    MOV R0, R8
    BL sub_1F910
    MOV R3, R0
    MOV R0, R8
    MOV R8, R3
    BL sub_1E6B0
    B loc_27946
```
Output:8E:
    LDR R2, [R5,#4]
    MOV R1, R10
    ADD R0, SP, #0x150+var_141
    LDR R2, [R2,#0xC]
    LSRS R2, R2, #3
    BL sub_31A54
    LDR R3, [R5,#4]
    LDR R3, [R3,#0xC]
    MOV.W R11, R3,LSR#3
    CMP.W R11, #1
    BLE.W loc_27A6A
loc_276C2:
    ADD.W R11, R11, #0xFFFFFFFF
    ADD.W R10, SP, #0x150+var_142
loc_276C8:
    LDR R2, [R5,#4]
    MOV R1, R10
    ADD R0, SP, #0x150+var_142
    LDR R2, [R2,#0xC]
    LSRS R2, R2, #3
    BL sub_31A54
    LDR R3, [R5,#4]
    LDR R3, [R3,#0xC]
    MOV.W R11, R3,LSR#3
    CMP.W R11, #1
    BLE.W loc_27A6A
loc_276FC:
    ADD.W R11, R11, #0xFFFFFFFF
    ADD.W R10, SP, #0x150+var_143
loc_27702:
    LDR R2, [R5,#4]
    MOV R1, R10
    ADD R0, SP, #0x150+var_143
    LDR R2, [R2,#0xC]
    LSRS R2, R2, #3
    BL sub_31A54
    LDR R3, [R5,#4]
    LDR R3, [R3,#0xC]
    MOV.W R11, R3,LSR#3
    CMP.W R11, #1
    BLE.W loc_27A6A
loc_27736:
    ADD.W R11, R11, #0xFFFFFFFF
    ADD.W R10, SP, #0x150+var_144
loc_2773C:
    LDR R2, [R5,#4]
    MOV R1, R10
    ADD R0, SP, #0x150+var_144
    LDR R2, [R2,#0xC]
    LSRS R2, R2, #3
    BL sub_31A54
    LDR R3, [R5,#4]
    LDR R3, [R3,#0xC]
    MOV.W R11, R3,LSR#3
    CMP.W R11, #1
    BLE.W loc_27A6A
loc_2776A:
    ADD.W R11, R11, #0xFFFFFFFF
    ADD.W R10, SP, #0x150+var_145
loc_27770:
    LDR R2, [R5,#4]
    MOV R1, R10
    ADD R0, SP, #0x150+var_145
    LDR R2, [R2,#0xC]
    LSRS R2, R2, #3
    BL sub_31A54
    LDR R3, [R5,#4]
    LDR R3, [R3,#0xC]
    MOV.W R11, R3,LSR#3
    CMP.W R11, #1
    BLE.W loc_27A6A
loc_2779E:
    ADD.W R11, R11, #0xFFFFFFFF
    ADD.W R10, SP, #0x150+var_146
loc_277A4:
    LDR R2, [R5,#4]
    MOV R1, R10
    ADD R0, SP, #0x150+var_146
    LDR R2, [R2,#0xC]
    LSRS R2, R2, #3
    BL sub_31
############
```assembly
loc_12EE0:
    PUSH {R0-R3}
    MOVS R2, #7
    PUSH {R4-R7,LR}
    SUB SP, SP, #0xC
    ADD R6, SP, #0x30+varg_r0
    MOV R5, #0x56190
    MOVW R4, #0x6198
    LDR.W R7, [R6],#4
    MOVT.W R4, #5
    LDR.W LR, [R5]
    MOVS R1, #1
    LDR R3, [R4]
    MOV R0, #aError
    STR.W LR, [SP,#0x30+var_2C]
    BLX fwrite
    MOV R2, R7
    MOV R3, R6
    MOVS R1, #1
    LDR R0, [R4]
    STR R6, [SP,#0x30+var_30]
    BLX __vfprintf_chk
    LDR R1, [R4]
    MOVS R0, #0xA
    BLX fputc
    LDR R2, [SP,#0x30+var_2C]
    LDR R3, [R5]
    CMP R2, R3
    BNE loc_12F3E
loc_12F34:
    ADD SP, SP, #0xC
    POP.W {R4-R7,LR}
    ADD SP, SP, #0x10
    BX LR
loc_12F3E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-comparison",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fwrite)",
  "external-call-type:data-processing-helper (__vfprintf_chk)",
  "external-call-type:data-processing-helper (fputc)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "fixed-value-assignment:7",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x6198",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0xA",
  "address-or-offset-constant:aError",
  "address-or-offset-constant:varg_r0",
  "address-or-offset-constant:var_2C",
  "address-or-offset-constant:var_30",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:formatted-printing",
  "inferred-algorithm:file-i-o",
  "inferred-algorithm:security-check"
]
```<|im_end|>
############
```assembly
loc_1F08C:
    PUSH.W {R4-R10,LR}
    ADD.W R8, R0, #2
    LDRB R3, [R0]
    LDRB.W R9, [R0,#1]
    ADD.W R9, R9, R3,LSL#8
    ADD.W R9, R9, #7
    MOV.W R9, R9,ASR#3
    ADD.W R3, R9, #1
    CMP R1, R3
    BLE loc_1F14A
loc_1F0AE:
    CMP R2, #0
    BEQ loc_1F142
loc_1F0B2:
    ADD.W R5, R9, #3
    MOV R6, R0
    MOVS R1, #4
    MOV R7, R2
    ASRS R5, R5, #2
    ADDS R0, R5, #1
    MOV.W R10, R0,LSL#2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R10
    MOV R4, R0
    BLX memset
    STR R5, [R4]
    CBZ R5, loc_1F0E2
loc_1F0D6:
    SUB.W R2, R10, #4
    MOVS R1, #0
    ADDS R0, R4, #4
    BLX memset
loc_1F0E2:
    ADD.W R0, R9, #0xFFFFFFFF
    MOV R12, R8
    MOV.W LR, R0,LSL#3
    CMP.W R9, #0
    BEQ loc_1F116
loc_1F0F2:
    ASRS R2, R0, #2
    LDRB.W R1, [R12],#1
    ADDS R2, #1
    AND.W R3, LR, #0x1F
    SUBS R0, #1
    SUB.W LR, LR, #8
    LDR.W R5, [R4,R2,LSL#2]
    LSL.W R3, R1, R3
    ORRS R3, R5
    STR.W R3, [R4,R2,LSL#2]
    ADDS R3, R0, #1
    BNE loc_1F0F2
loc_1F116:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1F136
loc_1F11C:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBZ R1, loc_1F12E
loc_1F126:
    B loc_1F136
loc_1F128:
    LDR.W R1, [R2,#-4]!
    CBNZ R1, loc_1F136
loc_1F12E:
    SUBS R3, #1
    STR R3, [R4]
    CMP R3, #1
    BNE loc_1F128
loc_1F136:
    ADD R9, R8
    STR R4, [R7]
    SUB.W R0, R9, R6
    POP.W {R4-R10,PC}
loc_1F142:
    ADD.W R0, R9, #2
    POP.W {R4-R10,PC}
loc_1F14A:
    MOV.W R0, #0xFFFFFFFF
    POP.W {R4-R10,PC}
loc_1F152:
    MOV.W R0, #0xFFFFFFFF
    BX LR
```
Output:```json
[
  "return-type:integer",
  "Argument-count:3",
  "Arg0-type:pointer",
  "Arg1-type:integer",
  "Arg2-type:integer",
  "Calling-convention-hint:callee-saves-registers",
  "Calling-convention-hint:registers-for-args",
  "Stack-arg-use:true",
  "Standard-calling-convention-used",
  "Stack-frame-management-present",
  "Explicit-stack-allocation-size:0x10",
  "Callee-saves-registers-present",
  "Standard-function-return",
  "Conditional-branching-on-input",
  "External-function-calls-present",
  "External-call-type:unspecified-helper (memset)",
  "Integer-size-hint:32-bit",
  "Byte-level-operations:bitwise-shift-left",
  "Byte-level-operations:bitwise-shift-right",
  "Byte-level-operations:bitwise-or",
  "Bitwise-mask-values:0x1F",
  "Fixed-value-comparisons:0",
  "Fixed-value-assignments:0xFFFFFFFF",
  "Address-or-offset-constants:0x193B8",
  "Inferred-algorithm:data-processing-helper",
  "Inferred-algorithm:loop-with-counter",
  "Inferred-algorithm:array-processing",
  "Inferred-algorithm:conditional-data-update",
  "Inferred-algorithm:status-flag-manipulation"
]
```<|im_end|>
############
```assembly
loc_114B8:
    ADR R12, 0x114C0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(popen_ptr - 0x554C0)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (popen)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x114C0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:popen_ptr",
  "address-or-offset-constant:0x554C0",
  "inferred-algorithm:process-management",
  "inferred-algorithm:command-execution",
  "inferred-algorithm:file-io"
]
```<|im_end|>
############
```assembly
loc_38748:
    CMP R1, #0
    BEQ.W loc_389CA
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:register",
  "arg1-type:immediate",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "conditional-branching-on-input",
  "fixed-value-comparison:0",
  "inferred-algorithm:conditional-execution"
]
```<|im_end|>
############
```assembly
loc_12CEC:
    PUSH {R4-R7,LR}
    MOVW R1, #0xA374
    SUB SP, SP, #0xC
    MOVT.W R1, #3
    MOV R6, R0
    BLX fopen
    MOV R5, R0
    CMP R0, #0
    BEQ loc_12D90
loc_12D04:
    BL sub_18E74
    MOV R4, R0
    CBZ R0, loc_12D4E
loc_12D0C:
    LDRB R2, [R0]
    CMP R2, #0xD
    BHI loc_12D1C
loc_12D12:
    MOVW R3, #0x2401
    LSRS R3, R2
    LSLS R3, R3, #0x1F
    BMI loc_12D3E
loc_12D1C:
    ADDS R2, R4, #1
    MOVW R6, #0x2401
loc_12D22:
    MOV R0, R2
    LDRB.W R1, [R2],#1
    LSR.W R3, R6, R1
    CMP R1, #0xD
    AND.W R3, R3, #1
    EOR.W R3, R3, #1
    IT 
    MOVHI R3, #1
    CMP R3, #0
    BNE loc_12D22
loc_12D3E:
    MOVS R3, #0
    STRB R3, [R0]
loc_12D42:
    MOV R0, R5
    BLX fclose
    MOV R0, R4
loc_12D4A:
    ADD SP, SP, #0xC
    POP {R4-R7,PC}
loc_12D4E:
    MOV R0, R5
    BLX ferror
    CBZ R0, loc_12D80
loc_12D56:
    MOV R3, #0x56198
    LDR R7, [R3]
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R6
    MOVW R2, #0x8A7C
    MOVS R1, #1
    MOVT.W R2, #3
    STR R0, [SP,#0x20+var_20]
    MOV R0, R7
    BLX __fprintf_chk
    B loc_12D42
loc_12D80:
    MOV R0, #0x4555C
    BL sub_18A88
    MOV R4, R0
    B loc_12D42
loc_12D90:
    MOV R3, #0x56198
    LDR R4, [R3]
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R6
    MOVW R2, #0x8A5C
    MOVS R1, #1
    MOVT.W R2, #3
    STR R0, [SP,#0x20+var_20]
    MOV R0, R4
    BLX __fprintf_chk
    MOV R0, R5
    B loc_12D4A
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-file-open-success",
  "conditional-branching-on-loop-condition",
  "conditional-branching-on-error",
  "external-function-calls-present",
  "external-call-type:file-handling (fopen)",
  "external-call-type:file-handling (fclose)",
  "external-call-type:error-checking (ferror)",
  "external-call-type:formatted-output (fprintf)",
  "external-call-type:utility (strerror)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-shift",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-AND",
  "byte-level-operations:conditional-moves",
  "byte-level-operations:increment",
  "byte-level-operations:decrement",
  "address-or-offset-constant:0xA374",
  "address-or-offset-constant:0x3",
  "address-or-offset-constant:0x2401",
  "address-or-offset-constant:0x56198",
  "address-or-offset-constant:0x8A7C",
  "address-or-offset-constant:0x8A5C",
  "address-or-offset-constant:0x4555C",
  "inferred-algorithm:file-processing",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:error-handling-and-reporting",
  "inferred-algorithm:data-parsing-or-modification"
]
```<|im_end|>
############
```assembly
loc_1B5D6:
    ADD.W R3, R2, #0x3C8
    MOV R10, R2
    MOV R5, R1
    MOV R4, R0
    LDR R1, [R3,#4]
    ADD R6, SP, #0x68+var_4C
    LDR R0, [R3]
    CMP R5, #0
    STR R3, [SP,#0x68+var_58]
    LDR.W R2, [R10,#0x3D0]
    LDR.W R3, [R10,#0x3D4]
    STM R6!, {R0-R3}
    BLE.W loc_1B746
loc_1B5F8:
    SUBS R3, R5, #1
    LDR R2, [SP,#0x68+var_48]
    BIC.W R3, R3, #0xF
    LDR R1, [SP,#0x68+var_40]
    ADDS R3, #0x20
    LDR.W R9, [SP,#0x68+var_4C]
    LDR.W R11, [SP,#0x68+var_44]
    ADDS R3, R4, R3
    ADDS R4, #0x10
    STR R3, [SP,#0x68+var_5C]
    MOV R3, R10
    MOV R10, R2
    MOV R2, R3
    STR R1, [SP,#0x68+var_64]
loc_1B61A:
    LDRB.W R7, [R4,#-0xB]
    MOV R0, R2
    LDRB.W R3, [R4,#-0xC]
    ADD R1, SP, #0x68+var_3C
    LDRB.W R5, [R4,#-3]
    ADDS R4, #0x10
    LSLS R7, R7, #0x10
    LDRB.W R8, [R4,#-0x1F]
    ORR.W R7, R7, R3,LSL#24
    LDRB.W R3, [R4,#-0x14]
    LDRB.W LR, [R4,#-0x20]
    LSLS R5, R5, #0x10
    LDRB.W R6, [R4,#-0x17]
    MOV.W R8, R8,LSL#16
    LDRB.W R12, [R4,#-0x18]
    ORR.W R3, R5, R3,LSL#24
    LDRB.W R5, [R4,#-0x19]
    ORR.W LR, R8, LR,LSL#24
    LDRB.W R8, [R4,#-0x1D]
    LSLS R6, R6, #0x10
    ORRS R7, R5
    LDRB.W R5, [R4,#-0x15]
    ORR.W R6, R6, R12,LSL#24
    ORR.W R8, LR, R8
    LDRB.W LR, [R4,#-0x1E]
    ORRS R6, R5
    LDRB.W R5, [R4,#-0x11]
    LDRB.W R12, [R4,#-0x1A]
    ORR.W R8, R8, LR,LSL#8
    ORRS R5, R3
    LDRB.W LR, [R4,#-0x16]
    LDRB.W R3, [R4,#-0x12]
    ORR.W R7, R7, R12,LSL#8
    STR.W R8, [SP,#0x68+var_3C]
    ORR.W R6, R6, LR,LSL#8
    STR R7, [SP,#0x68+var_38]
    ORR.W R5, R5, R3,LSL#8
    STR R6, [SP,#0x68+var_34]
    LDR.W R3, [R2,#0x3C4]
    STR R5, [SP,#0x68+var_30]
    STR R2, [SP,#0x68+var_60]
    BLX R3
    LDR R3, [SP,#0x68+var_3C]
    LDR R2, [SP,#0x68+var_64]
    EOR.W R9, R3, R9
    LDR R1, [SP,#0x68+var_38]
    LDR R3, [SP,#0x68+var_30]
    LDR R0, [SP,#0x68+var_34]
    EOR.W R1, R1, R10
    EOR.W LR, R2, R3
    MOV.W R3, R9,LSR#16
    EOR.W R0, R0, R11
    STRB.W R3, [R4,#-0x1F]
    LSRS R3, R1, #0x10
    STRB.W R3, [R4,#-0x1B]
    LSRS R3, R0, #0x10
    STRB.W R3, [R4,#-0x17]
    MOV.W R3, LR,LSR#24
    STRB.W R3, [R4,#-0x14]
    MOV.W R3, LR,LSR#8
    STRB.W R3, [R4,#-0x12]
    LDR R3, [SP,#0x68+var_5C]
    MOV.W R12, R9,LSR#24
    STRB.W R9, [R4,#-0x1D]
    MOV.W R9, R9,LSR#8
    STRB.W R1, [R4,#-0x19]
    MOV R10, R7
    STRB.W R0, [R4,#-0x15]
    MOV R11, R6
    STRB.W R12, [R4,#-0x20]
    MOV.W R12, R1,LSR#24
    STRB.W R9, [R4,#-0x1E]
    LSRS R1, R1, #8
    STRB.W R12, [R4,#-0x1C]
    MOV.W R12, R0,LSR#24
    STRB.W R1, [R4,#-0x1A]
    LSRS R0, R0, #8
    STRB.W LR, [R4,#-0x11]
    MOV.W R1, LR,LSR#16
    STRB.W R12, [R4,#-0x18]
    MOV R9, R8
    STRB.W R0, [R4,#-0x16]
    STRB.W R1, [R4,#-0x13]
    CMP R3, R4
    STR.W R8, [SP,#0x68+var_4C]
    STR R7, [SP,#0x68+var_48]
    STR R6, [SP,#0x68+var_44]
    STR R5, [SP,#0x68+var_64]
    STR R5, [SP,#0x68+var_40]
    LDR R2, [SP,#0x68+var_60]
    BNE.W loc_1B61A
loc_1B744:
    MOV R10, R2
loc_1B746:
    ADD R4, SP, #0x68+var_4C
    LDR R5, [SP,#0x68+var_2C]
    LDR R6, [SP,#0x68+var_58]
    LDM R4!, {R0-R3}
    STR.W R0, [R10,#0x3C8]
    LDR R0, [SP,#0x68+var_54]
    STR R1, [R6,#4]
    STR R2, [R6,#8]
    LDR R0, [R0]
    STR R3, [R6,#0xC]
    CMP R5, R0
    BNE loc_1B780
loc_1B760:
    ADD SP, SP, #0x44
    POP.W {R4-R11,PC}
loc_1B766:
    MOVW R1, #0xD380
    MOVW R0, #0xD38C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aAesDecryptCbc
    MOVW R2, #0x41F
    BLX __assert_fail
loc_1B780:
    BLX __stack_chk_fail
```
Output:R#24
    STRB.W R1, [R4,#-0x18]
    MOV.W R12, R0,LSR#8
    STRB.W R0, [R4,#-0x16]
    STR WZR, [R3]
    B loc_1B672
loc_1B746:
    LDR R3, [SP,#0x68+var_58]
    LDR R2, [SP,#0x68+var_60]
    LDR R1, [SP,#0x68+var_64]
    LDR R0, [SP,#0x68+var_5C]
    ADDS R3, R3, #1
    STR R3, [SP,#0x68+var_58]
    B loc_1B61A
loc_1B672:
    LDR R3, [SP,#0x68+var_58]
    CMP R3, #0
    BNE loc_1B5F8
    LDR R3, [SP,#0x68+var_48]
    LDR R2, [SP,#0x68+var_40]
    LDR R1, [SP,#0x68+var_3C]
    LDR R0, [SP,#0x68+var_38]
    LDR R3, [SP,#0x68+var_34]
    LDR R2, [SP,#0x68+var_30]
    LDR R1, [SP,#0x68+var_2C]
    LDR R0, [SP,#0x68+var_28]
    LDR R3, [SP,#0x68+var_24]
    LDR R2, [SP,#0x68+var_20]
    LDR R1, [SP,#0x68+var_1C]
    LDR R0, [SP,#0x68+var_18]
    LDR R3, [SP,#0x68+var_14]
    LDR R2, [SP,#0x68+var_10]
    LDR R1, [SP,#0x68+var_C]
    LDR R0, [SP,#0x68+var_8]
    LDR R3, [SP,#0x68+var_4]
    LDR R2, [SP,#0x68]
    LDR R1, [SP,#0x64]
    LDR R0, [SP,#0x60]
    B loc_1B746
```
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
s
<|im_start|>
<|im_start|>
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

############
```assembly
loc_16C84:
    LDR R0, [R6,#8]
    ADD.W R7, SP, #0x98+n+3
    BLX strlen
    LDR R3, [R6]
    MOV R4, R0
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR R3, [SP,#0x98+n]
    MOVS R1, #1
    ADDS R3, #0xBC
    ADD R3, R8
    ADD R3, R4
    ADD R3, R0
    STR R3, [SP,#0x98+var_84]
    MOV R0, R3
    BL sub_193B8
    MOV R3, #0x3A00C
    MOV R5, R0
    LDM R3!, {R0-R2}
    LDRH R4, [R3]
    LDRB R3, [R3,#(aOpensshKeyV1+0xE - 0x3A018)]
    STR R0, [R5]
    STRH R4, [R5,#0xC]
    ADD.W R4, SP, #0x98+var_5D
    STR R1, [R5,#4]
    STR R2, [R5,#8]
    STRB R3, [R5,#0xE]
    CMP.W R10, #0
    BEQ.W loc_16F94
loc_16CD2:
    BL sub_2D1F4
    STRB.W R0, [R7,#1]!
    CMP R7, R4
    BNE loc_16CD2
loc_16CDE:
    MOV R3, #0x3A58C
    MOV R12, #0x3A598
    LDM R3!, {R0,R1}
    ADD R2, SP, #0x98+var_6C
    MOVS R4, #0
    STR R2, [SP,#0x98+var_74]
    MOV R7, R2
    STRB R4, [R5,#0xF]
    STR.W R0, [R5,#0x13]
    MOV.W LR, #0xA
    LDRH R3, [R3]
    ADD.W R11, R5, #0x43
    LDR.W R0, [R12]
    STRB R4, [R5,#0x10]
    STRB R4, [R5,#0x11]
    STRB.W LR, [R5,#0x12]
    STRH.W R3, [R5,#0x1B]
    STR.W R1, [R5,#0x17]
    STR.W R0, [R5,#0x21]
    LDM R7!, {R0-R3}
    LDRH.W R7, [R12,#(word_3A59C - 0x3A598)]
    STRB R4, [R5,#0x1D]
    STRB R4, [R5,#0x1E]
    STRH.W R7, [R5,#0x25]
    MOVS R7, #0x18
    STR.W R0, [R5,#0x2F]
    MOVS R0, #6
    STR.W R1, [R5,#0x33]
    STRB.W R0, [R5,#0x20]
    MOVS R0, #0x10
    STR.W R2, [R5,#0x37]
    LSR.W R1, R7, R0
    STR.W R3, [R5,#0x3B]
    LSR.W R2, R7, R7
    STRB R4, [R5,#0x1F]
    LSRS R3, R7, #8
    STRB.W R4, [R5,#0x2B]
    STRB.W R4, [R5,#0x2C]
    STRB.W R4, [R5,#0x2D]
    STRB.W R0, [R5,#0x2E]
    STRB.W R4, [R5,#0x3F]
    STRB.W R4, [R5,#0x40]
    STRB.W R4, [R5,#0x41]
    STRB.W R0, [R5,#0x42]
    STRB.W R7, [R5,#0x2A]
    STRB.W R2, [R5,#0x27]
    STRB.W R1, [R5,#0x28]
    STRB.W R3, [R5,#0x29]
loc_16D84:
    MOVS R7, #0
    MOVS R3, #1
    STRB.W R7, [R11]
    ADD.W R0, R11, #8
    STRB.W R7, [R11,#1]
    MOVS R4, #4
    STRB.W R7, [R11,#2]
    STRB.W R3, [R11,#3]
    LDR.W R9, [SP,#0x98+n]
    LDR R1, [SP,#0x98+src]
    MOV.W R3, R9,ASR#24
    STRB.W R9, [R11,#7]
    STRB.W R3, [R11,#4]
    MOV R2, R9
    MOV.W R3, R9,ASR#16
    STRB.W R3, [R11,#5]
    MOV.W R3, R9,ASR#8
    ADD.W R9, R9, #8
    STRB.W R3, [R11,#6]
    ADD R9, R11
    BLX memcpy
    MOV R0, R7
    ADD.W R7, R9, R4
loc_16DD2:
    MOV.W R11, R0,LSL#8
    BL sub_2D1F4
    SUBS R4, #1
    ADD R0, R11
    BNE loc_16DD2
loc_16DE0:
    UBFX.W R2, R0, #0x10, #8
    LSRS R1, R0, #0x18
    UBFX.W R3, R0, #8, #8
    STRB.W R2, [R9,#5]
    STRB.W R2, [R9,#9]
    UXTB R0, R0
    STRB.W R1, [R9,#4]
    ADD.W R4, R9, #0xC
    STRB.W R0, [R9,#7]
    STRB.W R0, [R9,#0xB]
    STRB.W R1, [R9,#8]
    STRB.W R3, [R9,#6]
    STRB.W R3, [R9,#0xA]
    LDR R3, [R6]
    LDR R1, [R3,#0x30]
    MOV R0, R1
    STR R1, [SP,#0x98+var_78]
    BLX strlen
    LDR R1, [SP,#0x98+var_78]
    MOV R11, R0
    ADD.W R11, R11, #4
    ADD R4, R11
    ASRS R3, R0, #0x18
    ASRS R2, R0, #0x10
    STRB.W R0, [R9,#0xF]
    STRB.W R3, [R9,#0xC]
    ASRS R3, R0, #8
    STRB.W R2, [R9,#0xD]
    MOV R2, R0
    STRB.W R3, [R9,#0xE]
    ADD.W R0, R9, #0x10
    BLX memcpy
    MOV R2, R8
    LDR R1, [SP,#0x98+var_88]
    MOV R0, R4
    BLX memcpy
    LDR R1, [R6,#8]
    ADD.W R11, R4, R8
    MOV R0, R1
    STR R1, [SP,#0x98+var_78]
    BLX strlen
    LDR R1, [SP,#0x98+var_78]
    MOV R6, R0
    ASRS R3, R0, #0x18
    ASRS R2, R0, #0x10
    STRB.W R3, [R4,R8]
    STRB.W R0, [R11,#3]
    ASRS R3, R0, #8
    STRB.W R2, [R11,#1]
    ADD.W R0, R11, #4
    STRB.W R3, [R11,#2]
    MOV R2, R6
    BLX memcpy
    ADDS R6, #4
    ADD R11, R6
    MOV R4, R11
loc_16E88:
    ADDS R4, #1
    SUBS R6, R4, R7
    SUB.W R3, R4, R11
    STRB.W R3, [R4,#-1]
    LSLS R3, R6, #0x1C
    BNE loc_16E88
loc_16E98:
    LDR R3, [SP,#0x98+var_84]
    SUBS R4, R4, R5
    CMP R3, R4
    BLE.W loc_16FF2
loc_16EA2:
    ASRS R3, R6, #0x18
    STRB.W R6, [R9,#3]
    STRB.W R3, [R9]
    ASRS R3, R6, #0x10
    STRB.W R3, [R9,#1]
    ASRS R3, R6, #8
    STRB.W R3, [R9,#2]
    CMP.W R10, #0
    BEQ loc_16F02
loc_16EBE:
    MOVS R3, #0x10
    LDR R1, [SP,#0x98+var_74]
    MOV R2, R3
    MOV R0, R10
    ADD.W R9, SP, #0x98+var_5C
    MOV.W R11, #0x30
    STMEA.W SP, {R9,R11}
    BL sub_1C22C
    BL sub_1B3F4
    MOV R1, R9
    MOV R10, R0
    BL sub_1BC4C
    MOV R0, R10
    ADD R1, SP, #0x98+var_3C
    BL sub_1B38C
    MOV R1, R7
    MOV R2, R6
    MOV R0, R10
    BL sub_1B5A8
    MOV R0, R10
    BL sub_1B400
    MOV R1, R11
    MOV R0, R9
    BL sub_194E4
loc_16F02:
    LDR R0, [SP,#0x98+var_80]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_16F90
loc_16F18:
    MOVS R1, #1
    MOV R3, R6
    MOVS R2, #0x24
    MOV R0, #aBeginOpensshPr_0
    MOV R7, R1
    BLX fwrite
    MOV R2, R4
    MOVS R3, #0x40
    MOV R1, R5
    MOV R0, R6
    BL sub_2C190
    MOV R3, R6
    MOVW R0, #0xAA68
    MOVS R2, #0x22
    MOVT.W R0, #3
    MOV R1, R7
    BLX fwrite
    MOV R0, R6
    BLX fclose
loc_16F50:
    LDR R1, [SP,#0x98+var_84]
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R4, [SP,#0x98+var_88]
    MOV R1, R8
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R4, [SP,#0x98+src]
    LDR R1, [SP,#0x98+n]
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R3, [SP,#0x98+var_7C]
    LDR R2, [SP,#0x98+var_2C]
    MOV R0, R7
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_16FEE
loc_16F8A:
    ADD SP, SP, #0x74
    POP.W {R4-R11,PC}
loc_16F90:
    MOV R7, R6
    B loc_16F50
loc_16F94:
    MOV R3, #0x3A584
    ADD R2, SP, #0x98+var_6C
    STR.W R10, [SP,#0x98+var_6C]
    LDR R0, [R3]
    ADD.W R11, R5, #0x23
    STR.W R10, [R2,#4]
    MOVS R3, #4
    STR.W R10, [SP,#0x38]
    STR.W R10, [SP,#0x98+var_64]
    STR R2, [SP,#0x98+var_74]
    STRB.W R10, [R5,#0x1F]
    STRB.W R10, [R5,#0x20]
    STRB.W R10, [R5,#0x21]
    STRB.W R10, [R5,#0x22]
    STR.W R0, [R5,#0x13]
    STR.W R0, [R5,#0x1B]
    STRB.W R10, [R5,#0xF]
    STRB.W R10, [R5,#0x10]
    STRB.W R10, [R5,#0x11]
    STRB.W R10, [R5,#0x17]
    STRB.W R10, [R5,#0x18]
    STRB.W R10, [R5,#0x19]
    STRB R3, [R5,#0x12]
    STRB R3, [R5,#0x1A]
    B loc_16D84
loc_16FEE:
    BLX __stack_chk_fail
loc_16FF2:
    MOVW R1, #0xA624
    MOVW R0, #0xAA28
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewWrit
    MOVW R2, #0x72E
    BLX __assert_fail
loc_1700C:
    MOVW R1, #0xA624
    MOVW R0, #0xAA18
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewWrit
    MOVW R2, #0x6DC
    BLX __assert_fail
```
Output:9,#8]
    STRB.W R3, [R9,#6]
    ADD W0, W1, W2
    LDR.W R0, [SP,#0x98+n]
    STR W0, [SP,#0x98+var_88]
    CMP.W R10, #0
    BNE loc_16F94
    B loc_16F94
loc_16F94:
    LDR R0, [SP,#0x98+var_84]
    BLX free
    LDR R0, [SP,#0x98+var_88]
    BLX free
    LDR R0, [SP,#0x98+var_80]
    BLX free
    LDR R0, [SP,#0x98+var_7C]
    BLX free
    LDR R0, [SP,#0x98+var_78]
    BLX free
    LDR R0, [SP,#0x98+var_74]
    BLX free
    LDR R0, [SP,#0x98+var_70]
    BLX free
    LDR R0, [SP,#0x98+var_6C]
    BLX free
    LDR R0, [SP,#0x98+var_68]
    BLX free
    LDR R0, [SP,#0x98+var_64]
    BLX free
    LDR R0, [SP,#0x98+var_60]
    BLX free
    LDR R0, [SP,#0x98+var_5C]
    BLX free
    LDR R0, [SP,#0x98+var_58]
    BLX free
    LDR R0, [SP,#0x98+var_54]
    BLX free
    LDR R0, [SP,#0x98+var_50]
    BLX free
    LDR R0, [SP,#0x98+var_4C]
    BLX free
    LDR R0, [SP,#0x98+var_48]
    BLX free
    LDR R0, [SP,#0x98+var_44]
    BLX free
    LDR R0, [SP,#0x98+var_40]
    BLX free
    LDR R0, [SP,#0x98+var_3C]
    BLX free
    LDR R0, [SP,#0x98+var_38]
    BLX free
    LDR R0, [SP,#0x98+var_34]
    BLX free
    LDR R0, [SP,#0x98+var_30]
    BLX free
    LDR R0, [SP,#0x98+var_2C]
    BLX free
    LDR R0, [SP,#0x98+var_28]
    BLX free
    LDR R0, [SP,#0x98+var_24]
    BLX free
    LDR R0, [SP,#0x98+var_20]
    BLX free
    LDR R0, [SP,#0x98+var_1C]
    BLX free
    LDR R0, [SP,#0x98+var_18]
    BLX free
    LDR R0, [SP,#0x98+var_14]
    BLX free
    LDR R0, [SP,#0x98+var_10]
    BLX free
    LDR R0, [SP,#0x98+var_C]
    BLX free
    LDR R0, [SP,#0x98+var_8]
    BLX free
    LDR R0, [SP,#0x98+var_4]
    BLX free
    LDR R0, [SP,#0x98]
    BLX free
    BX LR
```
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1

############
```assembly
loc_18868:
    PUSH.W {R4-R9,LR}
    MOV R5, #0x56190
    LDR.W R8, [R0,#0xC]
    SUB SP, SP, #0xD4
    LDR R3, [R5]
    CMP R8, R1
    STR R3, [SP,#0xF0+var_24]
    BLT loc_18890
loc_18882:
    LDR R2, [SP,#0xF0+var_24]
    LDR R3, [R5]
    CMP R2, R3
    BNE loc_18928
loc_1888A:
    ADD SP, SP, #0xD4
    POP.W {R4-R9,PC}
loc_18890:
    ADD.W R1, R1, R1,LSL#2
    MOV R7, R0
    ADDS R4, R1, #3
    BICS.W R1, R1, R1,ASR#32
    IT 
    MOVCS R1, R4
    ASRS R4, R1, #2
    ADD.W R4, R4, #0x200
    CMP.W R4, #0x80000000
    BCS loc_188FA
loc_188AC:
    CMP R4, #0
    ITE 
    MOVNE R0, R4
    MOVEQ R0, #1
    BLX malloc
    MOV R9, R0
    CBZ R0, loc_188FA
loc_188BC:
    LDR R6, [R7,#8]
    MOV R2, R8
    MOV R0, R9
    MOV R1, R6
    BLX memcpy
    MOV R0, R6
    CMP.W R8, #0
    BNE loc_188DC
loc_188D0:
    BLX free
loc_188D4:
    STR.W R9, [R7,#8]
    STR R4, [R7,#0xC]
    B loc_18882
loc_188DC:
    MOV R2, R8
    MOVS R1, #0
    MOV R0, R6
    BLX memset
    LDRB R3, [R6]
    CBZ R3, loc_188F2
loc_188EA:
    LDRB.W R3, [R6,#1]!
    CMP R3, #0
    BNE loc_188EA
loc_188F2:
    LDR R0, [R7,#8]
    CMP R0, #0
    BEQ loc_188D4
loc_188F8:
    B loc_188D0
loc_188FA:
    MOV R3, #0x3AE48
    ADD R6, SP, #0xF0+var_EC
    MOV.W R9, #0
    LDM R3, {R0-R3}
    STM R6!, {R0-R2}
    ADD R1, SP, #0xF0+var_EC
    STRH.W R3, [R6],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R6]
    BL sub_12E78
loc_18922:
    LDR.W R8, [R7,#0xC]
    B loc_188BC
loc_18928:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "conditional-branching-on-compare",
  "external-function-calls-present",
  "external-call-type:malloc",
  "external-call-type:memcpy",
  "external-call-type:free",
  "external-call-type:memset",
  "external-call-type:__stack_chk_fail",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "data-packing-serialization-patterns",
  "byte-order-processing:little-endian",
  "bitwise-operations:shift-left",
  "bitwise-operations:AND-clear",
  "bitwise-mask-values:0x56190",
  "bitwise-mask-values:0x3AE48",
  "bitwise-mask-values:0x54E4",
  "address-or-offset-constants:0x56190",
  "address-or-offset-constants:0x3AE48",
  "address-or-offset-constants:0x54E4",
  "inferred-algorithm:data-structure-initialization",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:dynamic-memory-management",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:string-handling",
  "inferred-algorithm:array-manipulation"
]
```<|im_end|>
############
```assembly
loc_11588:
    PUSH {R3-R7,LR}
    MOV R3, R0
    LDRSB.W R5, [R1]
    MOV R4, R2
    CMP R5, #0
    BGE loc_115B4
loc_11596:
    ADDS R5, R2, #1
    MOVS R7, #0
    STRB R5, [R0,#3]
    ADDS R0, #5
    ASRS R6, R5, #0x18
    STRB R7, [R3,#4]
    STRB R6, [R3]
    ASRS R6, R5, #0x10
    ASRS R5, R5, #8
    STRB R6, [R3,#1]
    STRB R5, [R3,#2]
    BLX memcpy
    ADDS R0, R4, #5
    POP {R3-R7,PC}
loc_115B4:
    ASRS R5, R2, #0x18
    ASRS R0, R2, #0x10
    STRB R5, [R3]
    ASRS R5, R2, #8
    STRB R0, [R3,#1]
    ADDS R0, R3, #4
    STRB R2, [R3,#3]
    STRB R5, [R3,#2]
    BLX memcpy
    ADDS R0, R4, #4
    POP {R3-R7,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:library-function (memcpy)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shift-left:0x18",
  "bitwise-shift-left:0x10",
  "bitwise-shift-left:0x8",
  "bitwise-shift-right:0x18",
  "bitwise-shift-right:0x10",
  "bitwise-shift-right:0x8",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-input-parameter-offset:1",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:5",
  "memory-write-to-output-parameter-offset:3",
  "memory-write-to-output-parameter-offset:4",
  "memory-write-to-output-parameter-offset:5",
  "memory-write-to-output-parameter-offset:6",
  "memory-write-to-output-parameter-offset:7",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:copy-data-block",
  "inferred-algorithm:byte-order-processing"
]
```<|im_end|>
############
```assembly
loc_11368:
    ADR R12, 0x11370
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__vfprintf_chk_ptr - 0x55370)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:variable",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__vfprintf_chk_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11370",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__vfprintf_chk_ptr",
  "inferred-algorithm:formatted-output",
  "inferred-algorithm:error-or-alternative-path"
]
```<|im_end|>
############
```assembly
loc_2DA44:
    PUSH {R3-R7,LR}
    MOV R4, R0
    LDR R0, [R0,#0x14]
    MOVW R5, #0x6178
    BL sub_1E688
    MOVT.W R5, #5
    MOV R7, R0
    BL sub_1ED64
    MOV R2, R7
    LDR R1, [R4,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R7
    BL sub_1E6B0
    LDR R1, [R5]
    MOV R0, R6
    BL sub_1F358
    MOV R7, R0
    MOV R0, R6
    BL sub_1E6B0
    CBZ R7, loc_2DA84
loc_2DA80:
    MOVS R0, #0
    POP {R3-R7,PC}
loc_2DA84:
    LDR R0, [R4,#0x18]
    BL sub_1E688
    MOV R7, R0
    BL sub_1ED64
    MOV R2, R7
    LDR R1, [R4,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R6
    LDR R1, [R5]
    BL sub_1F358
    MOV R7, R0
    MOV R0, R6
    BL sub_1E6B0
    CMP R7, #0
    BNE loc_2DA80
loc_2DAB6:
    LDR R1, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1F358
    CMP R0, #0
    BLE loc_2DAE4
loc_2DAC2:
    LDR R0, [R4,#0x1C]
loc_2DAC4:
    LDR R2, [R4,#0x14]
    LDR R1, [R4,#0x18]
    BL sub_1EAC0
    LDR R1, [R5]
    MOV R6, R0
    BL sub_1F358
    MOV R4, R0
    MOV R0, R6
    BL sub_1E6B0
    CLZ.W R0, R4
    LSRS R0, R0, #5
    POP {R3-R7,PC}
loc_2DAE4:
    LDR R2, [R4,#0x14]
    LDR R3, [R4,#0x18]
    LDR R0, [R4,#0x1C]
    STR R2, [R4,#0x18]
    STR R3, [R4,#0x14]
    BL sub_1E6B0
    LDR R1, [R4,#0x14]
    LDR R0, [R4,#0x18]
    BL sub_20228
    STR R0, [R4,#0x1C]
    CMP R0, #0
    BNE loc_2DAC4
loc_2DB00:
    B loc_2DA80
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_1E688)",
  "external-call-type:data-processing-helper (sub_1ED64)",
  "external-call-type:data-processing-helper (sub_1EAC0)",
  "external-call-type:data-processing-helper (sub_1E6B0)",
  "external-call-type:data-processing-helper (sub_1F358)",
  "external-call-type:data-processing-helper (sub_20228)",
  "integer-size-hint:32-bit",
  "byte-level-operations:LSRS, CLZ.W",
  "bitwise-operation:AND-clear",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:5",
  "fixed-value-assignment:0x6178",
  "address-or-offset-constant:sub_1E688",
  "address-or-offset-constant:sub_1ED64",
  "address-or-offset-constant:sub_1EAC0",
  "address-or-offset-constant:sub_1E6B0",
  "address-or-offset-constant:sub_1F358",
  "address-or-offset-constant:sub_20228",
  "inferred-algorithm:data-processing-loop",
  "inferred-algorithm:conditional-execution",
  "inferred-algorithm:state-update",
  "inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_12C08:
    MOV.W R11, #0
    MOV.W LR, #0
    POP {R1}
    MOV R2, SP
    PUSH {R2}
    PUSH {R0}
    LDR.W R12, =(nullsub_5+1)
    PUSH.W {R12}
    LDR R0, =(sub_116D4+1)
    LDR R3, =(sub_38A04+1)
    BLX __libc_start_main
    BLX abort
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:stack-for-args",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__libc_start_main)",
  "external-call-type:data-processing-helper (abort)",
  "integer-size-hint:16-bit",
  "fixed-value-assignment:0",
  "address-or-offset-constant:nullsub_5+1",
  "address-or-offset-constant:sub_116D4+1",
  "address-or-offset-constant:sub_38A04+1",
  "inferred-algorithm:program-entry-point",
  "inferred-algorithm:program-initialization",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_25084:
    PUSH {R3-R5,LR}
    MOV R4, #0x561A8
    LDRB.W R5, [R4,#(byte_56288 - 0x561A8)]
    CMP R5, #0
    BNE loc_2510C
loc_25096:
    MOVS R1, #0x30
    LDR R0, =unk_3F970
    MOV.W R3, #0x180
    STR.W R5, [R4,#(dword_5628C - 0x561A8)]
    STR.W R3, [R4,#(dword_56298 - 0x561A8)]
    BL sub_1EDA8
    MOVS R1, #0x30
    STR.W R0, [R4,#(dword_5629C - 0x561A8)]
    LDR R0, =unk_3F9A0
    BL sub_1EDA8
    MOVS R1, #0x30
    STR.W R0, [R4,#(dword_562A0 - 0x561A8)]
    LDR R0, =unk_3F9D0
    BL sub_1EDA8
    MOVS R1, #0x30
    STR.W R0, [R4,#(dword_562A4 - 0x561A8)]
    LDR R0, =unk_3FA00
    BL sub_1EDA8
    MOVS R1, #0x30
    STR.W R0, [R4,#(dword_562A8 - 0x561A8)]
    LDR R0, =unk_3FA30
    BL sub_1EDA8
    MOVS R1, #0x30
    STR.W R0, [R4,#(dword_562B0 - 0x561A8)]
    LDR R0, =unk_3FA60
    BL sub_1EDA8
    ADD.W R2, R4, #0xE4
    MOVW R3, #0xFD14
    STR.W R2, [R4,#(dword_562AC - 0x561A8)]
    MOVT.W R3, #3
    MOVS R2, #1
    STRB.W R5, [R4,#(byte_562BC - 0x561A8)]
    STR.W R3, [R4,#(dword_56290 - 0x561A8)]
    STR.W R3, [R4,#(dword_56294 - 0x561A8)]
    STRB.W R2, [R4,#(byte_56288 - 0x561A8)]
    STR.W R0, [R4,#(dword_562B4 - 0x561A8)]
loc_2510C:
    LDR R0, =dword_5628C
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_1EDA8)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-OR",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-NOT",
  "byte-level-operations:bitwise-SHL",
  "byte-level-operations:bitwise-SHR",
  "byte-level-operations:bitwise-CMP",
  "byte-level-operations:bitwise-MOV",
  "byte-level-operations:bitwise-LDR",
  "byte-level-operations:bitwise-STR",
  "byte-level-operations:bitwise-BL",
  "byte-level-operations:bitwise-JALR",
  "byte-level-operations:bitwise-ADD",
  "byte-level-operations:bitwise-SUB",
  "byte-level-operations:bitwise-MUL",
  "byte-level-operations:bitwise-DIV",
  "byte-level-operations:bitwise-MOD",
  "byte-level-operations:bitwise-AND",
  "byte-level-operations:bitwise-NOR",
  "byte-level-operations:bitwise-NAND",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-SHL",
  "byte-level-operations:bitwise-SHR",
  "byte-level-operations:bitwise-CMP",
  "byte-level-operations:bitwise-MOV",
  "byte-level-operations:bitwise-LDR",
  "byte-level-operations:bitwise-STR",
  "byte-level-operations:bitwise-BL",
  "byte-level-operations:bitwise-JALR",
  "byte-level-operations:bitwise-ADD",
  "byte-level-operations:bitwise-SUB",
  "byte-level-operations:bitwise-MUL",
  "byte-level-operations:bitwise-DIV",
  "byte-level-operations:bitwise-MOD",
  "byte-level-operations:bitwise-AND",
  "byte-level-operations:bitwise-NOR",
  "byte-level-operations:bitwise-NAND",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-SHL",
  "byte-level-operations:bitwise-SHR",
  "byte-level-operations:bitwise-CMP",
  "byte-level-operations:bitwise-MOV",
  "byte-level-operations:bitwise-LDR",
  "byte-level-operations:bitwise-STR",
  "byte-level-operations:bitwise-BL",
  "byte-level-operations:bitwise-JALR",
  "byte-level-operations:bitwise-ADD",
  "byte-level-operations:bitwise-SUB",
  "byte-level-operations:bitwise-MUL",
  "byte-level-operations:bitwise-DIV",
  "byte-level-operations:bitwise-MOD",
  "byte-level-operations:bitwise-AND",
  "byte-level-operations:bitwise-NOR",
  "byte-level-operations:bitwise-NAND",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-SHL",
  "byte-level-operations:bitwise-SHR",
  "byte-level-operations:bitwise-CMP",
  "byte-level-operations:bitwise-MOV",
  "byte-level-operations:bitwise-LDR",
  "byte-level-operations:bitwise-STR",
  "byte-level-operations:bitwise-BL",
  "byte-level-operations:bitwise-JALR",
  "byte-level-operations:bitwise-ADD",
  "byte-level-operations:bitwise-SUB",
  "byte-level-operations:bitwise-MUL",
  "byte-level-operations:bitwise-DIV",
  "byte-level-operations:bitwise-MOD",
  "byte-level-operations:bitwise-AND",
  "byte-level-operations:bitwise-NOR",
  "byte-level-operations:bitwise-NAND",
  "byte-level-operations:bitwise-XOR",
  "byte-level-operations:bitwise-SHL",
  "byte-level-operations:bitwise-SHR",
  "byte
############
```assembly
loc_28528:
    CMP R0, #8
    PUSH {R3-R7,LR}
    MOV R4, R0
    MOV R6, R1
    MOV R7, R2
    BEQ loc_2856C
loc_28534:
    CMP R0, #5
    BEQ loc_2853E
loc_28538:
    MOVS R3, #0
loc_2853A:
    MOV R0, R3
    POP {R3-R7,PC}
loc_2853E:
    MOV R5, #0x3F5B0
    MOV R2, R0
    ADD.W R1, R5, #0x568
    MOV R0, R6
    BLX memcmp
    CBZ R0, loc_2859A
loc_28554:
    MOV R2, R4
    MOV R0, R6
    ADD.W R1, R5, #0x570
    BLX memcmp
    CMP R0, #0
    BNE loc_28538
loc_28564:
    MOVS R0, #2
    ADD.W R3, R5, #0x530
    B loc_28588
loc_2856C:
    MOV R5, #0x3F5B0
    MOV R2, R0
    MOV R0, R1
    ADD.W R1, R5, #0x560
    BLX memcmp
    CMP R0, #0
    BNE loc_28538
loc_28584:
    ADD.W R3, R5, #0x540
loc_28588:
    ADD.W R5, R5, R0,LSL#2
    LDR R3, [R3]
    LDR.W R4, [R5,#0x578]
    BLX R3
    MOV R3, R4
    STR R0, [R7]
    B loc_2853A
loc_2859A:
    ADD.W R3, R5, #0x550
    MOVS R0, #1
    B loc_28588
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcmp)",
  "external-call-type:unspecified-helper",
  "integer-size-hint:32-bit",
  "bitwise-operation-shift-left:LSL#2",
  "magic-number:0x3F5B0",
  "magic-number:0x568",
  "magic-number:0x570",
  "magic-number:0x530",
  "magic-number:0x540",
  "magic-number:0x550",
  "magic-number:0x560",
  "magic-number:0x578",
  "inferred-algorithm:data-comparison-and-selection",
  "inferred-algorithm:data-processing-and-callback-invocation"
]
```<|im_end|>
############
```assembly
loc_13270:
    PUSH {R4,R5,LR}
    MOVW R5, #0x6190
    MOVW R4, #0x97F0
    MOVT.W R5, #5
    MOVT.W R4, #3
    SUB SP, SP, #0x14
    LDR R3, [R5]
    LDR.W R2, [R4,R1,LSL#2]
    STR R3, [SP,#0x20+var_14]
    CBNZ R2, loc_132B8
loc_1328E:
    ADD.W R3, R4, R1,LSL#2
    LDR.W R3, [R3,#0x2E0]
    CMP R3, #1
    BNE loc_132F4
loc_1329A:
    ADD R3, SP, #0x20+var_10
    LDR R0, [R0]
    STR.W R1, [R3,#-0xC]!
    MOV R1, R3
    BL sub_35A34
    CBZ R0, loc_132D8
loc_132AA:
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R5]
    LDR R0, [R0,#8]
    CMP R2, R3
    BNE loc_132D4
loc_132B4:
    ADD SP, SP, #0x14
    POP {R4,R5,PC}
loc_132B8:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9EFC
    ADD.W R3, R4, #0x5C0
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOV.W R2, #0x108
    BLX __assert_fail
loc_132D4:
    BLX __stack_chk_fail
loc_132D8:
    MOVW R1, #0x9EF4
    MOVW R0, #0xA004
    ADD.W R3, R4, #0x5C0
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOV.W R2, #0x10C
    BLX __assert_fail
loc_132F4:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9F20
    ADD.W R3, R4, #0x5C0
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOVW R2, #0x109
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "conditional-branching-on-memory-content",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:XOR",
  "bitwise-mask-value:0x108",
  "bitwise-mask-value:0x10C",
  "bitwise-mask-value:0x109",
  "address-or-offset-constant:0x6190",
  "address-or-offset-constant:0x97F0",
  "address-or-offset-constant:0x2E0",
  "address-or-offset-constant:0x5C0",
  "address-or-offset-constant:0x9EF4",
  "address-or-offset-constant:0xA004",
  "address-or-offset-constant:0x9F20",
  "inferred-algorithm:data-validation-or-checksum",
  "inferred-algorithm:assertion-failure-handler",
  "inferred-algorithm:array-access-with-bound-checking",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_1FEF0:
    PUSH.W {R4-R8,LR}
    MOV R7, R0
    NEGS R0, R1
    MOV R6, R1
    BL sub_3872C
    LDR R5, [R7]
    CMP R5, #0
    BLE loc_1FF2E
loc_1FF04:
    ADD.W R5, R7, R5,LSL#2
    MOV R8, R1
    MOVS R3, #0
loc_1FF0C:
    LDR.W R0, [R5],#-4
    MOV R1, R6
    MUL.W R4, R3, R8
    BL sub_3872C
    ADDS R0, R4, R1
    MOV R1, R6
    BL sub_3872C
    CMP R7, R5
    MOV R3, R1
    BNE loc_1FF0C
loc_1FF28:
    UXTH R0, R1
    POP.W {R4-R8,PC}
loc_1FF2E:
    MOVS R0, #0
    POP.W {R4-R8,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_3872C)",
  "integer-size-hint:32-bit",
  "bitwise-operation-shift-left:LSL#2",
  "bitwise-operation-multiply:MUL.W",
  "bitwise-operation-addition:ADD.W",
  "bitwise-operation-subtraction:NEGS",
  "bitwise-operation-unsigned-extension:UXTH",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "address-or-offset-constant:sub_3872C",
  "inferred-algorithm:array-processing",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:data-transformation"
]
```<|im_end|>
############
```assembly
loc_2DA44:
    PUSH {R3-R7,LR}
    MOV R4, R0
    LDR R0, [R0,#0x14]
    MOVW R5, #0x6178
    BL sub_1E688
    MOVT.W R5, #5
    MOV R7, R0
    BL sub_1ED64
    MOV R2, R7
    LDR R1, [R4,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R7
    BL sub_1E6B0
    LDR R1, [R5]
    MOV R0, R6
    BL sub_1F358
    MOV R7, R0
    MOV R0, R6
    BL sub_1E6B0
    CBZ R7, loc_2DA84
loc_2DA80:
    MOVS R0, #0
    POP {R3-R7,PC}
loc_2DA84:
    LDR R0, [R4,#0x18]
    BL sub_1E688
    MOV R7, R0
    BL sub_1ED64
    MOV R2, R7
    LDR R1, [R4,#0x10]
    LDR R0, [R4,#0xC]
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R6
    LDR R1, [R5]
    BL sub_1F358
    MOV R7, R0
    MOV R0, R6
    BL sub_1E6B0
    CMP R7, #0
    BNE loc_2DA80
loc_2DAB6:
    LDR R1, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1F358
    CMP R0, #0
    BLE loc_2DAE4
loc_2DAC2:
    LDR R0, [R4,#0x1C]
loc_2DAC4:
    LDR R2, [R4,#0x14]
    LDR R1, [R4,#0x18]
    BL sub_1EAC0
    LDR R1, [R5]
    MOV R6, R0
    BL sub_1F358
    MOV R4, R0
    MOV R0, R6
    BL sub_1E6B0
    CLZ.W R0, R4
    LSRS R0, R0, #5
    POP {R3-R7,PC}
loc_2DAE4:
    LDR R2, [R4,#0x14]
    LDR R3, [R4,#0x18]
    LDR R0, [R4,#0x1C]
    STR R2, [R4,#0x18]
    STR R3, [R4,#0x14]
    BL sub_1E6B0
    LDR R1, [R4,#0x14]
    LDR R0, [R4,#0x18]
    BL sub_20228
    STR R0, [R4,#0x1C]
    CMP R0, #0
    BNE loc_2DAC4
loc_2DB00:
    B loc_2DA80
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1E688)",
  "external-call-type:unspecified-helper (sub_1ED64)",
  "external-call-type:unspecified-helper (sub_1EAC0)",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "external-call-type:unspecified-helper (sub_1F358)",
  "external-call-type:unspecified-helper (sub_20228)",
  "integer-size-hint:32-bit",
  "byte-level-operations:LSRS",
  "byte-level-operations:CLZ.W",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-input-parameter-offset:0x14",
  "memory-read-from-input-parameter-offset:0x10",
  "memory-read-from-input-parameter-offset:0xC",
  "memory-read-from-input-parameter-offset:0x18",
  "memory-read-from-input-parameter-offset:0x1C",
  "memory-write-to-input-parameter-offset:0x18",
  "memory-write-to-input-parameter-offset:0x14",
  "memory-write-to-input-parameter-offset:0x1C",
  "fixed-value-comparison:0",
  "fixed-value-comparison:-1",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x6178",
  "address-or-offset-constant:sub_1E688",
  "address-or-offset-constant:sub_1ED64",
  "address-or-offset-constant:sub_1EAC0",
  "address-or-offset-constant:sub_1E6B0",
  "address-or-offset-constant:sub_1F358",
  "address-or-offset-constant:sub_20228",
  "inferred-algorithm:data-processing",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:conditional-data-serialization",
  "inferred-algorithm:bitwise-shift-operations",
  "inferred-algorithm:resource-management",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_113C8:
    ADR R12, 0x113D0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(off_560D8 - 0x553D0)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "address-or-offset-constant:0x113D0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:off_560D8",
  "address-or-offset-constant:0x553D0",
  "inferred-algorithm:jump-table-or-indirect-call",
  "inferred-algorithm:program-entry-point"
]
```<|im_end|>
############
```assembly
loc_5695C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_18738:
    PUSH {R4-R7,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0xD4
    MOV R6, R0
    MOVS R0, #0x24
    LDR R3, [R5]
    STR R3, [SP,#0xE8+var_1C]
    BLX malloc
    MOV R4, R0
    CBZ R0, loc_18778
loc_18754:
    LDR R1, [SP,#0xE8+var_1C]
    MOVS R3, #0
    LDR R2, [R5]
    MOV R0, R4
    MOVS R5, #1
    STR R6, [R4,#0x1C]
    CMP R1, R2
    STR R3, [R4,#0x18]
    STR R3, [R4,#0x14]
    STR R3, [R4,#0x20]
    STR R3, [R4,#0xC]
    STR R3, [R4,#4]
    STR R3, [R4,#0x10]
    STR R3, [R4,#8]
    STR R5, [R4]
    BNE loc_1879E
loc_18774:
    ADD SP, SP, #0xD4
    POP {R4-R7,PC}
loc_18778:
    MOV R3, #0x3AE48
    ADD R7, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM R7!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [R7],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R7]
    BL sub_12E78
loc_1879C:
    B loc_18754
loc_1879E:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:pointer",
  "argument-count:1",
  "arg0-type:size_t",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-memory-allocation",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (malloc)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x24",
  "fixed-value-assignment:0x3AE48",
  "fixed-value-assignment:0x54E4",
  "address-or-offset-constant:malloc",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:dynamic-memory-allocation",
  "inferred-algorithm:data-structure-initialization",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_24500:
    CBZ R0, locret_24530
loc_24502:
    PUSH {R4,LR}
    MOV R4, R0
    LDR R0, [R0,#8]
    CBZ R0, loc_2450E
loc_2450A:
    BL sub_1E6B0
loc_2450E:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_24516
loc_24512:
    BL sub_1E6B0
loc_24516:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2451E
loc_2451A:
    BL sub_1E6B0
loc_2451E:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_24526
loc_24522:
    BL sub_1E6B0
loc_24526:
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
loc_24530:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-read-from-input-parameter-offset:10",
  "memory-read-from-input-parameter-offset:18",
  "fixed-value-comparison:0",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:callback-or-handler-invocation",
  "inferred-algorithm:module-processing"
]
```<|im_end|>
############
```assembly
loc_1F088:

loc_2E3C4:
    ADDS R2, #0x10
    B.W sub_1F088
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:no-convention-applicable",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "unconditional-loop-present",
  "loop-counter-pattern:increment-by-constant",
  "loop-counter-increment-value:0x10",
  "inferred-algorithm:infinite-loop-or-iterative-process",
  "inferred-algorithm:memory-access-without-bound-checking"
]
```<|im_end|>
############
```assembly
loc_34AD0:
    PUSH.W {R4-R8,LR}
    MOV R7, R0
    LDR R4, [R0]
    CMP R4, #0
    BEQ.W loc_357DC
loc_34ADE:
    LDR R5, [R4,#4]
    CMP R5, #0
    BEQ.W loc_34E1C
loc_34AE6:
    LDR R6, [R5,#4]
    CMP R6, #0
    BEQ loc_34BB2
loc_34AEC:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_34B1C
loc_34AF6:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34B1C:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_34B4C
loc_34B26:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34B4C:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_34B7C
loc_34B56:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34B7C:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_34BAC
loc_34B86:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34BAC:
    MOV R0, R6
    BL sub_19494
loc_34BB2:
    LDR R6, [R5,#8]
    CMP R6, #0
    BEQ loc_34C7E
loc_34BB8:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_34BE8
loc_34BC2:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34BE8:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_34C18
loc_34BF2:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34C18:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_34C48
loc_34C22:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34C48:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_34C78
loc_34C52:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34C78:
    MOV R0, R6
    BL sub_19494
loc_34C7E:
    LDR R6, [R5,#0xC]
    CMP R6, #0
    BEQ loc_34D4A
loc_34C84:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_34CB4
loc_34C8E:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34CB4:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_34CE4
loc_34CBE:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34CE4:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_34D14
loc_34CEE:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34D14:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_34D44
loc_34D1E:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34D44:
    MOV R0, R6
    BL sub_19494
loc_34D4A:
    LDR R6, [R5,#0x10]
    CMP R6, #0
    BEQ loc_34E16
loc_34D50:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_34D80
loc_34D5A:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34D80:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_34DB0
loc_34D8A:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34DB0:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_34DE0
loc_34DBA:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34DE0:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_34E10
loc_34DEA:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34E10:
    MOV R0, R6
    BL sub_19494
loc_34E16:
    MOV R0, R5
    BL sub_19494
loc_34E1C:
    LDR R5, [R4,#8]
    CMP R5, #0
    BEQ.W loc_3515A
loc_34E24:
    LDR R6, [R5,#4]
    CMP R6, #0
    BEQ loc_34EF0
loc_34E2A:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_34E5A
loc_34E34:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34E5A:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_34E8A
loc_34E64:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34E8A:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_34EBA
loc_34E94:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34EBA:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_34EEA
loc_34EC4:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34EEA:
    MOV R0, R6
    BL sub_19494
loc_34EF0:
    LDR R6, [R5,#8]
    CMP R6, #0
    BEQ loc_34FBC
loc_34EF6:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_34F26
loc_34F00:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34F26:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_34F56
loc_34F30:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34F56:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_34F86
loc_34F60:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34F86:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_34FB6
loc_34F90:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34FB6:
    MOV R0, R6
    BL sub_19494
loc_34FBC:
    LDR R6, [R5,#0xC]
    CMP R6, #0
    BEQ loc_35088
loc_34FC2:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_34FF2
loc_34FCC:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34FF2:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_35022
loc_34FFC:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35022:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_35052
loc_3502C:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35052:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_35082
loc_3505C:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35082:
    MOV R0, R6
    BL sub_19494
loc_35088:
    LDR R6, [R5,#0x10]
    CMP R6, #0
    BEQ loc_35154
loc_3508E:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_350BE
loc_35098:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_350BE:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_350EE
loc_350C8:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_350EE:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_3511E
loc_350F8:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3511E:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_3514E
loc_35128:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3514E:
    MOV R0, R6
    BL sub_19494
loc_35154:
    MOV R0, R5
    BL sub_19494
loc_3515A:
    LDR R5, [R4,#0xC]
    CMP R5, #0
    BEQ.W loc_35498
loc_35162:
    LDR R6, [R5,#4]
    CMP R6, #0
    BEQ loc_3522E
loc_35168:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_35198
loc_35172:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35198:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_351C8
loc_351A2:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_351C8:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_351F8
loc_351D2:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_351F8:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_35228
loc_35202:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35228:
    MOV R0, R6
    BL sub_19494
loc_3522E:
    LDR R6, [R5,#8]
    CMP R6, #0
    BEQ loc_352FA
loc_35234:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_35264
loc_3523E:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35264:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_35294
loc_3526E:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35294:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_352C4
loc_3529E:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_352C4:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_352F4
loc_352CE:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_352F4:
    MOV R0, R6
    BL sub_19494
loc_352FA:
    LDR R6, [R5,#0xC]
    CMP R6, #0
    BEQ loc_353C6
loc_35300:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_35330
loc_3530A:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35330:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_35360
loc_3533A:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35360:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_35390
loc_3536A:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35390:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_353C0
loc_3539A:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_353C0:
    MOV R0, R6
    BL sub_19494
loc_353C6:
    LDR R6, [R5,#0x10]
    CMP R6, #0
    BEQ loc_35492
loc_353CC:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_353FC
loc_353D6:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_353FC:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_3542C
loc_35406:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3542C:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_3545C
loc_35436:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3545C:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_3548C
loc_35466:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3548C:
    MOV R0, R6
    BL sub_19494
loc_35492:
    MOV R0, R5
    BL sub_19494
loc_35498:
    LDR R5, [R4,#0x10]
    CMP R5, #0
    BEQ.W loc_357D6
loc_354A0:
    LDR R6, [R5,#4]
    CMP R6, #0
    BEQ loc_3556C
loc_354A6:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_354D6
loc_354B0:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_354D6:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_35506
loc_354E0:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35506:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_35536
loc_35510:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35536:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_35566
loc_35540:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35566:
    MOV R0, R6
    BL sub_19494
loc_3556C:
    LDR R6, [R5,#8]
    CMP R6, #0
    BEQ loc_35638
loc_35572:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_355A2
loc_3557C:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_355A2:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_355D2
loc_355AC:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_355D2:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_35602
loc_355DC:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35602:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_35632
loc_3560C:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_35632:
    MOV R0, R6
    BL sub_19494
loc_35638:
    LDR R6, [R5,#0xC]
    CMP R6, #0
    BEQ loc_35704
loc_3563E:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_3566E
loc_35648:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3566E:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_3569E
loc_35678:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3569E:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_356CE
loc_356A8:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_356CE:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_356FE
loc_356D8:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_356FE:
    MOV R0, R6
    BL sub_19494
loc_35704:
    LDR R6, [R5,#0x10]
    CMP R6, #0
    BEQ loc_357D0
loc_3570A:
    LDR.W R8, [R6,#4]
    CMP.W R8, #0
    BEQ loc_3573A
loc_35714:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3573A:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_3576A
loc_35744:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3576A:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_3579A
loc_35774:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_3579A:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_357CA
loc_357A4:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_357CA:
    MOV R0, R6
    BL sub_19494
loc_357D0:
    MOV R0, R5
    BL sub_19494
loc_357D6:
    MOV R0, R4
    BL sub_19494
loc_357DC:
    MOV R0, R7
    POP.W {R4-R8,LR}
    B.W sub_19494
```
Output:    CMP.W R8, #0
    BEQ loc_34CB4
loc_34C8E:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34CB4:
    LDR.W R8, [R6,#8]
    CMP.W R8, #0
    BEQ loc_34CE4
loc_34CC8:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34CE4:
    LDR.W R8, [R6,#0xC]
    CMP.W R8, #0
    BEQ loc_34D14
loc_34CF8:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34D14:
    LDR.W R8, [R6,#0x10]
    CMP.W R8, #0
    BEQ loc_34D4A
loc_34D28:
    LDR.W R0, [R8,#4]
    BL sub_346A8
    LDR.W R0, [R8,#8]
    BL sub_346A8
    LDR.W R0, [R8,#0xC]
    BL sub_346A8
    LDR.W R0, [R8,#0x10]
    BL sub_346A8
    MOV R0, R8
    BL sub_19494
loc_34D4A:
    MOV R0, R5
    BL sub_19494
loc_357DC:
    MOV R0, R7
    BL sub_19494
    POP.W {R4-R8,PC}
```
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
<|im_start|>
s
<|im_start|>
<|im_start|>
s
1
<|im_end|>
############
```assembly
loc_568FC:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_116D4:
    PUSH.W {R4-R11,LR}
    MOVW R3, #0x6190
    SUB SP, SP, #0x114
    MOVT.W R3, #5
    MOVS R4, #0
    MOV R6, R0
    STR R3, [SP,#0x138+var_FC]
    MOV R7, R1
    LDR R3, [R3]
    STR R4, [SP,#0x138+var_BC]
    STR R4, [SP,#0x138+var_B8]
    STR R3, [SP,#0x138+var_2C]
    BL sub_364F8
    MOVW R3, #0x2CE9
    MOVW R2, #0x2DF1
    MOVT.W R3, #1
    MOVT.W R2, #1
    CMP R0, R4
    IT 
    MOVEQ R2, R3
    CMP R6, #1
    STR R2, [SP,#0x138+var_108]
    BLE.W loc_12006
loc_11714:
    MOV R9, #0x56198
    MOV R11, R4
    MOV R10, R4
    STR R3, [SP,#0x138+var_F8]
    MOV.W R2, #0xFFFFFFFF
    MOVW R3, #0x9214
    STR R4, [SP,#0x138+var_F4]
    MOVT.W R3, #3
    STR R4, [SP,#0x138+s]
    STR R3, [SP,#0x138+ptr]
    MOVW R3, #0x91F4
    STR R4, [SP,#0x138+size]
    MOVT.W R3, #3
    STR R4, [SP,#0x138+var_118]
    STR R4, [SP,#0x138+var_104]
    STR R4, [SP,#0x138+var_10C]
    STR R4, [SP,#0x138+var_120]
    STR R4, [SP,#0x138+var_114]
    STR R4, [SP,#0x138+var_11C]
    STR R4, [SP,#0x138+var_130]
    STR R2, [SP,#0x138+var_128]
    STR R3, [SP,#0x138+var_12C]
loc_11750:
    SUBS R6, #1
    BEQ loc_1177E
loc_11754:
    LDR R3, [R7,#4]
    ADDS R5, R7, #4
    LDRB R2, [R3]
    CMP R2, #0x2D
    BEQ loc_1180A
loc_1175E:
    LDR R2, [SP,#0x138+var_130]
    CMP R2, #0
    BEQ.W loc_11BC6
loc_11766:
    LDR.W R3, [R9]
    MOVS R2, #0x31
    MOVS R1, #1
    LDR R0, [SP,#0x138+ptr]
    BLX fwrite
    SUBS R6, #1
    MOV R7, R5
    MOV.W R10, #1
    BNE loc_11754
loc_1177E:
    LDR R3, [SP,#0x138+var_128]
    ADDS R3, #1
    LDR R3, [SP,#0x138+var_11C]
    BEQ.W loc_11E60
loc_11788:
    CMP R3, #4
    BEQ.W loc_11F74
loc_1178E:
    LDR R3, [SP,#0x138+var_11C]
    SUB.W R6, R3, #5
    LDR R3, [SP,#0x138+var_128]
    CLZ.W R6, R6
    LSRS R6, R6, #5
    CMP.W R3, #0x100
    ITE 
    MOVEQ R3, #0
    ANDNE.W R3, R6, #1
    CMP R3, #0
    BNE.W loc_11FAE
loc_117AE:
    LDR R4, [SP,#0x138+var_11C]
    SUBS R3, R4, #1
    CMP R3, #2
    BLS.W loc_11C70
loc_117B8:
    CMP.W R10, #0
    BNE.W loc_11CA6
loc_117C0:
    LDR R3, [SP,#0x138+var_118]
    CMP R3, #0
    BNE.W loc_11DBC
loc_117C8:
    LDR R3, [SP,#0x138+var_130]
    CBNZ R3, loc_117D4
loc_117CC:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #0
    BEQ.W loc_11EFA
loc_117D4:
    LDR R3, [SP,#0x138+var_11C]
    LDR R2, [SP,#0x138+var_130]
    ADDS R3, #0
    IT 
    MOVNE R3, #1
    STR R3, [SP,#0x138+ptr]
    CMP R2, #0
    BEQ.W loc_11DC0
loc_117E6:
    CMP R3, #0
    BEQ.W loc_11DC0
loc_117EC:
    MOV R3, #0x56198
    MOVW R0, #0x930C
    MOVS R2, #0x2E
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_1180A:
    LDRB.W R8, [R3,#1]
    ADDS R4, R3, #1
    MOV R7, R5
    CMP.W R8, #0
    BEQ def_11932
loc_11818:
    MOV R2, R8
loc_1181A:
    SUB.W R1, R2, #0x2D
    CMP R1, #0x47
    BHI.W def_11824
loc_11824:
    TBH.W [PC,R1,LSL#1]
loc_118B8:
    SUBS R2, #0x4C
    CMP R2, #0x25
    BHI.W def_118C0
loc_118C0:
    TBH.W [PC,R2,LSL#1]
loc_11910:
    MOV R8, R2
    LDRB R2, [R3,#2]
    ADDS R4, R3, #2
    CBNZ R2, loc_11924
loc_11918:
    CMP R6, #1
    BEQ.W loc_11C06
loc_1191E:
    LDR R4, [R5,#4]
    SUBS R6, #1
    ADDS R7, R5, #4
loc_11924:
    SUB.W R8, R8, #0x43
    CMP.W R8, #0x31
    BHI.W def_11932
loc_11930:
    ADR R3, jpt_11932
    LDR.W PC, [R3,R8,LSL#2]
loc_11A00:
    LDRB R2, [R3,#2]
    ADDS R3, #2
    CMP R2, #0x3D
    IT 
    CMPNE R2, #0
    BEQ loc_11A18
loc_11A0C:
    LDRB.W R2, [R3,#1]!
    CMP R2, #0
    IT 
    CMPNE R2, #0x3D
    BNE loc_11A0C
loc_11A18:
    CMP R2, #0x3D
    BEQ.W loc_11BCC
loc_11A1E:
    MOVW R1, #0x9044
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11C24
loc_11A32:
    MOVW R1, #0x9078
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11E56
loc_11A46:
    MOVW R1, #0x9084
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11FFA
loc_11A5A:
    MOV.W R8, #0
loc_11A5E:
    MOVW R1, #0x908C
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11C2E
loc_11A72:
    CMP.W R8, #0
    BNE loc_11A86
loc_11A78:
    CMP R6, #1
    ITTT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    ADDGT R7, R5, #4
    LDRGT.W R8, [R5,#4]
loc_11A86:
    CMP.W R8, #0
    BEQ.W loc_11F5A
loc_11A8E:
    MOV R0, R8
    BL sub_12CEC
    STR R0, [SP,#0x138+s]
    CMP R0, #0
    IT 
    MOVEQ.W R10, #1
    B def_11932
loc_11AA0:
    MOV R3, R2
    MOVS R1, #1
    LDR R2, [SP,#0x138+var_12C]
    MOV.W R10, #1
    LDR.W R0, [R9]
    BLX __fprintf_chk
    MOV R3, R4
loc_11AB4:
    CMP R4, #0
    BEQ.W def_11932
loc_11ABA:
    LDRB R2, [R3,#1]
    ADDS R4, #1
    CMP R2, #0
    BNE.W loc_1181A
loc_11AC4:
    B def_11932
loc_11AC6:
    STR R4, [SP,#0x138+var_10C]
    B def_11932
loc_11ACA:
    MOVW R1, #0x9170
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11C1E
loc_11ADE:
    MOVW R1, #0x9178
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11CBA
loc_11AF2:
    MOVS R3, #2
    STR R3, [SP,#0x138+var_120]
    B def_11932
loc_11AF8:
    STR R4, [SP,#0x138+var_114]
    B def_11932
loc_11AFC:
    MOV R0, R4
    MOVS R2, #0xA
    MOVS R1, #0
    BLX strtol
    STR R0, [SP,#0x138+var_128]
    B def_11932
loc_11B0A:
    LDRB R5, [R4]
    CMP R5, #0x72
    BNE loc_11B68
loc_11B10:
    LDRB R3, [R4,#1]
    CMP R3, #0x73
    BNE loc_11B68
loc_11B16:
    LDRB R3, [R4,#2]
    CMP R3, #0x61
    BNE loc_11B68
loc_11B1C:
    LDRB R3, [R4,#3]
    CBNZ R3, loc_11B68
loc_11B20:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    STR R3, [SP,#0x138+var_11C]
    B def_11932
loc_11B28:
    MOVS R2, #1
    MOV R3, R4
    STR R2, [SP,#0x138+var_104]
    B loc_11AB4
loc_11B30:
    LDR R2, [SP,#0x138+var_F8]
    MOV R3, R4
    STR R2, [SP,#0x138+var_108]
    B loc_11AB4
loc_11B38:
    MOVS R2, #1
    MOV R3, R4
    STR R2, [SP,#0x138+var_120]
    B loc_11AB4
loc_11B40:
    MOVS R2, #3
    MOV R3, R4
    STR R2, [SP,#0x138+var_120]
    B loc_11AB4
loc_11B48:
    BL sub_12FD4
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    MOV R3, R4
    B loc_11AB4
loc_11B54:
    MOVS R2, #2
    MOV R3, R4
    STR R2, [SP,#0x138+var_120]
    B loc_11AB4
loc_11B5C:
    BL sub_12F50
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
loc_11B64:
    MOV R3, R4
    B loc_11AB4
loc_11B68:
    MOVW R1, #0x9134
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ loc_11B20
loc_11B7A:
    MOVW R1, #0x913C
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11EE6
loc_11B8E:
    CMP R5, #0x64
    BEQ.W loc_121B4
loc_11B94:
    MOVW R1, #0x9144
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_12212
loc_11BA8:
    MOVW R1, #0xFE54
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_12518
loc_11BBC:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #5
    STR R3, [SP,#0x138+var_11C]
    B def_11932
loc_11BC6:
    STR R3, [SP,#0x138+var_130]
    MOV R7, R5
    B def_11932
loc_11BCC:
    MOVS R2, #0
    MOVW R1, #0x9044
    STRB R2, [R3]
    MOVT.W R1, #3
    MOV R0, R4
    ADD.W R8, R3, #1
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11FCA
loc_11BE8:
    CMP.W R8, #0
    BEQ loc_11C24
loc_11BEE:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x904C
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B def_11932
loc_11C06:
    MOVW R2, #0x9108
    MOV R3, R8
    MOVT.W R2, #3
    MOV R1, R6
    LDR.W R0, [R9]
    MOV R10, R6
    BLX __fprintf_chk
    B loc_11924
loc_11C1E:
    MOVS R3, #1
    STR R3, [SP,#0x138+var_120]
    B def_11932
loc_11C24:
    BL sub_12FD4
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    B def_11932
loc_11C2E:
    MOVW R1, #0x90C8
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11EB6
loc_11C42:
    CMP.W R8, #0
    BNE loc_11C56
loc_11C48:
    CMP R6, #1
    ITTT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    ADDGT R7, R5, #4
    LDRGT.W R8, [R5,#4]
loc_11C56:
    CMP.W R8, #0
    BEQ.W loc_11F5A
loc_11C5E:
    MOV R0, R8
    BL sub_12CEC
    STR R0, [SP,#0x138+var_F4]
    CMP R0, #0
    IT 
    MOVEQ.W R10, #1
    B def_11932
loc_11C70:
    LDR R3, [SP,#0x138+var_128]
    CMP R3, #0xFF
    BGT.W loc_11E74
loc_11C78:
    MOV R1, #0x56198
    MOVW R2, #0x903C
    MOVW R3, #0x9040
    MOVT.W R2, #3
    MOVT.W R3, #3
    LDR R0, [R1]
    CMP R4, #3
    IT 
    MOVEQ R3, R2
    MOVS R1, #1
    MOV R2, #0x39284
    BLX __fprintf_chk
loc_11CA6:
    MOVS R0, #1
loc_11CA8:
    LDR R3, [SP,#0x138+var_FC]
    LDR R2, [SP,#0x138+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_1280A
loc_11CB4:
    ADD SP, SP, #0x114
    POP.W {R4-R11,PC}
loc_11CBA:
    MOVW R1, #0x9188
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11EEE
loc_11CCE:
    MOVW R1, #0x9190
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_12038
loc_11CE2:
    MOVW R1, #0x919C
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_121DC
loc_11CF6:
    MOVW R1, #0x91AC
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_12482
loc_11D0A:
    MOVW R1, #0x91C0
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_1253C
loc_11D1E:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #6
    STR R3, [SP,#0x138+var_120]
    B def_11932
loc_11D28:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_127F2
loc_11D30:
    CMP R4, #0
    BEQ.W loc_12A94
loc_11D36:
    LDM.W R4, {R0,R1}
    BL sub_2CB2C
loc_11D3E:
    MOV R6, R0
loc_11D40:
    LDR R3, [SP,#0x138+var_114]
    CMP R3, #0
    BEQ.W loc_12A76
loc_11D48:
    MOV R0, R8
    MOVS R2, #0
    MOV R1, #0x39760
    BL sub_3694C
    MOV R3, R6
    MOVW R2, #0x93A8
    MOVS R1, #1
    MOVT.W R2, #3
    MOV R8, R0
    BLX __fprintf_chk
    MOV R0, R8
    BLX fclose
loc_11D70:
    MOV R0, R6
    BL sub_19494
loc_11D76:
    LDR R6, [SP,#0x138+s]
    CBZ R6, loc_11D8E
loc_11D7A:
    MOV R0, R6
    BLX strlen
    MOV R1, R0
    MOV R0, R6
    BL sub_194E4
    MOV R0, R6
    BL sub_19494
loc_11D8E:
    CBZ R7, loc_11DA4
loc_11D90:
    MOV R0, R7
    BLX strlen
    MOV R1, R0
    MOV R0, R7
    BL sub_194E4
    MOV R0, R7
    BL sub_19494
loc_11DA4:
    CBZ R5, loc_11DAC
loc_11DA6:
    MOV R0, R5
    BL sub_2ED10
loc_11DAC:
    CBZ R4, loc_11DBC
loc_11DAE:
    LDR R3, [R4]
    LDR R0, [R4,#4]
    LDR R3, [R3,#4]
    BLX R3
    MOV R0, R4
    BL sub_19494
loc_11DBC:
    MOVS R0, #0
    B loc_11CA8
loc_11DC0:
    LDR R3, [SP,#0x138+var_11C]
    CBZ R3, loc_11DEC
loc_11DC4:
    LDR R2, [SP,#0x138+var_120]
    SUBS R3, R2, #4
    CMP R3, #2
    BLS loc_11DEC
loc_11DCC:
    CBZ R2, loc_11DEC
loc_11DCE:
    MOV R3, #0x56198
    MOVW R0, #0x933C
    MOVS R2, #0x45
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_11DEC:
    LDR R3, [SP,#0x138+var_130]
    CMP R3, #0
    BEQ.W loc_11F1C
loc_11DF4:
    MOV R0, R3
    MOV R8, R3
    BL sub_36650
    MOV R7, R0
    BL sub_2CB68
    CMP R0, #0xA
    MOV R5, R0
    STR R0, [SP,#0x138+var_12C]
    BHI.W loc_128C2
loc_11E0C:
    MOVS R4, #1
    LSL.W R3, R4, R0
    TST.W R3, #0x6E8
    BNE.W loc_12040
loc_11E1A:
    TST.W R3, #0x104
    BNE.W loc_121E8
loc_11E22:
    LSLS R5, R3, #0x1E
    BEQ.W loc_128C2
loc_11E28:
    MOV R3, #0x56198
    LDR R5, [R3]
    BL sub_2CB90
    MOV R3, R8
    MOVW R2, #0x9384
    MOV R1, R4
    MOVT.W R2, #3
    STR R0, [SP,#0x138+var_138]
    MOV R0, R5
    BLX __fprintf_chk
    MOV R0, R4
    B loc_11CA8
loc_11E4E:
    CMP.W R8, #0
    BNE.W loc_11BEE
loc_11E56:
    BL sub_12F50
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    B def_11932
loc_11E60:
    CMP R3, #4
    BEQ loc_11EF2
loc_11E64:
    CMP R3, #5
    BNE.W loc_12028
loc_11E6A:
    MOV.W R3, #0x100
    MOVS R6, #1
    STR R3, [SP,#0x138+var_128]
    B loc_117AE
loc_11E74:
    LDR R3, [SP,#0x138+var_128]
    CMP.W R3, #0x800
    BGE.W loc_117B8
loc_11E7E:
    LDR R4, [SP,#0x138+var_11C]
    MOV R1, #0x56198
    MOVW R2, #0x9040
    MOVW R3, #0x903C
    MOVT.W R2, #3
    MOVT.W R3, #3
    LDR R0, [R1]
    CMP R4, #3
    IT 
    MOVNE R3, R2
    MOV.W R1, #0x800
    MOVW R2, #0x92C0
    STR R1, [SP,#0x138+var_138]
    MOVT.W R2, #3
    MOVS R1, #1
    BLX __fprintf_chk
    B loc_117B8
loc_11EB6:
    MOVW R1, #0x90D8
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE loc_11F40
loc_11EC8:
    CMP.W R8, #0
    BNE loc_11EDC
loc_11ECE:
    CMP R6, #1
    ITTT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    ADDGT R7, R5, #4
    LDRGT.W R8, [R5,#4]
loc_11EDC:
    CMP.W R8, #0
    BEQ loc_11F5A
loc_11EE2:
    MOV R11, R8
    B def_11932
loc_11EE6:
    MOVS R3, #1
    STR R3, [SP,#0x138+size]
    STR R3, [SP,#0x138+var_11C]
    B def_11932
loc_11EEE:
    STR R0, [SP,#0x138+var_120]
    B def_11932
loc_11EF2:
    MOV.W R3, #0x180
    STR R3, [SP,#0x138+var_128]
    B loc_1178E
loc_11EFA:
    MOV R3, #0x56198
    MOVS R2, #0xA0
    MOVS R1, #1
    LDR R3, [R3]
    MOV R0, #aUsagePuttygenK
    BLX fwrite
    BL sub_12E5C
    MOVS R0, #1
    B loc_11CA8
loc_11F1C:
    LDR R2, [SP,#0x138+var_120]
    CLZ.W R4, R2
    SUBS R2, #4
    NEGS R3, R2
    ADCS R3, R2
    LDR R2, [SP,#0x138+var_130]
    LSRS R4, R4, #5
    MOV R5, R2
    MOV R7, R2
    STR R2, [SP,#0x138+var_12C]
loc_11F32:
    LDR R2, [SP,#0x138+var_114]
    CMP R2, #0
    BEQ.W loc_1280E
loc_11F3A:
    MOV.W R9, #0
    B loc_12080
loc_11F40:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x90E8
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_11F5A:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x909C
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_11F74:
    LDR R3, [SP,#0x138+var_128]
    BIC.W R3, R3, #0x80
    CMP.W R3, #0x100
    BEQ.W loc_117AE
loc_11F82:
    LDR R2, [SP,#0x138+var_128]
    MOVW R3, #0x209
    CMP R2, R3
    BEQ.W loc_1178E
loc_11F8E:
    MOV R3, #0x56198
    MOVS R1, #1
    MOVW R0, #0x9248
    MOVS R2, #0x39
    LDR R3, [R3]
    MOVT.W R0, #3
    MOV R10, R1
    BLX fwrite
    B.W loc_1178E
loc_11FAE:
    MOV R3, #0x56198
    MOVW R0, #0x97C0
    MOVS R2, #0x2F
    LDR R3, [R3]
    MOVS R1, #1
    MOVT.W R0, #3
    BLX fwrite
    B loc_11CA6
loc_11FCA:
    MOVW R1, #0x9078
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BEQ.W loc_11E4E
loc_11FDE:
    MOVW R1, #0x9084
    MOV R0, R4
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE.W loc_11A5E
loc_11FF2:
    CMP.W R8, #0
    BNE.W loc_11BEE
loc_11FFA:
    BL sub_36758
    MOVS R3, #1
    STR R3, [SP,#0x138+var_118]
    B.W def_11932
loc_12006:
    MOV R3, #0x56198
    MOVS R2, #0xA0
    MOVS R1, #1
    LDR R3, [R3]
    MOV R0, #aUsagePuttygenK
    BLX fwrite
    BL sub_12E5C
    MOV R0, R4
    B loc_11CA8
loc_12028:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #4
    MOV.W R3, #0x800
    STR R3, [SP,#0x138+var_128]
    BNE.W loc_1178E
loc_12036:
    B loc_11F8E
loc_12038:
    MOVS R3, #3
    STR R3, [SP,#0x138+var_120]
    B.W def_11932
loc_12040:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_125A4
loc_12048:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
loc_1204C:
    LDR R3, [SP,#0x138+var_120]
    CLZ.W R4, R3
    SUBS R3, R5, #2
    LSRS R4, R4, #5
    CMP R3, #1
    ITE 
    MOVHI R3, #0
    ANDLS.W R3, R4, #1
    CMP R3, #0
    BEQ.W loc_124C0
loc_12066:
    MOV R4, R3
loc_12068:
    LDR R3, [SP,#0x138+var_114]
    MOV.W R9, #0
    CMP R3, #0
    BEQ.W loc_12560
loc_12074:
    LDR R3, [SP,#0x138+var_104]
    CBNZ R3, loc_12080
loc_12078:
    LDR R3, [SP,#0x138+var_10C]
    CMP R3, #0
    BEQ.W loc_1241C
loc_12080:
    LDR R3, [SP,#0x138+var_120]
    CMP R3, #4
    BEQ loc_120A2
loc_12086:
    CBNZ R4, loc_120A2
loc_12088:
    SUBS R3, #5
    CMP R3, #1
    BLS loc_120A2
loc_1208E:
    LDR R3, [SP,#0x138+var_12C]
    SUBS R3, #5
    CMP R3, #1
    BLS loc_120A2
loc_12096:
    SUBS R1, R5, #7
    NEGS R4, R1
    ADCS R4, R1
    CBNZ R4, loc_120A2
loc_1209E:
    MOV R10, R4
    B loc_120B0
loc_120A2:
    LDR R3, [SP,#0x138+var_12C]
    SUBS R3, #8
    CMP R3, #2
    BLS.W loc_124EE
loc_120AC:
    MOV.W R10, #1
loc_120B0:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #0
    BNE.W loc_12348
loc_120B8:
    LDR R3, [SP,#0x138+var_11C]
    STR R3, [SP,#0x138+var_B4]
    LDR R3, [SP,#0x138+var_130]
    CMP R3, #0
    BEQ.W loc_1293A
loc_120C4:
    CMP R5, #2
    ADD.W R8, SP, #0x138+var_BC
    BEQ.W loc_12532
loc_120CE:
    CMP R5, #3
    BEQ.W loc_1250E
loc_120D4:
    MOV R1, R5
    MOV R0, R7
    MOV R2, R8
    BL sub_17190
loc_120DE:
    CMP R0, #0
    BEQ.W loc_1221E
loc_120E4:
    CMP.W R10, #0
    BEQ.W loc_1221E
loc_120EC:
    LDR R3, [SP,#0x138+s]
    CMP R3, #0
    BEQ.W loc_129A6
loc_120F4:
    LDR R3, [SP,#0x138+var_12C]
    MOVS R0, #1
    LSL.W R3, R0, R3
    TST.W R3, #0x608
    BNE.W loc_12308
loc_12104:
    ANDS.W R6, R3, #0x104
    BNE.W loc_126CE
loc_1210C:
    TST.W R3, #0xE0
    BEQ.W loc_12A4A
loc_12114:
    MOV R1, R5
    MOV R0, R7
    ADD R3, SP, #0x138+var_B4
    LDR R2, [SP,#0x138+s]
    BL sub_17B24
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_1257C
loc_12128:
    MOV R3, #0x562C0
    CMP R0, R3
    BEQ.W loc_12756
loc_12136:
    MOV R5, R6
loc_12138:
    LDR R3, [SP,#0x138+var_10C]
    CBZ R3, loc_12158
loc_1213C:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_124D8
loc_12144:
    CMP R4, #0
    BEQ.W loc_12AA4
loc_1214A:
    LDR R0, [R4,#8]
    BL sub_19494
    LDR R0, [SP,#0x138+var_10C]
    BL sub_18A88
    STR R0, [R4,#8]
loc_12158:
    LDR R3, [SP,#0x138+var_104]
    CMP R3, #0
    BNE.W loc_12442
loc_12160:
    LDR R3, [SP,#0x138+s]
    CMP R3, #0
    BEQ.W loc_12442
loc_12168:
    LDR R3, [SP,#0x138+var_F4]
    CMP R3, #0
    BEQ.W loc_1243A
loc_12170:
    LDR R7, [SP,#0x138+var_F4]
loc_12172:
    LDRB R3, [R7]
    CMP R3, #0
    BEQ loc_12224
loc_12178:
    CMP.W R9, #0
    BEQ.W loc_124A8
loc_12180:
    MOV R0, R9
    BL sub_36650
    MOV R8, R0
loc_12188:
    LDR R3, [SP,#0x138+var_120]
    CMP R3, #6
    BHI.W def_12192
loc_12190:
    ADR R2, jpt_12192
    LDR.W PC, [R2,R3,LSL#2]
loc_121B4:
    LDRB R3, [R4,#1]
    CMP R3, #0x73
    BNE.W loc_11B94
loc_121BC:
    LDRB R3, [R4,#2]
    CMP R3, #0x61
    BEQ loc_121C8
loc_121C2:
    CMP R3, #0x73
    BNE.W loc_11B94
loc_121C8:
    LDRB R3, [R4,#3]
    CMP R3, #0
    BNE.W loc_11B94
loc_121D0:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #3
    STR R3, [SP,#0x138+var_11C]
    B.W def_11932
loc_121DC:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #4
    STR R3, [SP,#0x138+var_120]
    B.W def_11932
loc_121E8:
    LDR R3, [SP,#0x138+size]
    CMP R3, #2
    IT 
    STRNE R4, [SP,#0x138+size]
    BNE.W loc_1204C
loc_121F4:
    MOV R3, #0x56198
    MOVW R0, #0x93AC
    MOVS R2, #0x3C
    LDR R3, [R3]
    MOVT.W R0, #3
    MOV R1, R4
    BLX fwrite
    MOV R0, R4
    B loc_11CA8
loc_12212:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #4
    STR R3, [SP,#0x138+var_11C]
    B.W def_11932
loc_1221E:
    MOVS R3, #0
    STR R3, [SP,#0x138+s]
    B loc_120F4
loc_12224:
    MOV R0, R7
    MOV R7, R3
    BL sub_19494
    B loc_12178
loc_1222E:
    LDR R3, [SP,#0x138+size]
    CMP R3, #2
    BNE.W loc_128A2
loc_12236:
    CMP R4, #0
    BEQ.W loc_12882
loc_1223C:
    BL sub_2D134
    LDR R3, [SP,#0x138+var_120]
    CMP R3, #5
    BEQ.W loc_1287E
loc_12248:
    CMP R3, #6
    ITE 
    MOVEQ R1, #7
    MOVNE R1, #4
loc_12250:
    MOV R0, R8
    MOV R3, R7
    MOV R2, R4
    BL sub_18338
    CMP R0, #0
    BEQ.W loc_12860
loc_12260:
    CMP.W R9, #0
    BEQ.W def_12192
loc_12268:
    LDR R1, [SP,#0x138+var_114]
    MOV R0, R9
    BL sub_12DBC
    CMP R0, #0
    BNE.W def_12192
loc_12276:
    B loc_11CA6
loc_12278:
    LDR R3, [SP,#0x138+var_114]
    CMP R3, #0
    BEQ.W loc_12978
loc_12280:
    MOV R0, R8
    MOVW R1, #0x9760
    MOVS R2, #0
    MOVT.W R1, #3
    BL sub_3694C
    MOV R8, R0
loc_12292:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_1296E
loc_1229A:
    CMP R6, #0
    BEQ.W loc_1295E
loc_122A0:
    CMP R4, #0
    BEQ.W loc_1295A
loc_122A6:
    LDR R1, [R4,#8]
loc_122A8:
    LDR R2, [SP,#0x138+var_120]
    LDR R3, [SP,#0x138+tp]
    CMP R2, #1
    MOV R2, R6
    ITE 
    MOVNE R0, #0xA
    MOVEQ R0, #9
    STR R0, [SP,#0x138+var_138]
    MOV R0, R8
    BL sub_2C82C
loc_122BE:
    LDR R3, [SP,#0x138+var_114]
    CMP R3, #0
    BEQ.W def_12192
loc_122C6:
    MOV R0, R8
    BLX fclose
    B def_12192
loc_122CE:
    LDR R3, [SP,#0x138+size]
    CMP R3, #1
    BEQ.W loc_12902
loc_122D6:
    CMP R4, #0
    BEQ.W loc_128E2
loc_122DC:
    MOV R0, R8
    MOV R2, R7
    MOV R1, R4
    BL sub_2C210
loc_122E6:
    CMP R0, #0
    BNE loc_12260
loc_122EA:
    MOV R3, #0x56198
    MOVW R0, #0x9734
    MOVS R2, #0x2B
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_12308:
    CMP.W R10, #0
    BNE.W loc_1245E
loc_12310:
    ADD R1, SP, #0x138+var_B4
    MOV R3, R8
    STR R1, [SP,#0x138+var_138]
    MOV R0, R7
    ADD R2, SP, #0x138+tp
    ADD R1, SP, #0x138+var_B8
    BL sub_2BA8C
    MOV R6, R0
    LDR R0, [SP,#0x138+var_B8]
    CMP R6, #0
    BEQ.W loc_129FC
loc_1232A:
    BL sub_2AD9C
    CMP R0, #0
    BEQ.W loc_12556
loc_12334:
    LDR R3, [R0,#0x24]
    MOV R1, R6
    LDR R2, [SP,#0x138+tp]
    MOV R4, R10
    BLX R3
    LDR R0, [SP,#0x138+var_B8]
    BL sub_19494
loc_12344:
    MOVS R5, #0
    B loc_12138
loc_12348:
    ADD R4, SP, #0x138+var_F0
    ADD R0, SP, #0x138+var_F0
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x138+var_B0]
    STR R3, [SP,#0x138+var_AC]
    BL sub_33BBC
    LDM R4!, {R0-R3}
    ADD R5, SP, #0x138+tp
    STM R5!, {R0-R3}
    LDM R4!, {R0-R3}
    STM R5!, {R0-R3}
    LDM.W R4, {R0-R2}
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #3
    STM.W R5, {R0-R2}
    BEQ.W loc_1265A
loc_12372:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #4
    BEQ.W loc_12762
loc_1237A:
    CMP R6, #0
    BNE.W loc_125E6
loc_12380:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x959C
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_125C6
loc_123B4:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x24
    MOVS R0, #1
    MOVS R4, #0
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_2F078
loc_123E0:
    LDR R3, [SP,#0x138+var_11C]
    STR R4, [R5,#0x20]
    CMP R3, #1
    BEQ loc_1248E
loc_123E8:
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    MOV R3, #0x43AC8
    MOV R4, R0
    STR R5, [R0,#4]
    STR R3, [R0]
loc_123FE:
    MOV R0, R7
    MOV.W R3, #0xFFFFFFFF
    MOV R2, #0x7FFFFFFF
    MOVS R1, #6
    LDR R5, [SP,#0x138+var_108]
    BLX R5
    MOV R0, R6
    BL sub_18A88
    MOVS R5, #0
    STR R0, [R4,#8]
loc_12418:
    MOVS R6, #0
    B loc_12138
loc_1241C:
    MOV R3, #0x56198
    MOVW R0, #0x9478
    MOVS R2, #0x36
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_1243A:
    LDR R0, [SP,#0x138+s]
    BL sub_18A88
    STR R0, [SP,#0x138+var_F4]
loc_12442:
    LDR R3, [SP,#0x138+var_F4]
    CMP R3, #0
    BNE.W loc_12170
loc_1244A:
    LDR R3, [SP,#0x138+var_104]
    CMP R3, #0
    BNE.W loc_12B06
loc_12452:
    LDR R3, [SP,#0x138+ptr]
    CMP R3, #0
    BNE.W loc_12B06
loc_1245A:
    MOVS R7, #0
    B loc_12178
loc_1245E:
    ADD R2, SP, #0x138+var_B4
    MOV R0, R7
    LDR R1, [SP,#0x138+s]
    BL sub_2AE54
    MOV R2, #0x562C0
    CMP R0, R2
    MOV R4, R0
    BEQ.W loc_12748
loc_12478:
    CMP R0, #0
    BEQ.W loc_12748
loc_1247E:
    MOVS R6, #0
    B loc_12344
loc_12482:
    MOVS R3, #2
    STR R3, [SP,#0x138+size]
    MOVS R3, #5
    STR R3, [SP,#0x138+var_120]
    B.W def_11932
loc_1248E:
    MOV R0, R7
    MOV.W R3, #0xFFFFFFFF
    MOV R2, #0x7FFFFFFF
    MOVS R1, #6
    LDR R7, [SP,#0x138+var_108]
    BLX R7
    MOV R0, R6
    BL sub_18A88
    STR R0, [R5,#0x20]
    B loc_12418
loc_124A8:
    LDR R3, [SP,#0x138+var_114]
    MOV R0, #0x4555C
    CMP R3, #0
    IT 
    MOVNE R0, R3
    BL sub_36650
    MOV R8, R0
    B loc_12188
loc_124C0:
    LDR R3, [SP,#0x138+var_120]
    SUBS R0, R3, #4
    NEGS R3, R0
    ADCS R3, R0
    CMP R5, #5
    BNE.W loc_12AC4
loc_124CE:
    CMP R3, #0
    BEQ.W loc_12AC4
loc_124D4:
    MOVS R5, #5
    B loc_12068
loc_124D8:
    CMP R5, #0
    BEQ.W loc_127D2
loc_124DE:
    LDR R0, [R5,#0x20]
    BL sub_19494
    LDR R0, [SP,#0x138+var_10C]
    BL sub_18A88
    STR R0, [R5,#0x20]
    B loc_12158
loc_124EE:
    MOV R3, #0x56198
    MOVW R0, #0x94DC
    MOVS R2, #0x45
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_1250E:
    MOV R0, R7
    MOV R1, R8
    BL sub_2BE7C
    B loc_120DE
loc_12518:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x914C
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_12532:
    MOV R0, R7
    MOV R1, R8
    BL sub_2A674
    B loc_120DE
loc_1253C:
    MOVS R1, #1
    MOV R3, R4
    MOVW R2, #0x91D0
    LDR.W R0, [R9]
    MOVT.W R2, #3
    MOV R10, R1
    BLX __fprintf_chk
    B.W def_11932
loc_12556:
    LDR R0, [SP,#0x138+var_B8]
    MOV R4, R10
    BL sub_19494
    B loc_12344
loc_12560:
    LDR.W R8, [SP,#0x138+var_130]
    MOV R2, R3
    MOV R1, #0x39470
    MOV R0, R8
    BL sub_18AFC
    STR.W R8, [SP,#0x138+var_114]
    MOV R9, R0
    B loc_12074
loc_1257C:
    LDR R3, [SP,#0x138+var_B4]
    CMP R3, #0
    BEQ.W loc_12A08
loc_12584:
    MOV R2, #0x56198
    STR R3, [SP,#0x138+var_138]
    MOVS R1, #1
    LDR R3, [SP,#0x138+var_130]
    LDR R0, [R2]
    MOV R2, #0x3979C
    BLX __fprintf_chk
    B.W loc_11CA6
loc_125A4:
    LDR R4, [SP,#0x138+size]
    MOV R3, #0x56198
    MOVW R0, #0x93EC
    MOVS R2, #0x3C
    MOVT.W R0, #3
    LDR R3, [R3]
    MOV R1, R4
    BLX fwrite
    MOV R0, R4
    B.W loc_11CA8
loc_125C6:
    MOV R3, #0x56198
    MOVW R0, #0x9534
    MOVS R2, #0x3C
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_125E6:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x9588
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ loc_125C6
loc_12618:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_2870C
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    MOV R3, #0x3FBE8
    MOV R4, R0
    STR R5, [R0,#4]
    STR R3, [R0]
    B loc_123FE
loc_1265A:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x9524
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ loc_125C6
loc_1268C:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_24318
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    MOV R3, #0x3F520
    MOV R4, R0
    STR R5, [R0,#4]
    STR R3, [R0]
    B loc_123FE
loc_126CE:
    MOVS R1, #0x24
    BL sub_193B8
    MOV R5, R0
    CMP.W R10, #0
    BNE loc_12738
loc_126DC:
    MOV R3, R8
    ADD R1, SP, #0x138+var_B4
    ADD R2, SP, #0x138+tp
    STR R1, [SP,#0x138+var_138]
    MOV R0, R7
    ADD R1, SP, #0x138+var_B0
    BL sub_2A6E4
    LDR R6, [SP,#0x138+var_B0]
    LDR R1, [SP,#0x138+tp]
    ADD.W R2, R5, #0xC
    SUBS R1, #4
    MOV R4, R0
    ADDS R0, R6, #4
    BL sub_1F088
    CMP R0, #0
    BLT.W loc_12A6A
loc_12704:
    LDR R3, [SP,#0x138+tp]
    ADDS R1, R0, #4
    ADDS R0, R6, R1
    ADD.W R2, R5, #8
    SUBS R1, R3, R1
    BL sub_1F088
    CMP R0, #0
    BLT.W loc_12A6A
loc_1271A:
    LDR R0, [SP,#0x138+var_BC]
    BL sub_18A88
    MOVS R3, #0
    STR R3, [R5,#0x10]
    STR R3, [R5,#0x14]
    STR R3, [R5,#0x18]
    STR R3, [R5,#0x1C]
    STR R0, [R5,#0x20]
loc_1272C:
    CMP R4, #0
    BLE.W loc_1257C
loc_12732:
    MOVS R6, #0
    MOV R4, R6
    B loc_12138
loc_12738:
    MOV R0, R7
    ADD R3, SP, #0x138+var_B4
    LDR R2, [SP,#0x138+s]
    MOV R1, R5
    BL sub_2A5C8
    MOV R4, R0
    B loc_1272C
loc_12748:
    LDR R3, [SP,#0x138+var_B4]
    CMP R3, #0
    BNE.W loc_12584
loc_12750:
    CMP R4, R2
    BNE.W loc_12A08
loc_12756:
    MOV R3, #0x39640
    STR R3, [SP,#0x138+var_B4]
    B loc_12584
loc_12762:
    ADD R6, SP, #0x138+var_7C
    ADD R3, SP, #0x138+tp
    MOVS R1, #0x1E
    MOVW R2, #0x9574
    MOV R0, R6
    MOVT.W R2, #3
    BLX strftime
    BL sub_2D134
    LDR R3, [SP,#0x138+var_128]
    MOV R1, R11
    CMP R3, #0
    MOV R5, R3
    IT 
    ADDLT R5, R3, #7
    ASRS R5, R5, #3
    MOV R0, R5
    BL sub_36518
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_125C6
loc_12796:
    MOV R1, R5
    ADD R7, SP, #0x138+var_B0
    BL sub_2CFCC
    MOV R1, R5
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    MOVS R1, #0x1C
    MOVS R0, #1
    BL sub_193B8
    MOV R3, R7
    LDR R1, [SP,#0x138+var_128]
    LDR R2, [SP,#0x138+var_108]
    MOV R5, R0
    BL sub_286B4
    MOVS R1, #0xC
    MOVS R0, #1
    BL sub_193B8
    LDR R3, [R5]
    MOV R4, R0
    STM.W R0, {R3,R5}
    B loc_123FE
loc_127D2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9654
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x38A
    MOVT.W R0, #3
    BLX __assert_fail
loc_127F2:
    CBZ R5, loc_12820
loc_127F4:
    LDR R1, [SP,#0x138+size]
    MOVS R0, #0x80
    BL sub_193B8
    MOV R2, R5
    MOVS R1, #0x80
    MOV R6, R0
    BL sub_2EAE8
    B.W loc_11D40
loc_1280A:
    BLX __stack_chk_fail
loc_1280E:
    CBNZ R3, loc_12840
loc_12810:
    CBNZ R4, loc_12840
loc_12812:
    LDR R3, [SP,#0x138+var_120]
    SUBS R3, #5
    CMP R3, #1
    BLS loc_12840
loc_1281A:
    LDR.W R9, [SP,#0x138+var_114]
    B loc_1208E
loc_12820:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9654
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x407
    MOVT.W R0, #3
    BLX __assert_fail
loc_12840:
    MOV R3, #0x56198
    MOVW R0, #0x94B0
    MOVS R2, #0x29
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_12860:
    MOV R3, #0x56198
    MOVW R0, #0x977C
    MOVS R2, #0x1F
    LDR R3, [R3]
    MOVS R1, #1
    MOVT.W R0, #3
    BLX fwrite
    B.W loc_11CA6
loc_1287E:
    MOVS R1, #6
    B loc_12250
loc_12882:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x424
    MOVT.W R0, #3
    BLX __assert_fail
loc_128A2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9770
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x423
    MOVT.W R0, #3
    BLX __assert_fail
loc_128C2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9438
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x26B
    MOVT.W R0, #3
    BLX __assert_fail
loc_128E2:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x3D5
    MOVT.W R0, #3
    BLX __assert_fail
loc_12902:
    CMP R5, #0
    BEQ.W loc_12B88
loc_12908:
    MOV R0, R8
    MOV R2, R7
    MOV R1, R5
    BL sub_2A8BC
    CMP R0, #0
    BNE.W loc_12260
loc_12918:
    LDR R4, [SP,#0x138+size]
    MOV R3, #0x56198
    MOVW R0, #0x9708
    MOVS R2, #0x2B
    MOVT.W R0, #3
    LDR R3, [R3]
    MOV R1, R4
    BLX fwrite
    MOV R0, R4
    B.W loc_11CA8
loc_1293A:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x95AC
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x2FE
    MOVT.W R0, #3
    BLX __assert_fail
loc_1295A:
    LDR R1, [SP,#0x138+var_BC]
    B loc_122A8
loc_1295E:
    CBZ R4, loc_12986
loc_12960:
    LDR R3, [R4]
    ADD R1, SP, #0x138+tp
    LDR R0, [R4,#4]
    LDR R3, [R3,#0xC]
    BLX R3
    MOV R6, R0
    B loc_122A6
loc_1296E:
    MOV R1, R5
    MOV R0, R8
    BL sub_2C770
loc_12976:
    B loc_122BE
loc_12978:
    MOV R3, #0x5619C
    LDR.W R8, [R3]
    B loc_12292
loc_12986:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOV.W R2, #0x3F0
    MOVT.W R0, #3
    BLX __assert_fail
loc_129A6:
    MOV R0, R3
    MOV R6, R3
    BL sub_18738
    MOV R4, R0
    MOVW R0, #0x9668
    STR R6, [R4]
    MOVT.W R0, #3
    BL sub_18A88
    STR R0, [R4,#4]
    MOV R0, #0x395BC
    BL sub_18A88
    MOV R2, R6
    MOV R1, R0
    MOV R0, R4
    BL sub_187A4
    MOV R2, R6
    MOV R1, R6
    MOV R0, R4
    BL sub_36254
    CMP R0, #0
    BLT loc_12A2A
loc_129E4:
    BNE loc_12A14
loc_129E6:
    MOV R0, R4
    BL sub_18A10
    MOV R0, #aPuttygenUnable
    BLX perror
    B.W loc_11CA6
loc_129FC:
    BL sub_19494
    LDR R3, [SP,#0x138+var_B4]
    CMP R3, #0
    BNE.W loc_12584
loc_12A08:
    MOV R3, #0x39630
    STR R3, [SP,#0x138+var_B4]
    B loc_12584
loc_12A14:
    LDR R3, [R4,#0x18]
    LDR R3, [R3]
    LDR R0, [R3,#8]
    BL sub_18A88
    STR R0, [SP,#0x138+s]
    MOV R0, R4
    BL sub_18A10
    B.W loc_120F4
loc_12A2A:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x95DC
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x315
    MOVT.W R0, #3
    BLX __assert_fail
loc_12A4A:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0xE83C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x37B
    MOVT.W R0, #3
    BLX __assert_fail
loc_12A6A:
    MOV R3, #0x3960C
    STR R3, [SP,#0x138+var_B4]
    B loc_1271A
loc_12A76:
    MOV R1, #0x5619C
    MOVW R2, #0x93A8
    MOV R3, R6
    LDR R0, [R1]
    MOVT.W R2, #3
    MOVS R1, #1
    BLX __fprintf_chk
    B.W loc_11D70
loc_12A94:
    CBZ R6, loc_12AE6
loc_12A96:
    MOV R0, R6
    LDR R1, [SP,#0x138+tp]
    BL sub_2C994
    MOV R6, R0
    B.W loc_11D40
loc_12AA4:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x965C
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x38E
    MOVT.W R0, #3
    BLX __assert_fail
loc_12AC4:
    CMP R5, #6
    BNE loc_12AD4
loc_12AC8:
    LDR R2, [SP,#0x138+var_120]
    CMP R2, #5
    IT 
    MOVEQ R5, #6
    BEQ.W loc_12068
loc_12AD4:
    CMP R5, #7
    BNE.W loc_11F32
loc_12ADA:
    LDR R2, [SP,#0x138+var_120]
    CMP R2, #6
    BEQ.W loc_12068
loc_12AE2:
    B.W loc_11F32
loc_12AE6:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9764
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x40F
    MOVT.W R0, #3
    BLX __assert_fail
loc_12B06:
    MOVS R0, #0
    MOV R7, R0
    BL sub_18738
    MOV R8, R0
    STR R7, [R0]
    MOV R0, #0x39664
    BL sub_18A88
    STR.W R0, [R8,#4]
    MOV R0, #0x3967C
    BL sub_18A88
    MOV R2, R7
    MOV R1, R0
    MOV R0, R8
    BL sub_187A4
    MOV R0, #0x3969C
    BL sub_18A88
    MOV R2, R7
    MOV R1, R0
    MOV R0, R8
    BL sub_187A4
    MOV R2, R7
    MOV R1, R7
    MOV R0, R8
    BL sub_36254
    CMP R0, R7
    BLT loc_12BE6
loc_12B5C:
    BEQ loc_12BCE
loc_12B5E:
    LDR.W R3, [R8,#0x18]
    LDM R3, {R2,R3}
    LDR R7, [R2,#8]
    LDR R1, [R3,#8]
    MOV R0, R7
    BLX strcmp
    CBNZ R0, loc_12BA8
loc_12B70:
    MOV R0, R7
    BL sub_18A88
    MOV R7, R0
    MOV R0, R8
    BL sub_18A10
    CMP R7, #0
    BEQ.W loc_1245A
loc_12B84:
    B.W loc_12172
loc_12B88:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x9654
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOVW R2, #0x3CE
    MOVT.W R0, #3
    BLX __assert_fail
loc_12BA8:
    MOV R0, R8
    BL sub_18A10
    MOV R3, #0x56198
    MOVW R0, #0x96E4
    MOVS R2, #0x23
    MOVT.W R0, #3
    LDR R3, [R3]
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B.W loc_11CA8
loc_12BCE:
    MOV R0, R8
    BL sub_18A10
    MOV R0, #aPuttygenUnable_0
    BLX perror
    MOVS R0, #1
    B.W loc_11CA8
loc_12BE6:
    MOVW R3, #0x8A50
    MOVW R1, #0x942C
    MOVW R0, #0x95DC
    MOVT.W R3, #3
    MOVT.W R1, #3
    MOV.W R2, #0x3A8
    MOVT.W R0, #3
    BLX __assert_fail
```
Output:0A:
    LDR R3, [SP,#0x138+var_130]
    CMP R3, #0
    BEQ.W loc_11BC6
loc_11812:
    LDR.W R3, [R9]
    MOVS R2, #0x2E
    MOVS R1, #1
    LDR R0, [SP,#0x138+ptr]
    BLX fwrite
    SUBS R6, #1
    MOV R7, R5
    MOV.W R10, #1
    BNE loc_11754
loc_1182E:
    LDR R3, [SP,#0x138+var_128]
    ADDS R3, #1
    LDR R3, [SP,#0x138+var_11C]
    BEQ.W loc_11E60
loc_11838:
    CMP R3, #4
    BEQ.W loc_11F74
loc_1183E:
    LDR R3, [SP,#0x138+var_11C]
    SUB.W R6, R3, #5
    LDR R3, [SP,#0x138+var_128]
    CLZ.W R6, R6
    LSRS R6, R6, #5
    CMP.W R3, #0x100
    ITE 
    MOVEQ R3, #0
    ANDNE.W R3, R6, #1
    CMP R3, #0
    BNE.W loc_11FAE
loc_1184E:
    LDR R4, [SP,#0x138+var_11C]
    SUBS R3, R4, #1
    CMP R3, #2
    BLS.W loc_11C70
loc_11858:
    CMP.W R10, #0
    BNE.W loc_11CA6
loc_11860:
    LDR R3, [SP,#0x138+var_118]
    CMP R3, #0
    BNE.W loc_11DBC
loc_11868:
    LDR R3, [SP,#0x138+var_130]
    CBNZ R3, loc_11874
loc_1186C:
    LDR R3, [SP,#0x138+var_11C]
    CMP R3, #0
    BEQ.W loc_11EFA
loc_11874:
    LDR R3, [SP,#0x138+var_11C]
    LDR R2, [SP,#0x138+var_130]
    ADDS R3, #0
    IT 
    MOVNE R3, #1
    STR R3, [SP,#0x138+ptr]
    CMP R2, #0
    BEQ.W loc_11DC0
loc_11886:
    CMP R3, #0
    BEQ.W loc_11DC0
loc_1188C:
    MOV R3, #0x56198
    MOVW R0, #0x930C
    MOVS R2, #0x2E
    LDR R3, [R3]
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    MOVS R0, #1
    B loc_11CA8
loc_118A2:
    LDR R3, [SP,#0x138+var_130]
    CMP R3, #0
    BEQ.W loc_11BC6
loc_118AA:
    LDR.W R3, [R9]
    MOVS R2, #0x2E
    MOVS R1, #1
    LDR R0, [SP,#0x138+ptr]
    BLX fwrite
    SUBS R6, #1
    MOV R7, R5
    MOV.W R10, #1
    BNE loc_11754
loc_118C6:
    LDR R3, [SP,#0x138+var_128]
    ADDS
############
```assembly
loc_369B8:
    PUSH {R3-R5,LR}
    MOVS R1, #4
    LDR R5, [R0]
    MOVS R0, #1
    BL sub_193B8
    MOV R4, R0
    MOV R0, R5
    BL sub_18A88
    STR R0, [R4]
    MOV R0, R4
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:4",
  "fixed-value-assignment:1",
  "memory-read-from-input-parameter-offset:0",
  "memory-write-to-output-parameter-offset:0",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_18A88)",
  "inferred-algorithm:data-modification-or-update",
  "inferred-algorithm:function-wrapper-or-trampoline"
]
```<|im_end|>
############
```assembly
loc_113D8:
    ADR R12, 0x113E0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strlen_ptr - 0x553E0)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen_ptr dereferencing)",
  "address-or-offset-constant:0x113E0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strlen_ptr",
  "magic-number:0x553E0",
  "inferred-algorithm:string-length-determination",
  "inferred-algorithm:indirect-addressing"
]
```<|im_end|>
############
```assembly
loc_38A44:
    PUSH {R3,LR}
    POP {R3,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:standard",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return"
]
```<|im_end|>
############
```assembly
loc_1FC7C:

loc_2F078:
    PUSH.W {R4-R10,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0x20
    MOV R8, R1
    MOV R4, R0
    LDR.W R7, [R9]
    MOV R5, R2
    MOV R6, R3
    MOV R0, R3
    MOVS R2, #1
    MOV.W R3, #0x10000
    STR R7, [SP,#0x40+var_24]
    ADD.W R7, R8, R8,LSR#31
    MOVS R1, #4
    MOV.W R10, #1
    ASRS R7, R7, #1
    BLX R5
    MOV R0, #0xFFE2A83C
    MOV R1, R7
    SUB.W R8, R8, R7
    BL sub_38748
    MOV R2, R10
    MOVS R1, #3
    MOV R3, R0
    MOV R0, R6
    BLX R5
    MOV.W R3, #0x10000
    MOVS R2, #2
    MOV R0, R6
    MOVS R1, #4
    BLX R5
    MOV R1, R8
    MOV R0, #0xFFE2A83C
    BL sub_38748
    MOVS R2, #2
    MOVS R1, #3
    MOV R3, R0
    MOV R0, R6
    BLX R5
    MOV R0, R6
    MOV.W R3, #0x4000
    MOVS R2, #3
    MOVS R1, #4
    BLX R5
    MOV R0, R6
    MOVS R3, #5
    MOVS R2, #3
    MOVS R1, #2
    BLX R5
    MOVS R3, #0
    MOV R2, R3
    MOVS R1, #5
    MOV R0, R6
    BLX R5
    MOVS R0, #0x25
    BL sub_1FE48
    ADD R1, SP, #0x40+var_28
    STR R0, [R4,#0xC]
    ADD R0, SP, #0x40+var_2C
    BL sub_2A158
    LDR R3, [SP,#0x40+var_2C]
    MOV R2, R10
    MOV R0, R7
    STR.W R10, [SP,#0x40+var_40]
    MOVS R1, #0x25
    STR R3, [SP,#0x40+var_34]
    MOVS R3, #0
    STR R6, [SP,#0x40+var_38]
    STR R5, [SP,#0x40+var_3C]
    BL sub_29BE0
    LDR R3, [SP,#0x40+var_28]
    MOV R2, R10
    STR R6, [SP,#0x40+var_38]
    STR R5, [SP,#0x40+var_3C]
    MOVS R1, #2
    STR R3, [SP,#0x40+var_34]
    MOVS R3, #0
    STR R1, [SP,#0x40+var_40]
    MOVS R1, #0x25
    STR R0, [R4,#0x14]
    MOV R0, R8
    BL sub_29BE0
    MOV R1, R0
    STR R0, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1F358
    MOVS R1, #6
    CMP R0, #0
    MOV R0, R6
    ITTT 
    LDRLT R2, [R4,#0x14]
    LDRLT R3, [R4,#0x18]
    STRLT R2, [R4,#0x18]
    MOV.W R2, #3
    IT 
    STRLT R3, [R4,#0x14]
    MOVS R3, #1
    BLX R5
    LDR R1, [R4,#0x18]
    LDR R0, [R4,#0x14]
    BL sub_1FC7C
```
Output:```json
[
  "return-type:void",
  "argument-count:5",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "arg4-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x40",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_38748)",
  "external-call-type:unspecified-helper (sub_1FE48)",
  "external-call-type:unspecified-helper (sub_2A158)",
  "external-call-type:unspecified-helper (sub_29BE0)",
  "external-call-type:unspecified-helper (sub_1F358)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shift-left-present",
  "bitwise-shift-right-present",
  "bitwise-or-present",
  "bitwise-and-present",
  "bitwise-xor-present",
  "bitwise-not-present",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:0xFFE2A83C",
  "address-or-offset-constant:0x10000",
  "address-or-offset-constant:0x4000",
  "address-or-offset-constant:0x25",
  "address-or-offset-constant:0x2",
  "address-or-offset-constant:0x3",
  "address-or-offset-constant:0x4",
  "address-or-offset-constant:0x5",
  "address-or-offset-constant:0x6",
  "inferred-algorithm:data-encryption-or-authentication",
  "inferred-algorithm:data-packing-or-unpacking",
  "inferred-algorithm:data-transformation",
  "inferred-algorithm:data-validation",
  "inferred-algorithm:loop-with-conditionals",
  "inferred-algorithm:recursive-function-call"
]
```<|im_end|>
############
```assembly
loc_1B5D6:
    ADD.W R3, R2, #0x3C8
    MOV R10, R2
    MOV R5, R1
    MOV R4, R0
    LDR R1, [R3,#4]
    ADD R6, SP, #0x68+var_4C
    LDR R0, [R3]
    CMP R5, #0
    STR R3, [SP,#0x68+var_58]
    LDR.W R2, [R10,#0x3D0]
    LDR.W R3, [R10,#0x3D4]
    STM R6!, {R0-R3}
    BLE.W loc_1B746
loc_1B5F8:
    SUBS R3, R5, #1
    LDR R2, [SP,#0x68+var_48]
    BIC.W R3, R3, #0xF
    LDR R1, [SP,#0x68+var_40]
    ADDS R3, #0x20
    LDR.W R9, [SP,#0x68+var_4C]
    LDR.W R11, [SP,#0x68+var_44]
    ADDS R3, R4, R3
    ADDS R4, #0x10
    STR R3, [SP,#0x68+var_5C]
    MOV R3, R10
    MOV R10, R2
    MOV R2, R3
    STR R1, [SP,#0x68+var_64]
loc_1B61A:
    LDRB.W R7, [R4,#-0xB]
    MOV R0, R2
    LDRB.W R3, [R4,#-0xC]
    ADD R1, SP, #0x68+var_3C
    LDRB.W R5, [R4,#-3]
    ADDS R4, #0x10
    LSLS R7, R7, #0x10
    LDRB.W R8, [R4,#-0x1F]
    ORR.W R7, R7, R3,LSL#24
    LDRB.W R3, [R4,#-0x14]
    LDRB.W LR, [R4,#-0x20]
    LSLS R5, R5, #0x10
    LDRB.W R6, [R4,#-0x17]
    MOV.W R8, R8,LSL#16
    LDRB.W R12, [R4,#-0x18]
    ORR.W R3, R5, R3,LSL#24
    LDRB.W R5, [R4,#-0x19]
    ORR.W LR, R8, LR,LSL#24
    LDRB.W R8, [R4,#-0x1D]
    LSLS R6, R6, #0x10
    ORRS R7, R5
    LDRB.W R5, [R4,#-0x15]
    ORR.W R6, R6, R12,LSL#24
    ORR.W R8, LR, R8
    LDRB.W LR, [R4,#-0x1E]
    ORRS R6, R5
    LDRB.W R5, [R4,#-0x11]
    LDRB.W R12, [R4,#-0x1A]
    ORR.W R8, R8, LR,LSL#8
    ORRS R5, R3
    LDRB.W LR, [R4,#-0x16]
    LDRB.W R3, [R4,#-0x12]
    ORR.W R7, R7, R12,LSL#8
    STR.W R8, [SP,#0x68+var_3C]
    ORR.W R6, R6, LR,LSL#8
    STR R7, [SP,#0x68+var_38]
    ORR.W R5, R5, R3,LSL#8
    STR R6, [SP,#0x68+var_34]
    LDR.W R3, [R2,#0x3C4]
    STR R5, [SP,#0x68+var_30]
    STR R2, [SP,#0x68+var_60]
    BLX R3
    LDR R3, [SP,#0x68+var_3C]
    LDR R2, [SP,#0x68+var_64]
    EOR.W R9, R3, R9
    LDR R1, [SP,#0x68+var_38]
    LDR R3, [SP,#0x68+var_30]
    LDR R0, [SP,#0x68+var_34]
    EOR.W R1, R1, R10
    EOR.W LR, R2, R3
    MOV.W R3, R9,LSR#16
    EOR.W R0, R0, R11
    STRB.W R3, [R4,#-0x1F]
    LSRS R3, R1, #0x10
    STRB.W R3, [R4,#-0x1B]
    LSRS R3, R0, #0x10
    STRB.W R3, [R4,#-0x17]
    MOV.W R3, LR,LSR#24
    STRB.W R3, [R4,#-0x14]
    MOV.W R3, LR,LSR#8
    STRB.W R3, [R4,#-0x12]
    LDR R3, [SP,#0x68+var_5C]
    MOV.W R12, R9,LSR#24
    STRB.W R9, [R4,#-0x1D]
    MOV.W R9, R9,LSR#8
    STRB.W R1, [R4,#-0x19]
    MOV R10, R7
    STRB.W R0, [R4,#-0x15]
    MOV R11, R6
    STRB.W R12, [R4,#-0x20]
    MOV.W R12, R1,LSR#24
    STRB.W R9, [R4,#-0x1E]
    LSRS R1, R1, #8
    STRB.W R12, [R4,#-0x1C]
    MOV.W R12, R0,LSR#24
    STRB.W R1, [R4,#-0x1A]
    LSRS R0, R0, #8
    STRB.W LR, [R4,#-0x11]
    MOV.W R1, LR,LSR#16
    STRB.W R12, [R4,#-0x18]
    MOV R9, R8
    STRB.W R0, [R4,#-0x16]
    STRB.W R1, [R4,#-0x13]
    CMP R3, R4
    STR.W R8, [SP,#0x68+var_4C]
    STR R7, [SP,#0x68+var_48]
    STR R6, [SP,#0x68+var_44]
    STR R5, [SP,#0x68+var_64]
    STR R5, [SP,#0x68+var_40]
    LDR R2, [SP,#0x68+var_60]
    BNE.W loc_1B61A
loc_1B744:
    MOV R10, R2
loc_1B746:
    ADD R4, SP, #0x68+var_4C
    LDR R5, [SP,#0x68+var_2C]
    LDR R6, [SP,#0x68+var_58]
    LDM R4!, {R0-R3}
    STR.W R0, [R10,#0x3C8]
    LDR R0, [SP,#0x68+var_54]
    STR R1, [R6,#4]
    STR R2, [R6,#8]
    LDR R0, [R0]
    STR R3, [R6,#0xC]
    CMP R5, R0
    BNE loc_1B780
loc_1B760:
    ADD SP, SP, #0x44
    POP.W {R4-R11,PC}
loc_1B766:
    MOVW R1, #0xD380
    MOVW R0, #0xD38C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aAesDecryptCbc
    MOVW R2, #0x41F
    BLX __assert_fail
loc_1B780:
    BLX __stack_chk_fail
```
Output:R#24
    STRB.W R9, [R4,#-0x1A]
    LSRS R0, R0, #8
    STRB.W R12, [R4,#-0x16]
    LDR R3, [SP,#0x68+var_58]
    STR WZR, [R3]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R9, R10
    EOR.W R1, R1, R11
    EOR.W LR, LR, R12
    LDR R0, [SP,#0x68+var_5C]
    LDR R2, [SP,#0x68+var_60]
    EOR.W R9, R
############
```assembly
loc_15918:

loc_16C34:

loc_17B60:

loc_18338:
    CMP R1, #4
    PUSH {R4-R7}
    MOV R4, R2
    MOV R5, R0
    BEQ loc_1835A
loc_18342:
    CMP R1, #6
    BEQ loc_183AA
loc_18346:
    CMP R1, #7
    BEQ loc_18350
loc_1834A:
    MOVS R0, #0
    POP {R4-R7}
    BX LR
loc_18350:
    MOV R1, R4
    MOV R2, R3
    POP {R4-R7}
    B.W sub_17B60
loc_1835A:
    LDR R1, [R2]
    MOVW R7, #0xF520
    MOVW R2, #0x3AC8
    MOVT.W R7, #3
    MOVT.W R2, #4
    MOVW R6, #0xFB34
    CMP R1, R7
    IT 
    CMPNE R1, R2
    MOVT.W R6, #3
    MOV R7, #0x3FB70
    ITE 
    MOVEQ R2, #1
    MOVNE R2, #0
    CMP R1, R6
    IT 
    ORREQ.W R2, R2, #1
    MOVW R6, #0xFBAC
    CMP R1, R7
    IT 
    ORREQ.W R2, R2, #1
    MOVT.W R6, #3
    CMP R1, R6
    IT 
    ORREQ.W R2, R2, #1
    CBNZ R2, loc_183B6
loc_183AA:
    MOV R1, R4
    MOV R0, R5
    MOV R2, R3
    POP {R4-R7}
    B.W sub_16C34
loc_183B6:
    MOV R1, R4
    MOV R2, R3
    POP {R4-R7}
    B.W sub_15918
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:integer",
  "arg2-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_17B60)",
  "external-call-type:unspecified-helper (sub_16C34)",
  "external-call-type:unspecified-helper (sub_15918)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:4",
  "fixed-value-comparison:6",
  "fixed-value-comparison:7",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0",
  "bitwise-operation:OR",
  "bitwise-mask-values:0xF520, 0x3AC8, 0xFB34, 0x3FB70, 0xFBAC",
  "inferred-algorithm:multi-condition-check",
  "inferred-algorithm:conditional-execution",
  "inferred-algorithm:dispatch-table"
]
```<|im_end|>
############
```assembly
loc_56968:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_568F4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11150:
    ADR R12, 0x11158
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strstr_ptr - 0x55158)]!
```
Output:```json
[
  "return-type:address",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:string",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strstr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11158",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strstr_ptr",
  "address-or-offset-constant:-0x55158",
  "inferred-algorithm:string-search-or-matching",
  "inferred-algorithm:dynamic-linker-or-loader-support"
]
```<|im_end|>
############
```assembly
loc_1C44C:
    PUSH.W {R4-R11,LR}
    ADD.W R4, R3, #0x1000
    MOVW R7, #0x1008
    ADD.W R6, R3, #0x400
    LDR.W R12, [R4]
    MOVW LR, #0x1004
    ADD.W R5, R3, #0x800
    LDR.W LR, [R3,LR]
    EOR.W R0, R0, R12
    LDR.W R12, [R3,R7]
    UBFX.W R8, R0, #0x10, #8
    UBFX.W R10, R0, #8, #8
    LSRS R7, R0, #0x18
    ADD.W R4, R3, #0xC00
    LDR.W R9, [R6,R8,LSL#2]
    UXTB.W R8, R0
    LDR.W R7, [R3,R7,LSL#2]
    EOR.W LR, R1, LR
    LDR.W R1, [R5,R10,LSL#2]
    EOR.W R12, R0, R12
    ADD.W R0, R9, R7
    LDR.W R7, [R4,R8,LSL#2]
    EORS R1, R0
    MOVW R0, #0x100C
    ADD R1, R7
    LDR R0, [R3,R0]
    EOR.W R1, LR, R1
    MOVW LR, #0x1010
    EOR.W R9, R1, R0
    UBFX.W R8, R1, #0x10, #8
    LSRS R0, R1, #0x18
    UBFX.W R7, R1, #8, #8
    LDR.W R8, [R6,R8,LSL#2]
    UXTB R1, R1
    LDR.W R0, [R3,R0,LSL#2]
    MOVW R10, #0x101C
    LDR.W R7, [R5,R7,LSL#2]
    ADD R8, R0
    LDR.W R0, [R4,R1,LSL#2]
    EOR.W R1, R8, R7
    LDR.W R7, [R3,LR]
    ADD R0, R1
    MOVW R1, #0x1014
    EOR.W R0, R0, R12
    LDR R1, [R3,R1]
    UBFX.W R12, R0, #0x10, #8
    EOR.W R8, R0, R7
    MOV.W LR, R0,LSR#24
    UBFX.W R7, R0, #8, #8
    LDR.W R12, [R6,R12,LSL#2]
    UXTB R0, R0
    LDR.W LR, [R3,LR,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    ADD LR, R12
    LDR.W R0, [R4,R0,LSL#2]
    EOR.W R7, LR, R7
    MOVW LR, #0x1018
    ADD R0, R7
    LDR.W R7, [R3,LR]
    EOR.W R0, R0, R9
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R12, R0, #8, #8
    MOV.W R11, R0,LSR#24
    EORS R1, R0
    LDR.W LR, [R6,LR,LSL#2]
    UXTB.W R9, R0
    LDR.W R0, [R3,R11,LSL#2]
    LDR.W R12, [R5,R12,LSL#2]
    ADD LR, R0
    LDR.W R0, [R4,R9,LSL#2]
    EOR.W LR, LR, R12
    ADD.W R9, R3, #0x1020
    ADD LR, R0
    EOR.W LR, LR, R8
    UBFX.W R12, LR, #0x10, #8
    UBFX.W R8, LR, #8, #8
    MOV.W R0, LR,LSR#24
    EOR.W R7, LR, R7
    LDR.W R12, [R6,R12,LSL#2]
    UXTB.W LR, LR
    LDR.W R0, [R3,R0,LSL#2]
    LDR.W R8, [R5,R8,LSL#2]
    ADD R12, R0
    LDR.W R0, [R4,LR,LSL#2]
    EOR.W R12, R12, R8
    MOVW R8, #0x1024
    ADD R12, R0
    EOR.W R12, R12, R1
    UBFX.W R0, R12, #0x10, #8
    UBFX.W LR, R12, #8, #8
    MOV.W R1, R12,LSR#24
    UXTB.W R11, R12
    LDR.W R0, [R6,R0,LSL#2]
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W LR, [R5,LR,LSL#2]
    ADD R1, R0
    LDR.W R0, [R4,R11,LSL#2]
    EOR.W R1, R1, LR
    ADD R0, R1
    EORS R0, R7
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    LSRS R1, R0, #0x18
    LDR.W R11, [R6,LR,LSL#2]
    UXTB.W LR, R0
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    LDR.W LR, [R4,LR,LSL#2]
    ADD R11, R1
    LDR.W R1, [R3,R10]
    EOR.W R7, R11, R7
    ADD R7, LR
    LDR.W LR, [R3,R8]
    EOR.W R1, R12, R1
    LDR.W R12, [R9]
    EORS R1, R7
    EOR.W R12, R0, R12
    UBFX.W R0, R1, #0x10, #8
    MOV.W R8, R1,LSR#24
    UBFX.W R7, R1, #8, #8
    LDR.W R0, [R6,R0,LSL#2]
    UXTB.W R9, R1
    EOR.W LR, R1, LR
    LDR.W R1, [R3,R8,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    MOVW R8, #0x1028
    ADD R1, R0
    LDR.W R0, [R4,R9,LSL#2]
    EORS R7, R1
    LDR.W R1, [R3,R8]
    ADD R0, R7
    MOVW R7, #0x102C
    EOR.W R0, R0, R12
    LDR.W R9, [R3,R7]
    UBFX.W R12, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    MOV.W R10, R0,LSR#24
    UXTB.W R8, R0
    LDR.W R12, [R6,R12,LSL#2]
    EORS R1, R0
    LDR.W R0, [R3,R10,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    ADD R12, R0
    LDR.W R0, [R4,R8,LSL#2]
    EOR.W R12, R12, R7
    MOVW R7, #0x1030
    ADD R0, R12
    LDR.W R12, [R3,R7]
    EOR.W R0, R0, LR
    MOVW R8, #0x1034
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R10, R0, #8, #8
    MOV.W R11, R0,LSR#24
    EOR.W R7, R0, R9
    LDR.W LR, [R6,LR,LSL#2]
    UXTB.W R9, R0
    LDR.W R0, [R3,R11,LSL#2]
    LDR.W R10, [R5,R10,LSL#2]
    ADD LR, R0
    LDR.W R0, [R4,R9,LSL#2]
    EOR.W LR, LR, R10
    ADD LR, R0
    EOR.W R1, LR, R1
    UBFX.W R9, R1, #0x10, #8
    UBFX.W LR, R1, #8, #8
    MOV.W R10, R1,LSR#24
    EOR.W R0, R1, R12
    LDR.W R12, [R6,R9,LSL#2]
    UXTB.W R9, R1
    LDR.W R1, [R3,R10,LSL#2]
    LDR.W LR, [R5,LR,LSL#2]
    ADD R12, R1
    LDR.W R1, [R4,R9,LSL#2]
    EOR.W LR, R12, LR
    ADD R1, LR
    EORS R7, R1
    UBFX.W R12, R7, #0x10, #8
    UBFX.W LR, R7, #8, #8
    LSRS R1, R7, #0x18
    UXTB.W R9, R7
    LDR.W R12, [R6,R12,LSL#2]
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W LR, [R5,LR,LSL#2]
    ADD R12, R1
    LDR.W R1, [R4,R9,LSL#2]
    EOR.W LR, R12, LR
    ADD R1, LR
    EORS R0, R1
    UBFX.W R12, R0, #0x10, #8
    UBFX.W LR, R0, #8, #8
    LSRS R1, R0, #0x18
    UXTB.W R10, R0
    LDR.W R12, [R6,R12,LSL#2]
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R9, [R5,LR,LSL#2]
    ADD R12, R1
    LDR.W LR, [R4,R10,LSL#2]
    LDR.W R1, [R3,R8]
    EOR.W R12, R12, R9
    ADD LR, R12
    MOVW R12, #0x1038
    EORS R1, R7
    LDR.W R9, [R3,R12]
    EOR.W R1, LR, R1
    MOVW R12, #0x103C
    UBFX.W LR, R1, #0x10, #8
    UBFX.W R10, R1, #8, #8
    LSRS R7, R1, #0x18
    UXTB.W R8, R1
    LDR.W LR, [R6,LR,LSL#2]
    EOR.W R9, R0, R9
    LDR.W R7, [R3,R7,LSL#2]
    LDR.W R0, [R5,R10,LSL#2]
    ADD LR, R7
    LDR.W R7, [R4,R8,LSL#2]
    EOR.W LR, LR, R0
    LDR.W R8, [R3,R12]
    ADD R7, LR
    ADD.W R12, R3, #0x1040
    EOR.W R0, R7, R9
    EOR.W R8, R1, R8
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R1, R0, #8, #8
    LSRS R7, R0, #0x18
    UXTB.W R9, R0
    LDR.W LR, [R6,LR,LSL#2]
    LDR.W R7, [R3,R7,LSL#2]
    LDR.W R1, [R5,R1,LSL#2]
    ADD LR, R7
    LDR.W R7, [R4,R9,LSL#2]
    EOR.W LR, LR, R1
    MOVW R9, #0x1044
    ADD R7, LR
    LDR.W LR, [R12]
    EOR.W R1, R7, R8
    LDR.W R8, [R3,R9]
    UBFX.W R7, R1, #0x10, #8
    UBFX.W R12, R1, #8, #8
    MOV.W R9, R1,LSR#24
    EOR.W R0, R0, LR
    LDR.W R7, [R6,R7,LSL#2]
    UXTB.W LR, R1
    LDR.W R6, [R3,R9,LSL#2]
    EOR.W R1, R8, R1
    LDR.W R5, [R5,R12,LSL#2]
    LDR.W R3, [R4,LR,LSL#2]
    ADDS R4, R7, R6
    EORS R4, R5
    STR R1, [R2]
    ADD R3, R4
    EORS R0, R3
    STR R0, [R2,#4]
    POP.W {R4-R11,PC}
```
Output: [R6,R1,LSL#2]
    EOR.W R1, R1, R7
    ADD R0, R1
    EORS R0, R12
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    LSRS R1, R0, #0x18
    UXTB.W R11, R0
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    LDR.W LR, [R4,LR,LSL#2]
    ADD R11, R1
    LDR.W R1, [R6,R1,LSL#2]
    EOR.W R1, R1, R7
    ADD R0, R1
    EORS R0, R12
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    LSRS R1, R0, #0x18
    UXTB.W R11, R0
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    LDR.W LR, [R4,LR,LSL#2]
    ADD R11, R1
    LDR.W R1, [R6,R1,LSL#2]
    EOR.W R1, R1, R7
    ADD R0, R1
    EORS R0, R12
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    LSRS R1, R0, #0x18
    UXTB.W R11, R0
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    LDR.W LR, [R4,LR,LSL#2]
    ADD R11, R1
    LDR.W R1, [R6,R1,LSL#2]
    EOR.W R1, R1, R7
    ADD R0, R1
    EORS R0, R12
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    LSRS R1, R0, #0x18
    UXTB.W R11, R0
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    LDR.W LR, [R4,LR,LSL#2]
    ADD R11, R1
    LDR.W R1, [R6,R1,LSL#2]
    EOR.W R1, R1, R7
    ADD R0, R1
    EORS R0, R12
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    LSRS R1, R0, #0x18
    UXTB.W R11, R0
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    LDR.W LR, [R4,LR,LSL#2]
    ADD R11, R1
    LDR.W R1, [R6,R1,LSL#2]
    EOR.W R1, R1, R7
    ADD R0, R1
    EORS R0, R12
    UBFX.W LR, R0, #0x10, #8
    UBFX.W R7, R0, #8, #8
    LSRS R1, R0, #0x18
    UXTB.W R11, R0
    LDR.W R1, [R3,R1,LSL#2]
    LDR.W R7, [R5,R7,LSL#2]
    LDR.W LR, [R4,LR,LSL#2]
    ADD R11, R1
############
```assembly
loc_29688:
    PUSH.W {R4-R10,LR}
    MOV R10, #0x56190
    ADD.W R4, R0, #0xB8
    SUB SP, SP, #0xD0
    MOV R5, R0
    LDR.W R6, [R10]
    MOV R8, R1
    MOV R9, R2
    MOV R1, R5
    MOVS R2, #0x5C
    MOV R0, R4
    STRB.W R3, [SP,#0xF0+var_41]
    STR R6, [SP,#0xF0+var_24]
    LSRS R6, R3, #0x18
    STRB.W R6, [SP,#0xF0+var_44]
    LSRS R6, R3, #0x10
    LSRS R3, R3, #8
    STRB.W R6, [SP,#0xF0+var_43]
    STRB.W R3, [SP,#0xF0+var_42]
    BLX memcpy
    MOV R0, R4
    MOVS R2, #4
    ADD R1, SP, #0xF0+var_44
    BL sub_29024
    CMP.W R8, #0
    BEQ loc_296E0
loc_296D6:
    MOV R2, R9
    MOV R1, R8
    MOV R0, R4
    BL sub_29024
loc_296E0:
    MOV R1, R4
    MOVS R2, #0x5C
    ADD R0, SP, #0xF0+dest
    BLX memcpy
    ADD R1, SP, #0xF0+dest
    ADD R0, SP, #0xF0+src
    BL sub_29130
    ADD.W R1, R5, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xF0+dest
    BLX memcpy
    LDR R3, [SP,#0xF0+var_58]
    LDR R2, [SP,#0xF0+var_60]
    LDR R1, [SP,#0xF0+var_5C]
    ADDS R3, #0x10
    ADD.W R4, R2, #0x10
    STR R3, [SP,#0xF0+var_58]
    CMP R3, #0xF
    ITE 
    MOVHI R3, R1
    ADDLS R3, R1, #1
    CMP R4, #0x3F
    STR R3, [SP,#0xF0+var_5C]
    MOV R0, R2
    ITTT 
    ADDHI R4, SP, #0xF0+src
    MOVHI R5, #0x10
    MOVHI R6, #0
    BLS loc_297C6
loc_29724:
    ADD R3, SP, #0xF0+var_A0
    MOV R1, R4
    RSB.W R2, R2, #0x40
    ADD R0, R3
    BLX memcpy
    LDR R7, [SP,#0xF0+var_94]
    LDR R3, [SP,#0xF0+var_60]
    MOV R1, SP
    LDR R2, [SP,#0xF0+var_9C]
    RSB.W R12, R3, #0x40
    SUB.W LR, R3, #0x40
    STR R7, [SP,#0xF0+var_E4]
    ADD R5, LR
    LDR R3, [SP,#0xF0+var_98]
    ADD R4, R12
    LDR R7, [SP,#0xF0+var_90]
    STR R2, [SP,#0xF0+var_EC]
    STR R3, [SP,#0xF0+var_E8]
    STR R7, [SP,#0xF0+var_E0]
    LDR R3, [SP,#0xF0+var_88]
    LDR R7, [SP,#0xF0+var_84]
    LDR R2, [SP,#0xF0+var_8C]
    STR R3, [SP,#0xF0+var_D8]
    STR R7, [SP,#0xF0+var_D4]
    LDR R3, [SP,#0xF0+var_78]
    LDR R7, [SP,#0xF0+var_80]
    STR R2, [SP,#0xF0+var_DC]
    STR R3, [SP,#0xF0+var_C8]
    LDR R2, [SP,#0xF0+var_7C]
    LDR R3, [SP,#0xF0+var_68]
    STR R7, [SP,#0xF0+var_D0]
    LDR R7, [SP,#0xF0+var_74]
    LDR R0, [SP,#0xF0+var_A0]
    STR R2, [SP,#0xF0+var_CC]
    STR R7, [SP,#0xF0+var_C4]
    LDR R2, [SP,#0xF0+var_6C]
    LDR R7, [SP,#0xF0+var_70]
    STR R3, [SP,#0xF0+var_B8]
    LDR R3, [SP,#0xF0+var_64]
    STR R0, [SP,#0xF0+var_F0]
    ADD R0, SP, #0xF0+dest
    STR R2, [SP,#0xF0+var_BC]
    STR R7, [SP,#0xF0+var_C0]
    STR R3, [SP,#0xF0+var_B4]
    BL sub_28778
    CMP R5, #0x3F
    MOV.W R0, #0
    STR R6, [SP,#0xF0+var_60]
    MOV R2, R0
    BHI loc_29724
loc_29794:
    MOV R1, R4
    ADD R0, SP, #0xF0+var_A0
    MOVS R3, #0x4C
    MOV R2, R5
    BLX __memcpy_chk
    STR R5, [SP,#0xF0+var_60]
loc_297A2:
    ADD R1, SP, #0xF0+dest
    ADD R0, SP, #0xF0+var_54
    BL sub_29130
    MOVS R2, #0x10
    ADD R0, SP, #0xF0+var_54
    ADD.W R1, R8, R9
    BL sub_19844
    LDR R2, [SP,#0xF0+var_24]
    LDR.W R3, [R10]
    CMP R2, R3
    BNE loc_297E6
loc_297C0:
    ADD SP, SP, #0xD0
    POP.W {R4-R10,PC}
loc_297C6:
    ADD R5, SP, #0xF0+src
    ADD R3, SP, #0xF0+var_20
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x80]
    STR.W R1, [R4,#-0x7C]
    STR.W R2, [R4,#-0x78]
    STR.W R3, [R4,#-0x74]
    LDR R3, [SP,#0xF0+var_60]
    ADDS R3, #0x10
    STR R3, [SP,#0xF0+var_60]
    B loc_297A2
loc_297E6:
    BLX __stack_chk_fail
```
Output:C
    BL sub_29130
    ADD.W R1, R5, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xF0+dest
    BLX memcpy
    ADD R1, SP, #0xF0+dest
    ADD R0, SP, #0xF0+src
    BL sub_29130
    ADD.W R1, R5, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xF0+dest
    BLX memcpy
    LDR R3, [SP,#0xF0+var_58]
    LDR R2, [SP,#0xF0+var_60]
    LDR R1, [SP,#0xF0+var_5C]
    ADDS R3, #0x10
    ADD.W R4, R2, #0x10
    STR R3, [SP,#0xF0+var_58]
    CMP R3, #0xF
    ITE 
    MOVHI R3, R1
    ADDLS R3, R1, #1
    CMP R4, #0x3F
    STR R3, [SP,#0xF0+var_5C]
    MOV R0, R2
    ITTT 
    ADDHI R4, SP, #0xF0+src
    MOVHI R5, #0x10
    MOVHI R6, #0
    BLS loc_29816
loc_297EC:
    ADD R3, SP, #0xF0+var_A0
    MOV R1, R4
    RSB.W R2, R2, #0x40
    ADD R0, R3
    BLX memcpy
    LDR R7, [SP,#0xF0+var_94]
    LDR R3, [SP,#0xF0+var_60]
    MOV R1, SP
    LDR R2, [SP,#0xF0+var_9C]
    RSB.W R12, R3, #0x40
    SUB.W LR, R3, #0x40
    STR R7, [SP,#0xF0+var_E4]
    ADD R5, LR
    LDR R3, [SP,#0xF0+var_98]
    ADD R4, R12
    LDR R7, [SP,#0xF0+var_90]
    STR R2, [SP,#0xF0+var_EC]
    STR R3, [SP,#0xF0+var_E8]
    STR R7, [SP,#0xF0+var_E0]
    LDR R3, [SP,#0xF0+var_88]
    LDR R7, [SP,#0xF0+var_84]
    LDR R2, [SP,#0xF0+var_8C]
    STR R3, [SP,#0xF0+var_D8]
    STR R7, [SP,#0xF0+var_D4]
    LDR R3, [SP,#0xF0+var_78]
    LDR R7, [SP,#0xF0+var_80]
    STR R2, [SP,#0xF0+var_DC]
    STR R3, [SP,#0xF0+var_C8]
    LDR R2, [SP,#0xF0+var_7C]
    LDR R3, [SP,#0xF0+var_68]
    STR R7, [SP,#0xF0+var_D0]
    LDR R7, [SP,#0xF0+var_74]
    LDR R0, [SP,#0xF0+var_A0]
    STR R2, [SP,#0xF0+var_CC]
    STR R7, [SP,#0xF0+var_C4]
    LDR R2, [SP,#0xF0+var_6C]
    LDR R7, [SP,#0xF0+var_70]
    STR R3, [SP,#0xF0+var_B8]
    LDR R3, [SP,#0xF0+var_64]
    STR R0, [SP,#0xF0+var_F0]
    ADD R0, SP, #0xF0+dest
    STR R2, [SP,#0xF0+var_BC]
    STR R7, [SP,#0xF0
############
```assembly
loc_1122C:

loc_1D0F4:
    PUSH {R4-R6,LR}
    MOV R4, #0x3D49C
    MOV R5, R0
    MOV.W R6, #0x400
    ADD.W R1, R4, #0xA0
    MOVS R2, #0x48
    ADD.W R0, R0, #0x1000
    BLX memcpy
    ADD.W R1, R4, #0xE8
    MOV R2, R6
    MOV R0, R5
    BLX memcpy
    MOV R2, R6
    ADD.W R1, R4, #0x4E8
    ADDS R0, R5, R6
    BLX memcpy
    MOV R2, R6
    ADDW R1, R4, #0x8E8
    ADD.W R0, R5, #0x800
    BLX memcpy
    MOV R2, R6
    ADDW R1, R4, #0xCE8
    ADD.W R0, R5, #0xC00
    POP.W {R4-R6,LR}
    B.W j_memcpy
```
Output:```json
[
  "return-type:void",
  "argument-count:5",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "arg3-type:integer",
  "arg4-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (memcpy)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0x3D49C",
  "fixed-value-assignment:0x400",
  "fixed-value-assignment:0x48",
  "fixed-value-assignment:0x1000",
  "fixed-value-assignment:0xE8",
  "fixed-value-assignment:0x4E8",
  "fixed-value-assignment:0x8E8",
  "fixed-value-assignment:0xCE8",
  "fixed-value-assignment:0x800",
  "fixed-value-assignment:0xC00",
  "inferred-algorithm:data-copying",
  "inferred-algorithm:data-block-transfers"
]
```<|im_end|>
############
```assembly
loc_2E15C:
    PUSH {R4-R6,LR}
    MOV R5, R3
    LDR R6, [SP,#0x10+arg_0]
    BL sub_2DF70
    CMP R6, #3
    IT 
    MOVLE R3, #0
    MOV R4, R0
    IT 
    STRLE R3, [R0,#0x10]
    BGT loc_2E1E8
loc_2E174:
    MOVS R3, #0
    STR R3, [R4,#0x14]
loc_2E178:
    MOVS R1, #0
    STR R1, [R4,#0x18]
loc_2E17C:
    MOVS R0, #0
loc_2E17E:
    STR R0, [R4,#0x1C]
    MOV R0, R3
    BL sub_1FC7C
loc_2E186:
    LDR R1, [R4,#8]
    MOV R6, R0
    BL sub_1F358
    MOV R5, R0
    MOV R0, R6
    BL sub_1E6B0
    CBZ R5, loc_2E1DA
loc_2E198:
    LDR R0, [R4,#8]
    CBZ R0, loc_2E1A0
loc_2E19C:
    BL sub_1E6B0
loc_2E1A0:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2E1A8
loc_2E1A4:
    BL sub_1E6B0
loc_2E1A8:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2E1B0
loc_2E1AC:
    BL sub_1E6B0
loc_2E1B0:
    LDR R0, [R4,#0x14]
    CBZ R0, loc_2E1B8
loc_2E1B4:
    BL sub_1E6B0
loc_2E1B8:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_2E1C0
loc_2E1BC:
    BL sub_1E6B0
loc_2E1C0:
    LDR R0, [R4,#0x1C]
    CBZ R0, loc_2E1C8
loc_2E1C4:
    BL sub_1E6B0
loc_2E1C8:
    LDR R0, [R4,#0x20]
    CBZ R0, loc_2E1D0
loc_2E1CC:
    BL sub_19494
loc_2E1D0:
    MOV R0, R4
    BL sub_19494
    MOVS R0, #0
    POP {R4-R6,PC}
loc_2E1DA:
    MOV R0, R4
    BL sub_2DA44
    CMP R0, #0
    BEQ loc_2E198
loc_2E1E4:
    MOV R0, R4
    POP {R4-R6,PC}
loc_2E1E8:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_2E2D2
loc_2E204:
    SUBS R6, #4
    ADDS R0, R5, #4
    CMP R1, R6
    ITT 
    MOVGT R5, R0
    MOVGT R0, #0
    BGT loc_2E21C
loc_2E212:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    CBZ R0, loc_2E21C
loc_2E218:
    BL sub_1EDA8
loc_2E21C:
    CMP R6, #3
    STR R0, [R4,#0x10]
    BLE loc_2E174
loc_2E222:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_2E2DE
loc_2E23E:
    SUBS R6, #4
    ADDS R0, R5, #4
    CMP R1, R6
    ITT 
    MOVGT R5, R0
    MOVGT R3, #0
    BGT loc_2E25A
loc_2E24C:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    MOV R3, R0
    CBZ R0, loc_2E25A
loc_2E254:
    BL sub_1EDA8
    MOV R3, R0
loc_2E25A:
    CMP R6, #3
    STR R3, [R4,#0x14]
    BLE loc_2E178
loc_2E260:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_2E2D8
loc_2E27C:
    SUBS R6, #4
    ADDS R0, R5, #4
    CMP R1, R6
    ITT 
    MOVGT R5, R0
    MOVGT R1, #0
    BGT loc_2E296
loc_2E28A:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    CBZ R0, loc_2E2E8
loc_2E290:
    BL sub_1EDA8
    MOV R1, R0
loc_2E296:
    CMP R6, #3
    STR R1, [R4,#0x18]
    BLE loc_2E2E4
loc_2E29C:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_2E2CC
loc_2E2B8:
    SUBS R6, #4
    CMP R1, R6
    BGT loc_2E2CC
loc_2E2BE:
    ADDS R0, R5, #4
    BEQ loc_2E2C6
loc_2E2C2:
    BL sub_1EDA8
loc_2E2C6:
    LDR R3, [R4,#0x14]
    LDR R1, [R4,#0x18]
    B loc_2E17E
loc_2E2CC:
    LDR R3, [R4,#0x14]
    LDR R1, [R4,#0x18]
    B loc_2E17C
loc_2E2D2:
    MOVS R3, #0
    STR R3, [R4,#0x10]
    B loc_2E222
loc_2E2D8:
    MOVS R3, #0
    STR R3, [R4,#0x18]
    B loc_2E29C
loc_2E2DE:
    MOVS R3, #0
    STR R3, [R4,#0x14]
    B loc_2E260
loc_2E2E4:
    LDR R3, [R4,#0x14]
    B loc_2E17C
loc_2E2E8:
    MOV R1, R0
    B loc_2E296
```
Output:, R0, #0
    BLT loc_2E2E2
loc_2E27E:
    SUBS R6, #4
    ADDS R0, R5, #4
    CMP R1, R6
    ITT 
    MOVGT R5, R0
    MOVGT R3, #0
    BGT loc_2E29A
loc_2E28C:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    MOV R3, R0
    CBZ R0, loc_2E29A
loc_2E294:
    BL sub_1EDA8
    MOV R3, R0
loc_2E29A:
    CMP R6, #3
    STR R3, [R4,#0x18]
    BLE loc_2E17C
loc_2E2A0:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_2E2FE
loc_2E2B6:
    SUBS R6, #4
    ADDS R0, R5, #4
    CMP R1, R6
    ITT 
    MOVGT R5, R0
    MOVGT R3, #0
    BGT loc_2E2DA
loc_2E2C4:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    MOV R3, R0
    CBZ R0, loc_2E2DA
loc_2E2CE:
    BL sub_1EDA8
    MOV R3, R0
loc_2E2DA:
    CMP R6, #3
    STR R3, [R4,#0x1C]
    BLE loc_2E17E
loc_2E2E0:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BLT loc_2E30A
loc_2E302:
    SUBS R6, #4
    ADDS R0, R5, #4
    CMP R1, R6
    ITTE 
    MOVGT R5, R0
    MOVGT R3, #0
    BGT loc_2E324
loc_2E314:
    SUBS R6, R6, R1
    ADDS R5, R0, R1
    MOV R3, R0
    CBZ R0, loc_2E324
loc_2E31E:
    BL sub_1EDA8
    MOV R3, R0
loc_2E324:
    CMP R6, #3
    STR R3, [R4,#0x20]
    BLE loc_2E1DA
    B loc_2E1E4
loc_2E32A:
    LDRB R3, [R5,#1]
    LDRB R1, [R5]
    LDRB R2, [R5,#3]
    LDRB R0, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R1, R0, #0
    BL
############
```assembly
loc_1F358:
    LDR R2, [R0]
    LDR R3, [R1]
    CMP R2, #1
    PUSH {R4-R6,LR}
    MOV R4, R3
    BEQ loc_1F3CC
loc_1F364:
    CMP R3, #1
    BEQ loc_1F3BE
loc_1F368:
    CBZ R2, loc_1F372
loc_1F36A:
    LDR.W R3, [R0,R2,LSL#2]
    CMP R3, #0
    BEQ loc_1F3F2
loc_1F372:
    CBZ R4, loc_1F37A
loc_1F374:
    LDR.W R3, [R1,R4,LSL#2]
    CBZ R3, loc_1F3D8
loc_1F37A:
    CMP R2, R4
    MOV R3, R2
    IT 
    MOVLT R3, R4
    CBNZ R3, loc_1F39E
loc_1F384:
    B loc_1F3C8
loc_1F386:
    CMP R4, R3
    LDR.W R5, [R0,R3,LSL#2]
    BLT loc_1F3B4
loc_1F38E:
    LDR.W R6, [R1,R3,LSL#2]
    CMP R5, R6
    BCC loc_1F3AE
loc_1F396:
    CMP R5, R6
    BHI loc_1F3BA
loc_1F39A:
    SUBS R3, #1
    BEQ loc_1F3C8
loc_1F39E:
    CMP R2, R3
    BGE loc_1F386
loc_1F3A2:
    CMP R4, R3
    BLT loc_1F39A
loc_1F3A6:
    LDR.W R5, [R1,R3,LSL#2]
    CMP R5, #0
    BEQ loc_1F39A
loc_1F3AE:
    MOV.W R0, #0xFFFFFFFF
    POP {R4-R6,PC}
loc_1F3B4:
    MOVS R6, #0
    CMP R5, R6
    BLS loc_1F39A
loc_1F3BA:
    MOVS R0, #1
    POP {R4-R6,PC}
loc_1F3BE:
    LDR R4, [R1,#4]
    ADDS R4, #0
    IT 
    MOVNE R4, #1
    B loc_1F368
loc_1F3C8:
    MOV R0, R3
    POP {R4-R6,PC}
loc_1F3CC:
    LDR.W R2, [R0,R2,LSL#2]
    ADDS R2, #0
    IT 
    MOVNE R2, #1
    B loc_1F364
loc_1F3D8:
    MOVW R1, #0xE76C
    MOVW R0, #0xE840
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumCmp
    MOVW R2, #0x665
    BLX __assert_fail
loc_1F3F2:
    MOVW R1, #0xE76C
    MOVW R0, #0xE824
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumCmp
    MOVW R2, #0x664
    BLX __assert_fail
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "loop-detection",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:1",
  "fixed-value-assignment:0xFFFFFFFF",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0xE76C",
  "fixed-value-assignment:0xE840",
  "fixed-value-assignment:0xE824",
  "fixed-value-assignment:0x665",
  "fixed-value-assignment:0x664",
  "address-or-offset-constant:aBignumCmp",
  "inferred-algorithm:bignum-comparison",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:assertion-failure"
]
```<|im_end|>
############
```assembly
loc_56974:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11120:
    PUSH {R3,LR}
    BL sub_12C38
    POP {R3,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_12C38)",
  "integer-size-hint:32-bit",
  "inferred-algorithm:helper-invocation",
  "inferred-algorithm:side-effect-only"
]
```<|im_end|>
############
```assembly
loc_34ABC:
    PUSH {R4,LR}
    MOVS R1, #8
    MOV R4, R0
    MOVS R0, #1
    BL sub_193B8
    MOVS R2, #0
    STR R4, [R0,#4]
    STR R2, [R0]
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:8",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-initialization",
  "inferred-algorithm:structure-field-update",
  "inferred-algorithm:external-function-callback"
]
```<|im_end|>
############
```assembly
loc_56868:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1F234:
    CMP R1, #0
    BLT loc_1F254
loc_1F238:
    LDR R3, [R0]
    CMP.W R1, R3,LSL#5
    BGE loc_1F254
loc_1F240:
    ASRS R3, R1, #5
    AND.W R1, R1, #0x1F
    ADDS R3, #1
    LDR.W R0, [R0,R3,LSL#2]
    LSRS R0, R1
    AND.W R0, R0, #1
    BX LR
loc_1F254:
    MOVS R0, #0
    BX LR
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "conditional-branching-on-comparison",
  "loop-with-counter-pattern:decrementing",
  "bitwise-shifts-presence",
  "bitwise-and-presence",
  "bitwise-or-presence",
  "memory-read-from-pointer-offset",
  "memory-write-to-register",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:index-based-access"
]
```<|im_end|>
############
```assembly
loc_1142C:
    ADR R12, 0x11434
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__isoc99_sscanf_ptr - 0x55434)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:string",
  "arg1-type:format-string",
  "arg2-type:pointer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__isoc99_sscanf_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11434",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__isoc99_sscanf_ptr",
  "inferred-algorithm:input-parsing",
  "inferred-algorithm:string-formatting"
]
```<|im_end|>
############
```assembly
loc_111F0:
    ADR R12, 0x111F8
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(free_ptr - 0x551F8)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "conditional-branching-not-present",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (free_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111F8",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:free_ptr",
  "inferred-algorithm:memory-management",
  "inferred-algorithm:dynamic-memory-release"
]
```<|im_end|>
############
```assembly
loc_56894:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_11230:
    ADR R12, 0x11238
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(memcpy_ptr - 0x55238)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:unsigned-int",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "function-pointer-indirection",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11238",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:memcpy_ptr",
  "inferred-algorithm:data-copy-or-transfer",
  "inferred-algorithm:indirect-function-call"
]
```<|im_end|>
############
```assembly
loc_5690C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_111AC:
    ADR R12, 0x111B4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fopen_ptr - 0x551B4)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:2",
  "arg0-type:string",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "calling-convention-hint:floating-point-args-in-fpregs",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fopen)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x111B4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fopen_ptr",
  "address-or-offset-constant:0x551B4",
  "inferred-algorithm:file-handling",
  "inferred-algorithm:dynamic-function-resolution",
  "inferred-algorithm:library-loading-or-linking"
]
```<|im_end|>
############
```assembly
loc_2F29C:
    PUSH {R3,LR}
    MOVS R1, #0x6C
    MOVS R0, #1
    BL sub_193B8
    MOVW R2, #0xE667
    MOVW R1, #0xAE85
    MOVT.W R2, #0x6A09
    MOVT.W R1, #0xBB67
    STR R2, [R0]
    MOVW R2, #0xF372
    STR R1, [R0,#4]
    MOVT.W R2, #0x3C6E
    MOVW R1, #0xF53A
    STR R2, [R0,#8]
    MOVT.W R1, #0xA54F
    MOVW R2, #0x527F
    STR R1, [R0,#0xC]
    MOVT.W R2, #0x510E
    MOVW R1, #0x688C
    STR R2, [R0,#0x10]
    MOVT.W R1, #0x9B05
    MOVW R2, #0xD9AB
    STR R1, [R0,#0x14]
    MOVT.W R2, #0x1F83
    MOVW R1, #0xCD19
    STR R2, [R0,#0x18]
    MOVT.W R1, #0x5BE0
    MOVS R2, #0
    STR R1, [R0,#0x1C]
    STR R2, [R0,#0x60]
    STR R2, [R0,#0x68]
    STR R2, [R0,#0x64]
    POP {R3,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "byte-level-operations-present",
  "bitwise-operations-present",
  "bitwise-mask-values-present:0x6C",
  "bitwise-mask-values-present:0x1",
  "bitwise-mask-values-present:0xE667",
  "bitwise-mask-values-present:0xAE85",
  "bitwise-mask-values-present:0x6A09",
  "bitwise-mask-values-present:0xBB67",
  "bitwise-mask-values-present:0xF372",
  "bitwise-mask-values-present:0xF53A",
  "bitwise-mask-values-present:0x3C6E",
  "bitwise-mask-values-present:0xA54F",
  "bitwise-mask-values-present:0x527F",
  "bitwise-mask-values-present:0x510E",
  "bitwise-mask-values-present:0x688C",
  "bitwise-mask-values-present:0x9B05",
  "bitwise-mask-values-present:0xD9AB",
  "bitwise-mask-values-present:0x1F83",
  "bitwise-mask-values-present:0xCD19",
  "bitwise-mask-values-present:0x5BE0",
  "memory-write-to-output-parameter-offset",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:constant-data-storage"
]
```<|im_end|>
############
```assembly
loc_56898:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_33BBC:
    PUSH {R4-R7,LR}
    MOV R5, #0x56190
    SUB SP, SP, #0xC
    MOV R6, R0
    LDR R3, [R5]
    MOV R0, SP
    STR R3, [SP,#0x20+var_1C]
    BLX time
    LDR R3, [SP,#0x20+var_20]
    ADDS R3, #1
    BEQ loc_33C04
loc_33BDA:
    MOV R0, SP
    MOV R4, R6
    BLX localtime
    LDR.W LR, [SP,#0x20+var_1C]
    LDR R7, [R5]
    CMP LR, R7
    MOV R5, R0
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM R5!, {R0-R3}
    STM R4!, {R0-R3}
    LDM.W R5, {R0-R2}
    STM.W R4, {R0-R2}
    MOV R0, R6
    BNE loc_33C22
loc_33C00:
    ADD SP, SP, #0xC
    POP {R4-R7,PC}
loc_33C04:
    MOVW R3, #0x42A0
    MOVW R1, #0x42A8
    MOVW R0, #0x42B0
    MOVT.W R3, #4
    MOVT.W R1, #4
    MOVS R2, #0xE
    MOVT.W R0, #4
    BLX __assert_fail
loc_33C22:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-loop-counter",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (time)",
  "external-call-type:data-processing-helper (localtime)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:0x42A0",
  "address-or-offset-constant:0x42A8",
  "address-or-offset-constant:0x42B0",
  "inferred-algorithm:loop-with-condition",
  "inferred-algorithm:time-related-processing",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:stack-protection-check"
]
```<|im_end|>
############
```assembly
loc_1129C:
    ADR R12, 0x112A4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(realloc_ptr - 0x552A4)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:size_t",
  "arg2-type:size_t",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (realloc)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112A4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:realloc_ptr",
  "address-or-offset-constant:-0x552A4",
  "inferred-algorithm:dynamic-memory-allocation",
  "inferred-algorithm:heap-pointer-update"
]
```<|im_end|>
############
```assembly
loc_11338:
    ADR R12, 0x11340
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(malloc_ptr - 0x55340)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (malloc)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11340",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:malloc_ptr",
  "address-or-offset-constant:-0x55340",
  "inferred-algorithm:dynamically-allocated-memory-management",
  "inferred-algorithm:indirect-function-pointer"
]
```<|im_end|>
############
```assembly
loc_11528:
    ADR R12, 0x11530
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(abort_ptr - 0x55530)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (abort_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11530",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:abort_ptr",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:program-termination-or-abort"
]
```<|im_end|>
############
```assembly
loc_5689C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_26F30:
    PUSH.W {R4-R11,LR}
    MOVW R4, #0x6190
    SUB SP, SP, #0x154
    MOVT.W R4, #5
    MOV R8, R1
    MOV R9, R2
    LDR R1, [R4]
    LDR R2, [R0]
    STR R3, [SP,#0x178+var_168]
    LDR R3, [R0,#0x18]
    STR R4, [SP,#0x178+var_16C]
    STR R1, [SP,#0x178+var_2C]
    LDR R4, [R2,#0x38]
    CBZ R3, loc_26F8E
loc_26F52:
    LDR R3, [R0,#4]
    MOV R11, R0
    CBZ R3, loc_26F8E
loc_26F58:
    LDR R2, [R3]
    CMP R2, #2
    BEQ.W loc_27208
loc_26F60:
    LDR R3, [R4,#4]
    LDR R5, [R3,#0x14]
    CMP R5, #0x40
    BHI.W loc_2751C
loc_26F6A:
    LDR R3, [R3]
    ADD R7, SP, #0x178+var_6C
    BLX R3
    LDR R3, [R4,#4]
    MOV R2, R9
    MOV R1, R8
    LDR R3, [R3,#8]
    MOV R6, R0
    BLX R3
    LDR R3, [R4,#4]
    MOV R0, R6
    MOV R1, R7
    LDR R3, [R3,#0xC]
    BLX R3
    LDR.W R4, [R11,#4]
    LDR R3, [R4]
    CBZ R3, loc_26FA2
loc_26F8E:
    MOVS R0, #0
loc_26F90:
    LDR R3, [SP,#0x178+var_16C]
    LDR R2, [SP,#0x178+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_27518
loc_26F9C:
    ADD SP, SP, #0x154
    POP.W {R4-R11,PC}
loc_26FA2:
    MOV R1, R5
    MOV R0, R7
    LDR.W R8, [R11,#0x18]
    BL sub_1EDA8
    MOV R6, R0
    LDR R0, [R4,#0x1C]
    BL sub_1F158
    MOV R9, R0
    MOV R0, R6
    BL sub_1F158
    CMP R9, R0
    BLT.W loc_271D8
loc_26FC4:
    MOV R0, R7
    MOV R1, R5
    ADD R2, SP, #0x178+var_80
    BL sub_338F8
    LDR R1, [R4,#0x1C]
    ADD R3, SP, #0x178+var_80
    MOVS R2, #0x14
    MOVW R0, #0xFD78
    STR R2, [SP,#0x178+var_178]
    MOVT.W R0, #3
    MOV R2, R8
    BL sub_24070
    MOV R1, R0
    MOV R7, R0
    ADD.W R0, R4, #0x20
    BL sub_264F8
    MOV R9, R0
    CMP R0, #0
    BEQ.W loc_274E2
loc_26FF8:
    LDR R1, [R4,#0x1C]
    LDR.W R0, [R9,#4]
    BL sub_200D4
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_27014
loc_27010:
    BL sub_1E6B0
loc_27014:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_2701E
loc_2701A:
    BL sub_1E6B0
loc_2701E:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27028
loc_27024:
    BL sub_1E6B0
loc_27028:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R2, [R4,#0x1C]
    MOV R1, R8
    MOV R0, R5
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R7
    BL sub_20228
    MOV R9, R0
    MOV R0, R7
    BL sub_1E6B0
    CMP.W R9, #0
    BEQ.W loc_271EE
loc_2708E:
    LDR R2, [R4,#0x1C]
    MOV R1, R9
    MOV R0, R8
    BL sub_1EAC0
    MOV R6, R0
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    CMP R5, #0
    BEQ.W loc_27536
loc_270AC:
    CMP R6, #0
    BEQ.W loc_27200
loc_270B2:
    MOV R0, R5
    BL sub_1F158
    MOV R3, R0
    ADD.W R9, R3, #0xF
    ADDS R3, #8
    MOV R0, R6
    IT 
    MOVPL R9, R3
    BL sub_1F158
    LDR.W R3, [R11]
    MOV.W R2, R9,ASR#3
    SUBS R4, R2, #1
    MOV R7, R2
    ADD.W R8, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R8, R0
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR R2, [SP,#0x178+var_168]
    MOV.W R8, R8,ASR#3
    MOVS R1, #1
    STR R7, [SP,#0x178+var_164]
    MOV R10, R0
    ADDS R0, #8
    ADD R0, R7
    ADD R0, R8
    ADDS R0, #8
    STR R0, [R2]
    BL sub_193B8
    MOV.W R2, R10,ASR#24
    MOV.W R3, R10,ASR#16
    STRB.W R10, [R0,#3]
    MOV R7, R0
    STRB R2, [R0]
    MOV R2, R10
    STRB R3, [R0,#1]
    MOV.W R3, R10,ASR#8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR.W R1, [R11]
    UXTB.W R11, R8
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    MOV R3, R0
    LDR R0, [SP,#0x178+var_164]
    ADD.W R2, R3, R10
    ADD.W R1, R0, R8
    ADDS R1, #8
    MOV R12, R0
    UXTB R0, R0
    MOV.W LR, R1,ASR#24
    STRB.W LR, [R3,R10]
    ASRS R3, R1, #0x10
    STRB R0, [R2,#7]
    STRB R3, [R2,#1]
    ADD.W R3, R0, R11
    MOV R0, R12
    ASRS R1, R1, #8
    ADDS R3, #8
    STRB R1, [R2,#2]
    STRB R3, [R2,#3]
    MOV.W R1, R9,ASR#27
    MOV.W R3, R9,ASR#19
    STRB R1, [R2,#4]
    MOV.W R9, R9,ASR#11
    STRB R3, [R2,#5]
    ADD.W R10, R2, #8
    STRB.W R9, [R2,#6]
    CBZ R0, loc_2718C
loc_27174:
    MOV R9, R10
loc_27176:
    MOV R1, R4
    MOV R0, R5
    BL sub_1F20C
    SUBS R4, #1
    ADDS R2, R4, #1
    STRB.W R0, [R9],#1
    BNE loc_27176
loc_27188:
    LDR R3, [SP,#0x178+var_164]
    ADD R10, R3
loc_2718C:
    MOV.W R3, R8,ASR#24
    STRB.W R11, [R10,#3]
    STRB.W R3, [R10]
    ADD.W R4, R8, #0xFFFFFFFF
    MOV.W R3, R8,ASR#16
    ADD.W R10, R10, #4
    STRB.W R3, [R10,#-3]
    MOV.W R3, R8,ASR#8
    STRB.W R3, [R10,#-2]
    CMP.W R8, #0
    BEQ loc_271C8
loc_271B6:
    MOV R1, R4
    MOV R0, R6
    BL sub_1F20C
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R10],#1
    BNE loc_271B6
loc_271C8:
    MOV R0, R5
    BL sub_1E6B0
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R7
    B loc_26F90
loc_271D8:
    SUB.W R1, R0, R9
    MOV R0, R6
    BL sub_1F910
    MOV R3, R0
    MOV R0, R6
    MOV R6, R3
    BL sub_1E6B0
    B loc_26FC4
loc_271EE:
    MOV R0, R8
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    CMP R5, #0
    BEQ.W loc_26F8E
loc_27200:
    MOV R0, R5
    BL sub_1E6B0
    B loc_26F8E
loc_27208:
    LDR R5, [R3,#0xC]
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    ADD.W R4, SP, #0x178+var_155
    MOVS R6, #0
    LSRS R5, R5, #3
    CBZ R5, loc_27236
loc_2721A:
    MOV R1, R6
    LDR.W R0, [R11,#0x18]
    BL sub_1F20C
    ADDS R6, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R6
    BNE loc_2721A
loc_27236:
    ADD R7, SP, #0x178+var_6C
    ADD R0, SP, #0x178+var_154
    MOV R1, R7
    BL sub_31B84
    LDRB.W R3, [SP,#0x178+var_4D]
    LDRB.W R2, [SP,#0x178+var_6C]
    MOVS R1, #0x20
    MOV R0, R7
    AND.W R3, R3, #0x7F
    ORR.W R3, R3, #0x40
    BIC.W R2, R2, #7
    STRB.W R3, [SP,#0x178+var_4D]
    STRB.W R2, [SP,#0x178+var_6C]
    BL sub_1EE64
    STR R0, [SP,#0x178+var_164]
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    LDR.W R3, [R11,#4]
    ADD R0, SP, #0x178+var_154
    LDR R2, [R3,#0xC]
    LSRS R1, R2, #3
    RSB.W R2, R1, R2,LSR#2
    ADD R1, R7
    BL sub_31A54
    MOV R2, R9
    MOV R1, R8
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R1, R7
    ADD R0, SP, #0x178+var_154
    BL sub_31B84
    MOVS R1, #0x40
    MOV R0, R7
    BL sub_1EE64
    MOV R1, R0
    STR R0, [SP,#0x178+var_160]
    LDR.W R0, [R11,#4]
    ADDS R0, #0x1C
    BL sub_264F8
    MOV R6, R0
    CMP R0, #0
    BEQ.W loc_27508
loc_272B0:
    SUBS R5, #1
    ADD R0, SP, #0x178+var_154
    BL sub_319CC
    CMP R5, #0
    ADD.W R4, SP, #0x178+var_155
    BLE.W loc_27500
loc_272C2:
    MOV.W R10, #0
    STR R5, [SP,#0x178+var_15C]
loc_272C8:
    MOV R1, R10
    LDR R0, [R6,#8]
    BL sub_1F20C
    ADD.W R10, R10, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R10
    BNE loc_272C8
loc_272E4:
    LDR R1, [SP,#0x178+var_15C]
loc_272E6:
    LDR R0, [R6,#8]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB R0, [R4]
    LDR R0, [R6,#4]
    BL sub_1F234
    LDRB R3, [R4]
    MOVS R2, #1
    MOV R1, R4
    ORR.W R3, R3, R0,LSL#7
    ADD R0, SP, #0x178+var_154
    STRB R3, [R4]
    BL sub_31A54
    CMP R5, #0
    BLE.W loc_274F8
loc_27312:
    MOV.W R10, #0
    STR R5, [SP,#0x178+var_15C]
loc_27318:
    MOV R1, R10
    LDR.W R0, [R11,#0xC]
    BL sub_1F20C
    ADD.W R10, R10, #1
    MOVS R2, #1
    MOV R1, R4
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    CMP R5, R10
    BNE loc_27318
loc_27336:
    LDR R1, [SP,#0x178+var_15C]
loc_27338:
    LDR.W R0, [R11,#0xC]
    BL sub_1F20C
    MOVS R1, #0
    AND.W R3, R0, #0x7F
    LDR.W R0, [R11,#8]
    STRB R3, [R4]
    BL sub_1F234
    LDRB R3, [R4]
    MOV R1, R4
    MOVS R2, #1
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R4]
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R2, R9
    MOV R1, R8
    ADD R0, SP, #0x178+var_154
    BL sub_31A54
    MOV R1, R7
    ADD R0, SP, #0x178+var_154
    BL sub_31B84
    MOV R0, R7
    MOVS R1, #0x40
    BL sub_1EE64
    LDR.W R3, [R11,#4]
    LDR R7, [SP,#0x178+var_164]
    LDR R2, [R3,#0x14]
    MOV R1, R7
    MOV R4, R0
    BL sub_1EAC0
    MOV R5, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R7, [SP,#0x178+var_160]
    MOV R1, R5
    MOV R0, R7
    BL sub_1FC80
    MOV R4, R0
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR.W R3, [R11,#4]
    MOV R0, R4
    LDR R1, [R3,#0x14]
    BL sub_200D4
    MOV R7, R0
    MOV R0, R4
    BL sub_1E6B0
    LDR.W R3, [R11]
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR.W R3, [R11,#4]
    MOVS R1, #1
    MOV R8, R0
    LDR R0, [R3,#0xC]
    LDR R3, [SP,#0x178+var_168]
    LSRS R0, R0, #3
    ADD.W R0, R8, R0,LSL#1
    ADDS R0, #8
    STR R0, [R3]
    BL sub_193B8
    MOV.W R2, R8,ASR#24
    MOV.W R3, R8,ASR#16
    STRB R2, [R0]
    MOV R5, R0
    STRB R3, [R0,#1]
    MOV.W R3, R8,ASR#8
    STRB.W R8, [R0,#3]
    MOV R2, R8
    STRB R3, [R0,#2]
    ADDS R3, R0, #4
    LDR.W R1, [R11]
    MOV R0, R3
    LDR R1, [R1,#0x30]
    BLX memcpy
    LDR.W R1, [R11,#4]
    LDR R1, [R1,#0xC]
    LSRS R1, R1, #0x1A
    STRB.W R1, [R0,R8]
    ADD.W R2, R0, R8
    LDR.W R3, [R11,#4]
    ADDS R4, R2, #4
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #0x12
    STRB R3, [R2,#1]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #0xA
    STRB R3, [R2,#2]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    LSRS R3, R3, #3
    LSLS R3, R3, #1
    STRB R3, [R2,#3]
    LDR.W R3, [R11,#4]
    LDR R3, [R3,#0xC]
    MOV.W R9, R3,LSR#3
    CMP.W R9, #1
    BLE loc_274F0
loc_27454:
    MOV R10, R4
    MOV.W R11, #0
    ADD.W R8, R9, #0xFFFFFFFF
    STR.W R8, [SP,#0x178+var_168]
loc_27462:
    MOV R1, R11
    LDR R0, [R6,#8]
    BL sub_1F20C
    ADD.W R11, R11, #1
    CMP R11, R8
    STRB.W R0, [R10],#1
    BNE loc_27462
loc_27476:
    LDR R1, [SP,#0x178+var_168]
    ADD R4, R11
loc_2747A:
    LDR R0, [R6,#8]
    MOV R8, R4
    BL sub_1F20C
    MOVS R1, #0
    AND.W R0, R0, #0x7F
    STRB.W R0, [R8],#1
    LDR R0, [R6,#4]
    BL sub_1F234
    LDRB R3, [R4]
    MOVS R2, #0
    ORR.W R0, R3, R0,LSL#7
    STRB R0, [R4]
    LDR R0, [R6,#4]
    STR R2, [R6]
    CBZ R0, loc_274A6
loc_274A2:
    BL sub_1E6B0
loc_274A6:
    LDR R0, [R6,#8]
    CBZ R0, loc_274AE
loc_274AA:
    BL sub_1E6B0
loc_274AE:
    LDR R0, [R6,#0xC]
    CBZ R0, loc_274B6
loc_274B2:
    BL sub_1E6B0
loc_274B6:
    MOVS R4, #0
    MOV R0, R6
    STRB R4, [R6,#0x10]
    BL sub_19494
    CMP.W R9, #0
    BEQ loc_274D8
loc_274C6:
    MOV R1, R4
    MOV R0, R7
    BL sub_1F20C
    ADDS R4, #1
    CMP R9, R4
    STRB.W R0, [R8],#1
    BNE loc_274C6
loc_274D8:
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R5
    B loc_26F90
loc_274E2:
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    B loc_26F8E
loc_274F0:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_168]
    MOV R1, R3
    B loc_2747A
loc_274F8:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_15C]
    MOV R1, R3
    B loc_27338
loc_27500:
    MOVS R3, #0
    STR R3, [SP,#0x178+var_15C]
    MOV R1, R3
    B loc_272E6
loc_27508:
    LDR R0, [SP,#0x178+var_160]
    BL sub_1E6B0
    LDR R0, [SP,#0x178+var_164]
    BL sub_1E6B0
    MOV R0, R6
    B loc_26F90
loc_27518:
    BLX __stack_chk_fail
loc_2751C:
    MOVW R1, #0xFCBC
    MOVW R0, #0xFD5C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcdsaSign
    MOVW R2, #0x9E9
    BLX __assert_fail
loc_27536:
    CMP R6, #0
    BEQ.W loc_26F8E
loc_2753C:
    MOV R0, R6
    BL sub_1E6B0
    MOV R0, R5
    B loc_26F90
```
Output:71D8
loc_27144:
    LDR R1, [R4,#0x1C]
    LDR.W R0, [R9,#4]
    BL sub_200D4
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_27164
loc_27160:
    BL sub_1E6B0
loc_27164:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_2716E
loc_2716A:
    BL sub_1E6B0
loc_2716E:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27178
loc_27174:
    BL sub_1E6B0
loc_27178:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R2, [R4,#0x1C]
    MOV R1, R8
    MOV R0, R5
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R8
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R1, [R4,#0x1C]
    MOV R0, R7
    BL sub_20228
    MOV R9, R0
    MOV R0, R7
    BL sub_1E6B0
    CMP.W R9, #0
    BEQ.W loc_27222
loc_271DC:
    LDR R1, [R4,#0x1C]
    LDR.W R0, [R9,#4]
    BL sub_200D4
    MOVS R3, #0
    STR.W R3, [R9]
    MOV R5, R0
    LDR.W R0, [R9,#4]
    CBZ R0, loc_271FC
loc_271F8:
    BL sub_1E6B0
loc_271FC:
    LDR.W R0, [R9,#8]
    CBZ R0, loc_27206
loc_27202:
    BL sub_1E6B0
loc_27206:
    LDR.W R0, [R9,#0xC]
    CBZ R0, loc_27210
loc_2720A:
    BL sub_1E6B0
loc_27210:
    MOVS R3, #0
    MOV R0, R9
    STRB.W R3, [R9,#0x10]
    BL sub_19494
    LDR R2, [R4,#0x1C]
    MOV R1, R8
    MOV R0, R5
    BL sub_1EAC0
    LDR R1, [R4,#0x1C]
    MOV R9, R0
    MOV R0, R6
    BL sub_200D4
    MOV R8, R0
    MOV R0, R6
    BL sub_1E6B0
    MOV R1, R8
    MOV R0, R9
    BL sub_1FC80
    MOV R6, R0
    MOV R0, R9
    BL sub_1E6
############
```assembly
loc_11254:
    ADR R12, 0x1125C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(memcmp_ptr - 0x5525C)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcmp)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x1125C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:memcmp_ptr",
  "inferred-algorithm:string-comparison",
  "inferred-algorithm:data-comparison"
]
```<|im_end|>
############
```assembly
loc_2CB68:
    PUSH {R3-R5,LR}
    MOVW R1, #0xA374
    MOVS R2, #0
    MOVT.W R1, #3
    BL sub_3694C
    MOV R5, R0
    CBZ R0, locret_2CB8C
loc_2CB7C:
    BL sub_2AB90
    MOV R4, R0
    MOV R0, R5
    BLX fclose
    MOV R0, R4
    POP {R3-R5,PC}
loc_2CB8C:
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:file-pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_3694C)",
  "external-call-type:unspecified-helper (sub_2AB90)",
  "external-call-type:operating-system-interaction (fclose)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0xA374",
  "fixed-value-assignment:0",
  "fixed-value-assignment:3",
  "inferred-algorithm:file-handling",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:conditional-resource-release"
]
```<|im_end|>
############
```assembly
loc_1D7F6:
    RSB.W R2, R2, #0x20
    LSR.W R2, R1, R2
loc_1D7FE:
    LDR R1, [R0]
    CMP R1, R10
    BCC loc_1D8E6
loc_1D804:
    LDR.W R1, [R0,R10,LSL#2]
    MOVS R7, #0
    ADDS.W R8, LR, R1
    ADD R1, LR
    ADC.W R9, R7, #0
    STR.W R1, [R0,R10,LSL#2]
    EOR.W LR, R9, #1
    MOVS R1, #0
    STR R1, [SP,#0x30+var_2C]
    CMP R2, #0
    ITE 
    MOVNE R1, #0
    ANDEQ.W R1, LR, #1
    MOV.W R10, R10,LSL#2
    STR.W R9, [SP,#0x30+var_30]
    CMP R1, #0
    BNE loc_1D8AC
loc_1D836:
    LDR R6, [R0]
    ADD.W R12, R3, #2
    CMP R6, R12
    BCC loc_1D8CC
loc_1D840:
    ADD.W R12, R10, #4
    STR R1, [SP,#0x30+var_24]
    ADDS R3, #3
    LDR.W R6, [R0,R12]
    MOV LR, R6
    LDRD.W R6, R7, [SP,#0x30+var_30]
    ADDS.W R6, R6, LR
    ADC.W R7, R7, #0
    ADDS.W R8, R6, R2
    ADC.W R9, R7, #0
    STR.W R9, [SP,#0x30+var_28]
    LDRD.W R1, R2, [SP,#0x30+var_28]
    STR.W R8, [R0,R12]
    ORRS R2, R1
    BEQ loc_1D8AC
loc_1D872:
    LDR R2, [R0]
    CMP R2, R3
    ITT 
    ADDCS.W R10, R10, #8
    ADDCS R10, R0
    BCS loc_1D888
loc_1D880:
    B loc_1D8B2
loc_1D882:
    LDR R2, [R0]
    CMP R2, R3
    BCC loc_1D8B2
loc_1D888:
    LDR.W R2, [R10]
    MOV.W R9, #0
    MOVS R5, #0
    ADDS R3, #1
    MOV R8, R2
    ADDS.W R6, R8, #1
    ADC.W R7, R9, #0
    ADDS R2, #1
    STR.W R2, [R10],#4
    MOV R4, R7
    ORRS.W R2, R4, R5
    BNE loc_1D882
loc_1D8AC:
    ADD SP, SP, #0x10
    POP.W {R4-R10,PC}
loc_1D8B2:
    MOVW R1, #0xE76C
    MOVW R0, #0xE794
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aInternalAddShi
    MOVW R2, #0x209
    BLX __assert_fail
loc_1D8CC:
    MOVW R1, #0xE76C
    MOVW R0, #0xE794
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aInternalAddShi
    MOVW R2, #0x205
    BLX __assert_fail
loc_1D8E6:
    MOVW R1, #0xE76C
    MOVW R0, #0xE794
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aInternalAddShi
    MOV.W R2, #0x200
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shifts",
  "bitwise-xor",
  "bitwise-or",
  "conditional-branching",
  "loop-counter-patterns",
  "incrementing-loop-counter",
  "decrementing-loop-counter",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "address-or-offset-constant:aInternalAddShi",
  "address-or-offset-constant:0xE76C",
  "address-or-offset-constant:0xE794",
  "address-or-offset-constant:0x209",
  "address-or-offset-constant:0x205",
  "address-or-offset-constant:0x200",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:array-index-checking",
  "inferred-algorithm:conditional-data-access",
  "inferred-algorithm:loop-with-conditionals"
]
```<|im_end|>
############
```assembly
loc_114C4:
    ADR R12, 0x114CC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(endpwent_ptr - 0x554CC)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:undefined",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-used",
  "standard-function-return-not-applicable",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (endpwent_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x114CC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:endpwent_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:password-database-access"
]
```<|im_end|>
############
```assembly
loc_231B4:
    LDR R3, [R0]
    CMP R3, #0
    BEQ.W loc_233E0
loc_231BC:
    PUSH.W {R4-R11,LR}
    MOV R4, R0
    SUB SP, SP, #0xC
    MOV R0, R3
    BL sub_1F158
    ADD.W R5, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVPL R5, R0
    LDR R0, [R4,#4]
    BL sub_1F158
    ASRS R5, R5, #2
    ADDS R5, #0xD
    ADDS.W R3, R0, #0xF
    ADD.W R2, R0, #0x12
    LDR R0, [R4,#8]
    IT 
    MOVMI R3, R2
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    ADDS.W R3, R0, #0xF
    ADD.W R2, R0, #0x12
    LDR R0, [R4,#0xC]
    IT 
    MOVMI R3, R2
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    MOVS R1, #1
    ADD.W R3, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVMI R0, R3
    ADD.W R0, R5, R0,ASR#2
    BL sub_193B8
    MOV R7, R0
    CMP R0, #0
    BEQ.W loc_233E4
loc_23226:
    MOV R3, #0x3F57C
    LDRH R2, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    STRH R2, [R0]
    STRB R3, [R0,#2]
    LDR R0, [R4]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE.W loc_233CC
loc_23252:
    MOVW R5, #0xF4DC
    ADD.W R9, R7, #1
    MOVT.W R5, #3
    MOV R8, R6
loc_23260:
    MOV.W R1, R8,ASR#1
    LDR R0, [R4]
    BL sub_1F20C
    AND.W R3, R8, #1
    ADD.W R8, R8, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R8, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R9,#1]!
    BNE loc_23260
loc_2328A:
    MOV R9, #0x3F580
    ADDS R3, R6, #3
    ADDS R2, R6, #6
    LDR.W R0, [R9]
    STR R2, [SP,#0x30+var_2C]
    STR R0, [R7,R3]
    LDR R0, [R4,#4]
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE.W loc_233DA
loc_232C0:
    ADDS R2, R6, #5
    MOV R11, R8
    ADD.W R10, R7, R2
loc_232C8:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#4]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_232C8
loc_232F2:
    LDR.W R0, [R9]
    ADDS R6, #7
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#8]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233D6
loc_23320:
    ADD.W R2, R8, #3
    MOV R11, R6
    ADD.W R10, R7, R2
loc_2332A:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#8]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2332A
loc_23354:
    LDR.W R0, [R9]
    ADD.W R8, R8, #5
    LDR R3, [SP,#0x30+var_2C]
    ADD R8, R6
    ADD R3, R6
    STR.W R0, [R7,R8]
    LDR R0, [R4,#0xC]
    MOV R6, R3
    BL sub_1F158
    ADD.W R8, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R8, R0
    MOV.W R8, R8,ASR#2
    CMP.W R8, #0
    IT 
    ADDGT.W R8, R8, #0xFFFFFFFF
    BLE loc_233D0
loc_23388:
    ADD.W R10, R6, #3
    MOV R9, R8
    ADD R10, R7
loc_23390:
    MOV.W R1, R9,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R3, R0, #0xF
    ADD R3, R5
    LDRB R3, [R3,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_23390
loc_233BA:
    ADDS R6, #5
    MOV R0, R7
    ADD R7, R6
    MOVS R3, #0
    STRB.W R3, [R7,R8]
loc_233C6:
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_233CC:
    MOVS R6, #0
    B loc_23252
loc_233D0:
    MOV.W R8, #0
    B loc_23388
loc_233D6:
    MOVS R6, #0
    B loc_23320
loc_233DA:
    MOV.W R8, #0
    B loc_232C0
loc_233E0:
    MOVS R0, #0
    BX LR
loc_233E4:
    MOVS R0, #0
    B loc_233C6
```
Output: #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2332A
loc_23352:
    LDR.W R0, [R9]
    ADDS R6, #9
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0xC]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233D2
loc_23380:
    ADD.W R2, R8, #5
    MOV R11, R6
    ADD.W R10, R7, R2
loc_2338A:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_2338A
loc_233B2:
    LDR.W R0, [R9]
    ADDS R6, #11
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0x10]
    MOV R8, R3
    ADDS R3, #4
    STR R3, [SP,#0x30+var_2C]
    BL sub_1F158
    ADDS R6, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R6, R0
    ASRS R6, R6, #2
    CMP R6, #0
    IT 
    ADDGT.W R6, R6, #0xFFFFFFFF
    BLE loc_233CE
loc_233E0:
    ADDS R3, R6, #7
    MOV R11, R6
    ADD.W R10, R7, R3
loc_233EA:
    MOV.W R1, R11,ASR#1
    LDR R0, [R4,#0x10]
    BL sub_1F20C
    AND.W R3, R11, #1
    ADD.W R11, R11, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R11, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB R3, [R0,#0x10]
    STRB.W R3, [R10,#1]!
    BNE loc_233EA
loc_23414:
    LDR.W R0, [R9]
    ADDS R6, #13
    LDR R3, [SP,#0x30+var_2C]
    ADD R6, R8
    ADD R3, R8
    STR R0, [R7,R6]
    LDR R0, [R4,#0x1
############
```assembly
loc_292F4:
    PUSH.W {R4-R9,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0xB4
    MOV R4, R0
    MOVS R2, #0x5C
    LDR.W R3, [R9]
    MOV R8, R1
    ADD R0, SP, #0xD0+dest
    ADD.W R1, R4, #0xB8
    STR R3, [SP,#0xD0+var_24]
    BLX memcpy
    ADD R1, SP, #0xD0+dest
    ADD R0, SP, #0xD0+src
    BL sub_29130
    ADD.W R1, R4, #0x5C
    MOVS R2, #0x5C
    ADD R0, SP, #0xD0+dest
    BLX memcpy
    LDR R3, [SP,#0xD0+var_38]
    LDR R2, [SP,#0xD0+var_40]
    LDR R1, [SP,#0xD0+var_3C]
    ADDS R3, #0x10
    ADD.W R4, R2, #0x10
    STR R3, [SP,#0xD0+var_38]
    CMP R3, #0xF
    ITE 
    MOVHI R3, R1
    ADDLS R3, R1, #1
    CMP R4, #0x3F
    STR R3, [SP,#0xD0+var_3C]
    BLS loc_293E6
loc_29348:
    ADD R4, SP, #0xD0+src
    MOV R0, R2
    MOVS R5, #0x10
    MOVS R6, #0
loc_29350:
    ADD R3, SP, #0xD0+var_80
    MOV R1, R4
    RSB.W R2, R2, #0x40
    ADD R0, R3
    BLX memcpy
    LDR R3, [SP,#0xD0+var_40]
    LDR R7, [SP,#0xD0+var_74]
    MOV R1, SP
    RSB.W R12, R3, #0x40
    SUB.W LR, R3, #0x40
    LDR R3, [SP,#0xD0+var_78]
    ADD R5, LR
    STR R7, [SP,#0xD0+var_C4]
    ADD R4, R12
    LDR R7, [SP,#0xD0+var_70]
    STR R3, [SP,#0xD0+var_C8]
    LDR R3, [SP,#0xD0+var_64]
    STR R7, [SP,#0xD0+var_C0]
    LDR R7, [SP,#0xD0+var_6C]
    STR R3, [SP,#0xD0+var_B4]
    LDR R3, [SP,#0xD0+var_50]
    LDR R2, [SP,#0xD0+var_7C]
    STR R7, [SP,#0xD0+var_BC]
    STR R3, [SP,#0xD0+var_A0]
    LDR R7, [SP,#0xD0+var_60]
    LDR R3, [SP,#0xD0+var_4C]
    STR R2, [SP,#0xD0+var_CC]
    STR R7, [SP,#0xD0+var_B0]
    LDR R2, [SP,#0xD0+var_68]
    LDR R7, [SP,#0xD0+var_5C]
    STR R3, [SP,#0xD0+var_9C]
    LDR R3, [SP,#0xD0+var_48]
    LDR R0, [SP,#0xD0+var_80]
    STR R2, [SP,#0xD0+var_B8]
    STR R7, [SP,#0xD0+var_AC]
    LDR R2, [SP,#0xD0+var_54]
    LDR R7, [SP,#0xD0+var_58]
    STR R3, [SP,#0xD0+var_98]
    LDR R3, [SP,#0xD0+var_44]
    STR R0, [SP,#0xD0+var_D0]
    ADD R0, SP, #0xD0+dest
    STR R2, [SP,#0xD0+var_A4]
    STR R7, [SP,#0xD0+var_A8]
    STR R3, [SP,#0xD0+var_94]
    BL sub_28778
    CMP R5, #0x3F
    MOV.W R0, #0
    STR R6, [SP,#0xD0+var_40]
    MOV R2, R0
    BHI loc_29350
loc_293C0:
    MOV R1, R4
    ADD R0, SP, #0xD0+var_80
    MOVS R3, #0x4C
    MOV R2, R5
    BLX __memcpy_chk
    STR R5, [SP,#0xD0+var_40]
loc_293CE:
    ADD R1, SP, #0xD0+dest
    MOV R0, R8
    BL sub_29130
    LDR R2, [SP,#0xD0+var_24]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_29406
loc_293E0:
    ADD SP, SP, #0xB4
    POP.W {R4-R9,PC}
loc_293E6:
    ADD R5, SP, #0xD0+src
    ADD R3, SP, #0xD0+var_20
    ADDS R4, R3, R2
    LDM R5!, {R0-R3}
    STR.W R0, [R4,#-0x60]
    STR.W R1, [R4,#-0x5C]
    STR.W R2, [R4,#-0x58]
    STR.W R3, [R4,#-0x54]
    LDR R3, [SP,#0xD0+var_40]
    ADDS R3, #0x10
    STR R3, [SP,#0xD0+var_40]
    B loc_293CE
loc_29406:
    BLX __stack_chk_fail
```
Output: memset
    ADD SP, SP, #0xB4
    POP.W {R4-R9,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_1E6B0:
    LDR R1, [R0]
    PUSH {R4,LR}
    ADDS R1, #1
    MOV R4, R0
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_194E4)",
  "integer-size-hint:32-bit",
  "byte-level-operations:LSL",
  "byte-level-operations:Addition",
  "byte-level-operations:Multiplication",
  "byte-level-operations:Bitwise-AND",
  "memory-read-from-input-parameter-offset:0",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:sub_19494",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:increment-or-counter-update",
  "inferred-algorithm:array-access-or-pointer-arithmetic"
]
```<|im_end|>
############
```assembly
loc_56938:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2615C:
    PUSH.W {R4-R11,LR}
    MOV R8, R1
    SUB SP, SP, #0xC
    MOV R10, R2
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_262FC
loc_2616E:
    LDM.W R0, {R3,R7}
    STR R3, [SP,#0x30+var_2C]
    CBZ R7, loc_2617E
loc_26176:
    MOV R0, R7
    BL sub_1E688
    MOV R7, R0
loc_2617E:
    LDR R6, [R4,#8]
    CBZ R6, loc_2618A
loc_26182:
    MOV R0, R6
    BL sub_1E688
    MOV R6, R0
loc_2618A:
    LDR R5, [R4,#0xC]
    CBZ R5, loc_26196
loc_2618E:
    MOV R0, R5
    BL sub_1E688
    MOV R5, R0
loc_26196:
    MOVS R1, #0x14
    MOVS R0, #1
    LDRB.W R9, [R4,#0x10]
    BL sub_193B8
    LDR R2, [SP,#0x30+var_2C]
    MOVS R1, #0x14
    MOVS.W R3, R9
    IT 
    MOVNE R3, #1
    MOV R11, R0
    STR R2, [R0]
    STRB R3, [R0,#0x10]
    MOVS R0, #1
    LDR R4, [R4]
    STR.W R6, [R11,#8]
    STR.W R7, [R11,#4]
    STR.W R5, [R11,#0xC]
    BL sub_193B8
    MOVS R2, #0
    MOVS R1, #1
    MOV R6, R0
    STR R4, [R0]
    STRB R1, [R0,#0x10]
    STR R2, [R0,#4]
    MOV R0, R8
    STR R2, [R6,#8]
    STR R2, [R6,#0xC]
    BL sub_1F158
    SUBS.W R9, R0, #0
    BLE loc_262B2
loc_261E4:
    MOVS R4, #0
    MOV R5, R4
    B loc_2623C
loc_261EA:
    ADDS R4, #1
    CMP R4, R9
    BEQ loc_262AC
loc_261F0:
    LDRB.W R2, [R11,#0x10]
    CMP R2, #0
    BNE loc_2628A
loc_261F8:
    LDR.W R2, [R11]
    LDR R2, [R2]
    CMP R2, #2
    BEQ loc_262EA
loc_26202:
    CMP R2, #0
    BEQ loc_2627E
loc_26206:
    MOV R0, R11
    BL sub_2558C
    MOV R7, R0
loc_2620E:
    LDR.W R0, [R11,#4]
    STR.W R5, [R11]
    CBZ R0, loc_2621C
loc_26218:
    BL sub_1E6B0
loc_2621C:
    LDR.W R0, [R11,#8]
    CBZ R0, loc_26226
loc_26222:
    BL sub_1E6B0
loc_26226:
    LDR.W R0, [R11,#0xC]
    CBZ R0, loc_26230
loc_2622C:
    BL sub_1E6B0
loc_26230:
    STRB.W R5, [R11,#0x10]
    MOV R0, R11
    BL sub_19494
    MOV R11, R7
loc_2623C:
    MOV R1, R4
    MOV R0, R8
    BL sub_1F234
    CMP R0, #0
    BEQ loc_261EA
loc_26248:
    MOV R2, R10
    MOV R1, R11
    MOV R0, R6
    BL sub_25B60
    MOV R7, R0
    CMP R6, #0
    BEQ loc_262F8
loc_26258:
    LDR R0, [R6,#4]
    STR R5, [R6]
    CBZ R0, loc_26262
loc_2625E:
    BL sub_1E6B0
loc_26262:
    LDR R0, [R6,#8]
    CBZ R0, loc_2626A
loc_26266:
    BL sub_1E6B0
loc_2626A:
    LDR R0, [R6,#0xC]
    CBZ R0, loc_26272
loc_2626E:
    BL sub_1E6B0
loc_26272:
    STRB R5, [R6,#0x10]
    MOV R0, R6
    BL sub_19494
    MOV R6, R7
    B loc_261EA
loc_2627E:
    MOV R1, R10
    MOV R0, R11
    BL sub_2576C
    MOV R7, R0
    B loc_2620E
loc_2628A:
    LDR.W R2, [R11]
    MOVS R1, #0x14
    MOVS R0, #1
    STR R2, [SP,#0x30+var_2C]
    BL sub_193B8
    LDR R2, [SP,#0x30+var_2C]
    MOV.W R3, #1
    MOV R7, R0
    STM.W R0, {R2,R5}
    STR R5, [R0,#8]
    STR R5, [R0,#0xC]
    STRB R3, [R0,#0x10]
    B loc_2620E
loc_262AC:
    CMP.W R11, #0
    BEQ loc_262E2
loc_262B2:
    LDR.W R0, [R11,#4]
    MOVS R2, #0
    STR.W R2, [R11]
    CBZ R0, loc_262C2
loc_262BE:
    BL sub_1E6B0
loc_262C2:
    LDR.W R0, [R11,#8]
    CBZ R0, loc_262CC
loc_262C8:
    BL sub_1E6B0
loc_262CC:
    LDR.W R0, [R11,#0xC]
    CBZ R0, loc_262D6
loc_262D2:
    BL sub_1E6B0
loc_262D6:
    MOVS R2, #0
    MOV R0, R11
    STRB.W R2, [R11,#0x10]
    BL sub_19494
loc_262E2:
    MOV R0, R6
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_262EA:
    MOV R2, R10
    MOV R1, R11
    MOV R0, R11
    BL sub_25B60
    MOV R7, R0
    B loc_2620E
loc_262F8:
    MOV R6, R0
    B loc_261EA
loc_262FC:
    LDR R5, [R0]
    MOVS R1, #0x14
    MOVS R0, #1
    BL sub_193B8
    MOVS R3, #1
    MOV R6, R0
    STR R5, [R0]
    STR R4, [R0,#4]
    MOV R0, R8
    STR R4, [R6,#8]
    STR R4, [R6,#0xC]
    STRB R3, [R6,#0x10]
    BL sub_1F158
    SUBS.W R9, R0, #0
    IT 
    MOVGT R11, R4
    BGT.W loc_261E4
loc_26326:
    B loc_262E2
```
Output: STR R2, [R0]
    STRB R3, [R0,#0x10]
    MOV R0, R8
    STR R2, [R6,#8]
    STR R2, [R6,#0xC]
    BL sub_1F158
    MOV R0, R10
    STR R1, [R0]
    B loc_261EA
loc_262EA:
    LDR.R4, [R11]
    LDR R2, [R4]
    LDR R2, [R2]
    CMP R2, #0
    BEQ loc_262F8
loc_262F2:
    LDR R0, [R4,#4]
    STR R5, [R4]
    CBZ R0, loc_262FE
loc_262F6:
    BL sub_1E6B0
loc_262FE:
    LDR R0, [R4,#8]
    CBZ R0, loc_26308
loc_26302:
    BL sub_1E6B0
loc_26308:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_26312
loc_2630C:
    BL sub_1E6B0
loc_26312:
    STRB R5, [R4,#0x10]
    MOV R0, R4
    BL sub_19494
    MOV R4, R7
    B loc_261EA
loc_2631E:
    ADDS R4, #1
    CMP R4, R9
    BNE loc_261F0
loc_26324:
    LDRB.W R2, [R11,#0x10]
    CMP R2, #0
    BNE loc_262F2
loc_2632C:
    LDR.W R2, [R11]
    LDR R2, [R2]
    CMP R2, #2
    BNE loc_2631E
loc_26336:
    LDR.W R2, [R11,#4]
    STR R5, [R11]
    CBZ R2, loc_26340
loc_2633C:
    BL sub_1E6B0
loc_26340:
    LDR W2, [R11,#8]
    CBZ R2, loc_2634A
loc_26344:
    BL sub_1E6B0
loc_2634A:
    LDR W2, [R11,#0xC]
    CBZ R2, loc_26354
loc_26350:
    BL sub_1E6B0
loc_26354:
    STRB W5, [R11,#0x10]
    MOV R0, R11
    BL sub_19494
    MOV R11, R7
    B loc_261EA
loc_26360:
    ADDS R4, #1
    CMP R4, R9
    BNE loc_261F0
loc_26366:
    LDRB.W R2, [R11,#0x10]
    CMP R2, #0
    BNE loc_262F2
loc_2636E:
    LDR.W R2, [R11]
    LDR R2, [R2]
    CMP R2, #2
    BNE loc_2631E
loc_26378:
    LDR.W R2, [R11,#4]
    STR R5, [R11]
    CBZ R2, loc_26382
loc_2637E:
    BL sub_1E6B0
loc_26382:
    LDR W2, [R11,#8]
    CBZ R2, loc_2638C
loc_26386:
    BL sub_1E6B0
loc_2638C:
    LDR W2, [R11,#0xC]
    CBZ R2, loc_26396
loc_26392:
   
############
```assembly
loc_1EF20:
    MOV R3, #0x56170
    PUSH.W {R4-R11,LR}
    MOV R9, R0
    LDR R4, [R3]
    SUB SP, SP, #0xC
    MOVS R1, #4
    STR R3, [SP,#0x30+var_2C]
    LDR R0, [R4]
    ADDS R0, #1
    BL sub_193B8
    CMP R0, #0
    BEQ.W loc_1F07E
loc_1EF44:
    LDR R2, [R4]
    MOV R1, R4
    MOV R8, R0
    ADDS R2, #1
    LSLS R2, R2, #2
    BLX memcpy
    LDRB.W R4, [R9]
    CMP R4, #0
    BEQ loc_1F054
loc_1EF5A:
    BLX __ctype_b_loc
    MOV R11, #0x3FFFFFE
    MOV R10, R0
loc_1EF68:
    LDR.W R3, [R10]
    LDRH.W R3, [R3,R4,LSL#1]
    ANDS.W R3, R3, #0x800
    BEQ loc_1F060
loc_1EF76:
    LDR R3, [SP,#0x30+var_2C]
    MOV R0, R8
    LDR R1, [R3,#4]
    BL sub_1E548
    MOVS R1, #4
    LDRB.W R6, [R9]
    SUBS R6, #0x30
    MOV R5, R0
    MOVS R0, #2
    BL sub_193B8
    MOV R4, R0
    MOV R0, R8
    STR R6, [R4,#4]
    ADDS R6, #0
    IT 
    MOVNE R6, #1
    STR R6, [R4]
    LDR.W R1, [R8]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    LDR R6, [R4]
    LDR R3, [R5]
    CMP R6, R3
    IT 
    MOVLT R6, R3
    ADDS R7, R6, #1
    CMP R7, R11
    BHI loc_1F082
loc_1EFC0:
    ADDS R6, #2
    MOVS R1, #4
    MOV R0, R6
    BL sub_193B8
    LSLS R2, R6, #2
    MOVS R1, #0
    MOV R8, R0
    BLX memset
    STR.W R7, [R8]
    CMP R7, #0
    BEQ loc_1F05C
loc_1EFDC:
    MOVS R2, #0
    MOV R12, R8
    MOV LR, R2
    MOVS R3, #1
loc_1EFE4:
    LDR R1, [R5]
    LDR R7, [R4]
    CMP R1, R3
    MOV.W R1, #0
    ITE 
    LDRGE.W R0, [R5,R3,LSL#2]
    MOVLT R0, #0
    CMP R7, R3
    ITE 
    LDRGE.W R7, [R4,R3,LSL#2]
    MOVLT R7, #0
    ADDS.W R0, R0, LR
    ADC.W R1, R1, #0
    ADDS R0, R0, R7
    ADC.W R1, R1, #0
    CMP R0, #0
    IT 
    CMPNE R3, R2
    STR.W R0, [R12,#4]!
    IT 
    MOVGT R2, R3
    ADDS R3, #1
    CMP R3, R6
    MOV LR, R1
    BNE loc_1EFE4
loc_1F024:
    STR.W R2, [R8]
    MOV R0, R5
    LDR R1, [R5]
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R1, [R4]
    MOV R0, R4
    ADDS R1, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDRB.W R4, [R9,#1]!
    CMP R4, #0
    BNE loc_1EF68
loc_1F054:
    MOV R0, R8
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F05C:
    MOV R2, R7
    B loc_1F024
loc_1F060:
    MOV R4, R3
    LDR.W R3, [R8]
    MOV R0, R8
    ADDS R1, R3, #1
    LSLS R1, R1, #2
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    MOV R0, R4
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_1F07E:
    BLX abort
loc_1F082:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (abort)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:data-processing-helper (__ctype_b_loc)",
  "external-call-type:data-processing-helper (sub_115CC)",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (sub_19494)",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:data-processing-helper (sub_1E548)",
  "external-call-type:data-processing-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-operation-shift-left",
  "bitwise-operation-shift-right",
  "bitwise-operation-or",
  "bitwise-operation-and-clear",
  "bitwise-operation-xor",
  "bitwise-mask-value:0x56170",
  "bitwise-mask-value:0x3FFFFFE",
  "address-or-offset-constant:abort",
  "address-or-offset-constant:memset",
  "address-or-offset-constant:memcpy",
  "address-or-offset-constant:__ctype_b_loc",
  "address-or-offset-constant:sub_115CC",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:sub_19494",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:sub_1E548",
  "address-or-offset-constant:sub_19494",
  "inferred-algorithm:data-processing-loop",
  "inferred-algorithm:array-manipulation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:character-classification",
  "inferred-algorithm:buffer-copying",
  "inferred-algorithm:buffer-zeroing"
]
```<|im_end|>
############
```assembly
loc_11578:
    ADR R12, 0x11580
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(pclose_ptr - 0x55580)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "address-or-offset-constant:0x11580",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:pclose_ptr",
  "address-or-offset-constant:0x55580",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (pclose)",
  "inferred-algorithm:file-closing"
]
```<|im_end|>
############
```assembly
loc_2A188:
    PUSH.W {R4-R11,LR}
    MOVW R4, #0x6190
    SUB.W SP, SP, #0x4080
    MOVT.W R4, #5
    SUB SP, SP, #0xC
    MOV R8, R0
    LDR R6, [R4]
    ADD.W LR, SP, #0x40B0+var_30
    ADD.W LR, LR, #4
    ADD.W R5, SP, #0x40B0+var_30
    ADDS R5, #0x34
    MOV R9, R1
    STR.W R6, [LR]
    ADD.W R6, SP, #0x40B0+var_30
    ADDS R6, #0x30
    LDR R7, [R5]
    MOVS R1, #1
    MOV R10, R2
    LDR R6, [R6]
    MOV.W R2, #0x4000
    MOV R11, R3
    ADD R0, SP, #0x40B0+ptr
    MOV R3, R8
    MOVS R5, #0
    STR R5, [R7]
    STR R6, [SP,#0x40B0+s]
    BLX fread
    MOV R6, R0
    MOV R0, R8
    BLX fclose
    SUB.W R3, R6, #0x4000
    CLZ.W R3, R3
    LSRS R3, R3, #5
    ORRS.W R3, R3, R6,LSR#31
    BNE.W loc_2A3AE
loc_2A1EE:
    CMP R6, #1
    MOV R3, #0x432A8
    STR R3, [R7]
    BLS.W loc_2A388
loc_2A1FE:
    LDRB.W R3, [SP,#0x40B0+ptr]
    CMP R3, #0
    BNE.W loc_2A388
loc_2A208:
    LDRB.W R5, [SP,#0x40B0+var_402B]
    MOVS.W R8, R5
    IT 
    MOVNE.W R8, #1
    CMP R5, #3
    ITE 
    MOVEQ R3, #0
    ANDNE.W R3, R8, #1
    CMP R6, #5
    IT 
    ORRLE.W R3, R3, #1
    CMP R3, #0
    BNE.W loc_2A388
loc_2A22E:
    LDRB.W R3, [SP,#0x40B0+var_402A]
    CMP R3, #0
    BNE.W loc_2A388
loc_2A238:
    LDRB.W R3, [SP,#0x40B0+var_4029]
    CMP R3, #0
    BNE.W loc_2A388
loc_2A242:
    LDRB.W R3, [SP,#0x40B0+var_4028]
    CMP R3, #0
    BNE.W loc_2A388
loc_2A24C:
    LDRB.W R3, [SP,#0x40B0+var_4027]
    CMP R3, #0
    BNE.W loc_2A388
loc_2A256:
    MOVS R1, #1
    MOV R2, R9
    STR R1, [SP,#0x40B0+var_40B0]
    ADD.W R0, SP, #0x40B0+var_4026
    SUBS R1, R6, #6
    BL sub_2E2EC
    CMP R0, #0
    BLT.W loc_2A388
loc_2A26C:
    ADDS R2, R0, #6
    ADD.W LR, SP, #0x40B0+ptr
    ADD.W R3, SP, #0x40B0+var_4029
    ADD.W R1, SP, #0x40B0+var_402B
    ADDS R0, #0xA
    LDRB.W LR, [LR,R2]
    STR R0, [SP,#0x40B0+var_40A4]
    ADD.W R0, SP, #0x40B0+var_402A
    LDRB R3, [R3,R2]
    LDRB R1, [R1,R2]
    LDRB R0, [R0,R2]
    ORR.W R3, R3, LR,LSL#24
    ORR.W R3, R3, R1,LSL#16
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    BLT loc_2A388
loc_2A2A0:
    LDR R0, [SP,#0x40B0+var_40A4]
    SUBS R2, R6, R0
    CMP R3, R2
    BGT loc_2A388
loc_2A2A8:
    MOVS R1, #1
    ADDS R0, R3, R1
    STR R3, [SP,#0x40B0+n]
    BL sub_193B8
    LDR R3, [SP,#0x40B0+n]
    STR R0, [SP,#0x40B0+var_40A0]
    CBZ R0, loc_2A2CE
loc_2A2B8:
    LDR R1, [SP,#0x40B0+var_40A4]
    MOV R2, R3
    ADD R3, SP, #0x40B0+ptr
    ADDS R1, R3, R1
    BLX memcpy
    LDR R3, [SP,#0x40B0+var_40A0]
    MOVS R2, #0
    MOV R1, R3
    LDR R3, [SP,#0x40B0+n]
    STRB R2, [R1,R3]
loc_2A2CE:
    CMP.W R11, #0
    BEQ loc_2A2E2
loc_2A2D4:
    LDR R0, [SP,#0x40B0+var_40A0]
    STR R3, [SP,#0x40B0+n]
    BL sub_18A88
    LDR R3, [SP,#0x40B0+n]
    STR.W R0, [R11]
loc_2A2E2:
    CMP.W R9, #0
    BEQ.W loc_2A412
loc_2A2EA:
    LDR R2, [SP,#0x40B0+var_40A0]
    STR.W R2, [R9,#0x20]
    CMP.W R10, #0
    BNE loc_2A384
loc_2A2F6:
    LDR R2, [SP,#0x40B0+var_40A4]
    ADD R2, R3
    MOV R8, R2
    CMP R5, #0
    BNE loc_2A3BE
loc_2A300:
    SUBS R5, R6, R2
loc_2A302:
    CMP R5, #3
    BLE loc_2A388
loc_2A306:
    ADD R3, SP, #0x40B0+ptr
    ADD R2, SP, #0x40B0+ptr
    ADD R3, R8
    LDRB.W R1, [R2,R8]
    LDRB R2, [R3,#2]
    CMP R1, R2
    BNE loc_2A402
loc_2A316:
    LDRB R2, [R3,#1]
    LDRB R3, [R3,#3]
    CMP R2, R3
    BNE loc_2A402
loc_2A31E:
    ADD.W R8, R8, #4
    ADD R3, SP, #0x40B0+ptr
    MOV R2, R9
    SUB.W R1, R6, R8
    ADD.W R0, R3, R8
    BL sub_2E3C4
    CMP R0, #0
    BLT loc_2A388
loc_2A336:
    ADD R8, R0
    ADD R3, SP, #0x40B0+ptr
    ADD.W R2, R9, #0x1C
    SUB.W R1, R6, R8
    ADD.W R0, R3, R8
    BL sub_1F088
    CMP R0, #0
    BLT loc_2A388
loc_2A34E:
    ADD.W R5, R8, R0
    ADD R3, SP, #0x40B0+ptr
    ADD.W R2, R9, #0x18
    SUBS R1, R6, R5
    ADDS R0, R3, R5
    BL sub_1F088
    CMP R0, #0
    BLT loc_2A388
loc_2A364:
    ADD R0, R5
    ADD R3, SP, #0x40B0+ptr
    SUBS R1, R6, R0
    ADD.W R2, R9, #0x14
    ADD R0, R3
    BL sub_1F088
    CMP R0, #0
    BLT loc_2A388
loc_2A378:
    MOV R0, R9
    BL sub_2EC48
    MOV R5, R0
    CMP R0, #0
    BEQ loc_2A426
loc_2A384:
    MOVS R5, #1
    B loc_2A38A
loc_2A388:
    MOVS R5, #0
loc_2A38A:
    ADD R0, SP, #0x40B0+ptr
    MOV.W R1, #0x4000
    BL sub_194E4
    ADD.W R3, SP, #0x40B0+var_30
    ADDS R3, #4
    MOV R0, R5
    LDR R2, [R3]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_2A3BA
loc_2A3A4:
    ADD.W SP, SP, #0x4080
    ADD SP, SP, #0xC
    POP.W {R4-R11,PC}
loc_2A3AE:
    MOV R3, #0x43294
    STR R3, [R7]
    B loc_2A38A
loc_2A3BA:
    BLX __stack_chk_fail
loc_2A3BE:
    ADD R0, SP, #0x40B0+var_4098
    ADD R3, SP, #0x40B0+var_403C
    SUBS R5, R6, R2
    STR R3, [SP,#0x40B0+var_40A4]
    BL sub_28FF0
    LDR.W R10, [SP,#0x40B0+s]
    MOV R0, R10
    BLX strlen
    MOV R1, R10
    MOV R2, R0
    ADD R0, SP, #0x40B0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40B0+var_4098
    LDR R0, [SP,#0x40B0+var_40A4]
    BL sub_29130
    ADD R3, SP, #0x40B0+ptr
    ADDS R2, R5, #7
    LDR R0, [SP,#0x40B0+var_40A4]
    ADD.W R1, R3, R8
    BIC.W R2, R2, #7
    BL sub_22A6C
    LDR R0, [SP,#0x40B0+var_40A4]
    MOVS R1, #0x10
    BL sub_194E4
    B loc_2A302
loc_2A402:
    MOVW R3, #0x9640
    MOV.W R5, #0xFFFFFFFF
    MOVT.W R3, #3
    STR R3, [R7]
    B loc_2A38A
loc_2A412:
    LDR R0, [SP,#0x40B0+var_40A0]
    BL sub_19494
    CMP.W R10, #0
    BNE loc_2A384
loc_2A41E:
    MOV R5, R8
    STR.W R10, [R7]
    B loc_2A38A
loc_2A426:
    MOV R0, R9
    MOV R3, #0x432BC
    STR R3, [R7]
    BL sub_2ED10
    B loc_2A38A
```
Output:2A2D2:
    LDRB.W R3, [SP,#0x40B0+var_4026]
    CMP R3, #0
    BNE.W loc_2A2E2
loc_2A2DA:
    LDRB.W R3, [SP,#0x40B0+var_4025]
    CMP R3, #0
    BNE.W loc_2A2E2
loc_2A2DC:
    LDRB.W R3, [SP,#0x40B0+var_4024]
    CMP R3, #0
    BNE.W loc_2A2E2
loc_2A2DE:
    LDRB.W R3, [SP,#0x40B0+var_4023]
    CMP R3, #0
    BNE.W loc_2A2E2
loc_2A2E0:
    LDRB.W R3, [SP,#0x40B0+var_4022]
    CMP R3, #0
    BNE.W loc_2A2E2
loc_2A2E2:
    ADD.W R0, SP, #0x40B0+var_30
    ADD.W R1, SP, #0x40B0+var_30
    ADDS R1, #0x34
    ADD.W R2, SP, #0x40B0+var_30
    ADDS R2, #0x30
    LDR R3, [R1]
    LDR R6, [R2]
    LDR R7, [R5]
    MOVS R1, #1
    MOV R10, R9
    LDR R6, [R6]
    MOV.W R2, #0x4000
    MOV R11, R3
    ADD R0, SP, #0x40B0+ptr
    MOV R3, R8
    MOVS R5, #0
    STR R5, [R7]
    STR R6, [SP,#0x40B0+s]
    BLX fread
    MOV R6, R0
    MOV R0, R8
    BLX fclose
    SUB.W R3, R6, #0x4000
    CLZ.W R3, R3
    LSRS R3, R3, #5
    ORRS.W R3, R3, R6,LSR#31
    BNE.W loc_2A3AE
loc_2A388:
    LDR R0, [SP,#0x40B0+var_40A0]
    ADDS R1, R0, #6
    LDRB W0, [R1]
    BX LR
loc_2A3AE:
    LDR R0, [SP,#0x40A0]
    SUBS R1, R6, R0
    CMP R3, R1
    BGT loc_2A388
loc_2A3B8:
    MOVS R1, #1
    ADDS R0, R3, R1
    STR R3, [SP,#0x40A0]
    BL sub_193B8
    LDR R3, [SP,#0x40A0]
    STR R0, [SP,#0x40A4]
    CBZ R0, loc_2A3CE
loc_2A3C8:
    LDR R1, [SP,#0x40A0]
    MOV R2, R3
    ADD R3, SP, #0x40B0+ptr
    ADDS R1, R3, R1
    BLX memcpy
    LDR R3, [SP,#0x40A4]
    MOVS R2, #0
    MOV R1, R3
    LDR R3, [SP,#0x40A0]
    STRB R2, [R1,R3]
loc_2A3CE:
    LDR R0, [SP,#0x40A4]
    SUBS R1, R6, R0
    CMP R3, R1
    BGT loc_2A3CE
    LDR R0, [SP,#0x40A4]
    ADDS R1, R0, #6
    LDRB W0, [R1]
    BX LR
``
############
```assembly
loc_35AAC:
    PUSH {R4-R6,LR}
    MOV R4, #0x56190
    SUB SP, SP, #0x10
    MOVS R3, #0
    ADD R6, SP, #0x20+var_18
    LDR R5, [R4]
    MOV R2, R3
    STR R6, [SP,#0x20+var_20]
    MOV R6, R0
    STR R5, [SP,#0x20+var_14]
    BL sub_358D0
    CBZ R0, loc_35AD4
loc_35ACC:
    MOV R0, R6
    LDR R1, [SP,#0x20+var_18]
    BL sub_340CC
loc_35AD4:
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_35AE0
loc_35ADC:
    ADD SP, SP, #0x10
    POP {R4-R6,PC}
loc_35AE0:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_358D0)",
  "external-call-type:data-processing-helper (sub_340CC)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0x56190",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "address-or-offset-constant:sub_358D0",
  "address-or-offset-constant:sub_340CC",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-processing-or-manipulation",
  "inferred-algorithm:conditional-check-or-validation",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_28778:
    PUSH.W {R4-R11,LR}
    MOVW R7, #0xA478
    LDR R4, [R0,#0xC]
    MOVT.W R7, #0xD76A
    LDR R2, [R0,#8]
    MOVW R3, #0xB756
    LDR R5, [R0,#0xC]
    MOVT.W R3, #0xE8C7
    EORS R2, R4
    LDR R4, [R0,#4]
    LDR R6, [R0,#0xC]
    SUB SP, SP, #0x34
    ANDS R2, R4
    LDR R4, [R1]
    EORS R2, R5
    LDR R5, [R0]
    ADD R3, R6
    LDR R6, [R0,#4]
    ADD R7, R5
    LDR R5, [R0,#8]
    ADD R7, R2
    LDR R2, [R0,#4]
    ADD R7, R4
    STR R4, [SP,#0x58+var_50]
    EOR.W R8, R2, R5
    LDR R5, [R1,#4]
    ADD.W R9, R6, R7,ROR#25
    MOVW R12, #0x70DB
    ADDS R4, R3, R5
    LDR R3, [R0,#8]
    AND.W R8, R8, R9
    LDR R7, [R0,#4]
    EOR.W R8, R8, R3
    EOR.W R3, R6, R9
    LDR R6, [R1,#8]
    ADD R4, R8
    MOVT.W R12, #0x2420
    STR R5, [SP,#0x58+var_4C]
    ADD.W R4, R9, R4,ROR#20
    MOVW LR, #0xFAF
    MOV R2, R6
    LDR R6, [R0,#8]
    ANDS R3, R4
    STR R2, [SP,#0x58+var_48]
    ADD R12, R6
    EORS R3, R7
    ADD R12, R2
    EOR.W R5, R9, R4
    ADD R3, R12
    LDR R2, [R1,#0xC]
    MOV R6, #0xC1BDCEEE
    ADD.W R3, R4, R3,ROR#15
    ADD R6, R7
    ANDS R5, R3
    ADD R6, R2
    EOR.W R5, R5, R9
    LDR R7, [R1,#0x10]
    ADD R5, R6
    STR R2, [SP,#0x58+var_44]
    LDR R6, [R1,#0x14]
    EOR.W R2, R4, R3
    ADD.W R5, R3, R5,ROR#10
    MOVT.W LR, #0xF57C
    ADD LR, R7
    ANDS R2, R5
    STR R7, [SP,#0x58+var_40]
    EORS R2, R4
    ADD.W R7, R9, LR
    STR R6, [SP,#0x58+var_54]
    ADD R2, R7
    LDR R7, [SP,#0x58+var_54]
    EOR.W R8, R3, R5
    MOVW R6, #0xC62A
    ADD.W R2, R5, R2,ROR#25
    MOVT.W R6, #0x4787
    ADD R6, R7
    AND.W R8, R8, R2
    ADD R4, R6
    EOR.W R8, R8, R3
    ADD R8, R4
    LDR R6, [R1,#0x18]
    EOR.W R12, R5, R2
    MOVW R7, #0x4613
    ADD.W R8, R2, R8,ROR#20
    MOVT.W R7, #0xA830
    ADD R7, R6
    AND.W R12, R12, R8
    ADD R3, R7
    EOR.W R12, R12, R5
    ADD R12, R3
    LDR.W R11, [R1,#0x1C]
    STR R6, [SP,#0x58+var_3C]
    MOVW LR, #0x9501
    ADD.W R12, R8, R12,ROR#15
    EOR.W R6, R2, R8
    MOVT.W LR, #0xFD46
    LDR R3, [R1,#0x20]
    ADD LR, R11
    AND.W R6, R6, R12
    ADD R5, LR
    EORS R6, R2
    ADD R6, R5
    MOV R4, R3
    MOV R3, #0x698098D8
    ADD.W R6, R12, R6,ROR#10
    EOR.W R7, R8, R12
    ADD R3, R4
    MOVW R5, #0xF7AF
    ADD R2, R3
    AND.W R3, R7, R6
    EOR.W R3, R3, R8
    LDR R7, [R1,#0x24]
    ADD R3, R2
    MOVT.W R5, #0x8B44
    EOR.W R2, R12, R6
    ADD R5, R7
    ADD.W R3, R6, R3,ROR#25
    STR R4, [SP,#0x58+var_38]
    ANDS R2, R3
    STR R7, [SP,#0x58+var_34]
    EOR.W R2, R2, R12
    LDR R4, [R1,#0x28]
    ADD R8, R5
    MOVW LR, #0xD7BE
    ADD R8, R2
    MOVT.W LR, #0x895C
    MOV R5, R4
    EOR.W R4, R6, R3
    ADD.W R8, R3, R8,ROR#20
    SUB.W R7, R5, #0xA400
    AND.W R4, R4, R8
    SUBS R7, #0x4F
    EORS R4, R6
    ADD R7, R12
    ADD R7, R4
    STR R5, [SP,#0x58+var_30]
    LDR R5, [R1,#0x2C]
    EOR.W R2, R3, R8
    ADD.W R7, R8, R7,ROR#15
    LDR.W R9, [R1,#0x30]
    ADD LR, R5
    ANDS R2, R7
    EORS R2, R3
    ADD LR, R6
    ADD LR, R2
    MOV R4, #0x6B901122
    EOR.W R2, R8, R7
    ADD.W LR, R7, LR,ROR#10
    ADD R4, R9
    ADD R4, R3
    AND.W R3, R2, LR
    EOR.W R3, R3, R8
    LDR.W R12, [R1,#0x34]
    ADD R4, R3
    EOR.W R6, R7, LR
    MOV R2, #0xFD987193
    ADD.W R4, LR, R4,ROR#25
    ADD R2, R12
    AND.W R3, R6, R4
    ADD R2, R8
    EORS R3, R7
    LDR.W R10, [R1,#0x38]
    ADD R2, R3
    MOVW R6, #0x438E
    EOR.W R3, LR, R4
    MOVT.W R6, #0xA679
    ADD.W R2, R4, R2,ROR#20
    ADD R6, R10
    ANDS R3, R2
    LDR.W R8, [R1,#0x3C]
    EOR.W R3, R3, LR
    ADDS R1, R6, R7
    ADD R1, R3
    EOR.W R7, R4, R2
    MOV R6, #0x49B40821
    ADD.W R1, R2, R1,ROR#15
    STR R5, [SP,#0x58+var_2C]
    ADD R6, R8
    LDR R5, [SP,#0x58+var_4C]
    ANDS R7, R1
    ADD R6, LR
    EORS R7, R4
    MOV R3, #0xF61E2562
    ADD R6, R7
    ADD R3, R5
    MOVW R7, #0xB340
    ADD R4, R3
    LDR R3, [SP,#0x58+var_3C]
    ADD.W R6, R1, R6,ROR#10
    MOVT.W R7, #0xC040
    ADD R7, R3
    EOR.W R3, R1, R6
    ANDS R3, R2
    LDR R5, [SP,#0x58+var_2C]
    EORS R3, R1
    MOVW LR, #0x5A51
    ADD R3, R4
    MOVT.W LR, #0x265E
    ADD R7, R2
    ADD LR, R5
    ADD.W R3, R6, R3,ROR#27
    ADD LR, R1
    EOR.W R2, R6, R3
    LDR R5, [SP,#0x58+var_50]
    ANDS R1, R2
    MOVW R4, #0xC7AA
    EOR.W R2, R1, R6
    MOVT.W R4, #0xE9B6
    ADD R7, R2
    ADD R4, R5
    ADD R4, R6
    LDR R5, [SP,#0x58+var_54]
    ADD.W R7, R3, R7,ROR#23
    MOVW R1, #0x105D
    EOR.W R2, R3, R7
    MOVT.W R1, #0xD62F
    ANDS R6, R2
    MOVW R2, #0x1453
    EORS R6, R3
    MOVT.W R2, #0x244
    ADD LR, R6
    LDR R6, [SP,#0x58+var_30]
    ADD R1, R5
    LDR R5, [SP,#0x58+var_40]
    ADD.W LR, R7, LR,ROR#18
    ADD R2, R6
    EOR.W R6, R7, LR
    ADD R1, R3
    ANDS R3, R6
    ADD R2, R7
    EORS R3, R7
    MOVW R6, #0xE681
    ADD R4, R3
    MOVT.W R6, #0xD8A1
    ADD R6, R8
    ADD.W R4, LR, R4,ROR#12
    ADD R6, LR
    EOR.W R3, LR, R4
    ANDS R3, R7
    MOVW R7, #0xFBC8
    EOR.W R3, R3, LR
    MOVT.W R7, #0xE7D3
    ADD R1, R3
    ADD R7, R5
    ADD R7, R4
    ADD.W R1, R4, R1,ROR#27
    EOR.W R3, R4, R1
    AND.W R3, R3, LR
    MOVW LR, #0xCDE6
    EORS R3, R4
    MOVT.W LR, #0x21E1
    ADD R2, R3
    LDR R3, [SP,#0x58+var_34]
    ADD.W R2, R1, R2,ROR#23
    ADD LR, R3
    EOR.W R3, R1, R2
    ADD LR, R1
    ANDS R3, R4
    MOVW R4, #0x7D6
    EORS R3, R1
    MOVT.W R4, #0xC337
    ADD R6, R3
    ADD R4, R10
    ADD R4, R2
    ADD.W R6, R2, R6,ROR#18
    EOR.W R3, R2, R6
    ANDS R3, R1
    MOVW R1, #0xD87
    EORS R3, R2
    MOVT.W R1, #0xF4D5
    ADD R7, R3
    LDR R3, [SP,#0x58+var_44]
    ADD.W R7, R6, R7,ROR#12
    ADD R1, R3
    EOR.W R3, R6, R7
    ADD R1, R6
    ANDS R3, R2
    STR R1, [SP,#0x58+var_40]
    EORS R3, R6
    LDR R1, [SP,#0x58+var_38]
    ADD R3, LR
    MOV R2, #0x455A14ED
    ADD.W R3, R7, R3,ROR#27
    ADD R2, R1
    EOR.W LR, R7, R3
    LDR R1, [SP,#0x58+var_40]
    AND.W R6, LR, R6
    ADD R2, R7
    EORS R6, R7
    MOVW LR, #0xE905
    ADD R4, R6
    MOVT.W LR, #0xA9E3
    ADD LR, R12
    ADD.W R4, R3, R4,ROR#23
    ADD LR, R3
    EOR.W R6, R3, R4
    ANDS R6, R7
    MOVW R7, #0xA3F8
    EORS R6, R3
    MOVT.W R7, #0xFCEF
    ADD R1, R6
    LDR R6, [SP,#0x58+var_48]
    ADD.W R1, R4, R1,ROR#18
    ADD R7, R6
    EOR.W R6, R4, R1
    ADD R7, R4
    ANDS R6, R3
    MOVW R3, #0x2D9
    EORS R6, R4
    MOVT.W R3, #0x676F
    ADD R2, R6
    ADD R3, R11
    ADD R3, R1
    ADD.W R2, R1, R2,ROR#12
    EOR.W R6, R1, R2
    ANDS R6, R4
    MOVW R4, #0x4C8A
    EORS R6, R1
    MOVT.W R4, #0x8D2A
    ADD R6, LR
    ADD R4, R9
    ADD R4, R2
    ADD.W R6, R2, R6,ROR#27
    EOR.W LR, R2, R6
    AND.W R1, LR, R1
    STR R1, [SP,#0x58+var_40]
    LDR R1, [SP,#0x58+var_54]
    SUB.W LR, R1, #0x5C000
    LDR R1, [SP,#0x58+var_40]
    SUBW LR, LR, #0x6BE
    STR R5, [SP,#0x58+var_40]
    EORS R1, R2
    ADD LR, R6
    ADD R7, R1
    ADD.W R7, R6, R7,ROR#23
    EOR.W R1, R6, R7
    ANDS R1, R2
    MOVW R2, #0xF681
    EORS R1, R6
    MOVT.W R2, #0x8771
    ADD R3, R1
    LDR R1, [SP,#0x58+var_38]
    ADD.W R3, R7, R3,ROR#18
    ADD R2, R1
    EOR.W R1, R7, R3
    ADD R2, R7
    ANDS R6, R1
    EORS R6, R7
    MOVW R7, #0x6122
    ADD R4, R6
    LDR R6, [SP,#0x58+var_2C]
    MOVT.W R7, #0x6D9D
    ADD.W R4, R3, R4,ROR#12
    ADD R7, R6
    EORS R1, R4
    ADD R7, R3
    ADD R1, LR
    EORS R3, R4
    MOV R6, #0xFDE5380C
    ADD.W R1, R4, R1,ROR#28
    ADD R6, R10
    EORS R3, R1
    ADD R6, R4
    ADD R3, R2
    EORS R4, R1
    LDR R2, [SP,#0x58+var_4C]
    MOVW LR, #0xEA44
    ADD.W R3, R1, R3,ROR#21
    MOVT.W LR, #0xA4BE
    EORS R4, R3
    ADD LR, R2
    ADD R4, R7
    ADD LR, R1
    EORS R1, R3
    MOVW R2, #0xCFA9
    ADD.W R4, R3, R4,ROR#16
    MOVT.W R2, #0x4BDE
    EORS R1, R4
    ADD R2, R5
    ADD R1, R6
    ADD R2, R3
    EORS R3, R4
    MOVW R7, #0x4B60
    ADD.W R1, R4, R1,ROR#9
    MOVT.W R7, #0xF6BB
    EORS R3, R1
    ADD R7, R11
    ADD R3, LR
    ADD R7, R4
    EORS R4, R1
    LDR R5, [SP,#0x58+var_30]
    ADD.W R3, R1, R3,ROR#28
    MOVW R6, #0xBC70
    EORS R4, R3
    MOVT.W R6, #0xBEBF
    ADD R4, R2
    ADD R6, R5
    ADD R6, R1
    EORS R1, R3
    ADD.W R4, R3, R4,ROR#21
    MOVW LR, #0x7EC6
    EORS R1, R4
    MOVT.W LR, #0x289B
    ADD R1, R7
    ADD LR, R12
    ADD LR, R3
    EORS R3, R4
    ADD.W R1, R4, R1,ROR#16
    LDR R7, [SP,#0x58+var_50]
    SUB.W R5, R5, #0x100000
    EORS R3, R1
    SUBW R2, R5, #0xB83
    ADD R3, R6
    STR R2, [SP,#0x58+var_30]
    MOV R2, #0xEAA127FA
    ADD.W R3, R1, R3,ROR#9
    ADD R2, R7
    LDR R6, [SP,#0x58+var_44]
    ADD R2, R4
    EORS R4, R1
    EORS R4, R3
    MOVW R7, #0x3085
    ADD R4, LR
    MOVT.W R7, #0xD4EF
    ADD R7, R6
    LDR R5, [SP,#0x58+var_3C]
    ADD.W R4, R3, R4,ROR#28
    ADD R7, R1
    EORS R1, R3
    MOVW R6, #0x1D05
    EORS R1, R4
    MOVT.W R6, #0x488
    ADD R1, R2
    ADD R6, R5
    ADD R6, R3
    EORS R3, R4
    ADD.W R1, R4, R1,ROR#21
    LDR R5, [SP,#0x58+var_34]
    EORS R3, R1
    MOVW LR, #0xD039
    ADD R3, R7
    MOVT.W LR, #0xD9D4
    ADD LR, R5
    MOVW R2, #0x99E5
    ADD.W R3, R1, R3,ROR#16
    ADD LR, R4
    EORS R4, R1
    MOVT.W R2, #0xE6DB
    EORS R4, R3
    ADD R2, R9
    ADD R4, R6
    ADD R2, R1
    EORS R1, R3
    MOVW R7, #0x7CF8
    ADD.W R4, R3, R4,ROR#9
    MOVT.W R7, #0x1FA2
    EORS R1, R4
    ADD R7, R8
    ADD R1, LR
    ADD R7, R3
    EOR.W LR, R3, R4
    LDR R3, [SP,#0x58+var_48]
    ADD.W R1, R4, R1,ROR#28
    MOV R6, #0xC4AC5665
    ADD R6, R3
    EOR.W R3, LR, R1
    ADD R3, R2
    ADD R6, R4
    EORS R4, R1
    LDR R2, [SP,#0x58+var_50]
    ADD.W R3, R1, R3,ROR#21
    MOVW LR, #0x2244
    EORS R4, R3
    MOVT.W LR, #0xF429
    ADD R4, R7
    ADD LR, R2
    EOR.W R2, R1, R3
    ADD LR, R1
    ADD.W R4, R3, R4,ROR#16
    MOVW R1, #0xFF97
    EORS R2, R4
    MOVT.W R1, #0x432A
    ADD R6, R2
    ADD R1, R11
    ADD R1, R3
    MOVW R11, #0x23A7
    ADD.W R6, R4, R6,ROR#9
    MOVT.W R11, #0xAB94
    ORN.W R3, R6, R3
    ADD R11, R10
    EORS R3, R4
    ADD R11, R4
    ADD R3, LR
    LDR R2, [SP,#0x58+var_54]
    MOV R7, #0xFC93A039
    ADD.W R3, R6, R3,ROR#26
    ADD R7, R2
    ORN.W R4, R3, R4
    ADD R7, R6
    EORS R4, R6
    MOVW R2, #0x59C3
    ADD R1, R4
    MOVT.W R2, #0x655B
    ADD R2, R9
    LDR R4, [SP,#0x58+var_44]
    ADD.W R1, R3, R1,ROR#22
    ADD R2, R3
    ORN.W R6, R1, R6
    MOVW LR, #0xCC92
    EORS R6, R3
    MOVT.W LR, #0x8F0C
    ADD R11, R6
    ADD LR, R4
    LDR R4, [SP,#0x58+var_4C]
    ADD LR, R1
    ADD.W R11, R1, R11,ROR#17
    MOVW R9, #0x5DD1
    ORN.W R3, R11, R3
    MOVT.W R9, #0x8584
    EORS R3, R1
    ADD R9, R4
    ADD R7, R3
    LDR R4, [SP,#0x58+var_38]
    MOV R10, #0x6FA87E4F
    ADD.W R7, R11, R7,ROR#11
    ADD R10, R4
    ORN.W R1, R7, R1
    LDR R4, [SP,#0x58+var_30]
    EOR.W R1, R1, R11
    ADD R9, R7
    ADD R2, R1
    ADD R4, R11
    LDR R6, [SP,#0x58+var_3C]
    MOVW R3, #0x11A1
    ADD.W R2, R7, R2,ROR#26
    MOV R5, R4
    ORN.W R11, R2, R11
    MOVW R4, #0xE6E0
    EOR.W R11, R11, R7
    MOVT.W R4, #0xFE2C
    ADD LR, R11
    LDR R1, [SP,#0x58+var_40]
    ADD R4, R8
    MOVW R8, #0x4314
    ADD.W LR, R2, LR,ROR#22
    MOVT.W R8, #0xA301
    ORN.W R7, LR, R7
    ADD R8, R6
    EORS R7, R2
    MOVW R6, #0x7E82
    ADD R5, R7
    MOVT.W R6, #0xF753
    ADD R6, R1
    MOVT.W R3, #0x4E08
    ADD.W R5, LR, R5,ROR#17
    LDR R1, [SP,#0x58+var_2C]
    ADD R10, R2
    LDR R7, [SP,#0x58+var_48]
    ORN.W R2, R5, R2
    ADD R3, R12
    MOV R12, #0xBD3AF235
    EOR.W R11, R2, LR
    ADD R12, R1
    LDR R2, [SP,#0x58+var_34]
    MOV R1, #0x2AD7D2BB
    ADD R4, LR
    ADD R1, R7
    MOV R7, #0xEB86D391
    ADD R8, R5
    ADD R7, R2
    ADD.W R2, R11, R9
    ADD.W R2, R5, R2,ROR#11
    ORN.W LR, R2, LR
    ADD R3, R2
    EOR.W LR, LR, R5
    ADD LR, R10
    ADD.W LR, R2, LR,ROR#26
    ORN.W R5, LR, R5
    ADD R6, LR
    EORS R5, R2
    ADD R5, R4
    ADD.W R5, LR, R5,ROR#22
    ORN.W R2, R5, R2
    ADD R12, R5
    EOR.W R2, R2, LR
    ADD R8, R2
    LDR R2, [R0]
    ADD.W R8, R5, R8,ROR#17
    ORN.W LR, R8, LR
    ADD R1, R8
    EOR.W LR, LR, R5
    ADD R3, LR
    ADD.W R3, R8, R3,ROR#11
    ORN.W R5, R3, R5
    ADD R7, R3
    EOR.W R5, R5, R8
    ADD R6, R5
    ADD.W R6, R3, R6,ROR#26
    ORN.W R8, R6, R8
    ADD R2, R6
    EOR.W R8, R8, R3
    STR R2, [R0]
    ADD R12, R8
    LDR R2, [R0,#0xC]
    ADD.W R12, R6, R12,ROR#22
    ORN.W R3, R12, R3
    ADD R2, R12
    EORS R3, R6
    STR R2, [R0,#0xC]
    ADD R1, R3
    LDR R3, [R0,#4]
    ADD.W R1, R12, R1,ROR#17
    ORN.W R6, R1, R6
    ADDS R2, R3, R1
    EOR.W R6, R6, R12
    LDR R3, [R0,#8]
    ADD R7, R6
    ADD R1, R3
    STR R1, [R0,#8]
    ADD.W R7, R2, R7,ROR#11
    STR R7, [R0,#4]
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
```
Output: R3, R8,ROR#20
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x2C]
    EOR.W R8, R6, R2
    MOVW R5, #0x7D08
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x30]
    EOR.W R8, R6, R2
    MOVW R5, #0x4F67
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x34]
    EOR.W R8, R6, R2
    MOVW R5, #0x9F16
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x38]
    EOR.W R8, R6, R2
    MOVW R5, #0x2B0F
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x3C]
    EOR.W R8, R6, R2
    MOVW R5, #0x8A00
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x40]
    EOR.W R8, R6, R2
    MOVW R5, #0x5245
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x44]
    EOR.W R8, R6, R2
    MOVW R5, #0x3684
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x48]
    EOR.W R8, R6, R2
    MOVW R5, #0x7F13
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x4C]
    EOR.W R8, R6, R2
    MOVW R5, #0x4D81
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x50]
    EOR.W R8, R6, R2
    MOVW R5, #0x2A2A
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x54]
    EOR.W R8, R6, R2
    MOVW R5, #0x8B20
    ADD W0, R4
    EOR.W R7, R7, R8
    ADD R7, R5
    MOV W0, R7
    ADD R4, R7
    LDR R7, [R1,#0x58]
    EOR.W
############
```assembly
loc_28610:
    CMP.W R0, #0x100
    BEQ loc_2861A
loc_28616:
    MOVS R0, #0
    BX LR
loc_2861A:
    PUSH {R3-R7,LR}
    MOV R4, #0x561A8
    LDR R5, =off_3FBE8
    MOV R6, R1
    MOV R3, R0
    LDRB.W R7, [R4,#(byte_56218 - 0x561A8)]
    STR R5, [R2]
    CBZ R7, loc_2863C
loc_28632:
    ADD.W R3, R4, #0x74
    MOVS R0, #1
    STR R3, [R6]
    POP {R3-R7,PC}
loc_2863C:
    MOVS R1, #0x20
    SUB.W R0, R5, #0x3D8
    MOVS R2, #2
    STR.W R3, [R4,#(dword_56228 - 0x561A8)]
    STR R2, [R4,#(dword_5621C - 0x561A8)]
    STR R7, [R4,#(dword_56220 - 0x561A8)]
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_5622C - 0x561A8)]
    SUB.W R0, R5, #0x3B8
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56230 - 0x561A8)]
    SUB.W R0, R5, #0x398
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_56234 - 0x561A8)]
    SUB.W R0, R5, #0x378
    BL sub_1EDA8
    MOVS R1, #0x20
    STR.W R0, [R4,#(dword_5623C - 0x561A8)]
    SUB.W R0, R5, #0x358
    BL sub_1EDA8
    ADD.W R3, R4, #0x74
    STRB.W R7, [R4,#(byte_56248 - 0x561A8)]
    MOVW R2, #0xFD00
    STR.W R3, [R4,#(dword_56238 - 0x561A8)]
    MOVT.W R2, #3
    STR R2, [R4,#(dword_56224 - 0x561A8)]
    MOVS R2, #1
    STRB.W R2, [R4,#(byte_56218 - 0x561A8)]
    STR.W R0, [R4,#(dword_56240 - 0x561A8)]
    MOVS R0, #1
    STR R3, [R6]
    POP {R3-R7,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:integer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1EDA8)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0x100",
  "fixed-value-comparison:0x3D8",
  "fixed-value-comparison:0x3B8",
  "fixed-value-comparison:0x398",
  "fixed-value-comparison:0x378",
  "fixed-value-comparison:0x358",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x561A8",
  "fixed-value-assignment:0xFD00",
  "fixed-value-assignment:3",
  "fixed-value-assignment:0x20",
  "address-or-offset-constant:off_3FBE8",
  "address-or-offset-constant:dword_56228",
  "address-or-offset-constant:dword_5621C",
  "address-or-offset-constant:dword_56220",
  "address-or-offset-constant:dword_5622C",
  "address-or-offset-constant:dword_56230",
  "address-or-offset-constant:dword_56234",
  "address-or-offset-constant:dword_5623C",
  "address-or-offset-constant:dword_56240",
  "address-or-offset-constant:dword_56248",
  "address-or-offset-constant:byte_56218",
  "address-or-offset-constant:byte_56224",
  "address-or-offset-constant:byte_56238",
  "address-or-offset-constant:byte_56248",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:data-structure-initialization",
  "inferred-algorithm:loop-with-condition",
  "inferred-algorithm:register-multiplexing"
]
```<|im_end|>
############
```assembly
loc_2ED10:
    PUSH {R4,LR}
    MOV R4, R0
    LDR R0, [R0,#8]
    CBZ R0, loc_2ED1C
loc_2ED18:
    BL sub_1E6B0
loc_2ED1C:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_2ED24
loc_2ED20:
    BL sub_1E6B0
loc_2ED24:
    LDR R0, [R4,#0x10]
    CBZ R0, loc_2ED2C
loc_2ED28:
    BL sub_1E6B0
loc_2ED2C:
    LDR R0, [R4,#0x14]
    CBZ R0, loc_2ED34
loc_2ED30:
    BL sub_1E6B0
loc_2ED34:
    LDR R0, [R4,#0x18]
    CBZ R0, loc_2ED3C
loc_2ED38:
    BL sub_1E6B0
loc_2ED3C:
    LDR R0, [R4,#0x1C]
    CBZ R0, loc_2ED44
loc_2ED40:
    BL sub_1E6B0
loc_2ED44:
    LDR R0, [R4,#0x20]
    CBZ R0, locret_2ED50
loc_2ED48:
    POP.W {R4,LR}
    B.W sub_19494
loc_2ED50:
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:0xC",
  "memory-read-from-input-parameter-offset:0x10",
  "memory-read-from-input-parameter-offset:0x14",
  "memory-read-from-input-parameter-offset:0x18",
  "memory-read-from-input-parameter-offset:0x1C",
  "memory-read-from-input-parameter-offset:0x20",
  "fixed-value-comparison:0",
  "address-or-offset-constant:sub_1E6B0",
  "address-or-offset-constant:sub_19494",
  "inferred-algorithm:loop-with-conditional-checks",
  "inferred-algorithm:callback-invocation",
  "inferred-algorithm:data-processing-helper"
]
```<|im_end|>
############
```assembly
loc_1BFB4:
    PUSH {R4-R6,LR}
    MOV R4, #0x56190
    SUB.W SP, SP, #0x3F8
    MOV R5, R1
    MOV R1, R0
    LDR R3, [R4]
    ADD R0, SP, #0x408+var_404
    MOV R6, R2
    STR R3, [SP,#0x408+var_14]
    BL sub_1B958
    MOVS R2, #0x20
    MOVS R1, #0
    ADD R0, SP, #0x408+s
    BLX memset
    ADD R2, SP, #0x408+var_404
    MOV R1, R6
    MOV R0, R5
    BL sub_1B404
    ADD R0, SP, #0x408+var_404
    MOV.W R1, #0x3F0
    BL sub_194E4
    LDR R2, [SP,#0x408+var_14]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_1BFFE
loc_1BFF8:
    ADD.W SP, SP, #0x3F8
    POP {R4-R6,PC}
loc_1BFFE:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x3F8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:unspecified-helper (sub_1B958)",
  "external-call-type:unspecified-helper (sub_1B404)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0x56190",
  "fixed-value-assignment:0x20",
  "fixed-value-assignment:0x3F0",
  "address-or-offset-constant:sub_1B958",
  "address-or-offset-constant:sub_1B404",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-initialization-or-zeroing",
  "inferred-algorithm:buffer-comparison",
  "inferred-algorithm:safe-pointer-access"
]
```<|im_end|>
############
```assembly
loc_16C84:
    LDR R0, [R6,#8]
    ADD.W R7, SP, #0x98+n+3
    BLX strlen
    LDR R3, [R6]
    MOV R4, R0
    LDR R0, [R3,#0x30]
    BLX strlen
    LDR R3, [SP,#0x98+n]
    MOVS R1, #1
    ADDS R3, #0xBC
    ADD R3, R8
    ADD R3, R4
    ADD R3, R0
    STR R3, [SP,#0x98+var_84]
    MOV R0, R3
    BL sub_193B8
    MOV R3, #0x3A00C
    MOV R5, R0
    LDM R3!, {R0-R2}
    LDRH R4, [R3]
    LDRB R3, [R3,#(aOpensshKeyV1+0xE - 0x3A018)]
    STR R0, [R5]
    STRH R4, [R5,#0xC]
    ADD.W R4, SP, #0x98+var_5D
    STR R1, [R5,#4]
    STR R2, [R5,#8]
    STRB R3, [R5,#0xE]
    CMP.W R10, #0
    BEQ.W loc_16F94
loc_16CD2:
    BL sub_2D1F4
    STRB.W R0, [R7,#1]!
    CMP R7, R4
    BNE loc_16CD2
loc_16CDE:
    MOV R3, #0x3A58C
    MOV R12, #0x3A598
    LDM R3!, {R0,R1}
    ADD R2, SP, #0x98+var_6C
    MOVS R4, #0
    STR R2, [SP,#0x98+var_74]
    MOV R7, R2
    STRB R4, [R5,#0xF]
    STR.W R0, [R5,#0x13]
    MOV.W LR, #0xA
    LDRH R3, [R3]
    ADD.W R11, R5, #0x43
    LDR.W R0, [R12]
    STRB R4, [R5,#0x10]
    STRB R4, [R5,#0x11]
    STRB.W LR, [R5,#0x12]
    STRH.W R3, [R5,#0x1B]
    STR.W R1, [R5,#0x17]
    STR.W R0, [R5,#0x21]
    LDM R7!, {R0-R3}
    LDRH.W R7, [R12,#(word_3A59C - 0x3A598)]
    STRB R4, [R5,#0x1D]
    STRB R4, [R5,#0x1E]
    STRH.W R7, [R5,#0x25]
    MOVS R7, #0x18
    STR.W R0, [R5,#0x2F]
    MOVS R0, #6
    STR.W R1, [R5,#0x33]
    STRB.W R0, [R5,#0x20]
    MOVS R0, #0x10
    STR.W R2, [R5,#0x37]
    LSR.W R1, R7, R0
    STR.W R3, [R5,#0x3B]
    LSR.W R2, R7, R7
    STRB R4, [R5,#0x1F]
    LSRS R3, R7, #8
    STRB.W R4, [R5,#0x2B]
    STRB.W R4, [R5,#0x2C]
    STRB.W R4, [R5,#0x2D]
    STRB.W R0, [R5,#0x2E]
    STRB.W R4, [R5,#0x3F]
    STRB.W R4, [R5,#0x40]
    STRB.W R4, [R5,#0x41]
    STRB.W R0, [R5,#0x42]
    STRB.W R7, [R5,#0x2A]
    STRB.W R2, [R5,#0x27]
    STRB.W R1, [R5,#0x28]
    STRB.W R3, [R5,#0x29]
loc_16D84:
    MOVS R7, #0
    MOVS R3, #1
    STRB.W R7, [R11]
    ADD.W R0, R11, #8
    STRB.W R7, [R11,#1]
    MOVS R4, #4
    STRB.W R7, [R11,#2]
    STRB.W R3, [R11,#3]
    LDR.W R9, [SP,#0x98+n]
    LDR R1, [SP,#0x98+src]
    MOV.W R3, R9,ASR#24
    STRB.W R9, [R11,#7]
    STRB.W R3, [R11,#4]
    MOV R2, R9
    MOV.W R3, R9,ASR#16
    STRB.W R3, [R11,#5]
    MOV.W R3, R9,ASR#8
    ADD.W R9, R9, #8
    STRB.W R3, [R11,#6]
    ADD R9, R11
    BLX memcpy
    MOV R0, R7
    ADD.W R7, R9, R4
loc_16DD2:
    MOV.W R11, R0,LSL#8
    BL sub_2D1F4
    SUBS R4, #1
    ADD R0, R11
    BNE loc_16DD2
loc_16DE0:
    UBFX.W R2, R0, #0x10, #8
    LSRS R1, R0, #0x18
    UBFX.W R3, R0, #8, #8
    STRB.W R2, [R9,#5]
    STRB.W R2, [R9,#9]
    UXTB R0, R0
    STRB.W R1, [R9,#4]
    ADD.W R4, R9, #0xC
    STRB.W R0, [R9,#7]
    STRB.W R0, [R9,#0xB]
    STRB.W R1, [R9,#8]
    STRB.W R3, [R9,#6]
    STRB.W R3, [R9,#0xA]
    LDR R3, [R6]
    LDR R1, [R3,#0x30]
    MOV R0, R1
    STR R1, [SP,#0x98+var_78]
    BLX strlen
    LDR R1, [SP,#0x98+var_78]
    MOV R11, R0
    ADD.W R11, R11, #4
    ADD R4, R11
    ASRS R3, R0, #0x18
    ASRS R2, R0, #0x10
    STRB.W R0, [R9,#0xF]
    STRB.W R3, [R9,#0xC]
    ASRS R3, R0, #8
    STRB.W R2, [R9,#0xD]
    MOV R2, R0
    STRB.W R3, [R9,#0xE]
    ADD.W R0, R9, #0x10
    BLX memcpy
    MOV R2, R8
    LDR R1, [SP,#0x98+var_88]
    MOV R0, R4
    BLX memcpy
    LDR R1, [R6,#8]
    ADD.W R11, R4, R8
    MOV R0, R1
    STR R1, [SP,#0x98+var_78]
    BLX strlen
    LDR R1, [SP,#0x98+var_78]
    MOV R6, R0
    ASRS R3, R0, #0x18
    ASRS R2, R0, #0x10
    STRB.W R3, [R4,R8]
    STRB.W R0, [R11,#3]
    ASRS R3, R0, #8
    STRB.W R2, [R11,#1]
    ADD.W R0, R11, #4
    STRB.W R3, [R11,#2]
    MOV R2, R6
    BLX memcpy
    ADDS R6, #4
    ADD R11, R6
    MOV R4, R11
loc_16E88:
    ADDS R4, #1
    SUBS R6, R4, R7
    SUB.W R3, R4, R11
    STRB.W R3, [R4,#-1]
    LSLS R3, R6, #0x1C
    BNE loc_16E88
loc_16E98:
    LDR R3, [SP,#0x98+var_84]
    SUBS R4, R4, R5
    CMP R3, R4
    BLE.W loc_16FF2
loc_16EA2:
    ASRS R3, R6, #0x18
    STRB.W R6, [R9,#3]
    STRB.W R3, [R9]
    ASRS R3, R6, #0x10
    STRB.W R3, [R9,#1]
    ASRS R3, R6, #8
    STRB.W R3, [R9,#2]
    CMP.W R10, #0
    BEQ loc_16F02
loc_16EBE:
    MOVS R3, #0x10
    LDR R1, [SP,#0x98+var_74]
    MOV R2, R3
    MOV R0, R10
    ADD.W R9, SP, #0x98+var_5C
    MOV.W R11, #0x30
    STMEA.W SP, {R9,R11}
    BL sub_1C22C
    BL sub_1B3F4
    MOV R1, R9
    MOV R10, R0
    BL sub_1BC4C
    MOV R0, R10
    ADD R1, SP, #0x98+var_3C
    BL sub_1B38C
    MOV R1, R7
    MOV R2, R6
    MOV R0, R10
    BL sub_1B5A8
    MOV R0, R10
    BL sub_1B400
    MOV R1, R11
    MOV R0, R9
    BL sub_194E4
loc_16F02:
    LDR R0, [SP,#0x98+var_80]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R6, R0
    CMP R0, #0
    BEQ loc_16F90
loc_16F18:
    MOVS R1, #1
    MOV R3, R6
    MOVS R2, #0x24
    MOV R0, #aBeginOpensshPr_0
    MOV R7, R1
    BLX fwrite
    MOV R2, R4
    MOVS R3, #0x40
    MOV R1, R5
    MOV R0, R6
    BL sub_2C190
    MOV R3, R6
    MOVW R0, #0xAA68
    MOVS R2, #0x22
    MOVT.W R0, #3
    MOV R1, R7
    BLX fwrite
    MOV R0, R6
    BLX fclose
loc_16F50:
    LDR R1, [SP,#0x98+var_84]
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R4, [SP,#0x98+var_88]
    MOV R1, R8
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R4, [SP,#0x98+src]
    LDR R1, [SP,#0x98+n]
    MOV R0, R4
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
    LDR R3, [SP,#0x98+var_7C]
    LDR R2, [SP,#0x98+var_2C]
    MOV R0, R7
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_16FEE
loc_16F8A:
    ADD SP, SP, #0x74
    POP.W {R4-R11,PC}
loc_16F90:
    MOV R7, R6
    B loc_16F50
loc_16F94:
    MOV R3, #0x3A584
    ADD R2, SP, #0x98+var_6C
    STR.W R10, [SP,#0x98+var_6C]
    LDR R0, [R3]
    ADD.W R11, R5, #0x23
    STR.W R10, [R2,#4]
    MOVS R3, #4
    STR.W R10, [SP,#0x38]
    STR.W R10, [SP,#0x98+var_64]
    STR R2, [SP,#0x98+var_74]
    STRB.W R10, [R5,#0x1F]
    STRB.W R10, [R5,#0x20]
    STRB.W R10, [R5,#0x21]
    STRB.W R10, [R5,#0x22]
    STR.W R0, [R5,#0x13]
    STR.W R0, [R5,#0x1B]
    STRB.W R10, [R5,#0xF]
    STRB.W R10, [R5,#0x10]
    STRB.W R10, [R5,#0x11]
    STRB.W R10, [R5,#0x17]
    STRB.W R10, [R5,#0x18]
    STRB.W R10, [R5,#0x19]
    STRB R3, [R5,#0x12]
    STRB R3, [R5,#0x1A]
    B loc_16D84
loc_16FEE:
    BLX __stack_chk_fail
loc_16FF2:
    MOVW R1, #0xA624
    MOVW R0, #0xAA28
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewWrit
    MOVW R2, #0x72E
    BLX __assert_fail
loc_1700C:
    MOVW R1, #0xA624
    MOVW R0, #0xAA18
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aOpensshNewWrit
    MOVW R2, #0x6DC
    BLX __assert_fail
```
Output:9,#8]
    STRB.W R3, [R9,#6]
    STRB.W R1, [R9,#7]
    LDR.W R9, [SP,#0x98+n]
    LDR R1, [SP,#0x98+src]
    ADD W0, W0, #1
    ADD W1, W1, #1
    LDR R2, [SP,#0x98+dest]
    ADD.W R2, R2, #0xC
    LDR W3, [SP,#0x98+n]
    SUBS R3, R3, #1
    ADD.W R0, R0, #0x18
    SUBS R1, R1, #1
    ADD.W R2, R2, #0x18
    BNE loc_16DE0
    LDR.W R0, [SP,#0x98+n]
    LDR.W R1, [SP,#0x98+src]
    LDR.W R2, [SP,#0x98+dest]
    LDR.W R3, [SP,#0x98+n]
    SUBS R3, R3, #1
    LDR.W R4, [SP,#0x98+src]
    LDR.W R5, [SP,#0x98+dest]
    SUBS R5, R5, #1
    BNE loc_16D84
    LDR.W R0, [SP,#0x98+n]
    LDR.W R1, [SP,#0x98+src]
    LDR.W R2, [SP,#0x98+dest]
    LDR.W R3, [SP,#0x98+n]
    SUBS R3, R3, #1
    LDR.W R4, [SP,#0x98+src]
    LDR.W R5, [SP,#0x98+dest]
    SUBS R5, R5, #1
    BNE loc_16DD2
    LDR.W R0, [SP,#0x98+n]
    LDR.W R1, [SP,#0x98+src]
    LDR.W R2, [SP,#0x98+dest]
    LDR.W R3, [SP,#0x98+n]
    SUBS R3, R3, #1
    LDR.W R4, [SP,#0x98+src]
    LDR.W R5, [SP,#0x98+dest]
    SUBS R5, R5, #1
    BNE loc_16DE0
    LDR.W R0, [SP,#0x98+n]
    LDR.W R1, [SP,#0x98+src]
    LDR.W R2, [SP,#0x98+dest]
    LDR.W R3, [SP,#0x98+n]
    SUBS R3, R3, #1
    LDR.W R4, [SP,#0x98+src]
    LDR.W R5, [SP,#0x98+dest]
    SUBS R5, R5, #1
    BNE loc_16D84
    LDR.W R0, [SP,#0x98+n]
    LDR.W R1, [SP,#0x98+src]
    LDR.W R2, [SP,#0x98+dest]
    LDR.W R3, [SP,#0x98+n]
    SUBS R3, R3, #1
    LDR.W R4, [SP,#0x98+src]
    LDR.W R5, [SP,#0x98+dest]
    SUBS R5, R5, #1
    BNE loc_16DD2
    LDR.W R0, [SP,#0x98+n]
    LDR.W R1, [SP,#0x98+src]
    LDR.W R2, [SP,#0x98+dest]
    LDR.W R3, [SP,#0x98+n]
    SUBS R3, R3, #1
    LDR.W R4, [SP,#0x98+src]
    LDR.W R5, [SP,#0x98+dest]
    SUBS R5, R5, #1
    BNE loc_16DE0
    LDR.W R0, [SP,#0x98+n]
    LDR.W R1, [SP,#
############
```assembly
loc_2BA8C:
    PUSH.W {R4-R11,LR}
    MOV R4, #0x56190
    SUB SP, SP, #0x44
    MOV R10, R1
    MOV R11, R2
    LDR R5, [R4]
    MOVW R1, #0x32EC
    MOVS R2, #0
    MOVT.W R1, #4
    MOV R8, R3
    LDR R6, [SP,#0x68+arg_0]
    STR R5, [SP,#0x68+var_2C]
    BL sub_3694C
    MOV R5, R0
    CBZ R0, loc_2BAFA
loc_2BAB8:
    BL sub_2AB90
    CMP R0, #9
    BEQ loc_2BB6C
loc_2BAC0:
    CMP R0, #0xA
    BEQ loc_2BB84
loc_2BAC4:
    CMP R0, #3
    BEQ loc_2BB1C
loc_2BAC8:
    MOV.W R10, #0
    MOV R7, #0x4345C
    MOV R9, R10
loc_2BAD6:
    MOV R0, R5
    BLX fclose
    CBZ R6, loc_2BAE0
loc_2BADE:
    STR R7, [R6]
loc_2BAE0:
    CMP.W R10, #0
    BNE loc_2BB0C
loc_2BAE6:
    MOVS R7, #0
loc_2BAE8:
    LDR R2, [SP,#0x68+var_2C]
    MOV R0, R7
    LDR R3, [R4]
    CMP R2, R3
    BNE.W loc_2BDD2
loc_2BAF4:
    ADD SP, SP, #0x44
    POP.W {R4-R11,PC}
loc_2BAFA:
    CMP R6, #0
    BEQ loc_2BAE6
loc_2BAFE:
    MOVW R7, #0x32F0
    MOV R10, R5
    MOVT.W R7, #4
    MOV R9, R5
    B loc_2BADE
loc_2BB0C:
    MOV R0, R9
    BL sub_19494
    MOVS R3, #0
    MOV R7, R3
    STR.W R3, [R8]
    B loc_2BAE8
loc_2BB1C:
    MOVW R7, #0x4801
    ADD.W R9, SP, #0x68+s1
    B loc_2BB36
loc_2BB26:
    CMP R0, #0x3A
    BEQ loc_2BB9C
loc_2BB2A:
    ADD.W R3, SP, #0x68+var_2D
    CMP R9, R3
    BEQ loc_2BB4A
loc_2BB32:
    STRB.W R0, [R9],#1
loc_2BB36:
    MOV R0, R5
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2BB26
loc_2BB42:
    LSR.W R3, R7, R3
    LSLS R1, R3, #0x1F
    BPL loc_2BB2A
loc_2BB4A:
    MOVW R1, #0x33C4
    ADD R0, SP, #0x68+s1
    MOVS R2, #0x14
    MOVT.W R1, #4
    BLX strncmp
    CMP R0, #0
    BNE loc_2BAC8
loc_2BB5E:
    MOVW R7, #0x3440
    MOV R10, R0
    MOVT.W R7, #4
    MOV R9, R0
    B loc_2BAD6
loc_2BB6C:
    STR R6, [SP,#0x68+var_68]
    MOV R3, R8
    MOV R2, R11
    MOV R1, R10
    MOV R0, R5
    BL sub_2B66C
    MOV R7, R0
    MOV R0, R5
    BLX fclose
    B loc_2BAE8
loc_2BB84:
    STR R6, [SP,#0x68+var_68]
    MOV R3, R8
    MOV R2, R11
    MOV R1, R10
    MOV R0, R5
    BL sub_2B94C
    MOV R7, R0
    MOV R0, R5
    BLX fclose
    B loc_2BAE8
loc_2BB9C:
    MOV R0, R5
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2BB4A
loc_2BBA6:
    MOVW R1, #0x347C
    MOVS R3, #0
    MOVT.W R1, #4
    ADD R0, SP, #0x68+s1
    STRB.W R3, [R9]
    BLX strcmp
    CBZ R0, loc_2BBCE
loc_2BBBC:
    MOVW R1, #0x3494
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BNE loc_2BB4A
loc_2BBCE:
    MOVS R1, #1
    MOVS R0, #0x80
    BL sub_193B8
    MOVS R2, #0
    MOVS R1, #0x80
    STR R6, [SP,#0x68+var_60]
    STR R4, [SP,#0x68+endptr]
    MOV R6, R2
    MOV R9, R1
    STRB R2, [R0]
    MOV R4, R0
    B loc_2BBF4
loc_2BBE8:
    ADDS R1, R4, R6
    MOV.W R3, #0
    STRB.W R7, [R1,#-1]
    STRB R3, [R4,R6]
loc_2BBF4:
    MOV R0, R5
    BLX fgetc
    CMP R0, #0xA
    IT 
    CMPNE R0, #0xD
    MOV R7, R0
    BEQ loc_2BC20
loc_2BC04:
    ADDS R2, R0, #1
    BEQ loc_2BCD4
loc_2BC08:
    ADDS R6, #1
    CMP R6, R9
    BLT loc_2BBE8
loc_2BC0E:
    ADD.W R9, R9, #0x80
    MOV R0, R4
    MOVS R2, #1
    MOV R1, R9
    BL sub_19420
    MOV R4, R0
    B loc_2BBE8
loc_2BC20:
    ADDS R7, R0, #1
    MOV R3, R4
    LDR R6, [SP,#0x68+var_60]
    LDR R4, [SP,#0x68+endptr]
    BEQ loc_2BC3C
loc_2BC2A:
    MOV R0, R5
    STR R3, [SP,#0x68+var_60]
    BLX fgetc
    LDR R3, [SP,#0x68+var_60]
    CMP R0, #0xD
    IT 
    CMPNE R0, #0xA
    BNE loc_2BCBA
loc_2BC3C:
    CMP R3, #0
    BEQ loc_2BCC4
loc_2BC40:
    MOV R0, R3
    STR R3, [SP,#0x68+var_60]
    BLX strlen
    LDR R3, [SP,#0x68+var_60]
    MOV R2, #0x3A724
    MOV R1, R3
    MOV R7, R0
    BL sub_19870
    LDR R3, [SP,#0x68+var_60]
    CMP R0, #0
    BEQ loc_2BCDC
loc_2BC60:
    MOV R2, #0x43AC8
    STR R2, [SP,#0x68+var_60]
loc_2BC6A:
    MOV R0, R3
    ADD.W R9, SP, #0x68+s1
    BL sub_19494
    MOVW R7, #0x4801
    B loc_2BC8A
loc_2BC7A:
    CMP R0, #0x3A
    BEQ loc_2BCFE
loc_2BC7E:
    ADD.W R3, SP, #0x68+var_2D
    CMP R9, R3
    BEQ loc_2BC9E
loc_2BC86:
    STRB.W R0, [R9],#1
loc_2BC8A:
    MOV R0, R5
    BLX fgetc
    ADDS R3, R0, #1
    CMP R3, #0xE
    BHI loc_2BC7A
loc_2BC96:
    LSR.W R3, R7, R3
    LSLS R3, R3, #0x1F
    BPL loc_2BC7E
loc_2BC9E:
    MOV R0, R5
    BLX fclose
    CMP R6, #0
    BEQ.W loc_2BAE6
loc_2BCAA:
    MOV.W R10, #0
    MOVW R7, #0x32A8
    MOV R9, R10
    MOVT.W R7, #4
    B loc_2BADE
loc_2BCBA:
    MOV R1, R5
    BLX ungetc
    LDR R3, [SP,#0x68+var_60]
    B loc_2BC3C
loc_2BCC4:
    MOV.W R10, #0
    MOVW R7, #0x32A8
    MOV R9, R10
    MOVT.W R7, #4
    B loc_2BAD6
loc_2BCD4:
    MOV R3, R4
    LDR R6, [SP,#0x68+var_60]
    LDR R4, [SP,#0x68+endptr]
    B loc_2BC3C
loc_2BCDC:
    MOV R1, R3
    MOVW R2, #0xA710
    MOV R0, R7
    MOVT.W R2, #3
    BL sub_19870
    LDR R3, [SP,#0x68+var_60]
    CMP R0, #0
    BEQ loc_2BD92
loc_2BCF2:
    MOV R2, #0x3F520
    STR R2, [SP,#0x68+var_60]
    B loc_2BC6A
loc_2BCFE:
    MOV R0, R5
    BLX fgetc
    CMP R0, #0x20
    BNE loc_2BC9E
loc_2BD08:
    MOVW R1, #0x34AC
    MOVS R3, #0
    MOVT.W R1, #4
    ADD R0, SP, #0x68+s1
    STRB.W R3, [R9]
    BLX strcmp
    CMP R0, #0
    BNE loc_2BCC4
loc_2BD20:
    MOV R0, R5
    BL sub_2A55C
    CMP R0, #0
    BEQ loc_2BCC4
loc_2BD2A:
    BL sub_19494
    ADD R1, SP, #0x68+s1
    MOV R0, R5
    BL sub_2A438
    CMP R0, #0
    BEQ loc_2BCC4
loc_2BD3A:
    MOVW R1, #0xA63C
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #3
    BLX strcmp
    CMP R0, #0
    BNE loc_2BCC4
loc_2BD4C:
    MOV R0, R5
    BL sub_2A55C
    MOV R9, R0
    CMP R0, #0
    BEQ loc_2BCC4
loc_2BD58:
    CMP.W R8, #0
    BEQ loc_2BE18
loc_2BD5E:
    STR.W R0, [R8]
loc_2BD62:
    ADD R1, SP, #0x68+s1
    MOV R0, R5
    BL sub_2A438
    CBZ R0, loc_2BD7E
loc_2BD6C:
    MOVW R1, #0x34B8
    ADD R0, SP, #0x68+s1
    MOVT.W R1, #4
    BLX strcmp
    CMP R0, #0
    BEQ loc_2BE1E
loc_2BD7E:
    MOVS.W R10, R8
    MOV R7, #0x432A8
    IT 
    MOVNE.W R10, #1
    B loc_2BAD6
loc_2BD92:
    MOV R1, R3
    MOVW R2, #0xFE3C
    MOV R0, R7
    MOVT.W R2, #3
    BL sub_19870
    LDR R3, [SP,#0x68+var_60]
    CBZ R0, loc_2BDB2
loc_2BDA6:
    MOV R2, #0x3FB34
    STR R2, [SP,#0x68+var_60]
    B loc_2BC6A
loc_2BDB2:
    MOV R1, R3
    MOVW R2, #0xFE28
    MOV R0, R7
    MOVT.W R2, #3
    BL sub_19870
    LDR R3, [SP,#0x68+var_60]
    CBZ R0, loc_2BDD6
loc_2BDC6:
    MOV R2, #0x3FB70
    STR R2, [SP,#0x68+var_60]
    B loc_2BC6A
loc_2BDD2:
    BLX __stack_chk_fail
loc_2BDD6:
    MOV R1, R3
    MOVW R2, #0xFE14
    MOV R0, R7
    MOVT.W R2, #3
    BL sub_19870
    LDR R3, [SP,#0x68+var_60]
    CBZ R0, loc_2BDF6
loc_2BDEA:
    MOV R2, #0x3FBAC
    STR R2, [SP,#0x68+var_60]
    B loc_2BC6A
loc_2BDF6:
    MOV R1, R3
    MOV R0, R7
    MOV R2, #0x3FE50
    BL sub_19870
    LDR R3, [SP,#0x68+var_60]
    CMP R0, #0
    BEQ loc_2BE74
loc_2BE0C:
    MOV R2, #0x3FBE8
    STR R2, [SP,#0x68+var_60]
    B loc_2BC6A
loc_2BE18:
    BL sub_19494
    B loc_2BD62
loc_2BE1E:
    STR R0, [SP,#0x68+endptr]
    MOV R0, R5
    BL sub_2A55C
    LDR R1, [SP,#0x68+endptr]
    MOV R7, R0
    CMP R0, #0
    BEQ loc_2BD7E
loc_2BE2E:
    MOVS R2, #0xA
    BLX strtol
    STR R0, [SP,#0x68+endptr]
    MOV R0, R7
    BL sub_19494
    LDR R1, [SP,#0x68+endptr]
    ADD R2, SP, #0x68+var_58
    MOV R0, R5
    BL sub_1160C
    MOV R7, R0
    CMP R0, #0
    BEQ loc_2BD7E
loc_2BE4C:
    MOV R0, R5
    BLX fclose
    CMP.W R11, #0
    BEQ loc_2BE5E
loc_2BE58:
    LDR R3, [SP,#0x68+var_58]
    STR.W R3, [R11]
loc_2BE5E:
    CMP.W R10, #0
    BEQ.W loc_2BAE8
loc_2BE66:
    LDR R3, [SP,#0x68+var_60]
    LDR R0, [R3,#0x30]
    BL sub_18A88
    STR.W R0, [R10]
    B loc_2BAE8
loc_2BE74:
    MOV R0, R3
    BL sub_19494
loc_2BE7A:

```
Output:F4:
    ADD SP, SP, #0x44
    POP.W {R4-R11,PC}
```
<|im_start|><|im_end|>
############
```assembly
loc_1E3C0:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0xC
    LDR R5, [R1]
    LDR.W R3, [R1,R5,LSL#2]
    CMP R3, #0
    BEQ.W loc_1E52A
loc_1E3D2:
    MOV R4, R1
    MOV R11, R0
    MOVS R1, #4
    MOV R0, R5
    MOV R6, R2
    BL sub_193B8
    CMP R5, #0
    MOV.W R9, R5,LSL#2
    IT 
    MOVGT R2, #0
    MOV R8, R0
    IT 
    SUBGT R1, R0, #4
    BLE loc_1E404
loc_1E3F2:
    LDR R3, [R4]
    SUBS R3, R3, R2
    ADDS R2, #1
    CMP R5, R2
    LDR.W R3, [R4,R3,LSL#2]
    STR.W R3, [R1,#4]!
    BNE loc_1E3F2
loc_1E404:
    LDR.W R4, [R11]
    MOVS R1, #4
    CMP R5, R4
    IT 
    ADDGE R4, R5, #1
    MOV R0, R4
    MOV.W R10, R4,LSL#2
    BL sub_193B8
    CMP R4, #0
    MOV R7, R0
    BLE loc_1E428
loc_1E420:
    MOVS R1, #0
    MOV R2, R10
    BLX memset
loc_1E428:
    LDR.W R3, [R11]
    CMP R3, #0
    ITTT 
    ADDGT.W R0, R7, R10
    MOVGT R2, R11
    MOVGT R3, #1
    BLE loc_1E44C
loc_1E43A:
    LDR.W R1, [R2,#4]!
    ADDS R3, #1
    STR.W R1, [R0,#-4]!
    LDR.W R1, [R11]
    CMP R3, R1
    BLE loc_1E43A
loc_1E44C:
    LDR.W R0, [R8]
    LSRS R1, R0, #0x10
    MOV.W R3, R0,LSL#16
    ITE 
    MOVNE R11, R0
    MOVEQ R11, R3
    MOV.W R2, R11,LSR#24
    MOV.W R3, R11,LSL#8
    CMP R2, #0
    ITET 
    MOVNE R3, R11
    MOVEQ R2, #8
    MOVNE R2, #0
    CMP R1, #0
    MOV.W R1, R3,LSR#28
    ITE 
    MOVEQ.W R11, #0x10
    MOVNE.W R11, #0
    CMP R1, #0
    MOV.W R1, R3,LSL#4
    ADD R11, R2
    ITE 
    MOVEQ R3, R1
    MOVNE R1, #0
    MOV.W R2, R3,LSR#30
    IT 
    MOVEQ R1, #4
    CMP R2, #0
    ADD R11, R1
    MOV.W R2, R3,LSL#2
    ITE 
    MOVEQ R1, #2
    MOVNE R1, #0
    ADD R11, R1
    IT 
    MOVEQ R3, R2
    CMP R3, #0
    IT 
    ADDGE.W R11, R11, #1
    CMP.W R11, #0
    BEQ loc_1E4CA
loc_1E4B6:
    CMP R5, #1
    LSL.W R0, R0, R11
    ITTTT 
    RSBGT.W R2, R11, #0x20
    LDRGT.W R3, [R8,#4]
    LSRGT R3, R2
    ORRGT R0, R3
loc_1E4CA:
    BL sub_1D700
    STR.W R11, [SP,#0x30+var_2C]
    MOV R3, R5
    MOV R2, R8
    MOV R1, R4
    STR R0, [SP,#0x30+var_30]
    MOV R0, R7
    BL sub_1E170
    CBZ R6, loc_1E508
loc_1E4E2:
    LDR R3, [R6]
    CMP R3, #0
    BLE loc_1E508
loc_1E4E8:
    SUBS R3, R4, #1
    MOV R1, R6
    MOVS R2, #1
loc_1E4EE:
    CMP R3, #0
    ADD.W R2, R2, #1
    ITE 
    LDRGE.W R0, [R7,R3,LSL#2]
    MOVLT R0, #0
    SUBS R3, #1
    STR.W R0, [R1,#4]!
    LDR R0, [R6]
    CMP R2, R0
    BLE loc_1E4EE
loc_1E508:
    MOV R1, R9
    MOV R0, R8
    BL sub_194E4
    MOV R0, R8
    BL sub_19494
    MOV R0, R7
    MOV R1, R10
    BL sub_194E4
    MOV R0, R7
    ADD SP, SP, #0xC
    POP.W {R4-R11,LR}
    B.W sub_19494
loc_1E52A:
    MOVW R1, #0xE76C
    MOVW R0, #0xE7E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBigdivmod
    MOV.W R2, #0x540
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (memset)",
  "external-call-type:unspecified-helper (sub_1D700)",
  "external-call-type:unspecified-helper (sub_1E170)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:unspecified-helper (sub_19494)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "data-packing-serialization-patterns",
  "bitwise-operations:OR",
  "bitwise-operations:XOR",
  "bitwise-operations:AND-clear",
  "bitwise-mask-values:0xE76C",
  "bitwise-mask-values:0xE7E4",
  "bitwise-mask-values:0x540",
  "fixed-value-comparison:0",
  "fixed-value-comparison:1",
  "address-or-offset-constant:aBigdivmod",
  "inferred-algorithm:data-manipulation",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:array-manipulation",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_2F898:
    PUSH.W {R4-R11,LR}
    MOV R10, #0x56190
    LDR.W R6, [R0,#0x140]
    LDR.W R3, [R0,#0x13C]
    MOV R4, R0
    ADD.W R8, R0, #0xD8
    LDR.W R7, [R10]
    LDR.W R0, [R0,#0x138]
    SUB SP, SP, #0x4C
    ADD R6, R2
    MOV R5, R2
    CMP R2, R6
    IT 
    ADDHI R3, #1
    STR.W R6, [R4,#0x140]
    STR R7, [SP,#0x70+n]
    MOV R6, R1
    STR.W R3, [R4,#0x13C]
    CMP R0, #0
    BEQ loc_2F9C6
loc_2F8D6:
    ADDS R3, R2, R0
    CMP R3, #0x3F
    BLE loc_2F9D2
loc_2F8DC:
    ADD.W R11, R4, #0xF8
    MOV.W R9, #0
loc_2F8E4:
    RSB.W R2, R0, #0x40
    MOV R1, R6
    ADD R0, R11
    BLX memcpy
    LDR.W R2, [R4,#0xF8]
    LDR.W R3, [R4,#0x138]
    ADD R1, SP, #0x70+var_6C
    REV R2, R2
    STR R2, [SP,#0x70+var_6C]
    LDR.W R2, [R4,#0x100]
    RSB.W R3, R3, #0x40
    LDR.W R7, [R4,#0x10C]
    SUBS R5, R5, R3
    REV R2, R2
    STR R2, [SP,#0x70+var_64]
    LDR.W R2, [R4,#0x104]
    ADD R6, R3
    LDR.W R3, [R4,#0x110]
    REV.W LR, R2
    STR.W LR, [SP,#0x70+var_60]
    REV.W LR, R7
    LDR.W R7, [R4,#0x114]
    LDR.W R2, [R4,#0x108]
    REV R3, R3
    REV.W R12, R7
    STR R3, [SP,#0x70+var_54]
    LDR.W R7, [R4,#0x11C]
    REV R2, R2
    LDR.W R3, [R4,#0x120]
    STR R2, [SP,#0x70+var_5C]
    STR.W LR, [SP,#0x70+var_58]
    REV R3, R3
    REV.W LR, R7
    LDR.W R2, [R4,#0x118]
    LDR.W R7, [R4,#0x124]
    STR R3, [SP,#0x70+var_44]
    REV R2, R2
    LDR.W R3, [R4,#0x12C]
    LDR.W R0, [R4,#0xFC]
    STR.W R12, [SP,#0x70+var_50]
    REV R3, R3
    REV.W R12, R7
    STR R2, [SP,#0x70+var_4C]
    LDR.W R7, [R4,#0x130]
    REV R0, R0
    LDR.W R2, [R4,#0x128]
    STR R3, [SP,#0x70+var_38]
    LDR.W R3, [R4,#0x134]
    REV R2, R2
    STR R0, [SP,#0x70+var_68]
    MOV R0, R8
    STR.W LR, [SP,#0x70+var_48]
    REV R3, R3
    STR.W R12, [SP,#0x70+var_40]
    REV.W R12, R7
    STR R2, [SP,#0x70+var_3C]
    STR.W R12, [SP,#0x70+var_34]
    STR R3, [SP,#0x70+var_30]
    BL sub_2F354
    CMP R5, #0x3F
    STR.W R9, [R4,#0x138]
    MOV.W R0, #0
    BGT loc_2F8E4
loc_2F9A8:
    MOV R1, R6
    MOV R0, R11
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R4,#0x138]
loc_2F9B6:
    LDR R2, [SP,#0x70+n]
    LDR.W R3, [R10]
    CMP R2, R3
    BNE loc_2F9E8
loc_2F9C0:
    ADD SP, SP, #0x4C
    POP.W {R4-R11,PC}
loc_2F9C6:
    CMP R2, #0x3F
    IT 
    ADDLE.W R11, R4, #0xF8
    BGT loc_2F8DC
loc_2F9D0:
    B loc_2F9A8
loc_2F9D2:
    ADD.W R3, R4, #0xF8
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R4,#0x138]
    ADD R3, R5
    STR.W R3, [R4,#0x138]
    B loc_2F9B6
loc_2F9E8:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "conditional-branching-on-loop-counter",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:reverse",
  "bitwise-operations:shift-left",
  "bitwise-operations:shift-right",
  "bitwise-operations:OR",
  "bitwise-operations:AND-clear",
  "bitwise-operations:XOR",
  "specific-bitmask-values:0x56190",
  "specific-bitmask-values:0x3F",
  "specific-bitmask-values:0x40",
  "memory-access-with-offsets",
  "direct-structure-field-updates",
  "fixed-value-comparisons:0",
  "address-or-offset-constants:0x140",
  "address-or-offset-constants:0x13C",
  "address-or-offset-constants:0x138",
  "address-or-offset-constants:0x100",
  "address-or-offset-constants:0x104",
  "address-or-offset-constants:0x108",
  "address-or-offset-constants:0x10C",
  "address-or-offset-constants:0x110",
  "address-or-offset-constants:0x114",
  "address-or-offset-constants:0x118",
  "address-or-offset-constants:0x11C",
  "address-or-offset-constants:0x120",
  "address-or-offset-constants:0x124",
  "address-or-offset-constants:0x128",
  "address-or-offset-constants:0x12C",
  "address-or-offset-constants:0xFC",
  "address-or-offset-constants:0x130",
  "address-or-offset-constants:0x134",
  "address-or-offset-constants:0x138",
  "inferred-algorithm:data-manipulation",
  "inferred-algorithm:loop-based-processing",
  "inferred-algorithm:memory-copy-and-modify",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_2578A:
    LDR R1, [R6,#8]
    LDR R3, [R6]
    MOV R0, R1
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    LDR R3, [R6]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R4, R0
    LDR R0, [R6,#4]
    BL sub_1EAC0
    MOV R5, R0
    MOV R0, R4
    BL sub_1E6B0
    MOVS R1, #1
    MOV R0, R5
    LDR R4, [R6]
    BL sub_1F9F8
    LDR R1, [R4,#0x10]
    MOV R7, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_25A20
loc_257C4:
    LDR R1, [R4,#0x10]
    MOV R0, R7
    BL sub_1FD18
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_25B56
loc_257D4:
    MOV R0, R7
    BL sub_1E6B0
loc_257DA:
    MOV R0, R5
    BL sub_1E6B0
    MOVS R1, #1
    MOV R0, R4
    LDR R7, [R6]
    BL sub_1F9F8
    LDR R1, [R7,#0x10]
    MOV R5, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_25B0A
loc_257F8:
    LDR R1, [R7,#0x10]
    MOV R0, R5
    BL sub_1FD18
    MOV R7, R0
    CMP R0, #0
    BEQ.W loc_25B56
loc_25808:
    MOV R0, R5
    BL sub_1E6B0
loc_2580E:
    MOV R0, R4
    BL sub_1E6B0
    LDR R1, [R6,#0xC]
    CMP.W R8, #0
    BEQ.W loc_25A40
loc_2581E:
    CMP R1, #0
    BEQ.W loc_25B20
loc_25824:
    LDR R3, [R6]
    MOV R0, R1
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R5, R0
loc_25830:
    LDR R4, [R6]
    LDR R0, [R6,#4]
    LDR R1, [R4,#0x10]
    BL sub_200D4
    LDR R1, [R4,#0x10]
    MOV R10, R0
    MOV R0, R5
    BL sub_200D4
    MOV R1, R0
    MOV R9, R0
    MOV R0, R10
    BL sub_1FC80
    MOV R8, R0
    MOV R0, R10
    BL sub_1E6B0
    MOV R0, R9
    BL sub_1E6B0
    LDR R1, [R4,#0x10]
    MOV R0, R8
    BL sub_200D4
    MOV R9, R0
    MOV R0, R8
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R5
    LDR R0, [R6,#4]
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R4, R0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R4
    MOV R0, R9
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R8, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    MOV R0, R8
    MOVS R1, #1
    LDR R5, [R6]
    BL sub_1F9F8
    MOV R1, R8
    MOV R9, R0
    BL sub_1FC80
    MOV R4, R0
    MOV R0, R9
    BL sub_1E6B0
    B loc_258CE
loc_258B6:
    LDR R1, [R5,#0x10]
    MOV R0, R4
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ.W loc_25B3C
loc_258C6:
    MOV R0, R4
    MOV R4, R3
    BL sub_1E6B0
loc_258CE:
    LDR R1, [R5,#0x10]
    MOV R0, R4
    BL sub_1F358
    CMP R0, #0
    BGE loc_258B6
loc_258DA:
    MOV R0, R8
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R4
    MOV R0, R4
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOVS R1, #1
    LDR R5, [R6]
    MOV R9, R0
    MOV R0, R7
    BL sub_1F9F8
    LDR R1, [R5,#0x10]
    MOV R8, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_25B12
loc_25906:
    LDR R1, [R5,#0x10]
    MOV R0, R8
    BL sub_1FD18
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_25B56
loc_25916:
    MOV R0, R8
    BL sub_1E6B0
loc_2591C:
    LDR R3, [R6]
    MOV R1, R5
    MOV R0, R9
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R8, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R8
    MOV R0, R7
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R9, R0
    MOV R0, R7
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R9
    MOV R0, R4
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R5, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R1, [R6,#8]
    LDR R3, [R6]
    MOV R0, R1
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    LDR R3, [R6]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R4, R0
    BL sub_1EAC0
    MOV R7, R0
    MOV R0, R4
    BL sub_1E6B0
    MOVS R0, #8
    BL sub_1FE48
    LDR R3, [R6]
    MOV R1, R7
    LDR R2, [R3,#0x10]
    MOV R9, R0
    BL sub_1EAC0
    MOV R4, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R7
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R4
    MOV R0, R5
    LDR R2, [R3,#0x10]
    BL sub_1F5DC
    MOV R7, R0
    MOV R0, R5
    BL sub_1E6B0
    MOV R0, R4
    BL sub_1E6B0
    LDR R1, [R6,#0xC]
    CMP R1, #0
    BEQ.W loc_25B16
loc_259C6:
    LDR R3, [R6]
    LDR R0, [R6,#8]
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R5, R0
loc_259D2:
    MOVS R1, #1
    MOV R0, R5
    LDR R4, [R6]
    BL sub_1F9F8
    LDR R1, [R4,#0x10]
    MOV R9, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_25B0E
loc_259EA:
    LDR R1, [R4,#0x10]
    MOV R0, R9
    BL sub_1FD18
    MOV R4, R0
    CMP R0, #0
    BEQ.W loc_25B56
loc_259FA:
    MOV R0, R9
    BL sub_1E6B0
loc_25A00:
    MOV R0, R5
    BL sub_1E6B0
    MOVS R1, #0x14
    MOVS R0, #1
    LDR R5, [R6]
    BL sub_193B8
    MOVS R2, #0
    STM.W R0, {R5,R8}
    STR R7, [R0,#8]
    STR R4, [R0,#0xC]
    STRB R2, [R0,#0x10]
    POP.W {R3-R11,PC}
loc_25A20:
    MOV R4, R7
    B loc_257DA
loc_25A24:
    MOV R4, R0
    MOVS R1, #0x14
    MOVS R0, #1
    LDR R5, [R6]
    BL sub_193B8
    MOVS R2, #1
    STR R5, [R0]
    STR R4, [R0,#4]
    STR R4, [R0,#8]
    STR R4, [R0,#0xC]
    STRB R2, [R0,#0x10]
    POP.W {R3-R11,PC}
loc_25A40:
    LDR R3, [R6]
    CMP R1, #0
    BEQ loc_25B32
loc_25A46:
    LDR R2, [R3,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R6]
    LDR R2, [R3,#0x10]
    MOV R1, R0
    MOV R5, R0
    BL sub_1EAC0
    MOV R4, R0
    MOV R0, R5
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R4
    LDR R2, [R3,#0x10]
    LDR R0, [R3,#0x14]
    BL sub_1EAC0
    MOV R8, R0
    MOV R0, R4
    BL sub_1E6B0
loc_25A76:
    LDR R3, [R6]
    LDR R1, [R6,#4]
    LDR R2, [R3,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    MOVS R1, #1
    LDR R4, [R6]
    MOV R9, R0
    BL sub_1F9F8
    MOV R1, R9
    MOV R10, R0
    BL sub_1FC80
    MOV R5, R0
    MOV R0, R10
    BL sub_1E6B0
    B loc_25AB4
loc_25A9E:
    LDR R1, [R4,#0x10]
    MOV R0, R5
    BL sub_1FD18
    MOV R3, R0
    CMP R0, #0
    BEQ loc_25B3C
loc_25AAC:
    MOV R0, R5
    MOV R5, R3
    BL sub_1E6B0
loc_25AB4:
    LDR R1, [R4,#0x10]
    MOV R0, R5
    BL sub_1F358
    CMP R0, #0
    BGE loc_25A9E
loc_25AC0:
    MOV R0, R9
    BL sub_1E6B0
    LDR R4, [R6]
    MOV R0, R5
    LDR R1, [R4,#0x10]
    BL sub_200D4
    LDR R1, [R4,#0x10]
    MOV R11, R0
    MOV R0, R8
    BL sub_200D4
    MOV R1, R0
    MOV R10, R0
    MOV R0, R11
    BL sub_1FC80
    MOV R9, R0
    MOV R0, R11
    BL sub_1E6B0
    MOV R0, R10
    BL sub_1E6B0
    LDR R1, [R4,#0x10]
    MOV R0, R9
    BL sub_200D4
    MOV R4, R0
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R5
    BL sub_1E6B0
    B loc_258DA
loc_25B0A:
    MOV R7, R5
    B loc_2580E
loc_25B0E:
    MOV R4, R9
    B loc_25A00
loc_25B12:
    MOV R5, R8
    B loc_2591C
loc_25B16:
    LDR R0, [R6,#8]
    BL sub_1E688
    MOV R5, R0
    B loc_259D2
loc_25B20:
    MOV R3, #0x56178
    LDR R0, [R3]
    BL sub_1E688
    MOV R5, R0
    B loc_25830
loc_25B32:
    LDR R0, [R3,#0x14]
    BL sub_1E688
    MOV R8, R0
    B loc_25A76
loc_25B3C:
    MOVW R1, #0xFCBC
    MOVW R0, #0xE85C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aEcfTreble
    MOV.W R2, #0x1E0
    BLX __assert_fail
loc_25B56:
    BL sub_115EC
```
Output:
    BEQ.W loc_25B3C
loc_25916:
    MOV R0, R8
    MOV R8, R5
    BL sub_1E6B0
loc_25926:
    LDR R1, [R5,#0x10]
    MOV R0, R8
    BL sub_1F358
    CMP R0, #0
    BGE loc_25906
loc_25932:
    MOV R0, R9
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R7
    MOV R0, R7
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOVS R1, #1
    LDR R5, [R6]
    MOV R9, R0
    MOV R0, R7
    BL sub_1F9F8
    LDR R1, [R5,#0x10]
    MOV R8, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_25B12
loc_25956:
    LDR R1, [R5,#0x10]
    MOV R0, R8
    BL sub_1FD18
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_25B3C
loc_25966:
    MOV R0, R8
    MOV R8, R5
    BL sub_1E6B0
loc_25976:
    LDR R1, [R5,#0x10]
    MOV R0, R8
    BL sub_1F358
    CMP R0, #0
    BGE loc_25956
loc_25982:
    MOV R0, R9
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R7
    MOV R0, R7
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOVS R1, #1
    LDR R5, [R6]
    MOV R9, R0
    MOV R0, R7
    BL sub_1F9F8
    LDR R1, [R5,#0x10]
    MOV R8, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_25B12
loc_259A6:
    LDR R1, [R5,#0x10]
    MOV R0, R8
    BL sub_1FD18
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_25B3C
loc_259B6:
    MOV R0, R8
    MOV R8, R5
    BL sub_1E6B0
loc_259C6:
    LDR R1, [R5,#0x10]
    MOV R0, R8
    BL sub_1F358
    CMP R0, #0
    BGE loc_259A6
loc_259D2:
    MOV R0, R9
    BL sub_1E6B0
    LDR R3, [R6]
    MOV R1, R7
    MOV R0, R7
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOVS R1, #1
    LDR R5, [R6]
    MOV R9, R0
    MOV R0, R7
    BL sub_1F9F8
    LDR R1, [R5,#0x10]
    MOV R8, R0
    BL sub_1F358
    CMP R0, #0
    BLT.W loc_25B12
loc_259F6:
    LDR R1, [R5,#0x10]
    MOV R0, R8
    BL sub_1FD18
    MOV R5, R0
    CMP R0, #0
    BEQ.W loc_25B3C
loc_2
############
```assembly
loc_112A8:
    ADR R12, 0x112B0
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(perror_ptr - 0x552B0)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (perror_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x112B0",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:perror_ptr",
  "inferred-algorithm:error-or-alternative-path"
]
```<|im_end|>
############
```assembly
loc_113E4:
    ADR R12, 0x113EC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(strchr_ptr - 0x553EC)]!
```
Output:```json
[
  "return-type:pointer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:string",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strchr)",
  "address-or-offset-constant:0x113EC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:strchr_ptr",
  "inferred-algorithm:string-search-or-matching"
]
```<|im_end|>
############
```assembly
loc_2A158:
    PUSH {R4-R6,LR}
    MOV R5, #0x1FFFF
    MOV R4, R0
    MOV R6, R1
loc_2A166:
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R4]
    BL sub_2D1F4
    ORR.W R0, R0, #0x100
    STR R0, [R6]
    LDR R3, [R4]
    MUL.W R3, R3, R0
    CMP R3, R5
    BLS loc_2A166
loc_2A184:
    POP {R4-R6,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2D1F4)",
  "integer-size-hint:32-bit",
  "bitwise-operation:OR",
  "bitwise-mask-value:0x100",
  "memory-write-to-pointer",
  "memory-read-from-pointer",
  "inferred-algorithm:loop-based-processing",
  "inferred-algorithm:data-scaling-or-multiplication",
  "inferred-algorithm:conditional-loop-exit"
]
```<|im_end|>
############
```assembly
loc_187A4:
    PUSH.W {R4-R8,LR}
    MOV R6, #0x56190
    SUB SP, SP, #0xD0
    MOV R5, R0
    MOVS R0, #0x10
    LDR R3, [R6]
    MOV R8, R1
    MOV R7, R2
    STR R3, [SP,#0xE8+var_1C]
    BLX malloc
    MOV R4, R0
    CBZ R0, loc_1880E
loc_187C6:
    LDR R1, [R5,#0x14]
    MOVS R3, #0
    STR.W R8, [R4]
    ADDS R1, #1
    STR R7, [R4,#4]
    CMP.W R1, #0x20000000
    STR R1, [R5,#0x14]
    STR R3, [R4,#8]
    STR R3, [R4,#0xC]
    LDR R0, [R5,#0x18]
    BCS loc_1883A
loc_187E0:
    LSLS R1, R1, #2
    CBZ R0, loc_18806
loc_187E4:
    BLX realloc
loc_187E8:
    CBZ R0, loc_1883A
loc_187EA:
    LDR R3, [R5,#0x14]
    LDR R2, [SP,#0xE8+var_1C]
    ADD.W R3, R3, #0x40000000
    STR R0, [R5,#0x18]
    SUBS R3, #1
    STR.W R4, [R0,R3,LSL#2]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_18862
loc_18800:
    ADD SP, SP, #0xD0
    POP.W {R4-R8,PC}
loc_18806:
    MOV R0, R1
    BLX malloc
    B loc_187E8
loc_1880E:
    MOV R3, #0x3AE48
    ADD.W LR, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM.W LR!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [LR],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB.W R3, [LR]
    BL sub_12E78
loc_18838:
    B loc_187C6
loc_1883A:
    MOV R3, #0x3AE48
    ADD R7, SP, #0xE8+var_E4
    LDM R3, {R0-R3}
    STM R7!, {R0-R2}
    ADD R1, SP, #0xE8+var_E4
    STRH.W R3, [R7],#2
    MOVW R0, #0x54E4
    LSRS R3, R3, #0x10
    MOVT.W R0, #4
    STRB R3, [R7]
    BL sub_12E78
loc_1885E:
    MOVS R0, #0
    B loc_187EA
loc_18862:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:unknown",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:unknown",
  "arg2-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xD0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-memory-allocation-failure",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (malloc)",
  "external-call-type:data-processing-helper (realloc)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-comparison:0x56190",
  "fixed-value-comparison:0x20000000",
  "fixed-value-comparison:0x3AE48",
  "fixed-value-assignment:0x10",
  "fixed-value-assignment:0x40000000",
  "address-or-offset-constant:unk_56190",
  "address-or-offset-constant:sub_12E78",
  "inferred-algorithm:dynamically-sized-buffer-management",
  "inferred-algorithm:memory-allocation-and-reallocation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:stack-protection-check"
]
```<|im_end|>
############
```assembly
loc_56958:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_22B60:
    PUSH {R4-R7,LR}
    MOV R4, R0
    LDRB R6, [R0,#5]
    MOVW R7, #0x6190
    LDRB.W LR, [R0,#4]
    MOVT.W R7, #5
    LDRB R3, [R0,#1]
    MOV R5, R1
    LDRB R0, [R0]
    LSLS R6, R6, #0x10
    ORR.W R6, R6, LR,LSL#24
    LDRB.W LR, [R4,#3]
    LSLS R3, R3, #0x10
    LDRB.W R12, [R4,#6]
    LDRB R1, [R4,#7]
    ORR.W R3, R3, R0,LSL#24
    LDRB R0, [R4,#2]
    ORR.W R3, R3, LR
    LDR.W LR, [R7]
    SUB SP, SP, #0x1A4
    ORRS R1, R6
    MOV R6, R2
    ORR.W R1, R1, R12,LSL#8
    ORR.W R0, R3, R0,LSL#8
    ADD R2, SP, #0x1B8+var_1B4
    STR.W LR, [SP,#0x1B8+var_1C]
    BL sub_20D9C
    LDRB R2, [R4,#0xD]
    LDRB R1, [R4,#0xC]
    LDRB R3, [R4,#9]
    LDRB R0, [R4,#8]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#0xF]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#0xE]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#0xB]
    LDRB R0, [R4,#0xA]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_12C
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    LDRB R2, [R4,#5]
    LDRB R1, [R4,#4]
    LDRB R3, [R4,#1]
    LDRB R0, [R4]
    LSLS R2, R2, #0x10
    LDRB.W LR, [R4,#7]
    ORR.W R2, R2, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#6]
    ORR.W R2, R2, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#3]
    LDRB R0, [R4,#2]
    ORR.W R1, R2, R1,LSL#8
    ORR.W R3, R3, LR
    ADD R2, SP, #0x1B8+var_A4
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    ADD R2, SP, #0x1B8+var_1B4
    MOV R1, R6
    MOV R0, R5
    BL sub_22278
    ADD R2, SP, #0x1B8+var_12C
    MOV R1, R6
    MOV R0, R5
    BL sub_22384
    ADD R2, SP, #0x1B8+var_A4
    MOV R1, R6
    MOV R0, R5
    BL sub_22278
    ADD R0, SP, #0x1B8+var_1B4
    MOV.W R1, #0x198
    BL sub_194E4
    LDR R2, [SP,#0x1B8+var_1C]
    LDR R3, [R7]
    CMP R2, R3
    BNE loc_22C50
loc_22C4C:
    ADD SP, SP, #0x1A4
    POP {R4-R7,PC}
loc_22C50:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1A4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_20D9C)",
  "external-call-type:unspecified-helper (sub_22278)",
  "external-call-type:unspecified-helper (sub_22384)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:stack-protection-failure (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations:bitwise-or",
  "byte-level-operations:left-shift",
  "byte-level-operations:right-shift",
  "memory-access-patterns:data-packing",
  "memory-access-patterns:data-unpacking",
  "address-or-offset-constant:sub_20D9C",
  "address-or-offset-constant:sub_22278",
  "address-or-offset-constant:sub_22384",
  "address-or-offset-constant:sub_194E4",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:data-deserialization",
  "inferred-algorithm:control-flow-analysis",
  "inferred-algorithm:conditional-execution"
]
```<|im_end|>
############
```assembly
loc_3874E:
    EOR.W R12, R0, R1
    IT 
    NEGMI R1, R1
    SUBS R2, R1, #1
    BEQ.W loc_3899A
loc_3875C:
    MOVS R3, R0
    IT 
    NEGMI R3, R0
    CMP R3, R1
    BLS.W loc_389A4
loc_38768:
    TST R1, R2
    BEQ.W loc_389B4
loc_3876E:
    CLZ.W R2, R3
    CLZ.W R0, R1
    SUB.W R2, R0, R2
    RSB.W R2, R2, #0x1F
    ADR R0, loc_38790
    ADD.W R2, R0, R2,LSL#4
    MOV.W R0, #0
    MOV PC, R2
loc_3878C:
    NOP.W 
loc_38790:
    CMP.W R3, R1,LSL#31
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#31
    CMP.W R3, R1,LSL#30
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#30
    CMP.W R3, R1,LSL#29
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#29
    CMP.W R3, R1,LSL#28
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#28
    CMP.W R3, R1,LSL#27
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#27
    CMP.W R3, R1,LSL#26
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#26
    CMP.W R3, R1,LSL#25
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#25
    CMP.W R3, R1,LSL#24
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#24
    CMP.W R3, R1,LSL#23
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#23
    CMP.W R3, R1,LSL#22
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#22
    CMP.W R3, R1,LSL#21
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#21
    CMP.W R3, R1,LSL#20
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#20
    CMP.W R3, R1,LSL#19
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#19
    CMP.W R3, R1,LSL#18
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#18
    CMP.W R3, R1,LSL#17
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#17
    CMP.W R3, R1,LSL#16
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#16
    CMP.W R3, R1,LSL#15
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#15
    CMP.W R3, R1,LSL#14
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#14
    CMP.W R3, R1,LSL#13
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#13
    CMP.W R3, R1,LSL#12
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#12
    CMP.W R3, R1,LSL#11
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#11
    CMP.W R3, R1,LSL#10
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#10
    CMP.W R3, R1,LSL#9
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#9
    CMP.W R3, R1,LSL#8
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#8
    CMP.W R3, R1,LSL#7
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#7
    CMP.W R3, R1,LSL#6
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#6
    CMP.W R3, R1,LSL#5
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#5
    CMP.W R3, R1,LSL#4
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#4
    CMP.W R3, R1,LSL#3
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#3
    CMP.W R3, R1,LSL#2
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#2
    CMP.W R3, R1,LSL#1
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#1
    CMP.W R3, R1
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1
    CMP.W R12, #0
    IT 
    NEGMI R0, R0
    BX LR
loc_3899A:
    TEQ.W R12, R0
    IT 
    NEGMI R0, R0
    BX LR
loc_389A4:
    IT 
    MOVCC R0, #0
    ITT 
    MOVEQ.W R0, R12,ASR#31
    ORREQ.W R0, R0, #1
    BX LR
loc_389B4:
    CLZ.W R2, R1
    RSB.W R2, R2, #0x1F
    CMP.W R12, #0
    LSR.W R0, R3, R2
    IT 
    NEGMI R0, R0
    BX LR
```
Output: 
    SUBCS.W R3, R3, R1,LSL#6
    CMP.W R3, R1,LSL#5
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#5
    CMP.W R3, R1,LSL#4
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#4
    CMP.W R3, R1,LSL#3
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#3
    CMP.W R3, R1,LSL#2
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#2
    CMP.W R3, R1,LSL#1
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1,LSL#1
    CMP.W R3, R1
    NOP 
    ADC.W R0, R0, R0
    IT 
    SUBCS.W R3, R3, R1
    ADD.W R0, R0, R3
    IT 
    SUBCS.W R0, R0, R1
    CMP.W R0, R1
    BHI.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BHS.W loc_3878C
    CMP.W R0, R1
    BLO.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLO.W loc_3878C
    CMP.W R0, R1
    BLS.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLS.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BHS.W loc_3878C
    CMP.W R0, R1
    BHI.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BHI.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLO.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLO.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLS.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLS.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BHS.W loc_3878C
    CMP.W R0, R1
    BHI.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BHI.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLO.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLO.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLS.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BLS.W loc_3878C
    ADD.W R0, R0, R1
    ADD.W R0, R0, R3
    BHS.W loc_3878C
    CMP.W R0,
############
```assembly
loc_11344:
    ADR R12, 0x1134C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__libc_start_main_ptr - 0x5534C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__libc_start_main_ptr)",
  "address-or-offset-constant:0x1134C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__libc_start_main_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:program-entry-point"
]
```<|im_end|>
############
```assembly
loc_56990:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1B994:
    LDRB R6, [R1,#1]
    ADDS R2, #1
    LDRB.W R8, [R1]
    CMP R2, #0x3C
    LDRB R3, [R1,#3]
    ADD.W R5, R5, #4
    LDRB.W R12, [R1,#2]
    MOV.W R6, R6,LSL#16
    ORR.W R6, R6, R8,LSL#24
    ADD.W R1, R1, #4
    ORR.W R3, R3, R6
    ORR.W R3, R3, R12,LSL#8
    STR.W R3, [R5,#-4]
    BEQ loc_1BA34
loc_1B9C2:
    CMP R2, #7
    BLE loc_1B994
loc_1B9C6:
    LDR.W R3, [R5,#-4]
    MOV.W R6, LR,LSL#1
    ANDS.W R9, R2, #7
    UBFX.W R8, R3, #0x10, #8
    UBFX.W R12, R3, #8, #8
    ADD R8, R7
    ADD R12, R7
    UXTAB.W R11, R7, R3
    ADD.W R10, R7, R3,LSR#24
    UXTB R6, R6
    BNE.W loc_1BBCA
loc_1B9EC:
    LDRB.W R3, [R8,#-0xF8]
    ANDS.W R8, LR, #0x80
    LDRB.W R12, [R12,#-0xF8]
    EOR.W LR, R3, LR
    LDRB.W R3, [R11,#-0xF8]
    LDRB.W R9, [R10,#-0xF8]
    IT 
    MOVNE.W R8, #0x1B
    ORR.W R12, R12, LR,LSL#8
    EOR.W LR, R6, R8
    ORR.W R3, R3, R12,LSL#8
    ORR.W R3, R9, R3,LSL#8
loc_1BA1A:
    ADDS R2, #1
    LDR.W R6, [R5,#-0x20]
    CMP R2, #0x3C
    ADD.W R1, R1, #4
    EOR.W R3, R3, R6
    ADD.W R5, R5, #4
    STR.W R3, [R5,#-4]
    BNE loc_1B9C2
loc_1BA34:
    MOVS R6, #0
    MOVW R3, #0xC078
    MOV R5, R6
    MOVT.W R3, #3
    MOV R1, R0
    MOVS R7, #1
    B loc_1BA50
loc_1BA46:
    ADDS R5, #1
    SUBS R1, #0x10
    ADDS R7, #1
    ADDS R6, #4
    ADDS R4, #0x10
loc_1BA50:
    RSB.W LR, R6, #0x38
    LDR.W R2, [R1,#0xE0]
    CMP R5, #0
    BEQ.W loc_1BC2C
loc_1BA5E:
    CMP R5, #0xE
    BEQ.W loc_1BC04
loc_1BA64:
    ADD.W R8, R3, R2,LSR#24
    UXTAB.W R12, R3, R2
    UBFX.W LR, R2, #0x10, #8
    UBFX.W R2, R2, #8, #8
    ADD LR, R3
    LDRB.W R9, [R8,#-0xF8]
    ADD R2, R3
    LDRB.W R8, [R12,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    CMP R7, #0xF
    LDRB.W R12, [R2,#-0xF8]
    ADD.W R9, R3, R9,LSL#2
    ADD.W R8, R3, R8,LSL#2
    ADD.W R2, R3, LR,LSL#2
    LDR.W LR, [R9,#8]
    LDR.W R8, [R8,#0x408]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E0]
    LDR.W R2, [R1,#0xE4]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E4]
    LDR.W R2, [R1,#0xE8]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E8]
    LDR.W R2, [R1,#0xEC]
    UBFX.W LR, R2, #8, #8
    UBFX.W R9, R2, #0x10, #8
    ADD LR, R3
    ADD.W R12, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W LR, R3, LR,LSL#2
    ADD.W R12, R3, R12,LSL#2
    LDR.W LR, [LR,#0xC08]
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDR.W R12, [R12,#8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W R2, [R2,#0x808]
    EOR.W R12, R8, R12
    EOR.W R2, R12, R2
    EOR.W R2, R2, LR
    STR.W R2, [R4,#0x1EC]
    BNE.W loc_1BA46
loc_1BBC6:
    POP.W {R4-R11,PC}
loc_1BBCA:
    CMP.W R9, #4
    BNE.W loc_1BA1A
loc_1BBD2:
    UBFX.W R6, R3, #0x10, #8
    ADD.W R8, R7, R3,LSR#24
    ADD R6, R7
    UBFX.W R12, R3, #8, #8
    LDRB.W R8, [R8,#-0xF8]
    ADD R12, R7
    LDRB.W R6, [R6,#-0xF8]
    UXTAB.W R9, R7, R3
    LDRB.W R3, [R12,#-0xF8]
    ORR.W R6, R6, R8,LSL#8
    LDRB.W R12, [R9,#-0xF8]
    ORR.W R3, R3, R6,LSL#8
    ORR.W R3, R12, R3,LSL#8
    B loc_1BA1A
loc_1BC04:
    STR.W R2, [R4,#0x1E0]
    ADD.W R6, R0, R6,LSL#2
    LDR.W R3, [R1,#0xE4]
    ADD.W LR, LR, #3
    STR.W R3, [R4,#0x1E4]
    LDR.W R3, [R1,#0xE8]
    STR.W R3, [R6,#0x1E8]
    LDR.W R3, [R0,LR,LSL#2]
    STR.W R3, [R6,#0x1EC]
    POP.W {R4-R11,PC}
loc_1BC2C:
    STR.W R2, [R0,#0x1E0]
    LDR.W R2, [R1,#0xE4]
    STR.W R2, [R0,#0x1E4]
    LDR.W R2, [R1,#0xE8]
    STR.W R2, [R0,#0x1E8]
    LDR.W R2, [R1,#0xEC]
    STR.W R2, [R0,#0x1EC]
    B loc_1BA46
```
Output:4]
    LDR.W R2, [R1,#0xE8]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1E8]
    LDR.W R2, [R1,#0xEC]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
    EOR.W R2, R12, R2
    STR.W R2, [R4,#0x1EC]
    LDR.W R2, [R1,#0xF0]
    UBFX.W R9, R2, #0x10, #8
    UBFX.W R12, R2, #8, #8
    ADD.W LR, R3, R2,LSR#24
    UXTAB.W R2, R3, R2
    ADD R9, R3
    ADD R12, R3
    LDRB.W R8, [R2,#-0xF8]
    LDRB.W LR, [LR,#-0xF8]
    LDRB.W R2, [R9,#-0xF8]
    LDRB.W R12, [R12,#-0xF8]
    ADD.W R8, R3, R8,LSL#2
    ADD.W LR, R3, LR,LSL#2
    ADD.W R2, R3, R2,LSL#2
    LDR.W R8, [R8,#0x408]
    LDR.W LR, [LR,#8]
    ADD.W R12, R3, R12,LSL#2
    LDR.W R2, [R2,#0x808]
    EOR.W LR, R8, LR
    LDR.W R12, [R12,#0xC08]
    EOR.W R2, LR, R2
   
############
```assembly
loc_56994:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_2FA48:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    LDR R4, [R0,#0x68]
    LDR R3, [R0,#0x64]
    MOV R10, R0
    LDR.W R7, [R9]
    SUB SP, SP, #0x4C
    LDR R0, [R0,#0x60]
    ADD R4, R2
    CMP R2, R4
    IT 
    ADDHI R3, #1
    MOV R5, R2
    MOV R6, R1
    STR.W R4, [R10,#0x68]
    STR.W R3, [R10,#0x64]
    STR R7, [SP,#0x70+n]
    CMP R0, #0
    BNE loc_2FB6E
loc_2FA7C:
    CMP R2, #0x3F
    IT 
    ADDLE.W R11, R10, #0x20
    BLE loc_2FB50
loc_2FA86:
    ADD.W R11, R10, #0x20
    MOV.W R8, #0
loc_2FA8E:
    RSB.W R2, R0, #0x40
    MOV R1, R6
    ADD R0, R11
    BLX memcpy
    LDR.W R7, [R10,#0x2C]
    LDR.W R3, [R10,#0x60]
    MOV R0, R10
    REV.W R12, R7
    LDR.W R4, [R10,#0x20]
    LDR.W R7, [R10,#0x38]
    RSB.W LR, R3, #0x40
    LDR.W R2, [R10,#0x24]
    SUB.W R5, R5, LR
    LDR.W R3, [R10,#0x28]
    REV R4, R4
    REV R2, R2
    STR R4, [SP,#0x70+var_6C]
    STR R2, [SP,#0x70+var_68]
    ADD R6, LR
    LDR.W R4, [R10,#0x30]
    REV.W LR, R7
    LDR.W R2, [R10,#0x34]
    REV R3, R3
    LDR.W R7, [R10,#0x40]
    REV R4, R4
    STR R3, [SP,#0x70+var_64]
    REV R2, R2
    LDR.W R3, [R10,#0x3C]
    ADD R1, SP, #0x70+var_6C
    STR.W R12, [SP,#0x70+var_60]
    REV.W R12, R7
    STR R4, [SP,#0x70+var_5C]
    REV R3, R3
    LDR.W R7, [R10,#0x4C]
    LDR.W R4, [R10,#0x44]
    STR R2, [SP,#0x70+var_58]
    LDR.W R2, [R10,#0x48]
    REV R4, R4
    STR.W LR, [SP,#0x70+var_54]
    REV.W LR, R7
    REV R2, R2
    STR R3, [SP,#0x70+var_50]
    STR R4, [SP,#0x70+var_48]
    LDR.W R3, [R10,#0x50]
    LDR.W R4, [R10,#0x58]
    LDR.W R7, [R10,#0x54]
    REV R3, R3
    STR R2, [SP,#0x70+var_44]
    REV R4, R4
    LDR.W R2, [R10,#0x5C]
    STR.W R12, [SP,#0x70+var_4C]
    REV.W R12, R7
    STR.W LR, [SP,#0x70+var_40]
    REV R2, R2
    STR R3, [SP,#0x70+var_3C]
    STR.W R12, [SP,#0x70+var_38]
    STR R4, [SP,#0x70+var_34]
    STR R2, [SP,#0x70+var_30]
    BL sub_2F354
    CMP R5, #0x3F
    STR.W R8, [R10,#0x60]
    MOV.W R0, #0
    BGT loc_2FA8E
loc_2FB50:
    MOV R1, R6
    MOV R0, R11
    MOV R2, R5
    BLX memcpy
    STR.W R5, [R10,#0x60]
loc_2FB5E:
    LDR R2, [SP,#0x70+n]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_2FB8A
loc_2FB68:
    ADD SP, SP, #0x4C
    POP.W {R4-R11,PC}
loc_2FB6E:
    ADDS R3, R2, R0
    CMP R3, #0x3F
    BGT loc_2FA86
loc_2FB74:
    ADD.W R3, R10, #0x20
    ADD R0, R3
    BLX memcpy
    LDR.W R3, [R10,#0x60]
    ADD R3, R5
    STR.W R3, [R10,#0x60]
    B loc_2FB5E
loc_2FB8A:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4C",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0x3F",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:0x20",
  "inferred-algorithm:byte-level-operations",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:loop-with-counter-pattern",
  "inferred-algorithm:memory-mapping-or-addressing",
  "inferred-algorithm:resource-management",
  "inferred-algorithm:security-check-or-integrity-validation"
]
```<|im_end|>
############
```assembly
loc_28EBC:
    PUSH {R4,LR}
    MOV.W R1, #0x114
    MOV R4, R0
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:pointer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_194E4)",
  "integer-size-hint:16-bit",
  "fixed-value-assignment:0x114",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:conditional-data-retrieval-or-processing"
]
```<|im_end|>
############
```assembly
loc_247EC:
    PUSH.W {R4-R10,LR}
    SUB SP, SP, #8
    LDR R6, [R0,#8]
    CMP R6, #0
    BEQ.W loc_24956
loc_247FA:
    LDR R3, [R0,#0xC]
    CMP R3, #0
    BEQ.W loc_24952
loc_24802:
    LDR R3, [R0,#4]
    CMP R3, #0
    BEQ.W loc_24952
loc_2480A:
    MOV R4, R0
    LDR R0, [R3,#4]
    MOVS R5, #7
    CBZ R0, loc_24818
loc_24812:
    BLX strlen
    ADDS R5, R0, #7
loc_24818:
    MOV R0, R6
    BL sub_1F158
    ADD.W R3, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVPL R3, R0
    LDR R0, [R4,#0xC]
    ADD.W R5, R5, R3,ASR#2
    BL sub_1F158
    MOVS R1, #1
    ADD.W R3, R0, #0x12
    ADDS R0, #0xF
    IT 
    MOVMI R0, R3
    ADD.W R0, R5, R0,ASR#2
    BL sub_193B8
    LDR R3, [R4,#4]
    LDR R3, [R3,#4]
    MOV R8, R0
    CMP R3, #0
    BEQ loc_24944
loc_24850:
    STR R3, [SP,#0x28+var_28]
    MOV.W R2, #0xFFFFFFFF
    MOVW R3, #0xFCE4
    MOVS R1, #1
    MOVT.W R3, #3
    BLX __sprintf_chk
    ADDS R6, R0, #2
loc_24866:
    MOV R3, #0x3F57C
    ADD.W R2, R8, R0
    LDRH R1, [R3]
    LDRB R3, [R3,#(byte_3F57E - 0x3F57C)]
    STRH.W R1, [R8,R0]
    STRB R3, [R2,#2]
    LDR R0, [R4,#8]
    BL sub_1F158
    ADDS R7, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R7, R0
    ASRS R7, R7, #2
    CMP R7, #0
    IT 
    ADDGT.W R7, R7, #0xFFFFFFFF
    BLE loc_2494E
loc_24896:
    MOVW R5, #0xF5B0
    ADD.W R10, R8, R6
    MOVT.W R5, #3
    MOV R9, R7
loc_248A4:
    MOV.W R1, R9,ASR#1
    LDR R0, [R4,#8]
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R0, R0, #0xF
    ADD R0, R5
    LDRB.W R3, [R0,#0x28]
    STRB.W R3, [R10],#1
    BNE loc_248A4
loc_248D0:
    MOV R2, #0x3F580
    ADDS R3, R6, #1
    ADD R6, R7
    LDR R0, [R2]
    ADD R7, R3
    STR.W R0, [R8,R7]
    LDR R0, [R4,#0xC]
    BL sub_1F158
    ADDS R7, R0, #6
    ADDS R0, #3
    IT 
    MOVPL R7, R0
    ASRS R7, R7, #2
    CMP R7, #0
    IT 
    ADDGT.W R7, R7, #0xFFFFFFFF
    BLE loc_2494A
loc_248FE:
    ADD.W R10, R6, #3
    MOV R9, R7
    ADD R10, R8
loc_24906:
    MOV.W R1, R9,ASR#1
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    AND.W R3, R9, #1
    ADD.W R9, R9, #0xFFFFFFFF
    LSLS R3, R3, #2
    CMP.W R9, #0xFFFFFFFF
    ASR.W R0, R0, R3
    AND.W R3, R0, #0xF
    ADD R3, R5
    LDRB.W R3, [R3,#0x28]
    STRB.W R3, [R10,#1]!
    BNE loc_24906
loc_24932:
    ADDS R6, #5
    MOV R0, R8
    ADD R8, R6
    MOVS R3, #0
    STRB.W R3, [R8,R7]
loc_2493E:
    ADD SP, SP, #8
    POP.W {R4-R10,PC}
loc_24944:
    MOV R0, R3
    MOVS R6, #2
    B loc_24866
loc_2494A:
    MOVS R7, #0
    B loc_248FE
loc_2494E:
    MOVS R7, #0
    B loc_24896
loc_24952:
    MOV R0, R3
    B loc_2493E
loc_24956:
    MOV R0, R6
    B loc_2493E
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (__sprintf_chk)",
  "external-call-type:unspecified-helper (sub_1F158)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "external-call-type:unspecified-helper (sub_1F20C)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-read-from-input-parameter-offset:4",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:7",
  "fixed-value-assignment:0xFFFFFFFF",
  "fixed-value-assignment:0xFCE4",
  "fixed-value-assignment:1",
  "fixed-value-assignment:3",
  "fixed-value-assignment:0x3F57C",
  "fixed-value-assignment:0x3F57E",
  "fixed-value-assignment:0x3F580",
  "fixed-value-assignment:0x28",
  "fixed-value-assignment:0x12",
  "fixed-value-assignment:0xF",
  "fixed-value-assignment:0x3F57E",
  "fixed-value-assignment:0x3F57F",
  "fixed-value-assignment:0x28",
  "fixed-value-assignment:0x29",
  "fixed-value-assignment:0x2A",
  "fixed-value-assignment:0x2B",
  "fixed-value-assignment:0x2C",
  "fixed-value-assignment:0x2D",
  "fixed-value-assignment:0x2E",
  "fixed-value-assignment:0x2F",
  "fixed-value-assignment:0x30",
  "fixed-value-assignment:0x31",
  "fixed-value-assignment:0x32",
  "fixed-value-assignment:0x33",
  "fixed-value-assignment:0x34",
  "fixed-value-assignment:0x35",
  "fixed-value-assignment:0x36",
  "fixed-value-assignment:0x37",
  "fixed-value-assignment:0x38",
  "fixed-value-assignment:0x39",
  "fixed-value-assignment:0x3A",
  "fixed-value-assignment:0x3B",
  "fixed-value-assignment:0x3C",
  "fixed-value-assignment:0x3D",
  "fixed-value-assignment:0x3E",
  "fixed-value-assignment:0x3F",
  "fixed-value-assignment:0x40",
  "fixed-value-assignment:0x41",
  "fixed-value-assignment:0x42",
  "fixed-value-assignment:0x43",
  "fixed-value-assignment:0x44",
  "fixed-value-assignment:0x45",
  "fixed-value-assignment:0x46",
  "fixed-value-assignment:0x47",
  "fixed-value-assignment:0x48",
  "fixed-value-assignment:0x49",
  "fixed-value-assignment:0x4A",
  "fixed-value-assignment:0x4B",
  "fixed-value-assignment:0x4C",
  "fixed-value-assignment:0x4D",
  "fixed-value-assignment:0x4E",
  "fixed-value-assignment:0x4F",
  "fixed-value-assignment:0x50",
  "fixed-value-assignment:0x51",
  "fixed-value-assignment:0x52",
  "fixed-value-assignment:0x53",
  "fixed-value-assignment:0x54",
  "fixed-value-assignment:0x55",
  "fixed-value-assignment:0x56",
  "fixed-value-assignment:0x57",
  "fixed-value
############
```assembly
loc_36518:
    PUSH.W {R4-R8,LR}
    MOV R8, R1
    SUB SP, SP, #8
    MOVS R1, #1
    MOV R5, R0
    BL sub_193B8
    MOV R3, #aDevRandom
    CMP.W R8, #0
    IT 
    MOVEQ R8, R3
    MOVS R1, #0
    MOV R6, R0
    MOV R0, R8
    BLX open
    SUBS R7, R0, #0
    BLT loc_365AE
loc_36546:
    CMP R5, #0
    IT 
    MOVGT R4, #0
    BGT loc_36554
loc_3654E:
    B loc_365A0
loc_36550:
    CMP R5, R4
    BLE loc_365A0
loc_36554:
    SUBS R2, R5, R4
    ADDS R1, R6, R4
    MOV R0, R7
    BLX read
    CMP R0, #0
    ADD R4, R0
    BGE loc_36550
loc_36564:
    MOV R0, R7
    BLX close
    MOV R0, R6
    BL sub_19494
    MOV R3, #0x56198
    LDR R4, [R3]
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R3, R8
    MOVS R1, #1
    MOV R2, #0x44FD4
    STR R0, [SP,#0x20+var_20]
    MOV R0, R4
    BLX __fprintf_chk
    MOVS R0, #0
    ADD SP, SP, #8
    POP.W {R4-R8,PC}
loc_365A0:
    MOV R0, R7
    BLX close
    MOV R0, R6
loc_365A8:
    ADD SP, SP, #8
    POP.W {R4-R8,PC}
loc_365AE:
    MOV R0, R6
    BL sub_19494
loc_365B4:

```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:file-system-operation (open)",
  "external-call-type:file-system-operation (read)",
  "external-call-type:file-system-operation (close)",
  "external-call-type:error-handling (strerror)",
  "external-call-type:error-handling (__errno_location)",
  "external-call-type:error-handling (__fprintf_chk)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-comparison:1",
  "fixed-value-comparison:0x56198",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x44FD4",
  "address-or-offset-constant:aDevRandom",
  "address-or-offset-constant:__errno_location",
  "address-or-offset-constant:strerror",
  "address-or-offset-constant:__fprintf_chk",
  "inferred-algorithm:random-number-generation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:file-access",
  "inferred-algorithm:logging-or-debugging"
]
```<|im_end|>
############
```assembly
loc_2C994:
    PUSH.W {R4-R11,LR}
    MOV R10, #0x56190
    SUB SP, SP, #0x54
    ADD R2, SP, #0x78+var_6C
    MOV R9, R0
    LDR.W R3, [R10]
    MOV R11, R1
    MOVW R7, #0x3854
    MOVW R6, #0x384C
    MOVT.W R7, #4
    ADD.W R8, SP, #0x78+var_2F
    STR R3, [SP,#0x78+var_2C]
    BL sub_297EC
    LDRB.W R2, [SP,#0x78+var_6C]
    MOVT.W R6, #4
    ADD R5, SP, #0x78+var_6C
    ADD R4, SP, #0x78+var_5C
loc_2C9CE:
    STR R2, [SP,#0x78+var_78]
    MOV R0, R4
    MOV.W R2, #0xFFFFFFFF
    STR R7, [SP,#0x78+var_74]
    MOV R3, R6
    MOVS R1, #1
    ADDS R4, #3
    BLX __sprintf_chk
    CMP R4, R8
    LDRB.W R2, [R5,#1]!
    BNE loc_2C9CE
loc_2C9EA:
    STR R2, [SP,#0x78+var_78]
    MOV R0, R4
    MOVS R1, #1
    MOVW R2, #0x555C
    MOVW R3, #0x384C
    MOVT.W R2, #4
    MOVT.W R3, #4
    STR R2, [SP,#0x78+var_74]
    MOV.W R2, #0xFFFFFFFF
    BLX __sprintf_chk
    LDRB.W R3, [R9,#1]
    LDRB.W R1, [R9]
    LDRB.W R2, [R9,#3]
    LDRB.W R0, [R9,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R4, R0, #0
    BLE loc_2CA36
loc_2CA2E:
    SUB.W R3, R11, #4
    CMP R4, R3
    BLT loc_2CA4C
loc_2CA36:
    ADD R0, SP, #0x78+var_5C
    BL sub_18A88
loc_2CA3C:
    LDR R2, [SP,#0x78+var_2C]
    LDR.W R3, [R10]
    CMP R2, R3
    BNE loc_2CB28
loc_2CA46:
    ADD SP, SP, #0x54
    POP.W {R4-R11,PC}
loc_2CA4C:
    ADD.W R5, R9, #4
    MOV R2, #0x3A724
    MOV R1, R5
    BL sub_19870
    CBZ R0, loc_2CA88
loc_2CA60:
    MOV R0, #0x43AC8
loc_2CA68:
    MOV R2, R11
    MOV R1, R9
    LDR R3, [R0,#0x24]
    BLX R3
    ADD R3, SP, #0x78+var_5C
    MOV R2, R5
    STR R3, [SP,#0x78+var_78]
    MOV R1, R4
    MOV R3, R0
    MOV R0, #0x43858
    BL sub_18C24
    B loc_2CA3C
loc_2CA88:
    MOVW R2, #0xA710
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CAA4
loc_2CA9A:
    MOV R0, #0x3F520
    B loc_2CA68
loc_2CAA4:
    MOVW R2, #0xFE3C
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CAC0
loc_2CAB6:
    MOV R0, #0x3FB34
    B loc_2CA68
loc_2CAC0:
    MOVW R2, #0xFE28
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CADC
loc_2CAD2:
    MOV R0, #0x3FB70
    B loc_2CA68
loc_2CADC:
    MOVW R2, #0xFE14
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CAF8
loc_2CAEE:
    MOV R0, #0x3FBAC
    B loc_2CA68
loc_2CAF8:
    MOVW R2, #0xFE50
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2CB14
loc_2CB0A:
    MOV R0, #0x3FBE8
    B loc_2CA68
loc_2CB14:
    ADD R3, SP, #0x78+var_5C
    MOV R2, R5
    MOV R1, R4
    MOV R0, #0x43864
    BL sub_18C24
    B loc_2CA3C
loc_2CB28:
    BLX __stack_chk_fail
```
Output:_chk_fail
```
<|im_start|>```<|im_end|>
############
```assembly
loc_11328:

loc_12FD4:
    PUSH {R3,LR}
    MOVW R2, #0x56DC
    MOVW R1, #0x8BCC
    MOVT.W R2, #4
    MOVT.W R1, #3
    MOVS R0, #1
    BLX __printf_chk
    MOV R3, #0x5619C
    MOVW R0, #0x8B28
    MOVS R2, #0xA0
    MOVT.W R0, #3
    LDR R3, [R3]
    MOVS R1, #1
    BLX fwrite
    MOVW R0, #0x8C0C
    POP.W {R3,LR}
    MOVT.W R0, #3
    B.W j_puts
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__printf_chk)",
  "external-call-type:data-processing-helper (fwrite)",
  "external-call-type:data-processing-helper (puts)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0xA0",
  "address-or-offset-constant:__printf_chk",
  "address-or-offset-constant:fwrite",
  "address-or-offset-constant:j_puts",
  "address-or-offset-constant:0x56DC",
  "address-or-offset-constant:0x8BCC",
  "address-or-offset-constant:0x5619C",
  "address-or-offset-constant:0x8B28",
  "address-or-offset-constant:0x8C0C",
  "inferred-algorithm:string-output",
  "inferred-algorithm:file-io"
]
```<|im_end|>
############
```assembly
loc_14370:
    CMP R1, #0
    BEQ loc_1441E
loc_14374:
    PUSH {R3-R7,LR}
    MOV R6, R0
    MOV R7, R3
    LDRB R3, [R0]
    LDR R0, [SP,#0x18+arg_0]
    AND.W R3, R3, #0xE0
    STR R3, [R0]
    LDRB R3, [R6]
    AND.W R3, R3, #0x1F
    CMP R3, #0x1F
    ITTT 
    STRNE R3, [R2]
    ADDNE.W R1, R1, #0xFFFFFFFF
    ADDNE R4, R6, #1
    BEQ loc_143AC
loc_14398:
    CMP R1, #0
    BEQ loc_14414
loc_1439C:
    LDRB R3, [R4]
    LSLS R2, R3, #0x18
    ITT 
    ADDPL R5, R4, #1
    STRPL R3, [R7]
    BMI loc_143E4
loc_143A8:
    SUBS R0, R5, R6
    POP {R3-R7,PC}
loc_143AC:
    MOVS R0, #0
    STR R0, [R2]
    LDRSB.W R3, [R6]
    CMP R3, R0
    BGE loc_14424
loc_143B8:
    SUBS R1, #1
    ADD.W R3, R6, #1
    BNE loc_143C6
loc_143C0:
    B loc_14414
loc_143C2:
    SUBS R1, #1
    BEQ loc_14414
loc_143C6:
    MOV R4, R3
    LDRB.W R5, [R3],#1
    AND.W R5, R5, #0x7F
    ORR.W R0, R5, R0,LSL#7
    STR R0, [R2]
    LDRSB.W R5, [R4]
    CMP R5, #0
    BLT loc_143C2
loc_143DE:
    ADDS R4, #1
    SUBS R1, #1
    B loc_14398
loc_143E4:
    AND.W LR, R3, #0x7F
    ADDS R5, R4, #1
    CMP R1, LR
    BLE loc_14414
loc_143EE:
    CMP.W LR, #0
    BEQ loc_1441A
loc_143F4:
    ADD.W R1, R4, LR
    MOV R2, R4
    MOVS R0, #0
loc_143FC:
    LDRB.W R3, [R2,#1]!
    CMP R1, R2
    ORR.W R0, R3, R0,LSL#8
    BNE loc_143FC
loc_14408:
    ADD R5, LR
loc_1440A:
    BL nullsub_2
    STR R0, [R7]
    SUBS R0, R5, R6
    POP {R3-R7,PC}
loc_14414:
    MOV.W R0, #0xFFFFFFFF
    POP {R3-R7,PC}
loc_1441A:
    MOV R0, LR
    B loc_1440A
loc_1441E:
    MOV.W R0, #0xFFFFFFFF
    BX LR
loc_14424:
    MOV R4, R6
    B loc_143DE
```
Output:```json
[
  "return-type:unsigned-integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:unsigned-integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "loop-detection",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (nullsub_2)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operations:AND",
  "bitwise-operations:OR",
  "bitwise-operations:LSL",
  "bitwise-operations:BMI",
  "bitwise-operations:BLT",
  "fixed-value-comparison:0",
  "fixed-value-comparison:0x1F",
  "fixed-value-comparison:-1",
  "fixed-value-comparison:0x7F",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:1",
  "address-or-offset-constant:nullsub_2",
  "inferred-algorithm:data-packing-or-serialization",
  "inferred-algorithm:data-unpacking-or-deserialization",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:incrementing-loop-counter"
]
```<|im_end|>
############
```assembly
loc_317CC:
    PUSH {R4,LR}
    MOVS R1, #0xD4
    MOV R4, R0
    BL sub_194E4
    MOV R0, R4
    POP.W {R4,LR}
    B.W sub_19494
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_194E4)",
  "external-call-type:data-processing-helper (sub_19494)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0xD4",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:numeric-computation",
  "inferred-algorithm:external-data-processing"
]
```<|im_end|>
############
```assembly
loc_114AC:
    ADR R12, 0x114B4
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fclose_ptr - 0x554B4)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "external-function-calls-present",
  "external-call-type:file-io (fclose)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x114B4",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fclose_ptr",
  "address-or-offset-constant:0x554B4",
  "inferred-algorithm:file-closing",
  "inferred-algorithm:dynamic-function-resolution"
]
```<|im_end|>
############
```assembly
loc_568C0:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1156C:
    ADR R12, 0x11574
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(tcgetattr_ptr - 0x55574)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "direct-address-computation",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (tcgetattr_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x11574",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:tcgetattr_ptr",
  "inferred-algorithm:operating-system-interaction",
  "inferred-algorithm:file-descriptor-handling",
  "inferred-algorithm:terminal-control-getattr"
]
```<|im_end|>
############
```assembly
loc_114F4:
    ADR R12, 0x114FC
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(getrusage_ptr - 0x554FC)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "address-or-offset-constant:0x114FC",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:getrusage_ptr",
  "address-or-offset-constant:0x554FC",
  "external-function-calls-present",
  "external-call-type:operating-system-interaction (getrusage_ptr)",
  "inferred-algorithm:system-resource-query",
  "inferred-algorithm:process-status-fetching"
]
```<|im_end|>
############
```assembly
loc_1F9F8:
    PUSH.W {R4-R8,LR}
    SUBS R5, R1, #0
    BLT loc_1FAD0
loc_1FA00:
    LDR R3, [R0]
    MOV R4, R0
    LSLS R3, R3, #5
    SUBS R3, #1
    BMI loc_1FA32
loc_1FA0A:
    ASRS R2, R3, #5
    ADDS R2, #1
    LDR.W R2, [R0,R2,LSL#2]
    CMP R2, #0
    BGE loc_1FA2C
loc_1FA16:
    B loc_1FA32
loc_1FA18:
    ASRS R2, R3, #5
    AND.W R1, R3, #0x1F
    ADDS R2, #1
    LDR.W R0, [R4,R2,LSL#2]
    MOV R2, R1
    LSRS.W R2, R0, R2
    BNE loc_1FA32
loc_1FA2C:
    ADDS.W R3, R3, #0xFFFFFFFF
    BCS loc_1FA18
loc_1FA32:
    ADDS R3, #1
    MOVW R2, #0xFFFE
    ADD R3, R5
    MOVT.W R2, #0x3FF
    ADD.W R7, R3, #0x3E
    ADDS R3, #0x1F
    IT 
    MOVMI R3, R7
    ASRS R7, R3, #5
    CMP R7, R2
    BHI loc_1FACC
loc_1FA4E:
    ADD.W R8, R7, #1
    MOVS R1, #4
    MOV R0, R8
    BL sub_193B8
    MOV.W R2, R8,LSL#2
    MOVS R1, #0
    MOV R6, R0
    BLX memset
    MOV.W R12, R5,ASR#5
    ANDS.W R5, R5, #0x1F
    STR R7, [R6]
    BEQ loc_1FAB2
loc_1FA72:
    LDR R3, [R4]
    ADD.W R1, R12, #1
    ADD R3, R12
    CMP R1, R3
    BGT loc_1FAAC
loc_1FA7E:
    RSB.W R8, R5, #0x20
    ADD.W LR, R6, R12,LSL#2
    MOV R7, R4
    MOVS R3, #0
loc_1FA8A:
    LDR.W R0, [R7,#4]!
    ADDS R1, #1
    LSL.W R2, R0, R5
    ORRS R3, R2
    STR.W R3, [LR,#4]!
    LDR R2, [R4]
    LSR.W R3, R0, R8
    ADD R2, R12
    CMP R2, R1
    BGE loc_1FA8A
loc_1FAA6:
    CBZ R3, loc_1FAAC
loc_1FAA8:
    STR.W R3, [R6,R1,LSL#2]
loc_1FAAC:
    MOV R0, R6
    POP.W {R4-R8,PC}
loc_1FAB2:
    MOV R1, R4
    ADD.W R0, R12, #1
    LDR.W R2, [R1],#4
    ADD.W R0, R6, R0,LSL#2
    LSLS R2, R2, #2
    BLX memcpy
    MOV R0, R6
    POP.W {R4-R8,PC}
loc_1FACC:
    BL sub_115CC
loc_1FAD0:
    MOVW R1, #0xE76C
    MOVW R0, #0xE860
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumLshift
    MOVW R2, #0x69A
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:aBignumLshift",
  "bitwise-operation:logical-shift-left",
  "bitwise-operation:logical-shift-right",
  "bitwise-operation:bitwise-or",
  "bitwise-operation:bitwise-and",
  "bitwise-operation:bitwise-not",
  "inferred-algorithm:bitwise-manipulation",
  "inferred-algorithm:data-shifting",
  "inferred-algorithm:data-masking",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:loop-with-counter"
]
```<|im_end|>
############
```assembly
loc_328D4:
    PUSH.W {R4-R10,LR}
    MOV R8, #0x56190
    SUB SP, SP, #0x88
    MOV R5, R2
    MOV R4, R0
    LDR.W R3, [R8]
    MOV R10, R1
    ADD R0, SP, #0xA8+s
    MOVS R2, #0x40
    MOVS R1, #0x36
    STR R3, [SP,#0xA8+var_24]
    BLX memset
    CMP R5, #0
    BLE loc_32928
loc_328FC:
    ADD.W R0, R10, #0xFFFFFFFF
    ADD R1, SP, #0xA8+s
    MOVS R3, #0
loc_32904:
    ADDS R3, #1
    LDRB.W LR, [R1]
    CMP R5, R3
    LDRB.W R2, [R0,#1]!
    ITE 
    MOVGT R7, #1
    MOVLE R7, #0
    CMP R3, #0x3F
    EOR.W R2, LR, R2
    STRB.W R2, [R1],#1
    IT 
    MOVGT R7, #0
    CMP R7, #0
    BNE loc_32904
loc_32928:
    ADD.W LR, R4, #0x14
    ADD.W R9, SP, #0xA8+var_24
    ADD.W R12, SP, #0xA8+s
    MOVW R2, #0x2301
    MOVW R3, #0xAB89
    MOVT.W R2, #0x6745
    MOVT.W R3, #0xEFCD
    MOVS R1, #0x40
    STM.W R4, {R2,R3}
    MOVW R2, #0xDCFE
    MOVW R3, #0x5476
    MOVT.W R2, #0x98BA
    MOVT.W R3, #0x1032
    STR R2, [R4,#8]
    STR R3, [R4,#0xC]
    MOVW R2, #0xE1F0
    MOVS R3, #0
    MOVT.W R2, #0xC3D2
    STR R3, [R4,#0x54]
    STR R2, [R4,#0x10]
    STR R3, [R4,#0x58]
    STR R1, [R4,#0x5C]
loc_32970:
    MOV R7, R12
    ADD.W LR, LR, #0x10
    LDM R7!, {R0-R3}
    ADD.W R12, R12, #0x10
    CMP R7, R9
    STR.W R0, [LR,#-0x10]
    STR.W R1, [LR,#-0xC]
    STR.W R2, [LR,#-8]
    STR.W R3, [LR,#-4]
    BNE loc_32970
loc_32990:
    LDR R3, [R4,#0x14]
    ADD R1, SP, #0xA8+var_A4
    LDR R2, [R4,#0x1C]
    MOV R0, R4
    REV R3, R3
    STR R3, [SP,#0xA8+var_A4]
    LDR R3, [R4,#0x20]
    REV R2, R2
    LDR R6, [R4,#0x24]
    REV R3, R3
    STR R2, [SP,#0xA8+var_9C]
    STR R3, [SP,#0xA8+var_98]
    REV.W LR, R6
    LDR R2, [R4,#0x28]
    LDR R3, [R4,#0x30]
    LDR R6, [R4,#0x2C]
    REV R2, R2
    REV R3, R3
    STR R2, [SP,#0xA8+var_90]
    STR R3, [SP,#0xA8+var_88]
    REV.W R12, R6
    LDR R2, [R4,#0x34]
    LDR R3, [R4,#0x3C]
    LDR R6, [R4,#0x38]
    REV R2, R2
    REV R3, R3
    STR R2, [SP,#0xA8+var_84]
    STR R3, [SP,#0xA8+var_7C]
    LDR R2, [R4,#0x40]
    LDR R3, [R4,#0x48]
    LDR R7, [R4,#0x18]
    REV R2, R2
    STR.W R12, [SP,#0xA8+var_8C]
    REV R3, R3
    REV.W R12, R6
    STR R2, [SP,#0xA8+var_78]
    LDR R6, [R4,#0x44]
    REV R7, R7
    LDR R2, [R4,#0x4C]
    STR R3, [SP,#0xA8+var_70]
    LDR R3, [R4,#0x50]
    REV R2, R2
    STR R7, [SP,#0xA8+var_A0]
    MOVS R7, #0
    REV R3, R3
    STR.W LR, [SP,#0xA8+var_94]
    STR R3, [SP,#0xA8+var_68]
    STR.W R12, [SP,#0xA8+var_80]
    REV.W R12, R6
    STR R2, [SP,#0xA8+var_6C]
    STR.W R12, [SP,#0xA8+var_74]
    BL sub_322B0
    MOVS R1, #0x5C
    STR R7, [R4,#0x54]
    MOVS R2, #0x40
    ADD R0, SP, #0xA8+s
    BLX memset
    CMP R5, R7
    ITTT 
    ADDGT.W R6, R10, #0xFFFFFFFF
    ADDGT R1, SP, #0xA8+s
    MOVGT R3, R7
    BLE loc_32A46
loc_32A24:
    ADDS R3, #1
    LDRB R7, [R1]
    CMP R5, R3
    LDRB.W R2, [R6,#1]!
    ITE 
    MOVGT R0, #1
    MOVLE R0, #0
    CMP R3, #0x3F
    EOR.W R2, R2, R7
    STRB.W R2, [R1],#1
    IT 
    MOVGT R0, #0
    CMP R0, #0
    BNE loc_32A24
loc_32A46:
    ADD.W R0, R4, #0x60
    ADD R1, SP, #0xA8+s
    MOVW R2, #0x2301
    MOVW R3, #0xAB89
    MOVT.W R2, #0x6745
    MOVT.W R3, #0xEFCD
    STR R2, [R4,#0x60]
    MOVW R2, #0xDCFE
    STR R3, [R4,#0x64]
    MOVT.W R2, #0x98BA
    MOVW R3, #0x5476
    STR R2, [R4,#0x68]
    MOVT.W R3, #0x1032
    MOVW R2, #0xE1F0
    STR R3, [R4,#0x6C]
    MOVT.W R2, #0xC3D2
    MOVS R3, #0
    STR R2, [R4,#0x70]
    STR.W R3, [R4,#0xB4]
    MOVS R2, #0x40
    STR.W R3, [R4,#0xBC]
    STR.W R3, [R4,#0xB8]
    BL sub_3278C
    ADD R0, SP, #0xA8+s
    MOVS R1, #0x40
    BL sub_194E4
    LDR R2, [SP,#0xA8+var_24]
    LDR.W R3, [R8]
    CMP R2, R3
    BNE loc_32AAA
loc_32AA4:
    ADD SP, SP, #0x88
    POP.W {R4-R10,PC}
loc_32AAA:
    BLX __stack_chk_fail
```
Output:329F4
    ADD.W R0, R10, #0xFFFFFFFF
    ADD R1, SP, #0xA8+s
    MOV R3, R7
    B loc_32A04
loc_329F4:
    ADD.W R0, R10, #0xFFFFFFFF
    ADD R1, SP, #0xA8+s
    MOV R3, R7
    B loc_32A04
loc_32A04:
    MOV R7, R12
    ADD.W LR, LR, #0x10
    LDM R7!, {R0-R3}
    ADD.W R12, R12, #0x10
    CMP R7, R9
    STR.W R0, [LR,#-0x10]
    STR.W R1, [LR,#-0xC]
    STR.W R2, [LR,#-8]
    STR.W R3, [LR,#-4]
    BNE loc_32A04
loc_32A24:
    LDR R3, [R4,#0x5C]
    ADD R1, SP, #0xA8+var_A4
    LDR R2, [R4,#0x60]
    MOV R0, R4
    REV R3, R3
    STR R3, [SP,#0xA8+var_A4]
    LDR R3, [R4,#0x64]
    REV R2, R2
    LDR R6, [R4,#0x68]
    REV R3, R3
    STR R2, [SP,#0xA8+var_9C]
    STR R3, [SP,#0xA8+var_98]
    REV.W LR, R6
    LDR R2, [R4,#0x6C]
    LDR R3, [R4,#0x74]
    LDR R6, [R4,#0x70]
    REV R2, R2
    REV R3, R3
    STR R2, [SP,#0xA8+var_90]
    STR R3, [SP,#0xA8+var_88]
    REV.W R12, R6
    LDR R2, [R4,#0x78]
    LDR R3, [R4,#0x80]
    LDR R7, [R4,#0x7C]
    REV R2, R2
    STR.W R12, [SP,#0xA8+var_8C]
    REV R3, R3
    REV.W R12, R6
    STR R2, [SP,#0xA8+var_78]
    LDR R6, [R4,#0x84]
    REV R7, R7
    LDR R2, [R4,#0x88]
    STR R3, [SP,#0xA8+var_70]
    LDR R3, [R4,#0x8C]
    REV R2, R2
    STR R7, [SP,#0xA8+var_A0]
    MOVS R7, #0
    REV R3, R3
    STR.W LR, [SP,#0xA8+var_94]
    STR R3, [SP,#0xA8+var_68]
    STR.W R12, [SP,#0xA8+var_80]
    REV.W R12, R6
    STR R2, [SP,#0xA8+var_6C]
    STR.W R12, [SP,#0xA8+var_74]
    BL sub_322B0
    MOVS R1, #0x5C
    STR R7, [R4,#0x54]
    MOVS R2, #0x40
    ADD R0, SP, #0xA8+s
    BLX memset
    ADD.W R0, R10, #0xFFFFFFFF
    ADD R1, SP, #0xA8+s
    MOV R3, R7
    B loc_32A44
loc_32A44:
    ADD.W R0, R10, #0xFFFFFFFF
    ADD R1, SP, #0xA8+s
    MOV R3, R7
    B loc_32A54
loc_32A54:
    MOV R7, R12
    ADD.W LR, LR, #0x10

############
```assembly
loc_2D134:
    PUSH {R4,LR}
    MOV R4, #dword_562CC
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    CBZ R1, loc_2D14C
loc_2D144:
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    POP {R4,PC}
loc_2D14C:
    MOV.W R2, #0x510
    MOV R0, R4
    BLX memset
    MOV R0, #0x2CCE9
    BL sub_36BA8
    LDR.W R3, [R4,#(dword_567D8 - 0x562CC)]
    CBZ R3, loc_2D19A
loc_2D168:
    MOVW R2, #0x62CC
    MOVW R1, #0xCF8D
    MOVT.W R2, #5
    MOVT.W R1, #2
    MOV R0, #0x493E0
    BL sub_19A7C
    LDR.W R1, [R4,#(dword_567DC - 0x562CC)]
    MOV R3, #0x56840
    ADDS R1, #1
    STR.W R1, [R4,#(dword_567DC - 0x562CC)]
    STR R0, [R3]
    POP {R4,PC}
loc_2D19A:
    BL sub_2CBB0
    B loc_2D168
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-memory-content",
  "loop-with-counter-increment",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:unspecified-helper (sub_36BA8)",
  "external-call-type:unspecified-helper (sub_19A7C)",
  "external-call-type:unspecified-helper (sub_2CBB0)",
  "integer-size-hint:32-bit",
  "bitwise-operation:OR",
  "bitwise-operation:AND-clear",
  "bitwise-operation:XOR",
  "bitwise-mask-values:[0x510, 0x62CC, 0xCF8D, 0x5, 0x2, 0x493E0]",
  "address-or-offset-constant:dword_562CC",
  "address-or-offset-constant:dword_567DC",
  "address-or-offset-constant:dword_567D8",
  "address-or-offset-constant:0x56840",
  "inferred-algorithm:counter-based-loop",
  "inferred-algorithm:memory-update-or-initialization",
  "inferred-algorithm:control-flow-with-loop"
]
```<|im_end|>
############
```assembly
loc_2A8BC:
    PUSH.W {R4-R11,LR}
    SUB.W SP, SP, #0x4000
    SUB SP, SP, #0x7C
    MOV R4, #0x43300
    MOV R10, R1
    STR R0, [SP,#0x40A0+var_409C]
    MOV R7, R2
    LDM R4!, {R0-R3}
    ADD R5, SP, #0x40A0+var_402C
    MOV R6, #0x56190
    MOV LR, R5
    CMP R7, #0
    LDR.W R12, [R6]
    STM.W LR!, {R0-R3}
    IT 
    MOVNE.W R9, #3
    LDM R4!, {R0-R3}
    IT 
    MOVEQ.W R9, #0
    LDR R4, [R4]
    STM.W LR!, {R0-R3}
    ADD.W R2, SP, #0x40A0+var_A0
    ADDS R2, #0x74
    STRB.W R4, [LR]
    MOVS R3, #0
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x22]
    ADD.W R4, SP, #0x40A0+var_4002
    STRB.W R3, [R5,#0x23]
    STRB.W R3, [R5,#0x24]
    STRB.W R3, [R5,#0x25]
    STRB.W R9, [R5,#0x21]
    STR.W R12, [R2]
    BL sub_1F158
    ASRS R3, R0, #0x18
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x26]
    BL sub_1F158
    ASRS R3, R0, #0x10
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x27]
    BL sub_1F158
    ASRS R3, R0, #8
    LDR.W R0, [R10,#8]
    STRB.W R3, [R5,#0x28]
    BL sub_1F158
    LDR.W R1, [R10,#8]
    STRB.W R0, [R5,#0x29]
    MOV R0, R4
    BL sub_1F294
    LDR.W R1, [R10,#0xC]
    ADD.W R8, R4, R0
    MOV R0, R8
    BL sub_1F294
    LDR.W R4, [R10,#0x20]
    ADD.W R11, R8, R0
    CMP R4, #0
    BEQ.W loc_2AAC4
loc_2A984:
    STR R0, [SP,#0x40A0+var_40A0]
    MOV R0, R4
    BLX strlen
    LDR R2, [SP,#0x40A0+var_40A0]
    ADD.W R9, R11, #4
    LSRS R0, R0, #0x18
    STRB.W R0, [R8,R2]
    MOV R0, R4
    BLX strlen
    LSRS R3, R0, #0x10
    MOV R0, R4
    STRB.W R3, [R11,#1]
    BLX strlen
    LSRS R3, R0, #8
    MOV R0, R4
    STRB.W R3, [R11,#2]
    BLX strlen
    STRB.W R0, [R11,#3]
    MOV R0, R4
    BLX strlen
    MOV R1, R4
    MOV R2, R0
    MOV R0, R9
    BLX memcpy
    MOV R0, R4
    BLX strlen
    ADD R9, R0
loc_2A9D2:
    BL sub_2D1F4
    ADD.W R4, R9, #4
    STRB.W R0, [R9]
    BL sub_2D1F4
    LDRB.W R3, [R9]
    LDR.W R1, [R10,#0x10]
    STRB.W R3, [R9,#2]
    UXTB R3, R0
    MOV R0, R4
    STRB.W R3, [R9,#1]
    STRB.W R3, [R9,#3]
    BL sub_1F294
    LDR.W R1, [R10,#0x1C]
    ADD R4, R0
    MOV R0, R4
    BL sub_1F294
    LDR.W R1, [R10,#0x18]
    ADD R4, R0
    MOV R0, R4
    BL sub_1F294
    LDR.W R1, [R10,#0x14]
    ADD R4, R0
    MOV R0, R4
    BL sub_1F294
    ADD R4, R0
    SUB.W R10, R4, R9
    TST.W R10, #7
    BEQ loc_2AA3E
loc_2AA2E:
    MOVS R3, #0
loc_2AA30:
    STRB.W R3, [R4],#1
    SUB.W R10, R4, R9
    TST.W R10, #7
    BNE loc_2AA30
loc_2AA3E:
    CBZ R7, loc_2AA74
loc_2AA40:
    ADD R0, SP, #0x40A0+var_4098
    ADD R3, SP, #0x40A0+var_403C
    STR R3, [SP,#0x40A0+var_40A0]
    BL sub_28FF0
    MOV R0, R7
    BLX strlen
    MOV R1, R7
    MOV R2, R0
    ADD R0, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_4098
    LDR R0, [SP,#0x40A0+var_40A0]
    BL sub_29130
    MOV R1, R9
    LDR R0, [SP,#0x40A0+var_40A0]
    MOV R2, R10
    BL sub_22B60
    LDR R0, [SP,#0x40A0+var_40A0]
    MOVS R1, #0x10
    BL sub_194E4
loc_2AA74:
    LDR R0, [SP,#0x40A0+var_409C]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R7, R0
    CBZ R0, loc_2AAA0
loc_2AA88:
    SUBS R4, R4, R5
    MOV R0, R5
    MOV R3, R7
    MOVS R1, #1
    MOV R2, R4
    BLX fwrite
    MOV R5, R0
    MOV R0, R7
    BLX fclose
    CBZ R0, loc_2AABA
loc_2AAA0:
    MOVS R0, #0
loc_2AAA2:
    ADD.W R3, SP, #0x40A0+var_A0
    ADDS R3, #0x74
    LDR R2, [R3]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_2AADA
loc_2AAB0:
    ADD.W SP, SP, #0x4000
    ADD SP, SP, #0x7C
    POP.W {R4-R11,PC}
loc_2AABA:
    SUBS R0, R4, R5
    CLZ.W R0, R0
    LSRS R0, R0, #5
    B loc_2AAA2
loc_2AAC4:
    STRB.W R4, [R8,R0]
    ADD.W R9, R11, #4
    STRB.W R4, [R11,#1]
    STRB.W R4, [R11,#2]
    STRB.W R4, [R11,#3]
    B loc_2A9D2
loc_2AADA:
    BLX __stack_chk_fail
```
Output:03C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var_403C
    ADD R2, SP, #0x40A0+var_4098
    BL sub_29024
    ADD R1, SP, #0x40A0+var
############
```assembly
loc_194E4:
    CMP R0, #0
    IT 
    CMPNE R1, #0
    BNE loc_194EE
loc_194EC:
    BX LR
loc_194EE:
    PUSH {R4,LR}
    MOV R2, R1
    MOV R4, R0
    MOVS R1, #0
    BLX memset
    LDRB R3, [R4]
    CBZ R3, locret_19506
loc_194FE:
    LDRB.W R3, [R4,#1]!
    CMP R3, #0
    BNE loc_194FE
loc_19506:
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "byte-level-operations",
  "loop-counter-pattern:decrementing",
  "inferred-algorithm:string-comparison",
  "inferred-algorithm:buffer-zeroing"
]
```<|im_end|>
############
```assembly
loc_2EAE8:
    PUSH.W {R4-R11,LR}
    MOV R10, #0x56190
    SUB SP, SP, #0xE4
    MOV R6, R2
    MOV R9, R0
    LDR.W R3, [R10]
    ADD R0, SP, #0x108+var_F0
    MOV R11, R1
    STR R3, [SP,#0x108+var_2C]
    BL sub_28FF0
    LDR R0, [R6,#8]
    BL sub_1F18C
    CMP R0, #2
    ITT 
    SUBNE R4, R0, #3
    ADDNE.W R5, SP, #0x108+var_F1
    BEQ loc_2EB36
loc_2EB1A:
    MOV R1, R4
    LDR R0, [R6,#8]
    BL sub_1F20C
    SUBS R4, #1
    MOVS R2, #1
    MOV R1, R5
    STRB.W R0, [SP,#0x108+var_F1]
    ADD R0, SP, #0x108+var_F0
    BL sub_29024
    ADDS R2, R4, #1
    BNE loc_2EB1A
loc_2EB36:
    LDR R0, [R6,#0xC]
    BL sub_1F18C
    CMP R0, #2
    SUB.W R4, R0, #3
    IT 
    ADDNE.W R5, SP, #0x108+var_F1
    BEQ loc_2EB66
loc_2EB4A:
    MOV R1, R4
    LDR R0, [R6,#0xC]
    BL sub_1F20C
    SUBS R4, #1
    MOVS R2, #1
    MOV R1, R5
    STRB.W R0, [SP,#0x108+var_F1]
    ADD R0, SP, #0x108+var_F0
    BL sub_29024
    ADDS R3, R4, #1
    BNE loc_2EB4A
loc_2EB66:
    ADD R0, SP, #0x108+var_94
    ADD R1, SP, #0x108+var_F0
    MOV R8, #0x43854
    MOV R5, R0
    BL sub_29130
    LDR R0, [R6,#8]
    MOVW R4, #0x555C
    BL sub_1F158
    MOVS R1, #1
    MOVW R3, #0x3B6C
    MOVS R2, #0x58
    MOVT.W R3, #4
    MOVT.W R4, #4
    STR R4, [SP,#0x108+var_FC]
    MOV R4, R1
    MOV R7, #0x43B70
    STR R0, [SP,#0x108+var_108]
    ADD R0, SP, #0x108+s
    BLX __sprintf_chk
    MOV R3, R8
    MOV R8, R6
    MOV R6, R3
    B loc_2EBB2
loc_2EBAE:
    ADDS R4, #1
    ADDS R5, #1
loc_2EBB2:
    ADD R0, SP, #0x108+s
    BLX strlen
    CMP R4, #1
    ADD R3, SP, #0x108+s
    LDRB.W LR, [R5]
    ADD R0, R3
    BEQ loc_2EC2C
loc_2EBC4:
    STR R6, [SP,#0x108+var_108]
    MOV R3, R7
    MOV.W R2, #0xFFFFFFFF
    MOVS R1, #1
    STR.W LR, [SP,#0x108+var_104]
    BLX __sprintf_chk
    CMP R4, #0x10
    BNE loc_2EBAE
loc_2EBDA:
    ADD.W R4, R11, #0xFFFFFFFF
    MOV R2, R11
    ADD R1, SP, #0x108+s
    MOV R0, R9
    BLX strncpy
    MOVS R5, #0
    MOV R0, R9
    STRB.W R5, [R9,R4]
    BLX strlen
    LDR.W R2, [R8,#0x20]
    MOV R3, R0
    CBZ R2, loc_2EC1C
loc_2EBFC:
    CMP R0, R4
    BGE loc_2EC1C
loc_2EC00:
    SUB.W R2, R11, R0
    ADDS R0, #1
    MOVS R1, #0x20
    SUBS R2, #1
    STRB.W R1, [R9,R3]
    ADD R0, R9
    LDR.W R1, [R8,#0x20]
    BLX strncpy
    STRB.W R5, [R9,R4]
loc_2EC1C:
    LDR R2, [SP,#0x108+var_2C]
    LDR.W R3, [R10]
    CMP R2, R3
    BNE loc_2EC42
loc_2EC26:
    ADD SP, SP, #0xE4
    POP.W {R4-R11,PC}
loc_2EC2C:
    LDR R3, [SP,#0x108+var_FC]
    MOV.W R2, #0xFFFFFFFF
    MOV R1, R4
    STR.W LR, [SP,#0x108+var_104]
    STR R3, [SP,#0x108+var_108]
    MOV R3, R7
    BLX __sprintf_chk
    B loc_2EBAE
loc_2EC42:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:4",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xE4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (__sprintf_chk)",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (strncpy)",
  "external-call-type:data-processing-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-comparison:1",
  "fixed-value-comparison:0xFFFFFFFF",
  "fixed-value-comparison:0x20",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0x56190",
  "address-or-offset-constant:sub_28FF0",
  "address-or-offset-constant:sub_1F18C",
  "address-or-offset-constant:sub_1F20C",
  "address-or-offset-constant:sub_29024",
  "address-or-offset-constant:sub_29130",
  "address-or-offset-constant:sub_1F158",
  "address-or-offset-constant:__sprintf_chk",
  "address-or-offset-constant:strlen",
  "address-or-offset-constant:strncpy",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:string-formatting",
  "inferred-algorithm:string-copying",
  "inferred-algorithm:length-checking",
  "inferred-algorithm:data-processing-loop"
]
```<|im_end|>
############
```assembly
loc_23420:
    PUSH.W {R3-R11,LR}
    MOV R6, R0
    LDR R0, [R0,#0x10]
    MOV R10, R1
    BL sub_1F158
    MOVS R1, #1
    ADD.W R5, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R5, R0
    MOV.W R8, R5,ASR#3
    ADD.W R9, R8, #4
    MOV R0, R9
    BL sub_193B8
    ASRS R3, R5, #0x1B
    MOV R7, R0
    STRB R3, [R0]
    STRB.W R8, [R0,#3]
    ASRS R3, R5, #0x13
    ADD.W R11, R0, #4
    ASRS R5, R5, #0xB
    STRB R3, [R0,#1]
    STRB R5, [R0,#2]
    CMP.W R8, #0
    BEQ loc_2347E
loc_23464:
    ADD.W R4, R8, #0xFFFFFFFF
    MOV R5, R11
loc_2346A:
    MOV R1, R4
    LDR R0, [R6,#0x10]
    BL sub_1F20C
    SUBS R4, #1
    ADDS R3, R4, #1
    STRB.W R0, [R5],#1
    BNE loc_2346A
loc_2347C:
    ADD R11, R8
loc_2347E:
    ADD.W R3, R7, R9
    CMP R11, R3
    BNE loc_23490
loc_23486:
    STR.W R9, [R10]
    MOV R0, R7
    POP.W {R3-R11,PC}
loc_23490:
    MOVW R1, #0xF55C
    MOVW R0, #0xF568
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aDssPrivateBlob
    MOVW R2, #0x16D
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_1F158)",
  "external-call-type:data-processing-helper (sub_193B8)",
  "external-call-type:data-processing-helper (sub_1F20C)",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-shifts:ASR",
  "bitwise-operations:OR",
  "bitwise-operations:XOR",
  "bitwise-operations:AND-clear",
  "bitwise-mask-values:0xF",
  "bitwise-mask-values:0xFFFFFFFF",
  "bitwise-mask-values:0x16D",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:aDssPrivateBlob",
  "address-or-offset-constant:sub_1F158",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:sub_1F20C",
  "address-or-offset-constant:__assert_fail",
  "inferred-algorithm:data-manipulation",
  "inferred-algorithm:loop-with-counter",
  "inferred-algorithm:array-update",
  "inferred-algorithm:error-handling"
]
```<|im_end|>
############
```assembly
loc_2AAE0:
    PUSH {R3-R5,LR}
    MOV R2, #0x3A724
    MOV R4, R0
    MOV R5, R1
    BL sub_19870
    CBZ R0, loc_2AAFE
loc_2AAF4:
    MOV R0, #0x43AC8
    POP {R3-R5,PC}
loc_2AAFE:
    MOVW R2, #0xA710
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2AB1A
loc_2AB10:
    MOV R0, #0x3F520
    POP {R3-R5,PC}
loc_2AB1A:
    MOVW R2, #0xFE3C
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2AB36
loc_2AB2C:
    MOV R0, #0x3FB34
    POP {R3-R5,PC}
loc_2AB36:
    MOVW R2, #0xFE28
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2AB52
loc_2AB48:
    MOV R0, #0x3FB70
    POP {R3-R5,PC}
loc_2AB52:
    MOVW R2, #0xFE14
    MOV R1, R5
    MOVT.W R2, #3
    MOV R0, R4
    BL sub_19870
    CBZ R0, loc_2AB6E
loc_2AB64:
    MOV R0, #0x3FBAC
    POP {R3-R5,PC}
loc_2AB6E:
    MOV R1, R5
    MOV R0, R4
    MOV R2, #0x3FE50
    BL sub_19870
    MOV R3, #0x3FBE8
    CMP R0, #0
    ITE 
    MOVNE R0, R3
    MOVEQ R0, #0
    POP {R3-R5,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:pointer",
  "arg1-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-return-value",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_19870)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0x3A724",
  "fixed-value-assignment:0x43AC8",
  "fixed-value-assignment:0xA710",
  "fixed-value-assignment:0x3F520",
  "fixed-value-assignment:0xFE3C",
  "fixed-value-assignment:0x3FB34",
  "fixed-value-assignment:0xFE28",
  "fixed-value-assignment:0x3FB70",
  "fixed-value-assignment:0xFE14",
  "fixed-value-assignment:0x3FBAC",
  "fixed-value-assignment:0x3FE50",
  "fixed-value-assignment:0x3FBE8",
  "inferred-algorithm:table-driven-lookup",
  "inferred-algorithm:data-mapping-or-retrieval",
  "inferred-algorithm:conditional-result-selection"
]
```<|im_end|>
############
```assembly
loc_11544:
    ADR R12, 0x1154C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(closedir_ptr - 0x5554C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:operating-system-interaction (closedir_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x1154C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:closedir_ptr",
  "inferred-algorithm:file-directory-handling",
  "inferred-algorithm:os-resource-management"
]
```<|im_end|>
############
```assembly
loc_317F8:
    PUSH {R3-R7,LR}
    MOVS R1, #0xD4
    MOVS R0, #1
    LDR R6, =unk_44028
    BL sub_193B8
    ADD.W LR, R6, #0x40
    MOV R7, R0
    MOV R5, R0
loc_3180C:
    MOV R4, R6
    ADDS R5, #0x10
    LDM R4!, {R0-R3}
    ADDS R6, #0x10
    CMP R4, LR
    STR.W R0, [R5,#-0x10]
    STR.W R1, [R5,#-0xC]
    STR.W R2, [R5,#-8]
    STR.W R3, [R5,#-4]
    BNE loc_3180C
loc_31828:
    MOVS R3, #0
    MOV R0, R7
    STR.W R3, [R7,#0xC0]
    STR.W R3, [R7,#0xC4]
    STR.W R3, [R7,#0xC8]
    STR.W R3, [R7,#0xCC]
    STR.W R3, [R7,#0xD0]
    POP {R3-R7,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:none",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x20",
  "callee-saves-registers-present",
  "standard-function-return",
  "fixed-value-assignment:0xD4",
  "fixed-value-assignment:1",
  "address-or-offset-constant:unk_44028",
  "address-or-offset-constant:sub_193B8",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:XOR",
  "bitwise-mask-value:0xD4",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:data-compression-decompression",
  "inferred-algorithm:loop-with-counter"
]
```<|im_end|>
############
```assembly
loc_5691C:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1E660:
    LDR R3, [R0]
    CMP R3, #1
    BLS locret_1E684
loc_1E666:
    LDR.W R1, [R0,R3,LSL#2]
    ADD.W R2, R0, R3,LSL#2
    CBNZ R1, locret_1E684
loc_1E670:
    SUBS R3, #1
    B loc_1E67A
loc_1E674:
    LDR.W R1, [R2,#-4]!
    CBNZ R1, locret_1E684
loc_1E67A:
    CMP R3, #1
    STR R3, [R0]
    ADD.W R3, R3, #0xFFFFFFFF
    BNE loc_1E674
loc_1E684:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:1",
  "fixed-value-comparison:-1",
  "fixed-value-assignment:0xFFFFFFFF",
  "byte-level-operations",
  "loop-counter-pattern:decrementing",
  "loop-control-flow",
  "conditional-branching-on-loop-counter",
  "conditional-branching-on-memory-content",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:bitwise-manipulation"
]
```<|im_end|>
############
```assembly
loc_3812C:
    PUSH.W {R4-R11,LR}
    MOV R10, R0
    SUB SP, SP, #0xC
    MOV R0, #aPuttysshhostke
    MOV R5, R1
    MOV R4, R2
    MOV R11, R3
    BLX getenv
    CMP R0, #0
    BEQ.W loc_38268
loc_3814C:
    BL sub_18A88
    MOV R6, R0
loc_38152:
    MOV R1, R6
    MOV R0, #0x45484
    BL sub_18C24
    MOV R8, R0
    MOV R0, R6
    BL sub_19494
    MOV R0, R8
    MOV R1, #aW
    BLX fopen
    MOV R7, R0
    CMP R0, #0
    BEQ loc_3823C
loc_3817C:
    MOV R0, #aPuttysshhostke
    BLX getenv
    MOV R1, R0
    CMP R0, #0
    BEQ loc_38288
loc_3818E:
    BL sub_18A88
    MOV R9, R0
loc_38194:
    MOVW R1, #0xA374
    MOV R0, R9
    MOVT.W R1, #3
    BLX fopen
    MOV R3, R10
    MOV R2, R5
    STR.W R11, [SP,#0x30+var_30]
    MOV R1, R4
    MOV R6, R0
    MOV R0, #0x455C4
    BL sub_18C24
    LDRB R3, [R0]
    MOV R5, R0
    TST.W R3, #0xDF
    BEQ loc_382C4
loc_381C4:
    MOV R3, R0
    MOVS R2, #0
    B loc_381CC
loc_381CA:
    MOV R2, R0
loc_381CC:
    LDRB.W R1, [R3,#1]!
    ADDS R0, R2, #1
    TST.W R1, #0xDF
    BNE loc_381CA
loc_381D8:
    ADDS R4, R2, #2
loc_381DA:
    CBNZ R6, loc_381E4
loc_381DC:
    B loc_3820A
loc_381DE:
    MOV R0, R10
    BL sub_19494
loc_381E4:
    MOV R0, R6
    BL sub_18E74
    MOV R2, R4
    MOV R1, R5
    MOV R10, R0
    CBZ R0, loc_38204
loc_381F2:
    BLX strncmp
    CMP R0, #0
    BEQ loc_381DE
loc_381FA:
    MOV R1, R7
    MOV R0, R10
    BLX fputs
    B loc_381DE
loc_38204:
    MOV R0, R6
    BLX fclose
loc_3820A:
    MOV R1, R7
    MOV R0, R5
    BLX fputs
    MOV R0, R7
    BLX fclose
    MOV R1, R9
    MOV R0, R8
    BLX rename
    CMP R0, #0
    BLT loc_382A6
loc_38224:
    MOV R0, R8
    BL sub_19494
    MOV R0, R9
    BL sub_19494
    MOV R0, R5
loc_38232:
    ADD SP, SP, #0xC
    POP.W {R4-R11,LR}
    B.W sub_19494
loc_3823C:
    BLX __errno_location
    MOV R6, R0
    LDR R0, [R0]
    CMP R0, #2
    BEQ loc_382C8
loc_38248:
    BLX strerror
    MOV R1, R8
    MOV R2, R0
    MOV R0, #0x45590
    BL sub_12EE0
    MOV R0, R8
    ADD SP, SP, #0xC
    POP.W {R4-R11,LR}
    B.W sub_19494
loc_38268:
    MOV R1, R0
    BL sub_36F2C
    MOV R7, R0
    MOV R1, R0
    MOV R0, #0x45474
    BL sub_18C24
    MOV R6, R0
    MOV R0, R7
    BL sub_19494
    B loc_38152
loc_38288:
    BL sub_36F2C
    MOV R6, R0
    MOV R1, R0
    MOV R0, #0x45474
    BL sub_18C24
    MOV R9, R0
    MOV R0, R6
    BL sub_19494
    B loc_38194
loc_382A6:
    BLX __errno_location
    LDR R0, [R0]
    BLX strerror
    MOV R2, R9
    MOV R1, R8
    MOV R3, R0
    MOV R0, #0x455D4
    BL sub_12EE0
    B loc_38224
loc_382C4:
    MOVS R4, #1
    B loc_381DA
loc_382C8:
    MOV R1, R7
    MOV R0, R7
    BL sub_36F2C
    MOV.W R1, #0x1C0
    MOV R9, R0
    BL sub_36AEC
    MOV R7, R0
    CBZ R0, loc_382FC
loc_382DE:
    MOV R1, R7
    MOV R0, #0x45570
    BL sub_12EE0
    MOV R0, R7
    BL sub_19494
    MOV R0, R9
    BL sub_19494
    MOV R0, R8
    B loc_38232
loc_382FC:
    MOV R0, R9
    BL sub_19494
    MOVW R1, #0x9760
    MOV R0, R8
    MOVT.W R1, #3
    BLX fopen
    MOV R7, R0
    CMP R0, #0
    BNE.W loc_3817C
loc_38318:
    LDR R0, [R6]
    B loc_38248
```
Output:, R7
    BLX fclose
    B loc_382FC
loc_382FC:
    ADD SP, SP, #0xC
    POP.W {R4-R11,LR}
    B.W sub_19494
```
<|im_start|><|im_end|>
############
```assembly
loc_22384:

loc_2249C:
    PUSH {R4}
    MOV R3, R1
    MOV R4, R2
    ADD.W R2, R0, #0x88
    MOV R1, R4
    MOV R0, R3
    POP.W {R4}
    B sub_22384
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:integer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_22384)",
  "integer-size-hint:16-bit",
  "byte-level-operations-present",
  "addition-operation-present",
  "bitwise-shift-left-not-present",
  "bitwise-shift-right-not-present",
  "bitwise-or-not-present",
  "bitwise-and-not-present",
  "bitwise-xor-not-present",
  "specific-bitwise-mask-values-not-present",
  "status-flag-bit-manipulation-not-present",
  "direct-structure-field-updates-not-present",
  "fixed-value-comparisons-not-present",
  "address-or-offset-constants-not-present",
  "inferred-algorithm:not-applicable"
]
```<|im_end|>
############
```assembly
loc_36E60:
    PUSH {R3-R7,LR}
    CMP R0, #0
    BEQ loc_36F14
loc_36E66:
    LDRB R3, [R0]
    MOV R5, R0
    CMP R3, #0
    BEQ loc_36F08
loc_36E6E:
    BLX strlen
    ADD.W R0, R0, R0,LSL#1
    ADDS R0, #1
loc_36E78:
    MOVS R1, #1
    BL sub_193B8
    LDRB R2, [R5]
    CMP R2, #0
    BEQ loc_36F20
loc_36E84:
    MOVW R7, #0x5398
    MOV R4, R0
    MOVT.W R7, #4
    MOVW R6, #0x7FED
    MOV.W LR, #0x25
    B loc_36EC0
loc_36E98:
    CMP.W R12, #0x19
    BLS loc_36EF6
loc_36E9E:
    STRB.W LR, [R4]
    ADDS R4, #3
    LDRB R3, [R5]
    LSRS R3, R3, #4
    LDRB R3, [R7,R3]
    STRB.W R3, [R4,#-2]
    LDRB R3, [R5]
    AND.W R3, R3, #0xF
    LDRB R3, [R7,R3]
    STRB.W R3, [R4,#-1]
    LDRB.W R2, [R5,#1]!
    CBZ R2, loc_36F02
loc_36EC0:
    SUB.W R3, R2, #0x2B
    MOVS R1, #1
    SUB.W R12, R2, #0x61
    UXTB R3, R3
    CMP R3, #0xE
    LSR.W R3, R6, R3
    AND.W R3, R3, R1
    IT 
    EORLS R1, R3
    SUB.W R3, R2, #0x40
    CMP R3, #0x1A
    ITE 
    MOVLS R1, #0
    ANDHI.W R1, R1, #1
    CMP R2, #0x5F
    ITE 
    MOVEQ R1, #0
    ANDNE.W R1, R1, #1
    CMP R1, #0
    BNE loc_36E98
loc_36EF6:
    STRB R2, [R4]
    ADDS R4, #1
    LDRB.W R2, [R5,#1]!
    CMP R2, #0
    BNE loc_36EC0
loc_36F02:
    MOVS R3, #0
    STRB R3, [R4]
    POP {R3-R7,PC}
loc_36F08:
    MOVW R5, #0x53C8
    MOVS R0, #0x31
    MOVT.W R5, #4
    B loc_36E78
loc_36F14:
    MOVW R5, #0x53C8
    MOVS R0, #0x31
    MOVT.W R5, #4
    B loc_36E78
loc_36F20:
    MOV R4, R0
    B loc_36F02
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shifts-present",
  "bitwise-AND-present",
  "bitwise-XOR-present",
  "bitwise-CMP-present",
  "bitwise-ITE-present",
  "address-or-offset-constant:0x5398",
  "address-or-offset-constant:0x7FED",
  "address-or-offset-constant:0x53C8",
  "address-or-offset-constant:0x31",
  "inferred-algorithm:string-processing",
  "inferred-algorithm:data-encryption-or-hash",
  "inferred-algorithm:character-mapping-or-transformation",
  "inferred-algorithm:loop-with-condition-check",
  "inferred-algorithm:conditional-memory-access"
]
```<|im_end|>
############
```assembly
loc_22C54:
    PUSH.W {R4-R9,LR}
    MOV R4, R0
    LDRB R7, [R0,#5]
    MOV R5, R1
    LDRB.W LR, [R4,#4]
    MOV R8, R2
    LDRB R0, [R0,#1]
    MOVW R6, #0x6190
    LDRB R1, [R4]
    LSLS R7, R7, #0x10
    LDRB R2, [R4,#7]
    MOVT.W R6, #5
    ORR.W R7, R7, LR,LSL#24
    LSLS R0, R0, #0x10
    LDRB.W LR, [R4,#2]
    ORRS R7, R2
    ORR.W R0, R0, R1,LSL#24
    LDRB R2, [R4,#3]
    LDRB R1, [R4,#6]
    MOV R9, R3
    LDR R3, [R6]
    SUB SP, SP, #0x1A4
    ORRS R0, R2
    ADD R2, SP, #0x1C0+var_1BC
    ORR.W R1, R7, R1,LSL#8
    ORR.W R0, R0, LR,LSL#8
    STR R3, [SP,#0x1C0+var_24]
    BL sub_20D9C
    LDRB R7, [R4,#0xD]
    ADD R2, SP, #0x1C0+var_134
    LDRB R1, [R4,#0xC]
    LDRB R3, [R4,#9]
    LDRB R0, [R4,#8]
    LSLS R7, R7, #0x10
    LDRB.W LR, [R4,#0xF]
    ORR.W R7, R7, R1,LSL#24
    LSLS R3, R3, #0x10
    LDRB R1, [R4,#0xE]
    ORR.W R7, R7, LR
    ORR.W R3, R3, R0,LSL#24
    LDRB.W LR, [R4,#0xB]
    LDRB R0, [R4,#0xA]
    ORR.W R1, R7, R1,LSL#8
    ORR.W R3, R3, LR
    ORR.W R0, R3, R0,LSL#8
    BL sub_20D9C
    LDRB R3, [R4,#0x15]
    LDRB R1, [R4,#0x14]
    ADD R2, SP, #0x1C0+var_AC
    LDRB R7, [R4,#0x11]
    LDRB R0, [R4,#0x10]
    LSLS R3, R3, #0x10
    LDRB.W LR, [R4,#0x17]
    ORR.W R3, R3, R1,LSL#24
    LSLS R7, R7, #0x10
    LDRB R1, [R4,#0x16]
    ORR.W R3, R3, LR
    ORR.W R7, R7, R0,LSL#24
    LDRB.W LR, [R4,#0x13]
    LDRB R0, [R4,#0x12]
    ORR.W R1, R3, R1,LSL#8
    ORR.W R7, R7, LR
    ORR.W R0, R7, R0,LSL#8
    BL sub_20D9C
    LDRB R2, [R5,#5]
    LDRB R7, [R5,#1]
    MOV R1, R9
    LDRB.W LR, [R5]
    MOV R0, R8
    LDRB.W R12, [R5,#4]
    LSLS R3, R2, #0x10
    LSLS R7, R7, #0x10
    LDRB R4, [R5,#3]
    ORR.W R7, R7, LR,LSL#24
    LDRB.W LR, [R5,#2]
    ORR.W R2, R3, R12,LSL#24
    LDRB R3, [R5,#7]
    LDRB R5, [R5,#6]
    ORRS R4, R7
    ORRS R3, R2
    ADD R2, SP, #0x1C0+var_1BC
    ORR.W R4, R4, LR,LSL#8
    STR R4, [SP,#0x1C0+var_13C]
    ORR.W R3, R3, R5,LSL#8
    STR R3, [SP,#0x1C0+var_138]
    BL sub_224B0
    ADD R0, SP, #0x1C0+var_1BC
    MOV.W R1, #0x198
    BL sub_194E4
    LDR R2, [SP,#0x1C0+var_24]
    LDR R3, [R6]
    CMP R2, R3
    BNE loc_22D60
loc_22D5A:
    ADD SP, SP, #0x1A4
    POP.W {R4-R9,PC}
loc_22D60:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x1A4",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-result",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_20D9C)",
  "external-call-type:unspecified-helper (sub_224B0)",
  "external-call-type:unspecified-helper (sub_194E4)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "byte-level-operations-present",
  "bitwise-shift-left:0x10",
  "bitwise-shift-right:0x10",
  "bitwise-or-with-shift:LSL#24",
  "bitwise-or-with-shift:LSL#8",
  "bitwise-or-with-shift:LSL#0",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:1",
  "memory-read-from-input-parameter-offset:2",
  "memory-read-from-input-parameter-offset:3",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:5",
  "memory-read-from-input-parameter-offset:6",
  "memory-read-from-input-parameter-offset:7",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:9",
  "memory-read-from-input-parameter-offset:10",
  "memory-read-from-input-parameter-offset:11",
  "memory-read-from-input-parameter-offset:12",
  "memory-read-from-input-parameter-offset:13",
  "memory-read-from-input-parameter-offset:14",
  "memory-read-from-input-parameter-offset:15",
  "memory-read-from-input-parameter-offset:16",
  "memory-read-from-input-parameter-offset:17",
  "memory-read-from-input-parameter-offset:18",
  "memory-read-from-input-parameter-offset:19",
  "memory-read-from-input-parameter-offset:20",
  "memory-read-from-input-parameter-offset:21",
  "memory-read-from-input-parameter-offset:22",
  "memory-read-from-input-parameter-offset:23",
  "memory-read-from-input-parameter-offset:24",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:error-or-alternative-path",
  "inferred-algorithm:stack-protection-check"
]
```<|im_end|>
############
```assembly
loc_317E0:
    PUSH {R4,LR}
    MOVS R1, #0xD4
    MOV R4, R0
    MOVS R0, #1
    BL sub_193B8
    MOV R1, R4
    MOVS R2, #0xD4
    BLX memcpy
    POP {R4,PC}
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:unspecified-helper (sub_193B8)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0xD4",
  "fixed-value-assignment:1",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "inferred-algorithm:data-copying",
  "inferred-algorithm:data-processing"
]
```<|im_end|>
############
```assembly
loc_12CAC:
    PUSH {R4,LR}
    MOV R4, #0x561A0
    LDRB R3, [R4]
    CBNZ R3, locret_12CC2
loc_12CBA:
    BL sub_12C5C
    MOVS R3, #1
    STRB R3, [R4]
loc_12CC2:
    POP {R4,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-memory",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_12C5C)",
  "integer-size-hint:32-bit",
  "byte-level-operations",
  "bitwise-operation:CBNZ",
  "memory-write-to-address",
  "memory-read-from-address",
  "fixed-value-assignment:0x561A0",
  "fixed-value-assignment:1",
  "inferred-algorithm:flag-checking-or-resetting",
  "inferred-algorithm:conditional-execution"
]
```<|im_end|>
############
```assembly
loc_33A4C:
    PUSH.W {R4-R11,LR}
    MOV R9, #0x56190
    SUB SP, SP, #0x11C
    MOV R5, R3
    MOV R4, R2
    LDR.W R6, [R9]
    MOV R2, R1
    MOV R1, R0
    ADD R0, SP, #0x140+var_100
    LDR.W R10, [SP,#0x140+arg_0]
    STR R6, [SP,#0x140+var_2C]
    BL sub_328D4
    MOV R2, R5
    MOV R1, R4
    ADD R0, SP, #0x140+var_100
    BL sub_3278C
    ADD R0, SP, #0x140+var_100
    ADD R1, SP, #0x140+src
    BL sub_32BC0
    ADD R0, SP, #0x140+var_4C
    LDM R0, {R0,R2,R3}
    MOVS R6, R0
    ADD.W R3, R3, #0x14
    STR R3, [SP,#0x140+var_44]
    IT 
    MOVNE R6, #1
    CMP R0, #0x2B
    IT 
    MOVGT R6, #0
    CMP R3, #0x13
    ITE 
    MOVHI R3, R2
    ADDLS R3, R2, #1
    STR R3, [SP,#0x140+var_48]
    CMP R6, #0
    BNE loc_33B82
loc_33AA8:
    CMP R0, #0x2B
    BLE loc_33BAA
loc_33AAC:
    ADD.W R8, SP, #0x140+var_8C
    ADD R7, SP, #0x140+var_A0
    ADD R4, SP, #0x140+src
    MOV R11, R6
    MOVS R5, #0x14
loc_33AB8:
    RSB.W R2, R0, #0x40
    MOV R1, R4
    ADD R0, R8
    BLX memcpy
    LDR R3, [SP,#0x140+var_4C]
    LDR R6, [SP,#0x140+var_7C]
    MOV R1, SP
    RSB.W LR, R3, #0x40
    LDR R3, [SP,#0x140+var_84]
    REV.W R12, R6
    LDR R6, [SP,#0x140+var_70]
    LDR R2, [SP,#0x140+var_88]
    SUB.W R5, R5, LR
    REV R3, R3
    ADD R4, LR
    STR R3, [SP,#0x140+var_138]
    REV.W LR, R6
    LDR R3, [SP,#0x140+var_80]
    REV R2, R2
    LDR R6, [SP,#0x140+var_6C]
    STR R2, [SP,#0x140+var_13C]
    REV R2, R3
    STR.W R12, [SP,#0x140+var_130]
    REV.W R12, R6
    LDR R3, [SP,#0x140+var_78]
    LDR R6, [SP,#0x140+var_60]
    STR R2, [SP,#0x140+var_134]
    REV R3, R3
    LDR R2, [SP,#0x140+var_74]
    STR R3, [SP,#0x140+var_12C]
    REV R2, R2
    LDR R3, [SP,#0x140+var_68]
    STR R2, [SP,#0x140+var_128]
    STR.W LR, [SP,#0x140+var_124]
    REV.W LR, R6
    LDR R2, [SP,#0x140+var_64]
    REV R3, R3
    LDR R6, [SP,#0x140+var_5C]
    LDR R0, [SP,#0x140+var_8C]
    REV R2, R2
    STR.W R12, [SP,#0x140+var_120]
    REV.W R12, R6
    STR R3, [SP,#0x140+var_11C]
    REV R0, R0
    LDR R3, [SP,#0x140+var_58]
    STR R2, [SP,#0x140+var_118]
    LDR R6, [SP,#0x140+var_54]
    REV R3, R3
    LDR R2, [SP,#0x140+var_50]
    STR R0, [SP,#0x140+var_140]
    MOV R0, R7
    STR.W LR, [SP,#0x140+var_114]
    REV R2, R2
    REV.W LR, R6
    STR.W R12, [SP,#0x140+var_110]
    STR R3, [SP,#0x140+var_10C]
    STR.W LR, [SP,#0x140+var_108]
    STR R2, [SP,#0x140+var_104]
    BL sub_322B0
    CMP R5, #0x3F
    STR.W R11, [SP,#0x140+var_4C]
    MOV.W R0, #0
    BGT loc_33AB8
loc_33B5C:
    MOV R2, R5
loc_33B5E:
    MOV R1, R4
    MOV R0, R8
    MOVS R3, #0x4C
    BLX __memcpy_chk
    STR R5, [SP,#0x140+var_4C]
loc_33B6A:
    MOV R1, R10
    MOV R0, R7
    BL sub_32BC0
    LDR R2, [SP,#0x140+var_2C]
    LDR.W R3, [R9]
    CMP R2, R3
    BNE loc_33BB8
loc_33B7C:
    ADD SP, SP, #0x11C
    POP.W {R4-R11,PC}
loc_33B82:
    ADD R4, SP, #0x140+src
    ADD R3, SP, #0x140+var_28
    ADDS R6, R3, R0
    ADD R7, SP, #0x140+var_A0
    LDM R4!, {R0-R3}
    STR.W R0, [R6,#-0x64]
    LDR R0, [R4]
    STR.W R1, [R6,#-0x60]
    STR.W R2, [R6,#-0x5C]
    STR.W R0, [R6,#-0x54]
    STR.W R3, [R6,#-0x58]
    LDR R3, [SP,#0x140+var_4C]
    ADDS R3, #0x14
    STR R3, [SP,#0x140+var_4C]
    B loc_33B6A
loc_33BAA:
    MOVS R2, #0x14
    ADD R4, SP, #0x140+src
    MOV R5, R2
    ADD.W R8, SP, #0x140+var_8C
    ADD R7, SP, #0x140+var_A0
    B loc_33B5E
loc_33BB8:
    BLX __stack_chk_fail
```
Output: R2, R5
    MOV R1, R7
    MOV R0, R8
    MOVS R3, #0x4C
    BLX __memcpy_chk
    ADD W8, SP, #0x140+var_4C
    ADD W9, SP, #0x140+var_7C
    ADD W10, SP, #0x140+var_84
    ADD W11, SP, #0x140+var_80
    ADD W12, SP, #0x140+var_78
    ADD W13, SP, #0x140+var_74
    ADD W14, SP, #0x140+var_70
    ADD W15, SP, #0x140+var_6C
    ADD W16, SP, #0x140+var_68
    ADD W17, SP, #0x140+var_64
    ADD W18, SP, #0x140+var_60
    ADD W19, SP, #0x140+var_5C
    ADD W20, SP, #0x140+var_58
    ADD W21, SP, #0x140+var_54
    ADD W22, SP, #0x140+var_50
    ADD W23, SP, #0x140+var_4C
    ADD W24, SP, #0x140+var_48
    ADD W25, SP, #0x140+var_44
    ADD W26, SP, #0x140+var_40
    ADD W27, SP, #0x140+var_3C
    ADD W28, SP, #0x140+var_38
    ADD W29, SP, #0x140+var_34
    ADD W30, SP, #0x140+var_30
    ADD W31, SP, #0x140+var_2C
    ADD W32, SP, #0x140+var_28
    ADD W33, SP, #0x140+var_24
    ADD W34, SP, #0x140+var_20
    ADD W35, SP, #0x140+var_1C
    ADD W36, SP, #0x140+var_18
    ADD W37, SP, #0x140+var_14
    ADD W38, SP, #0x140+var_10
    ADD W39, SP, #0x140+var_C
    ADD W40, SP, #0x140+var_8
    ADD W41, SP, #0x140+var_4
    ADD W42, SP, #0x140+var_0
    ADD W43, SP, #0x13C
    ADD W44, SP, #0x138
    ADD W45, SP, #0x134
    ADD W46, SP, #0x130
    ADD W47, SP, #0x12C
    ADD W48, SP, #0x128
    ADD W49, SP, #0x124
    ADD W50, SP, #0x120
    ADD W51, SP, #0x11C
    ADD W52, SP, #0x118
    ADD W53, SP, #0x114
    ADD W54, SP, #0x110
    ADD W55, SP, #0x10C
    ADD W56, SP, #0x108
    ADD W57, SP, #0x104
    ADD W58, SP, #0x100
    ADD W59, SP, #0xFC
    ADD W60, SP, #0xF8
    ADD W61, SP, #0xF4
    ADD W62, SP, #0xFA

############
```assembly
loc_2F27C:
    PUSH {R4,LR}
    MOVS R1, #0x6C
    MOV R4, R0
    MOVS R0, #1
    BL sub_193B8
    MOV R1, R4
    MOVS R2, #0x6C
    BLX memcpy
    POP {R4,PC}
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x4",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memcpy)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x6C",
  "memory-copy-operation",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:string-manipulation"
]
```<|im_end|>
############
```assembly
loc_568D0:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1E058:
    PUSH.W {R4-R10,LR}
    SUB SP, SP, #8
    MOV.W R10, #0xC
    MOV R9, R3
    LDR R7, [SP,#0x28+arg_0]
    MOV R4, R1
    MOV R6, R0
    MOV R1, R2
    MOV R2, R9
    MLA.W R10, R10, R7, R3
    MOV.W R8, R7,LSL#2
    ADD.W R5, R0, R8
    MOV R3, R7
    MOV R0, R5
    STR.W R10, [SP,#0x28+var_28]
    BL sub_1DED4
    MOV R3, R7
    STR.W R10, [SP,#0x28+var_28]
    ADD.W R2, R9, R8
    MOV R1, R4
    MOV R0, R9
    BL sub_1DB88
    MOV.W LR, R7,LSL#1
    SUBS.W R3, LR, #1
    BMI loc_1E166
loc_1E0A2:
    ADD.W LR, R8, #4
    ADD.W R0, R5, R8
    ADD.W LR, LR, R3,LSL#2
    MOVS R2, #0
    ADD LR, R9
loc_1E0B2:
    LDR.W R1, [LR,#-4]!
    MOV.W R10, #0
    ADDS R2, R2, R1
    LDR.W R1, [R0,#-4]
    ADC.W R3, R10, #0
    ADDS.W R9, R2, R1
    STR.W R9, [R0,#-4]!
    ADC.W R10, R3, #0
    CMP R0, R6
    MOV R2, R10
    BNE loc_1E0B2
loc_1E0D6:
    CMP R7, #0
    BLE loc_1E148
loc_1E0DA:
    MOV R3, R6
    MOV R12, R5
    MOV R1, R5
    MOV.W LR, #0
loc_1E0E4:
    LDR R0, [R3]
    STR.W R0, [R1],#4
    STR.W LR, [R3],#4
    CMP R3, R5
    BNE loc_1E0E4
loc_1E0F2:
    CBNZ R2, loc_1E114
loc_1E0F4:
    LDR.W R1, [R6,R7,LSL#2]
    LDR R3, [R4]
    CMP R1, R3
    BNE loc_1E14E
loc_1E0FE:
    MOV R3, R4
    B loc_1E10E
loc_1E102:
    LDR.W R0, [R12,#4]!
    LDR.W R1, [R3,#4]!
    CMP R0, R1
    BNE loc_1E14E
loc_1E10E:
    ADDS R2, #1
    CMP R7, R2
    BNE loc_1E102
loc_1E114:
    CMP R7, #0
    BLE loc_1E148
loc_1E118:
    SUB.W R3, R8, #4
    ADD.W R5, R4, R8
    ADD R8, R3
    MOVS R2, #1
    ADD R6, R8
loc_1E126:
    LDR.W R0, [R5,#-4]!
    MOV.W R8, #0
    LDR R1, [R6]
    MVNS R0, R0
    ADDS R2, R2, R0
    ADC.W R3, R8, #0
    ADDS R7, R2, R1
    ADC.W R8, R3, #0
    CMP R4, R5
    STR.W R7, [R6],#-4
    MOV R2, R8
    BNE loc_1E126
loc_1E148:
    ADD SP, SP, #8
    POP.W {R4-R10,PC}
loc_1E14E:
    CMP R2, R7
    BGE loc_1E114
loc_1E152:
    ADDS R1, R2, R7
    LDR.W R3, [R4,R2,LSL#2]
    LDR.W R2, [R6,R1,LSL#2]
    CMP R2, R3
    BHI loc_1E114
loc_1E160:
    ADD SP, SP, #8
    POP.W {R4-R10,PC}
loc_1E166:
    CMP R7, #0
    IT 
    MOVGT R2, #0
    BGT loc_1E0DA
loc_1E16E:
    B loc_1E148
```
Output:```json
[
  "return-type:integer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x8",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-loop-counter",
  "conditional-branching-on-result",
  "unconditional-jumps-present",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1DED4)",
  "external-call-type:unspecified-helper (sub_1DB88)",
  "integer-size-hint:16-bit",
  "byte-level-operations",
  "bitwise-operation:XOR",
  "bitwise-operation:AND",
  "bitwise-operation:NOT",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:0xC",
  "address-or-offset-constant:-4",
  "address-or-offset-constant:0",
  "address-or-offset-constant:4",
  "address-or-offset-constant:1",
  "address-or-offset-constant:-1",
  "address-or-offset-constant:0x1",
  "address-or-offset-constant:1",
  "address-or-offset-constant:1",
  "address-or-offset-constant:0x2",
  "address-or-offset-constant:0x3",
  "address-or-offset-constant:0x4",
  "address-or-offset-constant:0x5",
  "address-or-offset-constant:0x6",
  "address-or-offset-constant:0x7",
  "address-or-offset-constant:0x8",
  "address-or-offset-constant:0x9",
  "address-or-offset-constant:0xA",
  "address-or-offset-constant:0xB",
  "address-or-offset-constant:0xC",
  "address-or-offset-constant:0xD",
  "address-or-offset-constant:0xE",
  "address-or-offset-constant:0xF",
  "address-or-offset-constant:0x10",
  "address-or-offset-constant:0x11",
  "address-or-offset-constant:0x12",
  "address-or-offset-constant:0x13",
  "address-or-offset-constant:0x14",
  "address-or-offset-constant:0x15",
  "address-or-offset-constant:0x16",
  "address-or-offset-constant:0x17",
  "address-or-offset-constant:0x18",
  "address-or-offset-constant:0x19",
  "address-or-offset-constant:0x1A",
  "address-or-offset-constant:0x1B",
  "address-or-offset-constant:0x1C",
  "address-or-offset-constant:0x1D",
  "address-or-offset-constant:0x1E",
  "address-or-offset-constant:0x1F",
  "address-or-offset-constant:0x20",
  "address-or-offset-constant:0x21",
  "address-or-offset-constant:0x22",
  "address-or-offset-constant:0x23",
  "address-or-offset-constant:0x24",
  "address-or-offset-constant:0x25",
  "address-or-offset-constant:0x26",
  "address-or-offset-constant:0x27",
  "address-or-offset-constant:0x28",
  "address-or-offset-constant:0x29",
  "address-or-offset-constant:0x2A",
  "address-or-offset-constant:0x2B",
  "address-or-offset-constant:0x2C",
  "address-or-offset-constant:0x2D",
  "address-or-offset-constant:0x2E",
  "address-or-offset-constant:0x2F",
  "address-or-offset-constant:0x30",
  "address-or-offset-constant:0x31",
  "address-or-offset-constant:0x32",
  "address-or-offset-constant:0x33",
  "address-or-offset-constant:0x34",
  "address-or-offset-constant:0x35",
  "address-or-offset-constant:0x36",
  "address
############
```assembly
loc_2495C:
    LDR R3, [R0,#4]
    PUSH.W {R4-R10,LR}
    LDR R4, [R3]
    CBZ R4, loc_2496C
loc_24966:
    MOVS R0, #0
loc_24968:
    POP.W {R4-R10,PC}
loc_2496C:
    MOV R4, R0
    LDR R0, [R3,#0x10]
    MOV R9, R2
    MOV R6, R1
    BL sub_1F158
    LDR R3, [R4,#4]
    ADD.W R5, R0, #0xE
    ADDS R0, #7
    IT 
    MOVPL R5, R0
    LDR R0, [R3,#4]
    BLX strlen
    ASRS R5, R5, #3
    MOV.W R10, R5,LSL#1
    MOV R8, R0
    LDR R0, [R4,#0x18]
    BL sub_1F1CC
    ADD.W R7, R8, #9
    ADD.W R3, R7, R10
    ADD R0, R3
    CMP R0, R9
    BGT locret_24968
loc_249A6:
    STRB.W R8, [R6,#3]
    MOV.W R2, R8,ASR#24
    MOV.W R3, R8,ASR#16
    STRB R2, [R6]
    STRB R3, [R6,#1]
    MOV.W R3, R8,ASR#8
    STRB R3, [R6,#2]
    MOV R2, R8
    LDR R3, [R4,#4]
    ADDS R0, R6, #4
    ADD.W R10, R10, #1
    ADD.W R9, R5, #0xFFFFFFFF
    LDR R1, [R3,#4]
    BLX memcpy
    ADD.W R3, R8, #4
    ADDS R1, R6, R3
    ADD.W R2, R6, R8
    MOV.W R0, R10,ASR#24
    STRB R0, [R6,R3]
    STRB.W R10, [R1,#3]
    MOV.W R3, R10,ASR#16
    MOV.W R10, R10,ASR#8
    STRB R3, [R1,#1]
    STRB.W R10, [R1,#2]
    MOVS R1, #4
    STRB R1, [R2,#8]
    CBZ R5, loc_24A34
loc_249F8:
    ADD.W R7, R8, #8
    MOV R5, R9
    ADD R7, R6
loc_24A00:
    MOV R1, R5
    LDR R0, [R4,#8]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R1, R5, #1
    STRB.W R0, [R7,#1]!
    BNE loc_24A00
loc_24A12:
    ADD.W R7, R8, #0xA
    MOV R5, R9
    ADD R7, R9
    ADD.W R10, R6, R7
loc_24A1E:
    MOV R1, R5
    LDR R0, [R4,#0xC]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R2, R5, #1
    STRB.W R0, [R10],#1
    BNE loc_24A1E
loc_24A30:
    ADDS R7, #1
    ADD R7, R9
loc_24A34:
    LDR R0, [R4,#0x18]
    ADDS R5, R6, R7
    BL sub_1F158
    ADDS R2, R7, #3
    ADD.W R8, R6, R2
    ADD.W R3, R0, #0xF
    ADDS R0, #8
    IT 
    MOVPL R3, R0
    ADDS R0, R7, #4
    ASRS R1, R3, #3
    MOV.W LR, R3,ASR#27
    STRB.W LR, [R6,R7]
    MOV.W LR, R3,ASR#19
    ASRS R3, R3, #0xB
    STRB.W LR, [R5,#1]
    STRB R3, [R5,#2]
    STRB R1, [R6,R2]
    SUBS R6, R1, #1
    CMP R1, #0
    BEQ.W locret_24968
loc_24A6E:
    MOV R5, R6
loc_24A70:
    MOV R1, R5
    LDR R0, [R4,#0x18]
    BL sub_1F20C
    SUBS R5, #1
    ADDS R3, R5, #1
    STRB.W R0, [R8,#1]!
    BNE loc_24A70
loc_24A82:
    ADDS R0, R7, #5
    ADD R0, R6
    POP.W {R4-R10,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-patterns:decrementing",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (strlen)",
  "external-call-type:data-processing-helper (memcpy)",
  "external-call-type:data-processing-helper (sub_1F158)",
  "external-call-type:data-processing-helper (sub_1F1CC)",
  "external-call-type:data-processing-helper (sub_1F20C)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-read-from-input-parameter-offset:10",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "fixed-value-assignment:4",
  "fixed-value-assignment:8",
  "fixed-value-assignment:F",
  "address-or-offset-constant:sub_1F158",
  "address-or-offset-constant:sub_1F1CC",
  "address-or-offset-constant:sub_1F20C",
  "address-or-offset-constant:strlen",
  "address-or-offset-constant:memcpy",
  "inferred-algorithm:data-serialization",
  "inferred-algorithm:data-deserialization",
  "inferred-algorithm:data-manipulation",
  "inferred-algorithm:loop-based-processing"
]
```<|im_end|>
############
```assembly
loc_11414:
    ADR R12, 0x1141C
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(__errno_location_ptr - 0x5541C)]!
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:none",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__errno_location_ptr)",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:0x1141C",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:__errno_location_ptr",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:os-interface-access"
]
```<|im_end|>
############
```assembly
loc_366C0:
    PUSH {R4-R6,LR}
    MOV R5, R1
    LDR R6, [R0]
    MOV R0, R6
    BLX strlen
    ADDS R4, R0, #1
    CBZ R5, loc_366DA
loc_366D0:
    MOV R1, R6
    MOV R0, R5
    MOV R2, R4
    BLX memcpy
loc_366DA:
    MOV R0, R4
    POP {R4-R6,PC}
```
Output:```json
[
  "return-type:pointer",
  "argument-count:3",
  "arg0-type:pointer",
  "arg1-type:pointer",
  "arg2-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:string-length-helper (strlen)",
  "external-call-type:data-copy-helper (memcpy)",
  "integer-size-hint:32-bit",
  "memory-read-from-stack-offset",
  "memory-write-to-stack-offset",
  "inferred-algorithm:string-concatenation",
  "inferred-algorithm:data-memcpy"
]
```<|im_end|>
############
```assembly
loc_28FF0:
    MOVW R2, #0x2301
    MOVW R3, #0xAB89
    MOVT.W R2, #0x6745
    MOVT.W R3, #0xEFCD
    STM.W R0, {R2,R3}
    MOVW R2, #0xDCFE
    MOVW R3, #0x5476
    MOVT.W R2, #0x98BA
    MOVT.W R3, #0x1032
    STR R2, [R0,#8]
    STR R3, [R0,#0xC]
    MOVS R3, #0
    STR R3, [R0,#0x50]
    STR R3, [R0,#0x58]
    STR R3, [R0,#0x54]
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:caller-saves-registers",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "integer-size-hint:32-bit",
  "byte-level-operations:word-moves-with-extension",
  "byte-level-operations:straightforward-memory-writes",
  "magic-number:0x2301AB89",
  "magic-number:0x6745EFCD",
  "magic-number:0xDCFE5476",
  "magic-number:0x98BA1032",
  "inferred-algorithm:data-packing-serialization",
  "inferred-algorithm:fixed-pattern-storage"
]
```<|im_end|>
############
```assembly
loc_56924:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_38A04:
    PUSH.W {R3-R9,LR}
    MOV R7, R0
    LDR R6, =(off_55F08 - 0x38A16)
    MOV R8, R1
    LDR R5, =(off_55F04 - 0x38A1C)
    MOV R9, R2
    ADD R6, PC
    BLX .init_proc
    ADD R5, PC
    SUBS R6, R6, R5
    ASRS R6, R6, #2
    BEQ locret_38A34
loc_38A20:
    MOVS R4, #0
loc_38A22:
    ADDS R4, #1
    LDR.W R3, [R5],#4
    MOV R2, R9
    MOV R1, R8
    MOV R0, R7
    BLX R3
    CMP R4, R6
    BNE loc_38A22
loc_38A34:
    POP.W {R3-R9,PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:unknown",
  "arg1-type:unknown",
  "arg2-type:unknown",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-present",
  "loop-counter-pattern:incrementing",
  "external-function-calls-present",
  "external-call-type:indirect-call-through-pointer",
  "integer-size-hint:32-bit",
  "address-or-offset-constant:off_55F08",
  "address-or-offset-constant:off_55F04",
  "address-or-offset-constant:0x38A16",
  "address-or-offset-constant:0x38A1C",
  "inferred-algorithm:dynamic-dispatch-or-callback-invocation",
  "inferred-algorithm:iteration-over-function-pointers",
  "inferred-algorithm:module-initialization-or-configuration"
]
```<|im_end|>
############
```assembly
loc_1D7C8:

loc_1D904:
    PUSH.W {R4-R11,LR}
    SUB SP, SP, #0x34
    MOV R10, R2
    MOV.W R9, #0
    STR R3, [SP,#0x58+var_3C]
    SUBS R3, R1, R3
    STR R3, [SP,#0x58+var_48]
    LDR R3, [SP,#0x58+arg_0]
    STR R1, [SP,#0x58+var_38]
    STR R0, [SP,#0x58+var_4C]
    STR R3, [SP,#0x58+var_34]
    LDR R3, [SP,#0x58+arg_4]
    STR R3, [SP,#0x58+var_30]
    LDR R3, [SP,#0x58+arg_8]
    STR R3, [SP,#0x58+var_2C]
loc_1D926:
    LDR R3, [SP,#0x58+var_48]
    CMP R9, R3
    BGT loc_1D944
loc_1D92C:
    LDR R3, [SP,#0x58+var_4C]
    MOV.W R1, R9,LSL#2
    LDR.W R0, [R3,R9,LSL#2]
    CMP R0, #0
    BNE loc_1D9DE
loc_1D93A:
    LDR R3, [SP,#0x58+var_48]
    ADD.W R9, R9, #1
    CMP R9, R3
    BLE loc_1D92C
loc_1D944:
    LDR R1, [SP,#0x58+var_38]
    CMP R1, #0
    BLE loc_1D980
loc_1D94A:
    LDR R2, [SP,#0x58+var_3C]
    SUBS R3, R2, R1
    LDR R2, [SP,#0x58+var_4C]
    ADDS R4, R1, R3
    B loc_1D970
loc_1D954:
    LDR.W R1, [R10,R3,LSL#2]
    LDR R0, [R2]
    CMP R1, R0
    BHI.W loc_1DB82
loc_1D960:
    CMP R1, R0
    ADD.W R3, R3, #1
    ADD.W R2, R2, #4
    BCC loc_1D980
loc_1D96C:
    CMP R3, R4
    BEQ loc_1D980
loc_1D970:
    CMP R3, #0
    BGE loc_1D954
loc_1D974:
    LDR R0, [R2]
    MOVS R1, #0
    ADDS R3, #1
    ADDS R2, #4
    CMP R1, R0
    BCS loc_1D96C
loc_1D980:
    LDR R3, [SP,#0x58+var_38]
    SUBS R4, R3, #1
    BMI loc_1D9C8
loc_1D986:
    LDR R1, [SP,#0x58+var_3C]
    MOV R2, R3
    LDR R6, [SP,#0x58+var_4C]
    SUBS R3, R1, R3
    ADD R4, R3
    ADD.W R0, R6, R2,LSL#2
    MOVS R2, #1
loc_1D996:
    CMP R4, #0
    LDR.W R1, [R0,#-4]
    MOV.W R3, #0
    ITE 
    LDRGE.W R5, [R10,R4,LSL#2]
    MOVLT.W R5, #0xFFFFFFFF
    ADD.W R4, R4, #0xFFFFFFFF
    IT 
    MVNGE R5, R5
    ADDS R2, R2, R1
    ADC.W R3, R3, #0
    ADDS R2, R2, R5
    ADC.W R3, R3, #0
    STR.W R2, [R0,#-4]!
    CMP R6, R0
    MOV R2, R3
    BNE loc_1D996
loc_1D9C8:
    LDR R3, [SP,#0x58+var_34]
    CMP R3, #0
    BEQ.W loc_1DB82
loc_1D9D0:
    MOV R0, R3
    MOVS R2, #0
    MOVS R1, #1
    ADD SP, SP, #0x34
    POP.W {R4-R11,LR}
    B sub_1D7C8
loc_1D9DE:
    LSRS R5, R0, #0x10
    MOV.W R2, R0,LSL#16
    ITE 
    MOVNE R3, R0
    MOVEQ R3, R2
    LSRS R4, R3, #0x18
    LSLS R2, R3, #8
    CMP R4, #0
    ITET 
    MOVNE R2, R3
    MOVEQ R4, #8
    MOVNE R4, #0
    CMP R5, #0
    MOV.W R5, R2,LSR#28
    ITE 
    MOVEQ R3, #0x10
    MOVNE R3, #0
    CMP R5, #0
    MOV.W R5, R2,LSL#4
    ADD R3, R4
    ITE 
    MOVEQ R2, R5
    MOVNE R5, #0
    MOV.W R4, R2,LSR#30
    IT 
    MOVEQ R5, #4
    CMP R4, #0
    ADD R3, R5
    MOV.W R4, R2,LSL#2
    ITE 
    MOVEQ R5, #2
    MOVNE R5, #0
    ADD R3, R5
    IT 
    MOVEQ R2, R4
    CMP R2, #0
    IT 
    ADDGE R3, #1
    LSLS R0, R3
    CBZ R3, loc_1DA52
loc_1DA38:
    LDR R4, [SP,#0x58+var_38]
    ADD.W R2, R9, #1
    CMP R4, R2
    BLE loc_1DA52
loc_1DA42:
    LDR R2, [SP,#0x58+var_4C]
    ADD R1, R2
    RSB.W R2, R3, #0x20
    LDR R1, [R1,#4]
    LSR.W R2, R1, R2
    ORRS R0, R2
loc_1DA52:
    LDR R2, [SP,#0x58+var_30]
    LDR R4, [SP,#0x58+var_38]
    UMULL.W R0, R1, R2, R0
    LDR R2, [SP,#0x58+var_3C]
    ADDS R2, #1
    ADD R2, R9
    SUBS R2, R2, R4
    STR R1, [SP,#0x58+var_50]
    ADD.W R3, R3, R2,LSL#5
    LDR R2, [SP,#0x58+var_2C]
    STR R1, [SP,#0x58+var_40]
    SUBS R3, R3, R2
    RSBS.W R3, R3, #1
    STR R3, [SP,#0x58+var_44]
    MOV R2, R3
    BMI loc_1DB0A
loc_1DA78:
    LDR R3, [SP,#0x58+var_48]
    ANDS.W R8, R2, #0x1F
    MOV R1, R3
    SUB.W R12, R1, R2,ASR#5
    BEQ loc_1DB26
loc_1DA86:
    LDR R3, [SP,#0x58+var_3C]
    SUBS R5, R3, #1
    ADD.W R6, R12, R5
    CMP R9, R6
    BGT loc_1DAF6
loc_1DA92:
    LDR R3, [SP,#0x58+var_4C]
    MOVS R4, #0
    MOV R7, R4
    MOVS R2, #1
    ADD.W R6, R3, R6,LSL#2
    RSB.W R3, R8, #0x20
    STR R3, [SP,#0x58+var_54]
loc_1DAA4:
    CMP R5, #0
    ITETE 
    LDRGE.W R0, [R10,R5,LSL#2]
    MOVLT R1, #0
    LDRGE R3, [SP,#0x58+var_50]
    MOVLT R0, #0
    ADD.W R5, R5, #0xFFFFFFFF
    ADD.W R11, R12, R5
    IT 
    UMULLGE.W R0, R1, R0, R3
    MOVS R3, #0
    ADDS R0, R0, R4
    LDR R4, [R6]
    ADC.W R1, R1, #0
    LSL.W LR, R0, R8
    ADDS R2, R2, R4
    ORR.W LR, LR, R7
    ADC.W R3, R3, #0
    LDR R7, [SP,#0x58+var_54]
    MOV R4, R1
    MVN.W LR, LR
    ADDS.W R2, R2, LR
    ADC.W R3, R3, #0
    CMP R9, R11
    STR.W R2, [R6],#-4
    LSR.W R7, R0, R7
    MOV R2, R3
    BLE loc_1DAA4
loc_1DAF6:
    LDR R3, [SP,#0x58+var_34]
    CMP R3, #0
    BEQ.W loc_1D926
loc_1DAFE:
    LDR R2, [SP,#0x58+var_44]
    MOV R0, R3
    LDR R1, [SP,#0x58+var_40]
    BL sub_1D7C8
    B loc_1D926
loc_1DB0A:
    CMN.W R3, #0x1F
    BLT.W loc_1D944
loc_1DB12:
    NEGS R2, R3
    LSRS.W R3, R1, R2
    STR R3, [SP,#0x58+var_40]
    BEQ.W loc_1D944
loc_1DB1E:
    LDR.W R12, [SP,#0x58+var_48]
    MOVS R3, #0
    STR R3, [SP,#0x58+var_44]
loc_1DB26:
    LDR R3, [SP,#0x58+var_3C]
    SUBS R5, R3, #1
    ADD.W R6, R5, R12
    CMP R9, R6
    BGT loc_1DAF6
loc_1DB32:
    LDR R3, [SP,#0x58+var_4C]
    MOVS R7, #0
    LDR.W LR, [SP,#0x58+var_40]
    MOVS R2, #1
    ADD.W R6, R3, R6,LSL#2
loc_1DB40:
    CMP R5, #0
    LDR R4, [R6]
    MOV.W R3, #0
    ITEE 
    LDRGE.W R0, [R10,R5,LSL#2]
    MOVLT R1, #0
    MOVLT R0, #0
    ADD.W R5, R5, #0xFFFFFFFF
    IT 
    UMULLGE.W R0, R1, LR, R0
    ADDS R0, R0, R7
    ADC.W R1, R1, #0
    ADDS R2, R2, R4
    ADC.W R3, R3, #0
    MVNS R0, R0
    ADDS R2, R2, R0
    ADD.W R0, R12, R5
    ADC.W R3, R3, #0
    CMP R9, R0
    STR.W R2, [R6],#-4
    MOV R7, R1
    MOV R2, R3
    BLE loc_1DB40
loc_1DB80:
    B loc_1DAF6
loc_1DB82:
    ADD SP, SP, #0x34
    POP.W {R4-R11,PC}
```
Output:0, loc_1D9E4
    ADD R1, R3, #0
    ADD W1, R3, #0
    B loc_1D9E4
loc_1D9E4:
    LDR R3, [SP,#0x58+var_4C]
    ADD.W R3, R3, #1
    STR W3, [R3, #0]
    LDR R3, [SP,#0x58+var_38]
    ADD.W R3, R3, #1
    STR W3, [R3, #0]
    LDR R3, [SP,#0x58+var_34]
    ADD.W R3, R3, #1
    STR W3, [R3, #0]
    LDR R3, [SP,#0x58+var_30]
    ADD.W R3, R3, #1
    STR W3, [R3, #0]
    LDR R3, [SP,#0x58+var_2C]
    ADD.W R3, R3, #1
    STR W3, [R3, #0]
    ADD SP, SP, #0x34
    POP.W {R4-R11,LR}
    B sub_1D7C8
loc_1DB82:
    ADD SP, SP, #0x34
    POP.W {R4-R11,LR}
    BX LR
```
<|im_start|><|im_end|>
############
```assembly
loc_36D14:
    PUSH {R4,LR}
    MOVW R3, #0x67DC
    MOVW R4, #0x6190
    MOVT.W R3, #5
    MOVT.W R4, #5
    SUB SP, SP, #0x10
    LDR R3, [R3]
    LDR R2, [R4]
    STR R2, [SP,#0x18+var_C]
    CBZ R3, loc_36D46
loc_36D30:
    ADD R1, SP, #0x18+var_14
    ADD R0, SP, #0x18+var_10
    BL sub_2D250
    LDR R0, [SP,#0x18+var_10]
    LDR R1, [SP,#0x18+var_14]
    BL sub_383A8
    LDR R0, [SP,#0x18+var_10]
    BL sub_19494
loc_36D46:
    LDR R2, [SP,#0x18+var_C]
    LDR R3, [R4]
    CMP R2, R3
    BNE loc_36D52
loc_36D4E:
    ADD SP, SP, #0x10
    POP {R4,PC}
loc_36D52:
    BLX __stack_chk_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_2D250)",
  "external-call-type:unspecified-helper (sub_383A8)",
  "external-call-type:unspecified-helper (sub_19494)",
  "external-call-type:unspecified-helper (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0x67DC",
  "fixed-value-assignment:0x6190",
  "fixed-value-assignment:5",
  "fixed-value-assignment:5",
  "memory-read-from-address",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "conditional-branching-on-value",
  "unconditional-jumps-present",
  "loop-with-counter",
  "loop-counter-pattern:decrementing",
  "inferred-algorithm:data-validation",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_1D14C:
    PUSH.W {R4-R11,LR}
    MOV R4, #0x56190
    MOV R6, R1
    SUB SP, SP, #0x2C
    MOV R11, R2
    LDR R1, [R4]
    ADD.W R2, R0, #0x400
    STR R4, [SP,#0x50+var_3C]
    ADD.W R10, R0, #0x1000
    STR R2, [SP,#0x50+var_48]
    MOV R8, R3
    ADD.W R2, R0, #0x800
    STR R0, [SP,#0x50+var_50]
    STR R2, [SP,#0x50+var_44]
    ADD.W R2, R0, #0xC00
    STR R1, [SP,#0x50+var_2C]
    STR R2, [SP,#0x50+var_40]
    LDRSH.W R7, [SP,#0x50+arg_0]
    CMP R3, #0
    BEQ.W loc_1D59C
loc_1D188:
    MOVS R4, #0
    MOV R5, R10
    MOV R9, R4
loc_1D18E:
    MOV R0, R9
    MOV R1, R11
    BL sub_389DC
    LDR R4, [R5]
    ADD.W R0, R9, #1
    LDRB R3, [R6,R1]
    MOV R1, R11
    EOR.W R4, R4, R3,LSL#24
    STR R4, [R5]
    BL sub_389DC
    ADD.W R0, R9, #2
    LDRB R3, [R6,R1]
    MOV R1, R11
    EOR.W R4, R4, R3,LSL#16
    STR R4, [R5]
    BL sub_389DC
    ADD.W R0, R9, #3
    ADD.W R9, R9, #4
    LDRB R3, [R6,R1]
    MOV R1, R11
    EOR.W R4, R4, R3,LSL#8
    STR R4, [R5]
    BL sub_389DC
    CMP.W R9, #0x48
    LDRB R3, [R6,R1]
    EOR.W R4, R4, R3
    STR.W R4, [R5],#4
    BNE loc_1D18E
loc_1D1E2:
    MOVS R5, #0
    MOV R4, R5
    MOV R9, R5
loc_1D1E8:
    MOV R0, R5
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #3
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    MOV.W R11, R3,LSL#24
    BL sub_389DC
    ADDS R0, R5, #1
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #2
    EOR.W R6, R11, R6
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R3,LSL#16
    BL sub_389DC
    ADDS R0, R5, #4
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R3,LSL#8
    EOR.W R6, R6, R9
    STR R6, [SP,#0x50+var_38]
    BL sub_389DC
    ADDS R0, R5, #5
    LDRB.W R9, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #7
    MOV.W R9, R9,LSL#24
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    ORR.W R9, R9, R3,LSL#16
    BL sub_389DC
    ADDS R0, R5, #6
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    EOR.W R9, R9, R3
    BL sub_389DC
    LDR R3, [SP,#0x50+var_50]
    MOV R0, R6
    ADD R2, SP, #0x50+var_38
    LDRB.W R1, [R8,R1]
    ORR.W R1, R9, R1,LSL#8
    EORS R1, R4
    STR R1, [SP,#0x50+var_34]
    BL sub_1C44C
    LDR.W R9, [SP,#0x50+var_38]
    ADD.W R3, R10, R5
    LDR R4, [SP,#0x50+var_34]
    STR.W R9, [R10,R5]
    ADDS R5, #8
    CMP R5, #0x48
    STR R4, [R3,#4]
    BNE loc_1D1E8
loc_1D292:
    LDR.W R10, [SP,#0x50+var_50]
    MOV R3, R9
loc_1D298:
    MOV R0, R5
    MOV R1, R7
    STR R3, [SP,#0x50+var_4C]
    BL sub_389DC
    ADDS R0, R5, #3
    MOV R9, R5
    LDRB.W R11, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #1
    MOV.W R6, R11,LSL#24
    LDRB.W R11, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #2
    EOR.W R11, R6, R11
    ADDS R5, #8
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    LDR R3, [SP,#0x50+var_4C]
    ADD.W R0, R9, #4
    ORR.W R11, R11, R6,LSL#16
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    ORR.W R6, R11, R6,LSL#8
    EORS R6, R3
    STR R6, [SP,#0x50+var_38]
    BL sub_389DC
    ADD.W R0, R9, #5
    LDRB.W R11, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    ADD.W R0, R9, #7
    MOV.W R11, R11,LSL#24
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    ORR.W R11, R11, R3,LSL#16
    BL sub_389DC
    ADD.W R0, R9, #6
    LDRB.W R9, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    MOV R3, R10
    EOR.W R9, R11, R9
    ADD R2, SP, #0x50+var_38
    MOV R0, R6
    LDRB.W R1, [R8,R1]
    ORR.W R1, R9, R1,LSL#8
    EORS R1, R4
    STR R1, [SP,#0x50+var_34]
    BL sub_1C44C
    LDR R3, [SP,#0x50+var_38]
    LDR R4, [SP,#0x50+var_34]
    ADD.W R2, R10, R5
    CMP.W R5, #0x448
    STR.W R3, [R2,#-0x50]
    STR.W R4, [R2,#-0x4C]
    BNE loc_1D298
loc_1D350:
    LDR.W R10, [SP,#0x50+var_48]
    MOV R9, R3
loc_1D356:
    MOV R0, R5
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #3
    MOV R11, R5
    ADD.W R10, R10, #8
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    LSLS R2, R6, #0x18
    STR R2, [SP,#0x50+var_4C]
    BL sub_389DC
    LDR R2, [SP,#0x50+var_4C]
    ADDS R0, R5, #1
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    EORS R6, R2
    BL sub_389DC
    ADDS R0, R5, #2
    ADDS R5, #8
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R2,LSL#16
    BL sub_389DC
    ADD.W R0, R11, #4
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R2,LSL#8
    EOR.W R6, R6, R9
    STR R6, [SP,#0x50+var_38]
    BL sub_389DC
    ADD.W R0, R11, #5
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    MOV.W R9, R3,LSL#24
    BL sub_389DC
    ADD.W R0, R11, #7
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R9, R9, R2,LSL#16
    BL sub_389DC
    ADD.W R0, R11, #6
    LDRB.W R11, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    LDR R3, [SP,#0x50+var_50]
    EOR.W R11, R9, R11
    MOV R0, R6
    ADD R2, SP, #0x50+var_38
    LDRB.W R1, [R8,R1]
    ORR.W R1, R11, R1,LSL#8
    EORS R1, R4
    STR R1, [SP,#0x50+var_34]
    BL sub_1C44C
    LDR.W R9, [SP,#0x50+var_38]
    LDR R4, [SP,#0x50+var_34]
    MOVW R3, #0x848
    CMP R5, R3
    STR.W R9, [R10,#-8]
    STR.W R4, [R10,#-4]
    BNE loc_1D356
loc_1D410:
    LDR.W R10, [SP,#0x50+var_44]
loc_1D414:
    MOV R0, R5
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #3
    MOV R11, R5
    ADD.W R10, R10, #8
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    LSLS R2, R6, #0x18
    STR R2, [SP,#0x50+var_4C]
    BL sub_389DC
    LDR R2, [SP,#0x50+var_4C]
    ADDS R0, R5, #1
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    EORS R6, R2
    BL sub_389DC
    ADDS R0, R5, #2
    ADDS R5, #8
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R2,LSL#16
    BL sub_389DC
    ADD.W R0, R11, #4
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R2,LSL#8
    EOR.W R6, R6, R9
    STR R6, [SP,#0x50+var_38]
    BL sub_389DC
    ADD.W R0, R11, #5
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    MOV.W R9, R3,LSL#24
    BL sub_389DC
    ADD.W R0, R11, #7
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R9, R9, R2,LSL#16
    BL sub_389DC
    ADD.W R0, R11, #6
    LDRB.W R11, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    LDR R3, [SP,#0x50+var_50]
    EOR.W R11, R9, R11
    MOV R0, R6
    ADD R2, SP, #0x50+var_38
    LDRB.W R1, [R8,R1]
    ORR.W R1, R11, R1,LSL#8
    EORS R1, R4
    STR R1, [SP,#0x50+var_34]
    BL sub_1C44C
    LDR.W R9, [SP,#0x50+var_38]
    LDR R4, [SP,#0x50+var_34]
    MOVW R3, #0xC48
    CMP R5, R3
    STR.W R9, [R10,#-8]
    STR.W R4, [R10,#-4]
    BNE loc_1D414
loc_1D4CE:
    LDR.W R10, [SP,#0x50+var_40]
loc_1D4D2:
    MOV R0, R5
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #3
    MOV R11, R5
    ADD.W R10, R10, #8
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    LSLS R2, R6, #0x18
    STR R2, [SP,#0x50+var_4C]
    BL sub_389DC
    LDR R2, [SP,#0x50+var_4C]
    ADDS R0, R5, #1
    LDRB.W R6, [R8,R1]
    MOV R1, R7
    EORS R6, R2
    BL sub_389DC
    ADDS R0, R5, #2
    ADDS R5, #8
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R2,LSL#16
    BL sub_389DC
    ADD.W R0, R11, #4
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R2,LSL#8
    EOR.W R6, R6, R9
    STR R6, [SP,#0x50+var_38]
    BL sub_389DC
    ADD.W R0, R11, #5
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    MOV.W R9, R3,LSL#24
    BL sub_389DC
    ADD.W R0, R11, #7
    LDRB.W R2, [R8,R1]
    MOV R1, R7
    ORR.W R9, R9, R2,LSL#16
    BL sub_389DC
    ADD.W R0, R11, #6
    LDRB.W R11, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    LDR R3, [SP,#0x50+var_50]
    EOR.W R11, R9, R11
    MOV R0, R6
    ADD R2, SP, #0x50+var_38
    LDRB.W R1, [R8,R1]
    ORR.W R1, R11, R1,LSL#8
    EORS R1, R4
    STR R1, [SP,#0x50+var_34]
    BL sub_1C44C
    LDR.W R9, [SP,#0x50+var_38]
    LDR R4, [SP,#0x50+var_34]
    MOVW R3, #0x1048
    CMP R5, R3
    STR.W R9, [R10,#-8]
    STR.W R4, [R10,#-4]
    BNE loc_1D4D2
loc_1D58C:
    LDR R3, [SP,#0x50+var_3C]
    LDR R2, [SP,#0x50+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE loc_1D5A8
loc_1D596:
    ADD SP, SP, #0x2C
    POP.W {R4-R11,PC}
loc_1D59C:
    STRB.W R3, [SP,#0x50+var_30]
    ADD.W R8, SP, #0x50+var_30
    MOVS R7, #1
    B loc_1D188
loc_1D5A8:
    BLX __stack_chk_fail
```
Output: sub_389DC
    ADDS R0, R5, #2
    EOR.W R6, R6, R11
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R3,LSL#16
    BL sub_389DC
    ADDS R0, R5, #4
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    ORR.W R6, R6, R3,LSL#8
    EOR.W R6, R6, R9
    STR R6, [SP,#0x50+var_38]
    BL sub_389DC
    ADDS R0, R5, #5
    LDRB.W R9, [R8,R1]
    MOV R1, R7
    BL sub_389DC
    ADDS R0, R5, #7
    MOV.W R9, R9,LSL#24
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    ORR.W R9, R9, R3,LSL#16
    BL sub_389DC
    ADDS R0, R5, #6
    LDRB.W R3, [R8,R1]
    MOV R1, R7
    EOR.W R9, R9, R3
    BL sub_389DC
    LDR R3, [SP,#0x50+var_50]
    MOV R0, R6
    ADD R2, SP, #0x50+var_38
    LDRB.W R1, [R8,R1]
    ORR.W R1, R9, R1,LSL#8
    EORS R1, R4
    STR R1, [SP,#0x50+var_34]
    BL sub_1C44C
    LDR.W R9, [SP,#0x50+var_38]
    ADD.W R3, R10, R5
    LDR R4, [SP,#0x50+var_34]
    STR.W R9, [R10,R5]
    ADDS R5, #8
    CMP R5, #0x48
    STR R4, [R3,#4]
    BNE loc_1D298
    LDR.W R3, [SP,#0x50+var_50]
    LDR.W R4, [SP,#0x50+var_34]
    STR W4, [R3]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #1
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #2
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #3
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #4
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #5
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #6
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #7
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #8
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var_34]
    ADD.W R4, R4, #9
    STR W4, [R3,#4]
    LDR.W R4, [SP,#0x50+var
############
```assembly
loc_568D4:
    IMPORT 
```
Output:```json
[]
```<|im_end|>
############
```assembly
loc_1F08C:
    PUSH.W {R4-R10,LR}
    ADD.W R8, R0, #2
    LDRB R3, [R0]
    LDRB.W R9, [R0,#1]
    ADD.W R9, R9, R3,LSL#8
    ADD.W R9, R9, #7
    MOV.W R9, R9,ASR#3
    ADD.W R3, R9, #1
    CMP R1, R3
    BLE loc_1F14A
loc_1F0AE:
    CMP R2, #0
    BEQ loc_1F142
loc_1F0B2:
    ADD.W R5, R9, #3
    MOV R6, R0
    MOVS R1, #4
    MOV R7, R2
    ASRS R5, R5, #2
    ADDS R0, R5, #1
    MOV.W R10, R0,LSL#2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R10
    MOV R4, R0
    BLX memset
    STR R5, [R4]
    CBZ R5, loc_1F0E2
loc_1F0D6:
    SUB.W R2, R10, #4
    MOVS R1, #0
    ADDS R0, R4, #4
    BLX memset
loc_1F0E2:
    ADD.W R0, R9, #0xFFFFFFFF
    MOV R12, R8
    MOV.W LR, R0,LSL#3
    CMP.W R9, #0
    BEQ loc_1F116
loc_1F0F2:
    ASRS R2, R0, #2
    LDRB.W R1, [R12],#1
    ADDS R2, #1
    AND.W R3, LR, #0x1F
    SUBS R0, #1
    SUB.W LR, LR, #8
    LDR.W R5, [R4,R2,LSL#2]
    LSL.W R3, R1, R3
    ORRS R3, R5
    STR.W R3, [R4,R2,LSL#2]
    ADDS R3, R0, #1
    BNE loc_1F0F2
loc_1F116:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1F136
loc_1F11C:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBZ R1, loc_1F12E
loc_1F126:
    B loc_1F136
loc_1F128:
    LDR.W R1, [R2,#-4]!
    CBNZ R1, loc_1F136
loc_1F12E:
    SUBS R3, #1
    STR R3, [R4]
    CMP R3, #1
    BNE loc_1F128
loc_1F136:
    ADD R9, R8
    STR R4, [R7]
    SUB.W R0, R9, R6
    POP.W {R4-R10,PC}
loc_1F142:
    ADD.W R0, R9, #2
    POP.W {R4-R10,PC}
loc_1F14A:
    MOV.W R0, #0xFFFFFFFF
    POP.W {R4-R10,PC}
loc_1F152:
    MOV.W R0, #0xFFFFFFFF
    BX LR
```
Output:```json
[
  "return-type:integer",
  "Argument-count:3",
  "Arg0-type:pointer",
  "Arg1-type:integer",
  "Arg2-type:integer",
  "Calling-convention-hint:callee-saves-registers",
  "Calling-convention-hint:registers-for-args",
  "Calling-convention-hint:return-via-register",
  "Stack-arg-use:true",
  "Standard-calling-convention-used",
  "Stack-frame-management-present",
  "Explicit-stack-allocation-size:0x10",
  "Callee-saves-registers-present",
  "Standard-function-return",
  "Conditional-branching-on-input",
  "Unconditional-jumps-present",
  "External-function-calls-present",
  "External-call-type:data-processing-helper (memset)",
  "Integer-size-hint:32-bit",
  "Byte-level-operations-present",
  "Bitwise-operations-shift-left",
  "Bitwise-operations-shift-right",
  "Bitwise-operations-OR",
  "Bitwise-operations-AND-clear",
  "Bitwise-mask-values-present:0x1F",
  "Fixed-value-comparisons-present",
  "Address-or-offset-constants-present",
  "Inferred-algorithm:data-processing-or-manipulation",
  "Inferred-algorithm:loop-counter-patterns",
  "Inferred-algorithm:array-access-or-modification",
  "Inferred-algorithm:condition-based-flow-control",
  "Inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_35A34:
    PUSH {LR}
    SUB SP, SP, #0xC
    MOVS R3, #0
    STR R3, [SP,#0x10+var_10]
    BL sub_358D0
    ADD SP, SP, #0xC
    POP.W {PC}
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0xC",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_358D0)",
  "integer-size-hint:32-bit",
  "fixed-value-assignment:0",
  "memory-write-to-stack-offset",
  "inferred-algorithm:simple-function-invocation-or-setup",
  "inferred-algorithm:resource-management"
]
```<|im_end|>
############
```assembly
loc_24A8C:
    PUSH.W {R3-R9,LR}
    MOV R4, R0
    LDR R3, [R0]
    LDR R5, [R3]
    CMP R5, #0
    BNE loc_24B36
loc_24A9A:
    LDR R2, [R0,#4]
    CMP R2, #0
    BEQ loc_24B88
loc_24AA0:
    LDR R2, [R0,#8]
    CMP R2, #0
    BEQ loc_24B88
loc_24AA6:
    LDR R1, [R0,#0xC]
    CMP R1, #0
    BEQ loc_24B30
loc_24AAC:
    LDR R2, [R3,#0x10]
    MOV R0, R1
    BL sub_1EAC0
    LDR R3, [R4]
    LDR R1, [R3,#0x10]
    MOV R7, R0
    BL sub_20228
    MOV R6, R0
    CMP R0, #0
    BEQ loc_24B9A
loc_24AC4:
    LDR R3, [R4]
    MOV R1, R0
    LDR R0, [R4,#4]
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R9, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R3, [R4]
    LDR R1, [R4,#0xC]
    MOV R0, R7
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R8, R0
    MOV R0, R7
    BL sub_1E6B0
    LDR R3, [R4]
    MOV R0, R8
    LDR R1, [R3,#0x10]
    BL sub_20228
    MOV R6, R0
    MOV R0, R8
    BL sub_1E6B0
    CMP R6, #0
    BEQ loc_24B8E
loc_24B02:
    LDR R3, [R4]
    MOV R1, R6
    LDR R0, [R4,#8]
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R7, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R0, [R4,#4]
    BL sub_1E6B0
    LDR R0, [R4,#8]
    STR.W R9, [R4,#4]
    BL sub_1E6B0
    STR R7, [R4,#8]
    LDR R0, [R4,#0xC]
    BL sub_1E6B0
    STR R5, [R4,#0xC]
loc_24B30:
    MOVS R0, #1
    POP.W {R3-R9,PC}
loc_24B36:
    CMP R5, #1
    BEQ loc_24B48
loc_24B3A:
    SUB.W R0, R5, #2
    CLZ.W R0, R0
    LSRS R0, R0, #5
    POP.W {R3-R9,PC}
loc_24B48:
    LDR R2, [R0,#4]
    CBZ R2, loc_24B88
loc_24B4C:
    LDR R0, [R0,#0xC]
    CMP R0, #0
    BEQ loc_24B30
loc_24B52:
    LDR R1, [R3,#0x10]
    BL sub_20228
    MOV R6, R0
    CBZ R0, loc_24B88
loc_24B5C:
    LDR R3, [R4]
    MOV R1, R0
    LDR R0, [R4,#4]
    LDR R2, [R3,#0x10]
    BL sub_1EAC0
    MOV R7, R0
    MOV R0, R6
    BL sub_1E6B0
    LDR R0, [R4,#0xC]
    BL sub_1E6B0
    MOVS R3, #0
    LDR R0, [R4,#4]
    STR R3, [R4,#0xC]
    BL sub_1E6B0
    STR R7, [R4,#4]
    MOV R0, R5
    POP.W {R3-R9,PC}
loc_24B88:
    MOVS R0, #0
    POP.W {R3-R9,PC}
loc_24B8E:
    MOV R0, R9
    BL sub_1E6B0
    MOV R0, R6
    POP.W {R3-R9,PC}
loc_24B9A:
    MOV R0, R7
    BL sub_1E6B0
    MOV R0, R6
    POP.W {R3-R9,PC}
```
Output:```json
[
  "return-type:integer",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (sub_1EAC0)",
  "external-call-type:data-processing-helper (sub_20228)",
  "external-call-type:data-processing-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-read-from-input-parameter-offset:10",
  "memory-write-to-stack-offset",
  "memory-read-from-stack-offset",
  "fixed-value-comparison:0",
  "fixed-value-assignment:1",
  "fixed-value-assignment:2",
  "fixed-value-assignment:0",
  "fixed-value-assignment:0",
  "address-or-offset-constant:sub_1EAC0",
  "address-or-offset-constant:sub_20228",
  "address-or-offset-constant:sub_1E6B0",
  "inferred-algorithm:conditional-execution-or-dispatch",
  "inferred-algorithm:data-processing-loop",
  "inferred-algorithm:resource-management",
  "inferred-algorithm:state-update-or-reset"
]
```<|im_end|>
############
```assembly
loc_133B8:
    PUSH {R4,R5,LR}
    MOVW R5, #0x6190
    MOVW R4, #0x97F0
    MOVT.W R5, #5
    MOVT.W R4, #3
    SUB SP, SP, #0x14
    LDR R3, [R5]
    LDR.W R2, [R4,R1,LSL#2]
    STR R3, [SP,#0x20+var_14]
    CBNZ R2, loc_13400
loc_133D6:
    ADD.W R3, R4, R1,LSL#2
    LDR.W R3, [R3,#0x2E0]
    CMP R3, #2
    BNE loc_1343C
loc_133E2:
    ADD R3, SP, #0x20+var_10
    LDR R0, [R0]
    STR.W R1, [R3,#-0xC]!
    MOV R1, R3
    BL sub_35A34
    CBZ R0, loc_13420
loc_133F2:
    LDR R2, [SP,#0x20+var_14]
    LDR R3, [R5]
    LDR R0, [R0,#8]
    CMP R2, R3
    BNE loc_1341C
loc_133FC:
    ADD SP, SP, #0x14
    POP {R4,R5,PC}
loc_13400:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9EFC
    ADDW R3, R4, #0x5E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOVW R2, #0x123
    BLX __assert_fail
loc_1341C:
    BLX __stack_chk_fail
loc_13420:
    MOVW R1, #0x9EF4
    MOVW R0, #0xA004
    ADDW R3, R4, #0x5E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOVW R2, #0x127
    BLX __assert_fail
loc_1343C:
    MOVW R1, #0x9EF4
    MOVW R0, #0x9F64
    ADDW R3, R4, #0x5E4
    MOVT.W R1, #3
    MOVT.W R0, #3
    MOV.W R2, #0x124
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x14",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "external-call-type:error-or-alternative-path (__stack_chk_fail)",
  "integer-size-hint:32-bit",
  "magic-number:0x6190",
  "magic-number:0x97F0",
  "magic-number:0x123",
  "magic-number:0x124",
  "magic-number:0x127",
  "magic-number:0x5E4",
  "magic-number:0x9EF4",
  "magic-number:0x9EFC",
  "magic-number:0x9F64",
  "magic-number:0xA004",
  "address-or-offset-constant:unk_address",
  "address-or-offset-constant:sub_35A34",
  "address-or-offset-constant:__assert_fail",
  "address-or-offset-constant:__stack_chk_fail",
  "inferred-algorithm:assertion-check",
  "inferred-algorithm:data-validation",
  "inferred-algorithm:control-flow-error-handling"
]
```<|im_end|>
############
```assembly
loc_1EE64:
    MOV R3, #0xFFFFFFE
    CMP R1, R3
    PUSH.W {R4-R8,LR}
    BHI loc_1EEFE
loc_1EE74:
    ADDS R7, R1, #3
    MOV R3, #0x3FFFFFE
    MOV R6, R1
    ASRS R7, R7, #2
    CMP R7, R3
    BGT loc_1EF18
loc_1EE86:
    MOV R5, R0
    ADDS R0, R7, #1
    MOVS R1, #4
    MOV.W R8, R0,LSL#2
    BL sub_193B8
    MOVS R1, #0
    MOV R2, R8
    MOV R4, R0
    BLX memset
    STR R7, [R4]
    CBZ R7, loc_1EEAE
loc_1EEA2:
    SUB.W R2, R8, #4
    MOVS R1, #0
    ADDS R0, R4, #4
    BLX memset
loc_1EEAE:
    MOVS R2, #0
    CBZ R6, loc_1EED6
loc_1EEB2:
    ASRS R1, R2, #2
    LDRB.W R3, [R5],#1
    ADDS R1, #1
    LSLS R7, R2, #3
    ADDS R2, #1
    AND.W R7, R7, #0x1F
    LDR.W R0, [R4,R1,LSL#2]
    CMP R6, R2
    LSL.W R3, R3, R7
    ORR.W R3, R3, R0
    STR.W R3, [R4,R1,LSL#2]
    BNE loc_1EEB2
loc_1EED6:
    LDR R3, [R4]
    CMP R3, #1
    BLS loc_1EEF8
loc_1EEDC:
    LDR.W R1, [R4,R3,LSL#2]
    ADD.W R2, R4, R3,LSL#2
    CBNZ R1, loc_1EEF8
loc_1EEE6:
    SUBS R3, #1
    B loc_1EEF2
loc_1EEEA:
    LDR.W R1, [R2,#-4]!
    SUBS R3, #1
    CBNZ R1, loc_1EEF8
loc_1EEF2:
    CMP R3, #1
    STR R3, [R4]
    BNE loc_1EEEA
loc_1EEF8:
    MOV R0, R4
    POP.W {R4-R8,PC}
loc_1EEFE:
    MOVW R1, #0xE76C
    MOVW R0, #0xE800
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aBignumFromByte_0
    MOVW R2, #0x599
    BLX __assert_fail
loc_1EF18:
    BL sub_115CC
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x10",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-compare",
  "loop-with-counter",
  "loop-counter-pattern:decrementing",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (memset)",
  "external-call-type:data-processing-helper (__assert_fail)",
  "integer-size-hint:32-bit",
  "fixed-value-comparison:0xFFFFFFE",
  "fixed-value-comparison:0x3FFFFFE",
  "fixed-value-assignment:0",
  "fixed-value-assignment:4",
  "fixed-value-assignment:1",
  "fixed-value-assignment:0x599",
  "address-or-offset-constant:aBignumFromByte_0",
  "address-or-offset-constant:sub_193B8",
  "address-or-offset-constant:sub_115CC",
  "address-or-offset-constant:__assert_fail",
  "bitwise-operation-shift-left",
  "bitwise-operation-shift-right",
  "bitwise-operation-or",
  "bitwise-operation-and-clear",
  "bitwise-mask:0x1F",
  "inferred-algorithm:bignum-conversion-or-processing",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:array-manipulation",
  "inferred-algorithm:loop-based-data-processing"
]
```<|im_end|>
############
```assembly
loc_17BA6:
    MOV R3, #0x3F520
    CMP R2, R3
    BNE.W loc_182E2
loc_17BB4:
    LDRB.W R3, [R11,#1]
    LDRB.W R1, [R11]
    LDRB.W R5, [R11,#3]
    LSLS R3, R3, #0x10
    LDRB.W R2, [R11,#2]
    ORR.W R3, R3, R1,LSL#24
    LDR R6, [SP,#0x120+var_E8]
    ORRS R5, R3
    ORR.W R5, R5, R2,LSL#8
    ADDS R5, #4
    SUBS R7, R6, R5
    CMP R7, #3
    BGT loc_17C3A
loc_17BDA:
    MOV.W R10, #0xFFFFFFFF
    MOVS R4, #0
loc_17BE0:
    ADD R5, R7
    SUBS R7, R6, R5
    CMP R7, #3
    BGT.W loc_18048
loc_17BEA:
    MOV.W R8, #0xFFFFFFFF
    MOVS R3, #0
    STR R3, [SP,#0x120+var_100]
loc_17BF2:
    ADD R5, R7
    SUB.W R9, R6, R5
    CMP.W R9, #3
    BGT.W loc_18018
loc_17C00:
    MOV.W R7, #0xFFFFFFFF
    MOVS R3, #0
    STR R3, [SP,#0x120+var_114]
loc_17C08:
    ADD R9, R5
    SUB.W R6, R6, R9
    CMP R6, #3
    BGT.W loc_17FE2
loc_17C14:
    MOV.W R9, #0xFFFFFFFF
    MOVS R5, #0
loc_17C1A:
    LDR R6, [SP,#0x120+var_E4]
    CMP R6, #3
    BGT loc_17C6A
loc_17C20:
    MOVW R1, #0xA624
    MOVW R0, #0xA824
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aSshcomWrite
    MOVW R2, #0x9FE
    BLX __assert_fail
loc_17C3A:
    ADD.W R4, R11, R5
    LDRB.W R1, [R11,R5]
    LDRB R3, [R4,#1]
    LDRB R2, [R4,#3]
    LDRB R0, [R4,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R10, R0, #0
    BLT loc_17C66
loc_17C5E:
    SUBS R3, R7, #3
    CMP R10, R3
    BLT.W loc_18090
loc_17C66:
    LDR R6, [SP,#0x120+var_E8]
    B loc_17BDA
loc_17C6A:
    LDR R1, [SP,#0x120+var_10C]
    LDRB R3, [R1,#1]
    LDRB R0, [R1]
    LDRB R2, [R1,#3]
    LSLS R3, R3, #0x10
    LDRB R1, [R1,#2]
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    CMP R0, #0
    BLT loc_17C20
loc_17C8A:
    SUBS R6, #3
    CMP R0, R6
    BGE loc_17C20
loc_17C90:
    LDR R3, [SP,#0x120+var_10C]
    ADDS R3, #4
    CMP R5, #0
    BEQ loc_17C20
loc_17C98:
    CMP R3, #0
    BEQ loc_17C20
loc_17C9C:
    LDR R2, [SP,#0x120+var_114]
    MOV R6, #0x3ACB0
    STR R4, [SP,#0x120+var_E0]
    STR R7, [SP,#0x120+var_D4]
    MOVS R4, #1
    STR R2, [SP,#0x120+var_D8]
    MOVS R7, #5
    LDR R2, [SP,#0x120+var_100]
    STR.W R10, [SP,#0x120+var_DC]
    STR.W R8, [SP,#0x120+var_CC]
    STR R2, [SP,#0x120+var_D0]
    STR R5, [SP,#0x120+var_C8]
    STR.W R9, [SP,#0x120+var_C4]
    STR R3, [SP,#0x120+var_C0]
    STR R0, [SP,#0x120+var_BC]
loc_17CC6:
    LDR R2, [SP,#0x120+var_D4]
    CMP R7, #6
    LDR R1, [SP,#0x120+var_DC]
    LDR R3, [SP,#0x120+var_CC]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_C4]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_BC]
    ADD R2, R1
    ADD R3, R2
    ADD.W R3, R3, #0x214
    STR R3, [SP,#0x120+var_114]
    BNE loc_17CEE
loc_17CE2:
    MOV R2, R3
    LDR R3, [SP,#0x120+var_B4]
    ADDS R3, #4
    ADD R2, R3
    STR R2, [SP,#0x120+var_114]
    MOV R3, R2
loc_17CEE:
    MOVS R1, #1
    MOV R0, R3
    BL sub_193B8
    MOVS R2, #0x3F
    MOVS R3, #0x6F
    MOV R5, R0
    STRB R2, [R0]
    STRB R3, [R0,#1]
    MOVS R2, #0xF9
    MOVS R3, #0xEB
    STRB R2, [R0,#2]
    STRB R3, [R5,#3]
    MOV R0, R6
    BLX strlen
    MOV R1, R6
    MOV R2, R0
    ASRS R3, R0, #0x18
    STRB R0, [R5,#0xB]
    ASRS R0, R0, #0x10
    STRB R3, [R5,#8]
    ASRS R3, R2, #8
    STRB R0, [R5,#9]
    ADD.W R0, R5, #0xC
    STRB R3, [R5,#0xA]
    ADD.W R9, R2, #0xC
    BLX memcpy
    LDR R3, [SP,#0x120+var_110]
    CMP R3, #0
    BEQ.W loc_180A6
loc_17D34:
    MOV.W LR, #8
    MOV R1, #a3desCbc
    MOV R2, LR
    MOV.W R8, #0xC
loc_17D46:
    ADD.W R3, R5, R9
    MOVS R6, #0
    ADD R8, R9
    STRB.W R6, [R5,R9]
    ADDS R0, R3, #4
    STRB R6, [R3,#1]
    STRB R6, [R3,#2]
    ADD.W R9, R8, #8
    STRB.W LR, [R3,#3]
    BLX memcpy
    CMP R4, #0
    BEQ.W loc_1809A
loc_17D6A:
    ADD.W R3, R5, R9
    ADD.W R4, R8, #0xC
    STRB.W R6, [R5,R9]
    STRB R6, [R3,#1]
    STRB R6, [R3,#2]
    STRB R6, [R3,#3]
loc_17D7C:
    ADD.W R10, SP, #0x120+var_E0
    ADD.W R7, R10, R7,LSL#3
loc_17D84:
    LDR.W R6, [R10,#4]
    ADD.W LR, R5, R4
    LDR.W R1, [R10]
    LSLS R3, R6, #3
    SUBS R3, #1
    CMP R3, #0
    BLE loc_17DB6
loc_17D98:
    LDRB R2, [R1]
    LSLS R0, R2, #0x18
    BMI loc_17DB6
loc_17D9E:
    MOVS R0, #7
loc_17DA0:
    SUBS R3, #1
    CBNZ R0, loc_17DA8
loc_17DA4:
    ADDS R1, #1
    SUBS R6, #1
loc_17DA8:
    CBZ R3, loc_17DB6
loc_17DAA:
    LDRB R2, [R1]
    AND.W R0, R3, #7
    ASRS R2, R0
    LSLS R2, R2, #0x1F
    BPL loc_17DA0
loc_17DB6:
    ADDS R3, #1
    ADD.W R0, LR, #4
    STRB.W R3, [LR,#3]
    ADD.W R10, R10, #8
    ASRS R2, R3, #0x18
    STRB.W R2, [LR]
    ASRS R2, R3, #0x10
    ASRS R3, R3, #8
    STRB.W R2, [LR,#1]
    MOV R2, R6
    STRB.W R3, [LR,#2]
    ADDS R6, #4
    BLX memcpy
    CMP R10, R7
    ADD R4, R6
    BNE loc_17D84
loc_17DE4:
    SUB.W R3, R4, R9
    ADD.W R7, R8, #4
    ADD.W R9, R5, R8
    UXTB R2, R4
    ASRS R1, R3, #0x18
    STRB R1, [R5,R7]
    ASRS R1, R3, #0x10
    STRB.W R1, [R9,#5]
    RSB.W R1, R8, #0xF8
    ASRS R3, R3, #8
    STRB.W R3, [R9,#6]
    MOV R3, R1
    ADD R3, R2
    STRB.W R3, [R9,#7]
    ADDS R3, R5, R7
    STR R3, [SP,#0x120+var_100]
    LDR R3, [SP,#0x120+var_110]
    CMP R3, #0
    BEQ.W loc_180A2
loc_17E1A:
    SUBS R3, R7, R4
    AND.W R3, R3, #7
    SUBS R2, R3, #1
    STR R2, [SP,#0x120+var_F8]
    CBZ R3, loc_17E42
loc_17E26:
    ADDS R6, R3, R4
    ADD.W R10, R5, R4
    ADD R6, R5
loc_17E2E:
    BL sub_2D1F4
    STRB.W R0, [R10],#1
    CMP R6, R10
    BNE loc_17E2E
loc_17E3A:
    LDR R3, [SP,#0x120+var_F8]
    ADDS R4, #1
    ADD R3, R4
    MOV R4, R3
loc_17E42:
    SUBS R7, R4, R7
    LSLS R3, R7, #0x1D
    IT 
    UXTBEQ R2, R4
    BNE.W loc_1831A
loc_17E4E:
    ASRS R3, R7, #0x18
    ASRS R1, R7, #8
    STRB.W R3, [R5,R8]
    ASRS R3, R7, #0x10
    STRB.W R1, [R9,#2]
    ASRS R1, R4, #0x10
    STRB.W R3, [R9,#1]
    ASRS R3, R4, #0x18
    STRB.W R7, [R9,#3]
    STRB R3, [R5,#4]
    ASRS R3, R4, #8
    STRB R3, [R5,#6]
    LDR R3, [SP,#0x120+var_114]
    STRB R2, [R5,#7]
    CMP R4, R3
    STRB R1, [R5,#5]
    BGE.W loc_18300
loc_17E7A:
    LDR R6, [SP,#0x120+var_110]
    CMP R6, #0
    BEQ loc_17EE8
loc_17E80:
    ADD R0, SP, #0x120+var_B0
    BL sub_28FF0
    MOV R0, R6
    BLX strlen
    MOV R1, R6
    MOV R2, R0
    ADD R0, SP, #0x120+var_B0
    BL sub_29024
    ADD R1, SP, #0x120+var_B0
    ADD R0, SP, #0x120+var_4C
    BL sub_29130
    ADD R0, SP, #0x120+var_B0
    BL sub_28FF0
    MOV R0, R6
    BLX strlen
    MOV R1, R6
    MOVS R6, #0
    MOV R2, R0
    ADD R0, SP, #0x120+var_B0
    BL sub_29024
    MOVS R2, #0x10
    ADD R1, SP, #0x120+var_4C
    ADD R0, SP, #0x120+var_B0
    BL sub_29024
    ADD R1, SP, #0x120+var_B0
    ADD R0, SP, #0x120+var_3C
    BL sub_29130
    MOV R3, R7
    LDR R2, [SP,#0x120+var_100]
    ADD R0, SP, #0x120+var_4C
    ADD R1, SP, #0x120+var_54
    STR R6, [SP,#0x120+var_50]
    STR R6, [SP,#0x120+var_54]
    BL sub_22D64
    ADD R0, SP, #0x120+var_B0
    MOVS R1, #0x5C
    BL sub_194E4
    ADD R0, SP, #0x120+var_4C
    MOVS R1, #0x20
    BL sub_194E4
loc_17EE8:
    LDR R0, [SP,#0x120+var_108]
    MOVW R1, #0xA84C
    MOVS R2, #1
    MOVT.W R1, #3
    BL sub_3694C
    MOV R6, R0
    CMP R0, #0
    BEQ.W loc_1809E
loc_17F00:
    MOV R3, R6
    MOVS R2, #0x2B
    MOVS R1, #1
    MOV R0, #aBeginSsh2Encry_0
    MOVW R7, #0xAD7C
    BLX fwrite
    MOV R3, R6
    MOVW R0, #0xAD70
    MOVS R2, #0xA
    MOVT.W R0, #3
    MOVS R1, #1
    BLX fwrite
    LDR R3, [SP,#0x120+var_FC]
    MOVT.W R7, #3
    MOV.W R9, #0x3C
    LDR.W R8, [R3,#8]
    MOV R3, R7
    MOV R7, R8
    MOV R8, R3
    B loc_17F58
loc_17F44:
    STR R7, [SP,#0x120+var_120]
    MOV R3, R9
    MOV R2, R8
    MOVS R1, #1
    MOV R0, R6
    ADD R7, R9
    BLX __fprintf_chk
    MOV.W R9, #0x46
loc_17F58:
    MOV R0, R7
    BLX strlen
    CMP R9, R0
    BLT loc_17F44
loc_17F62:
    MOV R3, R7
    MOVS R1, #1
    MOVW R2, #0x5558
    MOV R0, R6
    MOVT.W R2, #4
    MOV R7, R1
    BLX __fprintf_chk
    MOV R2, R4
    MOVS R3, #0x46
    MOV R1, R5
    MOV R0, R6
    BL sub_2C190
    MOV R3, R6
    MOVW R0, #0xAD84
    MOVS R2, #0x29
    MOVT.W R0, #3
    MOV R1, R7
    BLX fwrite
    MOV R0, R6
    BLX fclose
loc_17F9A:
    LDR R1, [SP,#0x120+var_114]
    MOV R0, R5
    BL sub_194E4
    MOV R0, R5
    BL sub_19494
    LDR R4, [SP,#0x120+var_10C]
    CBZ R4, loc_17FBA
loc_17FAC:
    MOV R0, R4
    LDR R1, [SP,#0x120+var_E4]
    BL sub_194E4
    MOV R0, R4
    BL sub_19494
loc_17FBA:
    CMP.W R11, #0
    BEQ loc_17FCE
loc_17FC0:
    MOV R0, R11
    LDR R1, [SP,#0x120+var_E8]
    BL sub_194E4
    MOV R0, R11
    BL sub_19494
loc_17FCE:
    LDR R3, [SP,#0x120+var_104]
    MOV R0, R7
    LDR R2, [SP,#0x120+var_2C]
    LDR R3, [R3]
    CMP R2, R3
    BNE.W loc_182FC
loc_17FDC:
    ADD SP, SP, #0xFC
    POP.W {R4-R11,PC}
loc_17FE2:
    ADD.W R5, R11, R9
    LDRB.W R0, [R11,R9]
    LDRB R3, [R5,#1]
    LDRB R2, [R5,#3]
    LDRB R1, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS.W R9, R0, #0
    BLT.W loc_17C14
loc_1800A:
    SUBS R6, #3
    CMP R9, R6
    IT 
    ADDLT R5, #4
    BGE.W loc_17C14
loc_18016:
    B loc_17C1A
loc_18018:
    ADD.W R6, R11, R5
    LDRB.W R0, [R11,R5]
    LDRB R3, [R6,#1]
    LDRB R2, [R6,#3]
    LDRB R1, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS R7, R0, #0
    BLT loc_18044
loc_1803C:
    SUB.W R3, R9, #3
    CMP R7, R3
    BLT loc_18084
loc_18044:
    LDR R6, [SP,#0x120+var_E8]
    B loc_17C00
loc_18048:
    ADD.W R6, R11, R5
    LDRB.W R0, [R11,R5]
    LDRB R3, [R6,#1]
    LDRB R2, [R6,#3]
    LDRB R1, [R6,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS.W R8, R0, #0
    BLT loc_18074
loc_1806E:
    SUBS R3, R7, #3
    CMP R8, R3
    BLT loc_18078
loc_18074:
    LDR R6, [SP,#0x120+var_E8]
    B loc_17BEA
loc_18078:
    ADDS R3, R6, #4
    ADD.W R7, R8, #4
    STR R3, [SP,#0x120+var_100]
    LDR R6, [SP,#0x120+var_E8]
    B loc_17BF2
loc_18084:
    ADDS R3, R6, #4
    ADD.W R9, R7, #4
    STR R3, [SP,#0x120+var_114]
    LDR R6, [SP,#0x120+var_E8]
    B loc_17C08
loc_18090:
    ADDS R4, #4
    ADD.W R7, R10, #4
    LDR R6, [SP,#0x120+var_E8]
    B loc_17BE0
loc_1809A:
    MOV R4, R9
    B loc_17D7C
loc_1809E:
    MOV R7, R6
    B loc_17F9A
loc_180A2:
    SUBS R7, R4, R7
    B loc_17E4E
loc_180A6:
    MOV.W LR, #4
    MOVW R1, #0xA584
    MOV R2, LR
    MOVT.W R1, #3
    MOV.W R8, #8
    B loc_17D46
loc_180BA:
    LDRB.W R1, [R11,#1]
    LDRB.W R2, [R11]
    LDRB.W R5, [R11,#2]
    LDRB.W R3, [R11,#3]
    LSLS R1, R1, #0x10
    ORR.W R1, R1, R2,LSL#24
    LDR R2, [SP,#0x120+var_E8]
    ORRS R3, R1
    ORR.W R3, R3, R5,LSL#8
    ADDS R5, R3, #4
    SUBS R6, R2, R5
    CMP R6, #3
    BGT loc_18150
loc_180E0:
    MOV.W R4, #0xFFFFFFFF
    MOVS R3, #0
    STR R3, [SP,#0x120+var_114]
loc_180E8:
    ADD R6, R5
    SUBS R5, R2, R6
    CMP R5, #3
    BGT.W loc_18288
loc_180F2:
    MOV.W R3, #0xFFFFFFFF
    STR R3, [SP,#0x120+var_100]
    MOVS R3, #0
    STR R3, [SP,#0x120+var_F8]
loc_180FC:
    LDR R5, [SP,#0x120+var_E4]
    CMP R5, #3
    ITT 
    MOVLE R3, R5
    MOVLE R6, #0
    BGT.W loc_18244
loc_1810A:
    MOV.W R8, #0xFFFFFFFF
    MOVS R2, #0
    STR R2, [SP,#0x120+var_F4]
loc_18112:
    CMP R6, #3
    BGT loc_18216
loc_18116:
    MOV.W R10, #0xFFFFFFFF
    MOVS R2, #0
    STR R2, [SP,#0x120+var_F0]
loc_1811E:
    ADD R6, R5
    SUBS R7, R3, R6
    CMP R7, #3
    BGT loc_181E8
loc_18126:
    MOV.W R9, #0xFFFFFFFF
    MOVS R2, #0
    STR R2, [SP,#0x120+var_EC]
loc_1812E:
    ADD R7, R6
    SUBS R6, R3, R7
    CMP R6, #3
    BGT loc_1817E
loc_18136:
    MOVW R1, #0xA624
    MOVW R0, #0xA80C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aSshcomWrite
    MOVW R2, #0x9E2
    BLX __assert_fail
loc_18150:
    ADD.W R7, R11, R5
    LDRB.W R1, [R11,R5]
    LDRB R3, [R7,#1]
    LDRB R2, [R7,#3]
    LDRB R0, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS R4, R0, #0
    BLT loc_1817A
loc_18172:
    SUBS R3, R6, #3
    CMP R4, R3
    BLT.W loc_182D8
loc_1817A:
    LDR R2, [SP,#0x120+var_E8]
    B loc_180E0
loc_1817E:
    LDR R3, [SP,#0x120+var_10C]
    ADDS R5, R3, R7
    LDRB R0, [R3,R7]
    LDRB R3, [R5,#1]
    LDRB R2, [R5,#3]
    LDRB R1, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    CMP R0, #0
    BLT loc_18136
loc_181A0:
    SUBS R6, #3
    CMP R0, R6
    BGE loc_18136
loc_181A6:
    LDR R3, [SP,#0x120+var_114]
    ADDS R5, #4
    CMP R3, #0
    BEQ loc_18136
loc_181AE:
    CMP R5, #0
    BEQ loc_18136
loc_181B2:
    STR R3, [SP,#0x120+var_E0]
    MOVW R6, #0xACD8
    LDR R3, [SP,#0x120+var_F4]
    MOVT.W R6, #3
    STR R4, [SP,#0x120+var_DC]
    MOVS R7, #6
    MOVS R4, #0
    STR.W R8, [SP,#0x120+var_D4]
    STR R3, [SP,#0x120+var_D8]
    LDR R3, [SP,#0x120+var_F8]
    STR R5, [SP,#0x120+var_C8]
    STR R0, [SP,#0x120+var_C4]
    STR R3, [SP,#0x120+var_D0]
    LDR R3, [SP,#0x120+var_100]
    STR.W R9, [SP,#0x120+var_BC]
    STR.W R10, [SP,#0x120+var_B4]
    STR R3, [SP,#0x120+var_CC]
    LDR R3, [SP,#0x120+var_EC]
    STR R3, [SP,#0x120+var_C0]
    LDR R3, [SP,#0x120+var_F0]
    STR R3, [SP,#0x120+var_B8]
    B loc_17CC6
loc_181E8:
    LDR R3, [SP,#0x120+var_10C]
    ADDS R5, R3, R6
    LDRB R0, [R3,R6]
    LDRB R3, [R5,#1]
    LDRB R2, [R5,#3]
    LDRB R1, [R5,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS.W R9, R0, #0
    BLT loc_18212
loc_1820C:
    SUBS R3, R7, #3
    CMP R9, R3
    BLT loc_182CC
loc_18212:
    LDR R3, [SP,#0x120+var_E4]
    B loc_18126
loc_18216:
    LDR R3, [SP,#0x120+var_10C]
    ADDS R7, R3, R5
    LDRB R0, [R3,R5]
    LDRB R3, [R7,#1]
    LDRB R2, [R7,#3]
    LDRB R1, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS.W R10, R0, #0
    BLT loc_18240
loc_1823A:
    SUBS R3, R6, #3
    CMP R10, R3
    BLT loc_182C0
loc_18240:
    LDR R3, [SP,#0x120+var_E4]
    B loc_18116
loc_18244:
    LDR R0, [SP,#0x120+var_10C]
    LDRB R3, [R0,#1]
    LDRB R1, [R0]
    LDRB R2, [R0,#3]
    LSLS R3, R3, #0x10
    LDRB R0, [R0,#2]
    ORR.W R3, R3, R1,LSL#24
    ORRS R3, R2
    ORR.W R0, R3, R0,LSL#8
    BL nullsub_2
    SUBS.W R8, R0, #0
    ITT 
    LDRLT R3, [SP,#0x120+var_E4]
    SUBLT R6, R3, R5
    BLT.W loc_1810A
loc_1826C:
    SUBS R3, R5, #3
    CMP R8, R3
    LDR R3, [SP,#0x120+var_E4]
    IT 
    SUBGE R6, R3, R5
    BGE.W loc_1810A
loc_1827A:
    LDR R2, [SP,#0x120+var_10C]
    ADD.W R5, R8, #4
    SUBS R6, R3, R5
    ADDS R2, #4
    STR R2, [SP,#0x120+var_F4]
    B loc_18112
loc_18288:
    ADD.W R7, R11, R6
    LDRB.W R0, [R11,R6]
    LDRB R3, [R7,#1]
    LDRB R2, [R7,#3]
    LDRB R1, [R7,#2]
    LSLS R3, R3, #0x10
    ORR.W R3, R3, R0,LSL#24
    ORR.W R0, R3, R2
    ORR.W R0, R0, R1,LSL#8
    BL nullsub_2
    SUBS R3, R0, #0
    STR R3, [SP,#0x120+var_100]
    BLT.W loc_180F2
loc_182B0:
    SUBS R5, #3
    CMP R3, R5
    ITT 
    ADDLT R3, R7, #4
    STRLT R3, [SP,#0x120+var_F8]
    BGE.W loc_180F2
loc_182BE:
    B loc_180FC
loc_182C0:
    ADDS R3, R7, #4
    ADD.W R6, R10, #4
    STR R3, [SP,#0x120+var_F0]
    LDR R3, [SP,#0x120+var_E4]
    B loc_1811E
loc_182CC:
    ADDS R3, R5, #4
    ADD.W R7, R9, #4
    STR R3, [SP,#0x120+var_EC]
    LDR R3, [SP,#0x120+var_E4]
    B loc_1812E
loc_182D8:
    ADDS R3, R7, #4
    ADDS R6, R4, #4
    STR R3, [SP,#0x120+var_114]
    LDR R2, [SP,#0x120+var_E8]
    B loc_180E8
loc_182E2:
    MOVW R1, #0xA624
    MOVW R0, #0xE83C
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aSshcomWrite
    MOVW R2, #0xA0A
    BLX __assert_fail
loc_182FC:
    BLX __stack_chk_fail
loc_18300:
    MOVW R1, #0xA624
    MOVW R0, #0xAD34
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aSshcomWrite
    MOVW R2, #0xA3D
    BLX __assert_fail
loc_1831A:
    MOVW R1, #0xA624
    MOVW R0, #0xAD10
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aSshcomWrite
    MOVW R2, #0xA37
    BLX __assert_fail
```
Output: STR R3, [SP,#0x120+var_B8]
    LDR R2, [SP,#0x120+var_D0]
    LDR R1, [SP,#0x120+var_C8]
    LDR R3, [SP,#0x120+var_C0]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_CA]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_CE]
    ADD R2, R1
    ADD R3, R2
    STR R3, [SP,#0x120+var_B4]
    LDR R2, [SP,#0x120+var_D8]
    LDR R1, [SP,#0x120+var_C4]
    LDR R3, [SP,#0x120+var_BC]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_CD]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_CF]
    ADD R2, R1
    ADD R3, R2
    STR R3, [SP,#0x120+var_B0]
    LDR R2, [SP,#0x120+var_DC]
    LDR R1, [SP,#0x120+var_CC]
    LDR R3, [SP,#0x120+var_BC]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_D0]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_CA]
    ADD R2, R1
    ADD R3, R2
    STR R3, [SP,#0x120+var_AC]
    LDR R2, [SP,#0x120+var_C8]
    LDR R1, [SP,#0x120+var_C0]
    LDR R3, [SP,#0x120+var_BC]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_CD]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_CF]
    ADD R2, R1
    ADD R3, R2
    STR R3, [SP,#0x120+var_A8]
    LDR R2, [SP,#0x120+var_C4]
    LDR R1, [SP,#0x120+var_BC]
    LDR R3, [SP,#0x120+var_CD]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_CF]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_CB]
    ADD R2, R1
    ADD R3, R2
    STR R3, [SP,#0x120+var_A4]
    LDR R2, [SP,#0x120+var_BC]
    LDR R1, [SP,#0x120+var_CD]
    LDR R3, [SP,#0x120+var_CF]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_CB]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_CC]
    ADD R2, R1
    ADD R3, R2
    STR R3, [SP,#0x120+var_A0]
    LDR R2, [SP,#0x120+var_CD]
    LDR R1, [SP,#0x120+var_CF]
    LDR R3, [SP,#0x120+var_CB]
    ADD R1, R2
    LDR R2, [SP,#0x120+var_CC]
    ADD R1, R3
    LDR R3, [SP,#0x120+var_CA]
    ADD R2, R1
    ADD R3, R2
    STR R3, [SP,#0x120+var_9C]
    LDR R2, [SP,#0x120+var_CF]

############
```assembly
loc_11174:
    BX PC
```
Output:```json
[
  "return-type:void",
  "argument-count:0",
  "calling-convention-hint:unspecified",
  "stack-arg-use:false",
  "standard-calling-convention-not-used",
  "stack-frame-management-absent",
  "explicit-stack-allocation-size:not-applicable",
  "callee-saves-registers-not-applicable",
  "standard-function-return-not-applicable",
  "conditional-branching-not-applicable",
  "unconditional-jumps-present",
  "external-function-calls-not-applicable",
  "integer-size-hint:not-applicable",
  "memory-access-not-applicable",
  "fixed-value-comparison:not-applicable",
  "address-or-offset-constant:PC",
  "inferred-algorithm:unspecified"
]
```<|im_end|>
############
```assembly
loc_115CC:
    PUSH {R3,LR}
    MOVW R1, #0xE76C
    MOVW R0, #0xE7A8
    MOVT.W R1, #3
    MOVT.W R0, #3
    LDR R3, =aNewbn
    MOVS R2, #0x2D
    BLX __assert_fail
```
Output:```json
[
  "return-type:void",
  "argument-count:3",
  "arg0-type:string-pointer",
  "arg1-type:integer",
  "arg2-type:integer",
  "arg3-type:integer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:true",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "external-function-calls-present",
  "external-call-type:error-or-alternative-path (__assert_fail)",
  "integer-size-hint:32-bit",
  "magic-number:0xE76C",
  "magic-number:0xE7A8",
  "magic-number:0x2D",
  "string-magic-number:aNewbn",
  "inferred-algorithm:error-handling",
  "inferred-algorithm:assertion-failure"
]
```<|im_end|>
############
```assembly
loc_11510:
    ADR R12, 0x11518
    ADD R12, R12, #0x44000
    LDR PC, [R12,#(fputs_ptr - 0x55518)]!
```
Output:```json
[
  "return-type:integer",
  "argument-count:2",
  "arg0-type:string-pointer",
  "arg1-type:file-pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "function-pointer-indirect-call",
  "external-function-calls-present",
  "external-call-type:data-processing-helper (fputs)",
  "address-or-offset-constant:0x11518",
  "address-or-offset-constant:0x44000",
  "address-or-offset-constant:fputs_ptr",
  "address-or-offset-constant:0x55518",
  "inferred-algorithm:stdio-output"
]
```<|im_end|>
############
```assembly
loc_264C4:
    CBZ R0, locret_264F4
loc_264C6:
    PUSH {R4,LR}
    MOV R4, R0
    LDR R0, [R0,#4]
    MOVS R3, #0
    STR R3, [R4]
    CBZ R0, loc_264D6
loc_264D2:
    BL sub_1E6B0
loc_264D6:
    LDR R0, [R4,#8]
    CBZ R0, loc_264DE
loc_264DA:
    BL sub_1E6B0
loc_264DE:
    LDR R0, [R4,#0xC]
    CBZ R0, loc_264E6
loc_264E2:
    BL sub_1E6B0
loc_264E6:
    MOVS R3, #0
    MOV R0, R4
    STRB R3, [R4,#0x10]
    POP.W {R4,LR}
    B.W sub_19494
loc_264F4:
    BX LR
```
Output:```json
[
  "return-type:void",
  "argument-count:1",
  "arg0-type:pointer",
  "calling-convention-hint:callee-saves-registers",
  "calling-convention-hint:registers-for-args",
  "calling-convention-hint:return-via-register",
  "stack-arg-use:false",
  "standard-calling-convention-used",
  "stack-frame-management-present",
  "explicit-stack-allocation-size:0x0",
  "callee-saves-registers-present",
  "standard-function-return",
  "conditional-branching-on-input",
  "external-function-calls-present",
  "external-call-type:unspecified-helper (sub_1E6B0)",
  "integer-size-hint:32-bit",
  "memory-read-from-input-parameter-offset:0",
  "memory-read-from-input-parameter-offset:4",
  "memory-read-from-input-parameter-offset:8",
  "memory-read-from-input-parameter-offset:C",
  "memory-write-to-input-parameter-offset:10",
  "fixed-value-comparison:0",
  "fixed-value-assignment:0",
  "inferred-algorithm:data-processing-helper",
  "inferred-algorithm:loop-with-condition-checks",
  "inferred-algorithm:bitwise-clear"
]
```<|im_end|>
