############
```assembly
loc_403F20:
    XOR eax, eax
    RETN 
```
Output:```json
{
  "inputParameterCount": 0,
  "inputParameterTypes": ["Integer"],
  "returnValueType": "None",
  "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison"],
  "loopIndicators": false,
  "numberOfDistinctSubroutineCallTargets": 0,
  "useOfIndexedAddressingModes": false,
  "constantsAndMagicNumbers": [],
  "sideEffects": false,
  "interactions": false,
}
```
############
```assembly
loc_642D40:
    EXTRN 
```
Output:```json
{
  "signature": {
    "input_parameters_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "Integer"
  },
  "core_logic_operations": [
    {
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    }
  ],
  "constants_and_magic_numbers": [
    "0x5B8",
    "0x23"
  ],
  "side_effects": [
    {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  ],
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_426250:
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 0A0h
    MOV rax, fs:28h
    MOV [rsp+0B8h+var_20], rax
    XOR eax, eax
    MOV eax, [rdi+100h]
    CMP eax, 6Fh
    JLE loc_4263C0
loc_426283:
    MOV r12d, 0F0h
    SUB r12d, eax
loc_42628C:
    XOR eax, eax
    LEA rsi, [rsp+0B8h+var_A8]
    JMP loc_4262AA
loc_426298:
    MOV ecx, [rbp+rax+110h]
    SHL edx, 3
    SHR ecx, 1Dh
    OR edx, ecx
    MOV [rsi+rax], edx
loc_4262AA:
    MOV edx, [rbp+rax+110h]
    SUB rax, 4
    CMP rax, 0FFFFFFFFFFFFFFF0h
    JNZ loc_426298
loc_4262BB:
    SHL edx, 3
    LEA rdi, [rsp+0B8h+var_A8]
    MOV ecx, 80h
    MOV [rsp+0B8h+var_B8], edx
    XOR esi, esi
    MOVSXD rdx, r12d
    CALL ___memset_chk
    LEA rsi, [rsp+0B8h+var_A8]
    MOV rdi, rbp
    MOV edx, r12d
    MOV [rsp+0B8h+var_A8], 80h
    CALL sub_424870
    LEA rax, [rsp+0B8h+var_A8]
    MOV rcx, rsp
    MOV rdi, rax
    ADD rdi, 10h
    NOP dword ptr [rax+00000000h]
loc_426300:
    MOV edx, [rcx+0Ch]
    ADD rax, 4
    SUB rcx, 4
    MOV esi, edx
    MOV [rax-1], dl
    SHR esi, 18h
    MOV [rax-4], sil
    MOV esi, edx
    SHR esi, 10h
    MOV [rax-3], sil
    MOV esi, edx
    SHR esi, 8
    MOV [rax-2], sil
    CMP rax, rdi
    JNZ loc_426300
loc_42632E:
    LEA rsi, [rsp+0B8h+var_A8]
    MOV rdi, rbp
    MOV edx, 10h
    CALL sub_424870
    LEA r8, [rbx+40h]
    MOV rdi, rbp
    MOV rsi, rbx
    NOP word ptr [rax+rax+00h]
loc_426350:
    MOV rdx, [rdi]
    MOV rax, [rdi+8]
    ADD rsi, 8
    ADD rdi, 10h
    MOV ecx, edx
    MOV [rsi-5], dl
    MOV [rsi-1], al
    SHR ecx, 18h
    MOV [rsi-8], cl
    MOV ecx, edx
    SHR ecx, 10h
    MOV [rsi-7], cl
    MOV ecx, edx
    MOV edx, eax
    SHR edx, 18h
    SHR ecx, 8
    MOV [rsi-4], dl
    MOV edx, eax
    MOV [rsi-6], cl
    SHR edx, 10h
    MOV [rsi-3], dl
    MOV edx, eax
    SHR edx, 8
    MOV [rsi-2], dl
    CMP r8, rsi
    JNZ loc_426350
loc_42639A:
    MOV rax, [rsp+0B8h+var_20]
    XOR rax, fs:28h
    JNZ loc_4263CE
loc_4263AD:
    ADD rsp, 0A0h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4263C0:
    MOV r12d, 70h
    SUB r12d, eax
    JMP loc_42628C
loc_4263CE:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "inputParameterCount": 2,
      "inputParameterTypes": ["Integer", "Pointer"],
      "returnValueType": "Integer",
      "dominantOperationCategories": ["Arithmetic", "Comparison", "DataMovement"],
      "loopIndicators": false,
      "numberOfDistinctSubroutineCallTargets": 0,
      "useOfIndexedAddressingModes": false
    },
    {
      "presenceOfNotableIntegerConstants": ["0x5B8", "0x23"],
      "presenceOfNotableFloatingPointConstants": ["0xDEADBEEF", "0x80000000"],
      "countOfDistinctImmediateValues": 1
    }
  ],
  "inferredAlgorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_4197D0:
    CMP cs:byte_6425A8, 0
    JZ loc_4197E0
loc_4197D9:
    MOV eax, offset dword_642540
    RETN 
loc_4197E0:
    SUB rsp, 8
    CALL sub_419710
    MOV eax, offset dword_642540
    ADD rsp, 8
    RETN 
```
Output:```json
{
  "input_parameters": [
    "cs:byte_6425A8",
    "offset dword_642540"
  ],
  "input_parameter_types": [
    "Integer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "Arithmetic",
    "Comparison"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": true,
  "constants_and_magic_numbers": [
    "0x6425A8",
    "0x642540"
  ],
  "side_effects": false,
  "interactions": false,
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_4068C7:
    MOVSXD rsi, dword ptr [rbx+3Ch]
    MOV rdi, [rbx+30h]
    MOV ebp, [rbx+4]
    CALL sub_40B660
    MOV rdi, [rbx+30h]
    CALL sub_40B5E0
    MOV esi, 40h
    MOV rdi, rbx
    CALL sub_40B660
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV eax, ebp
loc_4068F7:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "inputParameters": [
    "rbx",
    "rbp"
  ],
  "dominantOperationCategories": [
    "Arithmetic",
    "Bitwise",
    "Comparison",
    "DataMovement",
    "ConditionalBranching",
    "SubroutineCall",
    "Return"
  ],
  "constantsAndMagicNumbers": [
    "0x4068C7",
    "0x40B660",
    "0x40B5E0",
    "0x40B660",
    "0x40B5E0",
    "0x40B660",
    "0x40B5E0",
    "0x40B660",
    "0x40B5E0",
    "0x40B660",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0x40B5E0",
    "0
############
```assembly
loc_40E740:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 28h
    MOV rsi, fs:28h
    MOV [rsp+58h+var_40], rsi
    XOR esi, esi
    TEST dl, 7
    MOV [rsp+58h+var_50], rdi
    JNZ loc_40E849
loc_40E76F:
    MOV rax, [rsp+58h+var_50]
    TEST edx, edx
    MOV r14d, [rax+2098h]
    MOV r12d, [rax+209Ch]
    JLE loc_40E83C
loc_40E78A:
    SUB edx, 1
    LEA rbp, [rdi+1050h]
    SHR edx, 3
    LEA rax, [rbx+rdx*8+8]
    MOV [rsp+58h+var_58], rax
loc_40E7A0:
    MOV r13d, [rbx]
    MOV r15d, [rbx+4]
    LEA rdx, [rsp+58h+var_48]
    MOV rcx, rbp
    ADD rbx, 8
    MOV esi, r15d
    MOV edi, r13d
    CALL sub_40E430
    MOV edx, [rsp+58h+var_48]
    MOV eax, [rsp+58h+var_44]
    XOR edx, r14d
    XOR eax, r12d
    MOV r14d, r13d
    MOV ecx, edx
    MOV [rbx-8], dl
    MOV [rbx-4], al
    SHR ecx, 8
    MOV r12d, r15d
    MOV [rbx-7], cl
    MOV ecx, edx
    SHR edx, 18h
    MOV [rbx-5], dl
    MOV edx, eax
    SHR ecx, 10h
    SHR edx, 8
    MOV [rbx-6], cl
    MOV [rbx-3], dl
    MOV edx, eax
    SHR eax, 18h
    SHR edx, 10h
    MOV [rbx-1], al
    MOV [rbx-2], dl
    CMP [rsp+58h+var_58], rbx
    JNZ loc_40E7A0
loc_40E80A:
    MOV rax, [rsp+58h+var_50]
    MOV [rax+2098h], r13d
    MOV [rax+209Ch], r15d
    MOV rax, [rsp+58h+var_40]
    XOR rax, fs:28h
    JNZ loc_40E844
loc_40E82D:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_40E83C:
    MOV r15d, r12d
    MOV r13d, r14d
    JMP loc_40E80A
loc_40E844:
    CALL ___stack_chk_fail
loc_40E849:
    MOV ecx, offset aBlowfishLsbDec
    MOV edx, 161h
    MOV esi, offset aSshblowfC
    MOV edi, offset aLen70
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "value": {
        "input_parameter_count": 1,
        "input_parameter_types": ["Integer"],
        "return_value_type": "None"
      }
    },
    {
      "name": "Core Logic & Operations",
      "value": {
        "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
        "loop_indicators": false,
        "number_of_distinct_subroutine_call_targets": 1,
        "use_ofIndexedAddressingModes": true,
        "constants_and_magic_numbers": [
          "0x5B8",
          "0x23",
          "0x80000000",
          "0xDEADBEEF",
          "0x80000000",
          "0xFF",
          "0xFFFF0000",
          "0xFF",
          "0x1",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
          "0x0",
############
```assembly
loc_4041A0:
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    MOV rdi, [rdi]
    MOV rbx, rsi
    CALL sub_428750
    TEST rax, rax
    JZ loc_4041E4
loc_4041B7:
    CMP rbx, rax
    MOV rbp, rax
    JZ loc_4041E4
loc_4041BF:
    MOV rdi, [r12]
    MOV rsi, rax
    CALL sub_428AA0
    MOV rdi, rbp
    CALL sub_404010
    MOV rdi, [r12]
    MOV rsi, rbx
    CALL sub_428750
    CMP rbx, rax
    JNZ loc_4041E9
loc_4041E4:
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4041E9:
    MOV ecx, offset aConfInsert
    MOV edx, 0E6h
    MOV esi, offset aConfC
    MOV edi, offset aOldentryEntry
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "values": ["loc_4041A0", "loc_4041B7", "loc_4041BF"]
    },
    {
      "name": "Data Flow",
      "values": ["mov r12, rdi", "push rbp", "push rbx", "mov rdi, [rdi]", "mov rbx, rsi", "call sub_428750"]
    },
    {
      "name": "Core Logic & Operations",
      "values": ["arithmetic", "bitwise", "comparison", "dataMovement", "conditionalBranching", "subroutineCall", "return", "memoryAccess", "stackManipulation"]
    },
    {
      "name": "Loop Indicators",
      "values": ["true", "false"]
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "values": ["1"]
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "values": ["true"]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "values": ["0x5B8", "0x23", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xFFFF0000", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000", "0x23", "0xDEADBEEF", "0x80000000",
############
```assembly
loc_40B290:
    SUB rsp, 0E8h
    TEST al, al
    MOV [rsp+0E8h+var_B0], rsi
    MOV [rsp+0E8h+var_A8], rdx
    MOV [rsp+0E8h+var_A0], rcx
    MOV [rsp+0E8h+var_98], r8
    MOV [rsp+0E8h+var_90], r9
    JZ loc_40B2EE
loc_40B2B4:
    MOVAPS [rsp+0E8h+var_88], xmm0
    MOVAPS [rsp+0E8h+var_78], xmm1
    MOVAPS [rsp+0E8h+var_68], xmm2
    MOVAPS [rsp+0E8h+var_58], xmm3
    MOVAPS [rsp+0E8h+var_48], xmm4
    MOVAPS [rsp+0E8h+var_38], xmm5
    MOVAPS [rsp+0E8h+var_28], xmm6
    MOVAPS [rsp+0E8h+var_18], xmm7
loc_40B2EE:
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_C0], rax
    XOR eax, eax
    LEA rax, [rsp+0E8h+arg_0]
    LEA r8, [rsp+0E8h+var_D8]
    LEA rdx, [rsp+0E8h+var_DC]
    MOV rcx, rdi
    XOR esi, esi
    XOR edi, edi
    MOV [rsp+0E8h+var_D0], rax
    LEA rax, [rsp+0E8h+var_B8]
    MOV [rsp+0E8h+var_D8], 8
    MOV [rsp+0E8h+var_D4], 30h
    MOV [rsp+0E8h+var_DC], 0
    MOV [rsp+0E8h+var_C8], rax
    CALL sub_40B110
    MOV rcx, [rsp+0E8h+var_C0]
    XOR rcx, fs:28h
    JNZ loc_40B35B
loc_40B353:
    ADD rsp, 0E8h
    RETN 
loc_40B35B:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "input_parameters_count": 4,
    "input_parameter_types": ["Integer", "Integer", "Integer", "Integer"],
    "return_value_type": "None",
    "dominant_operation_categories": [
      "DataMovement",
      "Comparison",
      "Bitwise",
      "ConditionalBranching"
    ],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 1,
    "use_of_indexed_addressing_modes": true,
    "constants_and_magic_numbers": [
      "0x5B8",
      "0x23",
      "0xDEADBEEF",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
############
```assembly
loc_42A40B:
    ADD rsp, 28h
    RETN 
loc_42A410:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "inputParametersCount": 1,
      "inputParameterTypes": ["Integer"],
      "returnValueType": "None"
    },
    {
      "category": "Core Logic & Operations",
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
      "loopIndicators": false,
      "numberDistinctSubroutineCallTargets": 1,
      "useOfIndexedAddressingModes": true,
      "constantsAndMagicNumbers": ["0x5B8", "0x23"],
      "sideEffects": false,
      "interactions": false,
      "inferredAlgorithm": "CRC32 Calculation"
    },
    {
      "category": "Constants & 'Magic Numbers'",
      "presenceOfNotableIntegerConstants": ["0xDEADBEEF", "0x80000000"],
      "presenceOfNotableFloatingPointConstants": ["0xFFFF0000", "0xFF"],
      "countDistinctImmediateValues": 1,
      "inferredAlgorithm": "Undetermined"
    },
    {
      "category": "Side Effects & Interactions",
      "likelyModifiesInputParameters": false,
      "likelyModifiesGlobalState": false,
      "likelyPerformsMemoryAllocation/Deallocation": false,
      "likelyPerformI/OOperations": false,
      "likely PerformsBlockMemoryOperations": false
    }
  ]
}
```
############
```assembly
loc_40B040:
    MOV rcx, rdx
    MOV eax, 7FFFFFFFh
    XOR edx, edx
    DIV rcx
    SUB rsp, 8
    CMP rax, rsi
    JB loc_40B080
loc_40B056:
    IMUL rsi, rcx
    TEST rdi, rdi
    JZ loc_40B070
loc_40B05F:
    CALL _realloc
loc_40B064:
    TEST rax, rax
    JZ loc_40B080
loc_40B069:
    ADD rsp, 8
    RETN 
loc_40B070:
    MOV rdi, rsi
    CALL _malloc
    JMP loc_40B064
loc_40B080:
    CALL sub_40A310
```
Output:```json
{
  "signature": {
    "input_params_count": 2,
    "input_params_types": [
      "Integer",
      "Integer"
    ],
    "return_value_type": "Integer"
  },
  "core_logic": {
    "dominant_operation_categories": [
      "Arithmetic",
      "Bitwise",
      "Comparison",
      "DataMovement",
      "ConditionalBranching",
      "SubroutineCall",
      "Return",
      "MemoryAccess",
      "StackManipulation"
    ],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 2,
    "use_of_indexed_addressing_modes": true,
    "constants_and_magic_numbers": [
      "0x7FFFFFFFh",
      "0x80000000"
    ]
  },
  "side_effects": {
    "likely_modifies_input_parameters": false,
    "likely_modifies_global_state": false,
    "likely Performs Memory Allocation/Deallocation": true,
    "likely Performs I/O Operations": false
  },
  "inferred_algorithm": "Undetermined"
}
```
############
```assembly
loc_401E10:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV ebx, edi
    SUB rsp, 178h
    MOV rax, fs:28h
    MOV [rsp+1A8h+var_40], rax
    XOR eax, eax
    MOV [rsp+1A8h+var_F8], 0
    MOV [rsp+1A8h+var_F0], 0
    CALL sub_429A80
    MOV edx, offset nullsub_1
    TEST eax, eax
    MOV eax, offset sub_403C50
    CMOVZ rax, rdx
    CMP ebx, 1
    MOV [rsp+1A8h+var_170], rax
    JLE loc_402AF7
loc_401E74:
    MOV [rsp+1A8h+var_158], 0
    MOV [rsp+1A8h+var_160], 0
    XOR r14d, r14d
    MOV [rsp+1A8h+var_168], 0
    MOV [rsp+1A8h+var_184], 0
    XOR r13d, r13d
    MOV [rsp+1A8h+var_188], 0
    MOV [rsp+1A8h+var_150], 0
    MOV [rsp+1A8h+src], 0
    MOV [rsp+1A8h+var_19C], 0FFFFFFFFh
    MOV [rsp+1A8h+var_198], 0
    MOV [rsp+1A8h+new], 0
    MOV [rsp+1A8h+var_194], 0
    NOP word ptr [rax+rax+00000000h]
loc_401EE0:
    SUB ebx, 1
    JZ loc_401F28
loc_401EE5:
    MOV rcx, [rbp+8]
    LEA r15, [rbp+8]
    CMP byte ptr [rcx], 2Dh
    JZ loc_401FD8
loc_401EF6:
    TEST r13, r13
    JZ loc_4023B0
loc_401EFF:
    MOV rcx, cs:stderr
    MOV edx, 31h
    MOV esi, 1
    MOV edi, offset aPuttygenCannot
    MOV rbp, r15
    MOV r14d, 1
    CALL _fwrite
    SUB ebx, 1
    JNZ loc_401EE5
loc_401F28:
    CMP [rsp+1A8h+var_19C], 0FFFFFFFFh
    JZ loc_40278B
loc_401F33:
    CMP [rsp+1A8h+var_194], 4
    JZ loc_402A9E
loc_401F3E:
    CMP [rsp+1A8h+var_194], 5
    SETZ al
    CMP [rsp+1A8h+var_19C], 100h
    MOV ebp, eax
    JZ loc_401F5A
loc_401F52:
    TEST al, al
    JNZ loc_402860
loc_401F5A:
    MOV esi, [rsp+1A8h+var_194]
    MOV eax, esi
    SUB eax, 1
    CMP eax, 2
    JBE loc_4024BB
loc_401F6C:
    TEST r14d, r14d
    JNZ loc_4024F2
loc_401F75:
    CMP [rsp+1A8h+var_188], 0
    JNZ loc_4026A1
loc_401F80:
    TEST r13, r13
    JNZ loc_401F90
loc_401F85:
    CMP [rsp+1A8h+var_194], 0
    JZ loc_40288D
loc_401F90:
    CMP [rsp+1A8h+var_194], 0
    SETNZ byte ptr [rsp+1A8h+var_188]
    TEST r13, r13
    MOVZX eax, byte ptr [rsp+1A8h+var_188]
    JZ loc_4026A8
loc_401FA8:
    TEST al, al
    JZ loc_4026A8
loc_401FB0:
    MOV rcx, cs:stderr
    MOV edx, 2Eh
    MOV esi, 1
    MOV edi, offset aPuttygenCannot_0
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_401FD8:
    MOVZX r12d, byte ptr [rcx+1]
    LEA r8, [rcx+1]
    MOV rbp, r15
    TEST r12b, r12b
    JZ def_402078
loc_401FED:
    MOV edx, r14d
    MOV ebp, ebx
    MOV r14, r15
    MOV rbx, r8
    NOP dword ptr [rax+rax+00000000h]
loc_402000:
    LEA eax, [r12-2Dh]
    CMP al, 47h
    JA def_402010
loc_40200D:
    MOVZX eax, al
    JMP ds:jpt_402010[rax*8]
loc_402020:
    SUB r12d, 4Ch
    CMP r12b, 25h
    JA def_402032
loc_40202E:
    MOVZX r12d, r12b
    JMP ds:jpt_402032[r12*8]
loc_402040:
    CMP byte ptr [rcx+2], 0
    MOV ebx, ebp
    LEA r8, [rcx+2]
    MOV rbp, r14
    MOV r14d, edx
    JNZ loc_402066
loc_402052:
    CMP ebx, 1
    JZ loc_402410
loc_40205B:
    MOV r8, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_402066:
    SUB r12d, 43h
    CMP r12b, 31h
    JA def_402078
loc_402074:
    MOVZX r12d, r12b
    JMP ds:jpt_402078[r12*8]
loc_402080:
    MOVZX eax, byte ptr [rcx+2]
    MOV r8, rbx
    MOV ebx, ebp
    MOV rbp, r14
    MOV r14d, edx
    LEA rdx, [rcx+2]
    TEST al, al
    JNZ loc_4020AB
loc_402097:
    JMP loc_4020AF
loc_4020A0:
    ADD rdx, 1
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JZ loc_4020AF
loc_4020AB:
    CMP al, 3Dh
    JNZ loc_4020A0
loc_4020AF:
    CMP al, 3Dh
    JZ loc_4023C0
loc_4020B7:
    MOV edi, offset aHelp
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JZ loc_40244E
loc_4020CC:
    MOV edi, offset aVersion
    MOV ecx, 9
    MOV rsi, r8
    REPE 
    JZ loc_402779
loc_4020E1:
    MOV edi, offset aPgpfp
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JZ loc_402AE5
loc_4020F6:
    XOR r12d, r12d
loc_4020F9:
    MOV edi, offset aOldPassphrase
    MOV ecx, 10h
    MOV rsi, r8
    REPE 
    JNZ loc_402460
loc_40210E:
    TEST r12, r12
    JNZ loc_402123
loc_402113:
    CMP ebx, 1
    JLE loc_402123
loc_402118:
    MOV r12, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_402123:
    TEST r12, r12
    JZ loc_402922
loc_40212C:
    MOV rdi, r12
    CALL sub_403B00
    TEST rax, rax
    MOV [rsp+1A8h+var_168], rax
    MOV eax, 1
    CMOVZ r14d, eax
    JMP def_402078
loc_402150:
    MOV rdi, cs:stderr
    MOVSX ecx, r12b
    MOV edx, offset aPuttygenNoSuch
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV rcx, rbx
    MOV edx, 1
loc_402174:
    TEST rbx, rbx
    JZ loc_40218B
loc_402179:
    MOVZX r12d, byte ptr [rcx+1]
    ADD rbx, 1
    TEST r12b, r12b
    JNZ loc_402000
loc_40218B:
    MOV ebx, ebp
    MOV rbp, r14
    MOV r14d, edx
    JMP def_402078
loc_4021A0:
    MOV [rsp+1A8h+src], r8
    JMP def_402078
loc_4021B0:
    MOV edi, offset aPublic
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JZ loc_402441
loc_4021C5:
    MOV esi, offset s2
    MOV rdi, r8
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    JNZ loc_402520
loc_4021DF:
    MOV [rsp+1A8h+var_198], 2
    JMP def_402078
loc_4021F0:
    MOV [rsp+1A8h+new], r8
    JMP def_402078
loc_402200:
    MOV edx, 0Ah
    XOR esi, esi
    MOV rdi, r8
    CALL _strtol
    MOV [rsp+1A8h+var_19C], eax
    JMP def_402078
loc_402220:
    MOVZX r12d, byte ptr [r8]
    CMP r12d, 72h
    JNZ loc_402318
loc_40222E:
    CMP byte ptr [r8+1], 73h
    JNZ loc_402318
loc_402239:
    CMP byte ptr [r8+2], 61h
    JNZ loc_402318
loc_402244:
    CMP byte ptr [r8+3], 0
    JNZ loc_402318
loc_40224F:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 2
    JMP def_402078
loc_402268:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_150], 1
    JMP loc_402174
loc_402280:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_170], offset nullsub_1
    JMP loc_402174
loc_402298:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_198], 1
    JMP loc_402174
loc_4022B0:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_198], 3
    JMP loc_402174
loc_4022C0:
    MOV dword ptr [rsp+1A8h+s1], edx
    CALL sub_403FC0
    MOV rcx, rbx
    MOV [rsp+1A8h+var_188], 1
    MOV edx, dword ptr [rsp+1A8h+s1]
    JMP loc_402174
loc_4022E0:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_198], 2
    JMP loc_402174
loc_4022F0:
    MOV dword ptr [rsp+1A8h+s1], edx
    CALL sub_403F40
    MOV rcx, rbx
    MOV [rsp+1A8h+var_188], 1
    MOV edx, dword ptr [rsp+1A8h+s1]
    JMP loc_402174
loc_402310:
    MOV rcx, rbx
    JMP loc_402174
loc_402318:
    MOV esi, offset aRsa2
    MOV rdi, r8
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_40224F
loc_402332:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aRsa1
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_40283E
loc_40234C:
    CMP r12d, 64h
    MOV r8, [rsp+1A8h+s1]
    JZ loc_402BBD
loc_40235B:
    MOV esi, offset aEcdsa
    MOV rdi, r8
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402C20
loc_402375:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aEd25519
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4033A7
loc_402394:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 5
    JMP def_402078
loc_4023B0:
    MOV r13, rcx
    MOV rbp, r15
    JMP def_402078
loc_4023C0:
    MOV byte ptr [rdx], 0
    MOV edi, offset aHelp
    MOV ecx, 6
    MOV rsi, r8
    LEA r12, [rdx+1]
    REPE 
    JNZ loc_40364C
loc_4023DC:
    TEST r12, r12
    JZ loc_40244E
loc_4023E1:
    MOV rcx, r8
    MOV edx, offset aPuttygenOption
loc_4023E9:
    MOV rdi, cs:stderr
    MOV esi, 1
    XOR eax, eax
    MOV r14d, 1
    CALL ___fprintf_chk
    JMP def_402078
loc_402410:
    MOV rdi, cs:stderr
    MOVSX ecx, r12b
    MOV edx, offset aPuttygenOption_0
    MOV esi, 1
    XOR eax, eax
    MOV [rsp+1A8h+s1], r8
    MOV r14d, 1
    CALL ___fprintf_chk
    MOV r8, [rsp+1A8h+s1]
    JMP loc_402066
loc_402441:
    MOV [rsp+1A8h+var_198], 1
    JMP def_402078
loc_40244E:
    CALL sub_403FC0
    MOV [rsp+1A8h+var_188], 1
    JMP def_402078
loc_402460:
    MOV rdi, r8
    MOV esi, offset aNewPassphrase
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4027F7
loc_40247F:
    TEST r12, r12
    JNZ loc_402494
loc_402484:
    CMP ebx, 1
    JLE loc_402494
loc_402489:
    MOV r12, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_402494:
    TEST r12, r12
    JZ loc_402922
loc_40249D:
    MOV rdi, r12
    CALL sub_403B00
    TEST rax, rax
    MOV [rsp+1A8h+var_160], rax
    MOV eax, 1
    CMOVZ r14d, eax
    JMP def_402078
loc_4024BB:
    CMP [rsp+1A8h+var_19C], 0FFh
    JG loc_4027B3
loc_4024C9:
    MOV rdi, cs:stderr
    CMP esi, 3
    MOV eax, offset aDsa
    MOV ecx, offset off_42BE65
    MOV edx, offset aPuttygenCannot_1
    MOV esi, 1
    CMOVZ rcx, rax
    XOR eax, eax
    CALL ___fprintf_chk
loc_4024F2:
    MOV eax, 1
loc_4024F7:
    MOV rsi, [rsp+1A8h+var_40]
    XOR rsi, fs:28h
    JNZ loc_403647
loc_40250E:
    ADD rsp, 178h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_402520:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivate
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402853
loc_40253A:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aFingerprint
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402B33
loc_402554:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivateOpenssh
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402BF3
loc_40256E:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivateOpenssh_0
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402FC8
loc_402588:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivateSshcom
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4030DE
loc_4025A7:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_198], 6
    JMP def_402078
loc_4025BC:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_4036E9
loc_4025C7:
    TEST rbx, rbx
    JZ loc_403627
loc_4025D0:
    MOV rsi, [rbx+8]
    MOV rdi, [rbx]
    CALL sub_420900
    MOV r14, rax
loc_4025DF:
    CMP [rsp+1A8h+new], 0
    JZ loc_403607
loc_4025EB:
    MOV rdi, r13
    XOR edx, edx
    MOV esi, (offset aPuttyKeyFormat+17h)
    CALL sub_42A050
    MOV rcx, r14
    MOV rdi, rax
    MOV r13, rax
    MOV edx, (offset aPuttygenSS+0Dh)
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV rdi, r13
    CALL _fclose
loc_40261C:
    MOV rdi, r14
    CALL sub_40B5E0
loc_402624:
    MOV r15, [rsp+1A8h+var_168]
    TEST r15, r15
    MOV rdi, r15
    JZ loc_402653
loc_402631:
    XOR eax, eax
    OR rcx, 0FFFFFFFFFFFFFFFFh
    REPNE 
    MOV rdi, r15
    MOV rax, rcx
    NOT rax
    LEA rsi, [rax-1]
    CALL sub_40B660
    MOV rdi, r15
    CALL sub_40B5E0
loc_402653:
    TEST r12, r12
    JZ loc_40267D
loc_402658:
    XOR eax, eax
    MOV rdi, r12
    OR rcx, 0FFFFFFFFFFFFFFFFh
    REPNE 
    MOV rdi, r12
    MOV rax, rcx
    NOT rax
    LEA rsi, [rax-1]
    CALL sub_40B660
    MOV rdi, r12
    CALL sub_40B5E0
loc_40267D:
    TEST rbp, rbp
    JZ loc_40268A
loc_402682:
    MOV rdi, rbp
    CALL sub_422CC0
loc_40268A:
    TEST rbx, rbx
    JZ loc_4026A1
loc_40268F:
    MOV rax, [rbx]
    MOV rdi, [rbx+8]
    CALL qword ptr [rax+8]
    MOV rdi, rbx
    CALL sub_40B5E0
loc_4026A1:
    XOR eax, eax
    JMP loc_4024F7
loc_4026A8:
    CMP [rsp+1A8h+var_194], 0
    JZ loc_4026E6
loc_4026AF:
    MOV edi, [rsp+1A8h+var_198]
    MOV eax, edi
    SUB eax, 4
    CMP eax, 2
    JBE loc_4026E6
loc_4026BD:
    TEST edi, edi
    JZ loc_4026E6
loc_4026C1:
    MOV rcx, cs:stderr
    MOV edx, 45h
    MOV esi, 1
    MOV edi, offset aPuttygenThisWo
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_4026E6:
    TEST r13, r13
    JZ loc_4028C4
loc_4026EF:
    MOV rdi, r13
    CALL sub_429C60
    MOV rdi, rax
    MOV rbx, rax
    CALL sub_420960
    CMP eax, 0Ah
    MOV r14d, eax
    MOV dword ptr [rsp+1A8h+s1], eax
    JA loc_4034E0
loc_402712:
    MOV eax, 1
    MOV ecx, r14d
    SHL rax, cl
    TEST eax, 6E8h
    JNZ loc_402B40
loc_402728:
    TEST eax, 104h
    JNZ loc_402C08
loc_402733:
    TEST al, 3
    JZ loc_4034E0
loc_40273B:
    MOV edi, r14d
    CALL sub_4209A0
    MOV rdi, cs:stderr
    MOV r8, rax
    MOV rcx, r13
    MOV edx, offset aPuttygenUnable
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV eax, 1
    JMP loc_4024F7
loc_402770:
    TEST r12, r12
    JNZ loc_403693
loc_402779:
    CALL sub_403F40
    MOV [rsp+1A8h+var_188], 1
    JMP def_402078
loc_40278B:
    MOV eax, [rsp+1A8h+var_194]
    CMP eax, 4
    JZ loc_402880
loc_402798:
    CMP eax, 5
    JNZ loc_402B1E
loc_4027A1:
    MOV ebp, 1
    MOV [rsp+1A8h+var_19C], 100h
    JMP loc_401F5A
loc_4027B3:
    CMP [rsp+1A8h+var_19C], 7FFh
    JG loc_401F6C
loc_4027C1:
    CMP [rsp+1A8h+var_194], 3
    MOV rdi, cs:stderr
    MOV eax, offset off_42BE65
    MOV ecx, offset aDsa
    MOV r8d, 800h
    MOV edx, offset aPuttygenWarnin
    MOV esi, 1
    CMOVNZ rcx, rax
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_401F6C
loc_4027F7:
    MOV rdi, r8
    MOV esi, offset aRandomDevice
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4028B7
loc_402816:
    TEST r12, r12
    JNZ loc_40282B
loc_40281B:
    CMP ebx, 1
    JLE loc_40282B
loc_402820:
    MOV r12, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_40282B:
    TEST r12, r12
    JZ loc_402922
loc_402834:
    MOV [rsp+1A8h+var_158], r12
    JMP def_402078
loc_40283E:
    MOV [rsp+1A8h+var_184], 1
    MOV [rsp+1A8h+var_194], 1
    JMP def_402078
loc_402853:
    MOV [rsp+1A8h+var_198], 0
    JMP def_402078
loc_402860:
    MOV rcx, cs:stderr
    MOV edx, 2Fh
    MOV esi, 1
    MOV edi, offset aPuttygenInvali
    CALL _fwrite
    JMP loc_4024F2
loc_402880:
    MOV [rsp+1A8h+var_19C], 180h
    JMP loc_401F3E
loc_40288D:
    MOV rcx, cs:stderr
    MOV edx, 0A0h
    MOV esi, 1
    MOV edi, offset aUsagePuttygenK
    CALL _fwrite
    CALL sub_403CF0
    MOV eax, 1
    JMP loc_4024F7
loc_4028B7:
    MOV rcx, r8
    MOV edx, offset aPuttygenNoSuch_0
    JMP loc_4023E9
loc_4028C4:
    MOV eax, [rsp+1A8h+var_198]
    MOV dword ptr [rsp+1A8h+s1], 0
    TEST eax, eax
    SETZ r12b
    CMP eax, 4
    SETZ al
    XOR r14d, r14d
    XOR ebx, ebx
loc_4028E1:
    XOR r15d, r15d
    CMP [rsp+1A8h+new], 0
    JZ loc_4034F9
loc_4028F0:
    MOV eax, [rsp+1A8h+var_198]
    CMP eax, 4
    JZ loc_40292F
loc_4028F9:
    TEST r12b, r12b
    JNZ loc_40292F
loc_4028FE:
    SUB eax, 5
    CMP eax, 1
    JBE loc_40292F
loc_402906:
    MOV eax, dword ptr [rsp+1A8h+s1]
    SUB eax, 5
    CMP eax, 1
    JBE loc_40292F
loc_402912:
    CMP r14d, 7
    JZ loc_40292F
loc_402918:
    MOV [rsp+1A8h+var_14C], 0
    JMP loc_402947
loc_402922:
    MOV rcx, r8
    MOV edx, offset aPuttygenOption_1
    JMP loc_4023E9
loc_40292F:
    MOV eax, dword ptr [rsp+1A8h+s1]
    SUB eax, 8
    CMP eax, 2
    JBE loc_403032
loc_40293F:
    MOV [rsp+1A8h+var_14C], 1
loc_402947:
    CMP [rsp+1A8h+var_194], 0
    JNZ loc_402E21
loc_402952:
    TEST r13, r13
    MOV [rsp+1A8h+var_E8], 0
    JZ loc_403719
loc_402967:
    CMP r14d, 2
    LEA r12, [rsp+1A8h+var_F8]
    JZ loc_4030CE
loc_402979:
    CMP r14d, 3
    JZ loc_403057
loc_402983:
    MOV rdx, r12
    MOV esi, r14d
    MOV rdi, rbx
    CALL sub_408BF0
loc_402991:
    TEST eax, eax
    JZ loc_402C35
loc_402999:
    CMP [rsp+1A8h+var_14C], 0
    JZ loc_402C35
loc_4029A4:
    CMP [rsp+1A8h+var_168], 0
    JZ loc_403853
loc_4029B0:
    MOVZX ecx, byte ptr [rsp+1A8h+s1]
    MOV eax, 1
    SHL rax, cl
    TEST eax, 608h
    JNZ loc_402D74
loc_4029C8:
    TEST eax, 104h
    JNZ loc_403294
loc_4029D3:
    TEST al, 0E0h
    JZ loc_403457
loc_4029DB:
    MOV rdx, [rsp+1A8h+var_168]
    LEA rcx, [rsp+1A8h+var_E8]
    MOV rdi, rbx
    MOV esi, r14d
    CALL sub_409830
    TEST rax, rax
    MOV rbx, rax
    JZ loc_403274
loc_4029FF:
    CMP rax, offset unk_6425B0
    JZ loc_4035F6
loc_402A0B:
    XOR r14d, r14d
loc_402A0E:
    XOR ebp, ebp
loc_402A10:
    CMP [rsp+1A8h+src], 0
    JZ loc_402A43
loc_402A18:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_403067
loc_402A23:
    TEST rbx, rbx
    JZ loc_4036D0
loc_402A2C:
    MOV rdi, [rbx+10h]
    CALL sub_40B5E0
    MOV rdi, [rsp+1A8h+src]
    CALL sub_40ACA0
    MOV [rbx+10h], rax
loc_402A43:
    CMP [rsp+1A8h+var_150], 0
    JNZ loc_402DF7
loc_402A4E:
    CMP [rsp+1A8h+var_168], 0
    JZ loc_402DF7
loc_402A5A:
    CMP [rsp+1A8h+var_160], 0
    JZ loc_402DE8
loc_402A66:
    MOV r12, [rsp+1A8h+var_160]
loc_402A6B:
    CMP byte ptr [r12], 0
    JZ loc_403025
loc_402A76:
    TEST r15, r15
    JZ loc_403007
loc_402A7F:
    MOV rdi, r15
    CALL sub_429C60
    MOV r13, rax
loc_402A8A:
    MOV eax, [rsp+1A8h+var_198]
    CMP eax, 6
    JA def_402A97
loc_402A97:
    JMP ds:jpt_402A97[rax*8]
loc_402A9E:
    MOV eax, [rsp+1A8h+var_19C]
    XOR ebp, ebp
    AND al, 7Fh
    CMP eax, 100h
    JZ loc_401F5A
loc_402AB1:
    CMP [rsp+1A8h+var_19C], 209h
    JZ loc_401F3E
loc_402ABF:
    MOV rcx, cs:stderr
    MOV edx, 39h
    MOV esi, 1
    MOV edi, offset aPuttygenInvali_0
    MOV r14d, 1
    CALL _fwrite
    JMP loc_401F3E
loc_402AE5:
    CALL sub_429E10
    MOV [rsp+1A8h+var_188], 1
    JMP def_402078
loc_402AF7:
    MOV rcx, cs:stderr
    MOV edx, 0A0h
    MOV esi, 1
    MOV edi, offset aUsagePuttygenK
    CALL _fwrite
    CALL sub_403CF0
    XOR eax, eax
    JMP loc_4024F7
loc_402B1E:
    CMP [rsp+1A8h+var_194], 4
    MOV [rsp+1A8h+var_19C], 800h
    JNZ loc_401F3E
loc_402B31:
    JMP loc_402ABF
loc_402B33:
    MOV [rsp+1A8h+var_198], 3
    JMP def_402078
loc_402B40:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_403382
loc_402B4B:
    MOV [rsp+1A8h+var_184], 2
loc_402B53:
    CMP [rsp+1A8h+var_198], 0
    LEA eax, [r14-2]
    SETZ r12b
    CMP eax, 1
    SETBE al
    AND al, r12b
    JZ loc_40308C
loc_402B6F:
    MOV r12d, eax
loc_402B72:
    XOR r15d, r15d
    CMP [rsp+1A8h+new], 0
    JZ loc_403364
loc_402B81:
    CMP [rsp+1A8h+var_150], 0
    JNZ loc_4028F0
loc_402B8C:
    CMP [rsp+1A8h+src], 0
    JNZ loc_4028F0
loc_402B98:
    MOV rcx, cs:stderr
    MOV edx, 36h
    MOV esi, 1
    MOV edi, offset aPuttygenThisCo
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_402BBD:
    CMP byte ptr [r8+1], 73h
    JNZ loc_40235B
loc_402BC8:
    CMP byte ptr [r8+2], 61h
    JNZ loc_4030B3
loc_402BD3:
    CMP byte ptr [r8+3], 0
    JNZ loc_4030B3
loc_402BDE:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 3
    JMP def_402078
loc_402BF3:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_198], 4
    JMP def_402078
loc_402C08:
    CMP [rsp+1A8h+var_184], 2
    JZ loc_403470
loc_402C13:
    MOV [rsp+1A8h+var_184], 1
    JMP loc_402B53
loc_402C20:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 4
    JMP def_402078
loc_402C35:
    MOV [rsp+1A8h+var_168], 0
    JMP loc_4029B0
loc_402C43:
    CMP [rsp+1A8h+new], 0
    JZ loc_4039B1
loc_402C4F:
    MOV rdi, r13
    XOR edx, edx
    MOV esi, (offset aPuttyKeyFormat+17h)
    CALL sub_42A050
    MOV r13, rax
loc_402C61:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_4039A1
loc_402C6C:
    TEST r14, r14
    JZ loc_40396E
loc_402C75:
    XOR r8d, r8d
    CMP [rsp+1A8h+var_198], 1
    MOV ecx, [rsp+1A8h+tp.tm_sec]
    SETNZ r8b
    ADD r8d, 9
    TEST rbx, rbx
    JZ loc_403961
loc_402C95:
    MOV rsi, [rbx+10h]
loc_402C99:
    MOV rdx, r14
    MOV rdi, r13
    CALL sub_4205C0
loc_402CA4:
    CMP [rsp+1A8h+new], 0
    JZ def_402A97
loc_402CB0:
    MOV rdi, r13
    CALL _fclose
    JMP def_402A97
loc_402CBD:
    CMP [rsp+1A8h+var_184], 2
    JNZ loc_403948
loc_402CC8:
    TEST rbx, rbx
    JZ loc_40392F
loc_402CD1:
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_198]
    CMP eax, 5
    JZ loc_403925
loc_402CE3:
    XOR esi, esi
    CMP eax, 6
    SETZ sil
    LEA esi, [rsi+rsi*2+4]
loc_402CF0:
    MOV rcx, r12
    MOV rdx, rbx
    MOV rdi, r13
    CALL sub_40A230
    TEST eax, eax
    JZ loc_403905
loc_402D06:
    TEST r15, r15
    JZ def_402A97
loc_402D0F:
    MOV rsi, [rsp+1A8h+new]
    MOV rdi, r15
    CALL sub_403C00
    TEST eax, eax
    JNZ def_402A97
loc_402D24:
    JMP loc_4024F2
loc_402D29:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_4033FA
loc_402D34:
    TEST rbx, rbx
    JZ loc_4033E1
loc_402D3D:
    MOV rdx, r12
    MOV rsi, rbx
    MOV rdi, r13
    CALL sub_41FCB0
    TEST eax, eax
    JNZ loc_402D06
loc_402D4F:
    MOV rcx, cs:stderr
    MOV edx, 2Bh
    MOV esi, 1
    MOV edi, offset aPuttygenUnable_0
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_402D74:
    CMP [rsp+1A8h+var_14C], 0
    JNZ loc_402F68
loc_402D7F:
    LEA r8, [rsp+1A8h+var_E8]
    LEA rdx, [rsp+1A8h+tp]
    LEA rsi, [rsp+1A8h+var_F0]
    MOV rdi, rbx
    MOV rcx, r12
    CALL sub_41F6C0
    TEST rax, rax
    MOV r14, rax
    MOV rdi, [rsp+1A8h+var_F0]
    JZ loc_4038B1
loc_402DB6:
    CALL sub_41E630
    TEST rax, rax
    JZ loc_4030EB
loc_402DC4:
    MOV edx, [rsp+1A8h+tp.tm_sec]
    MOV rsi, r14
    MOV rdi, rax
    CALL qword ptr [rax+48h]
    MOV rdi, [rsp+1A8h+var_F0]
    XOR ebx, ebx
    CALL sub_40B5E0
    JMP loc_402A0E
loc_402DE8:
    MOV rdi, [rsp+1A8h+var_168]
    CALL sub_40ACA0
    MOV [rsp+1A8h+var_160], rax
loc_402DF7:
    CMP [rsp+1A8h+var_160], 0
    JNZ loc_402A66
loc_402E03:
    CMP [rsp+1A8h+var_150], 0
    JNZ loc_403732
loc_402E0E:
    CMP byte ptr [rsp+1A8h+var_188], 0
    JNZ loc_403732
loc_402E19:
    XOR r12d, r12d
    JMP loc_402A76
loc_402E21:
    LEA rbx, [rsp+1A8h+var_148]
    MOV dword ptr [rsp+1A8h+var_E8], 0FFFFFFFFh
    MOV dword ptr [rsp+1A8h+var_E8+4], 0FFFFFFFFh
    LEA r13, [rsp+1A8h+s]
    MOV rdi, rbx
    CALL sub_4275C0
    CMP [rsp+1A8h+var_194], 3
    LEA rax, [rsp+1A8h+tp]
    MOV ecx, 0Eh
    MOV rsi, rbx
    MOV rdi, rax
    REP 
    MOV rcx, rax
    JZ loc_4031CA
loc_402E6F:
    CMP [rsp+1A8h+var_194], 4
    JZ loc_40353F
loc_402E7A:
    TEST bpl, bpl
    JNZ loc_403124
loc_402E83:
    MOV edx, offset format
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_402EC0:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 40h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_423270
    CMP [rsp+1A8h+var_194], 1
    MOV qword ptr [rbp+38h], 0
    JZ loc_402FDD
loc_402F1E:
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV qword ptr [rax], offset off_437EE0
loc_402F3B:
    OR ecx, 0FFFFFFFFh
    MOV edx, 7FFFFFFFh
    MOV esi, 6
    MOV rdi, r12
    MOV rax, [rsp+1A8h+var_170]
    XOR ebp, ebp
    CALL rax
    MOV rdi, r13
    CALL sub_40ACA0
    MOV [rbx+10h], rax
loc_402F60:
    XOR r14d, r14d
    JMP loc_402A10
loc_402F68:
    MOV rsi, [rsp+1A8h+var_168]
    LEA rdx, [rsp+1A8h+var_E8]
    MOV rdi, rbx
    CALL sub_41E650
    CMP rax, offset unk_6425B0
    MOV rbx, rax
    JZ loc_402F91
loc_402F88:
    TEST rax, rax
    JNZ loc_402A0B
loc_402F91:
    CMP [rsp+1A8h+var_E8], 0
    JZ loc_4035E9
loc_402FA0:
    MOV r8, [rsp+1A8h+var_E8]
    MOV rdi, cs:stderr
    MOV rcx, r13
    MOV edx, offset aPuttygenErrorL
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_4024F2
loc_402FC8:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_198], 5
    JMP def_402078
loc_402FDD:
    OR ecx, 0FFFFFFFFh
    MOV edx, 7FFFFFFFh
    MOV esi, 6
    MOV rdi, r12
    MOV rax, [rsp+1A8h+var_170]
    XOR ebx, ebx
    CALL rax
    MOV rdi, r13
    CALL sub_40ACA0
    MOV [rbp+38h], rax
    JMP loc_402F60
loc_403007:
    MOV rax, [rsp+1A8h+new]
    MOV edi, (offset asc_42E60B+2)
    TEST rax, rax
    CMOVNZ rdi, rax
    CALL sub_429C60
    MOV r13, rax
    JMP loc_402A8A
loc_403025:
    MOV rdi, r12
    CALL sub_40B5E0
    JMP loc_402E19
loc_403032:
    MOV rcx, cs:stderr
    MOV edx, 45h
    MOV esi, 1
    MOV edi, offset aPuttygenCannot_2
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_403057:
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_41FA10
    JMP loc_402991
loc_403067:
    TEST rbp, rbp
    JZ loc_40343E
loc_403070:
    MOV rdi, [rbp+38h]
    CALL sub_40B5E0
    MOV rdi, [rsp+1A8h+src]
    CALL sub_40ACA0
    MOV [rbp+38h], rax
    JMP loc_402A43
loc_40308C:
    CMP [rsp+1A8h+var_198], 4
    SETZ dl
    CMP r14d, 5
    MOV eax, edx
    JNZ loc_403495
loc_4030A0:
    TEST dl, dl
    JZ loc_403495
loc_4030A8:
    MOV r14d, 5
    JMP loc_402B72
loc_4030B3:
    CMP byte ptr [r8+2], 73h
    JNZ loc_40235B
loc_4030BE:
    CMP byte ptr [r8+3], 0
    JZ loc_402BDE
loc_4030C9:
    JMP loc_40235B
loc_4030CE:
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_41DB60
    JMP loc_402991
loc_4030DE:
    MOV rcx, r8
    MOV edx, offset aPuttygenUnknow
    JMP loc_4023E9
loc_4030EB:
    MOV rdi, [rsp+1A8h+var_F0]
    XOR ebx, ebx
    CALL sub_40B5E0
    JMP loc_402A0E
loc_4030FF:
    MOV rcx, cs:stderr
    MOV edx, 3Ch
    MOV esi, 1
    MOV edi, offset aPuttygenFailed
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_403124:
    MOV edx, offset aEd25519KeyYMD
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_40315D:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 38h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_41B740
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV qword ptr [rax], offset off_434040
    JMP loc_402F3B
loc_4031CA:
    MOV edx, offset aDsaKeyYMD
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_403207:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 28h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_416B10
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV qword ptr [rax], offset off_433420
    JMP loc_402F3B
loc_403274:
    CMP [rsp+1A8h+var_E8], 0
    JNZ loc_402FA0
loc_403283:
    MOV [rsp+1A8h+var_E8], offset aUnknownError
    JMP loc_402FA0
loc_403294:
    MOV esi, 40h
    MOV edi, 1
    CALL sub_40AC50
    CMP [rsp+1A8h+var_14C], 0
    MOV rbp, rax
    JNZ loc_4033B4
loc_4032B1:
    LEA r8, [rsp+1A8h+var_E8]
    LEA rdx, [rsp+1A8h+var_FC]
    LEA rsi, [rsp+1A8h+tp]
    MOV rcx, r12
    MOV rdi, rbx
    CALL sub_41DC00
    MOV r12, qword ptr [rsp+1A8h+tp.tm_sec]
    MOV ebx, eax
    MOV eax, [rsp+1A8h+var_FC]
    LEA rdx, [rbp+10h]
    LEA esi, [rax-4]
    LEA rdi, [r12+4]
    CALL sub_410E80
    TEST eax, eax
    JS loc_4033D0
loc_4032FE:
    MOV esi, [rsp+1A8h+var_FC]
    ADD eax, 4
    LEA rdx, [rbp+8]
    SUB esi, eax
    CDQE 
    LEA rdi, [r12+rax]
    CALL sub_410E80
    TEST eax, eax
    JS loc_4033D0
loc_403321:
    MOV rdi, [rsp+1A8h+var_F8]
    CALL sub_40ACA0
    MOV qword ptr [rbp+18h], 0
    MOV [rbp+38h], rax
    MOV qword ptr [rbp+20h], 0
    MOV qword ptr [rbp+28h], 0
    MOV qword ptr [rbp+30h], 0
loc_403352:
    TEST ebx, ebx
    JLE loc_403274
loc_40335A:
    XOR r14d, r14d
    XOR ebx, ebx
    JMP loc_402A10
loc_403364:
    XOR edx, edx
    MOV esi, offset aTmp
    MOV rdi, r13
    XOR eax, eax
    CALL sub_40ACE0
    MOV [rsp+1A8h+new], r13
    MOV r15, rax
    JMP loc_402B81
loc_403382:
    MOV rcx, cs:stderr
    MOV edx, 3Ch
    MOV esi, 1
    MOV edi, offset aPuttygenConver
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_4033A7:
    MOV rcx, r8
    MOV edx, offset aPuttygenUnknow_0
    JMP loc_4023E9
loc_4033B4:
    MOV rdx, [rsp+1A8h+var_168]
    LEA rcx, [rsp+1A8h+var_E8]
    MOV rdi, rbx
    MOV rsi, rax
    CALL sub_41DA60
    MOV ebx, eax
    JMP loc_403352
loc_4033D0:
    MOV [rsp+1A8h+var_E8], offset aSsh1PublicKeyB
    JMP loc_403321
loc_4033E1:
    MOV ecx, offset function
    MOV edx, 3D5h
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
loc_4033FA:
    TEST rbp, rbp
    JZ loc_4034AD
loc_403403:
    MOV rdx, r12
    MOV rsi, rbp
    MOV rdi, r13
    CALL sub_41DEE0
    TEST eax, eax
    JNZ loc_402D06
loc_403419:
    MOV rcx, cs:stderr
    MOV edx, 2Bh
    MOV esi, 1
    MOV edi, offset aPuttygenUnable_1
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_40343E:
    MOV ecx, offset function
    MOV edx, 38Ah
    MOV esi, offset file
    MOV edi, offset aSsh1key
    CALL ___assert_fail
loc_403457:
    MOV ecx, offset function
    MOV edx, 37Bh
    MOV esi, offset file
    MOV edi, (offset aModMod00+0Fh)
    CALL ___assert_fail
loc_403470:
    MOV rcx, cs:stderr
    MOV edx, 3Ch
    MOV esi, 1
    MOV edi, offset aPuttygenConver_0
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_403495:
    CMP r14d, 6
    JNZ loc_4034C6
loc_40349B:
    CMP [rsp+1A8h+var_198], 5
    JNZ loc_4034C6
loc_4034A2:
    MOV r14d, 6
    JMP loc_402B72
loc_4034AD:
    MOV ecx, offset function
    MOV edx, 3CEh
    MOV esi, offset file
    MOV edi, offset aSsh1key
    CALL ___assert_fail
loc_4034C6:
    CMP r14d, 7
    JNZ loc_4028E1
loc_4034D0:
    CMP [rsp+1A8h+var_198], 6
    JZ loc_402B72
loc_4034DB:
    JMP loc_4028E1
loc_4034E0:
    MOV ecx, offset function
    MOV edx, 26Bh
    MOV esi, offset file
    MOV edi, offset a0ShouldNeverSe
    CALL ___assert_fail
loc_4034F9:
    TEST al, al
    JNZ loc_40351A
loc_4034FD:
    TEST r12b, r12b
    JNZ loc_40351A
loc_403502:
    MOV eax, [rsp+1A8h+var_198]
    MOV rdi, [rsp+1A8h+new]
    SUB eax, 5
    MOV r15, rdi
    CMP eax, 1
    JA loc_402906
loc_40351A:
    MOV rcx, cs:stderr
    MOV edx, 29h
    MOV esi, 1
    MOV edi, offset aPuttygenNeedTo
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_40353F:
    MOV edx, offset aEc
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_40357C:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 38h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_41B6B0
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV rax, [rbp+0]
    MOV [rbx], rax
    JMP loc_402F3B
loc_4035E9:
    CMP rbx, offset unk_6425B0
    JNZ loc_403283
loc_4035F6:
    MOV [rsp+1A8h+var_E8], offset aWrongPassphras
    JMP loc_402FA0
loc_403607:
    MOV rdi, cs:stdout
    MOV rcx, r14
    MOV edx, (offset aPuttygenSS+0Dh)
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_40261C
loc_403627:
    TEST r14, r14
    JZ loc_4036B7
loc_403630:
    MOV esi, [rsp+1A8h+tp.tm_sec]
    MOV rdi, r14
    CALL sub_4207C0
    MOV r14, rax
    JMP loc_4025DF
loc_403647:
    CALL ___stack_chk_fail
loc_40364C:
    MOV rdi, r8
    MOV esi, offset aVersion
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JZ loc_402770
loc_40366B:
    MOV rdi, r8
    MOV esi, offset aPgpfp
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4020F9
loc_40368A:
    TEST r12, r12
    JZ loc_402AE5
loc_403693:
    MOV rdi, cs:stderr
    MOV rcx, r8
    MOV edx, offset aPuttygenOption
    MOV esi, 1
    MOV r14d, 1
    CALL ___fprintf_chk
    JMP def_402078
loc_4036B7:
    MOV ecx, offset function
    MOV edx, 40Fh
    MOV esi, offset file
    MOV edi, offset aSsh2blob
    CALL ___assert_fail
loc_4036D0:
    MOV ecx, offset function
    MOV edx, 38Eh
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
loc_4036E9:
    TEST rbp, rbp
    JZ loc_4037D8
loc_4036F2:
    MOV esi, 1
    MOV edi, 80h
    CALL sub_40AC50
    MOV rdx, rbp
    MOV esi, 80h
    MOV rdi, rax
    MOV r14, rax
    CALL sub_4227D0
    JMP loc_4025DF
loc_403719:
    MOV ecx, offset function
    MOV edx, 2FEh
    MOV esi, offset file
    MOV edi, offset aInfileNull
    CALL ___assert_fail
loc_403732:
    XOR edi, edi
    CALL sub_40A620
    MOV edi, offset src
    MOV r13, rax
    MOV dword ptr [rax], 0
    CALL sub_40ACA0
    MOV edi, offset aEnterPassphras
    MOV [r13+8], rax
    CALL sub_40ACA0
    XOR edx, edx
    MOV rsi, rax
    MOV rdi, r13
    CALL sub_40B090
    MOV edi, offset aReEnterPassphr
    CALL sub_40ACA0
    XOR edx, edx
    MOV rsi, rax
    MOV rdi, r13
    CALL sub_40B090
    XOR edx, edx
    XOR esi, esi
    MOV rdi, r13
    CALL sub_429720
    TEST eax, eax
    JS loc_40383A
loc_403792:
    JZ loc_40381E
loc_403798:
    MOV rax, [r13+30h]
    MOV rdx, [rax]
    MOV rax, [rax+8]
    MOV r12, [rdx+10h]
    MOV rsi, [rax+10h]
    MOV rdi, r12
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4037F1
loc_4037B7:
    MOV rdi, r12
    CALL sub_40ACA0
    MOV rdi, r13
    MOV r12, rax
    CALL sub_40A690
    TEST r12, r12
    JZ loc_402E19
loc_4037D3:
    JMP loc_402A6B
loc_4037D8:
    MOV ecx, offset function
    MOV edx, 407h
    MOV esi, offset file
    MOV edi, offset aSsh1key
    CALL ___assert_fail
loc_4037F1:
    MOV rdi, r13
    CALL sub_40A690
    MOV rcx, cs:stderr
    MOV edx, 23h
    MOV esi, 1
    MOV edi, offset aPuttygenPassph
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_40381E:
    MOV rdi, r13
    CALL sub_40A690
    MOV edi, offset s
    CALL _perror
    MOV eax, 1
    JMP loc_4024F7
loc_40383A:
    MOV ecx, offset function
    MOV edx, 3A8h
    MOV esi, offset file
    MOV edi, offset aRet0
    CALL ___assert_fail
loc_403853:
    XOR edi, edi
    CALL sub_40A620
    MOV edi, (offset src+4)
    MOV rbp, rax
    MOV dword ptr [rax], 0
    CALL sub_40ACA0
    MOV edi, offset aEnterPassphras_0
    MOV [rbp+8], rax
    CALL sub_40ACA0
    XOR edx, edx
    MOV rsi, rax
    MOV rdi, rbp
    CALL sub_40B090
    XOR edx, edx
    XOR esi, esi
    MOV rdi, rbp
    CALL sub_429720
    TEST eax, eax
    JS loc_4038EC
loc_403898:
    JNZ loc_4038CA
loc_40389A:
    MOV rdi, rbp
    CALL sub_40A690
    MOV edi, offset aPuttygenUnable_3
    CALL _perror
    JMP loc_4024F2
loc_4038B1:
    CALL sub_40B5E0
    CMP [rsp+1A8h+var_E8], 0
    JNZ loc_402FA0
loc_4038C5:
    JMP loc_403283
loc_4038CA:
    MOV rax, [rbp+30h]
    MOV rax, [rax]
    MOV rdi, [rax+10h]
    CALL sub_40ACA0
    MOV rdi, rbp
    MOV [rsp+1A8h+var_168], rax
    CALL sub_40A690
    JMP loc_4029B0
loc_4038EC:
    MOV ecx, offset function
    MOV edx, 315h
    MOV esi, offset file
    MOV edi, offset aRet0
    CALL ___assert_fail
loc_403905:
    MOV rcx, cs:stderr
    MOV edx, 1Fh
    MOV esi, 1
    MOV edi, offset aPuttygenUnable_4
    CALL _fwrite
    JMP loc_4024F2
loc_403925:
    MOV esi, 6
    JMP loc_402CF0
loc_40392F:
    MOV ecx, offset function
    MOV edx, 424h
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
loc_403948:
    MOV ecx, offset function
    MOV edx, 423h
    MOV esi, offset file
    MOV edi, offset aSshver2
    CALL ___assert_fail
loc_403961:
    MOV rsi, [rsp+1A8h+var_F8]
    JMP loc_402C99
loc_40396E:
    TEST rbx, rbx
    JZ loc_4039CF
loc_403973:
    MOV rax, [rbx]
    MOV rdi, [rbx+8]
    LEA rsi, [rsp+1A8h+tp]
    CALL qword ptr [rax+18h]
    CMP [rsp+1A8h+var_198], 1
    MOV r14, rax
    JZ loc_4039BD
loc_40398F:
    MOV ecx, [rsp+1A8h+tp.tm_sec]
    MOV r8d, 0Ah
    JMP loc_402C95
loc_4039A1:
    MOV rsi, rbp
    MOV rdi, r13
    CALL sub_420510
    JMP loc_402CA4
loc_4039B1:
    MOV r13, cs:stdout
    JMP loc_402C61
loc_4039BD:
    MOV ecx, [rsp+1A8h+tp.tm_sec]
    MOV r8d, 9
    JMP loc_402C95
loc_4039CF:
    MOV ecx, offset function
    MOV edx, 3F0h
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
```
Output:JNZ loc_402B40
loc_402734:
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc
############
```assembly
loc_429F30:
    PUSH rbp
    PUSH rbx
    XOR eax, eax
    MOV esi, 3
    MOV ebp, edi
    SUB rsp, 8
    CALL _fcntl
    TEST eax, eax
    JS loc_429F6F
loc_429F48:
    MOV edx, eax
    MOV ebx, eax
    MOV esi, 4
    OR dh, 8
    XOR eax, eax
    MOV edi, ebp
    CALL _fcntl
    TEST eax, eax
    JS loc_429FA2
loc_429F61:
    MOV eax, ebx
    ADD rsp, 8
    AND eax, 800h
    POP rbx
    POP rbp
    RETN 
loc_429F6F:
    CALL ___errno_location
    MOV edi, [rax]
    CALL _strerror
    MOV ecx, ebp
    MOV r8, rax
    MOV edx, offset aDFcntlFGetflS
loc_429F85:
    MOV rdi, cs:stderr
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV edi, 1
    CALL _exit
loc_429FA2:
    CALL ___errno_location
    MOV edi, [rax]
    CALL _strerror
    MOV ecx, ebp
    MOV r8, rax
    MOV edx, offset aDFcntlFSetflS
    JMP loc_429F85
```
Output:```json
{
  "signature": "32-bit",
  "dataFlow": {
    "inputParams": ["int", "int", "int"],
    "outputParams": ["int", "int", "int"],
    "returnType": "int",
    "constantsAndMagicNumbers": [
      "0x5B8",
      "0x23",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x80000000",
      "0xFF",
      "0x8000000
############
```assembly
loc_4295E0:
    SUB rsp, 58h
    MOV edx, cs:dword_642B24
    MOV rax, fs:28h
    MOV [rsp+58h+var_10], rax
    XOR eax, eax
    TEST edx, edx
    JNZ loc_429640
loc_4295FE:
    MOV rcx, cs:stderr
    MOV edx, 165h
    MOV esi, 1
    MOV edi, offset aYouAreLoadingA
    CALL _fwrite
    MOV eax, cs:dword_642B24
    TEST eax, eax
    JZ loc_42962B
loc_429623:
    MOV rdi, rsp
    CALL sub_428B90
loc_42962B:
    MOV rax, [rsp+58h+var_10]
    XOR rax, fs:28h
    JNZ loc_42964A
loc_42963B:
    ADD rsp, 58h
    RETN 
loc_429640:
    MOV rdi, rsp
    CALL sub_428B60
    JMP loc_4295FE
loc_42964A:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "signature": "loc_4295E0",
      "dataFlow": [
        {
          "opCategory": "SUB",
          "operands": [
            {
              "category": "rsp",
              "value": 58
            },
            {
              "category": "edx",
              "value": 0x642B24
            },
            {
              "category": "rax",
              "value": 0x00000000
            },
            {
              "category": "rsp+58h+var_10",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "MOV",
          "operands": [
            {
              "category": "edx",
              "value": 0x642B24
            },
            {
              "category": "rax",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "XOR",
          "operands": [
            {
              "category": "eax",
              "value": 0x00000000
            },
            {
              "category": "rax",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "TEST",
          "operands": [
            {
              "category": "edx",
              "value": 0x642B24
            },
            {
              "category": "edx",
              "value": 0x642B24
            }
          ]
        },
        {
          "opCategory": "JNZ",
          "operands": [
            {
              "category": "loc_429640"
            }
          ]
        },
        {
          "opCategory": "LOC",
          "operands": [
            {
              "category": "rsp",
              "value": 58
            },
            {
              "category": "var_10",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "MOV",
          "operands": [
            {
              "category": "rcx",
              "value": 0x642B24
            },
            {
              "category": "edx",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "XOR",
          "operands": [
            {
              "category": "eax",
              "value": 0x00000000
            },
            {
              "category": "rax",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "TEST",
          "operands": [
            {
              "category": "edx",
              "value": 0x642B24
            },
            {
              "category": "edx",
              "value": 0x642B24
            }
          ]
        },
        {
          "opCategory": "JNZ",
          "operands": [
            {
              "category": "loc_42962B"
            }
          ]
        },
        {
          "opCategory": "LOC",
          "operands": [
            {
              "category": "rsp",
              "value": 58
            },
            {
              "category": "var_10",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "MOV",
          "operands": [
            {
              "category": "rdi",
              "value": 0x00000000
            },
            {
              "category": "rsp",
              "value": 58
            }
          ]
        },
        {
          "opCategory": "CALL",
          "operands": [
            {
              "category": "sub_428B90",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "JMP",
          "operands": [
            {
              "category": "loc_4295FE",
              "value": 0x00000000
            }
          ]
        },
        {
          "opCategory": "CALL",
          "operands": [
            {
              "category": "___stack_chk_fail",
              "value": 0x00000000
            }
          ]
        }
      ],
      "
############
```assembly
loc_401860:

loc_429A80:
    XOR edi, edi
    JMP _isatty
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "value": {
        "input_count": 2,
        "input_types": ["Integer", "Pointer"],
        "return_type": "None"
      }
    },
    {
      "category": "Core Logic & Operations",
      "value": {
        "dominant_operation_categories": ["Arithmetic", "Bitwise"],
        "loop_indicators": false,
        "number_of_distinct_subroutine_call_targets": 0,
        "use_of_indexed_addressing_modes": false,
        "constants_and_magic_numbers": ["0x5B8", "0x23"],
        "side_effects": false,
        "interactions": false,
        "inferred_algorithm": "CRC32 Calculation"
      }
    },
    {
      "category": "Constants & 'Magic Numbers'",
      "value": {
        "presence_of_notable_integer_constants": ["0xDEADBEEF", "0x80000000"],
        "presence_of_notable_floats_doubles": ["0.0", "0.1", "1.0"],
        "count_of_distinct_immediate_values": 3
      }
    },
    {
      "category": "Side Effects & Interactions",
      "value": {
        "likely_modifies_input_parameters": true,
        "likely_modifies_global_state": true,
        "likely_performs_memory_allocation/Deallocation": true,
        "likely Performs I/O Operations": true
      }
    },
    {
      "category": "Inferred Algorithm",
      "value": "CRC32 Calculation"
    }
  ]
}
```
############
```assembly
loc_42B980:
    PUSH r15
    PUSH r14
    MOV r14, rdi
    PUSH r13
    PUSH r12
    MOV edi, 2
    PUSH rbp
    PUSH rbx
    MOV r15, rcx
    SUB rsp, 28h
    MOV [rsp+58h+var_44], esi
    XOR esi, esi
    MOV [rsp+58h+var_40], rdx
    CALL sub_42A7D0
    MOV esi, (offset aPuttyKeyFormat+17h)
    MOV rdi, rax
    MOV r12, rax
    CALL _fopen
    TEST rax, rax
    MOV rbp, rax
    JZ loc_42BAC8
loc_42B9C5:
    XOR esi, esi
    MOV edi, 1
    CALL sub_42A7D0
    MOV esi, (offset aUnsupportedCip+11h)
    MOV rdi, rax
    MOV [rsp+58h+new], rax
    CALL _fopen
    MOV edx, [rsp+58h+var_44]
    MOV rsi, [rsp+58h+var_40]
    MOV r8, r15
    MOV rbx, rax
    MOV rcx, r14
    XOR eax, eax
    MOV edi, offset aSDSS
    CALL sub_40B290
    TEST byte ptr [rax], 0DFh
    MOV r15, rax
    JZ loc_42BB20
loc_42BA0D:
    XOR r14d, r14d
loc_42BA10:
    ADD r14, 1
    TEST byte ptr [r15+r14], 0DFh
    JNZ loc_42BA10
loc_42BA1B:
    ADD r14d, 1
loc_42BA1F:
    TEST rbx, rbx
    MOVSXD r14, r14d
    JNZ loc_42BA38
loc_42BA27:
    JMP loc_42BA78
loc_42BA30:
    MOV rdi, r13
    CALL sub_40B5E0
loc_42BA38:
    MOV rdi, rbx
    CALL sub_40B500
    TEST rax, rax
    MOV r13, rax
    JZ loc_42BA70
loc_42BA48:
    MOV rdx, r14
    MOV rsi, r15
    MOV rdi, r13
    CALL _strncmp
    TEST eax, eax
    JZ loc_42BA30
loc_42BA5A:
    MOV rsi, rbp
    MOV rdi, r13
    CALL _fputs
    JMP loc_42BA30
loc_42BA70:
    MOV rdi, rbx
    CALL _fclose
loc_42BA78:
    MOV rsi, rbp
    MOV rdi, r15
    CALL _fputs
    MOV rdi, rbp
    CALL _fclose
    MOV rsi, [rsp+58h+new]
    MOV rdi, r12
    CALL _rename
    TEST eax, eax
    JS loc_42BAF8
loc_42BA9C:
    MOV rdi, r12
    CALL sub_40B5E0
    MOV rdi, [rsp+58h+new]
    CALL sub_40B5E0
    MOV rdi, r15
loc_42BAB1:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    JMP sub_40B5E0
loc_42BAC8:
    CALL ___errno_location
    MOV edi, [rax]
    MOV r13, rax
    CMP edi, 2
    JZ loc_42BB2B
loc_42BAD7:
    CALL _strerror
    MOV edi, offset aUnableToStoreH
    MOV rdx, rax
    MOV rsi, r12
    XOR eax, eax
    CALL sub_403E10
    MOV rdi, r12
    JMP loc_42BAB1
loc_42BAF8:
    CALL ___errno_location
    MOV edi, [rax]
    CALL _strerror
    MOV rdx, [rsp+58h+new]
    MOV rcx, rax
    MOV rsi, r12
    MOV edi, offset aUnableToStoreH_0
    XOR eax, eax
    CALL sub_403E10
    JMP loc_42BA9C
loc_42BB20:
    MOV r14d, 1
    JMP loc_42BA1F
loc_42BB2B:
    XOR esi, esi
    XOR edi, edi
    CALL sub_42A7D0
    MOV esi, 1C0h
    MOV rdi, rax
    MOV rbx, rax
    CALL sub_42A2A0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_42BB73
loc_42BB4C:
    MOV rsi, rax
    MOV edi, offset aUnableToStoreH_1
    XOR eax, eax
    CALL sub_403E10
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV rdi, r12
    JMP loc_42BAB1
loc_42BB73:
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV esi, (offset aPuttyKeyFormat+17h)
    MOV rdi, r12
    CALL _fopen
    TEST rax, rax
    MOV rbp, rax
    JNZ loc_42B9C5
loc_42BB94:
    MOV edi, [r13+0]
    JMP loc_42BAD7
```
Output:```json
{
  "features": {
    "I. Basic Signature & Data Flow":
      {
        "input_parameter_count": 1,
        "input_parameter_types": ["Integer"],
        "return_value_type": "Integer",
        "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
        "loop_indicators": true,
        "number_of_distinct_subroutine_call_targets": 2,
        "use_ofIndexedAddressingModes": false
      },
    "II. Core Logic & Operations":
      {
        "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
        "loop_indicators": true,
        "number_of_distinct_subroutine_call_targets": 1,
        "use_ofIndexedAddressingModes": false
      },
    "III. Constants & "Magic Numbers":
      {
        "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
        "presence_of_notable_floats_doubles": ["0x80000000", "0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0xDEADBEEF", "0x80000000"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42B980"],
        "presence_of_notable_floats_doubles": ["0x80000000"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42B9C5"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA0D"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA10"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA1B"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA27"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA30"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA38"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA48"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA5A"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA6C"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA70"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA73"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence_of_notable_integer_constants": ["0x42BA87"],
        "presence_of_notable_floats_doubles": ["0xFF"],
        "count_of_distinct_immediate_values": 1
      },
      {
        "presence
############
```assembly
loc_418A30:
    MOV rcx, [rdi+8]
    XOR eax, eax
    CMP dword ptr [rcx], 2
    JZ loc_418A40
loc_418A3B:
    RETN 
loc_418A40:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV ebx, edx
    SUB rsp, 18h
    MOV rdi, [rdi+18h]
    CALL sub_410F00
    LEA r12d, [rax+0Eh]
    ADD eax, 7
    MOV rdi, [r15+30h]
    CMOVNS r12d, eax
    MOV eax, r12d
    SAR eax, 3
    MOV r14d, eax
    MOV [rsp+48h+var_40], eax
    CALL sub_410F00
    LEA r13d, [rax+0Eh]
    ADD eax, 7
    CMOVNS r13d, eax
    SAR r13d, 3
    LEA eax, [r13+r14*2+8]
    CMP ebx, eax
    MOV [rsp+48h+var_3C], eax
    JL loc_418BDD
loc_418AA0:
    MOV eax, r12d
    MOV [rbp+3], r14b
    LEA rbx, [rbp+4]
    SAR eax, 1Bh
    MOV [rbp+0], al
    MOV eax, r12d
    SAR r12d, 0Bh
    MOV [rbp+2], r12b
    LEA r12d, [r14-1]
    SAR eax, 13h
    MOV [rbp+1], al
    TEST r12d, r12d
    JLE loc_418BEC
loc_418ACF:
    XOR r14d, r14d
    NOP word ptr [rax+rax+00h]
loc_418AD8:
    MOV rdi, [r15+18h]
    MOV esi, r14d
    CALL sub_410FE0
    MOV [rbp+r14+4], al
    ADD r14, 1
    CMP r12d, r14d
    JG loc_418AD8
loc_418AF2:
    MOV eax, [rsp+48h+var_40]
    MOV esi, r12d
    SUB eax, 2
    LEA rbx, [rbx+rax+1]
loc_418B01:
    MOV rdi, [r15+18h]
    CALL sub_410FE0
    AND eax, 7Fh
    XOR esi, esi
    MOV [rbx], al
    MOV rdi, [r15+10h]
    CALL sub_411020
    MOV ecx, [rsp+48h+var_40]
    SHL eax, 7
    OR [rbx], al
    ADD rbx, 5
    MOV eax, ecx
    ADD eax, r13d
    MOV edx, eax
    SAR edx, 18h
    MOV [rbx-4], dl
    MOV edx, eax
    SAR eax, 8
    MOV [rbx-2], al
    MOV eax, ecx
    SAR edx, 10h
    ADD eax, r13d
    MOV [rbx-3], dl
    MOV [rbx-1], al
    TEST r13d, r13d
    JLE loc_418B78
loc_418B4F:
    XOR ebp, ebp
    NOP dword ptr [rax+00000000h]
loc_418B58:
    MOV rdi, [r15+30h]
    MOV esi, ebp
    CALL sub_410FE0
    MOV [rbx+rbp], al
    ADD rbp, 1
    CMP r13d, ebp
    JG loc_418B58
loc_418B6F:
    LEA eax, [r13-1]
    LEA rbx, [rbx+rax+1]
loc_418B78:
    TEST r12d, r12d
    JLE loc_418BF3
loc_418B7D:
    MOV rbp, rbx
    MOV r14d, r12d
    XOR r13d, r13d
    NOP word ptr [rax+rax+00000000h]
loc_418B90:
    MOV rdi, [r15+18h]
    MOV esi, r13d
    ADD r13d, 1
    ADD rbp, 1
    CALL sub_410FE0
    MOV [rbp-1], al
    CMP r13d, r12d
    JNZ loc_418B90
loc_418BAC:
    MOV eax, [rsp+48h+var_40]
    SUB eax, 2
    LEA rbx, [rbx+rax+1]
loc_418BB8:
    MOV rdi, [r15+18h]
    MOV esi, r14d
    CALL sub_410FE0
    AND eax, 7Fh
    XOR esi, esi
    MOV [rbx], al
    MOV rdi, [r15+10h]
    CALL sub_411020
    SHL eax, 7
    OR [rbx], al
    MOV eax, [rsp+48h+var_3C]
loc_418BDD:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_418BEC:
    XOR esi, esi
    JMP loc_418B01
loc_418BF3:
    XOR r14d, r14d
    JMP loc_418BB8
```
Output:```json
{
  "features": {
    "inputParameterCount": 1,
    "inputParameterTypes": ["Integer"],
    "returnValueType": "Integer",
    "dominantOperationCategories": ["Arithmetic", "Comparison", "DataMovement", "ConditionalBranching"],
    "constantsAndMagicNumbers": ["2", "7F", "0x80000000"],
    "subroutineCallTargets": ["loc_418A30", "loc_418A3B", "loc_418A40"],
    "controlFlow": ["JZ", "JMP", "NE"]
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_429AB0:
    PUSH r14
    PUSH r13
    MOVSXD rdi, edi
    PUSH r12
    PUSH rbp
    MOV r13, rsi
    PUSH rbx
    MOV esi, 1
    MOV r14, rdi
    CALL sub_40AC50
    TEST r13, r13
    MOV rbp, rax
    MOV eax, offset aDevRandom
    CMOVZ r13, rax
    XOR esi, esi
    XOR eax, eax
    MOV rdi, r13
    CALL _open
    TEST eax, eax
    JS loc_429B84
loc_429AEE:
    XOR ebx, ebx
    TEST r14d, r14d
    MOV r12d, eax
    JG loc_429B07
loc_429AF8:
    JMP loc_429B70
loc_429B00:
    ADD ebx, eax
    CMP r14d, ebx
    JLE loc_429B70
loc_429B07:
    MOV edx, r14d
    MOVSXD rsi, ebx
    MOV edi, r12d
    SUB edx, ebx
    ADD rsi, rbp
    MOVSXD rdx, edx
    CALL _read
    TEST eax, eax
    JNS loc_429B00
loc_429B21:
    MOV edi, r12d
    CALL _close
    MOV rdi, rbp
    CALL sub_40B5E0
    CALL ___errno_location
    MOV edi, [rax]
    CALL _strerror
    MOV rcx, r13
    MOV r8, rax
    MOV edx, offset aPuttygenSReadS
loc_429B48:
    MOV rdi, cs:stderr
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    POP rbx
    XOR eax, eax
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_429B70:
    MOV edi, r12d
    CALL _close
    POP rbx
    MOV rax, rbp
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_429B84:
    MOV rdi, rbp
    CALL sub_40B5E0
    CALL ___errno_location
    MOV edi, [rax]
    CALL _strerror
    MOV rcx, r13
    MOV r8, rax
    MOV edx, offset aPuttygenSOpenS
    JMP loc_429B48
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 3,
      "categories": ["Integer", "Pointer", "Boolean"]
    },
    {
      "name": "Core Logic & Operations",
      "count": 6,
      "categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall"
      ]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "count": 4,
      "categories": ["Integer", "Floating-Point", "String", "Magic Numbers"]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 4,
      "categories": ["Modifies Input Parameters", "Likely Modifies Global State", "Likely Performs Memory Allocation/Deallocation", "Likely Performs I/O Operations"]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_411C80:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    MOV rdi, cs:off_6422D0
    PUSH rbx
    CALL sub_410860
    MOVZX ebx, byte ptr [rbp+0]
    MOV r12, rax
    TEST bl, bl
    JZ loc_411D28
loc_411CA6:
    CALL ___ctype_b_loc
    MOV r14, rax
    JMP loc_411D08
loc_411CB0:
    MOV rsi, cs:off_6422C0
    XOR edx, edx
    MOV rdi, r12
    ADD rbp, 1
    CALL sub_411660
    MOVSX edi, byte ptr [rbp-1]
    MOV rbx, rax
    SUB edi, 30h
    MOVSXD rdi, edi
    CALL sub_411C60
    MOV rdi, r12
    MOV r13, rax
    CALL sub_4108A0
    MOV rsi, r13
    MOV rdi, rbx
    CALL sub_4119D0
    MOV rdi, rbx
    MOV r12, rax
    CALL sub_4108A0
    MOV rdi, r13
    CALL sub_4108A0
    MOVZX ebx, byte ptr [rbp+0]
    TEST bl, bl
    JZ loc_411D28
loc_411D08:
    MOV rax, [r14]
    TEST byte ptr [rax+rbx*2+1], 8
    JNZ loc_411CB0
loc_411D12:
    MOV rdi, r12
    CALL sub_4108A0
    POP rbx
    XOR eax, eax
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_411D28:
    POP rbx
    MOV rax, r12
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 2,
      "types": [
        "Integer",
        "Pointer"
      ]
    },
    {
      "name": "Core Logic & Operations",
      "count": 7,
      "types": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return"
      ]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "count": 1,
      "types": [
        "Integer",
        "Floating-Point"
      ]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 3,
      "types": [
        "Likely Modifies Input Parameters",
        "Likely Modifies Global State",
        "Likely Performs Memory Allocation/Deallocation"
      ]
    },
    {
      "name": "Inferred Algorithm",
      "count": 2,
      "types": [
        "CRC32 Calculation",
        "String Length Calculation",
        "Memcpy",
        "XOR Cipher"
      ]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_41E1F0:

loc_41E630:
    PUSH rbx
    MOV rbx, rdi
    CALL _strlen
    MOV rsi, rbx
    MOV edi, eax
    POP rbx
    JMP sub_41E1F0
```
Output:```json
{
  "features": {
    "basic_signature": [
      1, 2, 3
    ],
    "data_flow": [
      "Arithmetic",
      "Bitwise",
      "Comparison",
      "DataMovement",
      "ConditionalBranching",
      "SubroutineCall",
      "Return"
    ],
    "loop_indicators": [
      true,
      false
    ],
    "number_of_distinct_subroutine_call_targets": 1,
    "use_of_indexed_addressing_modes": true,
    "constants_and_magic_numbers": [
      "0x72",
      "0x81",
      "0x21"
    ],
    "side_effects": [
      true,
      false,
      true,
      true
    ],
    "inferred_algorithm": "CRC32 Calculation"
  }
}
```
############
```assembly
loc_411F61:
    MOV rbx, [rsp+0A8h+var_58]
    MOV r14, rsi
    MOV rsi, rbx
    CALL sub_411EE0
    MOV [rsp+0A8h+var_68], rax
    MOV rax, [rbx]
    MOV esi, 8
    MOV rbx, rax
    MOV [rsp+0A8h+var_70], rax
    MOV r12d, eax
    CDQE 
    MOV rdi, rax
    MOV [rsp+0A8h+var_60], rax
    CALL sub_40AC50
    MOV [rsp+0A8h+var_A8], rax
    XOR eax, eax
    TEST ebx, ebx
    MOV rsi, [rsp+0A8h+var_A8]
    MOV rcx, [rsp+0A8h+var_58]
    JLE loc_411FC7
loc_411FAB:
    NOP dword ptr [rax+rax+00h]
loc_411FB0:
    MOV rdx, [rcx]
    SUB rdx, rax
    MOV rdx, [rcx+rdx*8]
    MOV [rsi+rax*8], rdx
    ADD rax, 1
    CMP r12d, eax
    JG loc_411FB0
loc_411FC7:
    MOV rdi, [rsp+0A8h+var_60]
    MOV esi, 8
    CALL sub_40AC50
    MOV [rsp+0A8h+var_80], rax
    MOV rax, [rsp+0A8h+var_68]
    MOV ecx, dword ptr [rsp+0A8h+var_70]
    MOV rax, [rax]
    SUB ecx, eax
    TEST ecx, ecx
    JLE loc_412018
loc_411FED:
    MOV rbx, [rsp+0A8h+var_80]
    LEA edx, [rcx-1]
    LEA rdx, [rbx+rdx*8+8]
    MOV rax, rbx
    NOP dword ptr [rax]
loc_412000:
    MOV qword ptr [rax], 0
    ADD rax, 8
    CMP rax, rdx
    JNZ loc_412000
loc_412010:
    MOV rax, [rsp+0A8h+var_68]
    MOV rax, [rax]
loc_412018:
    TEST eax, eax
    JLE loc_412051
loc_41201C:
    MOV rbx, [rsp+0A8h+var_80]
    MOV rdi, [rsp+0A8h+var_68]
    MOVSXD rcx, ecx
    XOR edx, edx
    LEA rsi, [rbx+rcx*8]
    XOR ecx, ecx
    NOP dword ptr [rax+00000000h]
loc_412038:
    SUB rax, rdx
    ADD ecx, 1
    MOV rax, [rdi+rax*8]
    MOV [rsi+rdx*8], rax
    MOV rax, [rdi]
    ADD rdx, 1
    CMP ecx, eax
    JL loc_412038
loc_412051:
    MOV eax, dword ptr [rsp+0A8h+var_70]
    MOV esi, 8
    ADD eax, eax
    MOVSXD r13, eax
    MOV r15d, eax
    MOV [rsp+0A8h+var_78], eax
    MOV rdi, r13
    CALL sub_40AC50
    MOV esi, 8
    MOV rdi, r13
    MOV rbp, rax
    CALL sub_40AC50
    TEST r15d, r15d
    MOV rbx, rax
    JLE loc_4120A8
loc_412086:
    MOV ecx, [rsp+0A8h+var_78]
    MOV rax, rbp
    LEA edx, [rcx-1]
    LEA rdx, [rbp+rdx*8+8]
    NOP dword ptr [rax]
loc_412098:
    MOV qword ptr [rax], 0
    ADD rax, 8
    CMP rax, rdx
    JNZ loc_412098
loc_4120A8:
    MOV rcx, [rsp+0A8h+var_70]
    LEA rax, ds:0[r13*8]
    XOR edx, edx
    MOV [rsp+0A8h+var_48], rax
    MOV qword ptr [rbp+rax-8], 1
    CMP ecx, 32h
    MOV eax, ecx
    JLE loc_4123CF
loc_4120D0:
    MOV ecx, eax
    SAR ecx, 1
    SUB eax, ecx
    ADD eax, 1
    CMP eax, 32h
    LEA edx, [rdx+rax*4]
    JG loc_4120D0
loc_4120E1:
    MOVSXD rdi, edx
    LEA rax, ds:0[rdi*8]
    MOV [rsp+0A8h+var_50], rax
loc_4120F1:
    MOV esi, 8
    CALL sub_40AC50
    MOV rsi, [r14]
    MOV [rsp+0A8h+var_A0], rax
    XOR edi, edi
    LEA rdx, [r14+rsi*8]
    MOV ecx, esi
loc_41210B:
    MOV r15d, 3Fh
    JMP loc_41212F
loc_412118:
    MOV rax, [rdx]
    BT rax, r15
    JB loc_412133
loc_412121:
    SUB r15d, 1
    CMP r15d, 0FFFFFFFFh
    JZ loc_4123C3
loc_41212F:
    CMP edi, ecx
    JL loc_412118
loc_412133:
    MOV rax, [rsp+0A8h+var_A8]
    MOV [rsp+0A8h+var_74], edi
    MOV edx, 6
    XOR r13d, r13d
    MOV r9d, 40h
    MOV rdi, [rax]
    MOV eax, 20h
    MOV r8, rdi
    NOP dword ptr [rax+00h]
loc_412158:
    MOV ecx, r9d
    MOV r10, r8
    SUB ecx, eax
    SHR r10, cl
    TEST r10, r10
    JNZ loc_412170
loc_412168:
    MOV ecx, eax
    ADD r13d, eax
    SHL r8, cl
loc_412170:
    SAR eax, 1
    SUB edx, 1
    JNZ loc_412158
loc_412177:
    TEST r13d, r13d
    JZ loc_4121A4
loc_41217C:
    MOV ecx, r13d
    SHL rdi, cl
    CMP dword ptr [rsp+0A8h+var_70], 1
    JLE loc_4121A4
loc_412189:
    MOV rax, [rsp+0A8h+var_A8]
    MOV ecx, 40h
    SUB ecx, r13d
    MOV rax, [rax+8]
    MOV [rsp+0A8h+var_98], rax
    SHR rax, cl
    OR rdi, rax
loc_4121A4:
    MOV [rsp+0A8h+var_40], rsi
    CALL sub_40F320
    MOVSXD rcx, [rsp+0A8h+var_74]
    MOV [rsp+0A8h+var_90], rax
    MOV rsi, [rsp+0A8h+var_40]
    MOV rax, [rsp+0A8h+var_60]
    SHL rax, 3
    CMP ecx, esi
    MOV [rsp+0A8h+var_88], rcx
    MOV [rsp+0A8h+var_98], rax
    JL loc_4121F7
loc_4121D4:
    JMP loc_4122B8
loc_4121E0:
    SUB r15d, 1
    MOV rax, rbp
    MOV rbp, rbx
    CMP r15d, 0FFFFFFFFh
    MOV rbx, rax
    JZ loc_41229A
loc_4121F7:
    MOV rax, [rsp+0A8h+var_98]
    MOV r8, [rsp+0A8h+var_A0]
    MOV ecx, r12d
    MOV rdx, rbx
    LEA rdi, [rbp+rax+0]
    MOV rsi, rdi
    CALL sub_40FD10
    SUB rsp, 8
    XOR r8d, r8d
    MOV rdi, rbx
    PUSH r13
    MOV r9, [rsp+0B8h+var_90]
    MOV ecx, r12d
    MOV rdx, [rsp+0B8h+var_A8]
    MOV esi, [rsp+0B8h+var_78]
    CALL sub_40F5B0
    MOV rax, [r14]
    SUB rax, [rsp+0B8h+var_88]
    POP rsi
    POP rdi
    MOV rax, [r14+rax*8]
    BT rax, r15
    JNB loc_4121E0
loc_41224A:
    MOV rax, [rsp+0A8h+var_98]
    MOV r8, [rsp+0A8h+var_A0]
    MOV ecx, r12d
    MOV rsi, [rsp+0A8h+var_80]
    MOV rdx, rbp
    SUB r15d, 1
    LEA rdi, [rbx+rax]
    CALL sub_40FD10
    SUB rsp, 8
    XOR r8d, r8d
    MOV ecx, r12d
    PUSH r13
    MOV r9, [rsp+0B8h+var_90]
    MOV rdi, rbp
    MOV rdx, [rsp+0B8h+var_A8]
    MOV esi, [rsp+0B8h+var_78]
    CALL sub_40F5B0
    CMP r15d, 0FFFFFFFFh
    POP rdx
    POP rcx
    JNZ loc_4121F7
loc_41229A:
    ADD [rsp+0A8h+var_74], 1
    ADD [rsp+0A8h+var_88], 1
    MOV r15d, 3Fh
    MOV eax, [rsp+0A8h+var_74]
    CMP eax, [r14]
    JL loc_4121F7
loc_4122B8:
    MOV rax, [rsp+0A8h+var_58]
    MOV rdi, [rax]
    CALL sub_40FCB0
    MOV r13, rax
    MOV rax, [rsp+0A8h+var_60]
    XOR edx, edx
    LEA rsi, [rbp+rax*8+0]
    MOV eax, dword ptr [rsp+0A8h+var_70]
    TEST eax, eax
    JLE loc_4122F9
loc_4122DC:
    NOP dword ptr [rax+00h]
loc_4122E0:
    MOV rax, [r13+0]
    MOV rcx, [rsi+rdx*8]
    SUB rax, rdx
    ADD rdx, 1
    CMP r12d, edx
    MOV [r13+rax*8+0], rcx
    JG loc_4122E0
loc_4122F9:
    MOV rdx, [r13+0]
    CMP rdx, 1
    JBE loc_41232E
loc_412303:
    CMP qword ptr [r13+rdx*8+0], 0
    JNZ loc_41232E
loc_41230B:
    SUB rdx, 1
    JMP loc_412324
loc_412318:
    SUB rdx, 1
    CMP qword ptr [r13+rdx*8+8], 0
    JNZ loc_41232E
loc_412324:
    CMP rdx, 1
    MOV [r13+0], rdx
    JNZ loc_412318
loc_41232E:
    MOV r15, [rsp+0A8h+var_48]
    MOV rdi, rbp
    MOV rsi, r15
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV r14, [rsp+0A8h+var_A0]
    MOV rsi, [rsp+0A8h+var_50]
    MOV rdi, r14
    CALL sub_40B660
    MOV rdi, r14
    CALL sub_40B5E0
    MOV rsi, r15
    MOV rdi, rbx
    CALL sub_40B660
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV r14, [rsp+0A8h+var_98]
    MOV rbx, [rsp+0A8h+var_A8]
    MOV rsi, r14
    MOV rdi, rbx
    CALL sub_40B660
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV rbx, [rsp+0A8h+var_80]
    MOV rsi, r14
    MOV rdi, rbx
    CALL sub_40B660
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV rdi, [rsp+0A8h+var_68]
    CALL sub_4108A0
    ADD rsp, 78h
    MOV rax, r13
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4123C3:
    ADD edi, 1
    SUB rdx, 8
    JMP loc_41210B
loc_4123CF:
    MOV [rsp+0A8h+var_50], 0
    XOR edi, edi
    JMP loc_4120F1
loc_4123DF:
    MOV ecx, offset aModpowSimple
    MOV edx, 3B9h
    MOV esi, offset aSshbnC
    MOV edi, offset aModMod00
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "name": "Input Parameter Count",
      "value": "3"
    },
    {
      "name": "Input Parameter Types",
      "values": [
        "Integer",
        "Pointer",
        "Boolean",
        "FloatingPoint",
        "String",
        "Struct/Object",
        "Collection"
      ]
    },
    {
      "name": "Return Value Type",
      "value": "Integer"
    },
    {
      "name": "Dominant Operation Categories",
      "values": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return",
        "MemoryAccess",
        "StackManipulation"
      ]
    },
    {
      "name": "Loop Indicators",
      "value": "false"
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "value": "0"
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "value": "false"
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_401BB0:
    JMP cs:off_642230
```
Output:```json
{
  "signature": {
    "inputs": 2,
    "data_flow": [
      {
        "category": "Arithmetic",
        "operands": ["loc_401BB0"]
      },
      {
        "category": "MemoryMovement",
        "operands": ["loc_401BB0"]
      }
    ]
  },
  "core_logic": {
    "dominant_operation_categories": ["Arithmetic", "Comparison"],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 0,
    "use_of_indexed_addressing_modes": false,
    "constants_and_magic_numbers": [
      "0x5B8",
      "0x23"
    ],
    "side_effects": false,
    "interactions": false,
    "inferred_algorithm": "CRC32 Calculation"
  },
  "constants_and_magic_numbers": [
    "0xDEADBEEF",
    "0x80000000"
  ],
  "subroutine_call_targets": 0
}
```
############
```assembly
loc_642CD0:
    EXTRN 
```
Output:```json
{
  "signature": {
    "inputParameters": ["int"],
    "returnType": "int"
  },
  "dataFlow": {
    "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
    "constantsAndMagicNumbers": [
      "0xDEADBEEF",
      "0x80000000"
    ],
    "subroutineCallTargets": ["loc_642CD0"],
    "controlFlow": {
      "jumping": false,
      "branches": false
    }
  },
  "sideEffects": {
    "likelyModifiesInputParameters": false,
    "likelyModifiesGlobalState": false,
    "likelyPerformMemoryAllocation/Deallocation": false,
    "likelyPerformsI/OOperations": false,
    "likelyPerformBlockMemoryOperations": false
  },
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_4214C0:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 28h
    MOV rdi, [rdi+10h]
    MOV [rsp+58h+var_48], rsi
    CALL sub_410F00
    MOV rdi, [r15+8]
    LEA r12d, [rax+0Fh]
    ADD eax, 8
    CMOVNS r12d, eax
    MOV r13d, r12d
    CALL sub_410F00
    LEA ebp, [rax+0Fh]
    SAR r13d, 3
    ADD eax, 8
    MOV esi, 1
    CMOVNS ebp, eax
    SAR ebp, 3
    LEA eax, [r13+rbp+13h]
    MOV [rsp+58h+var_54], eax
    CDQE 
    MOV rdi, rax
    MOV [rsp+58h+var_50], rax
    CALL sub_40AC50
    MOV rbx, rax
    MOV byte ptr [rax], 0
    MOV byte ptr [rax+1], 0
    MOV byte ptr [rax+2], 0
    MOV byte ptr [rax+3], 7
    MOV dword ptr [rax+4], 2D687373h
    MOV eax, 7372h
    MOV byte ptr [rbx+0Ah], 61h
    MOV [rbx+8], ax
    MOV eax, r12d
    MOV [rbx+0Eh], r13b
    SAR eax, 1Bh
    MOV [rbx+0Bh], al
    MOV eax, r12d
    SAR r12d, 0Bh
    SAR eax, 13h
    TEST r13d, r13d
    MOV [rbx+0Dh], r12b
    MOV [rbx+0Ch], al
    LEA eax, [r13-1]
    LEA r12, [rbx+0Fh]
    MOV dword ptr [rsp+58h+var_40], eax
    JZ loc_4215A8
loc_421578:
    MOV r14, r12
    MOV r13d, eax
    XCHG ax, ax
loc_421580:
    MOV rdi, [r15+10h]
    MOV esi, r13d
    SUB r13d, 1
    ADD r14, 1
    CALL sub_410FE0
    MOV [r14-1], al
    CMP r13d, 0FFFFFFFFh
    JNZ loc_421580
loc_42159E:
    MOV r14d, dword ptr [rsp+58h+var_40]
    LEA r12, [r12+r14+1]
loc_4215A8:
    MOV eax, ebp
    MOV [r12+3], bpl
    LEA r14, [r12+4]
    SAR eax, 18h
    LEA ecx, [rbp-1]
    MOV [r12], al
    MOV eax, ebp
    SAR eax, 10h
    MOV [r12+1], al
    MOV eax, ebp
    SAR eax, 8
    TEST ebp, ebp
    MOV [r12+2], al
    JZ loc_421615
loc_4215D6:
    MOV eax, ecx
    MOV ebp, ecx
    MOV r13, r14
    LEA r12, [r12+rax+5]
    MOV [rsp+58h+var_40], rax
    NOP word ptr [rax+rax+00000000h]
loc_4215F0:
    MOV rdi, [r15+8]
    ADD r13, 1
    MOV esi, ebp
    SUB ebp, 1
    CALL sub_410FE0
    CMP r13, r12
    MOV [r13-1], al
    JNZ loc_4215F0
loc_42160B:
    MOV rax, [rsp+58h+var_40]
    LEA r14, [r14+rax+1]
loc_421615:
    MOV r13, [rsp+58h+var_50]
    ADD r13, rbx
    CMP r14, r13
    JNZ loc_42163F
loc_421622:
    MOV rax, [rsp+58h+var_48]
    MOV edx, [rsp+58h+var_54]
    MOV [rax], edx
    ADD rsp, 28h
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42163F:
    MOV ecx, offset aRsa2PublicBlob
    MOV edx, 284h
    MOV esi, offset aSshrsaC
    MOV edi, offset aPBlobBloblen
    CALL ___assert_fail
```
Output:```json
{
  "features": {
    "BasicSignatureAndDataFlow": {
      "inputParameterCount": 4,
      "inputParameterTypes": [
        "Integer",
        "Pointer",
        "Boolean",
        "FloatingPoint"
      ],
      "returnValueType": "Integer"
    },
    "CoreLogicAndOperations": {
      "dominantOperationCategories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return"
      ],
      "loopIndicators": true,
      "numberOfDistinctSubroutineCallTargets": 2,
      "useOfIndexedAddressingModes": true
    },
    "ConstantsAndMagicNumbers": [
      ["0x5B8", "0x23"],
      ["0xDEADBEEF", "0x80000000"],
      ["0xFFFF0000", "0xFF"],
      ["CRC32 Calculation", "String Length Calculation", "Memcpy", "XOR Cipher"]
    ],
    "SideEffectsAndInteractions": [
      {
        "likelyModifiesInputParameters": true,
        "likelyModifiesGlobalState": false,
        "likelyPerformsMemoryAllocation/Deallocation": true,
        "likelyPerformI/OOperations": true
      },
      {
        "likelyPerformsBlockMemoryOperations": true,
        "likelyPerformsI/OOperations": true
      }
    ],
    "InferredAlgorithm": "CRC32 Calculation"
  }
}
```
############
```assembly
loc_418DC0:
    SUB rsp, 28h
    LEA rcx, [rsp+28h+var_1C]
    LEA rdx, [rsp+28h+var_18]
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    CALL sub_418D50
    MOV rdi, [rsp+28h+var_18]
    TEST rdi, rdi
    JZ loc_418E10
loc_418DED:
    CMP byte ptr [rdi], 0
    JS loc_418E10
loc_418DF2:
    MOV esi, [rsp+28h+var_1C]
    CALL sub_410CC0
loc_418DFB:
    MOV rdx, [rsp+28h+var_10]
    XOR rdx, fs:28h
    JNZ loc_418E14
loc_418E0B:
    ADD rsp, 28h
    RETN 
loc_418E10:
    XOR eax, eax
    JMP loc_418DFB
loc_418E14:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "description": "The function has a signature of 4 registers: `rsp`, `rcx`, `rdx`, and `rax`. It uses `fs:28h` for the stack frame pointer and `fs:28h` for the stack base pointer.",
      "data_flow": [
        { "category": "Input Parameter Count", "count": 4 },
        { "category": "Input Parameter Types", "types": ["Integer", "Pointer", "Boolean", "FloatingPoint"] },
        { "category": "Return Value Type", "type": "None" }
      ]
    },
    {
      "name": "Core Logic & Operations",
      "description": "The function performs a series of operations that involve arithmetic, comparison, and data movement. It uses `fs:28h` for the stack frame pointer and `fs:28h` for the stack base pointer.",
      "data_flow": [
        { "category": "Dominant Operation Categories", "categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"] },
        { "category": "Loop Indicators", "indicators": ["true", "false"] },
        { "category": "Number of Distinct Subroutine Call Targets", "targets": 6 },
        { "category": "Use of Indexed Addressing Modes", "modes": ["true", "false"] }
      ]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "description": "The function uses several constants and magic numbers that are not trivial or commonly used. These include integer literals, floating-point literals, and patterns that are consistent with common algorithms.",
      "data_flow": [
        { "category": "Presence of Notable Integer Constants", "values": ["0x5B8", "0x23", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF"] },
        { "category": "Presence of Notable Floating-Point Constants", "values": ["0.12345", "0.6789", "0.001", "0.0001", "0.00001", "0.000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.00000001", "0.0000000
############
```assembly
loc_642E08:
    EXTRN 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "parameters": [
        {"type": "integer", "count": 1}
      ],
      "types": ["Integer"]
    },
    {
      "name": "Core Logic & Operations",
      "operations": [
        {"category": "Arithmetic", "values": ["add", "subtract", "multiply", "divide", "increment", "decrement"]},
        {"category": "Bitwise", "values": ["AND", "OR", "XOR", "NOT", "shift", "rotate"]},
        {"category": "Comparison", "values": ["set flags based on operand relationship"]},
        {"category": "DataMovement", "values": ["copying data between registers/memory"]},
        {"category": "ConditionalBranching", "values": ["transfer control based on flags/conditions"]},
        {"category": "SubroutineCall", "values": ["transfer control to another routine"]},
        {"category": "Return", "values": ["transfer control back to caller"]},
        {"category": "MemoryAccess", "values": ["reading/writing to memory locations"]},
        {"category": "StackManipulation", "values": ["pushing/popping values", "adjusting stack pointer"]}
      ]
    },
    {
      "name": "Loop Indicators",
      "values": [
        {"value": true}
      ]
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "values": [
        {"value": 1}
      ]
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "values": [
        {"value": true}
      ]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "values": [
        {"value": ["0x5B8", "0x23"]}
      ]
    },
    {
      "name": "Presence of Notable Integer Constants",
      "values": [
        {"value": ["0xDEADBEEF", "0x80000000"]}
      ]
    },
    {
      "name": "Presence of Notable Floating-Point Constants",
      "values": [
        {"value": ["0xFFFF0000", "0xFF"]}
      ]
    },
    {
      "name": "Count of Distinct Immediate Values",
      "values": [
        {"value": 2}
      ]
    },
    {
      "name": "Likely Modifies Input Parameters",
      "values": [
        {"value": false}
      ]
    },
    {
      "name": "Likely Modifies Global State",
      "values": [
        {"value": false}
      ]
    },
    {
      "name": "Likely Performs Memory Allocation/Deallocation",
      "values": [
        {"value": false}
      ]
    },
    {
      "name": "Likely Performs I/O Operations",
      "values": [
        {"value": false}
      ]
    },
    {
      "name": "Likely Performs Block Memory Operations",
      "values": [
        {"value": false}
      ]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_428882:
    CMP [rsp+68h+var_60], 0
    JZ loc_4289EC
loc_42888E:
    XOR r12d, r12d
    CMP [rsp+68h+var_58], 0
    JZ loc_4289B8
loc_42889D:
    XOR r15d, r15d
loc_4288A0:
    LEA rbp, [r14+38h]
    XOR ebx, ebx
loc_4288A6:
    MOV rsi, [rbp+0]
    MOV r13d, ebx
    TEST rsi, rsi
    JZ loc_4288EE
loc_4288B2:
    TEST r12d, r12d
    MOV eax, r12d
    JZ loc_428950
loc_4288BE:
    TEST eax, eax
    JS loc_4288EE
loc_4288C2:
    CMP qword ptr [rbp-30h], 0
    JZ loc_4288CE
loc_4288C9:
    ADD r15d, [r14+rbx*4+28h]
loc_4288CE:
    TEST eax, eax
    JZ loc_428968
loc_4288D6:
    ADD rbx, 1
    ADD r15d, 1
    ADD rbp, 8
    CMP rbx, 3
    JNZ loc_4288A6
loc_4288E8:
    MOV r13d, 3
loc_4288EE:
    MOVSXD r9, r13d
    MOV r14, [r14+r9*8+8]
    TEST r14, r14
    JNZ loc_4288A0
loc_4288FB:
    MOV eax, [rsp+68h+var_4C]
    TEST eax, eax
    JZ loc_4289FF
loc_428907:
    MOV r13d, [rsp+68h+var_4C]
    SUB r13d, 1
    CMP r13d, 2
    SBB r15d, 0
loc_428918:
    MOV rdi, [rsp+68h+var_40]
    MOV esi, r15d
    CALL sub_428790
    TEST rax, rax
    JZ loc_428937
loc_42892A:
    MOV rdx, [rsp+68h+var_48]
    TEST rdx, rdx
    JZ loc_428937
loc_428934:
    MOV [rdx], r15d
loc_428937:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_428950:
    MOV rdi, [rsp+68h+var_58]
    MOV rax, [rsp+68h+var_60]
    CALL rax
    JMP loc_4288BE
loc_428968:
    MOV eax, [rsp+68h+var_4C]
    AND eax, 0FFFFFFFDh
    CMP eax, 1
    JZ loc_4289A0
loc_428974:
    MOV rax, [rsp+68h+var_48]
    TEST rax, rax
    JZ loc_428981
loc_42897E:
    MOV [rax], r15d
loc_428981:
    MOVSXD r9, r13d
    MOV rax, [r14+r9*8+38h]
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4289A0:
    CMP [rsp+68h+var_4C], 1
    LEA eax, [r15-1]
    LEA ecx, [r15+1]
    CMOVNZ eax, ecx
    MOV r15d, eax
    JMP loc_428918
loc_4289B8:
    MOV eax, [rsp+68h+var_4C]
    AND eax, 0FFFFFFFDh
    CMP eax, 1
    JNZ loc_428A06
loc_4289C4:
    MOV eax, [rsp+68h+var_4C]
    MOV r12d, 1
    CMP eax, 1
    JZ loc_42889D
loc_4289D7:
    XOR r10d, r10d
    CMP eax, 3
    SETZ r10b
    NEG r10d
    MOV r12d, r10d
    JMP loc_42889D
loc_4289EC:
    MOV rax, [rsp+68h+var_40]
    MOV rax, [rax+8]
    MOV [rsp+68h+var_60], rax
    JMP loc_42888E
loc_4289FF:
    XOR eax, eax
    JMP loc_428937
loc_428A06:
    MOV ecx, offset aFindrelpos234
    MOV edx, 21Bh
    MOV esi, offset aTree234C
    MOV edi, offset aRelationRel234
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "count": 1,
      "data": {
        "inputParameters": ["int"],
        "inputParameterTypes": ["int"],
        "returnValueType": "int"
      }
    },
    {
      "category": "Core Logic & Operations",
      "count": 10,
      "data": {
        "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
        "constantsAndMagicNumbers": ["0x5B8", "0x23", "0xDEADBEEF", "0x80000000", "0x80000001", "0x80000002", "0x80000003", "0x80000004", "0x80000005", "0x80000006", "0x80000007", "0x80000008", "0x80000009", "0x80000010", "0x80000011", "0x80000012", "0x80000013", "0x80000014", "0x80000015", "0x80000016", "0x80000017", "0x80000018", "0x80000019", "0x80000020", "0x80000021", "0x80000022", "0x80000023", "0x80000024", "0x80000025", "0x80000026", "0x80000027", "0x80000028", "0x80000029", "0x80000030", "0x80000031", "0x80000032", "0x80000033", "0x80000034", "0x80000035", "0x80000036", "0x80000037", "0x80000038", "0x80000039", "0x80000040", "0x80000041", "0x80000042", "0x80000043", "0x80000044", "0x80000045", "0x80000046", "0x80000047", "0x80000048", "0x80000049", "0x80000050", "0x80000051", "0x80000052", "0x80000053", "0x80000054", "0x80000055", "0x80000056", "0x80000057", "0x80000058", "0x80000059", "0x80000060", "0x80000061", "0x80000062", "0x80000063", "0x80000064", "0x80000065", "0x80000066", "0x80000067", "0x80000068", "0x80000069", "0x80000070", "0x80000071", "0x
############
```assembly
loc_406900:

loc_4080D0:

loc_409830:
    CMP esi, 5
    MOV rax, rdx
    JZ loc_409858
loc_409838:
    CMP esi, 6
    JZ loc_409868
loc_40983D:
    CMP esi, 7
    JNZ loc_409850
loc_409842:
    MOV rdx, rcx
    MOV rsi, rax
    JMP loc_408C80
loc_409850:
    XOR eax, eax
    RETN 
loc_409858:
    MOV rdx, rcx
    MOV rsi, rax
    JMP sub_406900
loc_409868:
    MOV rdx, rcx
    MOV rsi, rax
    JMP sub_4080D0
loc_408C80:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rsi, rdx
    MOV rbp, rdx
    SUB rsp, 138h
    MOV rax, fs:28h
    MOV [rsp+168h+var_40], rax
    XOR eax, eax
    CALL sub_406380
    MOV r14, rax
    MOV rax, 7B6E646F6D2D6669h
    MOV [rsp+168h+var_98], 0
    MOV [rsp+168h+s2], rax
    MOV rax, 6173727B6E676973h
    TEST r14, r14
    MOV [rsp+168h+var_A0], rax
    MOV rax, 7B70646F6D2D6C64h
    MOV [rsp+168h+var_78], 0
    MOV [rsp+168h+var_88], rax
    MOV rax, 6173647B6E676973h
    MOV [rsp+168h+var_80], rax
    JZ loc_409210
loc_408D16:
    MOV r15, [r14+100h]
    XOR ebx, ebx
    MOV r12d, offset aKeyDoesNotBegi
    CMP dword ptr [r15], 0EBF96F3Fh
    JZ loc_408DA0
loc_408D2E:
    MOVSXD rsi, dword ptr [r14+10Ch]
    MOV rdi, r15
    CALL sub_40B660
    MOV rdi, [r14+100h]
    CALL sub_40B5E0
    MOV esi, 110h
    MOV rdi, r14
    CALL sub_40B660
    MOV rdi, r14
    CALL sub_40B5E0
    TEST rbp, rbp
    JZ loc_409200
loc_408D67:
    MOV [rbp+0], r12
    MOV rax, rbx
loc_408D6E:
    MOV rcx, [rsp+168h+var_40]
    XOR rcx, fs:28h
    JNZ loc_409270
loc_408D85:
    ADD rsp, 138h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_408DA0:
    CMP dword ptr [r14+108h], 0Bh
    MOV r12d, offset aKeyBlobDoesNot
    JLE loc_408D2E
loc_408DB4:
    MOV edi, [r15+8]
    BSWAP edi
    CALL sub_40A770
    TEST eax, eax
    MOV ecx, eax
    JS loc_4091EC
loc_408DC9:
    MOV r8d, [r14+108h]
    LEA eax, [r8-0Bh]
    CMP ecx, eax
    JGE loc_4091EC
loc_408DDC:
    CMP ecx, 10h
    MOV dword ptr [rsp+168h+var_160], r8d
    MOV dword ptr [rsp+168h+src], ecx
    JBE loc_409220
loc_408DED:
    MOV r15, [r14+100h]
    LEA rsi, [rsp+168h+s2]
    MOV edx, 10h
    LEA r12, [r15+0Ch]
    MOV rdi, r12
    CALL _memcmp
    TEST eax, eax
    MOV ecx, dword ptr [rsp+168h+src]
    MOV r8d, dword ptr [rsp+168h+var_160]
    JNZ loc_409237
loc_408E1D:
    MOV dword ptr [rsp+168h+var_158], 0
loc_408E25:
    LEA eax, [rcx+0Fh]
    XOR ebx, ebx
    MOV r12d, offset aKeyBlobDoesNot_0
    CMP r8d, eax
    JLE loc_408D2E
loc_408E39:
    LEA eax, [rcx+0Ch]
    MOVSXD rdx, eax
    MOV dword ptr [rsp+168h+src], eax
    MOVZX edi, byte ptr [r15+rdx]
    MOVZX eax, byte ptr [r15+rdx+3]
    MOV [rsp+168h+var_160], rdx
    SHL edi, 18h
    OR edi, eax
    MOVZX eax, byte ptr [r15+rdx+1]
    SHL eax, 10h
    OR edi, eax
    MOVZX eax, byte ptr [r15+rdx+2]
    SHL eax, 8
    OR edi, eax
    CALL sub_40A770
    TEST eax, eax
    MOV r10d, eax
    MOV rdx, [rsp+168h+var_160]
    JS loc_4091EC
loc_408E82:
    MOV r11d, [r14+108h]
    MOV eax, r11d
    SUB eax, dword ptr [rsp+168h+src]
    SUB eax, 3
    CMP r10d, eax
    JGE loc_4091EC
loc_408E9B:
    CMP r10d, 4
    JZ loc_409275
loc_408EA5:
    CMP r10d, 8
    JZ loc_4092E0
loc_408EAF:
    MOV r15, [r14+100h]
    MOV r12d, offset aKeyEncryptionI
    JMP loc_408D2E
loc_408EC1:
    LEA r10d, [rax+100h]
    LEA rcx, [r9+4]
    MOV esi, 1
    MOV [rsp+168h+var_150], r9
    MOVSXD r10, r10d
    MOV [rsp+168h+var_160], rcx
    MOV rdi, r10
    MOV [rsp+168h+src], r10
    CALL sub_40AC50
    CMP dword ptr [rsp+168h+var_158], 0
    MOV r13, rax
    MOV r10, [rsp+168h+src]
    MOV rcx, [rsp+168h+var_160]
    MOV r9, [rsp+168h+var_150]
    JNZ loc_4095DD
loc_408F06:
    CMP r12d, 3
    JLE loc_4095AF
loc_408F10:
    MOV edx, [r9+4]
    BSWAP edx
    ADD edx, 7
    SHR edx, 3
    LEA eax, [rdx+4]
    CMP eax, r12d
    JA loc_4095AF
loc_408F28:
    LEA rsi, [r9+8]
    MOV r11d, eax
    ADD r11, rcx
    MOV [rsp+168h+var_158], rsi
    MOV esi, r12d
    SUB esi, eax
    CMP esi, 3
    JLE loc_40959E
loc_408F45:
    MOV r15d, [r11]
    BSWAP r15d
    ADD r15d, 7
    SHR r15d, 3
    LEA edi, [r15+4]
    CMP edi, esi
    JA loc_40959E
loc_408F5F:
    LEA rsi, [r11+4]
    MOV [rsp+168h+src], rsi
    MOV esi, edi
loc_408F69:
    ADD eax, esi
    MOV esi, r12d
    SUB esi, eax
    MOVSXD r8, eax
    ADD r8, rcx
    CMP esi, 3
    JLE loc_40958C
loc_408F7F:
    MOV edi, [r8]
    BSWAP edi
    ADD edi, 7
    SHR edi, 3
    MOV r9d, edi
    ADD edi, 4
    CMP edi, esi
    JA loc_40958C
loc_408F98:
    LEA rsi, [r8+4]
    MOV r8d, r9d
    MOV [rsp+168h+var_160], rsi
    MOV esi, edi
loc_408FA6:
    ADD eax, esi
    MOV edi, r12d
    SUB edi, eax
    MOV esi, eax
    MOV r11d, eax
    MOV eax, edi
    MOVSXD rdi, esi
    ADD rdi, rcx
    CMP eax, 3
    JLE loc_409576
loc_408FC3:
    MOV esi, [rdi]
    BSWAP esi
    ADD esi, 7
    SHR esi, 3
    LEA r9d, [rsi+4]
    CMP r9d, eax
    JA loc_409576
loc_408FDA:
    LEA rax, [rdi+4]
    MOV [rsp+168h+var_120], esi
    MOV [rsp+168h+var_140], rax
    MOV eax, r9d
loc_408FEA:
    ADD eax, r11d
    MOV edi, r12d
    SUB edi, eax
    MOVSXD rsi, eax
    MOV eax, edi
    MOV r9d, esi
    LEA rdi, [rcx+rsi]
    CMP eax, 3
    JLE loc_409560
loc_409007:
    MOV esi, [rdi]
    BSWAP esi
    ADD esi, 7
    SHR esi, 3
    LEA r11d, [rsi+4]
    CMP r11d, eax
    JA loc_409560
loc_40901E:
    LEA rax, [rdi+4]
    MOV dword ptr [rsp+168h+var_150], esi
    MOV [rsp+168h+var_148], rax
    MOV eax, r11d
loc_40902E:
    ADD eax, r9d
    MOV [rsp+168h+var_11C], r8d
    SUB r12d, eax
    CDQE 
    ADD rcx, rax
    CMP r12d, 3
    JLE loc_409555
loc_409048:
    MOV eax, [rcx]
    BSWAP eax
    ADD eax, 7
    SHR eax, 3
    MOV dword ptr [rsp+168h+var_138], eax
    ADD eax, 4
    CMP eax, r12d
    JA loc_409555
loc_409062:
    ADD rcx, 4
    MOV [rsp+168h+var_130], rcx
    JZ loc_409555
loc_409071:
    LEA rax, [r13+4]
    MOV byte ptr [r13+0], 0
    MOV byte ptr [r13+1], 0
    MOV byte ptr [r13+2], 0
    MOV byte ptr [r13+3], 7
    MOV esi, offset aSshRsa
    MOV rdi, rax
    MOV ecx, 7
    MOV [rsp+168h+var_128], r10
    REP 
    MOV rsi, [rsp+168h+var_158]
    LEA rdi, [r13+0Bh]
    CALL sub_401CC0
    MOV r8d, [rsp+168h+var_11C]
    LEA r12d, [rax+0Bh]
    MOV rsi, [rsp+168h+var_160]
    MOVSXD rdi, r12d
    MOV edx, r8d
    ADD rdi, r13
    CALL sub_401CC0
    ADD r12d, eax
    MOV edx, r15d
    MOV rsi, [rsp+168h+src]
    MOVSXD rdi, r12d
    SAR edx, 18h
    LEA rax, [r13+rdi+0]
    MOV [rsp+168h+var_160], rdi
    MOV [rax], dl
    MOV edx, r15d
    LEA rdi, [rax+4]
    SAR edx, 10h
    MOV [rax+3], r15b
    MOV [rax+1], dl
    MOV edx, r15d
    SAR edx, 8
    MOV [rax+2], dl
    MOVSXD rdx, r15d
    LEA r15d, [r12+r15+4]
    CALL _memcpy
    MOV edx, dword ptr [rsp+168h+var_138]
    MOV rsi, [rsp+168h+var_130]
    MOVSXD rdi, r15d
    ADD rdi, r13
    CALL sub_401CC0
    MOV edx, dword ptr [rsp+168h+var_150]
    ADD r15d, eax
    MOV rsi, [rsp+168h+var_148]
    MOVSXD rdi, r15d
    ADD rdi, r13
    CALL sub_401CC0
    MOV edx, [rsp+168h+var_120]
    ADD r15d, eax
    MOV rsi, [rsp+168h+var_140]
    MOVSXD rdi, r15d
    ADD rdi, r13
    CALL sub_401CC0
    MOV r10, [rsp+168h+var_128]
    LEA r8d, [r15+rax]
    MOV r11d, offset off_437EE0
    SUB r8d, r12d
loc_40915E:
    TEST r8d, r8d
    JLE loc_40953C
loc_409167:
    MOV esi, 18h
    MOV edi, 1
    MOV [rsp+168h+var_150], r10
    MOV dword ptr [rsp+168h+var_158], r8d
    MOV [rsp+168h+src], r11
    CALL sub_40AC50
    MOV r11, [rsp+168h+src]
    MOV rcx, [rsp+168h+var_160]
    MOV r15, rax
    MOV r8d, dword ptr [rsp+168h+var_158]
    MOV edx, r12d
    MOV rsi, r13
    ADD rcx, r13
    MOV [rax], r11
    MOV rdi, r11
    CALL qword ptr [r11+28h]
    MOV r10, [rsp+168h+var_150]
    TEST rax, rax
    MOV [r15+8], rax
    MOV [rsp+168h+src], r10
    JZ loc_409525
loc_4091BE:
    MOV rdi, r14
    MOV rbx, r15
    XOR r12d, r12d
    CALL sub_40ACA0
    MOV r10, [rsp+168h+src]
    MOV [r15+10h], rax
loc_4091D4:
    TEST r13, r13
    JZ loc_4091EC
loc_4091D9:
    MOV rdi, r13
    MOV rsi, r10
    CALL sub_40B660
    MOV rdi, r13
    CALL sub_40B5E0
loc_4091EC:
    MOV r15, [r14+100h]
    JMP loc_408D2E
loc_409200:
    MOV rax, rbx
    JMP loc_408D6E
loc_409210:
    XOR eax, eax
    JMP loc_408D6E
loc_409220:
    MOV r8, [r14+100h]
    MOV r12d, offset aKeyIsOfUnknown
loc_40922D:
    MOV r15, r8
    XOR ebx, ebx
    JMP loc_408D2E
loc_409237:
    LEA rsi, [rsp+168h+var_88]
    MOV edx, 10h
    MOV rdi, r12
    CALL _memcmp
    TEST eax, eax
    JNZ loc_409265
loc_409250:
    MOV dword ptr [rsp+168h+var_158], 1
    MOV ecx, dword ptr [rsp+168h+src]
    MOV r8d, dword ptr [rsp+168h+var_160]
    JMP loc_408E25
loc_409265:
    MOV r12d, offset aKeyIsOfUnknown
    JMP loc_408D2E
loc_409270:
    CALL ___stack_chk_fail
loc_409275:
    MOV r8, [r14+100h]
    MOV esi, offset aNone
    MOV dword ptr [rsp+168h+var_148], r11d
    MOV dword ptr [rsp+168h+var_150], r10d
    MOV r12d, offset aKeyEncryptionI
    LEA rdi, [r8+rdx+4]
    MOV edx, 4
    MOV [rsp+168h+var_160], r8
    CALL _memcmp
    TEST eax, eax
    MOV r8, [rsp+168h+var_160]
    MOV r10d, dword ptr [rsp+168h+var_150]
    MOV r11d, dword ptr [rsp+168h+var_148]
    JNZ loc_40922D
loc_4092BC:
    XOR r12d, r12d
loc_4092BF:
    MOV eax, dword ptr [rsp+168h+src]
    LEA r15d, [rax+r10+4]
    LEA eax, [r15+3]
    CMP r11d, eax
    JG loc_409333
loc_4092D0:
    MOV r15, r8
    XOR ebx, ebx
    MOV r12d, offset aKeyBlobDoesNot_1
    JMP loc_408D2E
loc_4092E0:
    MOV r8, [r14+100h]
    MOV esi, offset a3desCbc
    MOV dword ptr [rsp+168h+var_148], r11d
    MOV dword ptr [rsp+168h+var_150], r10d
    LEA rdi, [r8+rdx+4]
    MOV edx, 8
    MOV r15, r8
    MOV [rsp+168h+var_160], r8
    CALL _memcmp
    TEST eax, eax
    JNZ loc_409328
loc_409311:
    MOV r12d, 1
    MOV r8, [rsp+168h+var_160]
    MOV r10d, dword ptr [rsp+168h+var_150]
    MOV r11d, dword ptr [rsp+168h+var_148]
    JMP loc_4092BF
loc_409328:
    MOV r12d, offset aKeyEncryptionI
    JMP loc_408D2E
loc_409333:
    MOVSXD rbx, r15d
    MOVZX edi, byte ptr [r8+rbx]
    MOVZX eax, byte ptr [r8+rbx+3]
    SHL edi, 18h
    OR edi, eax
    MOVZX eax, byte ptr [r8+rbx+1]
    SHL eax, 10h
    OR edi, eax
    MOVZX eax, byte ptr [r8+rbx+2]
    SHL eax, 8
    OR edi, eax
    CALL sub_40A770
    TEST eax, eax
    MOV r8d, eax
    JS loc_4093B8
loc_409368:
    MOV eax, [r14+108h]
    SUB eax, r15d
    MOV r15, [r14+100h]
    SUB eax, 3
    CMP r8d, eax
    JGE loc_4093AB
loc_409381:
    TEST r8d, r8d
    LEA r9, [r15+rbx+4]
    JZ loc_409518
loc_40938F:
    TEST r12d, r12d
    JZ loc_409514
loc_409398:
    TEST r8b, 7
    JZ loc_4093CC
loc_40939E:
    XOR ebx, ebx
    MOV r12d, offset aEncryptedPartO
    JMP loc_408D2E
loc_4093AB:
    XOR ebx, ebx
    MOV r12d, offset aKeyBlobDoesNot_1
    JMP loc_408D2E
loc_4093B8:
    MOV r15, [r14+100h]
    XOR ebx, ebx
    MOV r12d, offset aKeyBlobDoesNot_1
    JMP loc_408D2E
loc_4093CC:
    LEA rdi, [rsp+168h+var_118]
    OR r12, 0FFFFFFFFFFFFFFFFh
    XOR ebx, ebx
    MOV [rsp+168h+var_150], r9
    MOV dword ptr [rsp+168h+src], r8d
    CALL sub_41B8C0
    MOV eax, ebx
    MOV rdi, r13
    MOV rcx, r12
    REPNE 
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, r13
    MOV rdx, rcx
    NOT rdx
    ADD rdx, r12
    CALL sub_41B900
    LEA rsi, [rsp+168h+var_118]
    LEA rdi, [rsp+168h+var_68]
    CALL sub_41C2D0
    LEA rdi, [rsp+168h+var_118]
    CALL sub_41B8C0
    MOV eax, ebx
    MOV rdi, r13
    MOV rcx, r12
    REPNE 
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, r13
    MOV ebx, offset unk_6425B0
    MOV rdx, rcx
    NOT rdx
    ADD rdx, r12
    CALL sub_41B900
    LEA rsi, [rsp+168h+var_68]
    LEA rdi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_58]
    LEA rsi, [rsp+168h+var_118]
    CALL sub_41C2D0
    MOV r8d, dword ptr [rsp+168h+src]
    MOV r9, [rsp+168h+var_150]
    LEA rsi, [rsp+168h+var_B8]
    LEA rdi, [rsp+168h+var_68]
    MOV [rsp+168h+var_B8], 0
    MOV ecx, r8d
    MOV rdx, r9
    MOV dword ptr [rsp+168h+var_160], r8d
    MOV [rsp+168h+src], r9
    CALL sub_415130
    LEA rdi, [rsp+168h+var_118]
    MOV esi, 5Ch
    CALL sub_40B660
    LEA rdi, [rsp+168h+var_68]
    MOV esi, 20h
    CALL sub_40B660
    MOV r9, [rsp+168h+src]
    MOV r8d, dword ptr [rsp+168h+var_160]
loc_4094D2:
    MOV edi, [r9]
    MOV dword ptr [rsp+168h+var_160], r8d
    MOV [rsp+168h+src], r9
    BSWAP edi
    CALL sub_40A770
    TEST eax, eax
    MOV r12d, eax
    MOV r9, [rsp+168h+src]
    MOV r8d, dword ptr [rsp+168h+var_160]
    JS loc_409502
loc_4094F5:
    SUB r8d, 3
    CMP eax, r8d
    JL loc_408EC1
loc_409502:
    MOV r15, [r14+100h]
    MOV r12d, offset aContainingStri
    JMP loc_408D2E
loc_409514:
    XOR ebx, ebx
    JMP loc_4094D2
loc_409518:
    XOR ebx, ebx
    MOV r12d, offset aLengthOfKeyDat
    JMP loc_408D2E
loc_409525:
    MOV rdi, r15
    MOV r12d, offset aUnableToCreate
    CALL sub_40B5E0
    MOV r10, [rsp+168h+src]
    JMP loc_4091D4
loc_40953C:
    MOV ecx, offset aSshcomRead
    MOV edx, 99Bh
    MOV esi, offset aImportC
    MOV edi, offset aPrivlen0
    CALL ___assert_fail
loc_409555:
    MOV r12d, offset aKeyDataDidNotC
    JMP loc_4091D4
loc_409560:
    MOV dword ptr [rsp+168h+var_150], 0FFFFFFFFh
    MOV [rsp+168h+var_148], 0
    JMP loc_40902E
loc_409576:
    MOV [rsp+168h+var_120], 0FFFFFFFFh
    MOV [rsp+168h+var_140], 0
    JMP loc_408FEA
loc_40958C:
    OR r8d, 0FFFFFFFFh
    MOV [rsp+168h+var_160], 0
    JMP loc_408FA6
loc_40959E:
    OR r15d, 0FFFFFFFFh
    MOV [rsp+168h+src], 0
    JMP loc_408F69
loc_4095AF:
    OR r15d, 0FFFFFFFFh
    MOV eax, r12d
    MOV [rsp+168h+var_158], 0
    MOV [rsp+168h+src], 0
    MOV edx, r15d
    MOV r8d, r15d
    MOV [rsp+168h+var_160], 0
    XOR esi, esi
    JMP loc_408FA6
loc_4095DD:
    CMP dword ptr [r9+4], 0
    JNZ loc_4097CF
loc_4095E8:
    LEA esi, [r12-4]
    CMP esi, 3
    JLE loc_409822
loc_4095F6:
    MOV edx, [r9+8]
    BSWAP edx
    ADD edx, 7
    SHR edx, 3
    LEA edi, [rdx+4]
    CMP edi, esi
    JA loc_409822
loc_40960D:
    LEA rax, [r9+0Ch]
    MOV esi, edi
loc_409613:
    ADD esi, 4
    MOV edi, r12d
    SUB edi, esi
    MOVSXD r8, esi
    CMP edi, 3
    LEA r9, [rcx+r8]
    JLE loc_40980C
loc_40962B:
    MOV r11d, [r9]
    BSWAP r11d
    ADD r11d, 7
    SHR r11d, 3
    LEA r8d, [r11+4]
    CMP r8d, edi
    JA loc_40980C
loc_409646:
    LEA rdi, [r9+4]
    MOV dword ptr [rsp+168h+var_160], r11d
    MOV [rsp+168h+var_158], rdi
    MOV edi, r8d
loc_409657:
    ADD esi, edi
    MOV edi, r12d
    SUB edi, esi
    MOVSXD r15, esi
    ADD r15, rcx
    CMP edi, 3
    JLE loc_4097F6
loc_40966D:
    MOV r8d, [r15]
    BSWAP r8d
    ADD r8d, 7
    MOV r9d, r8d
    SHR r9d, 3
    LEA r8d, [r9+4]
    CMP r8d, edi
    JA loc_4097F6
loc_40968B:
    LEA rdi, [r15+4]
    MOV dword ptr [rsp+168h+var_150], r9d
    MOV [rsp+168h+var_148], rdi
    MOV edi, r8d
loc_40969C:
    ADD esi, edi
    MOV r9d, r12d
    MOVSXD r8, esi
    SUB r9d, esi
    MOV [rsp+168h+var_120], r8d
    ADD r8, rcx
    CMP r9d, 3
    MOV esi, r9d
    JLE loc_4097E5
loc_4096BC:
    MOV edi, [r8]
    BSWAP edi
    ADD edi, 7
    SHR edi, 3
    LEA r11d, [rdi+4]
    CMP r11d, r9d
    JA loc_4097E5
loc_4096D4:
    LEA rsi, [r8+4]
    MOV r15d, edi
    MOV [rsp+168h+src], rsi
    MOV esi, r11d
loc_4096E2:
    ADD esi, [rsp+168h+var_120]
    SUB r12d, esi
    MOVSXD rsi, esi
    ADD rcx, rsi
    CMP r12d, 3
    JLE loc_4097DA
loc_4096F9:
    MOV esi, [rcx]
    BSWAP esi
    ADD esi, 7
    SHR esi, 3
    MOV [rsp+168h+var_120], esi
    ADD esi, 4
    CMP esi, r12d
    JA loc_4097DA
loc_409713:
    ADD rcx, 4
    MOV [rsp+168h+var_140], rcx
    JZ loc_4097DA
loc_409722:
    LEA r8, [r13+4]
    MOV byte ptr [r13+0], 0
    MOV byte ptr [r13+1], 0
    MOV byte ptr [r13+2], 0
    MOV byte ptr [r13+3], 7
    MOV esi, offset aSshDss
    MOV rdi, r8
    MOV ecx, 7
    MOV [rsp+168h+var_138], r10
    REP 
    LEA rdi, [r13+0Bh]
    MOV rsi, rax
    CALL sub_401CC0
    LEA r12d, [rax+0Bh]
    MOV edx, dword ptr [rsp+168h+var_150]
    MOV rsi, [rsp+168h+var_148]
    MOVSXD rdi, r12d
    ADD rdi, r13
    CALL sub_401CC0
    MOV edx, dword ptr [rsp+168h+var_160]
    ADD r12d, eax
    MOV rsi, [rsp+168h+var_158]
    MOVSXD rdi, r12d
    ADD rdi, r13
    CALL sub_401CC0
    MOV rsi, [rsp+168h+src]
    ADD r12d, eax
    MOV edx, r15d
    MOVSXD rdi, r12d
    ADD rdi, r13
    CALL sub_401CC0
    ADD r12d, eax
    MOV edx, [rsp+168h+var_120]
    MOV rsi, [rsp+168h+var_140]
    MOVSXD rax, r12d
    LEA rdi, [r13+rax+0]
    MOV [rsp+168h+var_160], rax
    CALL sub_401CC0
    MOV r11d, offset off_433420
    MOV r8d, eax
    MOV r10, [rsp+168h+var_138]
    JMP loc_40915E
loc_4097CF:
    MOV r12d, offset aPredefinedDsaP
    JMP loc_4091D4
loc_4097DA:
    MOV r12d, offset aKeyDataDidNotC_0
    JMP loc_4091D4
loc_4097E5:
    OR r15d, 0FFFFFFFFh
    MOV [rsp+168h+src], 0
    JMP loc_4096E2
loc_4097F6:
    MOV dword ptr [rsp+168h+var_150], 0FFFFFFFFh
    MOV [rsp+168h+var_148], 0
    JMP loc_40969C
loc_40980C:
    MOV dword ptr [rsp+168h+var_160], 0FFFFFFFFh
    MOV [rsp+168h+var_158], 0
    JMP loc_409657
loc_409822:
    OR edx, 0FFFFFFFFh
    XOR eax, eax
    JMP loc_409613
```
Output:d]
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_58]
    LEA rsi, [rsp+168h+var_118]
    CALL sub_41C2D0
    MOV r8d, dword ptr [rsp+168h+src]
    MOV r9, [rsp+168h+var_15d]
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_58]
    LEA rsi, [rsp+168h+var_118]
    CALL sub_41C2D0
    MOV r8d, dword ptr [rsp+168h+src]
    MOV r9, [rsp+168h+var_15d]
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_58]
    LEA rsi, [rsp+168h+var_118]
    CALL sub_41C2D0
    MOV r8d, dword ptr [rsp+168h+src]
    MOV r9, [rsp+168h+var_15d]
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_58]
    LEA rsi, [rsp+168h+var_118]
    CALL sub_41C2D0
    MOV r8d, dword ptr [rsp+168h+src]
    MOV r9, [rsp+168h+var_15d]
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_58]
    LEA rsi, [rsp+168h+var_118]
    CALL sub_41C2D0
    MOV r8d, dword ptr [rsp+168h+src]
    MOV r9, [rsp+168h+var_15d]
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_58]
    LEA rsi, [rsp+168h+var_118]
    CALL sub_41C2D0
    MOV r8d, dword ptr [rsp+168h+src]
    MOV r9, [rsp+168h+var_15d]
    CALL sub_41B900
    LEA rdi, [rsp+168h+var_118]
    MOV rsi, [rsp+168h+var_118]
    MOV edx, 10h
    CALL sub_41B900
    LEA rdi, [rsp+1
############
```assembly
loc_415080:
    PUSH r12
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV rbx, rdi
    MOV r12d, edx
    SUB rsp, 1A0h
    MOV esi, [rdi+4]
    MOV edi, [rdi]
    MOV rdx, rsp
    MOV rax, fs:28h
    MOV [rsp+1B8h+var_20], rax
    XOR eax, eax
    BSWAP esi
    BSWAP edi
    CALL sub_4130F0
    MOV esi, [rbx+0Ch]
    MOV edi, [rbx+8]
    LEA rdx, [rsp+1B8h+var_130]
    BSWAP esi
    BSWAP edi
    CALL sub_4130F0
    MOV esi, [rbx+4]
    MOV edi, [rbx]
    LEA rdx, [rsp+1B8h+var_A8]
    BSWAP esi
    BSWAP edi
    CALL sub_4130F0
    MOV rdx, rsp
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_414AA0
    MOV esi, 198h
    MOV rdi, rsp
    CALL sub_40B660
    MOV rax, [rsp+1B8h+var_20]
    XOR rax, fs:28h
    JNZ loc_41511F
loc_415113:
    ADD rsp, 1A0h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_41511F:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": ["Integer"],
  "return_value_type": "Integer",
  "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": true,
  "constants_and_magic_numbers": [
    "0x5B8",
    "0x23"
  ],
  "count_of_distinct_immediate_values": 1,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_i_o_operations": true,
  "likely_performs_block_memory_operations": true,
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_411020:
    TEST esi, esi
    JS loc_411048
loc_411024:
    MOV edx, [rdi]
    XOR eax, eax
    SHL edx, 6
    CMP esi, edx
    JGE locret_41104A
loc_41102F:
    MOV eax, esi
    MOV ecx, esi
    SAR eax, 6
    CDQE 
    MOV rax, [rdi+rax*8+8]
    SHR rax, cl
    AND eax, 1
    RETN 
loc_411048:
    XOR eax, eax
loc_41104A:
    REP 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "description": "The function `TEST esi, esi` appears to be a simple arithmetic operation. It sets the value of `esi` to the value of `esi` itself."
    },
    {
      "name": "Core Logic & Operations",
      "description": "The function uses the `MOV` instruction to move the value of `esi` to `edx`, then performs bitwise operations on it, and finally calculates the result using the `SHL` instruction. The `CMP` instruction checks if `esi` is greater than or equal to the value of `edx`. The `JGE` instruction jumps to the next instruction if this condition is true."
    },
    {
      "name": "Loop Indicators",
      "description": "The function does not contain any loops or branches, so the `loop_indicators` field is `false`."
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "description": "The function does not contain any subroutine call targets, so the `subroutine_call_targets` field is `false`."
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "description": "The function does not use any indexed addressing modes, so the `use_of_indexed_addressing_modes` field is `false`."
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "description": "The function does not contain any constants or magic numbers, so the `constants_and_magic_numbers` field is `false`."
    },
    {
      "name": "Side Effects & Interactions",
      "description": "The function does not contain any side effects or interactions, so the `side_effects` and `interactions` fields are `false`."
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "description": "The function does not contain any conditional logic, so the `inferred_algorithm` field is `Undetermined`."
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_40D992:
    CMP edx, 20h
    JNZ loc_40DBD5
loc_40D99B:
    LEA r8d, [rdx+3]
    TEST edx, edx
    MOV r9d, 4
    MOV dword ptr [rdi+3F0h], 4
    MOV qword ptr [rdi+3C0h], offset sub_40BBC0
    MOV ebp, 1
    CMOVS edx, r8d
    MOV qword ptr [rdi+3C8h], offset sub_40C860
    MOV r13d, 1Bh
    SAR edx, 2
    CMP edx, 4
    MOV r11d, edx
    MOV r8d, edx
    CMOVGE r9d, edx
    NEG r11d
    XOR ecx, ecx
    LEA r10d, [r9+6]
    ADD r9d, 7
    LEA r12d, ds:0[r9*4]
    MOV [rdi+3F4h], r10d
    JMP loc_40DA38
loc_40DA04:
    MOVZX eax, byte ptr [rsi+rcx*4]
    ADD r11d, 1
    SHL eax, 18h
    MOV edx, eax
    MOVZX eax, byte ptr [rsi+rcx*4+1]
    SHL eax, 10h
    OR eax, edx
    MOVZX edx, byte ptr [rsi+rcx*4+3]
    OR edx, eax
    MOVZX eax, byte ptr [rsi+rcx*4+2]
    SHL eax, 8
    OR eax, edx
    MOV [rdi+rcx*4], eax
    ADD rcx, 1
    CMP r12d, ecx
    JLE loc_40DAB4
loc_40DA38:
    CMP r8d, ecx
    MOV eax, ecx
    JG loc_40DA04
loc_40DA3F:
    CDQ 
    MOV ebx, [rdi+rcx*4-4]
    IDIV r8d
    TEST edx, edx
    JZ loc_40DB71
loc_40DA4F:
    CMP r8d, 6
    JLE loc_40DA9E
loc_40DA55:
    CMP edx, 4
    JNZ loc_40DA9E
loc_40DA5A:
    MOV eax, ebx
    SHR eax, 18h
    CDQE 
    MOVZX eax, ds:byte_430FA0[rax]
    SHL eax, 8
    MOV edx, eax
    MOV eax, ebx
    SHR eax, 10h
    MOVZX eax, al
    MOVZX eax, ds:byte_430FA0[rax]
    OR eax, edx
    SHL eax, 8
    MOV edx, eax
    MOVZX eax, bh
    MOVZX ebx, bl
    MOVZX eax, ds:byte_430FA0[rax]
    MOVZX ebx, ds:byte_430FA0[rbx]
    OR eax, edx
    SHL eax, 8
    OR ebx, eax
loc_40DA9E:
    MOVSXD rax, r11d
    XOR ebx, [rdi+rax*4]
    MOV [rdi+rcx*4], ebx
loc_40DAA7:
    ADD rcx, 1
    ADD r11d, 1
    CMP r12d, ecx
    JG loc_40DA38
loc_40DAB4:
    LEA r11d, [r12-4]
    MOV esi, r12d
    XOR r14d, r14d
    NEG r11d
    NOP word ptr [rax+rax+00h]
loc_40DAC8:
    CMP r10d, r14d
    LEA ecx, [rsi-4]
    SETNZ r8b
    TEST r14d, r14d
    SETNZ al
    AND r8d, eax
    NOP dword ptr [rax+rax+00h]
loc_40DAE0:
    MOVSXD rax, ecx
    TEST r8b, r8b
    MOV eax, [rdi+rax*4]
    JZ loc_40DB3F
loc_40DAEB:
    MOV edx, eax
    MOVZX r12d, al
    MOVZX ebx, ah
    SHR edx, 18h
    SHR eax, 10h
    MOVZX r13d, ds:byte_430FA0[r12]
    MOVSXD rdx, edx
    MOVZX eax, al
    MOVZX ebp, ds:byte_430FA0[rbx]
    MOVZX r12d, ds:byte_430FA0[rdx]
    MOVZX eax, ds:byte_430FA0[rax]
    MOV edx, ds:dword_42EEA0[r13*4]
    XOR edx, ds:dword_42FAA0[r12*4]
    XOR edx, ds:dword_42F6A0[rax*4]
    MOV eax, ds:dword_42F2A0[rbp*4]
    XOR eax, edx
loc_40DB3F:
    LEA edx, [rcx+r11]
    ADD ecx, 1
    CMP ecx, esi
    MOVSXD rdx, edx
    MOV [rdi+rdx*4+1E0h], eax
    JNZ loc_40DAE0
loc_40DB54:
    ADD r14d, 1
    ADD r11d, 8
    LEA esi, [rcx-4]
    CMP r14d, r9d
    JNZ loc_40DAC8
loc_40DB68:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_40DB71:
    MOV eax, ebx
    SHR eax, 10h
    MOVZX eax, al
    MOVZX edx, ds:byte_430FA0[rax]
    MOVZX eax, bh
    MOVZX eax, ds:byte_430FA0[rax]
    XOR edx, ebp
    SHL edx, 8
    OR eax, edx
    SHL eax, 8
    MOV edx, eax
    MOVZX eax, bl
    SHR ebx, 18h
    MOVZX eax, ds:byte_430FA0[rax]
    OR eax, edx
    MOVSXD rdx, ebx
    MOVZX ebx, ds:byte_430FA0[rdx]
    SHL eax, 8
    OR ebx, eax
    LEA eax, [rbp+rbp+0]
    AND ebp, 80h
    CMOVNZ ebp, r13d
    MOVZX eax, al
    XOR ebp, eax
    MOVSXD rax, r11d
    XOR ebx, [rdi+rax*4]
    MOV [rdi+rcx*4], ebx
    JMP loc_40DAA7
loc_40DBD5:
    MOV ecx, offset aAesSetup
    MOV edx, 3A7h
    MOV esi, offset aSshaesC
    MOV edi, offset aKeylen16Keylen
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "description": "The function takes two distinct conceptual inputs, `input1` and `input2`. It returns an integer.",
      "categories": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object"],
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loop_indicators": ["false", "true"],
      "number_of_distinct_subroutine_call_targets": "1",
      "use_of_indexed_addressing_modes": ["false"],
      "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
      "presence_of_notable_floats_and_doubles": ["0x80000000", "0xFF"],
      "count_of_distinct_immediate_values": "1",
      "presence_of_notable_magic_numbers": ["0xDEADBEEF", "0x80000000"],
      "side_effects": ["likely modifies input parameters"],
      "inferred_algorithm": "CRC32 Calculation"
    },
    {
      "name": "Core Logic & Operations",
      "description": "The function performs arithmetic operations on two inputs, `input1` and `input2`, and returns an integer.",
      "categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loop_indicators": ["false", "true"],
      "number_of_distinct_subroutine_call_targets": "1",
      "use_of_indexed_addressing_modes": ["false"],
      "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
      "presence_of_notable_floats_and_doubles": ["0x80000000", "0xFF"],
      "count_of_distinct_immediate_values": "1",
      "presence_of_notable_magic_numbers": ["0xDEADBEEF", "0x80000000"],
      "side_effects": ["likely modifies input parameters"],
      "inferred_algorithm": "String Length Calculation"
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "description": "The function uses two magic numbers: `0xDEADBEEF` and `0x80000000`. These numbers are used to identify the algorithm implemented by the routine.",
      "categories": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object"],
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loop_indicators": ["false", "true"],
      "number_of_distinct_subroutine_call_targets": "1",
      "use_of_indexed_addressing_modes": ["false"],
      "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
      "presence_of_notable_floats_and_doubles": ["0x80000000", "0xFF"],
      "count_of_distinct_immediate_values": "1",
      "presence_of_notable_magic_numbers": ["0xDEADBEEF", "0x80000000"],
      "side_effects": ["likely modifies input parameters"],
      "inferred_algorithm": "Generic Control/Data Flow"
    },
    {
      "name": "Side Effects & Interactions",
      "description": "The function likely modifies input parameters, possibly by changing the value at an address derived from the input parameters.",
      "categories": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object"],
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loop_indicators": ["false", "true"],
      "number_of_distinct_subroutine_call_targets": "1",
      "use_of_indexed_addressing_modes": ["false"],
      "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
      "presence_of_notable_floats_and_doubles": ["0x80000000", "0xFF"],
      "count_of_distinct_immediate_values": "1",
      "presence_of_notable_magic_numbers": ["0xDEADBEEF", "0x80000000"],
      "side_effects": ["likely modifies input parameters"],
      "inferred_algorithm": "Undetermined"
    }
  ]
}
```
############
```assembly
loc_4152D0:
    PUSH rbp
    PUSH rbx
    MOV ebp, edx
    MOV rbx, rsi
    SUB rsp, 98h
    MOV rsi, rsp
    MOV rax, fs:28h
    MOV [rsp+0A8h+var_20], rax
    XOR eax, eax
    CALL sub_414740
    MOV rdx, rsp
    MOV esi, ebp
    MOV rdi, rbx
    CALL sub_414810
    MOV rax, [rsp+0A8h+var_20]
    XOR rax, fs:28h
    JNZ loc_415323
loc_415319:
    ADD rsp, 98h
    POP rbx
    POP rbp
    RETN 
loc_415323:
    CALL ___stack_chk_fail
```
Output:```json
{
  "inputParameterCount": 1,
  "inputParameterTypes": ["Integer"],
  "returnValueType": "None",
  "dominantOperationCategories": ["DataMovement"],
  "loopIndicators": false,
  "numberOfDistinctSubroutineCallTargets": 0,
  "useOfIndexedAddressingModes": false,
  "constantsAndMagicNumbers": [
    "0x5B8"
  ],
  "countOfDistinctImmediateValues": 1,
  "likelyModifiesInputParameters": true,
  "likelyModifiesGlobalState": false,
  "likelyPerformsMemoryAllocation/Deallocation": true,
  "likelyPerformI/OOperations": true,
  "likelyPerformBlockMemoryOperations": true,
  "inferredAlgorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_4108A0:
    PUSH rbx
    MOV rax, [rdi]
    MOV rbx, rdi
    LEA rsi, ds:8[rax*8]
    CALL sub_40B660
    MOV rdi, rbx
    POP rbx
    JMP sub_40B5E0
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature & Data Flow",
      "count": 1,
      "categories": ["Integer"],
      "value": "4108A0"
    },
    {
      "category": "Core Logic & Operations",
      "count": 3,
      "categories": ["Arithmetic", "Bitwise", "Comparison"],
      "value": "0x00000000"
    },
    {
      "category": "Loop Indicators",
      "count": 1,
      "categories": ["False"],
      "value": "true"
    },
    {
      "category": "Number of Distinct Subroutine Call Targets",
      "count": 1,
      "categories": ["True"],
      "value": "1"
    },
    {
      "category": "Use of Indexed Addressing Modes",
      "count": 1,
      "categories": ["True"],
      "value": "false"
    },
    {
      "category": "Constants & \"Magic Numbers\"",
      "count": 2,
      "categories": ["Integer", "Floats/Doubles"],
      "value": "0x00000000, 0x00000000"
    },
    {
      "category": "Side Effects & Interactions",
      "count": 3,
      "categories": ["True", "True", "True"],
      "value": "false, false, true"
    },
    {
      "category": "Inferred Algorithm (Conditional)",
      "count": 1,
      "categories": ["Undetermined"],
      "value": "Generic Control/Data Flow"
    }
  ]
}
```
############
```assembly
loc_642C88:
    EXTRN 
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "count": 1,
      "values": ["loc_642C88"]
    },
    {
      "category": "Core Logic & Operations",
      "count": 2,
      "values": ["EXTRN"]
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_642DE8:
    EXTRN 
```
Output:```json
{
  "features": {
    "inputParameterCount": 1,
    "inputParameterTypes": ["Integer"],
    "returnValueType": "Integer",
    "dominantOperationCategories": ["Arithmetic", "Comparison"],
    "loopIndicators": false,
    "numberDistinctSubroutineCallTargets": 1,
    "useOfIndexedAddressingModes": true,
    "constantsAndMagicNumbers": [
      "0x5B8",
      "0x23"
    ],
    "sideEffects": {
      "likelyModifiesInputParameters": false,
      "likelyModifiesGlobalState": false,
      "likelyPerformsMemoryAllocation/Deallocation": false,
      "likelyPerformI/OOperations": false,
      "likelyPerformsBlockMemoryOperations": false
    },
    "inferredAlgorithm": "CRC32 Calculation"
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_42B380:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    CALL sub_42B1A0
    TEST rax, rax
    JZ loc_42B3B0
loc_42B390:
    MOV rbx, rax
    MOV rdi, rax
    CALL sub_429C60
    MOV rdi, rbx
    MOV rbp, rax
    CALL sub_40B5E0
    MOV rax, rbp
loc_42B3A9:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_42B3B0:
    XOR eax, eax
    JMP loc_42B3A9
```
Output:```json
{
  "signature": {
    "inputParametersCount": 2,
    "inputParameterTypes": ["Integer", "Integer"],
    "returnValueType": "None"
  },
  "coreLogic": {
    "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison"],
    "loopIndicators": false,
    "numberOfDistinctSubroutineCallTargets": 1,
    "useOfIndexedAddressingModes": true
  },
  "constantsAndMagicNumbers": [
    "0x42B380",
    "0x42B1A0",
    "0x429C60",
    "0x40B5E0",
    "0x42B3A9"
  ],
  "sideEffects": {
    "likelyModifiesInputParameters": true,
    "likelyModifiesGlobalState": true,
    "likelyPerformsMemoryAllocation/Deallocation": true,
    "likelyPerformI/OOperations": true
  },
  "inferredAlgorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_41B270:
    PUSH r15
    PUSH r14
    MOV r14, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 18h
    MOV rax, [rdi+8]
    MOV rdi, [rax+20h]
    CALL sub_410F00
    LEA ebp, [rax+0Eh]
    ADD eax, 7
    CMOVNS ebp, eax
    MOV rax, [r14+8]
    SAR ebp, 3
    MOV edx, [rax]
    TEST edx, edx
    JNZ loc_41B380
loc_41B2AB:
    LEA edi, [rbp+rbp+1]
    MOV [rbx], edi
loc_41B2B1:
    MOVSXD rdi, edi
    MOV esi, 1
    CALL sub_40AC50
    MOV r12, rax
    MOV rax, [r14+8]
    MOV eax, [rax]
    TEST eax, eax
    JZ loc_41B308
loc_41B2CB:
    XOR ebx, ebx
    TEST ebp, ebp
    JLE loc_41B2EF
loc_41B2D1:
    NOP dword ptr [rax+00000000h]
loc_41B2D8:
    MOV rdi, [r14+10h]
    MOV esi, ebx
    CALL sub_410FE0
    MOV [r12+rbx], al
    ADD rbx, 1
    CMP ebp, ebx
    JG loc_41B2D8
loc_41B2EF:
    ADD rsp, 18h
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41B308:
    LEA rax, [r12+1]
    TEST ebp, ebp
    MOV byte ptr [r12], 4
    LEA ebx, [rbp-1]
    MOV [rsp+48h+var_48], rax
    JZ loc_41B2EF
loc_41B31D:
    MOV edx, ebx
    MOV r15d, ebx
    MOV rbp, rax
    LEA r13, [r12+rdx+2]
    MOV [rsp+48h+var_40], rdx
    NOP 
loc_41B330:
    MOV rdi, [r14+10h]
    ADD rbp, 1
    MOV esi, r15d
    SUB r15d, 1
    CALL sub_410FE0
    CMP r13, rbp
    MOV [rbp-1], al
    JNZ loc_41B330
loc_41B34C:
    MOV rax, [rsp+48h+var_48]
    MOV rcx, [rsp+48h+var_40]
    LEA rbp, [rax+rcx+1]
    NOP word ptr [rax+rax+00h]
loc_41B360:
    MOV rdi, [r14+18h]
    MOV esi, ebx
    SUB ebx, 1
    ADD rbp, 1
    CALL sub_410FE0
    MOV [rbp-1], al
    CMP ebx, 0FFFFFFFFh
    JNZ loc_41B360
loc_41B37A:
    JMP loc_41B2EF
loc_41B380:
    MOV [rbx], ebp
    MOV edi, ebp
    JMP loc_41B2B1
```
Output:```json
{
  "basic_signature": [
    4,
    1,
    2,
    1,
    1,
    1,
    2,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
############
```assembly
loc_40A4A0:
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 8
    CMP byte ptr [rdi], 5Eh
    JZ loc_40A4C0
loc_40A4AE:
    MOV qword ptr [rbp+0], 0
    XOR eax, eax
loc_40A4B8:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_40A4C0:
    MOVZX edx, byte ptr [rdi+1]
    TEST dl, dl
    JZ loc_40A4AE
loc_40A4C8:
    CMP dl, 3Ch
    JZ loc_40A508
loc_40A4CD:
    LEA eax, [rdx-61h]
    CMP al, 19h
    JBE loc_40A4F8
loc_40A4D4:
    LEA eax, [rdx-3Fh]
    CMP al, 20h
    JBE loc_40A530
loc_40A4DB:
    TEST dl, dl
    JS loc_40A530
loc_40A4DF:
    XOR eax, eax
    CMP dl, 7Eh
    JNZ loc_40A4B8
loc_40A4E6:
    ADD rdi, 2
    MOV eax, 5Eh
    MOV [rsi], rdi
    JMP loc_40A4B8
loc_40A4F8:
    ADD rdi, 2
    LEA eax, [rdx-60h]
    MOV [rsi], rdi
    JMP loc_40A4B8
loc_40A508:
    LEA rbx, [rdi+2]
    XOR edx, edx
    MOV rdi, rbx
    CALL _strtol
    MOV rdx, [rbp+0]
    CMP rbx, rdx
    JZ loc_40A4AE
loc_40A51F:
    CMP byte ptr [rdx], 3Eh
    JNZ loc_40A4AE
loc_40A524:
    ADD rdx, 1
    MOV [rbp+0], rdx
    JMP loc_40A4B8
loc_40A530:
    MOV eax, edx
    ADD rdi, 2
    XOR eax, 40h
    MOV [rbp+0], rdi
    JMP loc_40A4B8
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "categories": ["Integer"]
    },
    {
      "name": "Data Flow",
      "count": 3,
      "categories": ["Arithmetic", "Bitwise", "Comparison"]
    },
    {
      "name": "Core Logic & Operations",
      "count": 1,
      "categories": ["Arithmetic", "Bitwise", "Comparison"]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "count": 1,
      "categories": ["Integer", "Floating-Point"]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 3,
      "categories": ["Conditional", "MemoryAllocation/Deallocation", "I/O Operations"]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_41E20E:
    ADD rsp, 8
    MOV rax, rdx
    POP rbx
    POP rbp
    RETN 
loc_41E220:
    MOV edx, offset aSshDss
    MOV rsi, rbp
    MOV edi, ebx
    CALL sub_40B9B0
    TEST eax, eax
    MOV edx, offset off_433420
    JNZ loc_41E20E
loc_41E238:
    MOV edx, offset unk_43358A
    MOV rsi, rbp
    MOV edi, ebx
    CALL sub_40B9B0
    TEST eax, eax
    MOV edx, offset off_433F80
    JNZ loc_41E20E
loc_41E250:
    MOV edx, offset unk_433576
    MOV rsi, rbp
    MOV edi, ebx
    CALL sub_40B9B0
    TEST eax, eax
    MOV edx, offset off_433EC0
    JNZ loc_41E20E
loc_41E268:
    MOV edx, offset unk_433562
    MOV rsi, rbp
    MOV edi, ebx
    CALL sub_40B9B0
    TEST eax, eax
    MOV edx, offset off_433E00
    JNZ loc_41E20E
loc_41E280:
    MOV edx, offset unk_43359E
    MOV rsi, rbp
    MOV edi, ebx
    CALL sub_40B9B0
    MOV edx, 0
    TEST eax, eax
    MOV eax, offset off_434040
    CMOVNZ rdx, rax
    JMP loc_41E20E
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "description": "The function `loc_41E20E` appears to be a simple addition operation. It takes two parameters (`rdx` and `rbp`) and returns a value.",
      "categories": ["Arithmetic"]
    },
    {
      "name": "Core Logic & Operations",
      "description": "The function `loc_41E20E` performs a series of arithmetic operations. It adds `rdx` to `rbp` and then compares it with zero.",
      "categories": ["Arithmetic", "Comparison"]
    },
    {
      "name": "Loop Indicators",
      "description": "The function `loc_41E20E` has a loop that iterates twice, checking the condition `rdx` after each iteration.",
      "categories": ["Conditional"]
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "description": "The function `loc_41E20E` calls itself twice, but only once. This suggests it might be a recursive call.",
      "categories": ["Recursive"]
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "description": "The function `loc_41E20E` uses an index-based addressing mode for memory operations.",
      "categories": ["Indexed Addressing"]
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "description": "The function `loc_41E20E` uses common integer and floating-point constants.",
      "categories": ["Constant", "Magic Number"]
    },
    {
      "name": "Side Effects & Interactions",
      "description": "The function `loc_41E20E` modifies the `rsp` register, the `rbx` register, and the `rdp` register. It also performs memory access and I/O operations.",
      "categories": ["Memory Access", "I/O", "Side Effects"]
    }
  ],
  "algorithm": "Conditional"
}
```
############
```assembly
loc_4054D0:
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV rdi, rsi
    MOV r12, rsi
    CALL _strlen
    MOV rbx, rax
    SAR eax, 18h
    LEA rdi, [rbp+4]
    MOV [rbp+0], al
    MOV eax, ebx
    MOV [rbp+3], bl
    SAR eax, 10h
    MOVSXD rdx, ebx
    MOV rsi, r12
    MOV [rbp+1], al
    MOV eax, ebx
    SAR eax, 8
    MOV [rbp+2], al
    CALL _memcpy
    LEA eax, [rbx+4]
    POP rbx
    POP rbp
    POP r12
    RETN 
```
Output:```json
{
  "features": [
    {
      "inputParametersCount": 1,
      "inputParameterTypes": ["Integer"],
      "returnValueType": "Integer",
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison"],
      "loopIndicators": false,
      "numberDistinctSubroutineCallTargets": 1,
      "useIndexedAddressingModes": true,
      "constantsAndMagicNumbers": [
        "0x5B8", // Hexadecimal representation of 4054D0
        "0x23",   // Hexadecimal representation of 4054D1
        "0xDEADBEEF", // Hexadecimal representation of 4054D2
        "0x80000000", // Hexadecimal representation of 4054D3
        "0x00000000", // Hexadecimal representation of 4054D4
        "0xFFFF0000", // Hexadecimal representation of 4054D5
        "0xFF"     // Hexadecimal representation of 4054D6
      ],
      "sideEffects": false,
      "interactions": false,
      "inferredAlgorithm": "CRC32 Calculation"
    }
  ]
}
```
############
```assembly
loc_40F495:
    MOV edx, 40h
    SUB edx, ecx
    MOV ecx, edx
    SHR rsi, cl
    MOV r8, rsi
loc_40F4A4:
    MOVSXD rdx, r11d
    CMP rdx, [rdi]
    JA loc_40F58D
loc_40F4B0:
    SHL rdx, 3
    XOR ebx, ebx
    XOR r12d, r12d
    LEA r11, [rdi+rdx]
    MOV rsi, [r11]
    MOV rcx, rsi
    ADD rsi, rbp
    ADD rcx, rbp
    MOV [r11], rsi
    ADC rbx, r12
    MOV rcx, rbx
    XOR ebx, ebx
    TEST r8, r8
    JNZ loc_40F4E8
loc_40F4D9:
    TEST cl, 1
    JNZ loc_40F4E8
loc_40F4DE:
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_40F4E8:
    LEA esi, [rax+2]
    MOVSXD rsi, esi
    CMP rsi, [rdi]
    JA loc_40F574
loc_40F4F7:
    LEA rdx, [rdi+rdx+8]
    XOR r12d, r12d
    MOV r11, [rdx]
    ADD rcx, r11
    ADC rbx, r12
    XOR r12d, r12d
    ADD rcx, r8
    ADC rbx, r12
    ADD eax, 3
    MOV [rdx], rcx
    TEST rbx, rbx
    JZ loc_40F4DE
loc_40F51C:
    CDQE 
    CMP [rdi], rax
    JNB loc_40F531
loc_40F523:
    JMP loc_40F55B
loc_40F528:
    ADD rax, 1
    CMP rax, [rdi]
    JA loc_40F55B
loc_40F531:
    MOV rdx, [rdi+rax*8]
    XOR r10d, r10d
    MOV rbx, r10
    MOV r9, rdx
    ADD rdx, 1
    MOV rcx, r9
    MOV [rdi+rax*8], rdx
    ADD rcx, 1
    ADC rbx, 0
    TEST rbx, rbx
    JNZ loc_40F528
loc_40F556:
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_40F55B:
    MOV ecx, offset aInternalAddShi
    MOV edx, 209h
    MOV esi, offset aSshbnC
    MOV edi, offset aWordNumber0
    CALL ___assert_fail
loc_40F574:
    MOV ecx, offset aInternalAddShi
    MOV edx, 205h
    MOV esi, offset aSshbnC
    MOV edi, offset aWordNumber0
    CALL ___assert_fail
loc_40F58D:
    MOV ecx, offset aInternalAddShi
    MOV edx, 200h
    MOV esi, offset aSshbnC
    MOV edi, offset aWordNumber0
    CALL ___assert_fail
```
Output:```json
{
  "basic_signature": {
    "input_parameters_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "Integer"
  },
  "core_logic_operations": [
    {
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
      "constants_and_magic_numbers": [
        "0x5B8",
        "0x23"
      ],
      "subroutine_call_targets": [
        "loc_40F495",
        "loc_40F4A4",
        "loc_40F4B0",
        "loc_40F4D9",
        "loc_40F4E8",
        "loc_40F4D9",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
        "loc_40F4E8",
############
```assembly
loc_40D590:

loc_40D6C0:
    MOV rax, rdi
    MOV rdi, rsi
    MOV esi, edx
    MOV rdx, rax
    JMP sub_40D590
```
Output:```json
{
    "features": [
        {
            "category": "Basic Signature & Data Flow",
            "parameters": [
                {
                    "name": "inputParameterCount",
                    "value": 2,
                    "description": "The number of distinct conceptual inputs the function likely takes."
                },
                {
                    "name": "inputParameterTypes",
                    "value": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object", "Collection"],
                    "description": "A list of abstract data type categories representing the inputs."
                },
                {
                    "name": "returnValueType",
                    "value": "String",
                    "description": "The abstract data type of the value returned, if any."
                }
            ]
        },
        {
            "category": "Core Logic & Operations",
            "parameters": [
                {
                    "name": "dominantOperationCategories",
                    "value": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
                    "description": "Identify the 1, 2, or 3 most dominant types of operations performed by observing instruction mnemonics and their common effects."
                },
                {
                    "name": "loopIndicators",
                    "value": true,
                    "description": "True if common patterns indicating loops are observed (e.g., a conditional branch instruction targeting an earlier instruction's address, or a recognized architectural loop instruction)."
                },
                {
                    "name": "numberOfDistinctSubroutineCallTargets",
                    "value": 1,
                    "description": "Count of unique target addresses/offsets of instructions that transfer control to another subroutine."
                },
                {
                    "name": "useOfIndexedAddressingModes",
                    "value": true,
                    "description": "True if instructions appear to access memory using a base address combined with an offset derived from another register (like `[base_reg + index_reg * scale + displacement]`) or similar complex memory addressing. "
                }
            ]
        },
        {
            "category": "Constants & \"Magic Numbers\"",
            "parameters": [
                {
                    "name": "presenceOfNotableIntegerConstants",
                    "value": ["0x5B8", "0x23"],
                    "description": "A list of prominent integer literals (immediate values) used in operations, **represented as hexadecimal strings (e.g., "0x5B8", "0x23")**. Focus on values that are *not* trivial (0, 1, -1), common loop bounds, or typical stack adjustments."
                },
                {
                    "name": "presenceOfNotableFloatingPointConstants",
                    "value": ["0x80000000", "0xFF"],
                    "description": "A list of prominent floating-point literals used. (Heuristic: Look for unusual or algorithm-specific floating-point values, even if represented as integers in assembly)."
                },
                {
                    "name": "countOfDistinctImmediateValues",
                    "value": 1,
                    "description": "Total count of unique immediate (literal) values used directly in instructions. Exclude very common small values (0, 1, -1) if they primarily serve basic arithmetic/comparison."
                }
            ]
        },
        {
            "category": "Side Effects & Interactions",
            "parameters": [
                {
                    "name": "likelyModifiesInputParameters",
                    "value": true,
                    "description": "True if there are instructions writing to memory addresses derived from what are inferred as input parameters (e.g., `[inferred_input_pointer + offset] = value`)."
                },
                {
                    "name": "likelyModifiesGlobalState",
                    "value": false,
                    "description": "False otherwise. "
                },
                {
                    "name": "likelyPerformMemoryAllocation/Deallocation",
                    "value": true,
                    "description": "True if common patterns associated with dynamic memory management are observed."
                },
                {
                    "name": "likely Performs I/O Operations",
                    "value": true,
                    "description": "True if common patterns associated with I/O (e.g., console output, file operations) are observed."
                },
                {
                    "name": "likely Performs Block Memory Operations",
                    "value": true,
                    "description": "True if patterns indicative of copying or setting large blocks of memory are observed (e.g., a loop with data movement instructions and indexed addressing, or calls to known block operation subroutines). "
                },
                {
                    "name": "likely Performs Block Memory Operations",
                    "value": false,
                    "description": "False otherwise. "
                }
            ]
        },
        {
            "category": "Inferred Algorithm (Conditional)",
            "parameters": [
                {
                    "name": "inferredAlgorithm",
                    "value
############
```assembly
loc_427480:
    PUSH rbx
    MOV rbx, rdx
    MOV edx, esi
    MOV rsi, rdi
    SUB rsp, 70h
    MOV rdi, rsp
    MOV [rsp+78h+var_78], 67452301h
    MOV [rsp+78h+var_74], 0EFCDAB89h
    MOV rax, fs:28h
    MOV [rsp+78h+var_10], rax
    XOR eax, eax
    MOV [rsp+78h+var_70], 98BADCFEh
    MOV [rsp+78h+var_6C], 10325476h
    MOV [rsp+78h+var_68], 0C3D2E1F0h
    MOV [rsp+78h+var_24], 0
    MOV [rsp+78h+var_1C], 0
    MOV [rsp+78h+var_20], 0
    CALL sub_426A10
    MOV rsi, rbx
    MOV rdi, rsp
    CALL sub_426E50
    MOV esi, 60h
    MOV rdi, rsp
    CALL sub_40B660
    MOV rax, [rsp+78h+var_10]
    XOR rax, fs:28h
    JNZ loc_427512
loc_42750C:
    ADD rsp, 70h
    POP rbx
    RETN 
loc_427512:
    CALL ___stack_chk_fail
```
Output:```json
{
  "basic_signature": {
    "input_parameters_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "Integer"
  },
  "core_logic_and_operations": {
    "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
    "loop_indicators": true,
    "number_of_distinct_subroutine_call_targets": 1,
    "use_of_indexed_addressing_modes": true
  },
  "constants_and_magic_numbers": [
    "0x427480",
    "0xEFCDAB89h",
    "0x67452301h",
    "0xC3D2E1F0h",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0
############
```assembly
loc_429C60:

loc_429D40:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdx
    MOVSXD rdx, esi
    XOR esi, esi
    MOV rbp, rdi
    SUB rsp, 8
    CALL _memchr
    TEST rax, rax
    JZ loc_429D78
loc_429D5B:
    ADD rax, 1
    MOV rdi, rbp
    SUB rax, rbp
    MOV [rbx], eax
    ADD rsp, 8
    POP rbx
    POP rbp
    JMP sub_429C60
loc_429D78:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature & Data Flow",
      "parameters": [
        {
          "name": "inputParameterCount",
          "type": "Integer",
          "description": "The number of distinct conceptual inputs the function likely takes."
        },
        {
          "name": "inputParameterTypes",
          "type": "Array of Strings",
          "description": "A list of abstract data type categories representing the inputs."
        },
        {
          "name": "returnValueType",
          "type": "String",
          "description": "The abstract data type of the value returned, if any."
        }
      ]
    },
    {
      "category": "Core Logic & Operations",
      "parameters": [
        {
          "name": "dominantOperationCategories",
          "type": "Array of Strings",
          "description": "Identify the **1, 2, or 3 most dominant** types of operations performed by observing instruction mnemonics and their common effects. If control flow (jumps/branches) is a primary characteristic of the routine, ensure relevant categories (e.g., \"ConditionalBranching\", \"UnconditionalJump\") are included among the dominant ones."
        },
        {
          "name": "loopIndicators",
          "type": "Boolean",
          "description": `true` if common patterns indicating loops are observed (e.g., a conditional branch instruction targeting an earlier instruction's address, or a recognized architectural loop instruction). `false` otherwise.`
        },
        {
          "name": "numberOfDistinctSubroutineCallTargets",
          "type": "Integer",
          "description": "Count of unique target addresses/offsets of instructions that transfer control to another subroutine."
        },
        {
          "name": "useOfIndexedAddressingModes",
          "type": "Boolean",
          "description": `true` if instructions appear to access memory using a base address combined with an offset derived from another register (like `[base_reg + index_reg * scale + displacement]`) or similar complex memory addressing. `false` otherwise.`
        }
      ]
    },
    {
      "category": "Constants & \"Magic Numbers\"",
      "parameters": [
        {
          "name": "presenceOfNotableIntegerConstants",
          "type": "Array of Hexadecimal Strings",
          "description": "A list of prominent integer literals (immediate values) used in operations, **represented as hexadecimal strings (e.g., \"0x5B8\", \"0x23\")**. Focus on values that are *not* trivial (0, 1, -1), common loop bounds, or typical stack adjustments."
        },
        {
          "name": "presenceOfNotableFloatingPointConstants",
          "type": "Array of Floats/Doubles",
          "description": "A list of prominent floating-point literals used. (Heuristic: Look for unusual or algorithm-specific floating-point values, even if represented as integers in assembly)."
        },
        {
          "name": "countOfDistinctImmediateValues",
          "type": "Integer",
          "description": "Total count of unique immediate (literal) values used directly in instructions. Exclude very common small values (0, 1, -1) if they primarily serve basic arithmetic/comparison."
        }
      ]
    },
    {
      "category": "Side Effects & Interactions",
      "parameters": [
        {
          "name": "likelyModifiesInputParameters",
          "type": "Boolean",
          "description": `true` if there are instructions writing to memory addresses derived from what are inferred as input parameters (e.g., `[inferred_input_pointer + offset] = value`). `false` otherwise.`
        },
        {
          "name": "likelyModifiesGlobalState",
          "type": "Boolean",
          "description": `true` if there are instructions writing to fixed, non-stack-relative memory addresses that are not derived from input parameters. `false` otherwise. (Heuristic: Look for writes to absolute memory addresses or addresses resolved via global data segment pointers if discernible).
        },
        {
          "name": "likelyPerformsMemoryAllocation/Deallocation",
          "type": "Boolean",
          "description": `true` if common patterns associated with dynamic memory management are observed. (Heuristics): A subroutine call where the return value is immediately used as a base pointer for subsequent data storage, or specific constant arguments (e.g., a size) are passed to a subroutine call in a pattern consistent with allocation.`
        },
        {
          "name": "likelyPerformsI/OOperations",
          "type": "Boolean",
          "description": `true` if common patterns associated with I/O (e.g., console output, file operations) are observed. (Heuristics): A subroutine call that takes a *pointer to a string literal* as an argument, or calls
############
```assembly
loc_40D992:
    CMP edx, 20h
    JNZ loc_40DBD5
loc_40D99B:
    LEA r8d, [rdx+3]
    TEST edx, edx
    MOV r9d, 4
    MOV dword ptr [rdi+3F0h], 4
    MOV qword ptr [rdi+3C0h], offset sub_40BBC0
    MOV ebp, 1
    CMOVS edx, r8d
    MOV qword ptr [rdi+3C8h], offset sub_40C860
    MOV r13d, 1Bh
    SAR edx, 2
    CMP edx, 4
    MOV r11d, edx
    MOV r8d, edx
    CMOVGE r9d, edx
    NEG r11d
    XOR ecx, ecx
    LEA r10d, [r9+6]
    ADD r9d, 7
    LEA r12d, ds:0[r9*4]
    MOV [rdi+3F4h], r10d
    JMP loc_40DA38
loc_40DA04:
    MOVZX eax, byte ptr [rsi+rcx*4]
    ADD r11d, 1
    SHL eax, 18h
    MOV edx, eax
    MOVZX eax, byte ptr [rsi+rcx*4+1]
    SHL eax, 10h
    OR eax, edx
    MOVZX edx, byte ptr [rsi+rcx*4+3]
    OR edx, eax
    MOVZX eax, byte ptr [rsi+rcx*4+2]
    SHL eax, 8
    OR eax, edx
    MOV [rdi+rcx*4], eax
    ADD rcx, 1
    CMP r12d, ecx
    JLE loc_40DAB4
loc_40DA38:
    CMP r8d, ecx
    MOV eax, ecx
    JG loc_40DA04
loc_40DA3F:
    CDQ 
    MOV ebx, [rdi+rcx*4-4]
    IDIV r8d
    TEST edx, edx
    JZ loc_40DB71
loc_40DA4F:
    CMP r8d, 6
    JLE loc_40DA9E
loc_40DA55:
    CMP edx, 4
    JNZ loc_40DA9E
loc_40DA5A:
    MOV eax, ebx
    SHR eax, 18h
    CDQE 
    MOVZX eax, ds:byte_430FA0[rax]
    SHL eax, 8
    MOV edx, eax
    MOV eax, ebx
    SHR eax, 10h
    MOVZX eax, al
    MOVZX eax, ds:byte_430FA0[rax]
    OR eax, edx
    SHL eax, 8
    MOV edx, eax
    MOVZX eax, bh
    MOVZX ebx, bl
    MOVZX eax, ds:byte_430FA0[rax]
    MOVZX ebx, ds:byte_430FA0[rbx]
    OR eax, edx
    SHL eax, 8
    OR ebx, eax
loc_40DA9E:
    MOVSXD rax, r11d
    XOR ebx, [rdi+rax*4]
    MOV [rdi+rcx*4], ebx
loc_40DAA7:
    ADD rcx, 1
    ADD r11d, 1
    CMP r12d, ecx
    JG loc_40DA38
loc_40DAB4:
    LEA r11d, [r12-4]
    MOV esi, r12d
    XOR r14d, r14d
    NEG r11d
    NOP word ptr [rax+rax+00h]
loc_40DAC8:
    CMP r10d, r14d
    LEA ecx, [rsi-4]
    SETNZ r8b
    TEST r14d, r14d
    SETNZ al
    AND r8d, eax
    NOP dword ptr [rax+rax+00h]
loc_40DAE0:
    MOVSXD rax, ecx
    TEST r8b, r8b
    MOV eax, [rdi+rax*4]
    JZ loc_40DB3F
loc_40DAEB:
    MOV edx, eax
    MOVZX r12d, al
    MOVZX ebx, ah
    SHR edx, 18h
    SHR eax, 10h
    MOVZX r13d, ds:byte_430FA0[r12]
    MOVSXD rdx, edx
    MOVZX eax, al
    MOVZX ebp, ds:byte_430FA0[rbx]
    MOVZX r12d, ds:byte_430FA0[rdx]
    MOVZX eax, ds:byte_430FA0[rax]
    MOV edx, ds:dword_42EEA0[r13*4]
    XOR edx, ds:dword_42FAA0[r12*4]
    XOR edx, ds:dword_42F6A0[rax*4]
    MOV eax, ds:dword_42F2A0[rbp*4]
    XOR eax, edx
loc_40DB3F:
    LEA edx, [rcx+r11]
    ADD ecx, 1
    CMP ecx, esi
    MOVSXD rdx, edx
    MOV [rdi+rdx*4+1E0h], eax
    JNZ loc_40DAE0
loc_40DB54:
    ADD r14d, 1
    ADD r11d, 8
    LEA esi, [rcx-4]
    CMP r14d, r9d
    JNZ loc_40DAC8
loc_40DB68:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_40DB71:
    MOV eax, ebx
    SHR eax, 10h
    MOVZX eax, al
    MOVZX edx, ds:byte_430FA0[rax]
    MOVZX eax, bh
    MOVZX eax, ds:byte_430FA0[rax]
    XOR edx, ebp
    SHL edx, 8
    OR eax, edx
    SHL eax, 8
    MOV edx, eax
    MOVZX eax, bl
    SHR ebx, 18h
    MOVZX eax, ds:byte_430FA0[rax]
    OR eax, edx
    MOVSXD rdx, ebx
    MOVZX ebx, ds:byte_430FA0[rdx]
    SHL eax, 8
    OR ebx, eax
    LEA eax, [rbp+rbp+0]
    AND ebp, 80h
    CMOVNZ ebp, r13d
    MOVZX eax, al
    XOR ebp, eax
    MOVSXD rax, r11d
    XOR ebx, [rdi+rax*4]
    MOV [rdi+rcx*4], ebx
    JMP loc_40DAA7
loc_40DBD5:
    MOV ecx, offset aAesSetup
    MOV edx, 3A7h
    MOV esi, offset aSshaesC
    MOV edi, offset aKeylen16Keylen
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "Integer",
      "dominant_operation_categories": ["Arithmetic", "Comparison", "Bitwise"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameters_count": 1,
      "input_parameter_types": ["Integer
############
```assembly
loc_422BB0:
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 8
    MOV rdi, [rdi+8]
    CALL sub_410F40
    MOV rdi, [rbx+10h]
    MOV ebp, eax
    CALL sub_410F40
    LEA r12d, [rbp+rax+4]
    MOV esi, 1
    MOVSXD rdi, r12d
    CALL sub_40AC50
    MOV rdi, [rbx+8]
    MOV rbp, rax
    CALL sub_410F00
    SAR eax, 18h
    MOV [rbp+0], al
    MOV rdi, [rbx+8]
    CALL sub_410F00
    SAR eax, 10h
    MOV [rbp+1], al
    MOV rdi, [rbx+8]
    CALL sub_410F00
    SAR eax, 8
    MOV [rbp+2], al
    MOV rdi, [rbx+8]
    CALL sub_410F00
    MOV [rbp+3], al
    MOV rsi, [rbx+10h]
    LEA rdi, [rbp+4]
    CALL sub_4110F0
    LEA edi, [rax+4]
    MOV rsi, [rbx+8]
    MOVSXD rdi, edi
    ADD rdi, rbp
    CALL sub_4110F0
    MOV [r13+0], r12d
    ADD rsp, 8
    MOV rax, rbp
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
Output:```json
{
  "features": {
    "signature": "loc_422BB0",
    "data_flow": [
      {
        "input_param_count": 2,
        "input_param_types": ["Integer", "Pointer"],
        "return_value_type": "None"
      },
      {
        "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching"],
        "constants_and_magic_numbers": ["0x5B8", "0x23"],
        "subroutine_call_targets": false,
        "control_flow": true
      }
    ]
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_401CC0:
    CMP byte ptr [rsi], 0
    MOVSXD rcx, edx
    JNS loc_401CFD
loc_401CC8:
    LEA eax, [rdx+1]
    MOV byte ptr [rdi+4], 0
    MOV r8d, eax
    SAR r8d, 18h
    MOV [rdi], r8b
    MOV r8d, eax
    SAR eax, 8
    SAR r8d, 10h
    MOV [rdi+2], al
    LEA eax, [rdx+1]
    MOV [rdi+1], r8b
    LEA r8, [rdi+5]
    MOV [rdi+3], al
    LEA eax, [rdx+5]
    MOV rdi, r8
    REP 
    RETN 
loc_401CFD:
    MOV eax, edx
    LEA r8, [rdi+4]
    MOV [rdi+3], dl
    SAR eax, 18h
    MOV [rdi], al
    MOV eax, edx
    SAR eax, 10h
    MOV [rdi+1], al
    MOV eax, edx
    SAR eax, 8
    MOV [rdi+2], al
    MOV rdi, r8
    LEA eax, [rdx+4]
    REP 
    RETN 
```
Output:```json
{
  "features": {
    "signature": {
      "inputParametersCount": 1,
      "inputParameterTypes": ["byte"],
      "returnValueType": "void",
      "dominantOperationCategories": ["Arithmetic", "Comparison", "Bitwise", "DataMovement", "ConditionalBranching"]
    },
    "coreLogicAndOperations": {
      "dominantOperationCategories": ["Arithmetic", "Comparison", "Bitwise", "DataMovement", "ConditionalBranching"],
      "loopIndicators": false,
      "numberDistinctSubroutineCallTargets": 1,
      "useOfIndexedAddressingModes": false,
      "constantsAndMagicNumbers": [
        "0x5B8",
        "0x23"
      ],
      "countOfDistinctImmediateValues": 4
    },
    "sideEffects": {
      "likelyModifiesInputParameters": true,
      "likelyModifiesGlobalState": false,
      "likelyPerformMemoryAllocation/Deallocation": true,
      "likelyPerformI/OOperations": true,
      "likelyPerformBlockMemoryOperations": true
    },
    "inferredAlgorithm": "CRC32 Calculation"
  }
}
```
############
```assembly
loc_40BBA0:
    XOR eax, eax
    RETN 
```
Output:```json
{
  "features": [
    {
      "inputParameterCount": 0,
      "inputParameterTypes": ["None"],
      "returnValueType": "None",
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loopIndicators": false,
      "numberOfDistinctSubroutineCallTargets": 0,
      "useOfIndexedAddressingModes": false,
      "constantsAndMagicNumbers": ["0x5B8", "0x23"],
      "sideEffects": false,
      "interactions": false,
      "inferredAlgorithm": "CRC32 Calculation"
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_415720:
    MOV rax, [rdi]
    TEST rax, rax
    JZ loc_4159E3
loc_41572C:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, rax
    SUB rsp, 18h
    CALL sub_410F00
    MOV rdi, [rbx+8]
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    MOV r12d, eax
    CMOVS r12d, edx
    SAR r12d, 2
    CALL sub_410F00
    MOV rdi, [rbx+10h]
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    MOV ebp, eax
    LEA r13d, [r12+0Dh]
    CMOVS ebp, edx
    SAR ebp, 2
    CALL sub_410F00
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    LEA r12d, [rbp+r13+0]
    MOV rdi, [rbx+18h]
    MOV ebp, eax
    CMOVS ebp, edx
    SAR ebp, 2
    CALL sub_410F00
    ADD ebp, r12d
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    MOV edi, eax
    MOV esi, 1
    CMOVS edi, edx
    SAR edi, 2
    ADD edi, ebp
    MOVSXD rdi, edi
    CALL sub_40AC50
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4159E6
loc_4157C3:
    MOV eax, 7830h
    MOV byte ptr [rbp+2], 0
    LEA r14, [rbp+2]
    MOV [rbp+0], ax
    MOV rdi, [rbx]
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    CMOVS eax, edx
    SAR eax, 2
    LEA r12d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r12d, eax
    MOV r13d, r12d
    NOP word ptr [rax+rax+00h]
loc_415800:
    MOV rdi, [rbx]
    MOV esi, r13d
    ADD r14, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r13d
    SUB r13d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r14-1], al
    CMP r13d, 0FFFFFFFFh
    JNZ loc_415800
loc_415834:
    LEA eax, [r12+3]
    CDQE 
    MOV dword ptr [rbp+rax+0], 78302Ch
    MOV rdi, [rbx+8]
    LEA eax, [r12+6]
    MOV r14d, eax
    MOV [rsp+48h+var_3C], eax
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    CMOVS eax, edx
    MOVSXD rdx, r14d
    SAR eax, 2
    LEA r14, [rbp+rdx+0]
    LEA r13d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r13d, eax
    MOV r15d, r13d
    XCHG ax, ax
loc_415880:
    MOV rdi, [rbx+8]
    MOV esi, r15d
    ADD r14, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r15d
    SUB r15d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r14-1], al
    CMP r15d, 0FFFFFFFFh
    JNZ loc_415880
loc_4158B5:
    MOV r14d, [rsp+48h+var_3C]
    LEA eax, [r12+r13+7]
    CDQE 
    ADD r14d, r13d
    MOV dword ptr [rbp+rax+0], 78302Ch
    MOV rdi, [rbx+10h]
    LEA eax, [r14+4]
    MOV r15d, eax
    MOV [rsp+48h+var_3C], eax
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    CMOVS eax, edx
    MOVSXD rdx, r15d
    SAR eax, 2
    LEA r13, [rbp+rdx+0]
    LEA r12d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r12d, eax
    MOV r15d, r12d
    NOP word ptr [rax+rax+00000000h]
loc_415910:
    MOV rdi, [rbx+10h]
    MOV esi, r15d
    ADD r13, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r15d
    SUB r15d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r13-1], al
    CMP r15d, 0FFFFFFFFh
    JNZ loc_415910
loc_415945:
    LEA eax, [r14+r12+5]
    MOV r13d, [rsp+48h+var_3C]
    CDQE 
    MOV dword ptr [rbp+rax+0], 78302Ch
    MOV rdi, [rbx+18h]
    ADD r13d, r12d
    LEA r15d, [r13+4]
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    MOVSXD r15, r15d
    CMOVS eax, edx
    SAR eax, 2
    LEA r12d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r12d, eax
    ADD r15, rbp
    MOV r14d, r12d
    NOP dword ptr [rax]
loc_415990:
    MOV rdi, [rbx+18h]
    MOV esi, r14d
    ADD r15, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r14d
    SUB r14d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r15-1], al
    CMP r14d, 0FFFFFFFFh
    JNZ loc_415990
loc_4159C5:
    LEA eax, [r13+r12+5]
    CDQE 
    MOV byte ptr [rbp+rax+0], 0
    MOV rax, rbp
loc_4159D4:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4159E3:
    XOR eax, eax
    RETN 
loc_4159E6:
    XOR eax, eax
    JMP loc_4159D4
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature & Data Flow",
      "count": 1,
      "types": ["Integer"],
      "values": ["0x5B8"]
    },
    {
      "category": "Core Logic & Operations",
      "count": 3,
      "types": ["Arithmetic", "Bitwise", "Comparison"],
      "values": ["add", "subtract", "multiply", "divide", "increment", "decrement", "AND", "OR", "XOR", "NOT", "shift", "rotates", "compare", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "loopIndicators": false,
      "numberDistinctSubroutineCallTargets": 1,
      "useOfIndexedAddressingModes": false
    },
    {
      "category": "Constants & 'Magic Numbers'",
      "count": 3,
      "types": ["Hexadecimal Strings", "Floats/Doubles"],
      "values": ["0x5B8", "0x23", "7830h", "0x80000000"]
    },
    {
      "category": "Side Effects & Interactions",
      "count": 3,
      "types": ["Notable Integer Constants", "Notable Floating-Point Constants", "Count of Distinct Immediate Values"],
      "values": ["0x5B8", "0x80000000", "7830h", "0x23"]
    },
    {
      "category": "Inferred Algorithm (Conditional)",
      "count": 1,
      "types": ["CRC32 Calculation", "String Length Calculation", "Memcpy", "XOR Cipher"],
      "values": ["CRC32 Calculation", "String Length Calculation", "Memcpy", "XOR Cipher"]
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_401900:
    JMP cs:off_6420D8
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "parameters": {
        "input_parameter_count": 1,
        "input_parameter_types": ["Integer"],
        "return_value_type": "None"
      },
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"]
    },
    {
      "name": "Core Logic & Operations",
      "parameters": {
        "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
        "loop_indicators": false,
        "number_of_distinct_subroutine_call_targets": 0,
        "use_of_indexed_addressing_modes": false
      },
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "parameters": {
        "magic_numbers": ["0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "0x80000000", "0xFFFF0000", "0xFF", "0xDEADBEEF", "
############
```assembly
loc_424730:
    SUB rsp, 8
    MOV esi, 118h
    MOV edi, 1
    CALL sub_40AC50
    XOR edx, edx
    NOP dword ptr [rax]
loc_424748:
    MOV rsi, ds:qword_4386C0[rdx]
    MOV rdi, ds:qword_4386C8[rdx]
    MOV [rax+rdx], rsi
    MOV [rax+rdx+8], rdi
    ADD rdx, 10h
    CMP rdx, 80h
    JNZ loc_424748
loc_42476C:
    MOV dword ptr [rax+100h], 0
    MOV dword ptr [rax+104h], 0
    MOV dword ptr [rax+108h], 0
    MOV dword ptr [rax+10Ch], 0
    MOV dword ptr [rax+110h], 0
    ADD rsp, 8
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature": ["loc_424730", "SUB rsp, 8", "MOV esi, 118h", "MOV edi, 1", "CALL sub_40AC50"],
    "data_flow": [
      {
        "input_parameter_count": 2,
        "input_parameter_types": ["Integer", "Pointer"],
        "return_value_type": "None"
      },
      {
        "dominant_operation_categories": ["Arithmetic", "Bitwise"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": false,
        "control_flow": true
      }
    ],
    "constants_and_magic_numbers": [
      ["0x5B8", "0x23"],
      ["0xDEADBEEF", "0x80000000"],
      ["0xFFFF0000", "0xFF"],
      ["0x80000000", "0xFF"],
      ["0x4386C0", "ds:qword_4386C0[rdx]"],
      ["0x4386C8", "ds:qword_4386C8[rdx]"]
    ],
    "side_effects": [
      {
        "likely_modifies_input_parameters": false,
        "likely_modifies_global_state": false,
        "likely_performs_memory_allocation/deallocation": false,
        "likely_performs_I/O_operations": false,
        "likely_performs_block_memory_operations": false
      }
    ],
    "inferred_algorithm": "CRC32 Calculation"
  }
}
```
############
```assembly
loc_415200:
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV rbp, rdx
    MOV r12d, ecx
    SUB rsp, 1A8h
    MOV esi, [rdi+4]
    MOV edi, [rdi]
    MOV rdx, rsp
    MOV rax, fs:28h
    MOV [rsp+1C8h+var_30], rax
    XOR eax, eax
    BSWAP esi
    BSWAP edi
    CALL sub_4130F0
    MOV esi, [rbx+0Ch]
    MOV edi, [rbx+8]
    LEA rdx, [rsp+1C8h+var_140]
    BSWAP esi
    BSWAP edi
    CALL sub_4130F0
    MOV esi, [rbx+14h]
    MOV edi, [rbx+10h]
    LEA rdx, [rsp+1C8h+var_B8]
    BSWAP esi
    BSWAP edi
    CALL sub_4130F0
    MOV eax, [r13+0]
    MOV rdx, rsp
    MOV esi, r12d
    MOV rdi, rbp
    BSWAP eax
    MOV [rsp+1C8h+var_148], eax
    MOV eax, [r13+4]
    BSWAP eax
    MOV [rsp+1C8h+var_144], eax
    CALL sub_414CB0
    MOV esi, 198h
    MOV rdi, rsp
    CALL sub_40B660
    MOV rax, [rsp+1C8h+var_30]
    XOR rax, fs:28h
    JNZ loc_4152C1
loc_4152B3:
    ADD rsp, 1A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4152C1:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "input_parameter_count": 2,
      "input_parameter_types": ["Integer", "Pointer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    {
      "input_parameter_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["DataMovement"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameter_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["ConditionalBranching"],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameter_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["MemoryAccess"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    {
      "input_parameter_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["ConditionalBranching"],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_416B10:
    PUSH r15
    PUSH r14
    MOV r14, rcx
    PUSH r13
    PUSH r12
    MOV r15, rdi
    PUSH rbp
    PUSH rbx
    MOV ebx, esi
    MOV r12, rdx
    MOV esi, 4
    MOV edx, 1
    SUB rsp, 38h
    MOV rdi, r14
    XOR ebp, ebp
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    MOV [rsp+68h+var_58], rcx
    MOV ecx, 2800h
    CALL r12
    MOV ecx, 0FFFFD10Eh
    MOV edx, 1
    MOV esi, 3
    MOV rdi, r14
    CALL r12
    MOV ecx, ebx
    MOV edx, 2
    MOV esi, 4
    SHL ecx, 6
    MOV rdi, r14
    CALL r12
    MOV eax, 0FFE2A83Ch
    MOV esi, 3
    MOV rdi, r14
    CDQ 
    IDIV ebx
    MOV edx, 2
    MOV ecx, eax
    CALL r12
    MOV ecx, 2000h
    MOV edx, 3
    MOV esi, 4
    MOV rdi, r14
    CALL r12
    MOV ecx, 0FFFF8000h
    MOV edx, 3
    MOV esi, 3
    MOV rdi, r14
    CALL r12
    MOV ecx, 2000h
    MOV edx, 4
    MOV esi, 4
    MOV rdi, r14
    CALL r12
    MOV ecx, 0FFFF4000h
    MOV edx, 4
    MOV esi, 3
    MOV rdi, r14
    CALL r12
    XOR ecx, ecx
    XOR edx, edx
    MOV esi, 5
    MOV rdi, r14
    CALL r12
    LEA rsi, [rsp+68h+var_44]
    LEA rdi, [rsp+68h+var_48]
    CALL sub_41D330
    MOV eax, [rsp+68h+var_44]
    MOV r9, r12
    MOV r8d, 1
    XOR ecx, ecx
    MOV edx, 2
    MOV esi, 2
    MOV edi, 0A0h
    PUSH rax
    PUSH r14
    CALL sub_41CBB0
    MOV edx, [rsp+78h+var_48]
    LEA edi, [rbx-0A0h]
    MOV r9, r12
    MOV r8d, 2
    MOV rcx, rax
    MOV esi, 2
    MOV [r15+8], rax
    PUSH rdx
    PUSH r14
    MOV edx, 2
    CALL sub_41CBB0
    MOV rsi, [r15+8]
    ADD rsp, 20h
    MOV rdi, rax
    MOV [r15], rax
    CALL sub_411E80
    MOV edi, 1
    MOV r13, rax
    CALL sub_411C60
    MOV rbx, rax
    JMP loc_416CA3
loc_416C88:
    MOV rdi, rbx
    MOV esi, 1
    CALL sub_411D40
    MOV r14, rax
    MOV rdi, rbx
    MOV rbx, r14
    CALL sub_4108A0
loc_416CA3:
    ADD ebp, 1
    MOV edx, 3
    MOV esi, 6
    MOV ecx, ebp
    MOV rdi, [rsp+68h+var_58]
    CALL r12
    MOV rdx, [r15]
    MOV rsi, r13
    MOV rdi, rbx
    CALL sub_412860
    MOV rsi, cs:off_6422C8
    MOV rdi, rax
    MOV r14, rax
    CALL sub_4111B0
    TEST eax, eax
    JLE loc_416C88
loc_416CDE:
    MOV rdi, rbx
    MOV [r15+10h], r14
    CALL sub_4108A0
    MOV rdi, [r15+8]
    CALL sub_410860
    MOV rdi, rax
    MOV [rsp+68h+var_50], rax
    CALL sub_410C70
    MOV [rsp+68h+var_5C], 0
    NOP dword ptr [rax+rax+00000000h]
loc_416D10:
    ADD [rsp+68h+var_5C], 1
    MOV edx, 4
    MOV esi, 6
    MOV eax, [rsp+68h+var_5C]
    MOV rdi, [rsp+68h+var_58]
    XOR r13d, r13d
    XOR ebp, ebp
    XOR r14d, r14d
    MOV ecx, eax
    CALL r12
    MOV edi, 9Fh
    CALL sub_4110A0
    MOV rbx, rax
    JMP loc_416D6B
loc_416D48:
    SUB r13d, 1
loc_416D4C:
    MOV edx, ebp
    MOV esi, r14d
    MOV rdi, rbx
    AND edx, 1
    ADD r14d, 1
    SAR ebp, 1
    CALL sub_411050
    CMP r14d, 0A0h
    JZ loc_416D80
loc_416D6B:
    TEST r13d, r13d
    JNZ loc_416D48
loc_416D70:
    CALL sub_420F10
    MOV r13d, 7
    MOV ebp, eax
    JMP loc_416D4C
loc_416D80:
    MOV rsi, cs:off_6422C8
    MOV rdi, rbx
    CALL sub_4111B0
    TEST eax, eax
    JLE loc_416DA4
loc_416D93:
    MOV rsi, [rsp+68h+var_50]
    MOV rdi, rbx
    CALL sub_4111B0
    TEST eax, eax
    JS loc_416DB1
loc_416DA4:
    MOV rdi, rbx
    CALL sub_4108A0
    JMP loc_416D10
loc_416DB1:
    MOV rdi, [rsp+68h+var_50]
    MOV [r15+20h], rbx
    CALL sub_4108A0
    MOV rsi, [r15+20h]
    MOV rdi, [r15+10h]
    MOV rdx, [r15]
    CALL sub_412860
    MOV rcx, [rsp+68h+var_40]
    XOR rcx, fs:28h
    MOV [r15+18h], rax
    MOV eax, 1
    JNZ loc_416DF7
loc_416DE8:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_416DF7:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "description": "The function takes two arguments, `loc_416B10` and `loc_416C88`, and performs basic arithmetic operations. It uses a stack-based approach to manage data.",
      "categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement"
      ]
    },
    {
      "name": "Core Logic & Operations",
      "description": "The function contains several main operations, including arithmetic, bitwise, comparison, data movement, conditional branching, subroutine calls, return, memory access, stack manipulation, and I/O operations.",
      "categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return",
        "MemoryAccess",
        "StackManipulation",
        "I/OOperations"
      ]
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "description": "The function contains several constant literals and magic numbers used in operations, such as `0xDEADBEEF` and `0x80000000`. These constants are not trivial and can vary depending on the context.",
      "categories": [
        "Magic Numbers",
        "Integer",
        "Floating-Point",
        "String",
        "Struct/Object"
      ]
    },
    {
      "name": "Side Effects & Interactions",
      "description": "The function performs several side effects, including modifying input parameters, transferring control to another subroutine, modifying global state, and performing I/O operations.",
      "categories": [
        "Side Effects",
        "Conditional",
        "Interactions",
        "MemoryAllocation/Deallocation",
        "I/OOperations"
      ]
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "description": "Based on the combination of `dominant_operation_categories`, `constants_and_magic_numbers`, `subroutine_call_targets` (if they form a known pattern), and `control_flow` (even if heuristically determined loops/branches), the function identifies a specific algorithm.",
      "categories": [
        "Algorithms",
        "High Confidence Identification"
      ]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_403B00:
    PUSH r12
    PUSH rbp
    MOV esi, (offset aUnsupportedCip+11h)
    PUSH rbx
    MOV r12, rdi
    CALL _fopen
    TEST rax, rax
    JZ loc_403BC4
loc_403B1A:
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_40B500
    TEST rax, rax
    MOV rbx, rax
    JZ loc_403B78
loc_403B2D:
    MOVZX eax, byte ptr [rax]
    CMP al, 0Dh
    JA loc_403B3F
loc_403B34:
    MOV edx, 2401h
    BT rdx, rax
    JB loc_403BB0
loc_403B3F:
    LEA rdx, [rbx+1]
    MOV edi, 2401h
    NOP dword ptr [rax+rax+00000000h]
loc_403B50:
    MOVZX ecx, byte ptr [rdx]
    MOV rsi, rdx
    ADD rdx, 1
    CMP cl, 0Dh
    JA loc_403B50
loc_403B5F:
    BT rdi, rcx
    JNB loc_403B50
loc_403B65:
    MOV byte ptr [rsi], 0
loc_403B68:
    MOV rdi, rbp
    CALL _fclose
    MOV rax, rbx
loc_403B73:
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_403B78:
    MOV rdi, rbp
    CALL _ferror
    TEST eax, eax
    JZ loc_403BB5
loc_403B84:
    CALL ___errno_location
    MOV edi, [rax]
    CALL _strerror
    MOV rdi, cs:stderr
    MOV r8, rax
    MOV rcx, r12
    MOV edx, offset aPuttygenErrorR
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_403B68
loc_403BB0:
    MOV rsi, rbx
    JMP loc_403B65
loc_403BB5:
    MOV edi, (offset asc_42E60B+2)
    CALL sub_40ACA0
    MOV rbx, rax
    JMP loc_403B68
loc_403BC4:
    CALL ___errno_location
    MOV edi, [rax]
    CALL _strerror
    MOV rdi, cs:stderr
    MOV r8, rax
    MOV rcx, r12
    MOV edx, offset aPuttygenCannot_3
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    XOR eax, eax
    JMP loc_403B73
```
Output:```json
{
  "features": {
    "basic_signature": [
      "int",
      "pointer",
      "boolean",
      "floating_point",
      "string",
      "struct/object",
      "collection"
    ],
    "core_logic": [
      "Arithmetic",
      "Bitwise",
      "Comparison",
      "DataMovement",
      "ConditionalBranching",
      "SubroutineCall",
      "Return",
      "MemoryAccess",
      "StackManipulation"
    ],
    "loop_indicators": [
      true,
      true,
      true,
      false,
      false,
      true,
      true,
      false
    ],
    "constants_and_magic_numbers": [
      "0x5B8",
      "0x23",
      "0xDEADBEEF",
      "0x80000000",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B",
      "0x42E60B
############
```assembly
loc_401B80:
    JMP cs:off_642218
```
Output:```json
{
  "features": [
    {
      "inputParameterCount": 1,
      "inputParameterTypes": ["Integer"],
      "returnValueType": "None"
    },
    {
      "dominantOperationCategories": ["Arithmetic"],
      "constantsAndMagicNumbers": ["0x80000000", "0xDEADBEEF"],
      "subroutineCallTargets": true,
      "controlFlow": true
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_4194A0:
    PUSH r12
    PUSH rbp
    MOV r12, rdi
    PUSH rbx
    SUB rsp, 30h
    MOV rbx, [rdi+70h]
    MOV [rsp+48h+var_40], rsi
    MOV [rsp+48h+var_44], edx
    LEA rcx, [rsp+48h+var_2C]
    LEA rdx, [rsp+48h+var_28]
    LEA rsi, [rsp+48h+var_44]
    LEA rdi, [rsp+48h+var_40]
    MOV rax, fs:28h
    MOV [rsp+48h+var_20], rax
    XOR eax, eax
    CALL sub_418D50
    CMP [rsp+48h+var_28], 0
    JZ loc_419598
loc_4194ED:
    CALL qword ptr [rbx]
    MOV rbp, rax
    MOV eax, [rax]
    TEST eax, 0FFFFFFFDh
    JNZ loc_4195F2
loc_4194FF:
    TEST eax, eax
    JZ loc_4195B8
loc_419507:
    MOV esi, 38h
    MOV edi, 1
    CALL sub_40AC50
    LEA rsi, [rsp+48h+var_44]
    LEA rdx, [rax+8]
    LEA rdi, [rsp+48h+var_40]
    MOV [rax], r12
    MOV [rax+8], rbp
    MOV rbx, rax
    MOV byte ptr [rax+28h], 0
    MOV qword ptr [rax+10h], 0
    MOV qword ptr [rax+18h], 0
    MOV qword ptr [rax+20h], 0
    MOV qword ptr [rax+30h], 0
    CALL sub_419440
    TEST eax, eax
    JZ loc_419590
loc_41955B:
    MOV rdi, [rbx+10h]
    TEST rdi, rdi
    JZ loc_419590
loc_419564:
    CMP qword ptr [rbx+18h], 0
    JZ loc_419590
loc_41956B:
    MOV rsi, [rbp+20h]
    CALL sub_4111B0
    TEST eax, eax
    JNS loc_419590
loc_419578:
    MOV rsi, [rbp+20h]
    MOV rdi, [rbx+18h]
    CALL sub_4111B0
    TEST eax, eax
    JNS loc_419590
loc_419589:
    MOV rax, rbx
    JMP loc_41959A
loc_419590:
    MOV rdi, rbx
    CALL sub_416E00
loc_419598:
    XOR eax, eax
loc_41959A:
    MOV rcx, [rsp+48h+var_20]
    XOR rcx, fs:28h
    JNZ loc_41960B
loc_4195AA:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4195B8:
    LEA rsi, [rsp+48h+var_44]
    LEA rcx, [rsp+48h+var_2C]
    LEA rdx, [rsp+48h+var_28]
    LEA rdi, [rsp+48h+var_40]
    CALL sub_418D50
    MOV rsi, [rsp+48h+var_28]
    TEST rsi, rsi
    JZ loc_419598
loc_4195DB:
    MOV rdx, [rbp+8]
    MOV edi, [rsp+48h+var_2C]
    CALL sub_40B9B0
    TEST eax, eax
    JNZ loc_419507
loc_4195F0:
    JMP loc_419598
loc_4195F2:
    MOV ecx, offset aEcdsaNewkey
    MOV edx, 6E9h
    MOV esi, offset aSsheccC
    MOV edi, offset aCurveTypeEcWei
    CALL ___assert_fail
loc_41960B:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "categories": ["Integer"]
    },
    {
      "name": "Data Flow",
      "count": 3,
      "categories": ["Arithmetic", "Bitwise", "Comparison"]
    },
    {
      "name": "Constants & Magic Numbers",
      "count": 5,
      "categories": ["Integer", "Floating-Point", "String", "Struct/Object", "Magic Numbers"]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 3,
      "categories": ["MemoryAccess", "StackManipulation", "BlockMemoryOperations"]
    },
    {
      "name": "Inferred Algorithm",
      "count": 2,
      "categories": ["Conditional"]
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_422790:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    CALL sub_422620
    MOV esi, 1
    MOVSXD rdi, eax
    CALL sub_40AC50
    MOV rsi, rbp
    MOV rdi, rax
    MOV rbx, rax
    CALL sub_422670
    ADD rsp, 8
    MOV rax, rbx
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "types": ["Integer"]
    },
    {
      "name": "Data Flow",
      "count": 1,
      "types": ["Integer"]
    },
    {
      "name": "Core Logic & Operations",
      "count": 4,
      "types": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"]
    },
    {
      "name": "Loop Indicators",
      "count": 1,
      "types": ["Boolean"]
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "count": 1,
      "types": ["Integer"]
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "count": 1,
      "types": ["Boolean"]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "count": 4,
      "types": ["Hexadecimal Strings", "Floats/Doubles"]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 1,
      "types": ["Boolean"]
    },
    {
      "name": "Inferred Algorithm",
      "count": 1,
      "types": ["String"]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_642E30:
    EXTRN 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "categories": ["Integer"],
      "description": "The routine has exactly one distinct conceptual input."
    },
    {
      "name": "Input Parameter Count",
      "count": 1,
      "categories": ["Integer"],
      "description": "The routine has exactly one distinct conceptual input."
    },
    {
      "name": "Input Parameter Types",
      "count": 1,
      "categories": ["Integer"],
      "description": "The routine has exactly one distinct conceptual input."
    },
    {
      "name": "Return Value Type",
      "count": 1,
      "categories": ["Integer"],
      "description": "The routine has exactly one distinct conceptual input."
    }
  ],
  "inference": {
    "dominant_operation_categories": ["Arithmetic"],
    "constants_and_magic_numbers": ["0x5B8"],
    "subroutine_call_targets": [0x642E30],
    "control_flow": "Conditional"
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_41FA10:
    PUSH r14
    PUSH r13
    MOV r13, rsi
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 30h
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_41FA3B
loc_41FA34:
    MOV qword ptr [rsi], 0
loc_41FA3B:
    XOR edx, edx
    MOV esi, offset aRb
    XOR ebx, ebx
    CALL sub_42A050
    TEST rax, rax
    MOV rbp, rax
    JZ loc_41FAD5
loc_41FA55:
    MOV rsi, rsp
    MOV rdi, rax
    MOV r12, rsp
    CALL sub_41D800
    TEST eax, eax
    JZ loc_41FACB
loc_41FA67:
    MOV edi, offset aPuttyUserKeyFi
    MOV ecx, 16h
    MOV rsi, rsp
    REPE 
    JZ loc_41FA89
loc_41FA78:
    MOV edi, offset aPuttyUserKeyFi_0
    MOV ecx, 16h
    MOV rsi, rsp
    REPE 
    JNZ loc_41FACB
loc_41FA89:
    MOV rdi, rbp
    CALL sub_41D9B0
    TEST rax, rax
    JZ loc_41FACB
loc_41FA96:
    MOV rdi, rax
    CALL sub_40B5E0
    MOV rsi, r12
    MOV rdi, rbp
    CALL sub_41D800
    TEST eax, eax
    JZ loc_41FACB
loc_41FAAD:
    MOV edi, offset aEncryption
    MOV ecx, 0Bh
    MOV rsi, r12
    REPE 
    SETNBE bl
    SETB al
    SUB ebx, eax
    MOVSX ebx, bl
    TEST ebx, ebx
    JZ loc_41FB00
loc_41FACB:
    MOV rdi, rbp
    XOR ebx, ebx
    CALL _fclose
loc_41FAD5:
    MOV rcx, [rsp+58h+var_30]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_41FBA7
loc_41FAEB:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_41FB00:
    MOV rdi, rbp
    CALL sub_41D9B0
    TEST rax, rax
    MOV r14, rax
    JZ loc_41FB90
loc_41FB14:
    MOV rsi, r12
    MOV rdi, rbp
    CALL sub_41D800
    TEST eax, eax
    JZ loc_41FB34
loc_41FB23:
    MOV edi, offset aComment
    MOV ecx, 8
    MOV rsi, r12
    REPE 
    JZ loc_41FB50
loc_41FB34:
    MOV rdi, rbp
    MOV ebx, 1
    CALL _fclose
    MOV rdi, r14
    CALL sub_40B5E0
    JMP loc_41FAD5
loc_41FB50:
    MOV rdi, rbp
    CALL sub_41D9B0
    TEST rax, rax
    JZ loc_41FB34
loc_41FB5D:
    TEST r13, r13
    JZ loc_41FB9D
loc_41FB62:
    MOV [r13+0], rax
loc_41FB66:
    MOV rdi, rbp
    CALL _fclose
    MOV edi, offset aAes256Cbc
    MOV ecx, 0Bh
    MOV rsi, r14
    REPE 
    MOV rdi, r14
    SETZ bl
    MOVZX ebx, bl
    CALL sub_40B5E0
    JMP loc_41FAD5
loc_41FB90:
    MOV rdi, rbp
    CALL _fclose
    JMP loc_41FAD5
loc_41FB9D:
    MOV rdi, rax
    CALL sub_40B5E0
    JMP loc_41FB66
loc_41FBA7:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "count": 1,
      "categories": ["Integer"],
      "value": "41FA10"
    },
    {
      "name": "Core Logic & Operations",
      "count": 1,
      "categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "value": "41FA10"
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "count": 3,
      "categories": ["Integer", "Floating-Point", "String"],
      "value": "0x5B8, 0x23, 0xDEADBEEF"
    },
    {
      "name": "Side Effects & Interactions",
      "count": 1,
      "categories": ["Integer"],
      "value": "0"
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "count": 1,
      "categories": ["None"],
      "value": "Undetermined"
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_642BF8:
    EXTRN 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "types": ["Integer"]
    },
    {
      "name": "Data Flow",
      "count": 1,
      "types": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object", "Collection"]
    },
    {
      "name": "Core Logic & Operations",
      "count": 1,
      "types": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"]
    },
    {
      "name": "Loop Indicators",
      "count": 1,
      "types": ["Boolean"]
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "count": 1,
      "types": ["Integer"]
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "count": 1,
      "types": ["Boolean"]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "count": 1,
      "types": ["Hexadecimal Strings", "Floats/Doubles"]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 1,
      "types": ["Likely Modifies Input Parameters", "Likely Modifies Global State", "Likely Performs Memory Allocation/Deallocation", "Likely Performs I/O Operations", "Likely Performs Block Memory Operations"]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_423080:
    JMP loc_423060
loc_423060:
    PUSH rbx
    MOV rbx, rdi
    CALL sub_422CC0
    MOV rdi, rbx
    POP rbx
    JMP sub_40B5E0
```
Output:```json
{
  "features": {
    "input_parameters_count": 2,
    "input_parameter_types": ["Integer", "Pointer"],
    "return_value_type": "Integer",
    "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 1,
    "use_of_indexed_addressing_modes": true,
    "constants_and_magic_numbers": ["0x5B8", "0x23"],
    "count_of_distinct_immediate_values": 1,
    "likely_modifies_input_parameters": true,
    "likely_modifies_global_state": false,
    "likely_performs_memory_allocation_deallocation": true,
    "likely_performs_io_operations": false,
    "likely_performs_block_memory_operations": true,
    "inferred_algorithm": "CRC32 Calculation"
  }
}
```
############
```assembly
loc_426FB0:
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV rbx, rdi
    SUB rsp, 88h
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    MOV rax, [rdi+0C0h]
    LEA rsi, [rsp+98h+var_38]
    MOV [rsp+98h+var_98], rax
    MOV rax, [rdi+0C8h]
    MOV [rsp+98h+var_90], rax
    MOV rax, [rdi+0D0h]
    MOV [rsp+98h+var_88], rax
    MOV rax, [rdi+0D8h]
    MOV [rsp+98h+var_80], rax
    MOV rax, [rdi+0E0h]
    MOV [rsp+98h+var_78], rax
    MOV rax, [rdi+0E8h]
    MOV [rsp+98h+var_70], rax
    MOV rax, [rdi+0F0h]
    MOV [rsp+98h+var_68], rax
    MOV rax, [rdi+0F8h]
    MOV [rsp+98h+var_60], rax
    MOV rax, [rdi+100h]
    MOV [rsp+98h+var_58], rax
    MOV rax, [rdi+108h]
    MOV [rsp+98h+var_50], rax
    MOV rax, [rdi+110h]
    MOV [rsp+98h+var_48], rax
    MOV rax, [rdi+118h]
    MOV rdi, rsp
    MOV [rsp+98h+var_40], rax
    CALL sub_426E50
    MOV rax, [rbx+60h]
    LEA rsi, [rsp+98h+var_38]
    MOV edx, 14h
    MOV rdi, rsp
    MOV [rsp+98h+var_98], rax
    MOV rax, [rbx+68h]
    MOV [rsp+98h+var_90], rax
    MOV rax, [rbx+70h]
    MOV [rsp+98h+var_88], rax
    MOV rax, [rbx+78h]
    MOV [rsp+98h+var_80], rax
    MOV rax, [rbx+80h]
    MOV [rsp+98h+var_78], rax
    MOV rax, [rbx+88h]
    MOV [rsp+98h+var_70], rax
    MOV rax, [rbx+90h]
    MOV [rsp+98h+var_68], rax
    MOV rax, [rbx+98h]
    MOV [rsp+98h+var_60], rax
    MOV rax, [rbx+0A0h]
    MOV [rsp+98h+var_58], rax
    MOV rax, [rbx+0A8h]
    MOV [rsp+98h+var_50], rax
    MOV rax, [rbx+0B0h]
    MOV [rsp+98h+var_48], rax
    MOV rax, [rbx+0B8h]
    MOV [rsp+98h+var_40], rax
    CALL sub_426A10
    MOV rsi, rbp
    MOV rdi, rsp
    CALL sub_426E50
    MOV rax, [rsp+98h+var_20]
    XOR rax, fs:28h
    JNZ loc_427125
loc_42711B:
    ADD rsp, 88h
    POP rbx
    POP rbp
    RETN 
loc_427125:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature & Data Flow",
      "input_parameters_count": 3,
      "input_parameter_types": ["Integer", "Pointer", "Boolean"],
      "return_value_type": "None",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    {
      "category": "Core Logic & Operations",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
      "constants_and_magic_numbers": ["0x5B8", "0x23"],
      "subroutine_call_targets": true,
      "control_flow": true
    },
    {
      "category": "Constants & 'Magic Numbers'",
      "presence_of_notable_integer_constants": ["0xDEADBEEF", "0x80000000"],
      "presence_of_notable_floats_doubles": ["0xFFFF0000", "0xFF"],
      "count_of_distinct_immediate_values": 14
    },
    {
      "category": "Side Effects & Interactions",
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely Performs Memory Allocation/Deallocation": false,
      "likely Performs I/O Operations": false,
      "likely Performs Block Memory Operations": false
    },
    {
      "category": "Inferred Algorithm (Conditional)",
      "inferred_algorithm": "CRC32 Calculation"
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_401AE0:
    JMP cs:off_6421C8
```
Output:```json
{
  "signature": {
    "input_parameters_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "Integer"
  },
  "core_logic_operations": [
    ["Arithmetic", "Add", "Subtract", "Multiply", "Divide", "Increment", "Decrement"],
    ["Bitwise", "AND", "OR", "XOR", "NOT", "Shift", "Rotate"],
    ["Comparison", "Set Flags Based on Operand Relationship"],
    ["DataMovement", "Copying Data Between Registers/memory"],
    ["ConditionalBranching", "Transfer Control Based on Flags/Conditions"],
    ["SubroutineCall", "Transfer Control to Another Routine"],
    ["Return", "Transfer Control Back to Caller"],
    ["MemoryAccess", "Reading/writing to memory locations"],
    ["StackManipulation", "Pushing/popping values, adjusting stack pointer"]
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
  "presence_of_notable_floats_doubles": ["0xDEADBEEF", "0x80000000"],
  "count_of_distinct_immediate_values": 3,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_or_deallocation": true,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": true,
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_4019B0:
    JMP cs:off_642130
```
Output:```json
{
  "features": [
    {
      "input_parameter_count": 1,
      "input_parameter_types": ["Integer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false,
      "presence_of_notable_integer_constants": ["0x5B8"],
      "presence_of_notable_floats_doubles": ["0x23"],
      "count_of_distinct_immediate_values": 1,
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": true,
      "likely_performs_i_o_operations": true,
      "likely_performs_block_memory_operations": false,
      "inferred_algorithm": "CRC32 Calculation"
    }
  ]
}
```
############
```assembly
loc_41B610:
    MOV rax, [rdi+70h]
    MOV edx, [rax+18h]
    MOV rax, [rax+10h]
    MOV [rsi], edx
    RETN 
```
Output:```json
{
    "features": [
        {
            "category": "Basic Signature & Data Flow",
            "count": 2,
            "categories": ["Integer", "Pointer"],
            "values": [
                "rax",
                "rdi"
            ]
        },
        {
            "category": "Core Logic & Operations",
            "count": 3,
            "categories": ["Arithmetic", "Bitwise", "Comparison"],
            "values": [
                "ADD",
                "SUB",
                "MULT",
                "DIV",
                "INC",
                "DEC",
                "AND",
                "OR",
                "XOR",
                "NOT",
                "SHIFTS",
                "ROTRATES",
                "COMPARISON",
                "DATAMOVEMENT",
                "CONDITIONALBRANCHING",
                "SUBROUTINECALL",
                "RETURN",
                "MEMORYACCESS",
                "STACKMANIPULATION"
            ]
        },
        {
            "category": "Constants & "Magic Numbers",
            "count": 4,
            "categories": ["Integer", "Floating-Point"],
            "values": [
                "0x5B8",
                "0x23",
                "0xDEADBEEF",
                "0xFF"
            ]
        },
        {
            "category": "Side Effects & Interactions",
            "count": 4,
            "categories": ["Likely Modifies Input Parameters", "Likely Modifies Global State", "Likely Performs Memory Allocation/Deallocation", "Likely Performs I/O Operations"],
            "values": [
                "true",
                "true",
                "true",
                "true"
            ]
        },
        {
            "category": "Inferred Algorithm (Conditional)",
            "count": 1,
            "categories": ["CRC32 Calculation", "String Length Calculation", "Memcpy", "XOR Cipher"],
            "values": ["CRC32 Calculation"]
        }
    ],
    "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_40FD10:
    PUSH r15
    PUSH r14
    MOV r14, rsi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 158h
    CMP ecx, 32h
    MOV [rsp+188h+var_180], rdi
    JG loc_40FE37
loc_40FD32:
    LEA edi, [rcx+rcx]
    TEST edi, edi
    JLE loc_40FD58
loc_40FD39:
    LEA esi, [rdi-1]
    MOV rax, rdx
    LEA rsi, [rdx+rsi*8+8]
    NOP dword ptr [rax+00h]
loc_40FD48:
    MOV qword ptr [rax], 0
    ADD rax, 8
    CMP rax, rsi
    JNZ loc_40FD48
loc_40FD58:
    MOV rax, [rsp+188h+var_180]
    MOVSXD r13, ecx
    MOVSXD rdi, edi
    SHL r13, 3
    LEA rbp, [rdx+rdi*8]
    LEA rbx, [rax+r13]
    CMP rax, rbx
    JNB loc_40FE1E
loc_40FD78:
    MOV rax, r14
    ADD r13, r14
    MOV r8, rbx
    NOT rax
    LEA r15, [rax+r13]
    NOT r15
    AND r15, 0FFFFFFFFFFFFFFF8h
    MOV rcx, r15
    NOP word ptr [rax+rax+00h]
loc_40FD98:
    SUB rbp, 8
    CMP r14, r13
    JNB loc_40FE30
loc_40FDA5:
    XOR ebx, ebx
    MOV rdi, r13
    MOV r15, r13
    MOV rsi, rbp
    MOV r13, rbx
    MOV rbx, r14
    NOP word ptr [rax+rax+00000000h]
loc_40FDC0:
    MOV rax, [rdi-8]
    MOV r9, [rsi]
    XOR r10d, r10d
    MOV r11, r13
    XOR r12d, r12d
    MOV r14, r10
    MOV [rsp+188h+var_188], rax
    MOV r13, r9
    MUL qword ptr [r8-8]
    ADD r13, r11
    ADC r14, r12
    ADD rax, r13
    ADC rdx, r14
    SUB rdi, 8
    MOV [rsi], rax
    SUB rsi, 8
    CMP rbx, rdi
    MOV r13, rdx
    JB loc_40FDC0
loc_40FDFD:
    MOV rax, rcx
    MOV r14, rbx
    MOV r13, r15
    MOV rbx, rdx
    ADD rax, rbp
loc_40FE0C:
    SUB r8, 8
    CMP [rsp+188h+var_180], r8
    MOV [rax], rbx
    JB loc_40FD98
loc_40FE1E:
    ADD rsp, 158h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_40FE30:
    MOV rax, rbp
    XOR ebx, ebx
    JMP loc_40FE0C
loc_40FE37:
    MOV ebp, ecx
    MOV rbx, [rsp+188h+var_180]
    MOV eax, ecx
    SAR ebp, 1
    MOV [rsp+188h+var_158], ecx
    MOV r13, r8
    SUB eax, ebp
    LEA r15d, [rbp+rbp+0]
    MOV ecx, ebp
    LEA r9d, [rax+1]
    MOV rdi, rbx
    MOV r12, rdx
    MOV dword ptr [rsp+188h+var_188], eax
    MOV dword ptr [rsp+188h+var_170], r9d
    CALL sub_40FD10
    MOVSXD rax, r15d
    MOV ecx, dword ptr [rsp+188h+var_188]
    MOV r8, r13
    LEA rdi, ds:0[rax*8]
    MOVSXD rax, ebp
    MOV rsi, rdi
    MOV [rsp+188h+var_180], rdi
    LEA rdi, ds:0[rax*8]
    LEA rdx, [r12+rsi]
    LEA rsi, [r14+rdi]
    MOV [rsp+188h+var_178], rdi
    ADD rdi, rbx
    CALL sub_40FD10
    MOVSXD rcx, dword ptr [rsp+188h+var_170]
    MOV r9, rcx
    SHL rcx, 3
    LEA rax, [r13+rcx+8]
    LEA r10d, [r9+r9]
    LEA r11, [r13+rcx+0]
    MOV qword ptr [rax], 0
    MOV [rsp+188h+var_170], rax
    MOV eax, r9d
    SUB eax, ebp
    MOV qword ptr [r11], 0
    MOV qword ptr [r13+8], 0
    MOV [rsp+188h+var_164], eax
    CDQE 
    MOV qword ptr [r13+0], 0
    LEA rsi, [r13+rax*8+0]
    MOV eax, r10d
    SUB eax, ebp
    CDQE 
    LEA rdx, [r13+rax*8+0]
    XOR eax, eax
    NOP dword ptr [rax]
loc_40FF00:
    MOV rdi, [rbx+rax*8]
    MOV [rsi+rax*8], rdi
    MOV rdi, [r14+rax*8]
    MOV [rdx+rax*8], rdi
    ADD rax, 1
    CMP ebp, eax
    JG loc_40FF00
loc_40FF18:
    MOV esi, dword ptr [rsp+188h+var_188]
    SUB esi, 1
    JS loc_4102D0
loc_40FF24:
    MOV rax, [rsp+188h+var_178]
    LEA rbp, [rcx-10h]
    LEA rdx, [r13+rcx-8]
    MOV edi, esi
    MOV [rsp+188h+var_154], r15d
    MOV [rsp+188h+var_140], esi
    MOV [rsp+188h+var_148], rbp
    XOR r8d, r8d
    MOV dword ptr [rsp+188h+var_160], r9d
    ADD rax, rbp
    MOV [rsp+188h+var_150], r11
    MOV [rsp+188h+var_13C], r10d
    MOV [rsp+188h+var_178], rax
    MOV r15, r14
    ADD rax, rbx
    MOV rsi, r12
    MOV rbp, r13
    NOP dword ptr [rax+rax+00000000h]
loc_40FF70:
    MOV r11, [rax]
    MOV r9, [rdx]
    XOR r12d, r12d
    XOR r10d, r10d
    MOV rbx, r12
    MOV rcx, r11
    ADD rcx, r9
    ADC rbx, r10
    XOR r14d, r14d
    ADD rcx, r8
    ADC rbx, r14
    SUB edi, 1
    MOV [rdx], rcx
    SUB rax, 8
    SUB rdx, 8
    CMP edi, 0FFFFFFFFh
    MOV r8, rbx
    JNZ loc_40FF70
loc_40FFA7:
    MOV r14, r15
    ADD r14, [rsp+188h+var_178]
    MOV r13, rbp
    MOV r9d, dword ptr [rsp+188h+var_160]
    MOV r15d, [rsp+188h+var_154]
    MOV r12, rsi
    MOV rbp, [rsp+188h+var_148]
    MOV rcx, [rsp+188h+var_170]
    XOR edi, edi
    MOV r11, [rsp+188h+var_150]
    MOV r10d, [rsp+188h+var_13C]
    MOV esi, [rsp+188h+var_140]
    MOV [r13+0], rbx
    MOV r8, r14
    ADD rcx, rbp
    MOV dword ptr [rsp+188h+var_170], r15d
    MOV dword ptr [rsp+188h+var_178], r9d
    MOV [rsp+188h+var_160], r11
    MOV r15d, r10d
    MOV rbx, r12
    MOV rbp, r13
    NOP dword ptr [rax+rax+00h]
loc_410000:
    MOV r9, [rcx]
    MOV r11, [r8]
    XOR r10d, r10d
    XOR r12d, r12d
    MOV rdx, r10
    MOV rax, r9
    ADD rax, r11
    ADC rdx, r12
    XOR r14d, r14d
    ADD rax, rdi
    ADC rdx, r14
    SUB esi, 1
    MOV [rcx], rax
    SUB r8, 8
    SUB rcx, 8
    CMP esi, 0FFFFFFFFh
    MOV rdi, rdx
    JNZ loc_410000
loc_410037:
    MOV r10d, r15d
    MOV r9d, dword ptr [rsp+188h+var_178]
    MOV r11, [rsp+188h+var_160]
    MOV r15d, dword ptr [rsp+188h+var_170]
    MOV r12, rbx
    MOV r13, rbp
loc_41004F:
    MOVSXD rbp, r10d
    LEA eax, ds:0[r9*4]
    MOV [r11], rdi
    LEA rbx, ds:0[rbp*8]
    MOV ecx, r9d
    MOV rsi, r11
    CDQE 
    MOV rdi, r13
    MOV dword ptr [rsp+188h+var_178], r10d
    LEA rdx, [r13+rbx+0]
    LEA r8, [r13+rax*8+0]
    CALL sub_40FD10
    MOV eax, [rsp+188h+var_164]
    MOV r10d, dword ptr [rsp+188h+var_178]
    MOV qword ptr [r13+18h], 0
    MOV qword ptr [r13+10h], 0
    MOV qword ptr [r13+8], 0
    MOV qword ptr [r13+0], 0
    ADD eax, eax
    CDQE 
    LEA rdx, [r13+rax*8+0]
    XOR eax, eax
    NOP dword ptr [rax+rax+00000000h]
loc_4100C0:
    MOV rcx, [r12+rax*8]
    MOV [rdx+rax*8], rcx
    ADD rax, 1
    CMP r15d, eax
    JG loc_4100C0
loc_4100D1:
    MOV edi, r10d
    SUB edi, 3
    JS loc_4102DF
loc_4100DD:
    MOV rsi, [rsp+188h+var_180]
    MOVSXD rax, edi
    MOV [rsp+188h+var_180], rbp
    LEA rax, ds:10h[rax*8]
    MOV [rsp+188h+var_178], rbx
    XOR r8d, r8d
    MOV r15d, r10d
    MOV rbx, r12
    MOV rbp, r13
    LEA rsi, [rsi+rax-10h]
    LEA rcx, [r13+rax+0]
    ADD rsi, r12
loc_410110:
    MOV r11, [rsi]
    MOV r9, [rcx]
    XOR r12d, r12d
    XOR r10d, r10d
    MOV rdx, r12
    MOV rax, r11
    ADD rax, r9
    ADC rdx, r10
    XOR r14d, r14d
    ADD rax, r8
    ADC rdx, r14
    SUB edi, 1
    MOV [rcx], rax
    SUB rsi, 8
    SUB rcx, 8
    CMP edi, 0FFFFFFFFh
    MOV r8, rdx
    JNZ loc_410110
loc_410147:
    MOV r12, rbx
    MOV r13, rbp
    MOV rbx, [rsp+188h+var_178]
    MOV rbp, [rsp+188h+var_180]
    MOV r10d, r15d
loc_41015A:
    MOV esi, r10d
    MOV [r13+8], r8
    SUB esi, 1
    JS loc_40FE1E
loc_41016A:
    MOVSXD rax, esi
    MOV ecx, 1
    MOV [rsp+188h+var_180], rbp
    LEA r9, ds:0[rax*8]
    MOV eax, esi
    MOV r15d, esi
    SHL rax, 3
    MOV dword ptr [rsp+188h+var_170], r10d
    LEA rdx, [rbx+r9]
    LEA r8, [rbx+r9-8]
    NEG rbx
    MOV [rsp+188h+var_178], r9
    ADD rdx, r13
    SUB r8, rax
    ADD r8, r13
    MOV rax, rdx
    MOV r14, rdx
    MOV r13, r12
    MOV rdx, rbx
    NOP dword ptr [rax+rax+00h]
loc_4101B8:
    MOV rsi, [rax]
    MOV rbp, [rax+rdx]
    XOR edi, edi
    MOV r9, rcx
    XOR r10d, r10d
    MOV rbx, rdi
    MOV rcx, rsi
    NOT rbp
    ADD rcx, r9
    ADC rbx, r10
    XOR r12d, r12d
    ADD rcx, rbp
    ADC rbx, r12
    MOV [rax], rcx
    SUB rax, 8
    CMP rax, r8
    MOV rcx, rbx
    JNZ loc_4101B8
loc_4101EE:
    MOV r8d, [rsp+188h+var_158]
    MOVSXD rcx, dword ptr [rsp+188h+var_188]
    MOV esi, r15d
    MOV rbp, [rsp+188h+var_180]
    MOV r9, [rsp+188h+var_178]
    MOV rdx, r14
    MOV r10d, dword ptr [rsp+188h+var_170]
    ADD r8d, r8d
    MOVSXD rax, r8d
    MOV r15d, r8d
    SUB rax, rcx
    MOV r8d, r10d
    SUB rax, rbp
    MOV rbp, r13
    LEA rax, [r9+rax*8]
    ADD rax, r13
    NOP dword ptr [rax+rax+00000000h]
loc_410230:
    MOV r11, [rdx]
    MOV r9, [rax]
    XOR r12d, r12d
    XOR r10d, r10d
    MOV rbx, r12
    MOV rcx, r11
    ADD rcx, r9
    ADC rbx, r10
    XOR r14d, r14d
    ADD rcx, rdi
    ADC rbx, r14
    SUB esi, 1
    MOV [rax], rcx
    SUB rdx, 8
    SUB rax, 8
    CMP esi, 0FFFFFFFFh
    MOV rdi, rbx
    JNZ loc_410230
loc_410267:
    MOV eax, r15d
    SUB eax, dword ptr [rsp+188h+var_188]
    MOV r10d, r8d
    SUB eax, r10d
    SUB eax, 1
    TEST rbx, rbx
    JZ loc_40FE1E
loc_41027F:
    TEST eax, eax
    JS loc_4102E7
loc_410283:
    MOVSXD rcx, eax
    MOV eax, eax
    LEA rdx, [rbp+rcx*8+0]
    SUB rcx, rax
    LEA rsi, [rbp+rcx*8-8]
    JMP loc_4102A9
loc_4102A0:
    SUB rdx, 8
    CMP rsi, rdx
    JZ loc_4102E7
loc_4102A9:
    MOV rax, [rdx]
    XOR ebx, ebx
    MOV r10, rbx
    MOV rcx, rax
    ADD rax, 1
    MOV r9, rcx
    MOV [rdx], rax
    ADD r9, 1
    ADC r10, 0
    TEST r10, r10
    JNZ loc_4102A0
loc_4102CB:
    JMP loc_40FE1E
loc_4102D0:
    MOV qword ptr [r13+0], 0
    XOR edi, edi
    JMP loc_41004F
loc_4102DF:
    XOR r8d, r8d
    JMP loc_41015A
loc_4102E7:
    MOV ecx, offset aInternalMul
    MOV edx, 135h
    MOV esi, offset aSshbnC
    MOV edi, offset aI0
    CALL ___assert_fail
```
Output:```json
{
  "feature_definitions": [
    {
      "category": "Basic Signature",
      "value": "40FD10"
    },
    {
      "category": "Data Flow",
      "value": "1, 2, 3"
    },
    {
      "category": "Core Logic & Operations",
      "value": "Arithmetic, Bitwise, Comparison, DataMovement, ConditionalBranching, SubroutineCall, Return, MemoryAccess, StackManipulation"
    },
    {
      "category": "Loop Indicators",
      "value": "true"
    },
    {
      "category": "Number of Distinct Subroutine Call Targets",
      "value": "3"
    },
    {
      "category": "Use of Indexed Addressing Modes",
      "value": "true"
    }
  ],
  "feature_inference": {
    "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
    "constants_and_magic_numbers": ["0x5B8", "0x23"],
    "subroutine_call_targets": true,
    "control_flow": "JMP, LEA, MOV, CMP, ADD, SUB, NOT, REX, XOR, SHR, ROTATE, PUSH, POP, RBX, RSI, RBP, R12, R13, R14, R15, R16, R17, R18, R19, R20, R21, R22, R23, R24, R25, R26, R27, R28, R29, R30, R31, R32, R33, R34, R35, R36, R37, R38, R39, R40, R41, R42, R43, R44, R45, R46, R47, R48, R49, R50, R51, R52, R53, R54, R55, R56, R57, R58, R59, R60, R61, R62, R63, R64, R65, R66, R67, R68, R69, R70, R71, R72, R73, R74, R75, R76, R77, R78, R79, R80, R81, R82, R83, R84, R85, R86, R87, R88, R89, R90, R91, R92, R93, R94, R95, R96, R97, R98, R99, R100, R101, R102, R103, R104, R105, R106, R107, R108, R109, R110, R111, R112, R113, R114, R115, R116, R117, R118, R119, R120, R121, R122, R123, R124, R125, R126, R127, R128, R129, R130, R131, R132, R133, R134, R135, R136, R137, R138, R139, R140, R141, R142, R143, R144, R145, R146, R147, R148, R149, R150, R151, R152, R153, R154, R155, R156, R157, R158, R159, R160, R161, R162, R163, R164, R165, R166, R167, R168, R169, R170, R171, R172, R173, R174, R175, R176, R177, R178, R17
############
```assembly
loc_4116AC:
    XOR esi, esi
    XCHG ax, ax
loc_4116B0:
    MOV edx, eax
    SAR edx, 1
    SUB eax, edx
    ADD eax, 1
    CMP eax, 32h
    LEA esi, [rsi+rax*4]
    JG loc_4116B0
loc_4116C1:
    MOV [rsp+98h+var_70], r12
    MOV r12d, dword ptr [rsp+98h+var_90]
    MOV [rsp+98h+var_50], r8
    MOV [rsp+98h+var_78], r11
    ADD esi, r12d
    MOVSXD rax, esi
    MOV esi, 8
    MOV rdi, rax
    MOV [rsp+98h+var_60], rax
    CALL sub_40AC50
    MOV r11, [rsp+98h+var_78]
    MOV rbp, rax
    MOV r8, [rsp+98h+var_50]
    MOVSXD rax, r12d
    MOV r12, [rsp+98h+var_70]
    MOV [rsp+98h+var_58], rax
loc_411707:
    MOVSXD r10, [rsp+98h+var_94]
    MOV rdx, rbp
    XOR esi, esi
    LEA r9, ds:0[r10*8]
    MOV eax, r10d
    LEA rcx, [r15+r9]
    ADD r9, r8
    NOP dword ptr [rax+rax+00h]
loc_411728:
    XOR edi, edi
    CMP eax, [r15]
    JG loc_411733
loc_41172F:
    MOV rdi, [rcx+rsi]
loc_411733:
    MOV [rdx], rdi
    XOR edi, edi
    CMP eax, [r8]
    JG loc_411741
loc_41173D:
    MOV rdi, [r9+rsi]
loc_411741:
    MOV [rdx+r10*8], rdi
    SUB rsi, 8
    ADD rdx, 8
    SUB eax, 1
    JNZ loc_411728
loc_411752:
    MOV ecx, [rsp+98h+var_94]
    LEA rsi, [rbp+r10*8+0]
    MOV rdi, rbp
    MOV [rsp+98h+var_78], r11
    MOV [rsp+98h+var_70], r12
    LEA r9d, [rcx+rcx]
    MOVSXD rax, r9d
    MOV [rsp+98h+var_94], r9d
    LEA rdx, [rbp+rax*8+0]
    MOV rax, [rsp+98h+var_58]
    LEA r8, [rbp+rax*8+0]
    CALL sub_40FD10
    MOV rax, [rsp+98h+var_88]
    MOV rcx, [rsp+98h+var_68]
    TEST rbx, rbx
    MOV r9d, [rsp+98h+var_94]
    MOV r11, [rsp+98h+var_78]
    MOV r12, [rsp+98h+var_70]
    LEA edx, [rax+rcx+1]
    JZ loc_4118E0
loc_4117AE:
    MOV rax, [rbx]
    MOV dword ptr [rsp+98h+var_68], r9d
    MOV [rsp+98h+var_88], r11
    MOV [rsp+98h+var_80], r12
    LEA ecx, [rax+1]
    CMP edx, eax
    CMOVLE edx, ecx
    MOV edi, edx
    MOV [rsp+98h+var_94], edx
    CALL sub_40FCB0
    MOV edx, [rax]
    MOV r15, rax
    MOV r9d, dword ptr [rsp+98h+var_68]
    TEST edx, edx
    MOV edx, [rsp+98h+var_94]
    JLE loc_4119A9
loc_4117E9:
    LEA rsi, [r15+8]
    XOR ecx, ecx
    MOV eax, 1
    MOV r8d, dword ptr [rsp+98h+var_90]
    JMP loc_411822
loc_411800:
    MOV edi, r8d
    SUB edi, eax
    MOVSXD rdi, edi
    MOV rdi, [rbp+rdi*8+0]
    TEST rdi, rdi
    MOV [rsi], rdi
    CMOVNZ ecx, eax
    ADD eax, 1
    ADD rsi, 8
    CMP eax, [r15]
    JG loc_41183A
loc_411822:
    CMP r9d, eax
    JGE loc_411800
loc_411827:
    MOV qword ptr [rsi], 0
    ADD eax, 1
    ADD rsi, 8
    CMP eax, [r15]
    JLE loc_411822
loc_41183A:
    MOVSXD rax, ecx
    TEST rbx, rbx
    MOV [r15], rax
    JZ loc_411910
loc_411849:
    TEST edx, edx
    JLE loc_411945
loc_411851:
    LEA r9d, [rdx+1]
    LEA r8, [r15+8]
    MOV eax, 8
    XOR esi, esi
    MOV edx, 1
    MOV [rsp+98h+var_90], rbp
    MOV [rsp+98h+var_94], r9d
    JMP loc_4118C3
loc_411878:
    XOR r11d, r11d
    XOR r12d, r12d
    CMP edx, [rbx]
    JG loc_4118D2
loc_411882:
    MOV r9, [rbx+rax]
    XOR r10d, r10d
loc_411889:
    XOR r14d, r14d
    ADD rsi, r11
    MOV rdi, r14
    ADC rdi, r12
    ADD rsi, r9
    ADC rdi, r10
    CMP ecx, edx
    MOV rbp, rsi
    MOV [r8], rsi
    MOV rsi, rdi
    JGE loc_4118AE
loc_4118A8:
    TEST rbp, rbp
    CMOVNZ ecx, edx
loc_4118AE:
    ADD edx, 1
    ADD rax, 8
    ADD r8, 8
    CMP edx, [rsp+98h+var_94]
    JZ loc_411940
loc_4118C3:
    CMP edx, [r15]
    JG loc_411878
loc_4118C8:
    XOR r12d, r12d
    CMP edx, [rbx]
    MOV r11, [r8]
    JLE loc_411882
loc_4118D2:
    XOR r9d, r9d
    XOR r10d, r10d
    JMP loc_411889
loc_4118E0:
    MOV edi, edx
    MOV [rsp+98h+var_88], r11
    MOV [rsp+98h+var_80], r12
    MOV dword ptr [rsp+98h+var_68], r9d
    MOV [rsp+98h+var_94], edx
    CALL sub_40FCB0
    MOV r15, rax
    MOV eax, [rax]
    TEST eax, eax
    JG loc_41199B
loc_411907:
    MOV qword ptr [r15], 0
    XOR eax, eax
loc_411910:
    MOV rsi, [rsp+98h+var_60]
    MOV [r15], rax
    MOV rdi, rbp
    SHL rsi, 3
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    ADD rsp, 68h
    MOV rax, r15
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_411940:
    MOV rbp, [rsp+98h+var_90]
loc_411945:
    MOVSXD rax, ecx
    JMP loc_411910
loc_41194A:
    MOVSXD rax, dword ptr [rsp+98h+var_90]
    MOV [rsp+98h+var_50], rsi
    MOV esi, 8
    MOV [rsp+98h+var_78], r11
    MOV [rsp+98h+var_70], r12
    MOV rdi, rax
    MOV [rsp+98h+var_58], rax
    MOV [rsp+98h+var_60], rax
    CALL sub_40AC50
    MOV rbp, rax
    MOV eax, [rsp+98h+var_94]
    MOV r11, [rsp+98h+var_78]
    MOV r12, [rsp+98h+var_70]
    MOV r8, [rsp+98h+var_50]
    TEST eax, eax
    JG loc_411707
loc_411993:
    MOVSXD r10, eax
    JMP loc_411752
loc_41199B:
    MOV edx, [rsp+98h+var_94]
    MOV r9d, dword ptr [rsp+98h+var_68]
    JMP loc_4117E9
loc_4119A9:
    MOV qword ptr [rax], 0
    XOR ecx, ecx
    JMP loc_411849
```
Output:```json
{
  "input_parameters": ["int", "int", "int", "int", "int"],
  "input_parameter_types": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object", "Collection"],
  "return_value_type": "Integer",
  "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
  "constants_and_magic_numbers": [
    "0x5B8", "0x23", "0x80000000", "0xDEADBEEF", "0x80000000", "0x00000000", "0x80000000", "0x80000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x00000000", "0x0000000
############
```assembly
loc_40AFAB:
    TEST rsi, rsi
    JNZ loc_40AFD0
loc_40AFB0:
    TEST rdi, rdi
    JZ loc_40AFBA
loc_40AFB5:
    CALL _free
loc_40AFBA:
    MOV [rbp+10h], r12
    MOV [rbp+18h], rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_40AFD0:
    CALL sub_40A380
    MOV rdi, [rbp+10h]
    JMP loc_40AFB0
```
Output:```json
{
  "features": {
    "inputParametersCount": 2,
    "inputParameterTypes": [
      "Integer",
      "Integer"
    ],
    "returnValueType": "None"
  },
  "algorithm": "Generic Control/Data Flow"
}
```
############
```assembly
loc_40ACA0:

loc_42A7D0:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 10h
    TEST edi, edi
    JZ loc_42A840
loc_42A7E0:
    CMP edi, 4
    JZ loc_42A8C0
loc_42A7E9:
    CMP edi, 5
    JZ loc_42AA18
loc_42A7F2:
    CMP edi, 1
    JZ loc_42A870
loc_42A7F7:
    CMP edi, 2
    JZ loc_42ABA0
loc_42A800:
    CMP edi, 3
    JZ loc_42A898
loc_42A809:
    XOR esi, esi
    XOR edi, edi
    CALL sub_42A7D0
    MOV edi, offset aSError
    MOV rbx, rax
    MOV rsi, rax
loc_42A81D:
    XOR eax, eax
    CALL sub_40B290
    MOV rdi, rbx
    MOV rbp, rax
    CALL sub_40B5E0
    MOV rax, rbp
loc_42A832:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_42A840:
    MOV edi, offset aPuttydir
    CALL _getenv
    TEST rax, rax
    JZ loc_42A8F0
loc_42A853:
    ADD rsp, 10h
    MOV rdi, rax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    JMP sub_40ACA0
loc_42A870:
    MOV edi, offset aPuttysshhostke
    CALL _getenv
    TEST rax, rax
    JNZ loc_42A853
loc_42A87F:
    XOR esi, esi
    XOR edi, edi
    CALL sub_42A7D0
    MOV edi, offset aSSshhostkeys
    MOV rbx, rax
    MOV rsi, rax
    JMP loc_42A81D
loc_42A898:
    MOV edi, offset aPuttyrandomsee
    CALL _getenv
    TEST rax, rax
    JNZ loc_42A853
loc_42A8A7:
    XOR esi, esi
    XOR edi, edi
    CALL sub_42A7D0
    MOV edi, offset aSRandomseed
    MOV rbx, rax
    MOV rsi, rax
    JMP loc_42A81D
loc_42A8C0:
    MOV edi, offset aPuttysessions
    CALL _getenv
    TEST rax, rax
    JNZ loc_42A853
loc_42A8CF:
    XOR esi, esi
    XOR edi, edi
    CALL sub_42A7D0
    MOV edi, offset aSSessions
    MOV rbx, rax
    MOV rsi, rax
    JMP loc_42A81D
loc_42A8F0:
    MOV edi, offset aHome
    CALL _getenv
    MOV rbx, rax
    CALL _getuid
    MOV edi, eax
    CALL _getpwuid
    TEST rax, rax
    JZ loc_42AC07
loc_42A912:
    MOV r13, [rax+20h]
loc_42A916:
    MOV edi, offset aXdgConfig
    CALL _getenv
    TEST rax, rax
    JZ loc_42A92E
loc_42A925:
    CMP byte ptr [rax], 0
    JNZ loc_42AAD8
loc_42A92E:
    TEST rbx, rbx
    JZ loc_42AC93
loc_42A937:
    XOR eax, eax
    MOV rsi, rbx
    MOV edi, offset aSConfigPutty
    CALL sub_40B290
    TEST rax, rax
    MOV rbp, rax
    JNZ loc_42ACCA
loc_42A952:
    XOR eax, eax
    MOV rsi, rbx
    MOV edi, offset aSPutty
    CALL sub_40B290
    TEST r13, r13
    MOV r12, rax
    JZ loc_42ABD9
loc_42A96D:
    MOV rsi, r13
    MOV edi, offset aSPutty
    XOR eax, eax
    CALL sub_40B290
    MOV edi, (offset aSPutty+2)
    MOV rbx, rax
    CALL sub_40ACA0
    TEST r12, r12
    MOV r13, rax
    JZ loc_42A99F
loc_42A991:
    XOR esi, esi
    MOV rdi, r12
    CALL _access
    TEST eax, eax
    JZ loc_42A9D1
loc_42A99F:
    TEST rbx, rbx
    JZ loc_42A9B6
loc_42A9A4:
    XOR esi, esi
    MOV rdi, rbx
    CALL _access
    TEST eax, eax
    JZ loc_42ABC0
loc_42A9B6:
    XOR esi, esi
    MOV rdi, r13
    CALL _access
    TEST eax, eax
    JZ loc_42AC83
loc_42A9C8:
    TEST r12, r12
    JZ loc_42ACC0
loc_42A9D1:
    MOV r14, rbx
    MOV rbx, r12
loc_42A9D7:
    CMP rbx, r14
    JZ loc_42A9E4
loc_42A9DC:
    MOV rdi, r14
    CALL sub_40B5E0
loc_42A9E4:
    CMP r13, rbx
    JZ loc_42A9F1
loc_42A9E9:
    MOV rdi, r13
    CALL sub_40B5E0
loc_42A9F1:
    CMP rbx, rbp
    MOV rax, rbx
    JZ loc_42A832
loc_42A9FD:
    MOV rdi, rbp
    MOV [rsp+38h+var_30], rbx
    CALL sub_40B5E0
    MOV rax, [rsp+38h+var_30]
    JMP loc_42A832
loc_42AA18:
    TEST rsi, rsi
    MOV rbx, rsi
    JZ loc_42AB48
loc_42AA24:
    CMP byte ptr [rsi], 0
    JZ loc_42AB48
loc_42AA2D:
    MOV rdi, rsi
    CALL _strlen
    LEA rdi, [rax+rax*2+1]
loc_42AA3A:
    MOV esi, 1
    CALL sub_40AC50
    MOV rbp, rax
    MOVZX eax, byte ptr [rbx]
    MOV rdx, rbp
    TEST al, al
    JZ loc_42AB60
loc_42AA55:
    MOV rsi, 1000000020000Dh
    JMP loc_42AABF
loc_42AA68:
    LEA ecx, [rax-30h]
    CMP cl, 9
    JBE loc_42AACD
loc_42AA70:
    MOV ecx, eax
    AND ecx, 0FFFFFFDFh
    SUB ecx, 41h
    CMP cl, 19h
    JBE loc_42AACD
loc_42AA7D:
    MOV byte ptr [rdx], 25h
    MOVZX eax, byte ptr [rbx]
    ADD rdx, 3
    SHR al, 4
    AND eax, 0Fh
    MOVZX eax, ds:byte_439F90[rax]
    MOV [rdx-2], al
    MOVZX eax, byte ptr [rbx]
    AND eax, 0Fh
    MOVZX eax, ds:byte_439F90[rax]
    MOV [rdx-1], al
    NOP word ptr [rax+rax+00000000h]
loc_42AAB0:
    ADD rbx, 1
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_42AB60
loc_42AABF:
    LEA ecx, [rax-2Bh]
    CMP cl, 34h
    JA loc_42AA68
loc_42AAC7:
    BT rsi, rcx
    JNB loc_42AA68
loc_42AACD:
    MOV [rdx], al
    ADD rdx, 1
    JMP loc_42AAB0
loc_42AAD8:
    MOV rsi, rax
    MOV edi, offset aSPutty_0
    XOR eax, eax
    CALL sub_40B290
    TEST rax, rax
    MOV rbp, rax
    JZ loc_42A92E
loc_42AAF3:
    XOR esi, esi
    MOV rdi, rbp
    CALL _access
    MOV edx, eax
    MOV rax, rbp
    TEST edx, edx
    JZ loc_42A832
loc_42AB0A:
    TEST rbx, rbx
    JNZ loc_42A952
loc_42AB13:
    TEST r13, r13
    JZ loc_42AC3F
loc_42AB1C:
    MOV rsi, r13
    MOV edi, offset aSPutty
    XOR eax, eax
    CALL sub_40B290
    MOV edi, (offset aSPutty+2)
    MOV rbx, rax
    XOR r12d, r12d
    CALL sub_40ACA0
    MOV r13, rax
    JMP loc_42A99F
loc_42AB48:
    MOV edi, 31h
    MOV ebx, offset aDefaultSetting
    JMP loc_42AA3A
loc_42AB60:
    MOV byte ptr [rdx], 0
    XOR esi, esi
    MOV edi, 4
    CALL sub_42A7D0
    MOV rdx, rbp
    MOV rsi, rax
    MOV rbx, rax
    MOV edi, offset aSS_0
    XOR eax, eax
    CALL sub_40B290
    MOV rdi, rbx
    MOV r12, rax
    CALL sub_40B5E0
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV rax, r12
    JMP loc_42A832
loc_42ABA0:
    XOR esi, esi
    MOV edi, 1
    CALL sub_42A7D0
    MOV edi, offset unk_439D39
    MOV rbx, rax
    MOV rsi, rax
    JMP loc_42A81D
loc_42ABC0:
    CMP rbx, r12
    JZ loc_42A9E4
loc_42ABC9:
    MOV r14, rbx
loc_42ABCC:
    MOV rdi, r12
    CALL sub_40B5E0
    JMP loc_42A9D7
loc_42ABD9:
    MOV edi, (offset aSPutty+2)
    CALL sub_40ACA0
    TEST r12, r12
    MOV r13, rax
    MOV rbx, rax
    JZ loc_42AC4C
loc_42ABEE:
    XOR esi, esi
    MOV rdi, r12
    CALL _access
    TEST eax, eax
    JNZ loc_42AC6F
loc_42ABFC:
    MOV rbx, r12
    XOR r14d, r14d
    JMP loc_42A9DC
loc_42AC07:
    XOR r13d, r13d
    JMP loc_42A916
loc_42AC0F:
    XOR eax, eax
    MOV esi, 42E60Dh
    MOV edi, offset aSConfigPutty
    CALL sub_40B290
    TEST rax, rax
    MOV rbp, rax
    JZ loc_42AC3F
loc_42AC28:
    XOR esi, esi
    MOV rdi, rax
    CALL _access
    MOV edx, eax
    MOV rax, rbp
    TEST edx, edx
    JZ loc_42A832
loc_42AC3F:
    MOV edi, (offset aSPutty+2)
    CALL sub_40ACA0
    MOV rbx, rax
loc_42AC4C:
    XOR esi, esi
    MOV rdi, rbx
    XOR r12d, r12d
    CALL _access
    XOR r14d, r14d
    TEST eax, eax
    MOV r13, rbx
    JZ loc_42ABCC
loc_42AC67:
    XOR r12d, r12d
    JMP loc_42ABCC
loc_42AC6F:
    XOR esi, esi
    MOV rdi, r13
    XOR ebx, ebx
    CALL _access
    TEST eax, eax
    JNZ loc_42A9D1
loc_42AC83:
    CMP r13, r12
    JZ loc_42ACE6
loc_42AC88:
    MOV r14, rbx
    MOV rbx, r13
    JMP loc_42ABCC
loc_42AC93:
    TEST r13, r13
    JZ loc_42AC0F
loc_42AC9C:
    XOR eax, eax
    MOV rsi, r13
    MOV edi, offset aSConfigPutty
    CALL sub_40B290
    TEST rax, rax
    MOV rbp, rax
    JZ loc_42AB1C
loc_42ACB7:
    JMP loc_42AAF3
loc_42ACC0:
    TEST rbx, rbx
    JZ loc_42ACFA
loc_42ACC5:
    MOV r14, rbx
    JMP loc_42AC67
loc_42ACCA:
    XOR esi, esi
    MOV rdi, rax
    CALL _access
    MOV edx, eax
    MOV rax, rbp
    TEST edx, edx
    JNZ loc_42A952
loc_42ACE1:
    JMP loc_42A832
loc_42ACE6:
    CMP rbx, r13
    JZ loc_42A9F1
loc_42ACEF:
    MOV r14, rbx
    MOV rbx, r13
    JMP loc_42A9DC
loc_42ACFA:
    XOR r14d, r14d
    MOV rbx, r13
    JMP loc_42AC67
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature & Data Flow",
      "parameters": [
        {
          "name": "Input Parameter Count",
          "value": 5
        },
        {
          "name": "Input Parameter Types",
          "values": [
            "Integer",
            "Pointer",
            "Boolean",
            "FloatingPoint",
            "String",
            "Struct/Object",
            "Collection"
          ]
        },
        {
          "name": "Return Value Type",
          "value": "None"
        }
      ]
    },
    {
      "category": "Core Logic & Operations",
      "parameters": [
        {
          "name": "Dominant Operation Categories",
          "values": [
            "Arithmetic",
            "Bitwise",
            "Comparison",
            "DataMovement",
            "ConditionalBranching",
            "SubroutineCall",
            "Return",
            "MemoryAccess",
            "StackManipulation"
          ]
        },
        {
          "name": "Loop Indicators",
          "value": false
        },
        {
          "name": "Number of Distinct Subroutine Call Targets",
          "value": 0
        },
        {
          "name": "Use of Indexed Addressing Modes",
          "value": false
        }
      ]
    },
    {
      "category": "Constants & "Magic Numbers",
      "parameters": [
        {
          "name": "Presence of Notable Integer Constants",
          "values": [
            "0x5B8",
            "0x23"
          ]
        },
        {
          "name": "Presence of Notable Floating-Point Constants",
          "values": [
            "0xDEADBEEF",
            "0x80000000"
          ]
        },
        {
          "name": "Count of Distinct Immediate Values",
          "value": 1
        }
      ]
    },
    {
      "category": "Side Effects & Interactions",
      "parameters": [
        {
          "name": "Likely Modifies Input Parameters",
          "value": true
        },
        {
          "name": "Likely Modifies Global State",
          "value": false
        },
        {
          "name": "Likely Performs Memory Allocation/Deallocation",
          "value": true
        },
        {
          "name": "Likely Performs I/O Operations",
          "value": true
        },
        {
          "name": "Likely Performs Block Memory Operations",
          "value": true
        }
      ]
    },
    {
      "category": "Inferred Algorithm (Conditional)",
      "parameters": [
        {
          "name": "Inferred Algorithm",
          "value": "CRC32 Calculation"
        }
      ]
    }
  ]
}
```
############
```assembly
loc_421910:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    MOV r12d, edx
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 18h
    MOV rdi, [rdi+8]
    CALL sub_410F90
    MOV rdi, [r15+10h]
    MOV ebp, eax
    CALL sub_410F90
    MOV rdi, [r15+18h]
    ADD ebp, eax
    CALL sub_410F90
    MOV rdi, [r15+30h]
    ADD ebp, eax
    CALL sub_410F90
    MOV rdi, [r15+20h]
    ADD ebp, eax
    CALL sub_410F90
    MOV rdi, [r15+28h]
    ADD ebp, eax
    CALL sub_410F90
    ADD eax, ebp
    CMP eax, r12d
    JLE loc_421980
loc_42196E:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_421980:
    MOV rdi, [r15+8]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 18h
    MOV [rbx], al
    MOV rdi, [r15+8]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 10h
    MOV [rbx+1], al
    MOV rdi, [r15+8]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 8
    MOV [rbx+2], al
    MOV rdi, [r15+8]
    CALL sub_410F90
    SUB eax, 4
    MOV [rbx+3], al
    MOV rdi, [r15+8]
    CALL sub_410F90
    CMP eax, 4
    MOV ebp, eax
    LEA r12d, [rax-5]
    JZ loc_421D5E
loc_4219DC:
    LEA r13, [rbx+4]
loc_4219E0:
    MOV rdi, [r15+8]
    MOV esi, r12d
    SUB r12d, 1
    ADD r13, 1
    CALL sub_410FE0
    MOV [r13-1], al
    CMP r12d, 0FFFFFFFFh
    JNZ loc_4219E0
loc_4219FE:
    MOVSXD r12, ebp
    ADD ebp, 4
    LEA rax, [r12+1]
    LEA r14, [r12+2]
    MOVSXD r13, ebp
    MOV [rsp+48h+var_48], rax
    LEA rax, [r12+3]
    MOV [rsp+48h+var_40], rax
loc_421A1F:
    MOV rdi, [r15+10h]
    ADD r12, rbx
    ADD r14, rbx
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 18h
    MOV [r12], al
    MOV rdi, [r15+10h]
    MOV r12, [rsp+48h+var_48]
    CALL sub_410F90
    SUB eax, 4
    ADD r12, rbx
    SAR eax, 10h
    MOV [r12], al
    MOV rdi, [r15+10h]
    CALL sub_410F90
    SUB eax, 4
    MOV r12, [rsp+48h+var_40]
    SAR eax, 8
    MOV [r14], al
    MOV rdi, [r15+10h]
    ADD r12, rbx
    CALL sub_410F90
    SUB eax, 4
    MOV [r12], al
    MOV rdi, [r15+10h]
    CALL sub_410F90
    CMP eax, 4
    LEA r14d, [rax-5]
    JZ loc_421AC6
loc_421A8E:
    MOVSXD r13, ebp
    MOV r12d, r14d
    ADD r13, rbx
    NOP word ptr [rax+rax+00000000h]
loc_421AA0:
    MOV rdi, [r15+10h]
    MOV esi, r12d
    SUB r12d, 1
    ADD r13, 1
    CALL sub_410FE0
    MOV [r13-1], al
    CMP r12d, 0FFFFFFFFh
    JNZ loc_421AA0
loc_421ABE:
    LEA ebp, [r14+rbp+1]
    MOVSXD r13, ebp
loc_421AC6:
    MOV rdi, [r15+18h]
    LEA r12, [rbx+r13]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 18h
    MOV [r12], al
    MOV rdi, [r15+18h]
    LEA r12, [rbx+r13+1]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 10h
    MOV [r12], al
    MOV rdi, [r15+18h]
    LEA r12, [rbx+r13+2]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 8
    MOV [r12], al
    MOV rdi, [r15+18h]
    LEA r12, [rbx+r13+3]
    CALL sub_410F90
    SUB eax, 4
    MOV [r12], al
    MOV rdi, [r15+18h]
    LEA r12d, [rbp+4]
    CALL sub_410F90
    CMP eax, 4
    LEA r13d, [rax-5]
    JZ loc_421B6B
loc_421B38:
    MOVSXD r12, r12d
    LEA r14, [rbx+r12]
    MOV r12d, r13d
    NOP word ptr [rax+rax+00h]
loc_421B48:
    MOV rdi, [r15+18h]
    MOV esi, r12d
    SUB r12d, 1
    ADD r14, 1
    CALL sub_410FE0
    MOV [r14-1], al
    CMP r12d, 0FFFFFFFFh
    JNZ loc_421B48
loc_421B66:
    LEA r12d, [r13+rbp+5]
loc_421B6B:
    MOV rdi, [r15+30h]
    MOVSXD rbp, r12d
    LEA r13, [rbx+rbp]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 18h
    MOV [r13+0], al
    MOV rdi, [r15+30h]
    LEA r13, [rbx+rbp+1]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 10h
    MOV [r13+0], al
    MOV rdi, [r15+30h]
    LEA r13, [rbx+rbp+2]
    LEA rbp, [rbx+rbp+3]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 8
    MOV [r13+0], al
    MOV rdi, [r15+30h]
    LEA r13d, [r12+4]
    CALL sub_410F90
    SUB eax, 4
    MOV [rbp+0], al
    MOV rdi, [r15+30h]
    CALL sub_410F90
    CMP eax, 4
    LEA r14d, [rax-5]
    JZ loc_421C10
loc_421BE0:
    MOVSXD r13, r13d
    MOV ebp, r14d
    ADD r13, rbx
    NOP dword ptr [rax+00000000h]
loc_421BF0:
    MOV rdi, [r15+30h]
    MOV esi, ebp
    SUB ebp, 1
    ADD r13, 1
    CALL sub_410FE0
    MOV [r13-1], al
    CMP ebp, 0FFFFFFFFh
    JNZ loc_421BF0
loc_421C0B:
    LEA r13d, [r14+r12+5]
loc_421C10:
    MOV rdi, [r15+20h]
    MOVSXD rbp, r13d
    LEA r12, [rbx+rbp]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 18h
    MOV [r12], al
    MOV rdi, [r15+20h]
    LEA r12, [rbx+rbp+1]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 10h
    MOV [r12], al
    MOV rdi, [r15+20h]
    LEA r12, [rbx+rbp+2]
    LEA rbp, [rbx+rbp+3]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 8
    MOV [r12], al
    MOV rdi, [r15+20h]
    LEA r12d, [r13+4]
    CALL sub_410F90
    SUB eax, 4
    MOV [rbp+0], al
    MOV rdi, [r15+20h]
    CALL sub_410F90
    CMP eax, 4
    LEA r14d, [rax-5]
    JZ loc_421CB1
loc_421C84:
    MOVSXD r12, r12d
    MOV ebp, r14d
    ADD r12, rbx
    NOP dword ptr [rax]
loc_421C90:
    MOV rdi, [r15+20h]
    MOV esi, ebp
    SUB ebp, 1
    ADD r12, 1
    CALL sub_410FE0
    MOV [r12-1], al
    CMP ebp, 0FFFFFFFFh
    JNZ loc_421C90
loc_421CAC:
    LEA r12d, [r14+r13+5]
loc_421CB1:
    MOV rdi, [r15+28h]
    MOVSXD rbp, r12d
    LEA r13, [rbx+rbp]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 18h
    MOV [r13+0], al
    MOV rdi, [r15+28h]
    LEA r13, [rbx+rbp+1]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 10h
    MOV [r13+0], al
    MOV rdi, [r15+28h]
    LEA r13, [rbx+rbp+2]
    LEA rbp, [rbx+rbp+3]
    CALL sub_410F90
    SUB eax, 4
    SAR eax, 8
    MOV [r13+0], al
    MOV rdi, [r15+28h]
    CALL sub_410F90
    SUB eax, 4
    MOV [rbp+0], al
    MOV rdi, [r15+28h]
    LEA ebp, [r12+4]
    CALL sub_410F90
    CMP eax, 4
    LEA r13d, [rax-5]
    JZ loc_421D8B
loc_421D26:
    MOVSXD rax, ebp
    MOV ebp, r13d
    ADD rbx, rax
    NOP 
loc_421D30:
    MOV rdi, [r15+28h]
    MOV esi, ebp
    SUB ebp, 1
    ADD rbx, 1
    CALL sub_410FE0
    MOV [rbx-1], al
    CMP ebp, 0FFFFFFFFh
    JNZ loc_421D30
loc_421D4A:
    ADD rsp, 18h
    LEA eax, [r13+r12+5]
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_421D5E:
    MOV r13d, 8
    MOV ebp, 8
    MOV [rsp+48h+var_40], 7
    MOV r14d, 6
    MOV [rsp+48h+var_48], 5
    MOV r12d, 4
    JMP loc_421A1F
loc_421D8B:
    MOV eax, ebp
    JMP loc_42196E
```
Output:```json
{
  "features": {
    "basic_signature": {
      "input_params_count": 3,
      "input_param_types": ["Integer", "Pointer", "Boolean"],
      "return_value_type": "None"
    },
    "core_logic_operations": {
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": [
      "0x5B8",
      "0x23",
      "0xDEADBEEF",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x80000000",
      "0x8000000
############
```assembly
loc_401870:
    JMP cs:off_642090
```
Output:```json
{
  "inputParametersCount": 0,
  "inputParameterTypes": [],
  "returnValueType": "None",
  "dominantOperationCategories": ["Arithmetic"],
  "loopIndicators": false,
  "numberDistinctSubroutineCallTargets": 0,
  "useOfIndexedAddressingModes": false,
  "constantsAndMagicNumbers": ["0x5B8", "0x23"],
  "subroutineCallTargets": [0x401870],
  "controlFlow": "JMP"
}
```
############
```assembly
loc_4267C0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 158h
    MOV rax, fs:28h
    MOV [rsp+188h+var_40], rax
    XOR eax, eax
    NOP dword ptr [rax+00h]
loc_4267E8:
    MOV edx, [rsi+rax]
    MOV [rsp+rax+188h+var_188], edx
    ADD rax, 4
    CMP rax, 40h
    JNZ loc_4267E8
loc_4267F8:
    LEA rdx, [rsp+188h+var_154]
    LEA rcx, [rsp+188h+var_54]
    NOP dword ptr [rax]
loc_426808:
    MOV eax, [rdx]
    XOR eax, [rdx-14h]
    ADD rdx, 4
    XOR eax, [rdx-30h]
    XOR eax, [rdx-38h]
    ROL eax, 1
    MOV [rdx+8], eax
    CMP rcx, rdx
    JNZ loc_426808
loc_426821:
    MOV r14d, [rdi]
    MOV r13d, [rdi+4]
    MOV rdx, rsp
    MOV r12d, [rdi+8]
    MOV ebp, [rdi+0Ch]
    LEA r11, [rsp+188h+var_138]
    MOV ebx, [rdi+10h]
    MOV esi, r13d
    MOV r9d, r14d
    MOV r10d, ebp
    MOV r8d, r12d
    MOV r15d, ebx
    JMP loc_426859
loc_426850:
    MOV r10d, r8d
    MOV r9d, eax
    MOV r8d, ecx
loc_426859:
    MOV eax, [rdx]
    MOV ecx, r9d
    ADD rdx, 4
    ROL ecx, 5
    LEA ecx, [rcx+rax+5A827999h]
    MOV eax, r8d
    XOR eax, r10d
    AND eax, esi
    ROR esi, 2
    XOR eax, r10d
    ADD eax, ecx
    MOV ecx, esi
    MOV esi, r9d
    ADD eax, r15d
    CMP r11, rdx
    MOV r15d, r10d
    JNZ loc_426850
loc_42688C:
    LEA r15, [rsp+188h+var_E8]
    JMP loc_4268A7
loc_4268A0:
    MOV r8d, ecx
    MOV eax, edx
    MOV ecx, esi
loc_4268A7:
    MOV edx, r9d
    MOV esi, eax
    ADD r11, 4
    XOR edx, ecx
    ROL esi, 5
    XOR edx, r8d
    LEA edx, [rdx+rsi+6ED9EBA1h]
    ADD edx, [r11-4]
    MOV esi, r9d
    ROR esi, 2
    MOV r9d, eax
    ADD edx, r10d
    CMP r15, r11
    MOV r10d, r8d
    JNZ loc_4268A0
loc_4268D7:
    LEA r10, [rsp+188h+var_98]
    JMP loc_4268F0
loc_4268E8:
    MOV ecx, esi
    MOV edx, r9d
    MOV esi, r11d
loc_4268F0:
    MOV r9d, esi
    MOV r11d, esi
    ADD r15, 4
    OR r9d, ecx
    AND r11d, ecx
    AND r9d, eax
    ROR eax, 2
    OR r9d, r11d
    ADD r9d, [r15-4]
    MOV r11d, edx
    ROL r11d, 5
    LEA r9d, [r9+r11-70E44324h]
    MOV r11d, eax
    MOV eax, edx
    ADD r9d, r8d
    CMP r10, r15
    MOV r8d, ecx
    JNZ loc_4268E8
loc_42692C:
    LEA r8, [rsp+188h+var_48]
    JMP loc_426949
loc_426940:
    MOV esi, r11d
    MOV r9d, eax
    MOV r11d, r15d
loc_426949:
    MOV eax, edx
    MOV r15d, r9d
    ADD r10, 4
    XOR eax, r11d
    ROL r15d, 5
    ROR edx, 2
    XOR eax, esi
    LEA eax, [rax+r15-359D3E2Ah]
    ADD eax, [r10-4]
    MOV r15d, edx
    MOV edx, r9d
    ADD eax, ecx
    CMP r8, r10
    MOV ecx, esi
    JNZ loc_426940
loc_426979:
    ADD eax, r14d
    ADD r9d, r13d
    ADD r12d, r15d
    ADD r11d, ebp
    ADD esi, ebx
    MOV [rdi], eax
    MOV rax, [rsp+188h+var_40]
    XOR rax, fs:28h
    MOV [rdi+4], r9d
    MOV [rdi+8], r12d
    MOV [rdi+0Ch], r11d
    MOV [rdi+10h], esi
    JNZ loc_4269BD
loc_4269AB:
    ADD rsp, 158h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4269BD:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "parameters": ["int"],
      "effect": "The function takes exactly one integer argument."
    },
    {
      "category": "Data Flow",
      "parameters": [],
      "effect": "The function does not modify any memory locations."
    }
  ],
  "algorithm": "Generic Control/Data Flow"
}
```
############
```assembly
loc_404010:
    PUSH rbx
    MOVSXD rax, dword ptr [rdi]
    MOV rbx, rdi
    CMP ds:dword_42D6E0[rax*4], 2
    JZ loc_404040
loc_404021:
    MOV eax, ds:dword_42D400[rax*4]
    CMP eax, 2
    JZ loc_404068
loc_40402D:
    CMP eax, 3
    JZ loc_404078
loc_404032:
    CMP eax, 4
    JZ loc_404050
loc_404037:
    MOV rdi, rbx
    POP rbx
    JMP sub_40B5E0
loc_404040:
    MOV rdi, [rdi+8]
    CALL sub_40B5E0
    MOVSXD rax, dword ptr [rbx]
    JMP loc_404021
loc_404050:
    MOV rdi, [rbx+10h]
    CALL sub_42A0F0
    MOV rdi, rbx
    POP rbx
    JMP sub_40B5E0
loc_404068:
    MOV rdi, [rbx+10h]
    CALL sub_40B5E0
    JMP loc_404037
loc_404078:
    MOV rdi, [rbx+10h]
    CALL sub_429CE0
    JMP loc_404037
```
Output:{
    "features": {
        "basic_signature": {
            "input_params_count": 1,
            "input_param_types": ["Integer"],
            "return_value_type": "None"
        },
        "core_logic_and_operations": {
            "dominant_operation_categories": [
                "Arithmetic",
                "Bitwise",
                "Comparison",
                "DataMovement",
                "ConditionalBranching",
                "SubroutineCall",
                "Return",
                "MemoryAccess",
                "StackManipulation"
            ],
            "loop_indicators": false,
            "number_of_distinct_subroutine_call_targets": 1,
            "use_of_indexed_addressing_modes": true,
            "constants_and_magic_numbers": [
                "0x5B8",
                "0x23",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
                "0xFFFF0000",
                "0xFF",
                "0xDEADBEEF",
                "0x80000000",
############
```assembly
loc_642E28:
    EXTRN 
```
Output:```json
{
  "signature": {
    "input_parameters_count": 0,
    "input_parameter_types": ["Integer"],
    "return_value_type": "Integer"
  },
  "core_logic_operations": [
    ["Arithmetic", "Add", "Subtract", "Multiply", "Divide", "Increment", "Decrement"],
    ["Bitwise", "AND", "OR", "XOR", "NOT", "Shifts", "Rotates"],
    ["Comparison", "Set Flags Based on Operand Relationship"],
    ["DataMovement", "Copying Data Between Registers/memory"],
    ["ConditionalBranching", "Transfer Control Based on Flags/Conditions"],
    ["SubroutineCall", "Transfer Control to another routine"],
    ["Return", "Transfer Control back to caller"],
    ["MemoryAccess", "Reading/writing to memory locations"],
    ["StackManipulation", "Pushing/popping values, adjusting stack pointer"]
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
  "presence_of_notable_floats_doubles": ["0x80000000", "0xFF"],
  "count_of_distinct_immediate_values": 0,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_i_o_operations": true,
  "likely_performs_block_memory_operations": true,
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_42B230:
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV ebx, edx
    SUB rsp, 28h
    MOV rax, fs:28h
    MOV [rsp+38h+var_20], rax
    XOR eax, eax
    TEST rdi, rdi
    MOV [rsp+38h+var_38], rsi
    JZ loc_42B290
loc_42B254:
    XOR edx, edx
    MOV rsi, rsp
    CALL sub_428A20
    TEST rax, rax
    JZ loc_42B290
loc_42B263:
    MOV rdi, [rax+8]
    TEST rdi, rdi
    JZ loc_42B2A9
loc_42B26C:
    MOV edx, 0Ah
    XOR esi, esi
    CALL _strtol
loc_42B278:
    MOV rcx, [rsp+38h+var_20]
    XOR rcx, fs:28h
    JNZ loc_42B2A4
loc_42B288:
    ADD rsp, 28h
    POP rbx
    POP rbp
    RETN 
loc_42B290:
    MOV rdi, rbp
    CALL sub_42B000
    MOV rdi, rax
    MOV eax, ebx
    TEST rdi, rdi
    JZ loc_42B278
loc_42B2A2:
    JMP loc_42B26C
loc_42B2A4:
    CALL ___stack_chk_fail
loc_42B2A9:
    MOV ecx, offset aReadSettingI
    MOV edx, 1A3h
    MOV esi, offset aUnixUxstoreC
    MOV edi, offset aValNull
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "properties": {
        "inputParameterCount": 1,
        "inputParameterTypes": ["Integer"],
        "returnValueType": "None"
      }
    },
    {
      "name": "Core Logic & Operations",
      "properties": {
        "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
        "loopIndicators": false,
        "numberOfDistinctSubroutineCallTargets": 1,
        "useOfIndexedAddressingModes": false
      }
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "properties": {
        "presenceOfNotableIntegerConstants": ["0x5B8", "0x23"],
        "presenceOfNotableFloatingPointConstants": ["0x80000000", "0xFF"],
        "countOfDistinctImmediateValues": 3
      }
    },
    {
      "name": "Side Effects & Interactions",
      "properties": {
        "likelyModifiesInputParameters": true,
        "likelyModifiesGlobalState": true,
        "likelyPerformsMemoryAllocation/Deallocation": true,
        "likelyPerformI/OOperations": true,
        "likelyPerformsBlockMemoryOperations": true
      }
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "properties": {
        "inferredAlgorithm": "CRC32 Calculation"
      }
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_415720:
    MOV rax, [rdi]
    TEST rax, rax
    JZ loc_4159E3
loc_41572C:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, rax
    SUB rsp, 18h
    CALL sub_410F00
    MOV rdi, [rbx+8]
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    MOV r12d, eax
    CMOVS r12d, edx
    SAR r12d, 2
    CALL sub_410F00
    MOV rdi, [rbx+10h]
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    MOV ebp, eax
    LEA r13d, [r12+0Dh]
    CMOVS ebp, edx
    SAR ebp, 2
    CALL sub_410F00
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    LEA r12d, [rbp+r13+0]
    MOV rdi, [rbx+18h]
    MOV ebp, eax
    CMOVS ebp, edx
    SAR ebp, 2
    CALL sub_410F00
    ADD ebp, r12d
    LEA edx, [rax+12h]
    ADD eax, 0Fh
    MOV edi, eax
    MOV esi, 1
    CMOVS edi, edx
    SAR edi, 2
    ADD edi, ebp
    MOVSXD rdi, edi
    CALL sub_40AC50
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4159E6
loc_4157C3:
    MOV eax, 7830h
    MOV byte ptr [rbp+2], 0
    LEA r14, [rbp+2]
    MOV [rbp+0], ax
    MOV rdi, [rbx]
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    CMOVS eax, edx
    SAR eax, 2
    LEA r12d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r12d, eax
    MOV r13d, r12d
    NOP word ptr [rax+rax+00h]
loc_415800:
    MOV rdi, [rbx]
    MOV esi, r13d
    ADD r14, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r13d
    SUB r13d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r14-1], al
    CMP r13d, 0FFFFFFFFh
    JNZ loc_415800
loc_415834:
    LEA eax, [r12+3]
    CDQE 
    MOV dword ptr [rbp+rax+0], 78302Ch
    MOV rdi, [rbx+8]
    LEA eax, [r12+6]
    MOV r14d, eax
    MOV [rsp+48h+var_3C], eax
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    CMOVS eax, edx
    MOVSXD rdx, r14d
    SAR eax, 2
    LEA r14, [rbp+rdx+0]
    LEA r13d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r13d, eax
    MOV r15d, r13d
    XCHG ax, ax
loc_415880:
    MOV rdi, [rbx+8]
    MOV esi, r15d
    ADD r14, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r15d
    SUB r15d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r14-1], al
    CMP r15d, 0FFFFFFFFh
    JNZ loc_415880
loc_4158B5:
    MOV r14d, [rsp+48h+var_3C]
    LEA eax, [r12+r13+7]
    CDQE 
    ADD r14d, r13d
    MOV dword ptr [rbp+rax+0], 78302Ch
    MOV rdi, [rbx+10h]
    LEA eax, [r14+4]
    MOV r15d, eax
    MOV [rsp+48h+var_3C], eax
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    CMOVS eax, edx
    MOVSXD rdx, r15d
    SAR eax, 2
    LEA r13, [rbp+rdx+0]
    LEA r12d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r12d, eax
    MOV r15d, r12d
    NOP word ptr [rax+rax+00000000h]
loc_415910:
    MOV rdi, [rbx+10h]
    MOV esi, r15d
    ADD r13, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r15d
    SUB r15d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r13-1], al
    CMP r15d, 0FFFFFFFFh
    JNZ loc_415910
loc_415945:
    LEA eax, [r14+r12+5]
    MOV r13d, [rsp+48h+var_3C]
    CDQE 
    MOV dword ptr [rbp+rax+0], 78302Ch
    MOV rdi, [rbx+18h]
    ADD r13d, r12d
    LEA r15d, [r13+4]
    CALL sub_410F00
    LEA edx, [rax+6]
    ADD eax, 3
    MOVSXD r15, r15d
    CMOVS eax, edx
    SAR eax, 2
    LEA r12d, [rax-1]
    TEST eax, eax
    MOV eax, 0
    CMOVLE r12d, eax
    ADD r15, rbp
    MOV r14d, r12d
    NOP dword ptr [rax]
loc_415990:
    MOV rdi, [rbx+18h]
    MOV esi, r14d
    ADD r15, 1
    SAR esi, 1
    CALL sub_410FE0
    MOV ecx, r14d
    SUB r14d, 1
    AND ecx, 1
    SHL ecx, 2
    SAR eax, cl
    AND eax, 0Fh
    MOVZX eax, ds:byte_4333C0[rax]
    MOV [r15-1], al
    CMP r14d, 0FFFFFFFFh
    JNZ loc_415990
loc_4159C5:
    LEA eax, [r13+r12+5]
    CDQE 
    MOV byte ptr [rbp+rax+0], 0
    MOV rax, rbp
loc_4159D4:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4159E3:
    XOR eax, eax
    RETN 
loc_4159E6:
    XOR eax, eax
    JMP loc_4159D4
```
Output:```json
{
  "features": {
    "basic_signature": [
      "Integer",
      "Pointer",
      "Boolean",
      "FloatingPoint",
      "String",
      "Struct/Object",
      "Collection"
    ],
    "data_flow": [
      {
        "operation_category": ["Arithmetic"],
        "constants_and_magic_numbers": ["0x5B8", "0x23"],
        "subroutine_call_targets": ["loc_415720", "loc_4157C3", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      },
      {
        "operation_category": ["Bitwise"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": ["loc_41572C", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      },
      {
        "operation_category": ["Comparison"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": ["loc_415720", "loc_4157C3", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      },
      {
        "operation_category": ["DataMovement"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": ["loc_415720", "loc_4157C3", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      },
      {
        "operation_category": ["ConditionalBranching"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": ["loc_415720", "loc_4157C3", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      },
      {
        "operation_category": ["SubroutineCall"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": ["loc_415720", "loc_4157C3", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      },
      {
        "operation_category": ["Return"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": ["loc_415720", "loc_4157C3", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      },
      {
        "operation_category": ["MemoryAccess"],
        "constants_and_magic_numbers": [],
        "subroutine_call_targets": ["loc_415720", "loc_4157C3", "loc_415800", "loc_415834", "loc_415880", "loc_415910", "loc_415945", "loc_415990"],
        "control_flow": true
      }
    ],
    "loop_indicators": [
      false,
      false,
      false,
      true,
      true,
      true,
      false,
      false,
      false,
      false
    ],
    "number_of_distinct_subroutine
############
```assembly
loc_4018A0:
    JMP cs:off_6420A8
```
Output:```json
{
  "signature": {
    "inputParameterCount": 1,
    "inputParameterTypes": ["Integer"],
    "returnValueType": "None"
  },
  "coreLogic": {
    "dominantOperationCategories": ["Arithmetic", "Comparison"],
    "loopIndicators": false,
    "numberOfDistinctSubroutineCallTargets": 0,
    "useOfIndexedAddressingModes": true
  },
  "constantsAndMagicNumbers": [
    "0x5B8",
    "0x23"
  ],
  "subroutineCallTargets": [
    "off_6420A8"
  ],
  "controlFlow": {
    "likelyModifiesInputParameters": true,
    "likelyModifiesGlobalState": true,
    "likelyPerformsMemoryAllocation/Deallocation": true,
    "likelyPerformsI/OOperations": true,
    "likelyPerformBlockMemoryOperations": true
  },
  "inferredAlgorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_410F00:
    MOV ecx, [rdi]
    SHL ecx, 6
    SUB ecx, 1
    JS loc_410F3C
loc_410F0A:
    MOV eax, ecx
    SAR eax, 6
    CDQE 
    CMP qword ptr [rdi+rax*8+8], 0
    JNS loc_410F34
loc_410F19:
    JMP loc_410F3C
loc_410F20:
    MOV eax, ecx
    SAR eax, 6
    CDQE 
    MOV rax, [rdi+rax*8+8]
    SHR rax, cl
    TEST rax, rax
    JNZ loc_410F3C
loc_410F34:
    SUB ecx, 1
    CMP ecx, 0FFFFFFFFh
    JNZ loc_410F20
loc_410F3C:
    LEA eax, [rcx+1]
    RETN 
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature & Data Flow",
      "inputParameterCount": 1,
      "inputParameterTypes": ["Integer"],
      "returnValueType": "Integer",
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison"],
      "loopIndicators": false,
      "numberDistinctSubroutineCallTargets": 0,
      "useOfIndexedAddressingModes": false,
      "constantsAndMagicNumbers": [
        "0x5B8",
        "0x23"
      ],
      "sideEffects": [
        false,
        false,
        true,
        true
      ],
      "inferredAlgorithm": "CRC32 Calculation"
    },
    {
      "category": "Core Logic & Operations",
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison"],
      "constantsAndMagicNumbers": [
        "0xDEADBEEF",
        "0x80000000",
        "0xFFFF0000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0x80000000",
        "0xFF",
        "0
############
```assembly
loc_403AA0:
    CMP cs:byte_642328, 0
    JNZ locret_403ABA
loc_403AA9:
    PUSH rbp
    MOV rbp, rsp
    CALL sub_403A20
    POP rbp
    MOV cs:byte_642328, 1
loc_403ABA:
    REP 
```
Output:```json
{
  "inputParameters": [
    {
      "count": 1,
      "type": "Integer",
      "value": 0
    },
    {
      "count": 1,
      "type": "Integer",
      "value": 1
    }
  ],
  "dominantOperationCategories": [
    "Arithmetic",
    "Bitwise",
    "Comparison",
    "DataMovement",
    "ConditionalBranching",
    "SubroutineCall",
    "Return"
  ],
  "loopIndicators": [
    false,
    false
  ],
  "numberOfDistinctSubroutineCallTargets": 0,
  "useOfIndexedAddressingModes": false,
  "constantsAndMagicNumbers": [
    "0x642328",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x80000000",
    "0x8
############
```assembly
loc_642C10:
    EXTRN 
```
Output:```json
{
  "features": {
    "input_parameter_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "None",
    "dominant_operation_categories": ["Arithmetic"],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 0,
    "use_of_indexed_addressing_modes": true,
    "constants_and_magic_numbers": [
      "0x5B8", // Large or unusual value
      "0x23"   // Significant bitmasks or flags
    ],
    "side_effects": false,
    "interactions": false,
    "inferred_algorithm": "CRC32 Calculation"
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_401BF0:
    JMP cs:off_642250
```
Output:```json
{
  "features": {
    "input_parameter_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "None",
    "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching"],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 0,
    "use_of_indexed_addressing_modes": false,
    "constants_and_magic_numbers": [
      "0x5B8", "0x23"
    ],
    "count_of_distinct_immediate_values": 1,
    "likely_modifies_input_parameters": true,
    "likely_modifies_global_state": false,
    "likely_performs_memory_allocation_or_deallocation": false,
    "likely_performs_i_o_operations": false,
    "likely_performs_block_memory_operations": true,
    "inferred_algorithm": "CRC32 Calculation"
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_401CB0:
    JMP cs:__gmon_start___ptr
```
Output:```json
{
  "features": {
    "BasicSignatureAndDataFlow": {
      "inputParameterCount": 1,
      "inputParameterTypes": ["Integer"],
      "returnValueType": "None"
    },
    "CoreLogicAndOperations": {
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loopIndicators": false,
      "numberOfDistinctSubroutineCallTargets": 0,
      "useOfIndexedAddressingModes": true,
      "constantsAndMagicNumbers": [
        "0x5B8",
        "0x23"
      ],
      "sideEffects": {
        "likelyModifiesInputParameters": false,
        "likelyModifiesGlobalState": false,
        "likelyPerformsMemoryAllocation/Deallocation": false,
        "likelyPerformI/OOperations": false,
        "likelyPerformsBlockMemoryOperations": false
      },
      "inferredAlgorithm": "CRC32 Calculation"
    }
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_417850:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rdx, [rdi]
    MOV rbx, rdi
    MOV eax, [rdx]
    TEST eax, eax
    JNZ loc_417970
loc_417868:
    CMP qword ptr [rdi+8], 0
    JZ loc_4179F0
loc_417873:
    CMP qword ptr [rdi+10h], 0
    JZ loc_4179F0
loc_41787E:
    MOV rdi, [rdi+18h]
    MOV ebp, 1
    TEST rdi, rdi
    JZ loc_417962
loc_417890:
    MOV rdx, [rdx+20h]
    MOV rsi, rdi
    CALL sub_4108C0
    MOV r12, rax
    MOV rax, [rbx]
    MOV rdi, r12
    MOV rsi, [rax+20h]
    CALL sub_412590
    TEST rax, rax
    MOV r13, rax
    JZ loc_4179E8
loc_4178BA:
    MOV rax, [rbx]
    MOV rdi, [rbx+8]
    MOV rsi, r13
    MOV rdx, [rax+20h]
    CALL sub_4108C0
    MOV rdi, r13
    MOV r14, rax
    CALL sub_4108A0
    MOV rax, [rbx]
    MOV rsi, [rbx+18h]
    MOV rdi, r12
    MOV rdx, [rax+20h]
    CALL sub_4108C0
    MOV rdi, r12
    MOV r13, rax
    CALL sub_4108A0
    MOV rax, [rbx]
    MOV rdi, r13
    MOV rsi, [rax+20h]
    CALL sub_412590
    MOV rdi, r13
    MOV r12, rax
    CALL sub_4108A0
    TEST r12, r12
    JZ loc_417A00
loc_417919:
    MOV rax, [rbx]
    MOV rdi, [rbx+10h]
    MOV rsi, r12
    MOV rdx, [rax+20h]
    CALL sub_4108C0
    MOV rdi, r12
    MOV r13, rax
    CALL sub_4108A0
    MOV rdi, [rbx+8]
    CALL sub_4108A0
    MOV rdi, [rbx+10h]
    MOV [rbx+8], r14
    CALL sub_4108A0
    MOV rdi, [rbx+18h]
    MOV [rbx+10h], r13
    CALL sub_4108A0
    MOV qword ptr [rbx+18h], 0
loc_417962:
    POP rbx
    MOV eax, ebp
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_417970:
    XOR ebp, ebp
    CMP eax, 2
    SETZ bpl
    CMP eax, 1
    JNZ loc_417962
loc_41797E:
    CMP qword ptr [rdi+8], 0
    JZ loc_4179F0
loc_417985:
    MOV rdi, [rdi+18h]
    MOV ebp, 1
    TEST rdi, rdi
    JZ loc_417962
loc_417993:
    MOV rsi, [rdx+20h]
    CALL sub_412590
    TEST rax, rax
    MOV r12, rax
    JZ loc_4179F0
loc_4179A4:
    MOV rax, [rbx]
    MOV rdi, [rbx+8]
    MOV rsi, r12
    MOV rdx, [rax+20h]
    CALL sub_4108C0
    MOV rdi, r12
    MOV r13, rax
    CALL sub_4108A0
    MOV rdi, [rbx+18h]
    CALL sub_4108A0
    MOV rdi, [rbx+8]
    MOV qword ptr [rbx+18h], 0
    CALL sub_4108A0
    MOV [rbx+8], r13
    JMP loc_417962
loc_4179E8:
    MOV rdi, r12
    CALL sub_4108A0
loc_4179F0:
    XOR ebp, ebp
    POP rbx
    MOV eax, ebp
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_417A00:
    MOV rdi, r14
    XOR ebp, ebp
    CALL sub_4108A0
    JMP loc_417962
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "count": 1,
      "types": ["Integer"],
      "inference": "The function takes two distinct integer inputs."
    },
    {
      "category": "Core Logic & Operations",
      "count": 2,
      "types": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
      "inference": "The function performs arithmetic operations on two integers."
    },
    {
      "category": "Loop Indicators",
      "count": 1,
      "types": ["True"],
      "inference": "The function has a single loop that transfers control to another subroutine."
    },
    {
      "category": "Number of Distinct Subroutine Call Targets",
      "count": 1,
      "types": ["Integer"],
      "inference": "There is exactly one subroutine call target."
    },
    {
      "category": "Use of Indexed Addressing Modes",
      "count": 1,
      "types": ["True"],
      "inference": "The function uses an indexed addressing mode to access memory."
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_414834:
    TEST esi, esi
    MOV r12d, esi
    MOV rbp, rdx
    MOV ecx, [rdx+80h]
    MOV eax, [rdx+84h]
    JZ loc_4148B3
loc_41484A:
    MOV r13, rdi
    MOV rbx, rdi
loc_414850:
    MOV esi, [rbx]
    MOV edx, [rbx+4]
    MOV rdi, rsp
    ADD rbx, 8
    BSWAP esi
    BSWAP edx
    XOR edx, eax
    XOR esi, ecx
    MOV rcx, rbp
    CALL sub_4132A0
    MOV ecx, [rsp+38h+var_38]
    MOV eax, [rsp+38h+var_34]
    MOV edx, ecx
    MOV [rbx-5], cl
    MOV [rbx-1], al
    SHR edx, 18h
    MOV [rbx-8], dl
    MOV edx, ecx
    SHR edx, 10h
    MOV [rbx-7], dl
    MOV edx, ecx
    SHR edx, 8
    MOV [rbx-6], dl
    MOV edx, eax
    SHR edx, 18h
    MOV [rbx-4], dl
    MOV edx, eax
    SHR edx, 10h
    MOV [rbx-3], dl
    MOV edx, eax
    SHR edx, 8
    MOV [rbx-2], dl
    MOV edx, ebx
    SUB edx, r13d
    CMP r12d, edx
    JA loc_414850
loc_4148B3:
    MOV [rbp+84h], eax
    MOV [rbp+80h], ecx
    MOV rax, [rsp+38h+var_30]
    XOR rax, fs:28h
    JNZ loc_4148F3
loc_4148CF:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4148DA:
    MOV ecx, offset aDesCbcEncrypt
    MOV edx, 261h
    MOV esi, offset aSshdesC
    MOV edi, offset aLen70
    CALL ___assert_fail
loc_4148F3:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "count": 2,
      "categories": [
        "Integer",
        "Pointer"
      ],
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
      "loop_indicators": [true, false],
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": [true, false],
      "constants_and_magic_numbers": [
        "0x5B8",
        "0x23"
      ],
      "side_effects": [true, true],
      "interactions": [true, true],
      "inferred_algorithm": "CRC32 Calculation"
    },
    {
      "name": "Core Logic & Operations",
      "count": 4,
      "categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement"
      ],
      "loop_indicators": [true, false],
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": [true, false],
      "constants_and_magic_numbers": [
        "0x5B8",
        "0x23",
        "0x80000000",
        "0xFF"
      ],
      "side_effects": [true, true],
      "interactions": [true, true],
      "inferred_algorithm": "String Length Calculation"
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "count": 2,
      "categories": [
        "Integer",
        "Floating-Point"
      ],
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
      "loop_indicators": [true, false],
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": [true, false],
      "constants_and_magic_numbers": [
        "0x5B8",
        "0x23",
        "0x80000000",
        "0xFF"
      ],
      "side_effects": [true, true],
      "interactions": [true, true],
      "inferred_algorithm": "Undetermined"
    },
    {
      "name": "Side Effects & Interactions",
      "count": 2,
      "categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement"
      ],
      "loop_indicators": [true, false],
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": [true, false],
      "constants_and_magic_numbers": [],
      "side_effects": [true, true],
      "interactions": [true, true],
      "inferred_algorithm": "Undetermined"
    }
  ]
}
```
############
```assembly
loc_403CF0:
    MOV rcx, cs:stderr
    MOV edx, 27h
    MOV esi, 1
    MOV edi, offset aUsePuttygenHel
    JMP _fwrite
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "categories": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object", "Collection"],
      "value": "loc_403CF0"
    },
    {
      "name": "Core Logic & Operations",
      "count": 1,
      "categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "value": "MOV rcx, cs:stderr"
    },
    {
      "name": "Loop Indicators",
      "count": 1,
      "categories": ["Boolean"],
      "value": "true"
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "count": 1,
      "categories": ["Integer"],
      "value": "1"
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "count": 1,
      "categories": ["Boolean"],
      "value": "true"
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "count": 1,
      "categories": ["Hexadecimal Strings", "Floats/Doubles"],
      "value": "0x5B8, 0x23"
    },
    {
      "name": "Count of Distinct Immediate Values",
      "count": 1,
      "categories": ["Integer"],
      "value": "27"
    },
    {
      "name": "Side Effects & Interactions",
      "count": 1,
      "categories": ["Likely Modifies Input Parameters", "Likely Modifies Global State", "Likely Performs Memory Allocation/Deallocation", "Likely Performs I/O Operations", "Likely Performs Block Memory Operations"],
      "value": "true"
    },
    {
      "name": "Inferred Algorithm",
      "count": 1,
      "categories": ["Conditional"],
      "value": "CRC32 Calculation"
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_428D70:
    REP 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": ["Integer"],
  "return_value_type": "None",
  "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "constants_and_magic_numbers": [
    "0x5B8",
    "0x23"
  ],
  "subroutine_call_targets": false,
  "control_flow": "ConditionalBranching",
  "memory_access": "MemoryAccess",
  "stack_manipulation": "StackManipulation",
  "side_effects": false,
  "interactions": false,
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_421660:
    CMP dword ptr [rsi], 3
    MOV qword ptr [rdx], 0
    JG loc_421670
loc_42166C:
    RETN 
loc_421670:
    PUSH r13
    PUSH r12
    MOV r13, rdx
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV rbp, rcx
    MOV r12, rsi
    SUB rsp, 8
    MOV rax, [rdi]
    MOV edi, [rax]
    BSWAP edi
    CALL sub_40A770
    TEST eax, eax
    MOV [rbp+0], eax
    JS loc_4216C5
loc_421699:
    MOV eax, [r12]
    MOV rsi, [rbx]
    SUB eax, 4
    LEA rdx, [rsi+4]
    MOV [r12], eax
    MOV ecx, [rbp+0]
    MOV [rbx], rdx
    CMP eax, ecx
    JL loc_4216C5
loc_4216B5:
    SUB eax, ecx
    MOV [r13+0], rdx
    MOVSXD rdx, ecx
    ADD [rbx], rdx
    MOV [r12], eax
loc_4216C5:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "dataFlow": [
        {
          "inputParamCount": 2,
          "inputParameterTypes": ["Integer", "Integer"],
          "returnValueType": "None"
        },
        {
          "inputParamCount": 1,
          "inputParameterTypes": ["Integer"],
          "returnValueType": "None"
        }
      ]
    },
    {
      "category": "Core Logic & Operations",
      "dominantOperationCategories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return",
        "MemoryAccess",
        "StackManipulation"
      ],
      "loopIndicators": false,
      "numberDistinctSubroutineCallTargets": 2,
      "useOfIndexedAddressingModes": false
    },
    {
      "category": "Constants & 'Magic Numbers'",
      "presenceOfNotableIntegerConstants": [
        "0x5B8",
        "0x23"
      ],
      "presenceOfNotableFloatingPointConstants": [
        "0xDEADBEEF",
        "0x80000000"
      ],
      "countDistinctImmediateValues": 2
    },
    {
      "category": "Side Effects & Interactions",
      "likelyModifiesInputParameters": true,
      "likelyModifiesGlobalState": true,
      "likelyPerformsMemoryAllocation/Deallocation": true,
      "likelyPerformI/OOperations": true,
      "likelyPerformsBlockMemoryOperations": true
    },
    {
      "category": "Inferred Algorithm (Conditional)",
      "inferredAlgorithm": "CRC32 Calculation"
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_429CA0:
    MOV rax, [rdi]
    RETN 
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "data_flow": ["mov", "rax", "[rdi]"],
      "return_value_type": "int",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"]
    },
    {
      "category": "Core Logic & Operations",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false,
      "constants_and_magic_numbers": [
        "0x5B8", "0x23"
      ],
      "side_effects": false,
      "interactions": false,
      "inferred_algorithm": "CRC32 Calculation"
    },
    {
      "category": "Constants & "Magic Numbers",
      "data_flow": ["mov", "rax", "[rdi]"],
      "return_value_type": "int",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"]
    },
    {
      "category": "Side Effects & Interactions",
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "interactions": false,
      "inferred_algorithm": "Undetermined"
    }
  ]
}
```
############
```assembly
loc_42BDA0:
    PUSH r15
    PUSH r14
    MOV r15d, edi
    PUSH r13
    PUSH r12
    LEA r12, off_641E10
    PUSH rbp
    LEA rbp, off_641E18
    PUSH rbx
    MOV r14, rsi
    MOV r13, rdx
    SUB rbp, r12
    SUB rsp, 8
    SAR rbp, 3
    CALL _init_proc
    TEST rbp, rbp
    JZ loc_42BDF6
loc_42BDD6:
    XOR ebx, ebx
    NOP dword ptr [rax+rax+00000000h]
loc_42BDE0:
    MOV rdx, r13
    MOV rsi, r14
    MOV edi, r15d
    CALL qword ptr [r12+rbx*8]
    ADD rbx, 1
    CMP rbx, rbp
    JNZ loc_42BDE0
loc_42BDF6:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
```
Output:{
  "features": {
    "basic_signature": {
      "input_parameter_count": 2,
      "input_parameter_types": ["Integer", "Integer"],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": true,
      "constants_and_magic_numbers": [
        "0x80000000",
        "0x5B8",
        "0x23"
      ],
      "side_effects": {
        "likely_modifies_input_parameters": true,
        "likely_modifies_global_state": true,
        "likely_performs_memory_allocation_deallocation": true,
        "likely_performs_I/O_operations": true,
        "likely_performs_block_memory_operations": true
      },
      "inferred_algorithm": "CRC32 Calculation"
    }
  },
  "algorithm": "CRC32 Calculation"
}
############
```assembly
loc_413120:
    MOV ecx, [rsi]
loc_413122:
    ADD rsi, 4
    ADD r9d, r9d
    TEST ecx, ecx
    JS loc_41313F
loc_41312D:
    MOV eax, ecx
    SAR eax, 5
    CDQE 
    MOV eax, [rsp+rax*4+18h+var_18]
    SHR eax, cl
    AND eax, 1
    OR r9d, eax
loc_41313F:
    CMP rsi, offset unk_4328B0
    JNZ loc_413120
loc_413148:
    MOV ecx, 1
    MOV esi, offset unk_4327C0
    XOR r8d, r8d
    JMP loc_413162
loc_413160:
    MOV ecx, [rsi]
loc_413162:
    ADD rsi, 4
    ADD r8d, r8d
    TEST ecx, ecx
    JS loc_41317F
loc_41316D:
    MOV eax, ecx
    SAR eax, 5
    CDQE 
    MOV eax, [rsp+rax*4+18h+var_18]
    SHR eax, cl
    AND eax, 1
    OR r8d, eax
loc_41317F:
    CMP rsi, offset unk_432830
    JNZ loc_413160
loc_413188:
    XOR r10d, r10d
    MOV eax, 1
    MOV r11d, 1Ch
    NOP word ptr [rax+rax+00000000h]
loc_4131A0:
    MOV esi, r11d
    MOV edi, r9d
    MOV ecx, eax
    SUB esi, eax
    SHL edi, cl
    MOV ecx, esi
    SHR r9d, cl
    MOV ecx, eax
    OR r9d, edi
    MOV edi, r8d
    SHL edi, cl
    MOV ecx, esi
    AND r9d, 0FFFFFFFh
    SHR r8d, cl
    MOV [rsp+18h+var_14], r9d
    MOV ecx, 31h
    OR r8d, edi
    MOV esi, offset unk_432700
    XOR edi, edi
    AND r8d, 0FFFFFFFh
    MOV [rsp+18h+var_18], r8d
    JMP loc_4131F2
loc_4131F0:
    MOV ecx, [rsi]
loc_4131F2:
    ADD rsi, 4
    ADD edi, edi
    TEST ecx, ecx
    JS loc_41320D
loc_4131FC:
    MOV eax, ecx
    SAR eax, 5
    CDQE 
    MOV eax, [rsp+rax*4+18h+var_18]
    SHR eax, cl
    AND eax, 1
    OR edi, eax
loc_41320D:
    CMP rsi, offset dword_432780
    JNZ loc_4131F0
loc_413216:
    MOV [rdx+r10], edi
    MOV ecx, 0FFFFFFFFh
    XOR edi, edi
    MOV esi, offset unk_432680
    JMP loc_413232
loc_413230:
    MOV ecx, [rsi]
loc_413232:
    ADD rsi, 4
    ADD edi, edi
    TEST ecx, ecx
    JS loc_41324D
loc_41323C:
    MOV eax, ecx
    SAR eax, 5
    CDQE 
    MOV eax, [rsp+rax*4+18h+var_18]
    SHR eax, cl
    AND eax, 1
    OR edi, eax
loc_41324D:
    CMP rsi, offset unk_432700
    JNZ loc_413230
loc_413256:
    MOV [rdx+r10+40h], edi
    ADD r10, 4
    CMP r10, 40h
    JZ loc_413271
loc_413265:
    MOV eax, ds:dword_432780[r10]
    JMP loc_4131A0
loc_413271:
    MOV rax, [rsp+18h+var_10]
    XOR rax, fs:28h
    MOV dword ptr [rdx+84h], 0
    MOV dword ptr [rdx+80h], 0
    JNZ loc_41329A
loc_413295:
    ADD rsp, 18h
    RETN 
loc_41329A:
    CALL ___stack_chk_fail
```
Output:```json
{
  "signature": "1328B0",
  "data_flow": [
    {
      "input_params": ["rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C0"],
      "control_flow": "conditional_branching"
    },
    {
      "input_params": ["rsi", "rsi"],
      "operation_categories": ["Arithmetic", "Bitwise"],
      "constant_values": ["0x5B8", "0x23"],
      "subroutine_call_targets": ["unk_4328B0", "unk_4327C
############
```assembly
loc_4019B0:
    JMP cs:off_642130
```
Output:```json
{
  "signature": {
    "input_params_count": 0,
    "input_params_types": ["Integer"],
    "return_value_type": "None"
  },
  "core_logic": {
    "dominant_operation_categories": ["Arithmetic", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 1,
    "use_of_indexed_addressing_modes": false
  },
  "constants_and_magic_numbers": ["0x1F", "0x7E", "0x8C", "0x23"],
  "subroutine_call_targets": true,
  "control_flow": false,
  "memory_access": false,
  "stack_manipulation": false,
  "side_effects": false,
  "interactions": false,
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_422790:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    CALL sub_422620
    MOV esi, 1
    MOVSXD rdi, eax
    CALL sub_40AC50
    MOV rsi, rbp
    MOV rdi, rax
    MOV rbx, rax
    CALL sub_422670
    ADD rsp, 8
    MOV rax, rbx
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "inputParameters": [
    {
      "type": "Integer",
      "count": 3,
      "values": [
        422790,
        1,
        1
      ]
    }
  ],
  "dominantOperationCategories": [
    "Arithmetic",
    "Bitwise",
    "Comparison"
  ],
  "constantsAndMagicNumbers": [
    "0x5B8",
    "0x23",
    "0x80000000"
  ],
  "subroutineCallTargets": [
    "422620",
    "422670",
    "40AC50",
    "422620"
  ],
  "controlFlow": "ConditionalBranching"
}
```
############
```assembly
loc_41A450:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 1B8h
    MOV rax, fs:28h
    MOV [rsp+1E8h+var_40], rax
    XOR eax, eax
    CMP qword ptr [rdi+10h], 0
    MOV [rsp+1E8h+var_1C0], rsi
    MOV [rsp+1E8h+var_1C4], edx
    JZ loc_41A4D9
loc_41A484:
    CMP qword ptr [rdi+18h], 0
    MOV r15, rdi
    JZ loc_41A4D9
loc_41A48E:
    CMP qword ptr [rdi+8], 0
    JZ loc_41A4D9
loc_41A495:
    MOV rax, [rdi]
    LEA rsi, [rsp+1E8h+var_1C4]
    MOV rbx, rcx
    LEA rdx, [rsp+1E8h+var_1B0]
    LEA rcx, [rsp+1E8h+var_1B4]
    LEA rdi, [rsp+1E8h+var_1C0]
    MOV ebp, r8d
    MOV r12, [rax+70h]
    CALL sub_418D50
    MOV rsi, [rsp+1E8h+var_1B0]
    TEST rsi, rsi
    JZ loc_41A4D9
loc_41A4C5:
    MOV rax, [r15]
    MOV edi, [rsp+1E8h+var_1B4]
    MOV rdx, [rax+60h]
    CALL sub_40B9B0
    TEST eax, eax
    JNZ loc_41A508
loc_41A4D9:
    XOR eax, eax
loc_41A4DB:
    MOV rbx, [rsp+1E8h+var_40]
    XOR rbx, fs:28h
    JNZ loc_41A9FA
loc_41A4F2:
    ADD rsp, 1B8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41A508:
    LEA rcx, [rsp+1E8h+var_1B4]
    LEA rdx, [rsp+1E8h+var_1B0]
    LEA rsi, [rsp+1E8h+var_1C4]
    LEA rdi, [rsp+1E8h+var_1C0]
    CALL sub_418D50
    CMP [rsp+1E8h+var_1B0], 0
    JZ loc_41A4D9
loc_41A529:
    MOV r14, [r15+8]
    CMP dword ptr [r14], 2
    JNZ loc_41A758
loc_41A537:
    MOV edx, [r14+18h]
    MOV eax, edx
    SHR eax, 3
    ADD eax, eax
    CMP eax, [rsp+1E8h+var_1B4]
    JNZ loc_41A4D9
loc_41A548:
    CMP edx, 100h
    JNZ loc_41A4D9
loc_41A550:
    MOV esi, 28h
    MOV edi, 1
    CALL sub_40AC50
    MOV qword ptr [rax+18h], 0
    MOV r13, rax
    MOV [rax], r14
    MOV qword ptr [rax+8], 0
    MOV qword ptr [rax+10h], 0
    MOV rdx, r13
    MOV byte ptr [rax+20h], 0
    MOV rax, [r15+8]
    MOV rdi, [rsp+1E8h+var_1B0]
    MOV esi, [rax+18h]
    SHR esi, 3
    CALL sub_419360
    TEST eax, eax
    JZ loc_41A9E5
loc_41A5A0:
    MOV rax, [r15+8]
    MOV esi, [rax+18h]
    SHR esi, 3
    MOV edi, esi
    ADD rdi, [rsp+1E8h+var_1B0]
    CALL sub_410DA0
    LEA rdi, [rsp+1E8h+var_1A8]
    MOV [rsp+1E8h+var_1D8], rax
    CALL sub_4247B0
    MOV rax, [r15+8]
    MOV rsi, [rsp+1E8h+var_1B0]
    LEA rdi, [rsp+1E8h+var_1A8]
    MOV edx, [rax+18h]
    SHR edx, 3
    CALL sub_424870
    MOV rax, [r15+8]
    MOV r12d, [rax+18h]
    SHR r12d, 3
    CMP r12d, 1
    JLE loc_41AA16
loc_41A5F4:
    LEA eax, [r12-1]
    LEA r14, [rsp+1E8h+var_1B5]
    XOR r12d, r12d
    MOV dword ptr [rsp+1E8h+var_1E0], eax
    NOP dword ptr [rax]
loc_41A608:
    MOV rdi, [r15+18h]
    MOV esi, r12d
    ADD r12d, 1
    CALL sub_410FE0
    LEA rdi, [rsp+1E8h+var_1A8]
    MOV edx, 1
    MOV rsi, r14
    MOV [rsp+1E8h+var_1B5], al
    CALL sub_424870
    CMP r12d, dword ptr [rsp+1E8h+var_1E0]
    JNZ loc_41A608
loc_41A635:
    MOV rdi, [r15+18h]
    MOV esi, dword ptr [rsp+1E8h+var_1E0]
    CALL sub_410FE0
    MOV rdi, [r15+10h]
    AND eax, 7Fh
    XOR esi, esi
    MOV [rsp+1E8h+var_1B5], al
    CALL sub_411020
    LEA rdi, [rsp+1E8h+var_1A8]
    MOV rsi, r14
    MOV edx, 1
    SHL eax, 7
    OR [rsp+1E8h+var_1B5], al
    CALL sub_424870
    LEA rdi, [rsp+1E8h+var_1A8]
    MOV edx, ebp
    MOV rsi, rbx
    CALL sub_424870
    LEA rsi, [rsp+1E8h+var_88]
    LEA rdi, [rsp+1E8h+var_1A8]
    CALL sub_426250
    LEA rdi, [rsp+1E8h+var_88]
    MOV esi, 40h
    CALL sub_410DA0
    MOV rbx, rax
    MOV rax, [r15+8]
    MOV r14, [rsp+1E8h+var_1D8]
    LEA rdi, [rax+38h]
    MOV rsi, r14
    CALL sub_419980
    MOV rdi, r14
    MOV rbp, rax
    CALL sub_4108A0
    TEST rbp, rbp
    JZ loc_41A9FF
loc_41A6CC:
    LEA rdi, [r15+8]
    MOV rsi, rbx
    CALL sub_419980
    MOV rdi, rbx
    MOV r14, rax
    CALL sub_4108A0
    TEST r14, r14
    JZ loc_41AA28
loc_41A6EC:
    XOR edx, edx
    MOV rsi, r14
    MOV rdi, r13
    CALL sub_417D30
    MOV rdi, r13
    MOV r12, rax
    CALL sub_419800
    MOV rdi, r14
    CALL sub_419800
    TEST r12, r12
    JZ loc_41AA3F
loc_41A715:
    MOV rsi, [r12+8]
    MOV rdi, [rbp+8]
    XOR ebx, ebx
    CALL sub_4111B0
    TEST eax, eax
    JNZ loc_41A73E
loc_41A729:
    MOV rsi, [r12+10h]
    MOV rdi, [rbp+10h]
    XOR ebx, ebx
    CALL sub_4111B0
    TEST eax, eax
    SETZ bl
loc_41A73E:
    MOV rdi, rbp
    CALL sub_419800
    MOV rdi, r12
    CALL sub_419800
    MOV eax, ebx
    JMP loc_41A4DB
loc_41A758:
    LEA rsi, [rsp+1E8h+var_1B4]
    LEA rdi, [rsp+1E8h+var_1B0]
    CALL sub_418DC0
    TEST rax, rax
    MOV r13, rax
    JZ loc_41A4D9
loc_41A773:
    LEA rsi, [rsp+1E8h+var_1B4]
    LEA rdi, [rsp+1E8h+var_1B0]
    CALL sub_418DC0
    TEST rax, rax
    MOV r14, rax
    JZ loc_41A9D8
loc_41A78E:
    MOV rax, [r12+8]
    MOV ecx, [rax+28h]
    CMP ecx, 40h
    MOV dword ptr [rsp+1E8h+var_1D8], ecx
    JA loc_41AA4E
loc_41A7A3:
    CALL qword ptr [rax]
    MOV rcx, [r12+8]
    MOV rdi, rax
    MOV edx, ebp
    MOV rsi, rbx
    MOV [rsp+1E8h+var_1E0], rax
    CALL qword ptr [rcx+10h]
    MOV rax, [rsp+1E8h+var_1E0]
    MOV rdx, [r12+8]
    LEA rsi, [rsp+1E8h+var_88]
    MOV rdi, rax
    CALL qword ptr [rdx+18h]
    MOV rax, [r15+8]
    MOV eax, [rax]
    TEST eax, eax
    JZ loc_41A800
loc_41A7DC:
    XOR eax, eax
loc_41A7DE:
    MOV rdi, r13
    MOV dword ptr [rsp+1E8h+var_1E0], eax
    CALL sub_4108A0
    MOV rdi, r14
    CALL sub_4108A0
    MOV eax, dword ptr [rsp+1E8h+var_1E0]
    JMP loc_41A4DB
loc_41A800:
    MOV rsi, cs:off_6422D0
    MOV rdi, r13
    CALL sub_4111B0
    TEST eax, eax
    JZ loc_41A7DC
loc_41A813:
    MOV rax, [r15+8]
    MOV rdi, r13
    MOV rsi, [rax+38h]
    CALL sub_4111B0
    TEST eax, eax
    JNS loc_41A7DC
loc_41A827:
    MOV rsi, cs:off_6422D0
    MOV rdi, r14
    CALL sub_4111B0
    TEST eax, eax
    JZ loc_41A7DC
loc_41A83A:
    MOV rax, [r15+8]
    MOV rdi, r14
    MOV rsi, [rax+38h]
    CALL sub_4111B0
    TEST eax, eax
    JNS loc_41A7DC
loc_41A84E:
    MOV esi, dword ptr [rsp+1E8h+var_1D8]
    LEA rdi, [rsp+1E8h+var_88]
    CALL sub_410CC0
    MOV rbx, rax
    MOV rax, [r15+8]
    MOV rdi, [rax+38h]
    CALL sub_410F00
    MOV rdi, rbx
    MOV ebp, eax
    CALL sub_410F00
    CMP ebp, eax
    JL loc_41AAAC
loc_41A881:
    MOV rax, [r15+8]
    MOV rdi, rbx
    MOV rsi, [rax+38h]
    CALL sub_411EE0
    MOV rdi, rbx
    MOV rbp, rax
    CALL sub_4108A0
    MOV rax, [r15+8]
    MOV rdi, r14
    MOV rsi, [rax+38h]
    CALL sub_412590
    TEST rax, rax
    MOV rbx, rax
    JZ loc_41AA93
loc_41A8B8:
    MOV rax, [r15+8]
    MOV rsi, rbx
    MOV rdi, rbp
    MOV rdx, [rax+38h]
    CALL sub_4108C0
    MOV [rsp+1E8h+var_1D8], rax
    MOV r12, rax
    MOV rax, [r15+8]
    MOV rsi, rbx
    MOV rdi, r13
    MOV rdx, [rax+38h]
    CALL sub_4108C0
    MOV rdi, rbx
    MOV [rsp+1E8h+var_1E0], rax
    CALL sub_4108A0
    MOV rdi, [r15+8]
    CMP dword ptr [rdi], 0
    JNZ loc_41AA7F
loc_41A900:
    CALL sub_417810
    MOV rcx, [r15+8]
    MOV rsi, r12
    MOV edx, eax
    MOV ebx, eax
    LEA rdi, [rcx+40h]
    CALL sub_419860
    TEST rax, rax
    MOV r12, rax
    JZ loc_41AA7F
loc_41A925:
    MOV rsi, [rsp+1E8h+var_1E0]
    LEA rdi, [r15+8]
    MOV edx, ebx
    CALL sub_419860
    TEST rax, rax
    JZ loc_41AAA2
loc_41A93E:
    MOV edx, ebx
    MOV rsi, rax
    MOV rdi, r12
    MOV [rsp+1E8h+var_1D0], rax
    CALL sub_417D30
    MOV rdi, r12
    MOV rbx, rax
    CALL sub_419800
    MOV r8, [rsp+1E8h+var_1D0]
    MOV rdi, r8
    CALL sub_419800
    TEST rbx, rbx
    JZ loc_41AA77
loc_41A971:
    CMP byte ptr [rbx+20h], 0
    JZ loc_41AA67
loc_41A97B:
    MOV rdi, [rsp+1E8h+var_1D8]
    CALL sub_4108A0
    MOV rdi, [rsp+1E8h+var_1E0]
    CALL sub_4108A0
    MOV rax, [r15+8]
    MOV rdi, [rbx+8]
    MOV rsi, [rax+38h]
    CALL sub_411EE0
    MOV rdi, rbx
    MOV r12, rax
    XOR ebx, ebx
    CALL sub_419800
    MOV rsi, r12
    MOV rdi, r13
    CALL sub_4111B0
    MOV rdi, r12
    TEST eax, eax
    SETZ bl
    CALL sub_4108A0
    MOV rdi, rbp
    CALL sub_4108A0
    MOV eax, ebx
    JMP loc_41A7DE
loc_41A9D8:
    MOV rdi, r13
    CALL sub_4108A0
    JMP loc_41A4D9
loc_41A9E5:
    MOV rdi, r13
    MOV dword ptr [rsp+1E8h+var_1E0], eax
    CALL sub_419800
    MOV eax, dword ptr [rsp+1E8h+var_1E0]
    JMP loc_41A4DB
loc_41A9FA:
    CALL ___stack_chk_fail
loc_41A9FF:
    MOV rdi, r13
    CALL sub_419800
    MOV rdi, rbx
    CALL sub_4108A0
    XOR eax, eax
    JMP loc_41A4DB
loc_41AA16:
    MOV dword ptr [rsp+1E8h+var_1E0], 0
    LEA r14, [rsp+1E8h+var_1B5]
    JMP loc_41A635
loc_41AA28:
    MOV rdi, rbp
    CALL sub_419800
    MOV rdi, r13
    CALL sub_419800
    XOR eax, eax
    JMP loc_41A4DB
loc_41AA3F:
    MOV rdi, rbp
    CALL sub_419800
    XOR eax, eax
    JMP loc_41A4DB
loc_41AA4E:
    MOV ecx, offset aEcdsaVerifysig
    MOV edx, 950h
    MOV esi, offset aSsheccC
    MOV edi, offset aDigestlenSizeo
    CALL ___assert_fail
loc_41AA67:
    MOV rdi, rbx
    CALL sub_417850
    TEST eax, eax
    JNZ loc_41A97B
loc_41AA77:
    MOV rdi, rbx
    CALL sub_419800
loc_41AA7F:
    MOV rdi, [rsp+1E8h+var_1D8]
    CALL sub_4108A0
    MOV rdi, [rsp+1E8h+var_1E0]
    CALL sub_4108A0
loc_41AA93:
    MOV rdi, rbp
    CALL sub_4108A0
    XOR eax, eax
    JMP loc_41A7DE
loc_41AAA2:
    MOV rdi, r12
    CALL sub_419800
    JMP loc_41AA7F
loc_41AAAC:
    SUB eax, ebp
    MOV rdi, rbx
    MOV esi, eax
    CALL sub_411430
    MOV rdi, rbx
    MOV rbp, rax
    MOV rbx, rbp
    CALL sub_4108A0
    JMP loc_41A881
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "value": [
        "41A450",
        "41A484",
        "41A48E",
        "41A495",
        "41A4C5",
        "41A4DB",
        "41A4F2",
        "41A508",
        "41A529",
        "41A537",
        "41A548",
        "41A550",
        "41A5F4",
        "41A5A0",
        "41A5F4",
        "41A608",
        "41A635",
        "41A6EC",
        "41A6CC",
        "41A715",
        "41A758",
        "41A773",
        "41A78E",
        "41A795",
        "41A7F4",
        "41A800",
        "41A813",
        "41A827",
        "41A83A",
        "41A84E",
        "41A881"
      ]
    },
    {
      "category": "Core Logic & Operations",
      "value": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return",
        "MemoryAccess",
        "StackManipulation",
        "BlockMemoryOperations"
      ]
    },
    {
      "category": "Constants & 'Magic Numbers'",
      "value": [
        "0x5B8",
        "0x23",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0x80000000",
        "0
############
```assembly
loc_4019F0:
    JMP cs:off_642150
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "count": 1,
      "value": "loc_4019F0"
    },
    {
      "category": "Core Logic & Operations",
      "count": 1,
      "value": "JMP cs:off_642150"
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_401BC0:
    JMP cs:off_642238
```
Output:```json
{
  "signature": {
    "input_parameters_count": 0,
    "input_parameter_types": ["Integer"],
    "return_value_type": "Integer"
  },
  "core_logic_operations": [
    {
      "dominant_operation_categories": ["Arithmetic"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    }
  ],
  "constants_and_magic_numbers": [
    "0x80000000"
  ],
  "subroutine_call_targets": [
    "cs:off_642238"
  ],
  "control_flow": true
}
```
############
```assembly
loc_403C50:
    CMP esi, 6
    JZ loc_403C60
loc_403C55:
    REP 
loc_403C60:
    PUSH r12
    PUSH rbp
    MOV r12d, edx
    PUSH rbx
    MOV eax, [rdi]
    MOV ebp, ecx
    MOV rbx, rdi
    CMP edx, eax
    JLE loc_403CB0
loc_403C72:
    TEST eax, eax
    JS loc_403C87
loc_403C76:
    MOV rsi, cs:stderr
    MOV edi, 0Ah
    CALL _fputc
loc_403C87:
    TEST ebp, ebp
    MOV [rbx], r12d
    JS loc_403CE0
loc_403C8E:
    LEA eax, [rbp-1]
    CMP ebp, eax
    MOV [rbx+4], eax
    JG loc_403CB8
loc_403C98:
    POP rbx
    POP rbp
    POP r12
    MOV rdi, cs:stdout
    JMP _fflush
loc_403CB0:
    MOV eax, [rdi+4]
    JMP loc_403CD2
loc_403CB8:
    MOV rsi, cs:stdout
    MOV edi, 2Bh
    CALL _fputc
    MOV eax, [rbx+4]
    ADD eax, 1
    MOV [rbx+4], eax
loc_403CD2:
    CMP ebp, eax
    JG loc_403CB8
loc_403CD6:
    JMP loc_403C98
loc_403CE0:
    MOV [rbx+4], ebp
    JMP loc_403C98
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "categories": ["Integer"]
    },
    {
      "name": "Data Flow",
      "count": 1,
      "categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"]
    },
    {
      "name": "Core Logic & Operations",
      "count": 4,
      "categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement"
      ]
    },
    {
      "name": "Loop Indicators",
      "count": 2,
      "categories": ["ConditionalBranching", "UnconditionalJump"]
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "count": 1,
      "categories": ["Structure/Object"]
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "count": 2,
      "categories": ["ConditionalBranching", "UnconditionalJump"]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "count": 2,
      "categories": ["Integer", "Floating-Point"]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 1,
      "categories": ["Conditional", "Global State", "MemoryAllocation/Deallocation", "I/O Operations"]
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "count": 1,
      "categories": ["CRC32 Calculation", "String Length Calculation", "Memcpy", "XOR Cipher"]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_401748:
    SUB rsp, 8
    MOV rax, cs:__gmon_start___ptr
    TEST rax, rax
    JZ loc_40175D
loc_401758:
    CALL __gmon_start__
loc_40175D:
    ADD rsp, 8
    RETN 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "parameters": [
        {
          "name": "Input Parameter Count",
          "type": "Integer",
          "description": "The number of distinct conceptual inputs the function likely takes."
        },
        {
          "name": "Input Parameter Types",
          "type": "Array of Strings",
          "description": "A list of abstract data type categories representing the inputs."
        },
        {
          "name": "Return Value Type",
          "type": "String",
          "description": "The abstract data type of the value returned, if any."
        }
      ]
    },
    {
      "name": "Core Logic & Operations",
      "parameters": [
        {
          "name": "Dominant Operation Categories",
          "type": "Array of Strings",
          "description": "Identify the **1, 2, or 3 most dominant** types of operations performed by observing instruction mnemonics and their common effects."
        },
        {
          "name": "Loop Indicators",
          "type": "Boolean",
          "description": "`true` if common patterns indicating loops are observed (e.g., a conditional branch instruction targeting an earlier instruction's address, or a recognized architectural loop instruction). `false` otherwise."
        },
        {
          "name": "Number of Distinct Subroutine Call Targets",
          "type": "Integer",
          "description": "Count of unique target addresses/offsets of instructions that transfer control to another subroutine."
        },
        {
          "name": "Use of Indexed Addressing Modes",
          "type": "Boolean",
          "description": "`true` if instructions appear to access memory using a base address combined with an offset derived from another register (like `[base_reg + index_reg * scale + displacement]`) or similar complex memory addressing. `false` otherwise."
        }
      ]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "parameters": [
        {
          "name": "Presence of Notable Integer Constants",
          "type": "Array of Hexadecimal Strings",
          "description": "A list of prominent integer literals (immediate values) used in operations, **represented as hexadecimal strings (e.g., \"0x5B8\", \"0x23\")**. Focus on values that are *not* trivial (0, 1, -1), common loop bounds, or typical stack adjustments."
        },
        {
          "name": "Presence of Notable Floating-Point Constants",
          "type": "Array of Floats/Doubles",
          "description": "A list of prominent floating-point literals used. (Heuristic: Look for unusual or algorithm-specific floating-point values, even if represented as integers in assembly)."
        },
        {
          "name": "Count of Distinct Immediate Values",
          "type": "Integer",
          "description": "Total count of unique immediate (literal) values used directly in instructions. Exclude very common small values (0, 1, -1) if they primarily serve basic arithmetic/comparison."
        }
      ]
    },
    {
      "name": "Side Effects & Interactions",
      "parameters": [
        {
          "name": "Likely Modifies Input Parameters",
          "type": "Boolean",
          "description": "`true` if there are instructions writing to memory addresses derived from what are inferred as input parameters (e.g., `[inferred_input_pointer + offset] = value`). `false` otherwise."
        },
        {
          "name": "Likely Modifies Global State (Boolean)",
          "type": "Boolean",
          "description": "`true` if there are instructions writing to fixed, non-stack-relative memory addresses that are not derived from input parameters. `false` otherwise."
        },
        {
          "name": "Likely Performs Memory Allocation/Deallocation (Boolean)",
          "type": "Boolean",
          "description": "`true` if common patterns associated with dynamic memory management are observed."
        },
        {
          "name": "Likely Performs I/O Operations (Boolean)",
          "type": "Boolean",
          "description": "`true` if common patterns associated with I/O (e.g., console output, file operations) are observed."
        },
        {
          "name": "Likely Performs Block Memory Operations (Boolean)",
          "type": "Boolean",
          "description": "`true` if patterns indicative of copying or setting large blocks of memory are observed (e.g., a loop with data movement instructions and indexed addressing, or calls to known block operation subroutines). `false` otherwise. (Heuristic)"
        }
      ]
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "parameters": [
        {
          "name": "Inferred Algorithm (String)",
          "type": "String",
          "description":
############
```assembly
loc_429DA0:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    CALL _getuid
    MOV ebp, eax
    CALL _getlogin
    MOV rbx, rax
    CALL _setpwent
    TEST rbx, rbx
    JZ loc_429DD1
loc_429DBF:
    MOV rdi, rbx
    CALL _getpwnam
    TEST rax, rax
    JZ loc_429DD1
loc_429DCC:
    CMP ebp, [rax+10h]
    JZ loc_429DE0
loc_429DD1:
    MOV edi, ebp
    CALL _getpwuid
    TEST rax, rax
    JZ loc_429DF8
loc_429DDD:
    MOV rbx, [rax]
loc_429DE0:
    CALL _endpwent
    ADD rsp, 8
    MOV rdi, rbx
    POP rbx
    POP rbp
    JMP sub_40ACA0
loc_429DF8:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "features": [
    {
      "input_parameter_count": 2,
      "input_parameter_types": ["Integer", "Pointer"],
      "return_value_type": "None",
      "dominant_operation_categories": ["ConditionalBranching", "UnconditionalJump"]
    },
    {
      "dominant_operation_categories": ["DataMovement", "ConditionalBranching"],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    {
      "presence_of_notable_integer_constants": ["0xDEADBEEF", "0x80000000"],
      "presence_of_notable_floats_doubles": ["0.12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456
############
```assembly
loc_642C80:
    EXTRN 
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "count": 1,
      "categories": ["Integer"]
    },
    {
      "name": "Core Logic & Operations",
      "count": 3,
      "categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison"
      ]
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "count": 1,
      "categories": ["Integer", "Floating-Point"]
    },
    {
      "name": "Side Effects & Interactions",
      "count": 3,
      "categories": [
        "Likely Modifies Input Parameters",
        "Likely Modifies Global State",
        "Likely Performs Memory Allocation/Deallocation"
      ]
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "count": 1,
      "categories": ["String"]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_403C50:
    CMP esi, 6
    JZ loc_403C60
loc_403C55:
    REP 
loc_403C60:
    PUSH r12
    PUSH rbp
    MOV r12d, edx
    PUSH rbx
    MOV eax, [rdi]
    MOV ebp, ecx
    MOV rbx, rdi
    CMP edx, eax
    JLE loc_403CB0
loc_403C72:
    TEST eax, eax
    JS loc_403C87
loc_403C76:
    MOV rsi, cs:stderr
    MOV edi, 0Ah
    CALL _fputc
loc_403C87:
    TEST ebp, ebp
    MOV [rbx], r12d
    JS loc_403CE0
loc_403C8E:
    LEA eax, [rbp-1]
    CMP ebp, eax
    MOV [rbx+4], eax
    JG loc_403CB8
loc_403C98:
    POP rbx
    POP rbp
    POP r12
    MOV rdi, cs:stdout
    JMP _fflush
loc_403CB0:
    MOV eax, [rdi+4]
    JMP loc_403CD2
loc_403CB8:
    MOV rsi, cs:stdout
    MOV edi, 2Bh
    CALL _fputc
    MOV eax, [rbx+4]
    ADD eax, 1
    MOV [rbx+4], eax
loc_403CD2:
    CMP ebp, eax
    JG loc_403CB8
loc_403CD6:
    JMP loc_403C98
loc_403CE0:
    MOV [rbx+4], ebp
    JMP loc_403C98
```
Output:```json
{
  "features": {
    "inputParameterCount": 1,
    "inputParameterTypes": ["Integer"],
    "returnValueType": "Integer",
    "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison"],
    "loopIndicators": false,
    "numberOfDistinctSubroutineCallTargets": 1,
    "useIndexedAddressingModes": false,
    "constantsAndMagicNumbers": ["0x5B8", "0x23"],
    "sideEffects": true,
    "interactions": false,
    "inferredAlgorithm": "CRC32 Calculation"
  }
}
```
############
```assembly
loc_404C20:
    PUSH rbp
    PUSH rbx
    SUB rsp, 28h
    MOV rax, fs:28h
    MOV [rsp+38h+var_20], rax
    XOR eax, eax
    MOVSXD rax, esi
    CMP ds:dword_42D6E0[rax*4], 2
    JNZ loc_404C98
loc_404C43:
    CMP ds:dword_42D400[rax*4], 2
    JNZ loc_404CB6
loc_404C4D:
    MOV rbp, rdi
    MOV rdi, [rdi]
    MOV [rsp+38h+var_38], esi
    MOV [rsp+38h+var_30], rdx
    MOV rsi, rsp
    XOR edx, edx
    CALL sub_428A20
    TEST rax, rax
    MOV rbx, rax
    JZ loc_404C81
loc_404C6D:
    MOV rdi, [rbp+0]
    MOV rsi, rax
    CALL sub_428AA0
    MOV rdi, rbx
    CALL sub_404010
loc_404C81:
    MOV rax, [rsp+38h+var_20]
    XOR rax, fs:28h
    JNZ loc_404CB1
loc_404C91:
    ADD rsp, 28h
    POP rbx
    POP rbp
    RETN 
loc_404C98:
    MOV ecx, offset aConfDelStrStr
    MOV edx, 1B7h
    MOV esi, offset aConfC
    MOV edi, offset aSubkeytypesPri_1
    CALL ___assert_fail
loc_404CB1:
    CALL ___stack_chk_fail
loc_404CB6:
    MOV ecx, offset aConfDelStrStr
    MOV edx, 1B8h
    MOV esi, offset aConfC
    MOV edi, offset aValuetypesPrim_0
    CALL ___assert_fail
```
Output:```json
{
  "input_parameters": [
    {
      "name": "aConfDelStrStr",
      "type": "String",
      "count": 1,
      "magic_number": "1B7h"
    },
    {
      "name": "aConfC",
      "type": "String",
      "count": 1,
      "magic_number": "1B8h"
    }
  ],
  "dominant_operation_categories": [
    "Arithmetic",
    "Bitwise",
    "Comparison",
    "DataMovement",
    "ConditionalBranching",
    "SubroutineCall",
    "Return",
    "MemoryAccess",
    "StackManipulation"
  ],
  "loop_indicators": [
    true,
    false,
    true,
    false,
    false,
    true,
    false,
    false
  ],
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "constants_and_magic_numbers": [
    "0x5B8",
    "0x23"
  ],
  "count_of_distinct_immediate_values": 0,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_or_deallocation": false,
  "likely_performs_i_o_operations": false,
  "likely_performs_block_memory_operations": false,
  "inferred_algorithm": "Generic Control/Data Flow"
}
```
############
```assembly
loc_420B50:
    MOV eax, cs:dword_642AB0
    MOV edx, 4B0h
    PUSH r12
    PUSH rbp
    MOV ebp, esi
    PUSH rbx
    MOV rbx, rdi
    SUB edx, eax
    CMP esi, edx
    JL loc_420BDA
loc_420B6A:
    TEST edx, edx
    MOV r12d, 4B0h
    JLE loc_420C15
loc_420B78:
    NOP dword ptr [rax+rax+00000000h]
loc_420B80:
    SUB edx, 1
    LEA rbx, [rdi+rdx+1]
    NOP dword ptr [rax+rax+00000000h]
loc_420B90:
    ADD rdi, 1
    MOVSXD rdx, eax
    MOVZX ecx, byte ptr [rdi-1]
    XOR byte ptr ds:qword_642600[rdx], cl
    ADD eax, 1
    CMP rbx, rdi
    JNZ loc_420B90
loc_420BA9:
    MOV eax, cs:dword_642B0C
    TEST eax, eax
    JZ loc_420C0E
loc_420BB3:
    MOV eax, r12d
    SUB eax, cs:dword_642AB0
    MOV edx, 4B0h
    MOV cs:dword_642AB0, 0
    MOV rdi, rbx
    SUB ebp, eax
    XOR eax, eax
    CMP ebp, 4AFh
    JG loc_420B80
loc_420BDA:
    TEST ebp, ebp
    JLE loc_420C1A
loc_420BDE:
    LEA ecx, [rbp-1]
    XOR eax, eax
    ADD rcx, 1
    NOP word ptr [rax+rax+00000000h]
loc_420BF0:
    MOVZX edx, byte ptr [rbx+rax]
    XOR byte ptr ds:qword_642600[rax], dl
    ADD rax, 1
    CMP rcx, rax
    JNZ loc_420BF0
loc_420C03:
    POP rbx
    MOV cs:dword_642AB0, ebp
    POP rbp
    POP r12
    RETN 
loc_420C0E:
    CALL sub_4209C0
    JMP loc_420BB3
loc_420C15:
    MOV rbx, rdi
    JMP loc_420BA9
loc_420C1A:
    XOR ebp, ebp
    JMP loc_420C03
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "count": 1,
      "type": "Integer",
      "description": "The function has exactly one distinct parameter."
    },
    {
      "category": "Data Flow",
      "count": 2,
      "type": "Array of Strings",
      "description": "The function has two distinct data flow paths: one for input parameters and another for return values."
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_40DC20:
    PUSH rbp
    PUSH rbx
    MOV ebp, edx
    MOV rbx, rsi
    MOV edx, 20h
    MOV rsi, rdi
    SUB rsp, 408h
    MOV rdi, rsp
    MOV rax, fs:28h
    MOV [rsp+418h+var_20], rax
    XOR eax, eax
    CALL sub_40D980
    MOV rdx, rsp
    MOV esi, ebp
    MOV rdi, rbx
    MOV [rsp+418h+var_48], 0
    MOV [rsp+418h+var_40], 0
    MOV [rsp+418h+var_38], 0
    MOV [rsp+418h+var_30], 0
    CALL sub_40D590
    MOV esi, 3F8h
    MOV rdi, rsp
    CALL sub_40B660
    MOV rax, [rsp+418h+var_20]
    XOR rax, fs:28h
    JNZ loc_40DCB8
loc_40DCAE:
    ADD rsp, 408h
    POP rbx
    POP rbp
    RETN 
loc_40DCB8:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "categories": ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object", "Collection"],
      "values": [
        20,
        3F8,
        40DC20,
        40DCB8
      ]
    },
    {
      "name": "Core Logic & Operations",
      "categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "values": [
        "add",
        "subtract",
        "multiply",
        "divide",
        "increment",
        "decrement",
        "or",
        "xor",
        "not",
        "shift",
        "rotate",
        "compare",
        "copying data between registers/memory",
        "conditional branch",
        "subroutine call",
        "return",
        "memory access",
        "stack manipulation"
      ]
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "categories": ["Integer", "Floating-Point", "String"],
      "values": [
        "0x5B8",
        "0x23",
        "0xDEADBEEF",
        "0x80000000",
        "0xFFFF0000",
        "0xFF",
        "0xDEADBEEF",
        "0x80000000",
        "0xFFFF0000",
        "0xFF"
      ]
    },
    {
      "name": "Side Effects & Interactions",
      "categories": ["Likely Modifies Input Parameters", "Likely Modifies Global State", "Likely Performs Memory Allocation/Deallocation", "Likely Performs I/O Operations", "Likely Performs Block Memory Operations"],
      "values": [
        false,
        false,
        false,
        true,
        false,
        false,
        false,
        true,
        false,
        false
      ]
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "categories": ["CRC32 Calculation", "String Length Calculation", "Memcpy", "XOR Cipher"],
      "values": [
        "CRC32 Calculation",
        "String Length Calculation",
        "Memcpy",
        "XOR Cipher"
      ]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_642BE0:
    EXTRN 
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "count": 1,
      "values": ["loc_642BE0"]
    },
    {
      "category": "Core Logic & Operations",
      "count": 1,
      "values": ["EXTRN"]
    }
  ],
  "algorithm": "Undetermined"
}
```
############
```assembly
loc_40D580:
    JMP sub_40B5E0
```
Output:```json
{
  "signature": {
    "input_parameter_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "Integer"
  },
  "core_logic": {
    "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison"],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 1,
    "use_of_indexed_addressing_modes": true
  },
  "constants_and_magic_numbers": [
    "0x23",
    "0xDEADBEEF"
  ],
  "side_effects": {
    "likely_modifies_input_parameters": false,
    "likely_modifies_global_state": false,
    "likely_performs_memory_allocation/deallocation": false,
    "likely Performs I/O Operations": false
  },
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_401C50:
    JMP cs:off_642280
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature",
      "description": "The function `loc_401C50` has 1 parameter and 0 return value."
    },
    {
      "name": "Core Logic & Operations",
      "description": "The function performs an arithmetic operation on two integers and returns the result."
    },
    {
      "name": "Loop Indicators",
      "description": "The function does not contain any loops."
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "description": "There is only one unique target address/offset."
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "description": "The function uses base addresses and offsets derived from other registers."
    },
    {
      "name": "Constants & 'Magic Numbers'",
      "description": "The function contains several notable integer constants and floating-point constants."
    },
    {
      "name": "Side Effects & Interactions",
      "description": "The function modifies input parameters but does not perform any memory allocations/deallocations."
    },
    {
      "name": "Inferred Algorithm",
      "description": "The function implements the CRC32 calculation."
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_420C20:
    MOV edx, cs:dword_6425E0
    TEST edx, edx
    JZ locret_420D27
loc_420C2E:
    PUSH r13
    PUSH r12
    MOV edx, 40h
    PUSH rbp
    PUSH rbx
    XOR r13d, r13d
    MOV rbp, rdi
    MOV ebx, esi
    MOV r12d, 40h
    SUB rsp, 8
    MOVSXD rax, cs:dword_642B08
    SUB edx, eax
    LEA rdi, unk_642AC8[rax]
    CMP esi, edx
    JL loc_420D0C
loc_420C63:
    NOP dword ptr [rax+rax+00h]
loc_420C68:
    LEA rdi, unk_642AC8[rax]
    MOV rsi, rbp
    MOVSXD rdx, edx
    CALL _memcpy
    MOV eax, r12d
    SUB eax, cs:dword_642B08
    MOV edi, offset qword_642AB4
    MOV esi, offset unk_642AC8
    MOVSXD rdx, eax
    SUB ebx, eax
    ADD rbp, rdx
    CALL sub_4267C0
    MOVSXD rax, cs:dword_642AB0
    MOV edx, offset qword_642AB4
    MOV edi, offset unk_642AC8
    NOP dword ptr [rax+rax+00h]
loc_420CB0:
    MOVZX ecx, byte ptr ds:qword_642600[rax]
    LEA esi, [rax+1]
    XOR cl, [rdx]
    CMP esi, 4AFh
    MOV byte ptr ds:qword_642600[rax], cl
    MOVSXD rax, esi
    CMOVG rax, r13
    ADD rdx, 1
    CMP rdi, rdx
    JNZ loc_420CB0
loc_420CD8:
    CMP eax, 13h
    MOV cs:dword_642AB0, eax
    JG loc_420CED
loc_420CE3:
    MOV eax, cs:dword_642B0C
    TEST eax, eax
    JZ loc_420D29
loc_420CED:
    XOR eax, eax
    CMP ebx, 3Fh
    MOV cs:dword_642B08, 0
    MOV edx, 40h
    JG loc_420C68
loc_420D07:
    MOV edi, offset unk_642AC8
loc_420D0C:
    MOVSXD rdx, ebx
    MOV rsi, rbp
    CALL _memcpy
    ADD cs:dword_642B08, ebx
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
loc_420D27:
    REP 
loc_420D29:
    CALL sub_4209C0
    JMP loc_420CED
```
Output:```json
{
  "features": {
    "basic_signature": {
      "input_params_count": 1,
      "input_param_types": ["Integer"],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return",
        "MemoryAccess",
        "StackManipulation"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": [
      "0x5B8",
      "0x23",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0xFFFFFFFF0000",
      "0x80000000",
      "0xFFFF0000",
      "0xFF",
      "0xDEADBEEF",
      "0x80000000",
      "0
############
```assembly
loc_642C00:
    EXTRN 
```
Output:```json
{
  "signature": {
    "input_parameter_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "None"
  },
  "core_logic_operations": [
    {
      "dominant_operation_categories": ["Arithmetic"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    }
  ],
  "constants_and_magic_numbers": [],
  "subroutine_call_targets": [],
  "control_flow": {
    "likely_modifies_input_parameters": true,
    "likely_modifies_global_state": false,
    "likely_performs_memory_allocation_or_deallocation": false,
    "likely_performs_io_operations": false,
    "likely_performs_block_memory_operations": false
  },
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_426E50:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 50h
    MOV rax, fs:28h
    MOV [rsp+78h+var_30], rax
    XOR eax, eax
    MOV eax, [rdi+54h]
    CMP eax, 37h
    JLE loc_426F78
loc_426E7E:
    MOV r14d, 78h
    SUB r14d, eax
loc_426E87:
    MOV r12d, [rbx+5Ch]
    MOV eax, [rbx+58h]
    MOV ecx, 40h
    MOVSXD rdx, r14d
    XOR esi, esi
    MOV rdi, rsp
    LEA r13d, ds:0[rax*8]
    MOV eax, r12d
    SHL r12d, 3
    SHR eax, 1Dh
    OR r13d, eax
    CALL ___memset_chk
    MOV edx, r14d
    MOV rsi, rsp
    MOV rdi, rbx
    MOV [rsp+78h+var_78], 80h
    CALL sub_426A10
    MOV eax, r13d
    MOV edx, 8
    MOV rsi, rsp
    SHR eax, 18h
    MOV rdi, rbx
    MOV [rsp+78h+var_75], r13b
    MOV [rsp+78h+var_78], al
    MOV eax, r13d
    MOV [rsp+78h+var_71], r12b
    SHR eax, 10h
    MOV [rsp+78h+var_77], al
    MOV eax, r13d
    SHR eax, 8
    MOV [rsp+78h+var_76], al
    MOV eax, r12d
    SHR eax, 18h
    MOV [rsp+78h+var_74], al
    MOV eax, r12d
    SHR eax, 10h
    MOV [rsp+78h+var_73], al
    MOV eax, r12d
    SHR eax, 8
    MOV [rsp+78h+var_72], al
    CALL sub_426A10
    LEA rsi, [rbp+1]
    LEA rdx, [rbx+14h]
    MOV rdi, rbx
loc_426F27:
    MOV eax, [rdi]
    ADD rdi, 4
    ADD rsi, 4
    SHR eax, 18h
    MOV [rsi-5], al
    MOV eax, [rdi-4]
    SHR eax, 10h
    MOV [rsi-4], al
    MOV eax, [rdi-4]
    SHR eax, 8
    MOV [rsi-3], al
    MOV eax, [rdi-4]
    MOV [rsi-2], al
    CMP rdi, rdx
    JNZ loc_426F27
loc_426F54:
    MOV rax, [rsp+78h+var_30]
    XOR rax, fs:28h
    JNZ loc_426F86
loc_426F64:
    ADD rsp, 50h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_426F78:
    MOV r14d, 38h
    SUB r14d, eax
    JMP loc_426E87
loc_426F86:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature",
      "parameters": [
        1,
        ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object", "Collection"],
        ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
        ["Integer", "Pointer", "Boolean", "FloatingPoint", "String", "Struct/Object", "None"]
      ]
    },
    {
      "category": "Core Logic & Operations",
      "parameters": [
        ["DominantOperationCategories", ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"]],
        ["LoopIndicators", ["true", "false"]],
        ["Number of Distinct Subroutine Call Targets", 1],
        ["Use of Indexed Addressing Modes", "true"]
      ]
    },
    {
      "category": "Constants & \"Magic Numbers\"",
      "parameters": [
        ["PresenceOfNotableIntegerConstants", ["0x5B8", "0x23"]],
        ["PresenceOfNotableFloatingPointConstants", ["0xDEADBEEF", "0x80000000"]],
        ["CountOfDistinctImmediateValues", 4]
      ]
    },
    {
      "category": "Side Effects & Interactions",
      "parameters": [
        ["LikelyModifiesInputParameters", "true"],
        ["LikelyModifiesGlobalState", "true"],
        ["LikelyPerformsMemoryAllocation/Deallocation", "true"],
        ["LikelyPerformI/OOperations", "true"],
        ["LikelyPerformsBlockMemoryOperations", "true"]
      ]
    },
    {
      "category": "Inferred Algorithm (Conditional)",
      "parameters": [
        ["InferredAlgorithm", "CRC32 Calculation"]
      ]
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_414810:

loc_414AA0:
    PUSH r12
    PUSH rbp
    MOV r12d, esi
    PUSH rbx
    MOV rbx, rdx
    MOV rbp, rdi
    CALL sub_414810
    LEA rdx, [rbx+88h]
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_414910
    LEA rdx, [rbx+110h]
    MOV esi, r12d
    MOV rdi, rbp
    POP rbx
    POP rbp
    POP r12
    JMP sub_414810
```
Output:```json
{
  "features": {
    "BasicSignatureAndDataFlow": {
      "inputParametersCount": 2,
      "inputParameterTypes": ["Integer", "Integer"],
      "returnValueType": "Integer"
    },
    "CoreLogicAndOperations": {
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "loopIndicators": false,
      "numberOfDistinctSubroutineCallTargets": 1,
      "useOfIndexedAddressingModes": true,
      "constantsAndMagicNumbers": [
        "0x5B8",
        "0x23"
      ],
      "sideEffects": {
        "likelyModifiesInputParameters": false,
        "likelyModifiesGlobalState": false,
        "likelyPerformsMemoryAllocation/Deallocation": true,
        "likelyPerformsI/OOperations": false,
        "likelyPerformBlockMemoryOperations": false
      },
      "inferredAlgorithm": "CRC32 Calculation"
    }
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_401850:
    JMP cs:off_642080
```
Output:```json
{
  "features": [
    {
      "inputParametersCount": 1,
      "inputParameterTypes": ["Integer"],
      "returnValueType": "Integer",
      "dominantOperationCategories": ["Arithmetic", "Comparison"],
      "loopIndicators": false,
      "numberDistinctSubroutineCallTargets": 1,
      "useOfIndexedAddressingModes": false,
      "constantsAndMagicNumbers": ["0x12345678", "0xDEF012345"],
      "sideEffects": true,
      "interactions": false,
      "inferredAlgorithm": "CRC32 Calculation"
    }
  ]
}
```
############
```assembly
loc_4017E0:
    JMP cs:off_642048
```
Output:```json
{
  "input_parameters_count": 1,
  "input_parameter_types": ["Integer"],
  "return_value_type": "Integer",
  "dominant_operation_categories": ["Arithmetic", "Comparison"],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": false,
  "presence_of_notable_integer_constants": ["0x5B8"],
  "presence_of_notable_floats_doubles": ["0x23"],
  "count_of_distinct_immediate_values": 1,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_i_o_operations": true,
  "likely_performs_block_memory_operations": true,
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_429BB0:
    SUB rsp, 28h
    MOV edi, 1
    MOV rsi, rsp
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    CALL _clock_gettime
    TEST eax, eax
    JNZ loc_429C20
loc_429BD5:
    MOV rcx, [rsp+28h+var_20]
    MOV rdx, 431BDE82D7B634DBh
    IMUL rsi, [rsp+28h+var_28], 3E8h
    MOV rax, rcx
    SAR rcx, 3Fh
    IMUL rdx
    SAR rdx, 12h
    SUB rdx, rcx
    LEA rax, [rsi+rdx]
loc_429C01:
    MOV rdi, [rsp+28h+var_10]
    XOR rdi, fs:28h
    JNZ loc_429C58
loc_429C11:
    ADD rsp, 28h
    RETN 
loc_429C20:
    XOR esi, esi
    MOV rdi, rsp
    CALL _gettimeofday
    MOV rcx, [rsp+28h+var_20]
    MOV rdx, 20C49BA5E353F7CFh
    IMUL rsi, [rsp+28h+var_28], 3E8h
    MOV rax, rcx
    SAR rcx, 3Fh
    IMUL rdx
    SAR rdx, 7
    SUB rdx, rcx
    LEA rax, [rsi+rdx]
    JMP loc_429C01
loc_429C58:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "category": "Basic Signature & Data Flow",
      "inputParametersCount": 2,
      "inputParameterTypes": ["Integer", "Pointer"],
      "returnValueType": "Integer"
    },
    {
      "category": "Core Logic & Operations",
      "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
      "loopIndicators": true,
      "numberDistinctSubroutineCallTargets": 1,
      "useOfIndexedAddressingModes": false
    },
    {
      "category": "Constants & 'Magic Numbers'",
      "presenceOfNotableIntegerConstants": ["0x5B8", "0x23"],
      "presenceOfNotableFloatingPointConstants": ["0xDEADBEEF", "0x80000000"],
      "countDistinctImmediateValues": 2
    },
    {
      "category": "Side Effects & Interactions",
      "likelyModifiesInputParameters": true,
      "likelyModifiesGlobalState": true,
      "likelyPerformsMemoryAllocation/Deallocation": true,
      "likelyPerformI/OOperations": true,
      "likelyPerformsBlockMemoryOperations": true
    },
    {
      "category": "Inferred Algorithm (Conditional)",
      "inferredAlgorithm": "CRC32 Calculation"
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_4073D0:

```
Output:{
  "inputParameters": [
    {
      "name": "arg1",
      "type": "Integer"
    },
    {
      "name": "arg2",
      "type": "Pointer"
    }
  ],
  "returnType": "Integer",
  "dominantOperationCategories": [
    "Arithmetic",
    "Comparison",
    "DataMovement"
  ],
  "loopIndicators": false,
  "numberOfDistinctSubroutineCallTargets": 0,
  "useOfIndexedAddressingModes": true,
  "constantsAndMagicNumbers": [
    "0x5B8",
    "0x23",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x800
############
```assembly
loc_642DB8:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature": {
      "input_param_count": 0,
      "input_parameter_types": ["Integer"],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return", "MemoryAccess", "StackManipulation"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false,
      "presence_of_notable_integer_constants": ["0x5B8", "0x23"],
      "presence_of_notable_floats_doubles": ["0xDEADBEEF", "0x80000000"],
      "count_of_distinct_immediate_values": 0
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": ["0xDEADBEEF", "0x80000000"],
      "presence_of_notable_floats_doubles": ["0xDEADBEEF", "0x80000000"],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely Performs Memory Allocation/Deallocation": false,
      "likely Performs I/O Operations": false
    },
    "inferred_algorithm": "Undetermined"
  }
}
```
############
```assembly
loc_414834:
    TEST esi, esi
    MOV r12d, esi
    MOV rbp, rdx
    MOV ecx, [rdx+80h]
    MOV eax, [rdx+84h]
    JZ loc_4148B3
loc_41484A:
    MOV r13, rdi
    MOV rbx, rdi
loc_414850:
    MOV esi, [rbx]
    MOV edx, [rbx+4]
    MOV rdi, rsp
    ADD rbx, 8
    BSWAP esi
    BSWAP edx
    XOR edx, eax
    XOR esi, ecx
    MOV rcx, rbp
    CALL sub_4132A0
    MOV ecx, [rsp+38h+var_38]
    MOV eax, [rsp+38h+var_34]
    MOV edx, ecx
    MOV [rbx-5], cl
    MOV [rbx-1], al
    SHR edx, 18h
    MOV [rbx-8], dl
    MOV edx, ecx
    SHR edx, 10h
    MOV [rbx-7], dl
    MOV edx, ecx
    SHR edx, 8
    MOV [rbx-6], dl
    MOV edx, eax
    SHR edx, 18h
    MOV [rbx-4], dl
    MOV edx, eax
    SHR edx, 10h
    MOV [rbx-3], dl
    MOV edx, eax
    SHR edx, 8
    MOV [rbx-2], dl
    MOV edx, ebx
    SUB edx, r13d
    CMP r12d, edx
    JA loc_414850
loc_4148B3:
    MOV [rbp+84h], eax
    MOV [rbp+80h], ecx
    MOV rax, [rsp+38h+var_30]
    XOR rax, fs:28h
    JNZ loc_4148F3
loc_4148CF:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4148DA:
    MOV ecx, offset aDesCbcEncrypt
    MOV edx, 261h
    MOV esi, offset aSshdesC
    MOV edi, offset aLen70
    CALL ___assert_fail
loc_4148F3:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "input_parameters_count": 1,
    "input_parameter_types": [
      "Integer"
    ],
    "return_value_type": "Integer"
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_642D40:
    EXTRN 
```
Output:```json
{
  "signature": "loc_642D40",
  "dataFlow": [
    {
      "operation": "EXTRN",
      "categories": ["Function Call"],
      "targetAddress": 642D40
    }
  ],
  "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall"],
  "constantsAndMagicNumbers": [
    "0x01000000",
    "0x12345678"
  ],
  "subroutineCallTargets": true,
  "controlFlow": "ConditionalBranching"
}
```
############
```assembly
loc_42B000:
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 20h
    MOV [rsp+28h+var_28], rdi
    MOV rdi, cs:qword_642B88
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_42B058
loc_42B028:
    XOR edx, edx
    MOV rsi, rsp
    CALL sub_428A20
    TEST rax, rax
    JZ loc_42B058
loc_42B037:
    MOV rax, [rax+8]
loc_42B03B:
    MOV rcx, [rsp+28h+var_10]
    XOR rcx, fs:28h
    JNZ loc_42B062
loc_42B04B:
    ADD rsp, 20h
    POP rbx
    RETN 
loc_42B058:
    MOV rdi, rbx
    CALL sub_403F20
    JMP loc_42B03B
loc_42B062:
    CALL ___stack_chk_fail
```
Output:```json
{
  "basic_signature": {
    "input_parameters_count": 2,
    "input_parameter_types": [
      "Integer",
      "Pointer"
    ],
    "return_value_type": "None"
  },
  "core_logic_and_operations": {
    "dominant_operation_categories": [
      "Arithmetic",
      "Bitwise",
      "Comparison",
      "DataMovement",
      "ConditionalBranching",
      "SubroutineCall",
      "Return"
    ],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 1,
    "use_of_indexed_addressing_modes": false
  },
  "constants_and_magic_numbers": [
    "0x80000000",
    "0x0x5B8",
    "0x0x642B88",
    "0x0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "0x28",
    "
############
```assembly
loc_642BF0:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": ["Arithmetic"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": [
      "0x23"
    ],
    "count_of_distinct_immediate_values": 1,
    "likely_modifies_input_parameters": true,
    "likely_modifies_global_state": false,
    "likely_performs_memory_allocation_or_deallocation": false,
    "likely_performs_i_o_operations": false,
    "likely_performs_block_memory_operations": false
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_642DF8:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature": {
      "input_param_count": 1,
      "input_param_types": ["Integer"],
      "return_value_type": "None"
    },
    "core_logic": {
      "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true,
      "constants_and_magic_numbers": ["0x5B8", "0x23"],
      "side_effects": {
        "likely_modifies_input_parameters": false,
        "likely_modifies_global_state": false,
        "likely_performs_memory_allocation/deallocation": false,
        "likely Performs I/O Operations": false,
        "likely Performs Block Memory Operations": false
      }
    },
    "inferred_algorithm": "CRC32 Calculation"
  }
}
```
############
```assembly
loc_41B0C0:
    SUB rsp, 8
    MOV rax, [rdi+20h]
    CALL qword ptr [rax]
    MOV rax, [rax+10h]
    ADD rsp, 8
    RETN 
```
Output:```json
{
  "inputParameters": [
    "int",
    "void",
    "int"
  ],
  "inputParameterTypes": [
    "Integer",
    "Void",
    "Integer"
  ],
  "returnValue": "Integer",
  "dominantOperationCategories": [
    "Arithmetic",
    "Bitwise",
    "Comparison",
    "DataMovement",
    "ConditionalBranching",
    "SubroutineCall",
    "Return",
    "MemoryAccess",
    "StackManipulation"
  ],
  "loopIndicators": true,
  "numberOfDistinctSubroutineCallTargets": 1,
  "useOfIndexedAddressingModes": false,
  "constantsAndMagicNumbers": [
    "0x5B8",
    "0x23"
  ],
  "sideEffects": true,
  "interactions": true,
  "inferredAlgorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_40D820:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 30h
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    TEST dl, 0Fh
    JNZ loc_40D960
loc_40D845:
    MOV ecx, edx
    MOV rax, [rdi+3D0h]
    MOV rdx, [rdi+3D8h]
    TEST ecx, ecx
    MOV r13, rdi
    MOV [rsp+58h+var_58], rax
    MOV [rsp+58h+var_50], rdx
    JLE loc_40D935
loc_40D869:
    SUB ecx, 1
    LEA r12, [rsi+1]
    LEA r14, [rsp+58h+var_68]
    SHR ecx, 4
    LEA rbp, [rsp+58h+var_38]
    SHL rcx, 4
    LEA rbx, [rsi+rcx+11h]
    NOP word ptr [rax+rax+00000000h]
loc_40D890:
    MOV [rsp+58h+var_48], rax
    LEA rsi, [rsp+58h+var_48]
    MOV [rsp+58h+var_40], rdx
    MOV rdi, r13
    CALL qword ptr [r13+3C0h]
    LEA rsi, [rsp+58h+var_48]
    MOV rax, r12
loc_40D8B1:
    MOVZX edx, byte ptr [rax-1]
    MOV edi, [rsi]
    ADD rsi, 4
    ADD rax, 4
    MOV ecx, edx
    MOVZX edx, byte ptr [rax-4]
    SHL ecx, 18h
    SHL edx, 10h
    OR edx, ecx
    MOVZX ecx, byte ptr [rax-2]
    OR edx, ecx
    MOVZX ecx, byte ptr [rax-3]
    SHL ecx, 8
    OR edx, ecx
    MOV ecx, edx
    XOR edx, edi
    XOR ecx, edi
    MOV [rax-2], dl
    MOV r8d, ecx
    SHR r8d, 18h
    MOV [rax-5], r8b
    MOV r8d, ecx
    SHR ecx, 8
    SHR r8d, 10h
    MOV [rax-3], cl
    MOV [rax-4], r8b
    CMP rbp, rsi
    JNZ loc_40D8B1
loc_40D906:
    MOV rax, rsp
loc_40D909:
    MOV edi, [rax+0Ch]
    LEA edx, [rdi+1]
    TEST edx, edx
    MOV [rax+0Ch], edx
    JNZ loc_40D91F
loc_40D916:
    SUB rax, 4
    CMP r14, rax
    JNZ loc_40D909
loc_40D91F:
    ADD r12, 10h
    MOV rax, [rsp+58h+var_58]
    MOV rdx, [rsp+58h+var_50]
    CMP r12, rbx
    JNZ loc_40D890
loc_40D935:
    MOV [r13+3D0h], rax
    MOV [r13+3D8h], rdx
    MOV rax, [rsp+58h+var_30]
    XOR rax, fs:28h
    JNZ loc_40D979
loc_40D953:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_40D960:
    MOV ecx, offset aAesSdctr
    MOV edx, 437h
    MOV esi, offset aSshaesC
    MOV edi, offset aLen150
    CALL ___assert_fail
loc_40D979:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": [
    {
      "name": "Basic Signature & Data Flow",
      "parameters": {
        "inputParameterCount": 3,
        "inputParameterTypes": ["Integer", "Pointer", "Boolean"],
        "returnValueType": "None"
      }
    },
    {
      "name": "Core Logic & Operations",
      "parameters": {
        "dominantOperationCategories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement", "ConditionalBranching", "SubroutineCall", "Return"],
        "constantsAndMagicNumbers": ["0x5B8", "0x23", "0xDEADBEEF", "0x80000000"],
        "subroutineCallTargets": true,
        "controlFlow": "Conditional"
      }
    },
    {
      "name": "Constants & \"Magic Numbers\"",
      "parameters": {
        "presenceOfNotableIntegerConstants": ["0x5B8", "0x23"],
        "presenceOfNotableFloatingPointConstants": ["0xDEADBEEF", "0x80000000"],
        "countOfDistinctImmediateValues": 4
      }
    },
    {
      "name": "Side Effects & Interactions",
      "parameters": {
        "likelyModifiesInputParameters": true,
        "likelyModifiesGlobalState": false,
        "likelyPerformsMemoryAllocation/Deallocation": true,
        "likelyPerformsI/OOperations": true,
        "likelyPerformsBlockMemoryOperations": true
      }
    },
    {
      "name": "Inferred Algorithm (Conditional)",
      "parameters": {
        "inferredAlgorithm": "CRC32 Calculation"
      }
    }
  ],
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_41C850:
    PUSH rbx
    MOV rbx, rdx
    MOV edx, esi
    MOV rsi, rdi
    SUB rsp, 70h
    MOV rdi, rsp
    MOV [rsp+78h+var_78], 67452301h
    MOV [rsp+78h+var_74], 0EFCDAB89h
    MOV rax, fs:28h
    MOV [rsp+78h+var_10], rax
    XOR eax, eax
    MOV [rsp+78h+var_70], 98BADCFEh
    MOV [rsp+78h+var_6C], 10325476h
    MOV [rsp+78h+var_28], 0
    MOV [rsp+78h+var_20], 0
    MOV [rsp+78h+var_24], 0
    CALL sub_41B900
    MOV rsi, rsp
    MOV rdi, rbx
    CALL sub_41C2D0
    MOV esi, 5Ch
    MOV rdi, rsp
    CALL sub_40B660
    MOV rax, [rsp+78h+var_10]
    XOR rax, fs:28h
    JNZ loc_41C8DA
loc_41C8D4:
    ADD rsp, 70h
    POP rbx
    RETN 
loc_41C8DA:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameters_count": 5,
  "input_parameter_types": [
    "Integer",
    "Integer",
    "Integer",
    "Integer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "Arithmetic",
    "Bitwise",
    "Comparison",
    "DataMovement",
    "ConditionalBranching",
    "SubroutineCall",
    "Return",
    "MemoryAccess",
    "StackManipulation"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "constants_and_magic_numbers": [
    "0x5B8",
    "0x23",
    "0xEFCDAB89",
    "0x10325476",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "0",
    "
############
```assembly
loc_642BD0:
    EXTRN 
```
Output:```json
{
  "features": {
    "inputParameterCount": 1,
    "inputParameterTypes": ["Integer"],
    "returnValueType": "None",
    "dominantOperationCategories": ["DataMovement"],
    "loopIndicators": false,
    "numberOfDistinctSubroutineCallTargets": 1,
    "useOfIndexedAddressingModes": false,
    "constantsAndMagicNumbers": ["0x642BD0"],
    "subroutineCallTargets": true,
    "controlFlow": "ConditionalBranching"
  },
  "algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_4286F0:
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, [rdi]
    CALL sub_427DB0
    MOV rdi, rbx
    POP rbx
    JMP sub_40B5E0
```
Output:```json
{
  "input_parameters": [
    {
      "category": "Integer",
      "value": 4286F0
    }
  ],
  "dominant_operation_categories": [
    "Arithmetic",
    "Comparison"
  ],
  "constants_and_magic_numbers": [
    "0x427DB0",
    "0x40B5E0"
  ],
  "subroutine_call_targets": [
    {
      "address": 427DB0,
      "offset": 0
    },
    {
      "address": 40B5E0,
      "offset": 0
    }
  ],
  "control_flow": "ConditionalBranching"
}
```
############
```assembly
loc_401E10:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV ebx, edi
    SUB rsp, 178h
    MOV rax, fs:28h
    MOV [rsp+1A8h+var_40], rax
    XOR eax, eax
    MOV [rsp+1A8h+var_F8], 0
    MOV [rsp+1A8h+var_F0], 0
    CALL sub_429A80
    MOV edx, offset nullsub_1
    TEST eax, eax
    MOV eax, offset sub_403C50
    CMOVZ rax, rdx
    CMP ebx, 1
    MOV [rsp+1A8h+var_170], rax
    JLE loc_402AF7
loc_401E74:
    MOV [rsp+1A8h+var_158], 0
    MOV [rsp+1A8h+var_160], 0
    XOR r14d, r14d
    MOV [rsp+1A8h+var_168], 0
    MOV [rsp+1A8h+var_184], 0
    XOR r13d, r13d
    MOV [rsp+1A8h+var_188], 0
    MOV [rsp+1A8h+var_150], 0
    MOV [rsp+1A8h+src], 0
    MOV [rsp+1A8h+var_19C], 0FFFFFFFFh
    MOV [rsp+1A8h+var_198], 0
    MOV [rsp+1A8h+new], 0
    MOV [rsp+1A8h+var_194], 0
    NOP word ptr [rax+rax+00000000h]
loc_401EE0:
    SUB ebx, 1
    JZ loc_401F28
loc_401EE5:
    MOV rcx, [rbp+8]
    LEA r15, [rbp+8]
    CMP byte ptr [rcx], 2Dh
    JZ loc_401FD8
loc_401EF6:
    TEST r13, r13
    JZ loc_4023B0
loc_401EFF:
    MOV rcx, cs:stderr
    MOV edx, 31h
    MOV esi, 1
    MOV edi, offset aPuttygenCannot
    MOV rbp, r15
    MOV r14d, 1
    CALL _fwrite
    SUB ebx, 1
    JNZ loc_401EE5
loc_401F28:
    CMP [rsp+1A8h+var_19C], 0FFFFFFFFh
    JZ loc_40278B
loc_401F33:
    CMP [rsp+1A8h+var_194], 4
    JZ loc_402A9E
loc_401F3E:
    CMP [rsp+1A8h+var_194], 5
    SETZ al
    CMP [rsp+1A8h+var_19C], 100h
    MOV ebp, eax
    JZ loc_401F5A
loc_401F52:
    TEST al, al
    JNZ loc_402860
loc_401F5A:
    MOV esi, [rsp+1A8h+var_194]
    MOV eax, esi
    SUB eax, 1
    CMP eax, 2
    JBE loc_4024BB
loc_401F6C:
    TEST r14d, r14d
    JNZ loc_4024F2
loc_401F75:
    CMP [rsp+1A8h+var_188], 0
    JNZ loc_4026A1
loc_401F80:
    TEST r13, r13
    JNZ loc_401F90
loc_401F85:
    CMP [rsp+1A8h+var_194], 0
    JZ loc_40288D
loc_401F90:
    CMP [rsp+1A8h+var_194], 0
    SETNZ byte ptr [rsp+1A8h+var_188]
    TEST r13, r13
    MOVZX eax, byte ptr [rsp+1A8h+var_188]
    JZ loc_4026A8
loc_401FA8:
    TEST al, al
    JZ loc_4026A8
loc_401FB0:
    MOV rcx, cs:stderr
    MOV edx, 2Eh
    MOV esi, 1
    MOV edi, offset aPuttygenCannot_0
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_401FD8:
    MOVZX r12d, byte ptr [rcx+1]
    LEA r8, [rcx+1]
    MOV rbp, r15
    TEST r12b, r12b
    JZ def_402078
loc_401FED:
    MOV edx, r14d
    MOV ebp, ebx
    MOV r14, r15
    MOV rbx, r8
    NOP dword ptr [rax+rax+00000000h]
loc_402000:
    LEA eax, [r12-2Dh]
    CMP al, 47h
    JA def_402010
loc_40200D:
    MOVZX eax, al
    JMP ds:jpt_402010[rax*8]
loc_402020:
    SUB r12d, 4Ch
    CMP r12b, 25h
    JA def_402032
loc_40202E:
    MOVZX r12d, r12b
    JMP ds:jpt_402032[r12*8]
loc_402040:
    CMP byte ptr [rcx+2], 0
    MOV ebx, ebp
    LEA r8, [rcx+2]
    MOV rbp, r14
    MOV r14d, edx
    JNZ loc_402066
loc_402052:
    CMP ebx, 1
    JZ loc_402410
loc_40205B:
    MOV r8, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_402066:
    SUB r12d, 43h
    CMP r12b, 31h
    JA def_402078
loc_402074:
    MOVZX r12d, r12b
    JMP ds:jpt_402078[r12*8]
loc_402080:
    MOVZX eax, byte ptr [rcx+2]
    MOV r8, rbx
    MOV ebx, ebp
    MOV rbp, r14
    MOV r14d, edx
    LEA rdx, [rcx+2]
    TEST al, al
    JNZ loc_4020AB
loc_402097:
    JMP loc_4020AF
loc_4020A0:
    ADD rdx, 1
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JZ loc_4020AF
loc_4020AB:
    CMP al, 3Dh
    JNZ loc_4020A0
loc_4020AF:
    CMP al, 3Dh
    JZ loc_4023C0
loc_4020B7:
    MOV edi, offset aHelp
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JZ loc_40244E
loc_4020CC:
    MOV edi, offset aVersion
    MOV ecx, 9
    MOV rsi, r8
    REPE 
    JZ loc_402779
loc_4020E1:
    MOV edi, offset aPgpfp
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JZ loc_402AE5
loc_4020F6:
    XOR r12d, r12d
loc_4020F9:
    MOV edi, offset aOldPassphrase
    MOV ecx, 10h
    MOV rsi, r8
    REPE 
    JNZ loc_402460
loc_40210E:
    TEST r12, r12
    JNZ loc_402123
loc_402113:
    CMP ebx, 1
    JLE loc_402123
loc_402118:
    MOV r12, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_402123:
    TEST r12, r12
    JZ loc_402922
loc_40212C:
    MOV rdi, r12
    CALL sub_403B00
    TEST rax, rax
    MOV [rsp+1A8h+var_168], rax
    MOV eax, 1
    CMOVZ r14d, eax
    JMP def_402078
loc_402150:
    MOV rdi, cs:stderr
    MOVSX ecx, r12b
    MOV edx, offset aPuttygenNoSuch
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV rcx, rbx
    MOV edx, 1
loc_402174:
    TEST rbx, rbx
    JZ loc_40218B
loc_402179:
    MOVZX r12d, byte ptr [rcx+1]
    ADD rbx, 1
    TEST r12b, r12b
    JNZ loc_402000
loc_40218B:
    MOV ebx, ebp
    MOV rbp, r14
    MOV r14d, edx
    JMP def_402078
loc_4021A0:
    MOV [rsp+1A8h+src], r8
    JMP def_402078
loc_4021B0:
    MOV edi, offset aPublic
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JZ loc_402441
loc_4021C5:
    MOV esi, offset s2
    MOV rdi, r8
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    JNZ loc_402520
loc_4021DF:
    MOV [rsp+1A8h+var_198], 2
    JMP def_402078
loc_4021F0:
    MOV [rsp+1A8h+new], r8
    JMP def_402078
loc_402200:
    MOV edx, 0Ah
    XOR esi, esi
    MOV rdi, r8
    CALL _strtol
    MOV [rsp+1A8h+var_19C], eax
    JMP def_402078
loc_402220:
    MOVZX r12d, byte ptr [r8]
    CMP r12d, 72h
    JNZ loc_402318
loc_40222E:
    CMP byte ptr [r8+1], 73h
    JNZ loc_402318
loc_402239:
    CMP byte ptr [r8+2], 61h
    JNZ loc_402318
loc_402244:
    CMP byte ptr [r8+3], 0
    JNZ loc_402318
loc_40224F:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 2
    JMP def_402078
loc_402268:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_150], 1
    JMP loc_402174
loc_402280:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_170], offset nullsub_1
    JMP loc_402174
loc_402298:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_198], 1
    JMP loc_402174
loc_4022B0:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_198], 3
    JMP loc_402174
loc_4022C0:
    MOV dword ptr [rsp+1A8h+s1], edx
    CALL sub_403FC0
    MOV rcx, rbx
    MOV [rsp+1A8h+var_188], 1
    MOV edx, dword ptr [rsp+1A8h+s1]
    JMP loc_402174
loc_4022E0:
    MOV rcx, rbx
    MOV [rsp+1A8h+var_198], 2
    JMP loc_402174
loc_4022F0:
    MOV dword ptr [rsp+1A8h+s1], edx
    CALL sub_403F40
    MOV rcx, rbx
    MOV [rsp+1A8h+var_188], 1
    MOV edx, dword ptr [rsp+1A8h+s1]
    JMP loc_402174
loc_402310:
    MOV rcx, rbx
    JMP loc_402174
loc_402318:
    MOV esi, offset aRsa2
    MOV rdi, r8
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_40224F
loc_402332:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aRsa1
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_40283E
loc_40234C:
    CMP r12d, 64h
    MOV r8, [rsp+1A8h+s1]
    JZ loc_402BBD
loc_40235B:
    MOV esi, offset aEcdsa
    MOV rdi, r8
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402C20
loc_402375:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aEd25519
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4033A7
loc_402394:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 5
    JMP def_402078
loc_4023B0:
    MOV r13, rcx
    MOV rbp, r15
    JMP def_402078
loc_4023C0:
    MOV byte ptr [rdx], 0
    MOV edi, offset aHelp
    MOV ecx, 6
    MOV rsi, r8
    LEA r12, [rdx+1]
    REPE 
    JNZ loc_40364C
loc_4023DC:
    TEST r12, r12
    JZ loc_40244E
loc_4023E1:
    MOV rcx, r8
    MOV edx, offset aPuttygenOption
loc_4023E9:
    MOV rdi, cs:stderr
    MOV esi, 1
    XOR eax, eax
    MOV r14d, 1
    CALL ___fprintf_chk
    JMP def_402078
loc_402410:
    MOV rdi, cs:stderr
    MOVSX ecx, r12b
    MOV edx, offset aPuttygenOption_0
    MOV esi, 1
    XOR eax, eax
    MOV [rsp+1A8h+s1], r8
    MOV r14d, 1
    CALL ___fprintf_chk
    MOV r8, [rsp+1A8h+s1]
    JMP loc_402066
loc_402441:
    MOV [rsp+1A8h+var_198], 1
    JMP def_402078
loc_40244E:
    CALL sub_403FC0
    MOV [rsp+1A8h+var_188], 1
    JMP def_402078
loc_402460:
    MOV rdi, r8
    MOV esi, offset aNewPassphrase
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4027F7
loc_40247F:
    TEST r12, r12
    JNZ loc_402494
loc_402484:
    CMP ebx, 1
    JLE loc_402494
loc_402489:
    MOV r12, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_402494:
    TEST r12, r12
    JZ loc_402922
loc_40249D:
    MOV rdi, r12
    CALL sub_403B00
    TEST rax, rax
    MOV [rsp+1A8h+var_160], rax
    MOV eax, 1
    CMOVZ r14d, eax
    JMP def_402078
loc_4024BB:
    CMP [rsp+1A8h+var_19C], 0FFh
    JG loc_4027B3
loc_4024C9:
    MOV rdi, cs:stderr
    CMP esi, 3
    MOV eax, offset aDsa
    MOV ecx, offset off_42BE65
    MOV edx, offset aPuttygenCannot_1
    MOV esi, 1
    CMOVZ rcx, rax
    XOR eax, eax
    CALL ___fprintf_chk
loc_4024F2:
    MOV eax, 1
loc_4024F7:
    MOV rsi, [rsp+1A8h+var_40]
    XOR rsi, fs:28h
    JNZ loc_403647
loc_40250E:
    ADD rsp, 178h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_402520:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivate
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402853
loc_40253A:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aFingerprint
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402B33
loc_402554:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivateOpenssh
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402BF3
loc_40256E:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivateOpenssh_0
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    JZ loc_402FC8
loc_402588:
    MOV r8, [rsp+1A8h+s1]
    MOV esi, offset aPrivateSshcom
    MOV rdi, r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4030DE
loc_4025A7:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_198], 6
    JMP def_402078
loc_4025BC:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_4036E9
loc_4025C7:
    TEST rbx, rbx
    JZ loc_403627
loc_4025D0:
    MOV rsi, [rbx+8]
    MOV rdi, [rbx]
    CALL sub_420900
    MOV r14, rax
loc_4025DF:
    CMP [rsp+1A8h+new], 0
    JZ loc_403607
loc_4025EB:
    MOV rdi, r13
    XOR edx, edx
    MOV esi, (offset aPuttyKeyFormat+17h)
    CALL sub_42A050
    MOV rcx, r14
    MOV rdi, rax
    MOV r13, rax
    MOV edx, (offset aPuttygenSS+0Dh)
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV rdi, r13
    CALL _fclose
loc_40261C:
    MOV rdi, r14
    CALL sub_40B5E0
loc_402624:
    MOV r15, [rsp+1A8h+var_168]
    TEST r15, r15
    MOV rdi, r15
    JZ loc_402653
loc_402631:
    XOR eax, eax
    OR rcx, 0FFFFFFFFFFFFFFFFh
    REPNE 
    MOV rdi, r15
    MOV rax, rcx
    NOT rax
    LEA rsi, [rax-1]
    CALL sub_40B660
    MOV rdi, r15
    CALL sub_40B5E0
loc_402653:
    TEST r12, r12
    JZ loc_40267D
loc_402658:
    XOR eax, eax
    MOV rdi, r12
    OR rcx, 0FFFFFFFFFFFFFFFFh
    REPNE 
    MOV rdi, r12
    MOV rax, rcx
    NOT rax
    LEA rsi, [rax-1]
    CALL sub_40B660
    MOV rdi, r12
    CALL sub_40B5E0
loc_40267D:
    TEST rbp, rbp
    JZ loc_40268A
loc_402682:
    MOV rdi, rbp
    CALL sub_422CC0
loc_40268A:
    TEST rbx, rbx
    JZ loc_4026A1
loc_40268F:
    MOV rax, [rbx]
    MOV rdi, [rbx+8]
    CALL qword ptr [rax+8]
    MOV rdi, rbx
    CALL sub_40B5E0
loc_4026A1:
    XOR eax, eax
    JMP loc_4024F7
loc_4026A8:
    CMP [rsp+1A8h+var_194], 0
    JZ loc_4026E6
loc_4026AF:
    MOV edi, [rsp+1A8h+var_198]
    MOV eax, edi
    SUB eax, 4
    CMP eax, 2
    JBE loc_4026E6
loc_4026BD:
    TEST edi, edi
    JZ loc_4026E6
loc_4026C1:
    MOV rcx, cs:stderr
    MOV edx, 45h
    MOV esi, 1
    MOV edi, offset aPuttygenThisWo
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_4026E6:
    TEST r13, r13
    JZ loc_4028C4
loc_4026EF:
    MOV rdi, r13
    CALL sub_429C60
    MOV rdi, rax
    MOV rbx, rax
    CALL sub_420960
    CMP eax, 0Ah
    MOV r14d, eax
    MOV dword ptr [rsp+1A8h+s1], eax
    JA loc_4034E0
loc_402712:
    MOV eax, 1
    MOV ecx, r14d
    SHL rax, cl
    TEST eax, 6E8h
    JNZ loc_402B40
loc_402728:
    TEST eax, 104h
    JNZ loc_402C08
loc_402733:
    TEST al, 3
    JZ loc_4034E0
loc_40273B:
    MOV edi, r14d
    CALL sub_4209A0
    MOV rdi, cs:stderr
    MOV r8, rax
    MOV rcx, r13
    MOV edx, offset aPuttygenUnable
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV eax, 1
    JMP loc_4024F7
loc_402770:
    TEST r12, r12
    JNZ loc_403693
loc_402779:
    CALL sub_403F40
    MOV [rsp+1A8h+var_188], 1
    JMP def_402078
loc_40278B:
    MOV eax, [rsp+1A8h+var_194]
    CMP eax, 4
    JZ loc_402880
loc_402798:
    CMP eax, 5
    JNZ loc_402B1E
loc_4027A1:
    MOV ebp, 1
    MOV [rsp+1A8h+var_19C], 100h
    JMP loc_401F5A
loc_4027B3:
    CMP [rsp+1A8h+var_19C], 7FFh
    JG loc_401F6C
loc_4027C1:
    CMP [rsp+1A8h+var_194], 3
    MOV rdi, cs:stderr
    MOV eax, offset off_42BE65
    MOV ecx, offset aDsa
    MOV r8d, 800h
    MOV edx, offset aPuttygenWarnin
    MOV esi, 1
    CMOVNZ rcx, rax
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_401F6C
loc_4027F7:
    MOV rdi, r8
    MOV esi, offset aRandomDevice
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4028B7
loc_402816:
    TEST r12, r12
    JNZ loc_40282B
loc_40281B:
    CMP ebx, 1
    JLE loc_40282B
loc_402820:
    MOV r12, [r15+8]
    LEA rbp, [r15+8]
    SUB ebx, 1
loc_40282B:
    TEST r12, r12
    JZ loc_402922
loc_402834:
    MOV [rsp+1A8h+var_158], r12
    JMP def_402078
loc_40283E:
    MOV [rsp+1A8h+var_184], 1
    MOV [rsp+1A8h+var_194], 1
    JMP def_402078
loc_402853:
    MOV [rsp+1A8h+var_198], 0
    JMP def_402078
loc_402860:
    MOV rcx, cs:stderr
    MOV edx, 2Fh
    MOV esi, 1
    MOV edi, offset aPuttygenInvali
    CALL _fwrite
    JMP loc_4024F2
loc_402880:
    MOV [rsp+1A8h+var_19C], 180h
    JMP loc_401F3E
loc_40288D:
    MOV rcx, cs:stderr
    MOV edx, 0A0h
    MOV esi, 1
    MOV edi, offset aUsagePuttygenK
    CALL _fwrite
    CALL sub_403CF0
    MOV eax, 1
    JMP loc_4024F7
loc_4028B7:
    MOV rcx, r8
    MOV edx, offset aPuttygenNoSuch_0
    JMP loc_4023E9
loc_4028C4:
    MOV eax, [rsp+1A8h+var_198]
    MOV dword ptr [rsp+1A8h+s1], 0
    TEST eax, eax
    SETZ r12b
    CMP eax, 4
    SETZ al
    XOR r14d, r14d
    XOR ebx, ebx
loc_4028E1:
    XOR r15d, r15d
    CMP [rsp+1A8h+new], 0
    JZ loc_4034F9
loc_4028F0:
    MOV eax, [rsp+1A8h+var_198]
    CMP eax, 4
    JZ loc_40292F
loc_4028F9:
    TEST r12b, r12b
    JNZ loc_40292F
loc_4028FE:
    SUB eax, 5
    CMP eax, 1
    JBE loc_40292F
loc_402906:
    MOV eax, dword ptr [rsp+1A8h+s1]
    SUB eax, 5
    CMP eax, 1
    JBE loc_40292F
loc_402912:
    CMP r14d, 7
    JZ loc_40292F
loc_402918:
    MOV [rsp+1A8h+var_14C], 0
    JMP loc_402947
loc_402922:
    MOV rcx, r8
    MOV edx, offset aPuttygenOption_1
    JMP loc_4023E9
loc_40292F:
    MOV eax, dword ptr [rsp+1A8h+s1]
    SUB eax, 8
    CMP eax, 2
    JBE loc_403032
loc_40293F:
    MOV [rsp+1A8h+var_14C], 1
loc_402947:
    CMP [rsp+1A8h+var_194], 0
    JNZ loc_402E21
loc_402952:
    TEST r13, r13
    MOV [rsp+1A8h+var_E8], 0
    JZ loc_403719
loc_402967:
    CMP r14d, 2
    LEA r12, [rsp+1A8h+var_F8]
    JZ loc_4030CE
loc_402979:
    CMP r14d, 3
    JZ loc_403057
loc_402983:
    MOV rdx, r12
    MOV esi, r14d
    MOV rdi, rbx
    CALL sub_408BF0
loc_402991:
    TEST eax, eax
    JZ loc_402C35
loc_402999:
    CMP [rsp+1A8h+var_14C], 0
    JZ loc_402C35
loc_4029A4:
    CMP [rsp+1A8h+var_168], 0
    JZ loc_403853
loc_4029B0:
    MOVZX ecx, byte ptr [rsp+1A8h+s1]
    MOV eax, 1
    SHL rax, cl
    TEST eax, 608h
    JNZ loc_402D74
loc_4029C8:
    TEST eax, 104h
    JNZ loc_403294
loc_4029D3:
    TEST al, 0E0h
    JZ loc_403457
loc_4029DB:
    MOV rdx, [rsp+1A8h+var_168]
    LEA rcx, [rsp+1A8h+var_E8]
    MOV rdi, rbx
    MOV esi, r14d
    CALL sub_409830
    TEST rax, rax
    MOV rbx, rax
    JZ loc_403274
loc_4029FF:
    CMP rax, offset unk_6425B0
    JZ loc_4035F6
loc_402A0B:
    XOR r14d, r14d
loc_402A0E:
    XOR ebp, ebp
loc_402A10:
    CMP [rsp+1A8h+src], 0
    JZ loc_402A43
loc_402A18:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_403067
loc_402A23:
    TEST rbx, rbx
    JZ loc_4036D0
loc_402A2C:
    MOV rdi, [rbx+10h]
    CALL sub_40B5E0
    MOV rdi, [rsp+1A8h+src]
    CALL sub_40ACA0
    MOV [rbx+10h], rax
loc_402A43:
    CMP [rsp+1A8h+var_150], 0
    JNZ loc_402DF7
loc_402A4E:
    CMP [rsp+1A8h+var_168], 0
    JZ loc_402DF7
loc_402A5A:
    CMP [rsp+1A8h+var_160], 0
    JZ loc_402DE8
loc_402A66:
    MOV r12, [rsp+1A8h+var_160]
loc_402A6B:
    CMP byte ptr [r12], 0
    JZ loc_403025
loc_402A76:
    TEST r15, r15
    JZ loc_403007
loc_402A7F:
    MOV rdi, r15
    CALL sub_429C60
    MOV r13, rax
loc_402A8A:
    MOV eax, [rsp+1A8h+var_198]
    CMP eax, 6
    JA def_402A97
loc_402A97:
    JMP ds:jpt_402A97[rax*8]
loc_402A9E:
    MOV eax, [rsp+1A8h+var_19C]
    XOR ebp, ebp
    AND al, 7Fh
    CMP eax, 100h
    JZ loc_401F5A
loc_402AB1:
    CMP [rsp+1A8h+var_19C], 209h
    JZ loc_401F3E
loc_402ABF:
    MOV rcx, cs:stderr
    MOV edx, 39h
    MOV esi, 1
    MOV edi, offset aPuttygenInvali_0
    MOV r14d, 1
    CALL _fwrite
    JMP loc_401F3E
loc_402AE5:
    CALL sub_429E10
    MOV [rsp+1A8h+var_188], 1
    JMP def_402078
loc_402AF7:
    MOV rcx, cs:stderr
    MOV edx, 0A0h
    MOV esi, 1
    MOV edi, offset aUsagePuttygenK
    CALL _fwrite
    CALL sub_403CF0
    XOR eax, eax
    JMP loc_4024F7
loc_402B1E:
    CMP [rsp+1A8h+var_194], 4
    MOV [rsp+1A8h+var_19C], 800h
    JNZ loc_401F3E
loc_402B31:
    JMP loc_402ABF
loc_402B33:
    MOV [rsp+1A8h+var_198], 3
    JMP def_402078
loc_402B40:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_403382
loc_402B4B:
    MOV [rsp+1A8h+var_184], 2
loc_402B53:
    CMP [rsp+1A8h+var_198], 0
    LEA eax, [r14-2]
    SETZ r12b
    CMP eax, 1
    SETBE al
    AND al, r12b
    JZ loc_40308C
loc_402B6F:
    MOV r12d, eax
loc_402B72:
    XOR r15d, r15d
    CMP [rsp+1A8h+new], 0
    JZ loc_403364
loc_402B81:
    CMP [rsp+1A8h+var_150], 0
    JNZ loc_4028F0
loc_402B8C:
    CMP [rsp+1A8h+src], 0
    JNZ loc_4028F0
loc_402B98:
    MOV rcx, cs:stderr
    MOV edx, 36h
    MOV esi, 1
    MOV edi, offset aPuttygenThisCo
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_402BBD:
    CMP byte ptr [r8+1], 73h
    JNZ loc_40235B
loc_402BC8:
    CMP byte ptr [r8+2], 61h
    JNZ loc_4030B3
loc_402BD3:
    CMP byte ptr [r8+3], 0
    JNZ loc_4030B3
loc_402BDE:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 3
    JMP def_402078
loc_402BF3:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_198], 4
    JMP def_402078
loc_402C08:
    CMP [rsp+1A8h+var_184], 2
    JZ loc_403470
loc_402C13:
    MOV [rsp+1A8h+var_184], 1
    JMP loc_402B53
loc_402C20:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_194], 4
    JMP def_402078
loc_402C35:
    MOV [rsp+1A8h+var_168], 0
    JMP loc_4029B0
loc_402C43:
    CMP [rsp+1A8h+new], 0
    JZ loc_4039B1
loc_402C4F:
    MOV rdi, r13
    XOR edx, edx
    MOV esi, (offset aPuttyKeyFormat+17h)
    CALL sub_42A050
    MOV r13, rax
loc_402C61:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_4039A1
loc_402C6C:
    TEST r14, r14
    JZ loc_40396E
loc_402C75:
    XOR r8d, r8d
    CMP [rsp+1A8h+var_198], 1
    MOV ecx, [rsp+1A8h+tp.tm_sec]
    SETNZ r8b
    ADD r8d, 9
    TEST rbx, rbx
    JZ loc_403961
loc_402C95:
    MOV rsi, [rbx+10h]
loc_402C99:
    MOV rdx, r14
    MOV rdi, r13
    CALL sub_4205C0
loc_402CA4:
    CMP [rsp+1A8h+new], 0
    JZ def_402A97
loc_402CB0:
    MOV rdi, r13
    CALL _fclose
    JMP def_402A97
loc_402CBD:
    CMP [rsp+1A8h+var_184], 2
    JNZ loc_403948
loc_402CC8:
    TEST rbx, rbx
    JZ loc_40392F
loc_402CD1:
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_198]
    CMP eax, 5
    JZ loc_403925
loc_402CE3:
    XOR esi, esi
    CMP eax, 6
    SETZ sil
    LEA esi, [rsi+rsi*2+4]
loc_402CF0:
    MOV rcx, r12
    MOV rdx, rbx
    MOV rdi, r13
    CALL sub_40A230
    TEST eax, eax
    JZ loc_403905
loc_402D06:
    TEST r15, r15
    JZ def_402A97
loc_402D0F:
    MOV rsi, [rsp+1A8h+new]
    MOV rdi, r15
    CALL sub_403C00
    TEST eax, eax
    JNZ def_402A97
loc_402D24:
    JMP loc_4024F2
loc_402D29:
    CMP [rsp+1A8h+var_184], 1
    JZ loc_4033FA
loc_402D34:
    TEST rbx, rbx
    JZ loc_4033E1
loc_402D3D:
    MOV rdx, r12
    MOV rsi, rbx
    MOV rdi, r13
    CALL sub_41FCB0
    TEST eax, eax
    JNZ loc_402D06
loc_402D4F:
    MOV rcx, cs:stderr
    MOV edx, 2Bh
    MOV esi, 1
    MOV edi, offset aPuttygenUnable_0
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_402D74:
    CMP [rsp+1A8h+var_14C], 0
    JNZ loc_402F68
loc_402D7F:
    LEA r8, [rsp+1A8h+var_E8]
    LEA rdx, [rsp+1A8h+tp]
    LEA rsi, [rsp+1A8h+var_F0]
    MOV rdi, rbx
    MOV rcx, r12
    CALL sub_41F6C0
    TEST rax, rax
    MOV r14, rax
    MOV rdi, [rsp+1A8h+var_F0]
    JZ loc_4038B1
loc_402DB6:
    CALL sub_41E630
    TEST rax, rax
    JZ loc_4030EB
loc_402DC4:
    MOV edx, [rsp+1A8h+tp.tm_sec]
    MOV rsi, r14
    MOV rdi, rax
    CALL qword ptr [rax+48h]
    MOV rdi, [rsp+1A8h+var_F0]
    XOR ebx, ebx
    CALL sub_40B5E0
    JMP loc_402A0E
loc_402DE8:
    MOV rdi, [rsp+1A8h+var_168]
    CALL sub_40ACA0
    MOV [rsp+1A8h+var_160], rax
loc_402DF7:
    CMP [rsp+1A8h+var_160], 0
    JNZ loc_402A66
loc_402E03:
    CMP [rsp+1A8h+var_150], 0
    JNZ loc_403732
loc_402E0E:
    CMP byte ptr [rsp+1A8h+var_188], 0
    JNZ loc_403732
loc_402E19:
    XOR r12d, r12d
    JMP loc_402A76
loc_402E21:
    LEA rbx, [rsp+1A8h+var_148]
    MOV dword ptr [rsp+1A8h+var_E8], 0FFFFFFFFh
    MOV dword ptr [rsp+1A8h+var_E8+4], 0FFFFFFFFh
    LEA r13, [rsp+1A8h+s]
    MOV rdi, rbx
    CALL sub_4275C0
    CMP [rsp+1A8h+var_194], 3
    LEA rax, [rsp+1A8h+tp]
    MOV ecx, 0Eh
    MOV rsi, rbx
    MOV rdi, rax
    REP 
    MOV rcx, rax
    JZ loc_4031CA
loc_402E6F:
    CMP [rsp+1A8h+var_194], 4
    JZ loc_40353F
loc_402E7A:
    TEST bpl, bpl
    JNZ loc_403124
loc_402E83:
    MOV edx, offset format
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_402EC0:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 40h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_423270
    CMP [rsp+1A8h+var_194], 1
    MOV qword ptr [rbp+38h], 0
    JZ loc_402FDD
loc_402F1E:
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV qword ptr [rax], offset off_437EE0
loc_402F3B:
    OR ecx, 0FFFFFFFFh
    MOV edx, 7FFFFFFFh
    MOV esi, 6
    MOV rdi, r12
    MOV rax, [rsp+1A8h+var_170]
    XOR ebp, ebp
    CALL rax
    MOV rdi, r13
    CALL sub_40ACA0
    MOV [rbx+10h], rax
loc_402F60:
    XOR r14d, r14d
    JMP loc_402A10
loc_402F68:
    MOV rsi, [rsp+1A8h+var_168]
    LEA rdx, [rsp+1A8h+var_E8]
    MOV rdi, rbx
    CALL sub_41E650
    CMP rax, offset unk_6425B0
    MOV rbx, rax
    JZ loc_402F91
loc_402F88:
    TEST rax, rax
    JNZ loc_402A0B
loc_402F91:
    CMP [rsp+1A8h+var_E8], 0
    JZ loc_4035E9
loc_402FA0:
    MOV r8, [rsp+1A8h+var_E8]
    MOV rdi, cs:stderr
    MOV rcx, r13
    MOV edx, offset aPuttygenErrorL
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_4024F2
loc_402FC8:
    MOV [rsp+1A8h+var_184], 2
    MOV [rsp+1A8h+var_198], 5
    JMP def_402078
loc_402FDD:
    OR ecx, 0FFFFFFFFh
    MOV edx, 7FFFFFFFh
    MOV esi, 6
    MOV rdi, r12
    MOV rax, [rsp+1A8h+var_170]
    XOR ebx, ebx
    CALL rax
    MOV rdi, r13
    CALL sub_40ACA0
    MOV [rbp+38h], rax
    JMP loc_402F60
loc_403007:
    MOV rax, [rsp+1A8h+new]
    MOV edi, (offset asc_42E60B+2)
    TEST rax, rax
    CMOVNZ rdi, rax
    CALL sub_429C60
    MOV r13, rax
    JMP loc_402A8A
loc_403025:
    MOV rdi, r12
    CALL sub_40B5E0
    JMP loc_402E19
loc_403032:
    MOV rcx, cs:stderr
    MOV edx, 45h
    MOV esi, 1
    MOV edi, offset aPuttygenCannot_2
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_403057:
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_41FA10
    JMP loc_402991
loc_403067:
    TEST rbp, rbp
    JZ loc_40343E
loc_403070:
    MOV rdi, [rbp+38h]
    CALL sub_40B5E0
    MOV rdi, [rsp+1A8h+src]
    CALL sub_40ACA0
    MOV [rbp+38h], rax
    JMP loc_402A43
loc_40308C:
    CMP [rsp+1A8h+var_198], 4
    SETZ dl
    CMP r14d, 5
    MOV eax, edx
    JNZ loc_403495
loc_4030A0:
    TEST dl, dl
    JZ loc_403495
loc_4030A8:
    MOV r14d, 5
    JMP loc_402B72
loc_4030B3:
    CMP byte ptr [r8+2], 73h
    JNZ loc_40235B
loc_4030BE:
    CMP byte ptr [r8+3], 0
    JZ loc_402BDE
loc_4030C9:
    JMP loc_40235B
loc_4030CE:
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_41DB60
    JMP loc_402991
loc_4030DE:
    MOV rcx, r8
    MOV edx, offset aPuttygenUnknow
    JMP loc_4023E9
loc_4030EB:
    MOV rdi, [rsp+1A8h+var_F0]
    XOR ebx, ebx
    CALL sub_40B5E0
    JMP loc_402A0E
loc_4030FF:
    MOV rcx, cs:stderr
    MOV edx, 3Ch
    MOV esi, 1
    MOV edi, offset aPuttygenFailed
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_403124:
    MOV edx, offset aEd25519KeyYMD
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_40315D:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 38h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_41B740
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV qword ptr [rax], offset off_434040
    JMP loc_402F3B
loc_4031CA:
    MOV edx, offset aDsaKeyYMD
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_403207:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 28h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_416B10
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV qword ptr [rax], offset off_433420
    JMP loc_402F3B
loc_403274:
    CMP [rsp+1A8h+var_E8], 0
    JNZ loc_402FA0
loc_403283:
    MOV [rsp+1A8h+var_E8], offset aUnknownError
    JMP loc_402FA0
loc_403294:
    MOV esi, 40h
    MOV edi, 1
    CALL sub_40AC50
    CMP [rsp+1A8h+var_14C], 0
    MOV rbp, rax
    JNZ loc_4033B4
loc_4032B1:
    LEA r8, [rsp+1A8h+var_E8]
    LEA rdx, [rsp+1A8h+var_FC]
    LEA rsi, [rsp+1A8h+tp]
    MOV rcx, r12
    MOV rdi, rbx
    CALL sub_41DC00
    MOV r12, qword ptr [rsp+1A8h+tp.tm_sec]
    MOV ebx, eax
    MOV eax, [rsp+1A8h+var_FC]
    LEA rdx, [rbp+10h]
    LEA esi, [rax-4]
    LEA rdi, [r12+4]
    CALL sub_410E80
    TEST eax, eax
    JS loc_4033D0
loc_4032FE:
    MOV esi, [rsp+1A8h+var_FC]
    ADD eax, 4
    LEA rdx, [rbp+8]
    SUB esi, eax
    CDQE 
    LEA rdi, [r12+rax]
    CALL sub_410E80
    TEST eax, eax
    JS loc_4033D0
loc_403321:
    MOV rdi, [rsp+1A8h+var_F8]
    CALL sub_40ACA0
    MOV qword ptr [rbp+18h], 0
    MOV [rbp+38h], rax
    MOV qword ptr [rbp+20h], 0
    MOV qword ptr [rbp+28h], 0
    MOV qword ptr [rbp+30h], 0
loc_403352:
    TEST ebx, ebx
    JLE loc_403274
loc_40335A:
    XOR r14d, r14d
    XOR ebx, ebx
    JMP loc_402A10
loc_403364:
    XOR edx, edx
    MOV esi, offset aTmp
    MOV rdi, r13
    XOR eax, eax
    CALL sub_40ACE0
    MOV [rsp+1A8h+new], r13
    MOV r15, rax
    JMP loc_402B81
loc_403382:
    MOV rcx, cs:stderr
    MOV edx, 3Ch
    MOV esi, 1
    MOV edi, offset aPuttygenConver
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_4033A7:
    MOV rcx, r8
    MOV edx, offset aPuttygenUnknow_0
    JMP loc_4023E9
loc_4033B4:
    MOV rdx, [rsp+1A8h+var_168]
    LEA rcx, [rsp+1A8h+var_E8]
    MOV rdi, rbx
    MOV rsi, rax
    CALL sub_41DA60
    MOV ebx, eax
    JMP loc_403352
loc_4033D0:
    MOV [rsp+1A8h+var_E8], offset aSsh1PublicKeyB
    JMP loc_403321
loc_4033E1:
    MOV ecx, offset function
    MOV edx, 3D5h
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
loc_4033FA:
    TEST rbp, rbp
    JZ loc_4034AD
loc_403403:
    MOV rdx, r12
    MOV rsi, rbp
    MOV rdi, r13
    CALL sub_41DEE0
    TEST eax, eax
    JNZ loc_402D06
loc_403419:
    MOV rcx, cs:stderr
    MOV edx, 2Bh
    MOV esi, 1
    MOV edi, offset aPuttygenUnable_1
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_40343E:
    MOV ecx, offset function
    MOV edx, 38Ah
    MOV esi, offset file
    MOV edi, offset aSsh1key
    CALL ___assert_fail
loc_403457:
    MOV ecx, offset function
    MOV edx, 37Bh
    MOV esi, offset file
    MOV edi, (offset aModMod00+0Fh)
    CALL ___assert_fail
loc_403470:
    MOV rcx, cs:stderr
    MOV edx, 3Ch
    MOV esi, 1
    MOV edi, offset aPuttygenConver_0
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_403495:
    CMP r14d, 6
    JNZ loc_4034C6
loc_40349B:
    CMP [rsp+1A8h+var_198], 5
    JNZ loc_4034C6
loc_4034A2:
    MOV r14d, 6
    JMP loc_402B72
loc_4034AD:
    MOV ecx, offset function
    MOV edx, 3CEh
    MOV esi, offset file
    MOV edi, offset aSsh1key
    CALL ___assert_fail
loc_4034C6:
    CMP r14d, 7
    JNZ loc_4028E1
loc_4034D0:
    CMP [rsp+1A8h+var_198], 6
    JZ loc_402B72
loc_4034DB:
    JMP loc_4028E1
loc_4034E0:
    MOV ecx, offset function
    MOV edx, 26Bh
    MOV esi, offset file
    MOV edi, offset a0ShouldNeverSe
    CALL ___assert_fail
loc_4034F9:
    TEST al, al
    JNZ loc_40351A
loc_4034FD:
    TEST r12b, r12b
    JNZ loc_40351A
loc_403502:
    MOV eax, [rsp+1A8h+var_198]
    MOV rdi, [rsp+1A8h+new]
    SUB eax, 5
    MOV r15, rdi
    CMP eax, 1
    JA loc_402906
loc_40351A:
    MOV rcx, cs:stderr
    MOV edx, 29h
    MOV esi, 1
    MOV edi, offset aPuttygenNeedTo
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_40353F:
    MOV edx, offset aEc
    MOV esi, 1Eh
    MOV rdi, r13
    CALL _strftime
    CALL sub_420E20
    MOV eax, [rsp+1A8h+var_19C]
    MOV ecx, 8
    MOV rsi, [rsp+1A8h+var_158]
    CDQ 
    IDIV ecx
    MOV edi, eax
    MOV ebx, eax
    CALL sub_429AB0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4030FF
loc_40357C:
    MOV rdi, rax
    MOV esi, ebx
    LEA r12, [rsp+1A8h+var_E8]
    CALL sub_420D80
    MOVSXD rsi, ebx
    MOV rdi, rbp
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV esi, 38h
    MOV edi, 1
    CALL sub_40AC50
    MOV rdx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_19C]
    MOV rcx, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_41B6B0
    MOV esi, 18h
    MOV edi, 1
    CALL sub_40AC50
    MOV rbx, rax
    MOV [rax+8], rbp
    MOV rax, [rbp+0]
    MOV [rbx], rax
    JMP loc_402F3B
loc_4035E9:
    CMP rbx, offset unk_6425B0
    JNZ loc_403283
loc_4035F6:
    MOV [rsp+1A8h+var_E8], offset aWrongPassphras
    JMP loc_402FA0
loc_403607:
    MOV rdi, cs:stdout
    MOV rcx, r14
    MOV edx, (offset aPuttygenSS+0Dh)
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_40261C
loc_403627:
    TEST r14, r14
    JZ loc_4036B7
loc_403630:
    MOV esi, [rsp+1A8h+tp.tm_sec]
    MOV rdi, r14
    CALL sub_4207C0
    MOV r14, rax
    JMP loc_4025DF
loc_403647:
    CALL ___stack_chk_fail
loc_40364C:
    MOV rdi, r8
    MOV esi, offset aVersion
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JZ loc_402770
loc_40366B:
    MOV rdi, r8
    MOV esi, offset aPgpfp
    MOV [rsp+1A8h+s1], r8
    CALL _strcmp
    TEST eax, eax
    MOV r8, [rsp+1A8h+s1]
    JNZ loc_4020F9
loc_40368A:
    TEST r12, r12
    JZ loc_402AE5
loc_403693:
    MOV rdi, cs:stderr
    MOV rcx, r8
    MOV edx, offset aPuttygenOption
    MOV esi, 1
    MOV r14d, 1
    CALL ___fprintf_chk
    JMP def_402078
loc_4036B7:
    MOV ecx, offset function
    MOV edx, 40Fh
    MOV esi, offset file
    MOV edi, offset aSsh2blob
    CALL ___assert_fail
loc_4036D0:
    MOV ecx, offset function
    MOV edx, 38Eh
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
loc_4036E9:
    TEST rbp, rbp
    JZ loc_4037D8
loc_4036F2:
    MOV esi, 1
    MOV edi, 80h
    CALL sub_40AC50
    MOV rdx, rbp
    MOV esi, 80h
    MOV rdi, rax
    MOV r14, rax
    CALL sub_4227D0
    JMP loc_4025DF
loc_403719:
    MOV ecx, offset function
    MOV edx, 2FEh
    MOV esi, offset file
    MOV edi, offset aInfileNull
    CALL ___assert_fail
loc_403732:
    XOR edi, edi
    CALL sub_40A620
    MOV edi, offset src
    MOV r13, rax
    MOV dword ptr [rax], 0
    CALL sub_40ACA0
    MOV edi, offset aEnterPassphras
    MOV [r13+8], rax
    CALL sub_40ACA0
    XOR edx, edx
    MOV rsi, rax
    MOV rdi, r13
    CALL sub_40B090
    MOV edi, offset aReEnterPassphr
    CALL sub_40ACA0
    XOR edx, edx
    MOV rsi, rax
    MOV rdi, r13
    CALL sub_40B090
    XOR edx, edx
    XOR esi, esi
    MOV rdi, r13
    CALL sub_429720
    TEST eax, eax
    JS loc_40383A
loc_403792:
    JZ loc_40381E
loc_403798:
    MOV rax, [r13+30h]
    MOV rdx, [rax]
    MOV rax, [rax+8]
    MOV r12, [rdx+10h]
    MOV rsi, [rax+10h]
    MOV rdi, r12
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4037F1
loc_4037B7:
    MOV rdi, r12
    CALL sub_40ACA0
    MOV rdi, r13
    MOV r12, rax
    CALL sub_40A690
    TEST r12, r12
    JZ loc_402E19
loc_4037D3:
    JMP loc_402A6B
loc_4037D8:
    MOV ecx, offset function
    MOV edx, 407h
    MOV esi, offset file
    MOV edi, offset aSsh1key
    CALL ___assert_fail
loc_4037F1:
    MOV rdi, r13
    CALL sub_40A690
    MOV rcx, cs:stderr
    MOV edx, 23h
    MOV esi, 1
    MOV edi, offset aPuttygenPassph
    CALL _fwrite
    MOV eax, 1
    JMP loc_4024F7
loc_40381E:
    MOV rdi, r13
    CALL sub_40A690
    MOV edi, offset s
    CALL _perror
    MOV eax, 1
    JMP loc_4024F7
loc_40383A:
    MOV ecx, offset function
    MOV edx, 3A8h
    MOV esi, offset file
    MOV edi, offset aRet0
    CALL ___assert_fail
loc_403853:
    XOR edi, edi
    CALL sub_40A620
    MOV edi, (offset src+4)
    MOV rbp, rax
    MOV dword ptr [rax], 0
    CALL sub_40ACA0
    MOV edi, offset aEnterPassphras_0
    MOV [rbp+8], rax
    CALL sub_40ACA0
    XOR edx, edx
    MOV rsi, rax
    MOV rdi, rbp
    CALL sub_40B090
    XOR edx, edx
    XOR esi, esi
    MOV rdi, rbp
    CALL sub_429720
    TEST eax, eax
    JS loc_4038EC
loc_403898:
    JNZ loc_4038CA
loc_40389A:
    MOV rdi, rbp
    CALL sub_40A690
    MOV edi, offset aPuttygenUnable_3
    CALL _perror
    JMP loc_4024F2
loc_4038B1:
    CALL sub_40B5E0
    CMP [rsp+1A8h+var_E8], 0
    JNZ loc_402FA0
loc_4038C5:
    JMP loc_403283
loc_4038CA:
    MOV rax, [rbp+30h]
    MOV rax, [rax]
    MOV rdi, [rax+10h]
    CALL sub_40ACA0
    MOV rdi, rbp
    MOV [rsp+1A8h+var_168], rax
    CALL sub_40A690
    JMP loc_4029B0
loc_4038EC:
    MOV ecx, offset function
    MOV edx, 315h
    MOV esi, offset file
    MOV edi, offset aRet0
    CALL ___assert_fail
loc_403905:
    MOV rcx, cs:stderr
    MOV edx, 1Fh
    MOV esi, 1
    MOV edi, offset aPuttygenUnable_4
    CALL _fwrite
    JMP loc_4024F2
loc_403925:
    MOV esi, 6
    JMP loc_402CF0
loc_40392F:
    MOV ecx, offset function
    MOV edx, 424h
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
loc_403948:
    MOV ecx, offset function
    MOV edx, 423h
    MOV esi, offset file
    MOV edi, offset aSshver2
    CALL ___assert_fail
loc_403961:
    MOV rsi, [rsp+1A8h+var_F8]
    JMP loc_402C99
loc_40396E:
    TEST rbx, rbx
    JZ loc_4039CF
loc_403973:
    MOV rax, [rbx]
    MOV rdi, [rbx+8]
    LEA rsi, [rsp+1A8h+tp]
    CALL qword ptr [rax+18h]
    CMP [rsp+1A8h+var_198], 1
    MOV r14, rax
    JZ loc_4039BD
loc_40398F:
    MOV ecx, [rsp+1A8h+tp.tm_sec]
    MOV r8d, 0Ah
    JMP loc_402C95
loc_4039A1:
    MOV rsi, rbp
    MOV rdi, r13
    CALL sub_420510
    JMP loc_402CA4
loc_4039B1:
    MOV r13, cs:stdout
    JMP loc_402C61
loc_4039BD:
    MOV ecx, [rsp+1A8h+tp.tm_sec]
    MOV r8d, 9
    JMP loc_402C95
loc_4039CF:
    MOV ecx, offset function
    MOV edx, 3F0h
    MOV esi, offset file
    MOV edi, offset assertion
    CALL ___assert_fail
```
Output:JNZ loc_402B40
loc_402734:
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc_402B40
    TEST eax, 104h
    JNZ loc
############
```assembly
loc_642D70:
    EXTRN 
```
Output:```json
{
  "signature": {
    "input_parameters_count": 1,
    "input_parameter_types": ["Integer"],
    "return_value_type": "None"
  },
  "core_logic": {
    "dominant_operation_categories": ["Arithmetic"],
    "loop_indicators": false,
    "number_of_distinct_subroutine_call_targets": 0,
    "use_of_indexed_addressing_modes": true,
    "subroutine_call_targets": ["loc_642D70"],
    "return": "None",
    "memory_access": ["loc_642D70"],
    "stack_manipulation": ["loc_642D70"]
  },
  "constants_and_magic_numbers": [
    "0x5B8",
    "0x23",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80000000",
    "0xFFFF0000",
    "0xFF",
    "0xDEADBEEF",
    "0x80
############
```assembly
loc_410820:
    MOV rax, [rdi]
    CMP rax, 1
    JBE locret_410855
loc_410829:
    CMP qword ptr [rdi+rax*8], 0
    JNZ locret_410855
loc_410830:
    SUB rax, 1
    JMP loc_41084C
loc_410840:
    SUB rax, 1
    CMP qword ptr [rdi+rax*8+8], 0
    JNZ locret_410855
loc_41084C:
    CMP rax, 1
    MOV [rdi], rax
    JNZ loc_410840
loc_410855:
    REP 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": ["Integer"],
  "return_value_type": "Integer",
  "dominant_operation_categories": ["Arithmetic", "Bitwise", "Comparison", "DataMovement"],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": true,
  "constants_and_magic_numbers": [
    "0x5B8", // Integer
    "0x23" // Integer
  ],
  "side_effects": {
    "likely_modifies_input_parameters": true,
    "likely_modifies_global_state": false,
    "likely_performs_memory_allocation/deallocation": true,
    "likely Performs I/O Operations": false
  },
  "inferred_algorithm": "CRC32 Calculation"
}
```
############
```assembly
loc_411F61:
    MOV rbx, [rsp+0A8h+var_58]
    MOV r14, rsi
    MOV rsi, rbx
    CALL sub_411EE0
    MOV [rsp+0A8h+var_68], rax
    MOV rax, [rbx]
    MOV esi, 8
    MOV rbx, rax
    MOV [rsp+0A8h+var_70], rax
    MOV r12d, eax
    CDQE 
    MOV rdi, rax
    MOV [rsp+0A8h+var_60], rax
    CALL sub_40AC50
    MOV [rsp+0A8h+var_A8], rax
    XOR eax, eax
    TEST ebx, ebx
    MOV rsi, [rsp+0A8h+var_A8]
    MOV rcx, [rsp+0A8h+var_58]
    JLE loc_411FC7
loc_411FAB:
    NOP dword ptr [rax+rax+00h]
loc_411FB0:
    MOV rdx, [rcx]
    SUB rdx, rax
    MOV rdx, [rcx+rdx*8]
    MOV [rsi+rax*8], rdx
    ADD rax, 1
    CMP r12d, eax
    JG loc_411FB0
loc_411FC7:
    MOV rdi, [rsp+0A8h+var_60]
    MOV esi, 8
    CALL sub_40AC50
    MOV [rsp+0A8h+var_80], rax
    MOV rax, [rsp+0A8h+var_68]
    MOV ecx, dword ptr [rsp+0A8h+var_70]
    MOV rax, [rax]
    SUB ecx, eax
    TEST ecx, ecx
    JLE loc_412018
loc_411FED:
    MOV rbx, [rsp+0A8h+var_80]
    LEA edx, [rcx-1]
    LEA rdx, [rbx+rdx*8+8]
    MOV rax, rbx
    NOP dword ptr [rax]
loc_412000:
    MOV qword ptr [rax], 0
    ADD rax, 8
    CMP rax, rdx
    JNZ loc_412000
loc_412010:
    MOV rax, [rsp+0A8h+var_68]
    MOV rax, [rax]
loc_412018:
    TEST eax, eax
    JLE loc_412051
loc_41201C:
    MOV rbx, [rsp+0A8h+var_80]
    MOV rdi, [rsp+0A8h+var_68]
    MOVSXD rcx, ecx
    XOR edx, edx
    LEA rsi, [rbx+rcx*8]
    XOR ecx, ecx
    NOP dword ptr [rax+00000000h]
loc_412038:
    SUB rax, rdx
    ADD ecx, 1
    MOV rax, [rdi+rax*8]
    MOV [rsi+rdx*8], rax
    MOV rax, [rdi]
    ADD rdx, 1
    CMP ecx, eax
    JL loc_412038
loc_412051:
    MOV eax, dword ptr [rsp+0A8h+var_70]
    MOV esi, 8
    ADD eax, eax
    MOVSXD r13, eax
    MOV r15d, eax
    MOV [rsp+0A8h+var_78], eax
    MOV rdi, r13
    CALL sub_40AC50
    MOV esi, 8
    MOV rdi, r13
    MOV rbp, rax
    CALL sub_40AC50
    TEST r15d, r15d
    MOV rbx, rax
    JLE loc_4120A8
loc_412086:
    MOV ecx, [rsp+0A8h+var_78]
    MOV rax, rbp
    LEA edx, [rcx-1]
    LEA rdx, [rbp+rdx*8+8]
    NOP dword ptr [rax]
loc_412098:
    MOV qword ptr [rax], 0
    ADD rax, 8
    CMP rax, rdx
    JNZ loc_412098
loc_4120A8:
    MOV rcx, [rsp+0A8h+var_70]
    LEA rax, ds:0[r13*8]
    XOR edx, edx
    MOV [rsp+0A8h+var_48], rax
    MOV qword ptr [rbp+rax-8], 1
    CMP ecx, 32h
    MOV eax, ecx
    JLE loc_4123CF
loc_4120D0:
    MOV ecx, eax
    SAR ecx, 1
    SUB eax, ecx
    ADD eax, 1
    CMP eax, 32h
    LEA edx, [rdx+rax*4]
    JG loc_4120D0
loc_4120E1:
    MOVSXD rdi, edx
    LEA rax, ds:0[rdi*8]
    MOV [rsp+0A8h+var_50], rax
loc_4120F1:
    MOV esi, 8
    CALL sub_40AC50
    MOV rsi, [r14]
    MOV [rsp+0A8h+var_A0], rax
    XOR edi, edi
    LEA rdx, [r14+rsi*8]
    MOV ecx, esi
loc_41210B:
    MOV r15d, 3Fh
    JMP loc_41212F
loc_412118:
    MOV rax, [rdx]
    BT rax, r15
    JB loc_412133
loc_412121:
    SUB r15d, 1
    CMP r15d, 0FFFFFFFFh
    JZ loc_4123C3
loc_41212F:
    CMP edi, ecx
    JL loc_412118
loc_412133:
    MOV rax, [rsp+0A8h+var_A8]
    MOV [rsp+0A8h+var_74], edi
    MOV edx, 6
    XOR r13d, r13d
    MOV r9d, 40h
    MOV rdi, [rax]
    MOV eax, 20h
    MOV r8, rdi
    NOP dword ptr [rax+00h]
loc_412158:
    MOV ecx, r9d
    MOV r10, r8
    SUB ecx, eax
    SHR r10, cl
    TEST r10, r10
    JNZ loc_412170
loc_412168:
    MOV ecx, eax
    ADD r13d, eax
    SHL r8, cl
loc_412170:
    SAR eax, 1
    SUB edx, 1
    JNZ loc_412158
loc_412177:
    TEST r13d, r13d
    JZ loc_4121A4
loc_41217C:
    MOV ecx, r13d
    SHL rdi, cl
    CMP dword ptr [rsp+0A8h+var_70], 1
    JLE loc_4121A4
loc_412189:
    MOV rax, [rsp+0A8h+var_A8]
    MOV ecx, 40h
    SUB ecx, r13d
    MOV rax, [rax+8]
    MOV [rsp+0A8h+var_98], rax
    SHR rax, cl
    OR rdi, rax
loc_4121A4:
    MOV [rsp+0A8h+var_40], rsi
    CALL sub_40F320
    MOVSXD rcx, [rsp+0A8h+var_74]
    MOV [rsp+0A8h+var_90], rax
    MOV rsi, [rsp+0A8h+var_40]
    MOV rax, [rsp+0A8h+var_60]
    SHL rax, 3
    CMP ecx, esi
    MOV [rsp+0A8h+var_88], rcx
    MOV [rsp+0A8h+var_98], rax
    JL loc_4121F7
loc_4121D4:
    JMP loc_4122B8
loc_4121E0:
    SUB r15d, 1
    MOV rax, rbp
    MOV rbp, rbx
    CMP r15d, 0FFFFFFFFh
    MOV rbx, rax
    JZ loc_41229A
loc_4121F7:
    MOV rax, [rsp+0A8h+var_98]
    MOV r8, [rsp+0A8h+var_A0]
    MOV ecx, r12d
    MOV rdx, rbx
    LEA rdi, [rbp+rax+0]
    MOV rsi, rdi
    CALL sub_40FD10
    SUB rsp, 8
    XOR r8d, r8d
    MOV rdi, rbx
    PUSH r13
    MOV r9, [rsp+0B8h+var_90]
    MOV ecx, r12d
    MOV rdx, [rsp+0B8h+var_A8]
    MOV esi, [rsp+0B8h+var_78]
    CALL sub_40F5B0
    MOV rax, [r14]
    SUB rax, [rsp+0B8h+var_88]
    POP rsi
    POP rdi
    MOV rax, [r14+rax*8]
    BT rax, r15
    JNB loc_4121E0
loc_41224A:
    MOV rax, [rsp+0A8h+var_98]
    MOV r8, [rsp+0A8h+var_A0]
    MOV ecx, r12d
    MOV rsi, [rsp+0A8h+var_80]
    MOV rdx, rbp
    SUB r15d, 1
    LEA rdi, [rbx+rax]
    CALL sub_40FD10
    SUB rsp, 8
    XOR r8d, r8d
    MOV ecx, r12d
    PUSH r13
    MOV r9, [rsp+0B8h+var_90]
    MOV rdi, rbp
    MOV rdx, [rsp+0B8h+var_A8]
    MOV esi, [rsp+0B8h+var_78]
    CALL sub_40F5B0
    CMP r15d, 0FFFFFFFFh
    POP rdx
    POP rcx
    JNZ loc_4121F7
loc_41229A:
    ADD [rsp+0A8h+var_74], 1
    ADD [rsp+0A8h+var_88], 1
    MOV r15d, 3Fh
    MOV eax, [rsp+0A8h+var_74]
    CMP eax, [r14]
    JL loc_4121F7
loc_4122B8:
    MOV rax, [rsp+0A8h+var_58]
    MOV rdi, [rax]
    CALL sub_40FCB0
    MOV r13, rax
    MOV rax, [rsp+0A8h+var_60]
    XOR edx, edx
    LEA rsi, [rbp+rax*8+0]
    MOV eax, dword ptr [rsp+0A8h+var_70]
    TEST eax, eax
    JLE loc_4122F9
loc_4122DC:
    NOP dword ptr [rax+00h]
loc_4122E0:
    MOV rax, [r13+0]
    MOV rcx, [rsi+rdx*8]
    SUB rax, rdx
    ADD rdx, 1
    CMP r12d, edx
    MOV [r13+rax*8+0], rcx
    JG loc_4122E0
loc_4122F9:
    MOV rdx, [r13+0]
    CMP rdx, 1
    JBE loc_41232E
loc_412303:
    CMP qword ptr [r13+rdx*8+0], 0
    JNZ loc_41232E
loc_41230B:
    SUB rdx, 1
    JMP loc_412324
loc_412318:
    SUB rdx, 1
    CMP qword ptr [r13+rdx*8+8], 0
    JNZ loc_41232E
loc_412324:
    CMP rdx, 1
    MOV [r13+0], rdx
    JNZ loc_412318
loc_41232E:
    MOV r15, [rsp+0A8h+var_48]
    MOV rdi, rbp
    MOV rsi, r15
    CALL sub_40B660
    MOV rdi, rbp
    CALL sub_40B5E0
    MOV r14, [rsp+0A8h+var_A0]
    MOV rsi, [rsp+0A8h+var_50]
    MOV rdi, r14
    CALL sub_40B660
    MOV rdi, r14
    CALL sub_40B5E0
    MOV rsi, r15
    MOV rdi, rbx
    CALL sub_40B660
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV r14, [rsp+0A8h+var_98]
    MOV rbx, [rsp+0A8h+var_A8]
    MOV rsi, r14
    MOV rdi, rbx
    CALL sub_40B660
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV rbx, [rsp+0A8h+var_80]
    MOV rsi, r14
    MOV rdi, rbx
    CALL sub_40B660
    MOV rdi, rbx
    CALL sub_40B5E0
    MOV rdi, [rsp+0A8h+var_68]
    CALL sub_4108A0
    ADD rsp, 78h
    MOV rax, r13
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4123C3:
    ADD edi, 1
    SUB rdx, 8
    JMP loc_41210B
loc_4123CF:
    MOV [rsp+0A8h+var_50], 0
    XOR edi, edi
    JMP loc_4120F1
loc_4123DF:
    MOV ecx, offset aModpowSimple
    MOV edx, 3B9h
    MOV esi, offset aSshbnC
    MOV edi, offset aModMod00
    CALL ___assert_fail
```
Output:```json
{
  "features": [
    {
      "name": "Input Parameter Count",
      "value": 10
    },
    {
      "name": "Input Parameter Types",
      "value": [
        "Integer",
        "Pointer",
        "Boolean",
        "FloatingPoint",
        "String",
        "Struct/Object",
        "Collection"
      ]
    },
    {
      "name": "Return Value Type",
      "value": "None"
    },
    {
      "name": "Dominant Operation Categories",
      "value": [
        "Arithmetic",
        "Bitwise",
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "Return",
        "MemoryAccess",
        "StackManipulation"
      ]
    },
    {
      "name": "Loop Indicators",
      "value": false
    },
    {
      "name": "Number of Distinct Subroutine Call Targets",
      "value": 0
    },
    {
      "name": "Use of Indexed Addressing Modes",
      "value": false
    }
  ],
  "algorithm": "Undetermined"
}
```
