##### Q 0 - get_header_tar_bz2
```assembly
loc_4ADC80:
    PUSH rbx
    MOV rbx, rdi
    MOV qword ptr [rdi+40h], offset sub_4AF4E0
    MOV edi, [rdi+4]
    MOV edx, offset sub_4A83C0
    XOR esi, esi
    CALL sub_4AF200
    MOV qword ptr [rbx+48h], 0
loc_4ADCA3:
    MOV rdi, rbx
    CALL sub_4AD480
    TEST al, al
    JZ loc_4ADCA3
loc_4ADCAF:
    MOV eax, 1
    POP rbx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x48', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop with conditional exit', 'inferred_category': 'Control Flow'}

##### T 0 - get_header_tar_bz2
```assembly
loc_4E39A0:
    PUSH rbx
    MOV rbx, rdi
    MOV qword ptr [rdi+40h], offset sub_4E6E00
    MOV edi, [rdi+4]
    MOV edx, offset sub_4D89F0
    XOR esi, esi
    CALL sub_4E6680
    MOV qword ptr [rbx+48h], 0
loc_4E39C3:
    MOV rdi, rbx
    CALL sub_4E2630
    TEST al, al
    JZ loc_4E39C3
loc_4E39CF:
    MOV eax, 1
    POP rbx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x48', '0x4', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ControlFlow'}

##### Q 1 - nmeter_main
```assembly
loc_45B770:
    PUSH r15
    PUSH r14
    MOV edi, 88h
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 58h
    MOV rax, fs:28h
    MOV [rsp+88h+var_40], rax
    XOR eax, eax
    CALL sub_40AD10
    MOV rbx, rax
    MOV cs:qword_7431F0, rax
    MOV edi, offset aProc
    MOV qword ptr [rax+8], offset dest
    MOV byte ptr [rax+3], 0Ah
    MOV dword ptr [rax+10h], 0F4240h
    MOV dword ptr [rax+14h], 0F4240h
    CALL sub_40B450
    LEA rsi, [rsp+88h+haystack]
    MOV edx, 1Fh
    MOV edi, offset aVersion
    CALL sub_40BF00
    TEST rax, rax
    JLE loc_45B7FD
loc_45B7E2:
    LEA rdi, [rsp+88h+haystack]
    MOV esi, offset a24
    MOV [rsp+88h+var_49], 0
    CALL _strstr
    TEST rax, rax
    SETZ byte ptr [rbx+1]
loc_45B7FD:
    LEA rdx, [rsp+88h+var_70]
    XOR eax, eax
    MOV esi, (offset aSrnPTUD+0Bh)
    MOV rdi, rbp
    CALL sub_4DFD70
    TEST eax, eax
    JZ loc_45B844
loc_45B815:
    MOV rdi, [rsp+88h+var_70]
    CALL sub_4ED070
    IMUL eax, 3E8h
    MOV ecx, 1
    TEST eax, eax
    MOV [rbx+10h], eax
    CMOVG ecx, eax
    XOR edx, edx
    MOV eax, 0F4240h
    DIV ecx
    MOV [rbx+14h], ecx
    TEST edx, edx
    SETNZ byte ptr [rbx+2]
loc_45B844:
    MOVSXD rax, cs:optind
    MOV rdi, [rbp+rax*8+0]
    TEST rdi, rdi
    JZ loc_45B9DF
loc_45B859:
    CALL sub_40AD40
    XOR r13d, r13d
    MOV rbp, rax
    XOR r12d, r12d
loc_45B867:
    MOV r14, rbp
    JMP loc_45B88B
loc_45B870:
    MOVZX eax, byte ptr [rax+1]
    CMP al, 25h
    JNZ loc_45B9E4
loc_45B87C:
    LEA r14, [rbx+1]
    MOV rdi, rbx
    MOV rsi, r14
    CALL sub_4EA7A0
loc_45B88B:
    MOV esi, 25h
    MOV rdi, r14
    CALL _strchr
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_45B870
loc_45B8A0:
    CMP byte ptr [rbp+0], 0
    JNZ loc_45BA71
loc_45B8AA:
    MOV rdi, r12
    CALL sub_45A4A0
    MOV rbx, cs:qword_7431F0
    MOV edx, [rbx+10h]
    MOV qword ptr [rbx+8], offset dest
    LEA rbp, [rbx+18h]
    TEST edx, edx
    JS loc_45B900
loc_45B8CC:
    XOR esi, esi
    MOV rdi, rbp
    CALL _gettimeofday
    MOV ecx, [rbx+10h]
    MOV edi, 0F4240h
    CMP ecx, 0F4240h
    JG loc_45B8F6
loc_45B8E6:
    MOV rax, [rbx+20h]
    MOV esi, [rbx+14h]
    CQO 
    IDIV rsi
    SUB ecx, edx
    MOV edi, ecx
loc_45B8F6:
    CALL _usleep
    NOP dword ptr [rax+rax+00h]
loc_45B900:
    XOR esi, esi
    MOV rdi, rbp
    CALL _gettimeofday
    MOV rdi, r12
    CALL sub_45A4A0
    MOV rdx, [rbx+8]
    CMP rdx, offset qword_743628
    JNB loc_45B931
loc_45B91F:
    MOVZX eax, byte ptr [rbx+3]
    LEA rcx, [rdx+1]
    MOV [rbx+8], rcx
    MOV [rdx], al
    MOV rdx, [rbx+8]
loc_45B931:
    SUB rdx, offset dest
    TEST edx, edx
    JLE loc_45B956
loc_45B93C:
    MOVSXD rdx, edx
    MOV esi, offset dest
    MOV edi, 1
    CALL sub_40AFA0
    MOV qword ptr [rbx+8], offset dest
loc_45B956:
    MOV eax, [rbx+10h]
    TEST eax, eax
    JS loc_45B900
loc_45B95D:
    XOR esi, esi
    MOV rdi, rbp
    CALL _gettimeofday
    CMP byte ptr [rbx+2], 0
    MOV ecx, [rbx+10h]
    JZ loc_45BA60
loc_45B974:
    IMUL rax, [rbx+18h], 0F4240h
    MOV esi, [rbx+14h]
    XOR edx, edx
    MOV edi, ecx
    ADD rax, [rbx+20h]
    DIV rsi
    SUB edi, edx
loc_45B98C:
    MOV eax, ecx
    ADD ecx, edi
    SHR eax, 7
    CMP eax, edi
    CMOVA edi, ecx
    CALL _usleep
    JMP loc_45B900
loc_45B9A2:
    MOVSX esi, byte ptr [rbx+2]
    MOV edi, offset aNcmsfixptbr
    LEA r14, [rbx+2]
    MOV r15d, esi
    CALL _strchr
    CMP r15b, 5Dh
    LEA rdx, [rbx+3]
    JZ loc_45BA9D
loc_45B9C5:
    TEST r15b, r15b
    JZ loc_45B9DF
loc_45B9CA:
    ADD r14, 1
    MOVZX ecx, byte ptr [r14]
    CMP cl, 5Dh
    JZ loc_45BA9D
loc_45B9DB:
    TEST cl, cl
    JNZ loc_45B9CA
loc_45B9DF:
    CALL sub_408E80
loc_45B9E4:
    CMP al, 5Bh
    LEA rdx, [rbx+1]
    MOV byte ptr [rbx], 0
    JZ loc_45B9A2
loc_45B9EF:
    LEA ecx, [rax-30h]
    MOV rbx, rdx
    CMP cl, 9
    JA loc_45BA09
loc_45B9FA:
    ADD rbx, 1
    MOVZX eax, byte ptr [rbx]
    LEA ecx, [rax-30h]
    CMP cl, 9
    JBE loc_45B9FA
loc_45BA09:
    TEST al, al
    MOV [rsp+88h+var_80], rdx
    JZ loc_45B9DF
loc_45BA12:
    MOVSX esi, al
    MOV edi, offset aNcmsfixptbr
    LEA r15, [rbx+1]
    CALL _strchr
    MOV rdx, [rsp+88h+var_80]
    MOV byte ptr [rbx], 0
loc_45BA2B:
    TEST rax, rax
    JZ loc_45B9DF
loc_45BA30:
    SUB rax, offset aNcmsfixptbr
    MOV rdi, rdx
    CALL ds:funcs_45BA39[rax*8]
    TEST rax, rax
    JZ loc_45BAAC
loc_45BA45:
    TEST r12, r12
    MOV [rax+10h], rbp
    JZ loc_45BAA7
loc_45BA4E:
    MOV [r13+0], rax
loc_45BA52:
    MOV rbp, r15
    MOV r13, rax
    JMP loc_45B867
loc_45BA60:
    MOV eax, [rbx+20h]
    XOR edx, edx
    MOV edi, ecx
    DIV dword ptr [rbx+14h]
    SUB edi, edx
    JMP loc_45B98C
loc_45BA71:
    MOV edi, 18h
    CALL sub_40AD10
    TEST r12, r12
    MOV qword ptr [rax+8], offset nullsub_2
    MOV [rax+10h], rbp
    JZ loc_45BA95
loc_45BA8C:
    MOV [r13+0], rax
    JMP loc_45B8AA
loc_45BA95:
    MOV r12, rax
    JMP loc_45B8AA
loc_45BA9D:
    LEA r15, [r14+1]
    MOV byte ptr [r14], 0
    JMP loc_45BA2B
loc_45BAA7:
    MOV r12, rax
    JMP loc_45BA52
loc_45BAAC:
    MOV rdi, rbp
    CALL _strlen
    LEA rdi, [rbp+rax+0]
    MOV rsi, r15
    MOV r15, rbp
    CALL sub_4EA7A0
    MOV rax, r13
    JMP loc_45BA52
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7431F0', '0x59', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Loop'}

##### T 1 - nmeter_main
```assembly
loc_470260:
    PUSH r15
    PUSH r14
    MOV edi, 88h
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 58h
    MOV rax, fs:28h
    MOV [rsp+88h+var_40], rax
    XOR eax, eax
    CALL sub_40C260
    MOV rbx, rax
    MOV cs:qword_78D1F0, rax
    MOV edi, offset aProc
    MOV qword ptr [rax+8], offset buf
    MOV byte ptr [rax+3], 0Ah
    MOV dword ptr [rax+10h], 0F4240h
    MOV dword ptr [rax+14h], 0F4240h
    CALL sub_40CC60
    LEA rsi, [rsp+88h+haystack]
    MOV edx, 1Fh
    MOV edi, offset aVersion
    CALL sub_40D910
    TEST rax, rax
    JLE loc_4702ED
loc_4702D2:
    LEA rdi, [rsp+88h+haystack]
    MOV esi, offset a24
    MOV [rsp+88h+var_49], 0
    CALL _strstr
    TEST rax, rax
    SETZ byte ptr [rbx+1]
loc_4702ED:
    LEA rdx, [rsp+88h+var_70]
    XOR eax, eax
    MOV esi, (offset aSrnPTUD+0Bh)
    MOV rdi, rbp
    CALL sub_5291B0
    TEST eax, eax
    JZ loc_470334
loc_470305:
    MOV rdi, [rsp+88h+var_70]
    CALL sub_53A3D0
    IMUL eax, 3E8h
    MOV ecx, 1
    TEST eax, eax
    MOV [rbx+10h], eax
    CMOVG ecx, eax
    XOR edx, edx
    MOV eax, 0F4240h
    DIV ecx
    MOV [rbx+14h], ecx
    TEST edx, edx
    SETNZ byte ptr [rbx+2]
loc_470334:
    MOVSXD rax, cs:optind
    MOV rdi, [rbp+rax*8+0]
    TEST rdi, rdi
    JZ loc_4703C4
loc_470345:
    CALL sub_40C290
    XOR r13d, r13d
    MOV r12, rax
    XOR ebp, ebp
loc_470352:
    MOV r14, r12
loc_470355:
    MOV esi, 25h
    MOV rdi, r14
    CALL _strchr
    TEST rax, rax
    MOV rbx, rax
    JZ loc_47044A
loc_47036E:
    MOVZX eax, byte ptr [rax+1]
    CMP al, 25h
    JNZ loc_4703C9
loc_470376:
    LEA r14, [rbx+1]
    MOV rdi, rbx
    MOV rsi, r14
    CALL sub_5369E0
    JMP loc_470355
loc_470387:
    MOVSX esi, byte ptr [rbx+2]
    MOV edi, offset aNcmsfixptbr
    LEA r14, [rbx+2]
    MOV r15d, esi
    CALL _strchr
    CMP r15b, 5Dh
    LEA rdx, [rbx+3]
    JZ loc_470606
loc_4703AA:
    TEST r15b, r15b
    JZ loc_4703C4
loc_4703AF:
    ADD r14, 1
    MOVZX ecx, byte ptr [r14]
    CMP cl, 5Dh
    JZ loc_470606
loc_4703C0:
    TEST cl, cl
    JNZ loc_4703AF
loc_4703C4:
    CALL sub_409830
loc_4703C9:
    CMP al, 5Bh
    LEA rdx, [rbx+1]
    MOV byte ptr [rbx], 0
    JZ loc_470387
loc_4703D4:
    LEA ecx, [rax-30h]
    MOV rbx, rdx
    CMP cl, 9
    JA loc_4703EE
loc_4703DF:
    ADD rbx, 1
    MOVZX eax, byte ptr [rbx]
    LEA ecx, [rax-30h]
    CMP cl, 9
    JBE loc_4703DF
loc_4703EE:
    TEST al, al
    MOV [rsp+88h+nptr], rdx
    JZ loc_4703C4
loc_4703F7:
    MOVSX esi, al
    MOV edi, offset aNcmsfixptbr
    LEA r15, [rbx+1]
    CALL _strchr
    MOV rdx, [rsp+88h+nptr]
    MOV byte ptr [rbx], 0
loc_470410:
    TEST rax, rax
    JZ loc_4703C4
loc_470415:
    SUB rax, offset aNcmsfixptbr
    MOV rdi, rdx
    CALL ds:funcs_47041E[rax*8]
    TEST rax, rax
    JZ loc_47065F
loc_47042E:
    TEST rbp, rbp
    MOV [rax+10h], r12
    JZ loc_470657
loc_47043B:
    MOV [r13+0], rax
loc_47043F:
    MOV r12, r15
    MOV r13, rax
    JMP loc_470352
loc_47044A:
    CMP byte ptr [r12], 0
    JNZ loc_470628
loc_470455:
    MOV r14, cs:qword_78D1F0
    MOV ebx, offset qword_78D628
    XOR byte ptr [r14], 1
    TEST rbp, rbp
    JZ loc_4704C0
loc_47046A:
    MOV ebx, offset qword_78D628
    MOV r12, rbp
loc_470472:
    MOV rax, [r12+10h]
    MOV rsi, rbx
    MOV rdx, [r14+8]
    MOVZX ecx, byte ptr [rax]
    SUB rsi, rdx
    TEST cl, cl
    JZ loc_4704AB
loc_470488:
    TEST esi, esi
    JLE loc_4704AB
loc_47048C:
    SUB esi, 1
    LEA rsi, [rax+rsi+1]
loc_470494:
    ADD rdx, 1
    ADD rax, 1
    MOV [rdx-1], cl
    MOVZX ecx, byte ptr [rax]
    TEST cl, cl
    JZ loc_4704AB
loc_4704A6:
    CMP rax, rsi
    JNZ loc_470494
loc_4704AB:
    MOV rdi, r12
    MOV [r14+8], rdx
    CALL qword ptr [r12+8]
    MOV r12, [r12]
    TEST r12, r12
    JNZ loc_470472
loc_4704C0:
    MOV edx, [r14+10h]
    MOV qword ptr [r14+8], offset buf
    LEA r12, [r14+18h]
    TEST edx, edx
    JS loc_470505
loc_4704D4:
    XOR esi, esi
    MOV rdi, r12
    CALL _gettimeofday
    MOV ecx, [r14+10h]
    MOV edi, 0F4240h
    CMP ecx, 0F4240h
    JG loc_470500
loc_4704EF:
    MOV rax, [r14+20h]
    MOV esi, [r14+14h]
    MOV edi, ecx
    CQO 
    IDIV rsi
    SUB edi, edx
loc_470500:
    CALL _usleep
loc_470505:
    XOR esi, esi
    MOV rdi, r12
    MOV r13, rbp
    CALL _gettimeofday
    XOR byte ptr [r14], 1
    TEST rbp, rbp
    JZ loc_470573
loc_47051B:
    NOP dword ptr [rax+rax+00h]
loc_470520:
    MOV rax, [r13+10h]
    MOV rdx, [r14+8]
    MOV rsi, rbx
    MOVZX ecx, byte ptr [rax]
    SUB rsi, rdx
    TEST cl, cl
    JZ loc_47055F
loc_470535:
    TEST esi, esi
    JLE loc_47055F
loc_470539:
    SUB esi, 1
    LEA rsi, [rax+rsi+1]
    JMP loc_47054D
loc_470548:
    CMP rax, rsi
    JZ loc_47055F
loc_47054D:
    ADD rdx, 1
    ADD rax, 1
    MOV [rdx-1], cl
    MOVZX ecx, byte ptr [rax]
    TEST cl, cl
    JNZ loc_470548
loc_47055F:
    MOV rdi, r13
    MOV [r14+8], rdx
    CALL qword ptr [r13+8]
    MOV r13, [r13+0]
    TEST r13, r13
    JNZ loc_470520
loc_470573:
    MOV rax, [r14+8]
    CMP rax, offset qword_78D628
    JNB loc_470592
loc_47057F:
    MOVZX edx, byte ptr [r14+3]
    LEA rcx, [rax+1]
    MOV [r14+8], rcx
    MOV [rax], dl
    MOV rax, [r14+8]
loc_470592:
    SUB rax, offset buf
    TEST eax, eax
    JLE loc_4705B6
loc_47059C:
    MOVSXD rdx, eax
    MOV esi, offset buf
    MOV edi, 1
    CALL sub_40C670
    MOV qword ptr [r14+8], offset buf
loc_4705B6:
    MOV eax, [r14+10h]
    TEST eax, eax
    JS loc_470505
loc_4705C2:
    XOR esi, esi
    MOV rdi, r12
    CALL _gettimeofday
    CMP byte ptr [r14+2], 0
    MOV ecx, [r14+10h]
    JZ loc_470618
loc_4705D7:
    IMUL rax, [r14+18h], 0F4240h
    MOV esi, [r14+14h]
    XOR edx, edx
    MOV edi, ecx
    ADD rax, [r14+20h]
    DIV rsi
    SUB edi, edx
loc_4705F0:
    MOV eax, ecx
    ADD ecx, edi
    SHR eax, 7
    CMP eax, edi
    CMOVA edi, ecx
    CALL _usleep
    JMP loc_470505
loc_470606:
    LEA r15, [r14+1]
    MOV byte ptr [r14], 0
    JMP loc_470410
loc_470618:
    MOV eax, [r14+20h]
    XOR edx, edx
    MOV edi, ecx
    DIV dword ptr [r14+14h]
    SUB edi, edx
    JMP loc_4705F0
loc_470628:
    MOV edi, 18h
    CALL sub_40C260
    TEST rbp, rbp
    MOV qword ptr [rax+8], offset nullsub_2
    MOV [rax+10h], r12
    JZ loc_47067E
loc_470643:
    MOV r14, cs:qword_78D1F0
    MOV [r13+0], rax
    XOR byte ptr [r14], 1
    JMP loc_47046A
loc_470657:
    MOV rbp, rax
    JMP loc_47043F
loc_47065F:
    MOV rdi, r12
    CALL _strlen
    LEA rdi, [r12+rax]
    MOV rsi, r15
    MOV r15, r12
    CALL sub_5369E0
    MOV rax, r13
    JMP loc_47043F
loc_47067E:
    MOV r14, cs:qword_78D1F0
    MOV rbp, rax
    XOR byte ptr [r14], 1
    JMP loc_47046A
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x78D1F0', '0x59', '0x74', '0x70', '0xA', '0xFFFFFFFF', '0x5636A1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Error Handling/Validation'}

##### Q 2 - not
```assembly
loc_415400:
    SUB rsp, 8
    MOV edx, cs:dest.c_iflag
    TEST edx, edx
    JZ loc_4154AB
loc_415412:
    LEA esi, [rdx-1]
    MOVSD xmm1, cs:qword_501418
    MOV cs:dest.c_iflag, esi
    MOV rcx, rsi
    MOVSD xmm0, qword ptr ds:dest.c_cflag[rsi*8]
    UCOMISD xmm0, xmm1
    JNB loc_415468
loc_415435:
    CVTTSD2SI rax, xmm0
    XOR rax, 0FFFFFFFFFFFFFFFFh
    JS loc_415484
loc_415440:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
loc_415449:
    CMP ecx, 7Eh
    JA loc_41549F
loc_41544E:
    MOV cs:dest.c_iflag, edx
    MOVSD qword ptr ds:dest.c_cflag[rsi*8], xmm0
    ADD rsp, 8
    RETN 
loc_415468:
    SUBSD xmm0, xmm1
    MOV rdi, 8000000000000000h
    CVTTSD2SI rax, xmm0
    XOR rax, rdi
    XOR rax, 0FFFFFFFFFFFFFFFFh
    JNS loc_415440
loc_415484:
    MOV rdi, rax
    PXOR xmm0, xmm0
    SHR rdi, 1
    AND eax, 1
    OR rdi, rax
    CVTSI2SD xmm0, rdi
    ADDSD xmm0, xmm0
    JMP loc_415449
loc_41549F:
    MOV edi, offset aStackOverflow
    XOR eax, eax
    CALL sub_40A1E0
loc_4154AB:
    MOV edi, offset aStackUnderflow
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'Comparison', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7431F0', '0x8', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing (Character Count)', 'inferred_category': 'Utility Function'}

##### T 2 - not
```assembly
loc_4196B0:
    SUB rsp, 8
    MOV edx, cs:buf.c_iflag
    TEST edx, edx
    JZ loc_41975B
loc_4196C2:
    LEA esi, [rdx-1]
    MOVSD xmm1, cs:qword_54F638
    MOV cs:buf.c_iflag, esi
    MOV rcx, rsi
    MOVSD xmm0, qword ptr ds:buf.c_cflag[rsi*8]
    UCOMISD xmm0, xmm1
    JNB loc_419718
loc_4196E5:
    CVTTSD2SI rax, xmm0
    XOR rax, 0FFFFFFFFFFFFFFFFh
    JS loc_419734
loc_4196F0:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
loc_4196F9:
    CMP ecx, 7Eh
    JA loc_41974F
loc_4196FE:
    MOV cs:buf.c_iflag, edx
    MOVSD qword ptr ds:buf.c_cflag[rsi*8], xmm0
    ADD rsp, 8
    RETN 
loc_419718:
    SUBSD xmm0, xmm1
    MOV rdi, 8000000000000000h
    CVTTSD2SI rax, xmm0
    XOR rax, rdi
    XOR rax, 0FFFFFFFFFFFFFFFFh
    JNS loc_4196F0
loc_419734:
    MOV rdi, rax
    PXOR xmm0, xmm0
    SHR rdi, 1
    AND eax, 1
    OR rdi, rax
    CVTSI2SD xmm0, rdi
    ADDSD xmm0, xmm0
    JMP loc_4196F9
loc_41974F:
    MOV edi, offset aStackOverflow
    XOR eax, eax
    CALL sub_40ABE0
loc_41975B:
    MOV edi, offset aStackUnderflow
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Comparison'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Search', 'inferred_category': 'StringProcessing'}

##### Q 3 - INET_setroute
```assembly
loc_4398C0:
    PUSH r15
    PUSH r14
    MOV r14d, edi
    PUSH r13
    PUSH r12
    MOV edi, offset unk_4F9D60
    PUSH rbp
    PUSH rbx
    SUB rsp, 0A8h
    MOV [rsp+0D8h+var_D0], rsi
    LEA rsi, [rsp+0D8h+var_D0]
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_40], rax
    XOR eax, eax
    CALL sub_439490
    MOV rdx, [rsp+0D8h+var_D0]
    CMP qword ptr [rdx], 0
    JZ loc_439CFB
loc_43990A:
    LEA rbx, [rsp+0D8h+var_B8]
    MOV r12d, eax
    MOV ecx, 0Fh
    XOR eax, eax
    MOV esi, 2Fh
    MOV rdi, rbx
    REP 
    LEA rax, [rdx+8]
    MOV [rsp+0D8h+var_D0], rax
    MOV rbp, [rdx]
    MOV rdi, rbp
    CALL _strchr
    TEST rax, rax
    MOV r13, rax
    JZ loc_439C78
loc_439944:
    LEA rdi, [rax+1]
    XOR esi, esi
    MOV edx, 20h
    CALL sub_4ECBE0
    MOV edx, 0FFFFFFFFh
    MOV ecx, eax
    LEA rsi, [rbx+8]
    SHR rdx, cl
    MOV rdi, rbp
    NOT edx
    BSWAP edx
    MOV dword ptr [rsp+0D8h+var_90+4], edx
    MOV edx, 2
    MOV byte ptr [r13+0], 0
    MOV word ptr [rsp+0D8h+var_90], dx
    MOV edx, r12d
    AND edx, 2
    CALL sub_4E19E0
    TEST eax, eax
    JS loc_439C8E
loc_43998F:
    MOV byte ptr [r13+0], 2Fh
    XOR ebp, ebp
loc_439996:
    MOV edx, r12d
    MOV r13d, 51EB851Fh
    AND edx, 1
    TEST r12d, r12d
    LEA r12, [rbx+18h]
    CMOVNZ eax, edx
    MOV rdx, [rsp+0D8h+var_D0]
    CMP eax, 1
    SBB eax, eax
    AND eax, 4
    ADD eax, 1
    MOV [rsp+0D8h+var_80], ax
    NOP dword ptr [rax+00000000h]
loc_4399C8:
    CMP qword ptr [rdx], 0
    JZ loc_439A00
loc_4399CE:
    LEA rsi, [rsp+0D8h+var_D0]
    MOV edi, offset unk_4F9CF8
    CALL sub_439490
    TEST al, 20h
    MOV rdx, [rsp+0D8h+var_D0]
    JZ loc_439AA8
loc_4399EA:
    AND eax, 3
    MOVZX eax, ds:word_4F9CF0[rax+rax]
    OR [rsp+0D8h+var_80], ax
    CMP qword ptr [rdx], 0
    JNZ loc_4399CE
loc_439A00:
    MOVZX edx, [rsp+0D8h+var_80]
    TEST dh, 2
    JZ loc_439A16
loc_439A0A:
    CMP [rsp+0D8h+var_60], 0
    JZ loc_439CED
loc_439A16:
    MOV eax, dword ptr [rsp+0D8h+var_90+4]
    TEST eax, eax
    JZ loc_439A4A
loc_439A1E:
    MOV ecx, eax
    TEST dl, 4
    BSWAP ecx
    MOV esi, ecx
    NOT esi
    JZ loc_439A34
loc_439A2B:
    CMP esi, 0FFFFFFFFh
    JNZ loc_439D20
loc_439A34:
    NEG ecx
    TEST ecx, esi
    JNZ loc_439D11
loc_439A3E:
    NOT eax
    TEST [rsp+0D8h+var_AC], eax
    JNZ loc_439D05
loc_439A4A:
    CMP r14d, 1
    JZ loc_439CB6
loc_439A54:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL sub_40B520
    MOV ecx, offset aSiocdelrt
    MOV rdx, rbx
    MOV esi, 890Ch
    MOV edi, eax
    CALL sub_40B810
loc_439A79:
    MOV rax, [rsp+0D8h+var_40]
    XOR rax, fs:28h
    JNZ loc_439D00
loc_439A90:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_439AA8:
    CMP eax, 10h
    MOV r15, [rdx-8]
    JZ loc_439BA8
loc_439AB5:
    CMP eax, 11h
    JZ loc_439B20
loc_439ABA:
    CMP eax, 12h
    JZ loc_439B68
loc_439AC3:
    CMP eax, 13h
    JZ loc_439BD8
loc_439ACC:
    CMP eax, 14h
    JZ loc_439C08
loc_439AD5:
    CMP eax, 15h
    JZ loc_439C38
loc_439ADE:
    CMP [rsp+0D8h+var_60], 0
    JNZ loc_439CFB
loc_439AEA:
    CMP eax, 16h
    JZ loc_439B11
loc_439AEF:
    TEST eax, eax
    JNZ loc_439CFB
loc_439AF7:
    CMP qword ptr [rdx+8], 0
    LEA rax, [rdx+8]
    MOV [rsp+0D8h+var_D0], rax
    JNZ loc_439CFB
loc_439B0B:
    MOV r15, [rdx]
    MOV rdx, rax
loc_439B11:
    MOV [rsp+0D8h+var_60], r15
    JMP loc_4399C8
loc_439B20:
    MOV eax, dword ptr [rsp+0D8h+var_90+4]
    TEST eax, eax
    JNZ loc_439CFB
loc_439B2C:
    LEA rsi, [rsp+0D8h+var_C8]
    XOR edx, edx
    MOV rdi, r15
    CALL sub_4E19E0
    TEST eax, eax
    JS loc_439D2C
loc_439B43:
    MOV rax, [rsp+0D8h+var_C8]
    MOV rdx, [rsp+0D8h+var_D0]
    MOV rbp, r15
    MOV [rsp+0D8h+var_90], rax
    MOV rax, [rsp+0D8h+var_C0]
    MOV [rsp+0D8h+var_88], rax
    JMP loc_4399C8
loc_439B68:
    TEST byte ptr [rsp+0D8h+var_80], 2
    JNZ loc_439CFB
loc_439B73:
    MOV edx, 1
    MOV rsi, r12
    MOV rdi, r15
    CALL sub_4E19E0
    OR [rsp+0D8h+var_80], 2
    TEST eax, eax
    JZ loc_439BC8
loc_439B8D:
    MOV rsi, r15
    JS loc_439CA0
loc_439B96:
    MOV edi, offset aGatewaySIsANet
    XOR eax, eax
    CALL sub_40A1E0
loc_439BA8:
    MOV rdi, r15
    CALL sub_4ECC20
    ADD eax, 1
    MOV rdx, [rsp+0D8h+var_D0]
    MOV [rsp+0D8h+var_68], ax
    JMP loc_4399C8
loc_439BC8:
    MOV rdx, [rsp+0D8h+var_D0]
    JMP loc_4399C8
loc_439BD8:
    MOV edx, 8000h
    MOV esi, 40h
    MOV rdi, r15
    OR [rsp+0D8h+var_80], 40h
    CALL sub_4ECBE0
    MOV rdx, [rsp+0D8h+var_D0]
    MOV [rsp+0D8h+var_58], rax
    JMP loc_4399C8
loc_439C08:
    MOV edx, 7FFFFFFFh
    MOV esi, 80h
    MOV rdi, r15
    OR [rsp+0D8h+var_80], 80h
    CALL sub_4ECBE0
    MOV rdx, [rsp+0D8h+var_D0]
    MOV [rsp+0D8h+var_50], rax
    JMP loc_4399C8
loc_439C38:
    MOV rdi, r15
    OR [rsp+0D8h+var_80], 100h
    CALL sub_4ECC20
    MOV [rsp+0D8h+var_48], ax
    CALL sub_4EAC60
    MUL r13d
    SHR edx, 5
    IMUL dx, [rsp+0D8h+var_48]
    MOV [rsp+0D8h+var_48], dx
    MOV rdx, [rsp+0D8h+var_D0]
    JMP loc_4399C8
loc_439C78:
    MOV edx, r12d
    LEA rsi, [rbx+8]
    MOV rdi, rbp
    AND edx, 2
    CALL sub_4E19E0
    TEST eax, eax
    JNS loc_439CAC
loc_439C8E:
    MOV rsi, rbp
    MOV edi, offset aResolvingS
    XOR eax, eax
    CALL sub_40A1E0
loc_439CA0:
    MOV edi, offset aResolvingS
    XOR eax, eax
    CALL sub_40A1E0
loc_439CAC:
    MOV ebp, offset aDefault
    JMP loc_439996
loc_439CB6:
    AND edx, 4
    JZ loc_439CC3
loc_439CBB:
    MOV dword ptr [rsp+0D8h+var_90+4], 0FFFFFFFFh
loc_439CC3:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL sub_40B520
    MOV ecx, offset aSiocaddrt
    MOV rdx, rbx
    MOV esi, 890Bh
    MOV edi, eax
    CALL sub_40B810
    JMP loc_439A79
loc_439CED:
    MOV [rsp+0D8h+var_60], (offset aTarSLo+8)
    JMP loc_439A16
loc_439CFB:
    CALL sub_408E80
loc_439D00:
    CALL ___stack_chk_fail
loc_439D05:
    MOV edi, offset aNetmaskAndRout
    XOR eax, eax
    CALL sub_40A1E0
loc_439D11:
    MOV rsi, rbp
    MOV edi, offset aBogusNetmaskS
    XOR eax, eax
    CALL sub_40A1E0
loc_439D20:
    MOV edi, offset aNetmask8xAndHo
    XOR eax, eax
    CALL sub_40A1E0
loc_439D2C:
    MOV rsi, r15
    MOV edi, offset aResolvingS
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Character'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### T 3 - INET_setroute
```assembly
loc_447190:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0A8h
    MOV rbx, [rsi]
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_40], rax
    XOR eax, eax
    MOV [rsp+0D8h+var_CC], edi
    TEST rbx, rbx
    JZ loc_447510
loc_4471C4:
    MOV r12, rsi
    MOV ebp, 7
    MOV r13d, offset unk_5478A0
    JMP loc_4471E9
loc_4471D8:
    ADD r13, rbp
    MOVSX rbp, byte ptr [r13+0]
    TEST bpl, bpl
    JZ loc_44744C
loc_4471E9:
    LEA rdi, [r13+2]
    MOV rsi, rbx
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4471D8
loc_4471F9:
    MOVZX r14d, byte ptr [r13+1]
    TEST r14b, 10h
    JZ loc_447487
loc_447208:
    CMP qword ptr [r12+8], 0
    JZ loc_447510
loc_447214:
    ADD r12, 10h
loc_447218:
    MOV rbx, [r12]
    MOVSX r15d, r14b
    TEST rbx, rbx
    JZ loc_447510
loc_447229:
    AND r14d, 2
    MOVSX eax, r14b
    MOV dword ptr [rsp+0D8h+var_D8], eax
loc_447234:
    LEA r13, [rsp+0D8h+var_B8]
    XOR eax, eax
    MOV ecx, 0Fh
    MOV esi, 2Fh
    LEA rbp, [r12+8]
    MOV rdi, r13
    REP 
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    MOV r14, rax
    JZ loc_44745B
loc_447264:
    LEA rdi, [rax+1]
    XOR esi, esi
    MOV edx, 20h
    CALL sub_539360
    MOV edx, 0FFFFFFFFh
    MOV ecx, eax
    LEA rsi, [r13+8]
    SHR rdx, cl
    MOV rdi, rbx
    MOV rax, rdx
    MOV edx, 2
    NOT eax
    BSWAP eax
    MOV dword ptr [rsp+0D8h+var_90+4], eax
    MOV byte ptr [r14], 0
    MOV word ptr [rsp+0D8h+var_90], dx
    MOV edx, dword ptr [rsp+0D8h+var_D8]
    CALL sub_52C190
    TEST eax, eax
    JS loc_447478
loc_4472AE:
    MOV byte ptr [r14], 2Fh
    XOR r14d, r14d
loc_4472B5:
    MOV edx, r15d
    MOV rbx, [r12+8]
    AND edx, 1
    TEST r15d, r15d
    CMOVNZ eax, edx
    CMP eax, 1
    SBB eax, eax
    AND eax, 4
    ADD eax, 1
    MOV [rsp+0D8h+var_80], ax
    LEA rax, [r13+18h]
    MOV [rsp+0D8h+var_D8], rax
    XCHG ax, ax
loc_4472E0:
    TEST rbx, rbx
    JZ loc_44735E
loc_4472E5:
    MOV r12d, 9
    MOV r15d, offset unk_547838
    JMP loc_44730C
loc_4472F8:
    MOVSX rdx, r12b
    ADD r15, rdx
    MOVZX r12d, byte ptr [r15]
    TEST r12b, r12b
    JZ loc_447408
loc_44730C:
    LEA rdi, [r15+2]
    MOV rsi, rbx
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4472F8
loc_44731C:
    MOVSX eax, byte ptr [r15+1]
    TEST al, 10h
    JZ loc_447440
loc_447329:
    MOV rcx, [rbp+8]
    TEST rcx, rcx
    JZ loc_447510
loc_447336:
    ADD rbp, 10h
    MOV r15, rcx
loc_44733D:
    TEST al, 20h
    JZ loc_447515
loc_447345:
    MOV rbx, [rbp+0]
    AND eax, 3
    MOVZX eax, ds:word_547830[rax+rax]
    OR [rsp+0D8h+var_80], ax
    TEST rbx, rbx
    JNZ loc_4472E5
loc_44735E:
    MOVZX edx, [rsp+0D8h+var_80]
    TEST dh, 2
    JZ loc_447374
loc_447368:
    CMP [rsp+0D8h+var_60], 0
    JZ loc_4474C7
loc_447374:
    MOV eax, dword ptr [rsp+0D8h+var_90+4]
    TEST eax, eax
    JZ loc_4473A8
loc_44737C:
    MOV ecx, eax
    TEST dl, 4
    BSWAP ecx
    MOV esi, ecx
    NOT esi
    JZ loc_447392
loc_447389:
    CMP esi, 0FFFFFFFFh
    JNZ loc_4474F0
loc_447392:
    NEG ecx
    TEST ecx, esi
    JNZ loc_4474E1
loc_44739C:
    NOT eax
    TEST [rsp+0D8h+var_AC], eax
    JNZ loc_4474D5
loc_4473A8:
    CMP [rsp+0D8h+var_CC], 1
    JZ loc_447490
loc_4473B3:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL sub_40CD40
    MOV ecx, offset aSiocdelrt
    MOV rdx, r13
    MOV esi, 890Ch
    MOV edi, eax
    CALL sub_40D030
loc_4473D8:
    MOV rax, [rsp+0D8h+var_40]
    XOR rax, fs:28h
    JNZ loc_4474FC
loc_4473EF:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_447408:
    CMP [rsp+0D8h+var_60], 0
    JNZ loc_447510
loc_447414:
    MOV rbx, [rbp+8]
    LEA rax, [rbp+8]
    TEST rbx, rbx
    JNZ loc_447510
loc_447425:
    MOV rdx, [rax-8]
    MOV rbp, rax
    MOV [rsp+0D8h+var_60], rdx
    JMP loc_4472E0
loc_447440:
    ADD rbp, 8
    MOV r15, rbx
    JMP loc_44733D
loc_44744C:
    MOV dword ptr [rsp+0D8h+var_D8], 0
    XOR r15d, r15d
    JMP loc_447234
loc_44745B:
    MOV edx, dword ptr [rsp+0D8h+var_D8]
    LEA rsi, [r13+8]
    MOV rdi, rbx
    MOV r14d, offset aDefault
    CALL sub_52C190
    TEST eax, eax
    JNS loc_4472B5
loc_447478:
    MOV rsi, rbx
    MOV edi, offset aResolvingS
    XOR eax, eax
    CALL sub_40ABE0
loc_447487:
    ADD r12, 8
    JMP loc_447218
loc_447490:
    AND edx, 4
    JZ loc_44749D
loc_447495:
    MOV dword ptr [rsp+0D8h+var_90+4], 0FFFFFFFFh
loc_44749D:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL sub_40CD40
    MOV ecx, offset aSiocaddrt
    MOV rdx, r13
    MOV esi, 890Bh
    MOV edi, eax
    CALL sub_40D030
    JMP loc_4473D8
loc_4474C7:
    MOV [rsp+0D8h+var_60], (offset aTarSLo+8)
    JMP loc_447374
loc_4474D5:
    MOV edi, offset aNetmaskAndRout
    XOR eax, eax
    CALL sub_40ABE0
loc_4474E1:
    MOV rsi, r14
    MOV edi, offset aBogusNetmaskS
    XOR eax, eax
    CALL sub_40ABE0
loc_4474F0:
    MOV edi, offset aNetmask8xAndHo
    XOR eax, eax
    CALL sub_40ABE0
loc_4474FC:
    CALL ___stack_chk_fail
loc_447501:
    TEST eax, eax
    JZ loc_447414
loc_447509:
    NOP dword ptr [rax+00000000h]
loc_447510:
    CALL sub_409830
loc_447515:
    CMP eax, 10h
    JZ loc_4475DA
loc_44751E:
    CMP eax, 11h
    JZ loc_447564
loc_447523:
    CMP eax, 12h
    JZ loc_4475A3
loc_447528:
    CMP eax, 13h
    JZ loc_4475FC
loc_447531:
    CMP eax, 14h
    JNZ loc_447640
loc_44753A:
    MOV edx, 7FFFFFFFh
    MOV esi, 80h
    MOV rdi, r15
    OR [rsp+0D8h+var_80], 80h
    CALL sub_539360
    MOV rbx, [rbp+0]
    MOV [rsp+0D8h+var_50], rax
    JMP loc_4472E0
loc_447564:
    MOV eax, dword ptr [rsp+0D8h+var_90+4]
    TEST eax, eax
    JNZ loc_447510
loc_44756C:
    LEA rsi, [rsp+0D8h+var_C8]
    XOR edx, edx
    MOV rdi, r15
    CALL sub_52C190
    TEST eax, eax
    JS loc_447631
loc_447583:
    MOV rax, [rsp+0D8h+var_C8]
    MOV rbx, [rbp+0]
    MOV r14, r15
    MOV [rsp+0D8h+var_90], rax
    MOV rax, [rsp+0D8h+var_C0]
    MOV [rsp+0D8h+var_88], rax
    JMP loc_4472E0
loc_4475A3:
    TEST byte ptr [rsp+0D8h+var_80], 2
    JNZ loc_447510
loc_4475AE:
    MOV rsi, [rsp+0D8h+var_D8]
    MOV edx, 1
    MOV rdi, r15
    CALL sub_52C190
    OR [rsp+0D8h+var_80], 2
    TEST eax, eax
    JZ loc_4475F3
loc_4475C9:
    MOV rsi, r15
    JS loc_447625
loc_4475CE:
    MOV edi, offset aGatewaySIsANet
    XOR eax, eax
    CALL sub_40ABE0
loc_4475DA:
    MOV rdi, r15
    CALL sub_539450
    ADD eax, 1
    MOV rbx, [rbp+0]
    MOV [rsp+0D8h+var_68], ax
    JMP loc_4472E0
loc_4475F3:
    MOV rbx, [rbp+0]
    JMP loc_4472E0
loc_4475FC:
    MOV edx, 8000h
    MOV esi, 40h
    MOV rdi, r15
    OR [rsp+0D8h+var_80], 40h
    CALL sub_539360
    MOV rbx, [rbp+0]
    MOV [rsp+0D8h+var_58], rax
    JMP loc_4472E0
loc_447625:
    MOV edi, offset aResolvingS
    XOR eax, eax
    CALL sub_40ABE0
loc_447631:
    MOV rsi, r15
    MOV edi, offset aResolvingS
    XOR eax, eax
    CALL sub_40ABE0
loc_447640:
    CMP eax, 15h
    JNZ loc_447685
loc_447645:
    MOV rdi, r15
    OR [rsp+0D8h+var_80], 100h
    CALL sub_539450
    MOV [rsp+0D8h+var_48], ax
    CALL sub_536E80
    MOV ecx, 51EB851Fh
    MOV rbx, [rbp+0]
    MUL ecx
    SHR edx, 5
    IMUL dx, [rsp+0D8h+var_48]
    MOV [rsp+0D8h+var_48], dx
    JMP loc_4472E0
loc_447685:
    CMP [rsp+0D8h+var_60], 0
    JNZ loc_447510
loc_447691:
    CMP eax, 16h
    JNZ loc_447501
loc_44769A:
    MOV rbx, [rbp+0]
    MOV rax, rbp
    JMP loc_447425
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'ControlFlow'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Search (Reverse)', 'inferred_category': 'Utility'}

##### Q 4 - builtin_continue
```assembly
loc_475FA0:

loc_476010:
    MOV rax, cs:qword_7431F0
    MOV byte ptr [rax+59h], 1
    JMP sub_475FA0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3', '0x1', '0xFFFFFFFD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing or Similar Data Structure Manipulation', 'inferred_category': 'Utility Function'}

##### T 4 - builtin_continue
```assembly
loc_493EF0:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOV rbx, cs:qword_78D1F0
    MOV edx, [rbx+74h]
    MOV byte ptr [rbx+59h], 1
    TEST edx, edx
    JZ loc_493F70
loc_493F0B:
    MOV byte ptr [rbx+59h], 2
    MOV rdi, [rdi+8]
    TEST rdi, rdi
    JZ loc_493FA8
loc_493F1C:
    MOV edx, 0Ah
    XOR esi, esi
    CALL sub_40E6F0
    MOV rdx, cs:qword_78D1E8
    MOV edx, [rdx]
    TEST edx, edx
    JNZ loc_493F39
loc_493F35:
    TEST eax, eax
    JNZ loc_493F90
loc_493F39:
    MOV rsi, [rbp+0]
    MOV edi, offset aSBadArguments
    XOR eax, eax
    CALL sub_40AC80
    MOV dword ptr [rbx+70h], 0FFFFFFFFh
loc_493F50:
    MOV edx, [rbx+74h]
    MOV byte ptr [rbx+59h], 1
    MOV eax, 0FFFFFFFFh
loc_493F5C:
    CMP edx, eax
    JNB loc_493F63
loc_493F60:
    MOV [rbx+70h], edx
loc_493F63:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_493F70:
    MOV rsi, [rdi]
    XOR eax, eax
    MOV edi, offset unk_5636A1
    CALL sub_40AC80
    MOV byte ptr [rbx+59h], 0
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_493F90:
    CMP qword ptr [rbp+10h], 0
    JNZ loc_493F39
loc_493F97:
    CMP eax, 0FFFFFFFFh
    MOV [rbx+70h], eax
    JZ loc_493F50
loc_493F9F:
    MOV edx, [rbx+74h]
    JMP loc_493F5C
loc_493FA8:
    MOV dword ptr [rbx+70h], 1
    MOV eax, 1
    JMP loc_493F5C
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3', '0x1', '0xFFFFFFFD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### Q 5 - udhcp_str2nip
```assembly
loc_455C90:
    PUSH rbx
    MOV edx, 2
    MOV rbx, rsi
    XOR esi, esi
    CALL sub_4EDA20
    MOV rdi, rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_455CB9
loc_455CAA:
    MOV eax, [rdi+8]
    MOV [rbx], eax
    CALL _free
    MOV eax, 1
loc_455CB9:
    POP rbx
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xF000', '0xA000', '0xFFFFFFFF', '0x5155E2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'File Handling', 'inferred_category': 'Interfacing/Wrapper'}

##### T 5 - udhcp_str2nip
```assembly
loc_469A70:
    PUSH rbx
    MOV edx, 2
    MOV rbx, rsi
    XOR esi, esi
    CALL sub_53AFD0
    MOV rdi, rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_469A99
loc_469A8A:
    MOV eax, [rdi+8]
    MOV [rbx], eax
    CALL _free
    MOV eax, 1
loc_469A99:
    POP rbx
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0xA000', '0xFFFFFFFF', '0x1', '0x8', '0x2', '0x4', '0xFFF', '0x563626'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File System Interaction', 'inferred_category': 'System/OS Interaction'}

##### Q 6 - df_main
```assembly
loc_4B30D0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset aKptaibHm
    SUB rsp, 0C8h
    MOV rax, fs:28h
    MOV [rsp+0F8h+var_40], rax
    XOR eax, eax
    LEA rdx, [rsp+0F8h+s2]
    CALL sub_4DFD70
    MOV ebp, eax
    AND eax, 80h
    CMP eax, 1
    SBB r14, r14
    AND r14, 0FFFFFFFFFFF00400h
    ADD r14, 100000h
    TEST bpl, 20h
    JZ loc_4B3183
loc_4B312A:
    CMP cs:byte_500040, 0
    MOV r14, [rsp+0F8h+s2]
    JZ loc_4B3440
loc_4B313C:
    MOV r13d, offset byte_500040
    XOR r12d, r12d
    JMP loc_4B3169
loc_4B3150:
    ADD r12d, 1
    ADD r13, 8
    MOVSXD rax, r12d
    CMP ds:byte_500040[rax*8], 0
    JZ loc_4B3440
loc_4B3169:
    MOV rsi, r14
    MOV rdi, r13
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4B3150
loc_4B3178:
    MOVSXD r12, r12d
    MOV r14d, ds:dword_500044[r12*8]
loc_4B3183:
    MOV edi, offset aPosixlyCorrect
    CALL _getenv
    TEST rax, rax
    MOV eax, 200h
    CMOVNZ r14, rax
    TEST bpl, 40h
    MOV eax, ebp
    JZ loc_4B31C8
loc_4B31A1:
    AND eax, 10h
    MOV [rsp+0F8h+var_F0], eax
    MOV eax, ebp
    JNZ loc_4B35AB
loc_4B31B0:
    AND eax, 2
    XOR r14d, r14d
    MOV ecx, offset unk_51904A
    MOV [rsp+0F8h+var_E0], eax
    JMP loc_4B31E3
loc_4B31C8:
    AND eax, 10h
    MOV [rsp+0F8h+var_F0], eax
    MOV eax, ebp
    JZ loc_4B35BF
loc_4B31D7:
    AND eax, 2
    MOV ecx, offset aInodes
    MOV [rsp+0F8h+var_E0], eax
loc_4B31E3:
    MOV edi, [rsp+0F8h+var_E0]
    MOV edx, offset aUse
    MOV r8d, offset aCapacity
    MOV eax, ebp
    MOV esi, offset aType_0
    TEST edi, edi
    MOV edi, 1
    CMOVZ r8, rdx
    AND eax, 4
    MOV edx, offset buf
    CMOVNZ rdx, rsi
    MOV [rsp+0F8h+var_DC], eax
    MOV esi, offset aFilesystemS15s
    XOR eax, eax
    CALL ___printf_chk
    MOVSXD rax, cs:optind
    LEA rax, [rbx+rax*8]
    XOR ebx, ebx
    CMP qword ptr [rax], 0
    MOV [rsp+0F8h+var_F8], rax
    JZ loc_4B35ED
loc_4B323B:
    AND ebp, 8
    MOV [rsp+0F8h+var_E8], 0
    MOV [rsp+0F8h+var_E4], ebp
    NOP word ptr [rax+rax+00h]
loc_4B3250:
    TEST rbx, rbx
    JZ loc_4B3408
loc_4B3259:
    MOV rdi, rbx
    CALL _getmntent
    TEST rax, rax
    JZ loc_4B34C0
loc_4B326A:
    MOV rbp, [rax+8]
    LEA rsi, [rsp+0F8h+var_B8]
    MOV r12, [rax]
    MOV r13, [rax+10h]
    MOV rdi, rbp
    CALL _statfs64
    TEST eax, eax
    JNZ loc_4B3468
loc_4B328A:
    CMP [rsp+0F8h+var_70], 0
    JNZ loc_4B32A2
loc_4B3295:
    MOV rax, [rsp+0F8h+var_B0]
    MOV [rsp+0F8h+var_70], rax
loc_4B32A2:
    TEST rbx, rbx
    MOV rax, [rsp+0F8h+var_A8]
    JZ loc_4B32B9
loc_4B32AC:
    TEST rax, rax
    JNZ loc_4B32B9
loc_4B32B1:
    MOV esi, [rsp+0F8h+var_E4]
    TEST esi, esi
    JZ loc_4B3250
loc_4B32B9:
    MOV ecx, [rsp+0F8h+var_F0]
    TEST ecx, ecx
    JNZ loc_4B3480
loc_4B32C5:
    MOV rcx, [rsp+0F8h+var_A0]
    MOV rdx, [rsp+0F8h+var_98]
loc_4B32CF:
    SUB rax, rcx
    XOR r15d, r15d
    ADD rdx, rax
    MOV rcx, rdx
    JZ loc_4B32F7
loc_4B32DD:
    LEA rax, [rax+rax*4]
    LEA rdx, [rax+rax*4]
    MOV rax, rcx
    SHR rax, 1
    LEA rax, [rax+rdx*4]
    XOR edx, edx
    DIV rcx
    MOV r15, rax
loc_4B32F7:
    MOV edi, offset aRootfs
    MOV ecx, 7
    MOV rsi, r12
    REPE 
    JZ loc_4B3250
loc_4B330C:
    LEA rdi, [rsp+0F8h+var_C8]
    MOV rsi, r12
    CALL sub_4EB8C0
    MOV edx, [rsp+0F8h+var_E0]
    MOV r12, rax
    MOV eax, [rsp+0F8h+var_C0]
    TEST edx, edx
    SETZ [rsp+0F8h+var_E9]
    CMP eax, 14h
    MOVZX edx, [rsp+0F8h+var_E9]
    JBE loc_4B333D
loc_4B3335:
    TEST dl, dl
    JNZ loc_4B3550
loc_4B333D:
    MOV ecx, 14h
    MOV r8d, offset buf
    MOV rdx, r12
    SUB ecx, eax
    MOV esi, offset aSS_27
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B335E:
    MOV rdi, r12
    CALL _free
    MOV eax, [rsp+0F8h+var_DC]
    TEST eax, eax
    JNZ loc_4B34F8
loc_4B3372:
    MOV rsi, [rsp+0F8h+var_70]
    MOV rdi, [rsp+0F8h+var_A8]
    MOV rdx, r14
    CALL sub_4E13E0
    MOV esi, offset a9s
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rdi, [rsp+0F8h+var_A8]
    SUB rdi, [rsp+0F8h+var_A0]
    MOV rdx, r14
    MOV rsi, [rsp+0F8h+var_70]
    CALL sub_4E13E0
    MOV esi, 5190C3h
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rsi, [rsp+0F8h+var_70]
    MOV rdi, [rsp+0F8h+var_98]
    MOV rdx, r14
    CALL sub_4E13E0
    MOV r8, rbp
    MOV rdx, rax
    MOV ecx, r15d
    XOR eax, eax
    MOV esi, offset a9s3uS
    MOV edi, 1
    CALL ___printf_chk
    TEST rbx, rbx
    JNZ loc_4B3259
loc_4B3401:
    NOP dword ptr [rax+00000000h]
loc_4B3408:
    MOV r12, [rsp+0F8h+var_F8]
loc_4B340C:
    MOV rbp, [r12]
    LEA r13, [r12+8]
    TEST rbp, rbp
    JZ loc_4B34C8
loc_4B341E:
    MOV esi, 1
    MOV rdi, rbp
    MOV r12, r13
    CALL sub_4DEAC0
    TEST rax, rax
    JZ loc_4B3570
loc_4B3437:
    MOV [rsp+0F8h+var_F8], r13
    JMP loc_4B326A
loc_4B3440:
    MOV rdi, r14
    MOV ecx, offset byte_500040
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 1
    CALL sub_4ECBC0
    MOV r14, rax
    JMP loc_4B3183
loc_4B3468:
    MOV rdi, rbp
    CALL sub_409E60
    MOV [rsp+0F8h+var_E8], 1
    JMP loc_4B3250
loc_4B3480:
    MOV rcx, [rsp+0F8h+var_88]
    MOV rax, [rsp+0F8h+var_90]
    TEST r14, r14
    SETNZ r14b
    MOV [rsp+0F8h+var_70], 1
    MOVZX r14d, r14b
    MOV [rsp+0F8h+var_A8], rax
    MOV [rsp+0F8h+var_A0], rcx
    MOV rdx, rcx
    MOV [rsp+0F8h+var_98], rcx
    JMP loc_4B32CF
loc_4B34C0:
    MOV rdi, rbx
    CALL _endmntent
loc_4B34C8:
    MOV rbx, [rsp+0F8h+var_40]
    XOR rbx, fs:28h
    MOV eax, [rsp+0F8h+var_E8]
    JNZ loc_4B3614
loc_4B34E3:
    ADD rsp, 0C8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B34F8:
    LEA rdi, [rsp+0F8h+var_C8]
    MOV rsi, r13
    CALL sub_4EB8C0
    MOV r13, rax
    MOV eax, [rsp+0F8h+var_C0]
    CMP eax, 0Ah
    JBE loc_4B3518
loc_4B3511:
    CMP [rsp+0F8h+var_E9], 0
    JNZ loc_4B3590
loc_4B3518:
    MOV ecx, 0Ah
    MOV r8d, offset buf
    MOV rdx, r13
    SUB ecx, eax
    MOV esi, offset unk_5190BB
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B3539:
    MOV rdi, r13
    CALL _free
    JMP loc_4B3372
loc_4B3550:
    MOV ecx, offset buf
    MOV rdx, r12
    MOV esi, offset aS20s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B335E
loc_4B3570:
    MOV rsi, rbp
    MOV edi, offset aSCanTFindMount
    CALL sub_40A280
    MOV [rsp+0F8h+var_E8], 1
    JMP loc_4B340C
loc_4B3590:
    MOV ecx, offset buf
    MOV rdx, r13
    MOV esi, offset aS31s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B3539
loc_4B35AB:
    AND eax, 2
    XOR r14d, r14d
    MOV ecx, offset aInodes
    MOV [rsp+0F8h+var_E0], eax
    JMP loc_4B31E3
loc_4B35BF:
    AND eax, 2
    MOV rdi, r14
    SETNZ dl
    XOR esi, esi
    MOV [rsp+0F8h+var_E0], eax
    MOVZX edx, dl
    CALL sub_4E13E0
    MOV edi, offset aSBlocks
    MOV rsi, rax
    XOR eax, eax
    CALL sub_40B190
    MOV rcx, rax
    JMP loc_4B31E3
loc_4B35ED:
    MOV esi, (offset aNTR+5)
    MOV edi, offset aProcMounts
    CALL _setmntent
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4B323B
loc_4B3608:
    MOV edi, offset aProcMounts
    XOR eax, eax
    CALL sub_409DA0
loc_4B3614:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['File Descriptor', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['I/O Operations', 'Error Handling', 'Control Flow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4F85E8', '0x50', '0xFF', '0x10', '0xFFFFF', '0Ah', '0x3', '0x62', '0x77', '0x33', '0x70', '0x64', '0x63', '0x31', '0xFFFD', '0x206', '0x3238', '0x3734', '0x6E69', '0x6164', '0x6174'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 1, 'inferred_algorithm': 'Unknown', 'inferred_category': 'Device Control/Miscellaneous'}

##### T 6 - df_main
```assembly
loc_4EAED0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset aKptaibHm
    SUB rsp, 0C8h
    MOV rax, fs:28h
    MOV [rsp+0F8h+var_40], rax
    XOR eax, eax
    LEA rdx, [rsp+0F8h+s2]
    CALL sub_5291B0
    MOV ebp, eax
    AND eax, 80h
    CMP eax, 1
    SBB r14, r14
    AND r14, 0FFFFFFFFFFF00400h
    ADD r14, 100000h
    TEST bpl, 20h
    JZ loc_4EAF83
loc_4EAF2A:
    CMP cs:byte_54DAE0, 0
    MOV r14, [rsp+0F8h+s2]
    JZ loc_4EB240
loc_4EAF3C:
    MOV r13d, offset byte_54DAE0
    XOR r12d, r12d
    JMP loc_4EAF69
loc_4EAF50:
    ADD r12d, 1
    ADD r13, 8
    MOVSXD rax, r12d
    CMP ds:byte_54DAE0[rax*8], 0
    JZ loc_4EB240
loc_4EAF69:
    MOV rsi, r14
    MOV rdi, r13
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4EAF50
loc_4EAF78:
    MOVSXD r12, r12d
    MOV r14d, ds:dword_54DAE4[r12*8]
loc_4EAF83:
    MOV edi, offset aPosixlyCorrect
    CALL _getenv
    TEST rax, rax
    MOV eax, 200h
    CMOVNZ r14, rax
    TEST bpl, 40h
    MOV eax, ebp
    JZ loc_4EAFC8
loc_4EAFA1:
    AND eax, 10h
    MOV [rsp+0F8h+var_F0], eax
    MOV eax, ebp
    JNZ loc_4EB3AB
loc_4EAFB0:
    AND eax, 2
    XOR r14d, r14d
    MOV ecx, offset unk_567006
    MOV [rsp+0F8h+var_E0], eax
    JMP loc_4EAFE3
loc_4EAFC8:
    AND eax, 10h
    MOV [rsp+0F8h+var_F0], eax
    MOV eax, ebp
    JZ loc_4EB3BF
loc_4EAFD7:
    AND eax, 2
    MOV ecx, offset aInodes
    MOV [rsp+0F8h+var_E0], eax
loc_4EAFE3:
    MOV edi, [rsp+0F8h+var_E0]
    MOV edx, offset aUse
    MOV r8d, offset aCapacity
    MOV eax, ebp
    MOV esi, offset aType_0
    TEST edi, edi
    MOV edi, 1
    CMOVZ r8, rdx
    AND eax, 4
    MOV edx, offset data
    CMOVNZ rdx, rsi
    MOV [rsp+0F8h+var_DC], eax
    MOV esi, offset aFilesystemS15s
    XOR eax, eax
    CALL ___printf_chk
    MOVSXD rax, cs:optind
    LEA rax, [rbx+rax*8]
    XOR ebx, ebx
    CMP qword ptr [rax], 0
    MOV [rsp+0F8h+var_F8], rax
    JZ loc_4EB3ED
loc_4EB03B:
    AND ebp, 8
    MOV [rsp+0F8h+var_E8], 0
    MOV [rsp+0F8h+var_E4], ebp
    NOP word ptr [rax+rax+00h]
loc_4EB050:
    TEST rbx, rbx
    JZ loc_4EB208
loc_4EB059:
    MOV rdi, rbx
    CALL _getmntent
    TEST rax, rax
    JZ loc_4EB2C0
loc_4EB06A:
    MOV rbp, [rax+8]
    LEA rsi, [rsp+0F8h+var_B8]
    MOV r12, [rax]
    MOV r13, [rax+10h]
    MOV rdi, rbp
    CALL _statfs64
    TEST eax, eax
    JNZ loc_4EB268
loc_4EB08A:
    CMP [rsp+0F8h+var_70], 0
    JNZ loc_4EB0A2
loc_4EB095:
    MOV rax, [rsp+0F8h+var_B0]
    MOV [rsp+0F8h+var_70], rax
loc_4EB0A2:
    TEST rbx, rbx
    MOV rax, [rsp+0F8h+var_A8]
    JZ loc_4EB0B9
loc_4EB0AC:
    TEST rax, rax
    JNZ loc_4EB0B9
loc_4EB0B1:
    MOV esi, [rsp+0F8h+var_E4]
    TEST esi, esi
    JZ loc_4EB050
loc_4EB0B9:
    MOV ecx, [rsp+0F8h+var_F0]
    TEST ecx, ecx
    JNZ loc_4EB280
loc_4EB0C5:
    MOV rcx, [rsp+0F8h+var_A0]
    MOV rdx, [rsp+0F8h+var_98]
loc_4EB0CF:
    SUB rax, rcx
    XOR r15d, r15d
    ADD rdx, rax
    MOV rcx, rdx
    JZ loc_4EB0F7
loc_4EB0DD:
    LEA rax, [rax+rax*4]
    LEA rdx, [rax+rax*4]
    MOV rax, rcx
    SHR rax, 1
    LEA rax, [rax+rdx*4]
    XOR edx, edx
    DIV rcx
    MOV r15, rax
loc_4EB0F7:
    MOV edi, offset aRootfs
    MOV ecx, 7
    MOV rsi, r12
    REPE 
    JZ loc_4EB050
loc_4EB10C:
    LEA rdi, [rsp+0F8h+var_C8]
    MOV rsi, r12
    CALL sub_537E60
    MOV edx, [rsp+0F8h+var_E0]
    MOV r12, rax
    MOV eax, [rsp+0F8h+var_C0]
    TEST edx, edx
    SETZ [rsp+0F8h+var_E9]
    CMP eax, 14h
    MOVZX edi, [rsp+0F8h+var_E9]
    JBE loc_4EB13E
loc_4EB135:
    TEST dil, dil
    JNZ loc_4EB350
loc_4EB13E:
    MOV ecx, 14h
    MOV r8d, offset data
    MOV rdx, r12
    SUB ecx, eax
    MOV esi, offset aSS_27
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4EB15F:
    MOV rdi, r12
    CALL _free
    MOV eax, [rsp+0F8h+var_DC]
    TEST eax, eax
    JNZ loc_4EB2F8
loc_4EB173:
    MOV rsi, [rsp+0F8h+var_70]
    MOV rdi, [rsp+0F8h+var_A8]
    MOV rdx, r14
    CALL sub_52B700
    MOV esi, offset a9s
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rdi, [rsp+0F8h+var_A8]
    SUB rdi, [rsp+0F8h+var_A0]
    MOV rdx, r14
    MOV rsi, [rsp+0F8h+var_70]
    CALL sub_52B700
    MOV esi, 56707Fh
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rsi, [rsp+0F8h+var_70]
    MOV rdi, [rsp+0F8h+var_98]
    MOV rdx, r14
    CALL sub_52B700
    MOV r8, rbp
    MOV rdx, rax
    MOV ecx, r15d
    XOR eax, eax
    MOV esi, offset a9s3uS
    MOV edi, 1
    CALL ___printf_chk
    TEST rbx, rbx
    JNZ loc_4EB059
loc_4EB202:
    NOP word ptr [rax+rax+00h]
loc_4EB208:
    MOV r12, [rsp+0F8h+var_F8]
loc_4EB20C:
    MOV rbp, [r12]
    LEA r13, [r12+8]
    TEST rbp, rbp
    JZ loc_4EB2C8
loc_4EB21E:
    MOV esi, 1
    MOV rdi, rbp
    MOV r12, r13
    CALL sub_527710
    TEST rax, rax
    JZ loc_4EB370
loc_4EB237:
    MOV [rsp+0F8h+var_F8], r13
    JMP loc_4EB06A
loc_4EB240:
    MOV rdi, r14
    MOV ecx, offset byte_54DAE0
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 1
    CALL sub_539340
    MOV r14, rax
    JMP loc_4EAF83
loc_4EB268:
    MOV rdi, rbp
    CALL sub_40A870
    MOV [rsp+0F8h+var_E8], 1
    JMP loc_4EB050
loc_4EB280:
    MOV rcx, [rsp+0F8h+var_88]
    MOV rax, [rsp+0F8h+var_90]
    TEST r14, r14
    SETNZ r14b
    MOV [rsp+0F8h+var_70], 1
    MOVZX r14d, r14b
    MOV [rsp+0F8h+var_A8], rax
    MOV [rsp+0F8h+var_A0], rcx
    MOV rdx, rcx
    MOV [rsp+0F8h+var_98], rcx
    JMP loc_4EB0CF
loc_4EB2C0:
    MOV rdi, rbx
    CALL _endmntent
loc_4EB2C8:
    MOV rbx, [rsp+0F8h+var_40]
    XOR rbx, fs:28h
    MOV eax, [rsp+0F8h+var_E8]
    JNZ loc_4EB414
loc_4EB2E3:
    ADD rsp, 0C8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4EB2F8:
    LEA rdi, [rsp+0F8h+var_C8]
    MOV rsi, r13
    CALL sub_537E60
    MOV r13, rax
    MOV eax, [rsp+0F8h+var_C0]
    CMP eax, 0Ah
    JBE loc_4EB318
loc_4EB311:
    CMP [rsp+0F8h+var_E9], 0
    JNZ loc_4EB390
loc_4EB318:
    MOV ecx, 0Ah
    MOV r8d, offset data
    MOV rdx, r13
    SUB ecx, eax
    MOV esi, offset unk_567077
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4EB339:
    MOV rdi, r13
    CALL _free
    JMP loc_4EB173
loc_4EB350:
    MOV ecx, offset data
    MOV rdx, r12
    MOV esi, offset aS20s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4EB15F
loc_4EB370:
    MOV rsi, rbp
    MOV edi, offset aSCanTFindMount
    CALL sub_40AC80
    MOV [rsp+0F8h+var_E8], 1
    JMP loc_4EB20C
loc_4EB390:
    MOV ecx, offset data
    MOV rdx, r13
    MOV esi, offset aS31s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4EB339
loc_4EB3AB:
    AND eax, 2
    XOR r14d, r14d
    MOV ecx, offset aInodes
    MOV [rsp+0F8h+var_E0], eax
    JMP loc_4EAFE3
loc_4EB3BF:
    AND eax, 2
    MOV rdi, r14
    SETNZ dl
    XOR esi, esi
    MOV [rsp+0F8h+var_E0], eax
    MOVZX edx, dl
    CALL sub_52B700
    MOV edi, offset aSBlocks
    MOV rsi, rax
    XOR eax, eax
    CALL sub_40C860
    MOV rcx, rax
    JMP loc_4EAFE3
loc_4EB3ED:
    MOV esi, (offset aNTR+5)
    MOV edi, offset aProcMounts
    CALL _setmntent
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4EB03B
loc_4EB408:
    MOV edi, offset aProcMounts
    XOR eax, eax
    CALL sub_40A7B0
loc_4EB414:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['UnknownType'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'ControlFlow', 'SystemCall'], 'loop_indicators': ['loc_421E34', 'loc_421E8E'], 'number_of_distinct_subroutine_call_targets': 23, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x78D1E8', '0x2F', '0x40'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 28, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 6, 'inferred_algorithm': 'File Handling and Input Validation', 'inferred_category': 'IO System Call Handler'}

##### Q 7 - handle_net_output
```assembly
loc_43B560:
    MOVSXD rdi, edi
    SUB rsp, 118h
    ADD rdi, 743250h
    MOV rax, fs:28h
    MOV [rsp+118h+var_10], rax
    XOR eax, eax
    CMP rdi, (offset dest.c_cc+17h)
    JBE loc_43B627
loc_43B591:
    MOVZX eax, cs:dest.c_cc+17h
    MOV ecx, 743251h
    MOV rsi, rsp
    MOV rdx, rsp
    CMP al, 1Dh
    JNZ loc_43B5CD
loc_43B5A7:
    JMP loc_43B620
loc_43B5B0:
    CMP al, 0Dh
    JZ loc_43B610
loc_43B5B4:
    CMP al, 0Ah
    JZ loc_43B610
loc_43B5B8:
    ADD rdx, 1
    CMP rdi, rcx
    JBE loc_43B5E3
loc_43B5C1:
    ADD rcx, 1
    MOVZX eax, byte ptr [rcx-1]
    CMP al, 1Dh
    JZ loc_43B620
loc_43B5CD:
    CMP al, 0FFh
    MOV [rdx], al
    JNZ loc_43B5B0
loc_43B5D3:
    MOV [rdx+1], al
    ADD rdx, 1
    ADD rdx, 1
    CMP rdi, rcx
    JA loc_43B5C1
loc_43B5E3:
    CMP rsi, rdx
    JZ loc_43B5F5
loc_43B5E8:
    SUB rdx, rsi
    MOV edi, 3
    CALL sub_40BDA0
loc_43B5F5:
    MOV rax, [rsp+118h+var_10]
    XOR rax, fs:28h
    JNZ loc_43B62F
loc_43B608:
    ADD rsp, 118h
    RETN 
loc_43B610:
    MOV byte ptr [rdx], 0Dh
    MOV byte ptr [rdx+1], 0Ah
    ADD rdx, 1
    JMP loc_43B5B8
loc_43B620:
    CALL sub_43B3B0
    JMP loc_43B5F5
loc_43B627:
    MOV rsi, rsp
    MOV rdx, rsp
    JMP loc_43B5E3
loc_43B62F:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x4', '0x28', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Search', 'inferred_category': 'Utility/Helper'}

##### T 7 - handle_net_output
```assembly
loc_449020:
    MOVSXD rdi, edi
    SUB rsp, 118h
    ADD rdi, 78D250h
    MOV rax, fs:28h
    MOV [rsp+118h+var_10], rax
    XOR eax, eax
    CMP rdi, (offset buf.c_cc+17h)
    JBE loc_4490E7
loc_449051:
    MOVZX eax, cs:buf.c_cc+17h
    MOV ecx, 78D251h
    MOV rsi, rsp
    MOV rdx, rsp
    CMP al, 1Dh
    JNZ loc_44908D
loc_449067:
    JMP loc_4490E0
loc_449070:
    CMP al, 0Dh
    JZ loc_4490D0
loc_449074:
    CMP al, 0Ah
    JZ loc_4490D0
loc_449078:
    ADD rdx, 1
    CMP rdi, rcx
    JBE loc_4490A3
loc_449081:
    ADD rcx, 1
    MOVZX eax, byte ptr [rcx-1]
    CMP al, 1Dh
    JZ loc_4490E0
loc_44908D:
    CMP al, 0FFh
    MOV [rdx], al
    JNZ loc_449070
loc_449093:
    MOV [rdx+1], al
    ADD rdx, 1
    ADD rdx, 1
    CMP rdi, rcx
    JA loc_449081
loc_4490A3:
    CMP rsi, rdx
    JZ loc_4490B5
loc_4490A8:
    SUB rdx, rsi
    MOV edi, 3
    CALL sub_40D740
loc_4490B5:
    MOV rax, [rsp+118h+var_10]
    XOR rax, fs:28h
    JNZ loc_4490EF
loc_4490C8:
    ADD rsp, 118h
    RETN 
loc_4490D0:
    MOV byte ptr [rdx], 0Dh
    MOV byte ptr [rdx+1], 0Ah
    ADD rdx, 1
    JMP loc_449078
loc_4490E0:
    CALL sub_448C20
    JMP loc_4490B5
loc_4490E7:
    MOV rsi, rsp
    MOV rdx, rsp
    JMP loc_4490A3
loc_4490EF:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x28', '0x0', '0x4', '0x1', '0x0', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Search/Filtering'}

##### Q 8 - next_line
```assembly
loc_4D25A0:
    SUB rsp, 8
    CALL sub_4D2560
    MOV rdx, cs:qword_7431F0
    MOV rdx, [rdx+8]
    SUB rdx, 1
    CMP rax, rdx
    JNB loc_4D25C8
loc_4D25BD:
    XOR edx, edx
    CMP byte ptr [rax], 0Ah
    SETZ dl
    ADD rax, rdx
loc_4D25C8:
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x32', '0x4E20', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File Handling', 'inferred_category': 'I/O Operations'}

##### T 8 - next_line
```assembly
loc_514DD0:
    MOV rdx, cs:qword_78D1F0
    PUSH rbx
    MOV rax, rdi
    MOV rdx, [rdx+8]
    LEA rbx, [rdx-1]
    CMP rdi, rbx
    JNB loc_514E0E
loc_514DE8:
    SUB rdx, rdi
    MOV esi, 0Ah
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    JZ loc_514E10
loc_514DFE:
    CMP rbx, rax
    JBE loc_514E0E
loc_514E03:
    XOR edx, edx
    CMP byte ptr [rax], 0Ah
    SETZ dl
    ADD rax, rdx
loc_514E0E:
    POP rbx
    RETN 
loc_514E10:
    MOV rax, rbx
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x32', '0x4E20'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 1, 'inferred_algorithm': 'File Handling', 'inferred_category': 'I/O Operations'}

##### Q 9 - setsignal
```assembly
loc_466940:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV ebp, edi
    PUSH rbx
    SUB rsp, 0A0h
    MOV r13, cs:qword_743208
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    MOVSXD rax, edi
    MOV rax, [r13+rax*8+0D8h]
    TEST rax, rax
    JZ loc_466A58
loc_46697F:
    CMP byte ptr [rax], 1
    SBB ebx, ebx
    NOT ebx
    ADD ebx, 3
loc_466989:
    CMP ebp, 11h
    MOV eax, 2
    CMOVZ ebx, eax
loc_466994:
    LEA r12d, [rbp-1]
    MOVSXD r12, r12d
    MOVZX eax, byte ptr [r13+r12+50h]
    CMP al, 4
    SETZ dl
    TEST al, al
    JZ loc_466A18
loc_4669AA:
    CMP al, bl
    JZ loc_4669ED
loc_4669AE:
    TEST dl, dl
    JNZ loc_4669ED
loc_4669B2:
    MOV r14, rsp
loc_4669B5:
    CMP bl, 2
    MOV [r13+r12+50h], bl
    JZ loc_466A80
loc_4669C3:
    XOR eax, eax
    CMP bl, 3
    SETZ al
    MOV [rsp+0C8h+var_C8], rax
loc_4669CF:
    LEA rdi, [r14+8]
    MOV [rsp+0C8h+var_40], 0
    CALL _sigfillset
    MOV rsi, r14
    MOV edi, ebp
    CALL sub_40BFB0
loc_4669ED:
    MOV rax, [rsp+0C8h+var_30]
    XOR rax, fs:28h
    JNZ loc_466B33
loc_466A04:
    ADD rsp, 0A0h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_466A18:
    XOR esi, esi
    MOV rdx, rsp
    MOV edi, ebp
    CALL _sigaction
    TEST eax, eax
    MOV r14, rsp
    JNZ loc_4669ED
loc_466A2B:
    MOV rax, [rsp+0C8h+var_C8]
    CMP rax, 1
    JZ loc_466B10
loc_466A39:
    TEST rax, rax
    JNZ loc_4669B5
loc_466A42:
    CMP bl, 1
    JNZ loc_4669B5
loc_466A4B:
    MOV byte ptr [r13+r12+50h], 1
    JMP loc_4669ED
loc_466A58:
    MOV eax, [r13+8]
    TEST eax, eax
    JNZ def_466A6F
loc_466A64:
    CMP ebp, 16h
    JA def_466A6F
loc_466A6D:
    MOV eax, ebp
    JMP ds:jpt_466A6F[rax*8]
loc_466A80:
    MOV [rsp+0C8h+var_C8], offset loc_466B90
    JMP loc_4669CF
loc_466A90:
    MOV ebx, 3
    JMP loc_466994
loc_466AA0:
    CMP byte ptr [r13+44h], 0
    MOV ebx, 2
    JNZ loc_466994
loc_466AB0:
    CMP qword ptr [r13+10h], 0
    JNZ loc_466994
loc_466ABB:
    CMP byte ptr [r13+47h], 1
    SBB ebx, ebx
    NOT ebx
    ADD ebx, 2
    JMP loc_466994
loc_466AD0:
    CMP byte ptr [r13+45h], 1
    SBB ebx, ebx
    AND ebx, 0FFFFFFFEh
    ADD ebx, 3
    JMP loc_466994
loc_466AE8:
    CMP byte ptr [r13+44h], 1
    SBB ebx, ebx
    AND ebx, 0FFFFFFFEh
    ADD ebx, 3
    JMP loc_466994
loc_466B00:
    MOV ebx, 1
    JMP loc_466989
loc_466B10:
    CMP byte ptr [r13+45h], 0
    JZ loc_4669ED
loc_466B1B:
    LEA eax, [rbp-14h]
    CMP eax, 2
    JA loc_4669ED
loc_466B27:
    XOR edx, edx
    MOV eax, 3
    JMP loc_4669AA
loc_466B33:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x828', '0xFFFFFFFF', '0xFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### T 9 - setsignal
```assembly
loc_47E8B0:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV ebp, edi
    PUSH rbx
    SUB rsp, 0A0h
    MOV r13, cs:qword_78D208
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    MOVSXD rax, edi
    MOV rax, [r13+rax*8+0D8h]
    TEST rax, rax
    JZ loc_47E9C8
loc_47E8EF:
    CMP byte ptr [rax], 1
    SBB ebx, ebx
    NOT ebx
    ADD ebx, 3
loc_47E8F9:
    CMP ebp, 11h
    MOV eax, 2
    CMOVZ ebx, eax
loc_47E904:
    LEA r12d, [rbp-1]
    MOVSXD r12, r12d
    MOVZX eax, byte ptr [r13+r12+50h]
    CMP al, 4
    SETZ dl
    TEST al, al
    JZ loc_47E988
loc_47E91A:
    CMP al, bl
    JZ loc_47E95D
loc_47E91E:
    TEST dl, dl
    JNZ loc_47E95D
loc_47E922:
    MOV r14, rsp
loc_47E925:
    CMP bl, 2
    MOV [r13+r12+50h], bl
    JZ loc_47E9F0
loc_47E933:
    XOR eax, eax
    CMP bl, 3
    SETZ al
    MOV [rsp+0C8h+var_C8], rax
loc_47E93F:
    LEA rdi, [r14+8]
    MOV [rsp+0C8h+var_40], 0
    CALL _sigfillset
    MOV rsi, r14
    MOV edi, ebp
    CALL sub_40DA10
loc_47E95D:
    MOV rax, [rsp+0C8h+var_30]
    XOR rax, fs:28h
    JNZ loc_47EAA3
loc_47E974:
    ADD rsp, 0A0h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_47E988:
    XOR esi, esi
    MOV rdx, rsp
    MOV edi, ebp
    CALL _sigaction
    TEST eax, eax
    MOV r14, rsp
    JNZ loc_47E95D
loc_47E99B:
    MOV rax, [rsp+0C8h+var_C8]
    CMP rax, 1
    JZ loc_47EA80
loc_47E9A9:
    TEST rax, rax
    JNZ loc_47E925
loc_47E9B2:
    CMP bl, 1
    JNZ loc_47E925
loc_47E9BB:
    MOV byte ptr [r13+r12+50h], 1
    JMP loc_47E95D
loc_47E9C8:
    MOV eax, [r13+8]
    TEST eax, eax
    JNZ def_47E9DF
loc_47E9D4:
    CMP ebp, 16h
    JA def_47E9DF
loc_47E9DD:
    MOV eax, ebp
    JMP ds:jpt_47E9DF[rax*8]
loc_47E9F0:
    MOV [rsp+0C8h+var_C8], offset loc_47EB00
    JMP loc_47E93F
loc_47EA00:
    MOV ebx, 3
    JMP loc_47E904
loc_47EA10:
    CMP byte ptr [r13+44h], 0
    MOV ebx, 2
    JNZ loc_47E904
loc_47EA20:
    CMP qword ptr [r13+10h], 0
    JNZ loc_47E904
loc_47EA2B:
    CMP byte ptr [r13+47h], 1
    SBB ebx, ebx
    NOT ebx
    ADD ebx, 2
    JMP loc_47E904
loc_47EA40:
    CMP byte ptr [r13+45h], 1
    SBB ebx, ebx
    AND ebx, 0FFFFFFFEh
    ADD ebx, 3
    JMP loc_47E904
loc_47EA58:
    CMP byte ptr [r13+44h], 1
    SBB ebx, ebx
    AND ebx, 0FFFFFFFEh
    ADD ebx, 3
    JMP loc_47E904
loc_47EA70:
    MOV ebx, 1
    JMP loc_47E8F9
loc_47EA80:
    CMP byte ptr [r13+45h], 0
    JZ loc_47E95D
loc_47EA8B:
    LEA eax, [rbp-14h]
    CMP eax, 2
    JA loc_47E95D
loc_47EA97:
    XOR edx, edx
    MOV eax, 3
    JMP loc_47E91A
loc_47EAA3:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'MemoryAccess'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x828', '0xFFFFFFFF', '0xFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### Q 10 - init_time
```assembly
loc_45A550:
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 20h
    CALL sub_40AD10
    MOVSX edx, byte ptr [rbx]
    MOV esi, 6
    MOV qword ptr [rax+8], offset sub_45B2B0
    MOV dword ptr [rax+1Ch], 1
    SUB edx, 30h
    CMP edx, 6
    CMOVG edx, esi
    MOV esi, 0
    TEST edx, edx
    CMOVNS esi, edx
    CMP esi, 6
    MOV [rax+18h], esi
    JZ loc_45A5B0
loc_45A590:
    LEA ecx, [rsi+1]
    MOV edx, 1
    NOP dword ptr [rax+rax+00000000h]
loc_45A5A0:
    LEA edx, [rdx+rdx*4]
    ADD ecx, 1
    ADD edx, edx
    CMP ecx, 7
    JNZ loc_45A5A0
loc_45A5AD:
    MOV [rax+1Ch], edx
loc_45A5B0:
    POP rbx
    RETN 
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['StackManipulation', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7FFFF000', '0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Protection'}

##### T 10 - init_time
```assembly
loc_46E700:
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 20h
    CALL sub_40C260
    MOVSX edx, byte ptr [rbx]
    MOV ecx, 6
    MOV esi, 0
    MOV qword ptr [rax+8], offset sub_46EAF0
    MOV dword ptr [rax+1Ch], 1
    SUB edx, 30h
    CMP edx, 6
    CMOVG edx, ecx
    TEST edx, edx
    CMOVS edx, esi
    CMP edx, 6
    MOV [rax+18h], edx
    JZ loc_46E81F
loc_46E744:
    MOV edi, ecx
    MOV ecx, 2
    MOV r8d, 5
    SUB ecx, edx
    SUB r8d, edx
    SUB edi, edx
    SHR ecx, 2
    LEA esi, [rdx+1]
    ADD ecx, 1
    CMP r8d, 9
    LEA r9d, ds:0[rcx*4]
    JBE loc_46E828
loc_46E773:
    MOVDQA xmm0, cs:xmmword_54DE40
    XOR edx, edx
loc_46E77D:
    PSLLD xmm0, 1
    ADD edx, 1
    MOVDQA xmm1, xmm0
    CMP ecx, edx
    PSLLD xmm1, 2
    PADDD xmm0, xmm1
    JA loc_46E77D
loc_46E796:
    MOVDQA xmm1, xmm0
    MOVDQA xmm2, xmm0
    PSRLQ xmm0, 20h
    ADD esi, r9d
    CMP edi, r9d
    PSRLDQ xmm1, 8
    PMULUDQ xmm2, xmm1
    PSRLQ xmm1, 20h
    PSHUFD xmm2, xmm2, 8
    PMULUDQ xmm0, xmm1
    PSHUFD xmm1, xmm0, 8
    PUNPCKLDQ xmm2, xmm1
    MOVDQA xmm0, xmm2
    MOVDQA xmm1, xmm2
    PSRLDQ xmm1, 4
    PMULUDQ xmm0, xmm1
    MOVD edx, xmm0
    JZ loc_46E81C
loc_46E7E0:
    LEA ecx, [rdx+rdx*4]
    CMP esi, 5
    LEA edx, [rcx+rcx]
    JG loc_46E81C
loc_46E7EB:
    LEA ecx, [rdx+rcx*8]
    CMP esi, 4
    LEA edx, [rcx+rcx]
    JG loc_46E81C
loc_46E7F6:
    LEA ecx, [rdx+rcx*8]
    CMP esi, 3
    LEA edx, [rcx+rcx]
    JG loc_46E81C
loc_46E801:
    LEA ecx, [rdx+rcx*8]
    CMP esi, 2
    LEA edx, [rcx+rcx]
    JG loc_46E81C
loc_46E80C:
    LEA ecx, [rdx+rcx*8]
    CMP esi, 1
    LEA edx, [rcx+rcx]
    JG loc_46E81C
loc_46E817:
    LEA edx, [rdx+rcx*8]
    ADD edx, edx
loc_46E81C:
    MOV [rax+1Ch], edx
loc_46E81F:
    POP rbx
    RETN 
loc_46E828:
    MOV edx, 1
    JMP loc_46E7E0
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7FFFF000', '0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Stack Protection'}

##### Q 11 - ssl_client_main
```assembly
loc_43A5B0:
    PUSH rbp
    PUSH rbx
    MOV edi, 0D8h
    MOV rbp, rsi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV [rsp+28h+var_28], 0
    CALL sub_40AD10
    LEA rcx, [rax+4]
    MOV rdx, rax
    MOV rbx, rax
    MOV r8, rsp
    XOR eax, eax
    MOV esi, offset aSRN
    MOV rdi, rbp
    CALL sub_4DFD70
    TEST al, 2
    JNZ loc_43A600
loc_43A5FB:
    MOV edx, [rbx]
    MOV [rbx+4], edx
loc_43A600:
    TEST al, 3
    JNZ loc_43A623
loc_43A604:
    MOV rdi, [rbp+8]
    TEST rdi, rdi
    JZ loc_43A65B
loc_43A60D:
    CMP [rsp+28h+var_28], 0
    JZ loc_43A650
loc_43A614:
    MOV esi, 1BBh
    CALL sub_4EDC80
    MOV [rbx], eax
    MOV [rbx+4], eax
loc_43A623:
    MOV rsi, [rsp+28h+var_28]
    MOV rdi, rbx
    CALL sub_43E890
    MOV rdi, rbx
    CALL sub_43F2D0
    XOR eax, eax
    MOV rdx, [rsp+28h+var_20]
    XOR rdx, fs:28h
    JNZ loc_43A656
loc_43A649:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_43A650:
    MOV [rsp+28h+var_28], rdi
    JMP loc_43A614
loc_43A656:
    CALL ___stack_chk_fail
loc_43A65B:
    CALL sub_408E80
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x80', '0x500', '0x1B', '0x8', '0x7F', '0xFE', '0x3', '0x1', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### T 11 - ssl_client_main
```assembly
loc_447F50:
    PUSH rbp
    PUSH rbx
    MOV edi, 0D8h
    MOV rbp, rsi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV [rsp+28h+var_28], 0
    CALL sub_40C260
    LEA rcx, [rax+4]
    MOV rdx, rax
    MOV rbx, rax
    MOV r8, rsp
    XOR eax, eax
    MOV esi, offset aSRN
    MOV rdi, rbp
    CALL sub_5291B0
    TEST al, 2
    JNZ loc_447FA0
loc_447F9B:
    MOV edx, [rbx]
    MOV [rbx+4], edx
loc_447FA0:
    TEST al, 3
    JNZ loc_447FC3
loc_447FA4:
    MOV rdi, [rbp+8]
    TEST rdi, rdi
    JZ loc_447FFB
loc_447FAD:
    CMP [rsp+28h+var_28], 0
    JZ loc_447FF0
loc_447FB4:
    MOV esi, 1BBh
    CALL sub_53B410
    MOV [rbx], eax
    MOV [rbx+4], eax
loc_447FC3:
    MOV rsi, [rsp+28h+var_28]
    MOV rdi, rbx
    CALL sub_44CF80
    MOV rdi, rbx
    CALL sub_44E1A0
    XOR eax, eax
    MOV rdx, [rsp+28h+var_20]
    XOR rdx, fs:28h
    JNZ loc_447FF6
loc_447FE9:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_447FF0:
    MOV [rsp+28h+var_28], rdi
    JMP loc_447FB4
loc_447FF6:
    CALL ___stack_chk_fail
loc_447FFB:
    CALL sub_409830
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x80', '0x30', '0x500', '0x1B', '0x8002400', '0x7F', '0x8', '0xFE', '0x3', '0x1', '0x7'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing with Loop', 'inferred_category': 'Utility Function'}

##### Q 12 - begin_line
```assembly
loc_4D26E0:
    MOV rdx, rdi
    MOV esi, 0Ah
    MOV rdi, rbx
    SUB rdx, rbx
    CALL _memrchr
    LEA rdx, [rax+1]
    TEST rax, rax
    CMOVNZ rbx, rdx
    MOV rax, rbx
    POP rbx
    RETN 
loc_4D2708:
    MOV rbx, rdi
    MOV rax, rbx
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Byte', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'MemoryAccess', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6E', '0x6F', '0x78', '0x65', '0x57', '0x56', '0x55', '0x1', '0x2D'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Manipulation', 'inferred_category': 'Utility/Helper Function'}

##### T 12 - begin_line
```assembly
loc_514B90:
    MOV rax, cs:qword_78D1F0
    PUSH rbx
    MOV rbx, [rax]
    CMP rbx, rdi
    JNB loc_514BC8
loc_514BA0:
    MOV rdx, rdi
    MOV esi, 0Ah
    MOV rdi, rbx
    SUB rdx, rbx
    CALL _memrchr
    LEA rdx, [rax+1]
    TEST rax, rax
    CMOVNZ rbx, rdx
    MOV rax, rbx
    POP rbx
    RETN 
loc_514BC8:
    MOV rbx, rdi
    MOV rax, rbx
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['ConditionalBranching', 'MemoryAccess', 'LogicalOperations'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFECFh', '0x30h', '0x120h', '0x7Fh', '0x15h', '0x0', '0x1', '0x15', '0x17', '0x2', '0xA10h', '0x20h', '0x800h', '0x4', '0x800h', '0x200h', '0x526h', '0xD3h', '0xFEFFh', '0x803h', '0x1800h', '0xF7FFh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Conditional Memory Update', 'inferred_category': 'Control Flow Analysis'}

##### Q 13 - tty_baud_to_value
```assembly
loc_4EAAD0:
    XOR eax, eax
    XOR edx, edx
    JMP loc_4EAAF2
loc_4EAAE0:
    ADD rax, 1
    CMP rax, 1Fh
    JZ loc_4EAB10
loc_4EAAEA:
    MOVZX edx, ds:word_4FFFC0[rax*4]
loc_4EAAF2:
    CMP edx, edi
    MOVSXD rcx, eax
    JNZ loc_4EAAE0
loc_4EAAF9:
    MOVZX eax, ds:word_4FFFC2[rcx*4]
    TEST ax, ax
    MOV edx, eax
    JS loc_4EAB18
loc_4EAB08:
    REP 
loc_4EAB10:
    XOR eax, eax
    RETN 
loc_4EAB18:
    AND edx, 7FFFh
    IMUL eax, edx, 0C8h
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x89F0', '0x89F1', '0x89F2', '0x89F3', '0x29', '0x2F', '0x4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Network/Socket Handling'}

##### T 13 - tty_baud_to_value
```assembly
loc_536D20:
    XOR eax, eax
    JMP loc_536D32
loc_536D28:
    ADD rax, 1
    CMP rax, 1Fh
    JZ loc_536D58
loc_536D32:
    MOVZX edx, ds:word_54DA60[rax*4]
    MOVSXD rcx, eax
    CMP edx, edi
    JNZ loc_536D28
loc_536D41:
    MOVZX eax, ds:word_54DA62[rcx*4]
    TEST ax, ax
    MOV edx, eax
    JS loc_536D60
loc_536D50:
    REP 
loc_536D58:
    XOR eax, eax
    RETN 
loc_536D60:
    AND edx, 7FFFh
    IMUL eax, edx, 0C8h
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x89F0', '0x89F1', '0x89F2', '0x89F3', '0x29', '0x2F', '0x4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Network/Tunnel Management'}

##### Q 14 - init_fd
```assembly
loc_45A610:
    SUB rsp, 8
    MOV edi, 18h
    CALL sub_40AD10
    MOV qword ptr [rax+8], offset sub_45AE70
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8', '0x20', '0x1', '0x2', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 1, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Error Handling'}

##### T 14 - init_fd
```assembly
loc_46E880:
    SUB rsp, 8
    MOV edi, 18h
    CALL sub_40C260
    MOV qword ptr [rax+8], offset sub_46F8D0
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x154', '0x20', '0x9', '0x8', '0x2', '0x0', '0x1', '0x100', '0x80', '0x40', '0x20', '0x10', '0x8', '0x4', '0x2', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'IO/Device Control'}

##### Q 15 - go_bottom_and_clear_to_eol
```assembly
loc_406D80:

loc_4D32B0:
    SUB rsp, 8
    MOV rax, cs:qword_7431F0
    XOR esi, esi
    MOV edi, [rax+30h]
    SUB edi, 1
    CALL sub_4D2E00
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset aU0hK+7)
    ADD rsp, 8
    JMP _fwrite_unlocked
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['ConditionalBranching', 'DataMovement', 'SubroutineCall', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x400', '0x800', '0x1000', '0x2000', '0x4000', '0x8000', '0x10000', '0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 25, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Packet Traceroute', 'inferred_category': 'Network Tools/Utilities'}

##### T 15 - go_bottom_and_clear_to_eol
```assembly
loc_514D30:
    SUB rsp, 38h
    MOV rcx, cs:qword_78D1F0
    MOV rax, fs:28h
    MOV [rsp+38h+var_10], rax
    XOR eax, eax
    MOV rdi, rsp
    MOV edx, [rcx+30h]
    MOV esi, edx
    SUB esi, 1
    CMOVNS eax, esi
    CMP edx, eax
    MOV edx, [rcx+34h]
    MOV ecx, offset aUUh
    CMOVBE eax, esi
    XOR r9d, r9d
    MOV esi, 1
    LEA r8d, [rax+1]
    TEST edx, edx
    MOV edx, 21h
    SETNZ r9b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    MOV rdi, rsp
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset aU0hK+7)
    CALL _fwrite_unlocked
    MOV rax, [rsp+38h+var_10]
    XOR rax, fs:28h
    JNZ loc_514DC3
loc_514DBE:
    ADD rsp, 38h
    RETN 
loc_514DC3:
    CALL ___stack_chk_fail
```
None

##### Q 16 - evalsubshell
```assembly
loc_4733D0:
    PUSH r15
    PUSH r14
    MOV r14d, esi
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOVZX r12d, byte ptr [rdi]
    MOV rdi, [rdi+10h]
    CMP r12b, 3
    SETZ r13b
    CALL sub_4702A0
    CMP r12b, 3
    MOV rbx, cs:qword_743208
    JZ loc_47340F
loc_473409:
    TEST r14b, 1
    JNZ loc_473468
loc_47340F:
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    MOV edi, 1
    CALL sub_469900
    MOV edx, r13d
    MOV rsi, rbp
    MOV rdi, rax
    MOV r15, rax
    CALL sub_46CE50
    TEST eax, eax
    JZ loc_473488
loc_473437:
    XOR eax, eax
    CMP r12b, 3
    JZ loc_473447
loc_47343F:
    MOV rdi, r15
    CALL sub_46B2E0
loc_473447:
    SUB dword ptr [rbx+38h], 1
    JNZ loc_473455
loc_47344D:
    MOVZX edx, byte ptr [rbx+3Ch]
    TEST dl, dl
    JNZ loc_47349E
loc_473455:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_473468:
    CMP byte ptr [rbx+0D0h], 0
    JNZ loc_47340F
loc_473471:
    MOV rdi, [rbp+10h]
    XOR esi, esi
    CALL sub_46FA60
    MOV rdi, [rbp+8]
    MOV esi, r14d
    CALL sub_472AD0
loc_473488:
    CALL sub_466C10
    MOV eax, r14d
    OR eax, 1
    CMP r12b, 3
    JZ loc_4734A3
loc_473499:
    MOV r14d, eax
    JMP loc_473471
loc_47349E:
    CALL sub_466B40
loc_4734A3:
    AND r14d, 0FFFFFFFDh
    OR r14d, 1
    JMP loc_473471
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x140'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Initialization/Cleanup'}

##### T 16 - evalsubshell
```assembly
loc_48F0C0:
    PUSH r15
    PUSH r14
    MOV r14d, esi
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOVZX r12d, byte ptr [rdi]
    MOV rdi, [rdi+10h]
    CMP r12b, 3
    SETZ r13b
    CALL sub_48E740
    CMP r12b, 3
    MOV rbx, cs:qword_78D208
    JZ loc_48F0FF
loc_48F0F9:
    TEST r14b, 1
    JNZ loc_48F150
loc_48F0FF:
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    CALL sub_480CA0
    MOV edx, r13d
    MOV rsi, rbp
    MOV rdi, rax
    MOV r15, rax
    CALL sub_485C20
    TEST eax, eax
    JZ loc_48F170
loc_48F122:
    XOR eax, eax
    CMP r12b, 3
    JZ loc_48F132
loc_48F12A:
    MOV rdi, r15
    CALL sub_483430
loc_48F132:
    SUB dword ptr [rbx+38h], 1
    JNZ loc_48F140
loc_48F138:
    MOVZX edx, byte ptr [rbx+3Ch]
    TEST dl, dl
    JNZ loc_48F186
loc_48F140:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_48F150:
    CMP byte ptr [rbx+0D0h], 0
    JNZ loc_48F0FF
loc_48F159:
    MOV rdi, [rbp+10h]
    XOR esi, esi
    CALL sub_48DC70
    MOV rdi, [rbp+8]
    MOV esi, r14d
    CALL sub_48BBC0
loc_48F170:
    CALL sub_47EB80
    MOV eax, r14d
    OR eax, 1
    CMP r12b, 3
    JZ loc_48F18B
loc_48F181:
    MOV r14d, eax
    JMP loc_48F159
loc_48F186:
    CALL sub_47EAB0
loc_48F18B:
    AND r14d, 0FFFFFFFDh
    OR r14d, 1
    JMP loc_48F159
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x140'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Initialization/Cleanup'}

##### Q 17 - unshare_main
```assembly
loc_4972F0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 98h
    LEA r14, [rsp+0C8h+buf]
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_40], rax
    XOR eax, eax
    CALL _geteuid
    MOV [rsp+0C8h+var_B8], eax
    CALL _getegid
    MOV ecx, 6
    MOV [rsp+0C8h+var_B4], eax
    MOV rdi, r14
    XOR eax, eax
    MOV [rsp+0C8h+var_A0], offset aProc
    MOV [rsp+0C8h+s2], offset aPrivate
    REP 
    LEA rax, [r14+28h]
    MOV [rsp+0C8h+var_90], 0
    MOV edx, offset aMount_0
    MOV esi, offset unk_4FD9C0
    MOV rdi, rbx
    PUSH rax
    LEA rax, [r14+20h]
    PUSH rax
    LEA rax, [r14+18h]
    PUSH rax
    LEA rax, [r14+10h]
    PUSH rax
    LEA rax, [r14+8]
    PUSH rax
    PUSH r14
    XOR eax, eax
    LEA r9, [rsp+0F8h+var_90]
    LEA r8, [rsp+0F8h+s2]
    LEA rcx, [rsp+0F8h+var_A0]
    CALL sub_4DFE30
    MOV rdx, [rsp+0F8h+var_90]
    MOV r13d, eax
    MOV eax, cs:optind
    MOV [rsp+0F8h+var_B0], eax
    ADD rsp, 30h
    TEST rdx, rdx
    JZ loc_4973CE
loc_4973AF:
    MOV edi, offset aAllow
    MOV ecx, 6
    MOV rsi, rdx
    REPE 
    JNZ loc_4974A0
loc_4973C4:
    TEST r13b, 80h
    JNZ loc_4976AF
loc_4973CE:
    XOR ecx, ecx
    XOR r12d, r12d
    XOR r15d, r15d
    MOV esi, 1
    NOP dword ptr [rax+rax+00h]
loc_4973E0:
    MOV eax, esi
    SHL eax, cl
    TEST eax, r13d
    JZ loc_4973F1
loc_4973E9:
    OR r15d, ds:dword_4FDA60[rcx*8]
loc_4973F1:
    OR r12, [r14+rcx*8]
    ADD rcx, 1
    CMP rcx, 6
    JNZ loc_4973E0
loc_4973FF:
    TEST r13b, 1
    JNZ loc_4974D0
loc_497409:
    TEST r12, r12
    MOV [rsp+0C8h+fd], 0FFFFFFFFh
    MOV [rsp+0C8h+var_C0], 44000h
    SETNZ r12b
    XOR ebp, ebp
loc_497423:
    MOV edi, r15d
    CALL _unshare
    TEST eax, eax
    JNZ loc_4976A0
loc_497433:
    MOV edi, [rsp+0C8h+fd]
    TEST edi, edi
    JS loc_497449
loc_49743B:
    CALL _close
    MOV edi, [rsp+0C8h+var_A8]
    CALL _close
loc_497449:
    TEST r12b, r12b
    JZ loc_4975A5
loc_497452:
    TEST bpl, bpl
    JZ loc_497596
loc_49745B:
    MOV edi, [rsp+0C8h+pid]
    CALL sub_40AC10
    TEST al, 7Fh
    JNZ loc_4975A5
loc_49746C:
    MOVZX eax, ah
    TEST eax, eax
    JZ loc_4975A5
loc_497477:
    MOV rbx, [rsp+0C8h+var_40]
    XOR rbx, fs:28h
    JNZ loc_49769B
loc_49748E:
    ADD rsp, 98h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4974A0:
    MOV edi, offset aDeny
    MOV ecx, 5
    MOV rsi, rdx
    REPE 
    JZ loc_4973CE
loc_4974B5:
    MOV esi, offset aSetgroups_0
    MOV edi, offset unk_517E13
    XOR eax, eax
    CALL sub_40A1E0
loc_4974D0:
    MOV rbp, [rsp+0C8h+s2]
    MOV edi, offset aPrivate
    MOV rsi, rbp
    CALL sub_4098B0
    TEST eax, eax
    JS loc_4976C8
loc_4974EA:
    MOV [rsp+0C8h+var_C0], 44000h
    JNZ loc_497568
loc_4974F5:
    TEST r12, r12
    MOV [rsp+0C8h+fd], 0FFFFFFFFh
    JZ loc_4976BB
loc_497506:
    CALL _getpid
    LEA rdi, [rsp+0C8h+var_A8]
    MOV [rsp+0C8h+var_AC], eax
    MOV ebp, 1
    MOV r12d, 1
    CALL sub_40AF40
    CALL sub_40B950
    TEST eax, eax
    MOV [rsp+0C8h+pid], eax
    JNZ loc_497423
loc_497535:
    MOV edi, [rsp+0C8h+fd]
    CALL _close
    MOV edi, [rsp+0C8h+var_A8]
    MOV edx, 1
    MOV rsi, r14
    CALL _read
    MOV edi, [rsp+0C8h+var_AC]
    MOV rsi, r14
    CALL sub_497260
    XOR eax, eax
    JMP loc_497477
loc_497568:
    CMP eax, 1
    JZ loc_497588
loc_49756D:
    CMP eax, 2
    MOV edx, 84000h
    MOV eax, 104000h
    CMOVNZ rax, rdx
    MOV [rsp+0C8h+var_C0], rax
    JMP loc_4974F5
loc_497588:
    MOV [rsp+0C8h+var_C0], 0
    JMP loc_4974F5
loc_497596:
    CALL _getpid
    MOV rsi, r14
    MOV edi, eax
    CALL sub_497260
loc_4975A5:
    TEST r13b, 40h
    JZ loc_4975B0
loc_4975AB:
    CALL sub_40B970
loc_4975B0:
    TEST r13b, 80h
    JNZ loc_497629
loc_4975B6:
    MOV rsi, [rsp+0C8h+var_90]
    TEST rsi, rsi
    JZ loc_4975CA
loc_4975C0:
    MOV edi, offset unk_517E43
    CALL sub_4ECA10
loc_4975CA:
    TEST bpl, bpl
    JZ loc_4975E5
loc_4975CF:
    MOV rcx, [rsp+0C8h+var_C0]
    XOR edx, edx
    MOV esi, (offset asc_518B49+3)
    MOV edi, offset special_file
    CALL sub_497220
loc_4975E5:
    AND r13d, 100h
    JZ loc_49761B
loc_4975EE:
    MOV rsi, [rsp+0C8h+var_A0]
    MOV ecx, 44000h
    XOR edx, edx
    MOV edi, offset special_file
    CALL sub_497220
    MOV rsi, [rsp+0C8h+var_A0]
    MOV edx, 5144DAh
    MOV ecx, 0Eh
    MOV rdi, rdx
    CALL sub_497220
loc_49761B:
    MOVSXD rax, [rsp+0C8h+var_B0]
    LEA rdi, [rbx+rax*8]
    CALL sub_4DE7C0
loc_497629:
    MOV esi, offset aDeny
    MOV edi, offset unk_517E43
    CALL sub_4ECA10
    MOV r8d, [rsp+0C8h+var_B8]
    LEA rdi, [rsp+0C8h+var_58]
    MOV ecx, offset aU01
    MOV edx, 13h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    LEA rsi, [rsp+0C8h+var_58]
    MOV edi, offset aProcSelfUidMap
    CALL sub_4ECA10
    MOV r8d, [rsp+0C8h+var_B4]
    LEA rdi, [rsp+0C8h+var_58]
    MOV ecx, offset aU01
    MOV edx, 13h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    LEA rsi, [rsp+0C8h+var_58]
    MOV edi, offset aProcSelfGidMap
    CALL sub_4ECA10
    JMP loc_4975CA
loc_49769B:
    CALL ___stack_chk_fail
loc_4976A0:
    MOV esi, r15d
    MOV edi, offset aUnshare0xX
    XOR eax, eax
    CALL sub_409DA0
loc_4976AF:
    MOV edi, offset aSetgroupsAllow
    XOR eax, eax
    CALL sub_40A1E0
loc_4976BB:
    MOV ebp, 1
    XOR r12d, r12d
    JMP loc_497423
loc_4976C8:
    MOV rdx, rbp
    MOV esi, offset aPropagation
    MOV edi, offset unk_517E13
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Sanitization'}

##### T 17 - unshare_main
```assembly
loc_4BD450:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 0A8h
    LEA r14, [rsp+0D8h+buf]
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_40], rax
    XOR eax, eax
    CALL _geteuid
    MOV [rsp+0D8h+var_CC], eax
    CALL _getegid
    MOV ecx, 6
    MOV [rsp+0D8h+var_C8], eax
    MOV rdi, r14
    XOR eax, eax
    MOV [rsp+0D8h+var_B0], offset aProc
    MOV [rsp+0D8h+s2], offset aPrivate
    REP 
    LEA rax, [r14+28h]
    MOV [rsp+0D8h+var_A0], 0
    MOV edx, offset aMount_0
    MOV esi, offset unk_54B560
    MOV rdi, rbp
    PUSH rax
    LEA rax, [r14+20h]
    PUSH rax
    LEA rax, [r14+18h]
    PUSH rax
    LEA rax, [r14+10h]
    PUSH rax
    LEA rax, [r14+8]
    PUSH rax
    PUSH r14
    XOR eax, eax
    LEA r9, [rsp+108h+var_A0]
    LEA r8, [rsp+108h+s2]
    LEA rcx, [rsp+108h+var_B0]
    CALL sub_529270
    MOV rdx, [rsp+108h+var_A0]
    MOV ebx, eax
    MOV eax, cs:optind
    MOV [rsp+108h+var_C4], eax
    ADD rsp, 30h
    TEST rdx, rdx
    JZ loc_4BD52C
loc_4BD50E:
    MOV edi, offset aAllow
    MOV ecx, 6
    MOV rsi, rdx
    REPE 
    JNZ loc_4BD650
loc_4BD523:
    TEST bl, 80h
    JNZ loc_4BD963
loc_4BD52C:
    MOV ecx, ebx
    AND ecx, 1
    MOV r15d, ecx
    NEG r15d
    AND r15d, 20000h
    MOV eax, r15d
    OR eax, 4000000h
    TEST bl, 2
    CMOVNZ r15d, eax
    MOV rax, [rsp+0D8h+buf]
    OR rax, [rsp+0D8h+var_90]
    MOV esi, r15d
    OR esi, 8000000h
    TEST bl, 4
    CMOVNZ r15d, esi
    OR rax, [rsp+0D8h+var_88]
    MOV esi, r15d
    OR esi, 40000000h
    TEST bl, 8
    CMOVNZ r15d, esi
    OR rax, [rsp+0D8h+var_80]
    MOV esi, r15d
    OR esi, 20000000h
    TEST bl, 10h
    CMOVNZ r15d, esi
    OR rax, [rsp+0D8h+var_78]
    MOV esi, r15d
    OR esi, 10000000h
    TEST bl, 20h
    CMOVNZ r15d, esi
    OR rax, [rsp+0D8h+var_70]
    TEST ecx, ecx
    MOV r13, rax
    JNZ loc_4BD680
loc_4BD5B6:
    TEST rax, rax
    MOV [rsp+0D8h+fd], 0FFFFFFFFh
    MOV [rsp+0D8h+var_D8], 44000h
    SETNZ r13b
    XOR r12d, r12d
loc_4BD5D0:
    MOV edi, r15d
    CALL _unshare
    TEST eax, eax
    JNZ loc_4BD922
loc_4BD5E0:
    MOV edi, [rsp+0D8h+fd]
    TEST edi, edi
    JS loc_4BD5F6
loc_4BD5E8:
    CALL _close
    MOV edi, [rsp+0D8h+var_B8]
    CALL _close
loc_4BD5F6:
    TEST r13b, r13b
    JZ loc_4BD824
loc_4BD5FF:
    TEST r12b, r12b
    JZ loc_4BD7AD
loc_4BD608:
    MOV edi, [rsp+0D8h+pid]
    CALL sub_40C160
    TEST al, 7Fh
    JNZ loc_4BD824
loc_4BD619:
    MOVZX eax, ah
    TEST eax, eax
    JZ loc_4BD824
loc_4BD624:
    MOV rdx, [rsp+0D8h+var_40]
    XOR rdx, fs:28h
    JNZ loc_4BD91D
loc_4BD63B:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4BD650:
    MOV edi, offset aDeny
    MOV ecx, 5
    MOV rsi, rdx
    REPE 
    JZ loc_4BD52C
loc_4BD665:
    MOV esi, offset aSetgroups_0
    MOV edi, offset unk_565E88
    XOR eax, eax
    CALL sub_40ABE0
loc_4BD680:
    MOV r12, [rsp+0D8h+s2]
    MOV edi, offset aPrivate
    MOV rsi, r12
    CALL sub_40A260
    TEST eax, eax
    JS loc_4BD97D
loc_4BD69A:
    MOV [rsp+0D8h+var_D8], 44000h
    JNZ loc_4BD778
loc_4BD6A8:
    TEST r13, r13
    MOV [rsp+0D8h+fd], 0FFFFFFFFh
    JZ loc_4BD96F
loc_4BD6B9:
    CALL _getpid
    LEA rdi, [rsp+0D8h+var_B8]
    MOV dword ptr [rsp+0D8h+var_C0], eax
    MOV r12d, 1
    MOV r13d, 1
    CALL sub_40C5F0
    CALL sub_40D170
    TEST eax, eax
    MOV [rsp+0D8h+pid], eax
    JNZ loc_4BD5D0
loc_4BD6E9:
    MOV edi, [rsp+0D8h+fd]
    MOV rbx, r14
    LEA r13, [r14+30h]
    MOV ebp, offset unk_54B604
    CALL _close
    MOV edi, [rsp+0D8h+var_B8]
    MOV rsi, r14
    MOV edx, 1
    CALL _read
    MOV r14d, dword ptr [rsp+0D8h+var_C0]
    NOP dword ptr [rax+00h]
loc_4BD718:
    CMP qword ptr [rbx], 0
    JZ loc_4BD761
loc_4BD71E:
    LEA rdi, [rsp+0D8h+special_file]
    MOV r9, rbp
    MOV r8d, r14d
    MOV ecx, offset aProcUNs4s
    MOV edx, 1Dh
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV r12, [rbx]
    LEA rdi, [rsp+0D8h+special_file]
    XOR r8d, r8d
    XOR edx, edx
    MOV ecx, 1000h
    MOV rsi, r12
    CALL _mount
    TEST eax, eax
    JNZ loc_4BD931
loc_4BD761:
    ADD rbx, 8
    ADD rbp, 8
    CMP rbx, r13
    JNZ loc_4BD718
loc_4BD76E:
    XOR eax, eax
    JMP loc_4BD624
loc_4BD778:
    CMP eax, 1
    JZ loc_4BD7A0
loc_4BD77D:
    CMP eax, 2
    MOV ecx, 84000h
    MOV eax, 104000h
    CMOVNZ rax, rcx
    MOV [rsp+0D8h+var_D8], rax
    JMP loc_4BD6A8
loc_4BD7A0:
    MOV [rsp+0D8h+var_D8], 0
    JMP loc_4BD6A8
loc_4BD7AD:
    MOV r13, r14
    MOV r14d, offset unk_54B604
    CALL _getpid
    MOV [rsp+0D8h+pid], eax
    LEA rax, [r13+30h]
    MOV [rsp+0D8h+var_C0], rax
loc_4BD7C8:
    CMP qword ptr [r13+0], 0
    JZ loc_4BD815
loc_4BD7CF:
    MOV r8d, [rsp+0D8h+pid]
    LEA rdi, [rsp+0D8h+special_file]
    MOV r9, r14
    MOV ecx, offset aProcUNs4s
    MOV edx, 1Dh
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV r15, [r13+0]
    LEA rdi, [rsp+0D8h+special_file]
    XOR r8d, r8d
    XOR edx, edx
    MOV ecx, 1000h
    MOV rsi, r15
    CALL _mount
    TEST eax, eax
    JNZ loc_4BD94A
loc_4BD815:
    ADD r13, 8
    ADD r14, 8
    CMP r13, [rsp+0D8h+var_C0]
    JNZ loc_4BD7C8
loc_4BD824:
    TEST bl, 40h
    JNZ loc_4BD913
loc_4BD82D:
    TEST bl, 80h
    JNZ loc_4BD8A1
loc_4BD832:
    MOV rsi, [rsp+0D8h+var_A0]
    TEST rsi, rsi
    JZ loc_4BD846
loc_4BD83C:
    MOV edi, offset unk_565EC9
    CALL sub_539060
loc_4BD846:
    TEST r12b, r12b
    JZ loc_4BD860
loc_4BD84B:
    MOV rcx, [rsp+0D8h+var_D8]
    XOR edx, edx
    MOV esi, (offset asc_566B05+3)
    MOV edi, offset special_file
    CALL sub_4BD410
loc_4BD860:
    AND bh, 1
    JZ loc_4BD892
loc_4BD865:
    MOV rsi, [rsp+0D8h+var_B0]
    MOV ecx, 44000h
    XOR edx, edx
    MOV edi, offset special_file
    CALL sub_4BD410
    MOV rsi, [rsp+0D8h+var_B0]
    MOV edx, 56258Ah
    MOV ecx, 0Eh
    MOV rdi, rdx
    CALL sub_4BD410
loc_4BD892:
    MOVSXD rax, [rsp+0D8h+var_C4]
    LEA rdi, [rbp+rax*8+0]
    CALL sub_527410
loc_4BD8A1:
    MOV esi, offset aDeny
    MOV edi, offset unk_565EC9
    CALL sub_539060
    MOV r8d, [rsp+0D8h+var_CC]
    LEA rdi, [rsp+0D8h+special_file]
    MOV ecx, offset aU01
    MOV edx, 13h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    LEA rsi, [rsp+0D8h+special_file]
    MOV edi, offset aProcSelfUidMap
    CALL sub_539060
    MOV r8d, [rsp+0D8h+var_C8]
    LEA rdi, [rsp+0D8h+special_file]
    MOV ecx, offset aU01
    MOV edx, 13h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    LEA rsi, [rsp+0D8h+special_file]
    MOV edi, offset aProcSelfGidMap
    CALL sub_539060
    JMP loc_4BD846
loc_4BD913:
    CALL sub_40D190
    JMP loc_4BD82D
loc_4BD91D:
    CALL ___stack_chk_fail
loc_4BD922:
    MOV esi, r15d
    MOV edi, offset aUnshare0xX
    XOR eax, eax
    CALL sub_40A7B0
loc_4BD931:
    LEA rsi, [rsp+0D8h+special_file]
    MOV ecx, 1000h
    MOV rdx, r12
    MOV edi, offset aCanTMountSOnSF
    XOR eax, eax
    CALL sub_40A7B0
loc_4BD94A:
    LEA rsi, [rsp+0D8h+special_file]
    MOV ecx, 1000h
    MOV rdx, r15
    MOV edi, offset aCanTMountSOnSF
    XOR eax, eax
    CALL sub_40A7B0
loc_4BD963:
    MOV edi, offset aSetgroupsAllow
    XOR eax, eax
    CALL sub_40ABE0
loc_4BD96F:
    MOV r12d, 1
    XOR r13d, r13d
    JMP loc_4BD5D0
loc_4BD97D:
    MOV rdx, r12
    MOV esi, offset aPropagation
    MOV edi, offset unk_565E88
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Stack Protection'}

##### Q 18 - qsort_string_vector
```assembly
loc_406070:

loc_4DC370:
    MOV esi, esi
    MOV ecx, offset sub_4DC360
    MOV edx, 8
    JMP _qsort
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 14, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7431D8', '0xB8', '0x00', '0x30', '0x01', '0x50', '0x12', '0x03', '0x55', '0x40', '0xF5', '0x45', '0x29', '0x4D', '0x39'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 4, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Diagnostic/Debugging/Logging'}

##### T 18 - qsort_string_vector
```assembly
loc_4060A0:

loc_524800:
    MOV esi, esi
    MOV ecx, offset sub_5247F0
    MOV edx, 8
    JMP _qsort
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 16, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4', '0x5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 30, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'Complex System/Software Component', 'inferred_category': 'Utility or Control Module'}

##### Q 19 - time_sort
```assembly
loc_45F280:
    MOV rax, [rdi+8]
    CMP [rsi+8], rax
    MOV edx, 0FFFFFFFFh
    SETNZ al
    MOVZX eax, al
    CMOVB eax, edx
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Manipulation', 'inferred_category': 'IO/Output'}

##### T 19 - time_sort
```assembly
loc_4766F0:
    MOV rax, [rdi+8]
    CMP [rsi+8], rax
    MOV edx, 0FFFFFFFFh
    SETNZ al
    MOVZX eax, al
    CMOVB eax, edx
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['1', '0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Formatting', 'inferred_category': 'IO'}

##### Q 20 - fileAction_3
```assembly
loc_4B1280:
    PUSH r13
    PUSH r12
    MOV r13, rdx
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV r12, rsi
    SUB rsp, 18h
    TEST ecx, ecx
    JZ loc_4B1320
loc_4B129B:
    MOV esi, [rsi+18h]
    MOV eax, esi
    AND eax, 0F000h
    CMP eax, 0A000h
    JZ loc_4B1309
loc_4B12AC:
    MOV rdi, r13
    CALL sub_4E5F60
    CMP eax, 0FFFFFFFFh
    MOV ebx, eax
    JZ loc_4B136A
loc_4B12BF:
    MOV esi, eax
    MOV rdi, rbp
    CALL _chmod
    TEST eax, eax
    JNZ loc_4B1334
loc_4B12CD:
    MOV eax, cs:dword_74363C
    TEST al, 2
    JNZ loc_4B12E2
loc_4B12D7:
    TEST al, 4
    JZ loc_4B1309
loc_4B12DB:
    CMP ebx, [r12+18h]
    JZ loc_4B1309
loc_4B12E2:
    MOV edi, ebx
    AND ebx, 0FFFh
    CALL sub_4E5650
    LEA r8, [rax+1]
    MOV ecx, ebx
    MOV rdx, rbp
    MOV esi, offset aModeOfSChanged
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1309:
    MOV eax, 1
loc_4B130E:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4B1320:
    MOV rdx, rsi
    MOV rsi, rdi
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JZ loc_4B1360
loc_4B1334:
    XOR eax, eax
    TEST byte ptr cs:dword_74363C, 8
    JNZ loc_4B130E
loc_4B133F:
    MOV rdi, rbp
    MOV [rsp+38h+var_2C], eax
    CALL sub_409E60
    MOV eax, [rsp+38h+var_2C]
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4B1360:
    MOV esi, [r12+18h]
    JMP loc_4B12AC
loc_4B136A:
    MOV rsi, r13
    MOV edi, 5155E2h
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Boolean', 'dominant_operation_categories': ['DataMovement', 'BitwiseOperation', 'Comparison'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xF000', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Comparison', 'inferred_category': 'Utility/Helper'}

##### T 20 - fileAction_3
```assembly
loc_4E8F50:
    PUSH r13
    PUSH r12
    MOV r13, rdx
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV r12, rsi
    SUB rsp, 18h
    TEST ecx, ecx
    JZ loc_4E8FF0
loc_4E8F6B:
    MOV esi, [rsi+18h]
    MOV eax, esi
    AND eax, 0F000h
    CMP eax, 0A000h
    JZ loc_4E8FD9
loc_4E8F7C:
    MOV rdi, r13
    CALL sub_530C70
    CMP eax, 0FFFFFFFFh
    MOV ebx, eax
    JZ loc_4E903A
loc_4E8F8F:
    MOV esi, eax
    MOV rdi, rbp
    CALL _chmod
    TEST eax, eax
    JNZ loc_4E9004
loc_4E8F9D:
    MOV eax, cs:dword_78D63C
    TEST al, 2
    JNZ loc_4E8FB2
loc_4E8FA7:
    TEST al, 4
    JZ loc_4E8FD9
loc_4E8FAB:
    CMP ebx, [r12+18h]
    JZ loc_4E8FD9
loc_4E8FB2:
    MOV edi, ebx
    AND ebx, 0FFFh
    CALL sub_530270
    LEA r8, [rax+1]
    MOV ecx, ebx
    MOV rdx, rbp
    MOV esi, offset aModeOfSChanged
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4E8FD9:
    MOV eax, 1
loc_4E8FDE:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4E8FF0:
    MOV rdx, rsi
    MOV rsi, rdi
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JZ loc_4E9030
loc_4E9004:
    XOR eax, eax
    TEST byte ptr cs:dword_78D63C, 8
    JNZ loc_4E8FDE
loc_4E900F:
    MOV rdi, rbp
    MOV [rsp+38h+var_2C], eax
    CALL sub_40A870
    MOV eax, [rsp+38h+var_2C]
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4E9030:
    MOV esi, [r12+18h]
    JMP loc_4E8F7C
loc_4E903A:
    MOV rsi, r13
    MOV edi, 563626h
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Boolean', 'dominant_operation_categories': ['DataMovement', 'BitwiseOperation', 'Comparison'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xF000', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 21 - read_key_ungets
```assembly
loc_4E9950:
    PUSH rbp
    PUSH rbx
    MOV ebx, 0Fh
    MOV rbp, rdi
    SUB rsp, 8
    MOVZX ecx, byte ptr [rdi]
    SUB ebx, ecx
    LEA rdi, [rdi+rcx+1]
    CMP ebx, edx
    CMOVA ebx, edx
    MOV edx, ebx
    CALL _memcpy
    ADD [rbp+0], bl
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### T 21 - read_key_ungets
```assembly
loc_535B10:
    PUSH rbp
    PUSH rbx
    MOV ebx, 0Fh
    MOV rbp, rdi
    SUB rsp, 8
    MOVZX ecx, byte ptr [rdi]
    SUB ebx, ecx
    LEA rdi, [rdi+rcx+1]
    CMP ebx, edx
    CMOVA ebx, edx
    MOV edx, ebx
    CALL _memcpy
    ADD [rbp+0], bl
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x58', '0x50', '0x804'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### Q 22 - con_escape
```assembly
loc_43B3B0:
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CMP cs:byte_743640, 0
    JZ loc_43B3DA
loc_43B3CD:
    CMP byte ptr cs:dest.c_cflag, 0
    JNZ loc_43B4C0
loc_43B3DA:
    MOV edi, offset aConsoleEscapeC
    CALL sub_40A7A0
    LEA rsi, [rsp+18h+buf]
    XOR edi, edi
    MOV edx, 1
    CALL _read
    TEST rax, rax
    JLE loc_43B54A
loc_43B3FE:
    MOVZX eax, [rsp+18h+buf]
    CMP al, 65h
    JZ loc_43B530
loc_43B40B:
    JLE loc_43B488
loc_43B40D:
    CMP al, 6Ch
    JZ loc_43B4D0
loc_43B415:
    CMP al, 7Ah
    JNZ loc_43B440
loc_43B419:
    CMP byte ptr cs:dest.c_cflag, 0
    JNZ loc_43B540
loc_43B426:
    XOR edi, edi
    MOV esi, 14h
    CALL _kill
    CMP byte ptr cs:dest.c_cflag, 0
    JZ loc_43B440
loc_43B43B:
    CALL sub_43B2A0
loc_43B440:
    MOV edi, offset aContinuing
    CALL sub_40A7A0
    CMP cs:byte_743640, 0
    JZ loc_43B461
loc_43B453:
    CMP byte ptr cs:dest.c_cflag, 0
    JZ loc_43B461
loc_43B45C:
    CALL sub_43B2C0
loc_43B461:
    MOV rax, [rsp+18h+var_10]
    XOR rax, fs:28h
    MOV cs:byte_743640, 0
    JNZ loc_43B554
loc_43B47C:
    ADD rsp, 18h
    RETN 
loc_43B488:
    CMP al, 63h
    JNZ loc_43B440
loc_43B48C:
    CMP cs:byte_743640, 0
    JZ loc_43B440
loc_43B495:
    MOV byte ptr cs:dest.c_oflag+2, 0
    OR byte ptr cs:dest.c_oflag+3, 3
    CALL sub_43B310
    MOV edi, 0FD01h
    CALL sub_43B230
    MOV edi, 0FD03h
    JMP loc_43B4FF
loc_43B4C0:
    CALL sub_43B2A0
    JMP loc_43B3DA
loc_43B4D0:
    CMP cs:byte_743640, 0
    JNZ loc_43B440
loc_43B4DD:
    MOV byte ptr cs:dest.c_oflag+2, 0
    AND byte ptr cs:dest.c_oflag+3, 0FCh
    CALL sub_43B310
    MOV edi, 0FE01h
    CALL sub_43B230
    MOV edi, 0FE03h
loc_43B4FF:
    CALL sub_43B230
    MOVSXD rdx, cs:dest.c_iflag
    MOV esi, offset preg.re_nsub
    MOV edi, 3
    CALL sub_40BDA0
    MOV cs:dest.c_iflag, 0
    JMP loc_43B461
loc_43B530:
    XOR edi, edi
    CALL sub_43B2E0
loc_43B540:
    CALL sub_43B2C0
    JMP loc_43B426
loc_43B54A:
    MOV edi, 1
    CALL sub_43B2E0
loc_43B554:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'MemoryAccess'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Environment Variable Manipulation', 'inferred_category': 'System/OS Interaction'}

##### T 22 - con_escape
```assembly
loc_448C20:
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CMP cs:byte_78D640, 0
    JZ loc_448C4A
loc_448C3D:
    CMP byte ptr cs:buf.c_cflag, 0
    JNZ loc_448DE0
loc_448C4A:
    MOV edi, offset aConsoleEscapeC
    CALL sub_40BB80
    LEA rsi, [rsp+18h+buf]
    XOR edi, edi
    MOV edx, 1
    CALL _read
    TEST rax, rax
    JLE loc_449006
loc_448C6E:
    MOVZX eax, [rsp+18h+buf]
    CMP al, 65h
    JZ loc_448EF8
loc_448C7B:
    JLE loc_448D10
loc_448C81:
    CMP al, 6Ch
    JZ loc_448E00
loc_448C89:
    CMP al, 7Ah
    JNZ loc_448CC0
loc_448C8D:
    CMP byte ptr cs:buf.c_cflag, 0
    JNZ loc_448F00
loc_448C9A:
    XOR edi, edi
    MOV esi, 14h
    CALL _kill
    CMP byte ptr cs:buf.c_cflag, 0
    JZ loc_448CC0
loc_448CAF:
    MOV edx, offset stru_78D38C
    MOV esi, 1
    XOR edi, edi
    CALL _tcsetattr
loc_448CC0:
    MOV edi, offset aContinuing
    CALL sub_40BB80
    CMP cs:byte_78D640, 0
    JZ loc_448CED
loc_448CD3:
    CMP byte ptr cs:buf.c_cflag, 0
    JZ loc_448CED
loc_448CDC:
    MOV edx, offset termios_p
    MOV esi, 1
    XOR edi, edi
    CALL _tcsetattr
loc_448CED:
    MOV rax, [rsp+18h+var_10]
    XOR rax, fs:28h
    MOV cs:byte_78D640, 0
    JNZ loc_449010
loc_448D08:
    ADD rsp, 18h
    RETN 
loc_448D10:
    CMP al, 63h
    JNZ loc_448CC0
loc_448D14:
    CMP cs:byte_78D640, 0
    JZ loc_448CC0
loc_448D1D:
    XOR eax, eax
    MOV ecx, 5Dh
    MOV edx, offset aCharacter
    MOV esi, offset aEnteringSModeE
    MOV edi, 1
    OR byte ptr cs:buf.c_oflag+3, 3
    MOV byte ptr cs:buf.c_oflag+2, 1
    CALL ___printf_chk
    CMP byte ptr cs:buf.c_cflag, 0
    JNZ loc_448FF0
loc_448D53:
    MOV eax, cs:buf.c_iflag
    CMP eax, 7Dh
    MOVSXD rdx, eax
    JG loc_448F68
loc_448D65:
    MOV byte ptr ds:preg.re_nsub[rdx], 0FFh
    LEA edx, [rax+1]
    LEA ecx, [rax+3]
    MOVSXD rdx, edx
    CMP ecx, 7Dh
    MOV byte ptr ds:preg.re_nsub[rdx], 0FDh
    LEA edx, [rax+2]
    MOV cs:buf.c_iflag, ecx
    MOVSXD rdx, edx
    MOV byte ptr ds:preg.re_nsub[rdx], 1
    JLE loc_448FBB
loc_448D98:
    MOVSXD rdx, ecx
    MOV esi, offset preg.re_nsub
    MOV edi, 3
    CALL sub_40D740
    MOV edi, 3
    MOV eax, 2
    MOV esi, 1
    XOR ecx, ecx
    MOV edx, 3
loc_448DC0:
    MOVSXD rcx, ecx
    MOV byte ptr ds:preg.re_nsub[rcx], 0FFh
    MOVSXD rcx, esi
    MOV byte ptr ds:preg.re_nsub[rcx], 0FDh
    JMP loc_448EC4
loc_448DE0:
    MOV edx, offset stru_78D38C
    MOV esi, 1
    XOR edi, edi
    CALL _tcsetattr
    JMP loc_448C4A
loc_448E00:
    CMP cs:byte_78D640, 0
    JNZ loc_448CC0
loc_448E0D:
    XOR eax, eax
    MOV ecx, 43h
    MOV edx, offset aLine
    MOV esi, offset aEnteringSModeE
    MOV edi, 1
    AND byte ptr cs:buf.c_oflag+3, 0FCh
    MOV byte ptr cs:buf.c_oflag+2, 2
    CALL ___printf_chk
    CMP byte ptr cs:buf.c_cflag, 0
    JNZ loc_448FD0
loc_448E43:
    MOV eax, cs:buf.c_iflag
    CMP eax, 7Dh
    MOVSXD rdx, eax
    JG loc_448F20
loc_448E55:
    MOV byte ptr ds:preg.re_nsub[rdx], 0FFh
    LEA edx, [rax+1]
    LEA ecx, [rax+3]
    MOVSXD rdx, edx
    CMP ecx, 7Dh
    MOV byte ptr ds:preg.re_nsub[rdx], 0FEh
    LEA edx, [rax+2]
    MOV cs:buf.c_iflag, ecx
    MOVSXD rdx, edx
    MOV byte ptr ds:preg.re_nsub[rdx], 1
    JLE loc_448FAA
loc_448E88:
    MOVSXD rdx, ecx
    MOV esi, offset preg.re_nsub
    MOV edi, 3
    CALL sub_40D740
    MOV edi, 3
    MOV eax, 2
    MOV esi, 1
    XOR ecx, ecx
    MOV edx, 3
loc_448EB0:
    MOVSXD rcx, ecx
    MOV byte ptr ds:preg.re_nsub[rcx], 0FFh
    MOVSXD rcx, esi
    MOV byte ptr ds:preg.re_nsub[rcx], 0FEh
loc_448EC4:
    MOV cs:buf.c_iflag, edi
    CDQE 
    MOV esi, offset preg.re_nsub
    MOV edi, 3
    MOV byte ptr ds:preg.re_nsub[rax], 3
    CALL sub_40D740
    MOV cs:buf.c_iflag, 0
    JMP loc_448CED
loc_448EF8:
    XOR edi, edi
    CALL sub_448BF0
loc_448F00:
    MOV edx, offset termios_p
    MOV esi, 1
    XOR edi, edi
    CALL _tcsetattr
    JMP loc_448C9A
loc_448F20:
    MOV esi, offset preg.re_nsub
    MOV edi, 3
    CALL sub_40D740
    MOV byte ptr cs:preg.re_nsub, 0FFh
    MOV byte ptr cs:preg.re_nsub+1, 0FEh
    MOV edi, 6
    MOV byte ptr cs:preg.re_nsub+2, 1
    MOV eax, 5
    MOV esi, 4
    MOV ecx, 3
    MOV edx, 6
    JMP loc_448EB0
loc_448F68:
    MOV esi, offset preg.re_nsub
    MOV edi, 3
    CALL sub_40D740
    MOV byte ptr cs:preg.re_nsub, 0FFh
    MOV byte ptr cs:preg.re_nsub+1, 0FDh
    MOV edi, 6
    MOV byte ptr cs:preg.re_nsub+2, 1
    MOV eax, 5
    MOV esi, 4
    MOV ecx, 3
    MOV edx, 6
    JMP loc_448DC0
loc_448FAA:
    LEA edi, [rax+6]
    LEA esi, [rax+4]
    ADD eax, 5
    MOVSXD rdx, edi
    JMP loc_448EB0
loc_448FBB:
    LEA edi, [rax+6]
    LEA esi, [rax+4]
    ADD eax, 5
    MOVSXD rdx, edi
    JMP loc_448DC0
loc_448FD0:
    MOV edx, offset termios_p
    MOV esi, 1
    XOR edi, edi
    CALL _tcsetattr
    JMP loc_448E43
loc_448FF0:
    MOV edx, offset stru_78D38C
    MOV esi, 1
    XOR edi, edi
    CALL _tcsetattr
    JMP loc_448D53
loc_449006:
    MOV edi, 1
    CALL sub_448BF0
loc_449010:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['String', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['7'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Environment Variable Manipulation', 'inferred_category': 'System/OS Interaction'}

##### Q 23 - strftime_HHMMSS
```assembly
loc_40C860:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV ebx, esi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    TEST rdx, rdx
    JZ loc_40C8B8
loc_40C880:
    MOV rdi, rdx
    CALL _localtime
    MOV esi, ebx
    MOV rcx, rax
    MOV edx, offset aHMS
    MOV rdi, rbp
    CALL _strftime
    ADD rax, rbp
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_40C8C5
loc_40C8AD:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_40C8B8:
    MOV rdi, rsp
    CALL _time
    MOV rdx, rsp
    JMP loc_40C880
loc_40C8C5:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7', '0x10', '0x3', '0x510A36', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Management', 'inferred_category': 'System/OS Interaction'}

##### T 23 - strftime_HHMMSS
```assembly
loc_40E290:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV ebx, esi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    TEST rdx, rdx
    JZ loc_40E2E8
loc_40E2B0:
    MOV rdi, rdx
    CALL _localtime
    MOV esi, ebx
    MOV rcx, rax
    MOV edx, offset aHMS
    MOV rdi, rbp
    CALL _strftime
    ADD rax, rbp
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_40E2F5
loc_40E2DD:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_40E2E8:
    MOV rdi, rsp
    CALL _time
    MOV rdx, rsp
    JMP loc_40E2B0
loc_40E2F5:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Unknown', 'Pointer'], 'return_value_type': 'Unknown', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'LoopControl'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0', '1', '8', '3', '5', '19', '20', '28', '61', '65'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Iterative Algorithm with Multiple Loops and Conditionals', 'inferred_category': 'DataProcessing/Routine'}

##### Q 24 - i2cget_main
```assembly
loc_41B6B0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset unk_4F85E8
    SUB rsp, 28h
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    CALL sub_4DFD70
    MOV r15d, eax
    MOVSXD rax, cs:optind
    XOR edx, edx
    MOV ecx, 0FFFFFh
    MOV esi, 0Ah
    LEA r12, [rbx+rax*8]
    MOV rdi, [r12]
    CALL sub_4ECEC0
    MOV rdi, [r12+8]
    MOV ecx, 77h
    MOV edx, 3
    MOV esi, 10h
    MOV ebx, eax
    CALL sub_4ECEC0
    MOV rdi, [r12+10h]
    MOV r13d, eax
    TEST rdi, rdi
    JZ loc_41B918
loc_41B72D:
    XOR edx, edx
    MOV ecx, 0FFh
    MOV esi, 10h
    CALL sub_4ECEC0
    MOV ebp, eax
    MOV rax, [r12+18h]
    TEST rax, rax
    JZ loc_41B930
loc_41B74E:
    MOVZX edx, byte ptr [rax]
    CMP dl, 63h
    JZ loc_41B908
loc_41B75A:
    CMP dl, 77h
    JZ loc_41B780
loc_41B75F:
    CMP dl, 62h
    JZ loc_41B8F8
loc_41B768:
    MOV edi, offset aInvalidMode
    XOR eax, eax
    CALL sub_40A280
    CALL sub_408E80
loc_41B780:
    MOV r12d, 3
loc_41B786:
    XOR r14d, r14d
    CMP byte ptr [rax+1], 70h
    SETZ r14b
loc_41B791:
    MOV edi, ebx
    CALL sub_41AF90
    MOV ecx, r14d
    MOV edi, eax
    MOV edx, ebp
    MOV esi, r12d
    MOV ebx, eax
    CALL sub_41B080
    MOV eax, r15d
    MOVSXD rdx, r13d
    MOV r8d, r13d
    AND eax, 1
    MOV ecx, offset aCanTSetAddress
    MOV edi, ebx
    CMP eax, 1
    SBB esi, esi
    XOR eax, eax
    AND esi, 0FFFFFFFDh
    ADD esi, 706h
    CALL sub_40B620
    AND r15d, 2
    JZ loc_41B8E0
loc_41B7DB:
    TEST r14d, r14d
    JNZ loc_41B8C0
loc_41B7E4:
    CMP r12d, 1
    JZ loc_41B850
loc_41B7EA:
    CMP r12d, 3
    JNZ loc_41B8B0
loc_41B7F4:
    MOVZX esi, bpl
    MOV edi, ebx
    CALL sub_41B300
    MOV edi, ebx
    MOV ebp, eax
    CALL _close
    TEST ebp, ebp
    MOV edx, 4
    JS loc_41B940
loc_41B815:
    NOP dword ptr [rax]
loc_41B818:
    MOV ecx, ebp
    XOR eax, eax
    MOV esi, offset a0x0X
    MOV edi, 1
    CALL ___printf_chk
    XOR eax, eax
    MOV rcx, [rsp+58h+var_40]
    XOR rcx, fs:28h
    JNZ loc_41B961
loc_41B841:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41B850:
    TEST ebp, ebp
    JS loc_41B887
loc_41B854:
    XOR eax, eax
    MOV rdx, rsp
    MOV esi, 720h
    MOV edi, ebx
    MOV [rsp+58h+var_58], 0
    MOV [rsp+58h+var_57], bpl
    MOV [rsp+58h+var_54], 1
    MOV [rsp+58h+var_50], 0
    CALL _ioctl
    TEST eax, eax
    JS loc_41B950
loc_41B887:
    MOV edi, ebx
    CALL sub_41B290
loc_41B88E:
    MOV ebp, eax
    MOV edi, ebx
    CALL _close
    TEST ebp, ebp
    JS loc_41B940
loc_41B89F:
    MOV edx, 2
    JMP loc_41B818
loc_41B8B0:
    MOVZX esi, bpl
    MOV edi, ebx
    CALL sub_41B370
    JMP loc_41B88E
loc_41B8C0:
    MOV ecx, offset aCanTSetPec
    MOV edx, 1
    MOV esi, 708h
    MOV edi, ebx
    XOR eax, eax
    CALL sub_40B620
    JMP loc_41B7E4
loc_41B8E0:
    MOV ecx, r14d
    MOV edx, ebp
    MOV esi, r12d
    MOV edi, r13d
    CALL sub_41B200
    JMP loc_41B7DB
loc_41B8F8:
    MOV r12d, 2
    JMP loc_41B786
loc_41B908:
    MOV r12d, 1
    JMP loc_41B786
loc_41B918:
    XOR r14d, r14d
    MOV r12d, 1
    MOV ebp, 0FFFFFFFFh
    JMP loc_41B791
loc_41B930:
    XOR r14d, r14d
    MOV r12d, 2
    JMP loc_41B791
loc_41B940:
    MOV edi, offset aReadFailed
    XOR eax, eax
    CALL sub_409DA0
loc_41B950:
    MOV edi, offset aWarningWriteFa
    XOR eax, eax
    CALL sub_40A280
    JMP loc_41B887
loc_41B961:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x30', '0x28', '0x2', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 24 - i2cget_main
```assembly
loc_421BD0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset unk_546148
    SUB rsp, 68h
    MOV rax, fs:28h
    MOV [rsp+98h+var_40], rax
    XOR eax, eax
    CALL sub_5291B0
    MOV r14d, eax
    MOVSXD rax, cs:optind
    XOR edx, edx
    MOV ecx, 0FFFFFh
    MOV esi, 0Ah
    LEA r12, [rbx+rax*8]
    MOV rdi, [r12]
    CALL sub_539BA0
    MOV rdi, [r12+8]
    MOV ecx, 77h
    MOV edx, 3
    MOV esi, 10h
    MOV ebx, eax
    CALL sub_539BA0
    MOV rdi, [r12+10h]
    MOV ebp, eax
    TEST rdi, rdi
    JZ loc_421FB8
loc_421C4C:
    XOR edx, edx
    MOV ecx, 0FFh
    MOV esi, 10h
    CALL sub_539BA0
    MOV r13d, eax
    MOV rax, [r12+18h]
    TEST rax, rax
    JZ loc_421FD0
loc_421C6E:
    MOVZX edx, byte ptr [rax]
    CMP dl, 63h
    JZ loc_421F90
loc_421C7A:
    CMP dl, 77h
    JZ loc_421CA0
loc_421C7F:
    CMP dl, 62h
    JZ loc_421F80
loc_421C88:
    MOV edi, offset aInvalidMode
    XOR eax, eax
    CALL sub_40AC80
    CALL sub_409830
loc_421CA0:
    MOV r12d, 3
loc_421CA6:
    XOR r15d, r15d
    CMP byte ptr [rax+1], 70h
    SETZ r15b
loc_421CB1:
    LEA rdi, [rsp+98h+file]
    MOV r8d, ebx
    MOV ecx, offset unk_55D7B7
    MOV edx, 18h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    LEA rdi, [rsp+98h+file]
    XOR eax, eax
    MOV esi, 2
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JS loc_421DD0
loc_421CEA:
    MOV ecx, r15d
    MOV edx, r13d
    MOV esi, r12d
    MOV edi, ebx
    CALL sub_421730
    MOV eax, r14d
    MOVSXD rdx, ebp
    MOV r8d, ebp
    AND eax, 1
    MOV ecx, offset aCanTSetAddress
    MOV edi, ebx
    CMP eax, 1
    SBB esi, esi
    XOR eax, eax
    AND esi, 0FFFFFFFDh
    ADD esi, 706h
    CALL sub_40CE40
    AND r14d, 2
    JZ loc_421EB8
loc_421D2C:
    TEST r15d, r15d
    JNZ loc_421F62
loc_421D35:
    CMP r12d, 1
    JZ loc_421E50
loc_421D3F:
    CMP r12d, 3
    JNZ loc_421E00
loc_421D49:
    LEA rax, [rsp+98h+var_88]
    MOV rdx, rsp
    MOV esi, 720h
    MOV edi, ebx
    MOV [rsp+98h+var_98], 1
    MOV [rsp+98h+var_97], r13b
    MOV [rsp+98h+var_90], rax
    XOR eax, eax
    MOV [rsp+98h+var_94], 3
    CALL _ioctl
    TEST eax, eax
    JS loc_421FA0
loc_421D7D:
    MOV edi, ebx
    MOVZX ebp, [rsp+98h+var_88]
    CALL _close
    MOV edx, 4
loc_421D8E:
    MOV ecx, ebp
    XOR eax, eax
    MOV esi, offset a0x0X
    MOV edi, 1
    CALL ___printf_chk
    XOR eax, eax
    MOV rcx, [rsp+98h+var_40]
    XOR rcx, fs:28h
    JNZ loc_422009
loc_421DB7:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_421DD0:
    MOV rax, cs:qword_78D1E8
    CMP dword ptr [rax], 2
    JNZ loc_42200E
loc_421DE0:
    LEA rdi, [rsp+98h+file]
    MOV esi, 2
    MOV [rsp+98h+var_50], 2Fh
    CALL sub_40C3E0
    MOV ebx, eax
    JMP loc_421CEA
loc_421E00:
    LEA rax, [rsp+98h+var_88]
    MOV [rsp+98h+var_98], 1
    MOV [rsp+98h+var_97], r13b
    MOV [rsp+98h+var_94], 2
    MOV rdx, rsp
    MOV [rsp+98h+var_90], rax
loc_421E1E:
    XOR eax, eax
    MOV esi, 720h
    MOV edi, ebx
    CALL _ioctl
    TEST eax, eax
    JS loc_421FA0
loc_421E34:
    MOV edi, ebx
    MOVZX ebp, byte ptr [rsp+98h+var_88]
    CALL _close
    MOV edx, 2
    JMP loc_421D8E
loc_421E50:
    TEST r13d, r13d
    MOV rbp, rsp
    JS loc_421E8E
loc_421E58:
    XOR eax, eax
    MOV rdx, rsp
    MOV esi, 720h
    MOV edi, ebx
    MOV [rsp+98h+var_98], 0
    MOV [rsp+98h+var_97], r13b
    MOV [rsp+98h+var_94], 1
    MOV [rsp+98h+var_90], 0
    MOV rbp, rsp
    CALL _ioctl
    TEST eax, eax
    JS loc_421FF8
loc_421E8E:
    LEA rax, [rsp+98h+var_88]
    MOV [rsp+98h+var_98], 1
    MOV [rsp+98h+var_97], 0
    MOV [rsp+98h+var_94], 1
    MOV rdx, rbp
    MOV [rsp+98h+var_90], rax
    JMP loc_421E1E
loc_421EB8:
    XOR eax, eax
    MOV edi, offset aWarningThisPro
    SUB ebp, 50h
    CALL sub_40AC80
    CMP ebp, 7
    JA loc_421ED5
loc_421ECC:
    TEST r15d, r15d
    JNZ loc_42201F
loc_421ED5:
    CMP r12d, 1
    JNZ loc_421F28
loc_421EDB:
    TEST r13d, r13d
    JS loc_421F28
loc_421EE0:
    TEST r15d, r15d
    JNZ loc_421FE0
loc_421EE9:
    MOV rcx, cs:stderr
    MOV edx, 10h
    MOV esi, 1
    MOV edi, offset aContinueYN
    CALL _fwrite
    CALL sub_40C7D0
    CALL sub_5241D0
    TEST eax, eax
    JNZ loc_421D35
loc_421F16:
    MOV edi, offset aAborting
    XOR eax, eax
    CALL sub_40ABE0
loc_421F28:
    TEST r15d, r15d
    JZ loc_421EE9
loc_421F2D:
    XOR eax, eax
    MOV edi, offset unk_55D856
    CALL sub_40AC80
    MOV rcx, cs:stderr
    MOV edx, 10h
    MOV esi, 1
    MOV edi, offset aContinueYN
    CALL _fwrite
    CALL sub_40C7D0
    CALL sub_5241D0
    TEST eax, eax
    JZ loc_421F16
loc_421F62:
    MOV ecx, offset aCanTSetPec
    MOV edx, 1
    MOV esi, 708h
    MOV edi, ebx
    XOR eax, eax
    CALL sub_40CE40
    JMP loc_421D35
loc_421F80:
    MOV r12d, 2
    JMP loc_421CA6
loc_421F90:
    MOV r12d, 1
    JMP loc_421CA6
loc_421FA0:
    MOV edi, ebx
    CALL _close
    MOV edi, offset aReadFailed
    XOR eax, eax
    CALL sub_40A7B0
loc_421FB8:
    XOR r15d, r15d
    MOV r12d, 1
    MOV r13d, 0FFFFFFFFh
    JMP loc_421CB1
loc_421FD0:
    XOR r15d, r15d
    MOV r12d, 2
    JMP loc_421CB1
loc_421FE0:
    MOV edi, offset aWarningMayInte
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_421F2D
loc_421FF8:
    MOV edi, offset aWarningWriteFa
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_421E8E
loc_422009:
    CALL ___stack_chk_fail
loc_42200E:
    LEA rsi, [rsp+98h+file]
    MOV edi, offset aCanTOpenS
    XOR eax, eax
    CALL sub_40A7B0
loc_42201F:
    MOV edi, offset aThisIsI2cNotSm
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x30'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 25 - ipsvd_perhost_init
```assembly
loc_43B0D0:
    PUSH rbx
    MOV edi, edi
    MOV rbx, rdi
    SHL rdi, 4
    CALL sub_40AD10
    MOV cs:dword_743138, ebx
    MOV cs:qword_743140, rax
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Byte'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Comparison', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### T 25 - ipsvd_perhost_init
```assembly
loc_448A90:
    PUSH rbx
    MOV edi, edi
    MOV rbx, rdi
    SHL rdi, 4
    CALL sub_40C260
    MOV cs:dword_78D138, ebx
    MOV cs:qword_78D140, rax
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Byte'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'StringOperation', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Substring Search', 'inferred_category': 'Utility'}

##### Q 26 - blockdev_main
```assembly
loc_482E50:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 10h
    MOV rbp, [rsi+8]
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
    TEST rbp, rbp
    JZ loc_482EBD
loc_482E75:
    MOV r13, [rsi+10h]
    MOV r12, rsi
    TEST r13, r13
    JZ loc_482EBD
loc_482E81:
    CMP byte ptr [rbp+0], 2Dh
    JNZ loc_482EBD
loc_482E87:
    CMP byte ptr [rbp+1], 2Dh
    JNZ loc_482EBD
loc_482E8D:
    ADD rbp, 2
    MOV ebx, offset unk_4FC8E0
    NOP word ptr [rax+rax+00000000h]
loc_482EA0:
    LEA rsi, [rbx+4]
    MOV rdi, rbp
    CALL _strcmp
    TEST eax, eax
    JZ loc_482EC8
loc_482EB0:
    ADD rbx, 10h
    CMP rbx, offset unk_4FC990
    JNZ loc_482EA0
loc_482EBD:
    CALL sub_408E80
loc_482EC8:
    TEST byte ptr [rbx+0Eh], 4
    JNZ loc_482F80
loc_482ED2:
    MOVSX rbp, byte ptr [rbx+0Fh]
    LEA r14, [r12+8]
loc_482EDC:
    CMP qword ptr [r14+10h], 0
    JNZ loc_482EBD
loc_482EE3:
    XOR esi, esi
    MOV rdi, r13
    CALL sub_40AE50
    MOV esi, [rbx]
    MOV edi, eax
    MOV rdx, rsp
    XOR eax, eax
    MOV [rsp+38h+var_38], rbp
    CALL _ioctl
    CMP eax, 0FFFFFFFFh
    JZ loc_482FAD
loc_482F08:
    MOV rdx, [rsp+38h+var_38]
    MOVZX eax, byte ptr [rbx+0Eh]
    MOV rcx, rdx
    SHR rcx, 9
    TEST al, 10h
    CMOVNZ rdx, rcx
    AND eax, 0Bh
    CMP al, 1
    JZ loc_482F60
loc_482F24:
    JB loc_482F3B
loc_482F26:
    CMP al, 3
    JA loc_482F3B
loc_482F2A:
    MOV esi, offset aLlu
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_482F3B:
    XOR eax, eax
    MOV rcx, [rsp+38h+var_30]
    XOR rcx, fs:28h
    JNZ loc_482FA8
loc_482F4D:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_482F60:
    MOVSXD rdx, edx
    MOV esi, offset aLld_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_482F3B
loc_482F80:
    MOV rdi, r13
    LEA r14, [r12+10h]
    CALL sub_4ED090
    MOV r13, [r12+18h]
    MOVSXD rbp, eax
    TEST r13, r13
    JNZ loc_482EDC
loc_482F9E:
    JMP loc_482EBD
loc_482FA8:
    CALL ___stack_chk_fail
loc_482FAD:
    MOV rdi, [r14+8]
    CALL sub_409E70
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x200', '0x20', '0x8', '0x4', '0x1', '0x7', '0x54', '0x57'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'File Handling/Processing'}

##### T 26 - blockdev_main
```assembly
loc_4A3B40:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 10h
    MOV rbx, [rsi+8]
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
    TEST rbx, rbx
    JZ loc_4A3C74
loc_4A3B69:
    MOV r12, [rsi+10h]
    MOV rbp, rsi
    TEST r12, r12
    JZ loc_4A3C74
loc_4A3B79:
    CMP byte ptr [rbx], 2Dh
    JNZ loc_4A3C74
loc_4A3B82:
    CMP byte ptr [rbx+1], 2Dh
    JNZ loc_4A3C74
loc_4A3B8C:
    ADD rbx, 2
    MOV esi, offset aSetro
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3D68
loc_4A3BA5:
    MOV esi, offset aSetrw
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3D78
loc_4A3BBA:
    MOV esi, offset aGetro
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3D88
loc_4A3BCF:
    MOV esi, offset aGetss
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3D98
loc_4A3BE4:
    MOV esi, offset aGetbsz
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3DA8
loc_4A3BF9:
    MOV esi, offset aSetbsz
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3DB8
loc_4A3C0E:
    MOV esi, offset aGetsz
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3DC8
loc_4A3C23:
    MOV esi, offset aGetsize
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3DD8
loc_4A3C38:
    MOV esi, offset aGetsize64
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3DE8
loc_4A3C4D:
    MOV esi, offset aFlushbufs
    MOV rdi, rbx
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3C80
loc_4A3C5E:
    MOV rdi, rbx
    MOV esi, offset aRereadpt
    MOV ebx, offset unk_54A520
    CALL _strcmp
    TEST eax, eax
    JZ loc_4A3C88
loc_4A3C74:
    CALL sub_409830
loc_4A3C80:
    MOV ebx, offset unk_54A510
    NOP dword ptr [rax]
loc_4A3C88:
    TEST byte ptr [rbx+0Eh], 4
    JNZ loc_4A3D40
loc_4A3C92:
    MOVSX r13, byte ptr [rbx+0Fh]
    LEA r14, [rbp+8]
loc_4A3C9B:
    CMP qword ptr [r14+10h], 0
    JNZ loc_4A3C74
loc_4A3CA2:
    XOR esi, esi
    MOV rdi, r12
    CALL sub_40C3E0
    MOV esi, [rbx]
    MOV edi, eax
    MOV rdx, rsp
    XOR eax, eax
    MOV [rsp+38h+var_38], r13
    CALL _ioctl
    CMP eax, 0FFFFFFFFh
    JZ loc_4A3DF7
loc_4A3CC7:
    MOV rdx, [rsp+38h+var_38]
    MOVZX eax, byte ptr [rbx+0Eh]
    MOV rcx, rdx
    SHR rcx, 9
    TEST al, 10h
    CMOVNZ rdx, rcx
    AND eax, 0Bh
    CMP al, 1
    JZ loc_4A3D20
loc_4A3CE3:
    JB loc_4A3CFA
loc_4A3CE5:
    CMP al, 3
    JA loc_4A3CFA
loc_4A3CE9:
    MOV esi, offset aLlu
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4A3CFA:
    XOR eax, eax
    MOV rcx, [rsp+38h+var_30]
    XOR rcx, fs:28h
    JNZ loc_4A3DF2
loc_4A3D10:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4A3D20:
    MOVSXD rdx, edx
    MOV esi, offset aLld_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4A3CFA
loc_4A3D40:
    MOV rdi, r12
    LEA r14, [rbp+10h]
    CALL sub_53A4D0
    MOV r12, [rbp+18h]
    MOVSXD r13, eax
    TEST r12, r12
    JNZ loc_4A3C9B
loc_4A3D5C:
    JMP loc_4A3C74
loc_4A3D68:
    MOV ebx, offset unk_54A480
    JMP loc_4A3C88
loc_4A3D78:
    MOV ebx, offset unk_54A490
    JMP loc_4A3C88
loc_4A3D88:
    MOV ebx, offset unk_54A4A0
    JMP loc_4A3C88
loc_4A3D98:
    MOV ebx, offset unk_54A4B0
    JMP loc_4A3C88
loc_4A3DA8:
    MOV ebx, offset unk_54A4C0
    JMP loc_4A3C88
loc_4A3DB8:
    MOV ebx, offset unk_54A4D0
    JMP loc_4A3C88
loc_4A3DC8:
    MOV ebx, offset unk_54A4E0
    JMP loc_4A3C88
loc_4A3DD8:
    MOV ebx, offset unk_54A4F0
    JMP loc_4A3C88
loc_4A3DE8:
    MOV ebx, offset unk_54A500
    JMP loc_4A3C88
loc_4A3DF2:
    CALL ___stack_chk_fail
loc_4A3DF7:
    MOV rdi, [r14+8]
    CALL sub_40A880
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFF', '0x101', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 27 - getvar_i
```assembly
loc_4C59B0:
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    MOV eax, [rdi]
    TEST eax, 101h
    JNZ loc_4C5A18
loc_4C59D1:
    MOV rdx, [rdi+10h]
    MOV qword ptr [rdi+8], 0
    TEST rdx, rdx
    MOV [rsp+18h+var_18], rdx
    JZ loc_4C59EB
loc_4C59E6:
    CMP byte ptr [rdx], 0
    JNZ loc_4C5A20
loc_4C59EB:
    PXOR xmm0, xmm0
    AND ah, 0FDh
loc_4C59F2:
    OR ah, 1
    MOV [rbx], eax
loc_4C59F7:
    MOV rax, [rsp+18h+var_10]
    XOR rax, fs:28h
    JNZ loc_4C5A8A
loc_4C5A0B:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_4C5A18:
    MOVSD xmm0, qword ptr [rdi+8]
    JMP loc_4C59F7
loc_4C5A20:
    MOV rdi, rsp
    CALL sub_4C5900
    MOV eax, [rbx]
    MOVSD qword ptr [rbx+8], xmm0
    TEST ah, 2
    JZ loc_4C59F2
loc_4C5A34:
    MOV rdx, [rsp+18h+var_18]
    MOV rsi, cs:qword_7431F0
    JMP loc_4C5A56
loc_4C5A48:
    CMP cl, 20h
    JZ loc_4C5A52
loc_4C5A4D:
    CMP cl, 9
    JNZ loc_4C5A64
loc_4C5A52:
    ADD rdx, 1
loc_4C5A56:
    MOVZX ecx, byte ptr [rdx]
    CMP cl, 5Ch
    JNZ loc_4C5A48
loc_4C5A5E:
    CMP byte ptr [rdx+1], 0Ah
    JZ loc_4C5A80
loc_4C5A64:
    MOV ecx, eax
    MOV [rsp+18h+var_18], rdx
    AND ch, 0FDh
    CMP byte ptr [rdx], 0
    CMOVNZ eax, ecx
    JMP loc_4C59F2
loc_4C5A80:
    ADD rdx, 1
    ADD dword ptr [rsi+10h], 1
    JMP loc_4C5A52
loc_4C5A8A:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'I/O Operations'}

##### T 27 - getvar_i
```assembly
loc_501EE0:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV eax, [rdi]
    TEST eax, 101h
    JNZ loc_501F50
loc_501F02:
    MOV rbp, [rdi+10h]
    MOV qword ptr [rdi+8], 0
    TEST rbp, rbp
    MOV [rsp+28h+var_28], rbp
    JZ loc_501F1F
loc_501F17:
    MOVZX edx, byte ptr [rbp+0]
    TEST dl, dl
    JNZ loc_501F60
loc_501F1F:
    PXOR xmm0, xmm0
    AND ah, 0FDh
loc_501F26:
    OR ah, 1
    MOV [rbx], eax
loc_501F2B:
    MOV rax, [rsp+28h+var_20]
    XOR rax, fs:28h
    JNZ loc_502059
loc_501F3F:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_501F50:
    MOVSD xmm0, qword ptr [rdi+8]
    JMP loc_501F2B
loc_501F60:
    CMP dl, 30h
    JNZ loc_501F7E
loc_501F65:
    MOVZX eax, byte ptr [rbp+1]
    MOV edx, eax
    OR edx, 20h
    CMP dl, 78h
    JZ loc_50202C
loc_501F77:
    SUB eax, 30h
    CMP al, 9
    JBE loc_501FF0
loc_501F7E:
    MOV rsi, rsp
    MOV rdi, rbp
    CALL _strtod
loc_501F89:
    MOV eax, [rbx]
    MOVSD qword ptr [rbx+8], xmm0
    TEST ah, 2
    JZ loc_501F26
loc_501F95:
    MOV rdx, [rsp+28h+var_28]
    MOV rsi, cs:qword_78D1F0
    JMP loc_501FB6
loc_501FA8:
    CMP cl, 20h
    JZ loc_501FB2
loc_501FAD:
    CMP cl, 9
    JNZ loc_501FC4
loc_501FB2:
    ADD rdx, 1
loc_501FB6:
    MOVZX ecx, byte ptr [rdx]
    CMP cl, 5Ch
    JNZ loc_501FA8
loc_501FBE:
    CMP byte ptr [rdx+1], 0Ah
    JZ loc_501FE0
loc_501FC4:
    MOV ecx, eax
    MOV [rsp+28h+var_28], rdx
    AND ch, 0FDh
    CMP byte ptr [rdx], 0
    CMOVNZ eax, ecx
    JMP loc_501F26
loc_501FE0:
    ADD rdx, 1
    ADD dword ptr [rsi+10h], 1
    JMP loc_501FB2
loc_501FF0:
    XOR edx, edx
    MOV rsi, rsp
    MOV rdi, rbp
    CALL _strtoull
    MOV rdx, [rsp+28h+var_28]
    MOVZX edx, byte ptr [rdx]
    LEA ecx, [rdx-30h]
    CMP cl, 9
    JBE loc_501F7E
loc_502010:
    CMP dl, 2Eh
    JZ loc_501F7E
loc_502019:
    TEST rax, rax
    JS loc_50203B
loc_50201E:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
    JMP loc_501F89
loc_50202C:
    XOR edx, edx
    MOV rsi, rsp
    MOV rdi, rbp
    CALL _strtoull
    JMP loc_502019
loc_50203B:
    MOV rdx, rax
    PXOR xmm0, xmm0
    SHR rdx, 1
    AND eax, 1
    OR rdx, rax
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_501F89
loc_502059:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'I/O Operations'}

##### Q 28 - stat_main
```assembly
loc_4BDC40:
    PUSH r12
    PUSH rbp
    MOV r12d, offset sub_4BD500
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aTlfc
    MOV rdi, rbx
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV rdx, rsp
    MOV [rsp+28h+var_28], 0
    CALL sub_4DFD70
    TEST al, 4
    MOV eax, offset sub_4BD5A0
    CMOVZ r12, rax
    MOVSXD rax, cs:optind
    LEA rbx, [rbx+rax*8]
    MOV rdi, [rbx]
    TEST rdi, rdi
    JZ loc_4BDCD3
loc_4BDC97:
    MOV ebp, 1
    NOP dword ptr [rax+00h]
loc_4BDCA0:
    ADD rbx, 8
    MOV rsi, [rsp+28h+var_28]
    CALL r12
    MOV rdi, [rbx]
    AND ebp, eax
    TEST rdi, rdi
    JNZ loc_4BDCA0
loc_4BDCB5:
    MOV eax, ebp
    XOR eax, 1
loc_4BDCBA:
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_4BDCD7
loc_4BDCCA:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4BDCD3:
    XOR eax, eax
    JMP loc_4BDCBA
loc_4BDCD7:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x48', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop', 'inferred_category': 'Utility/Helper'}

##### T 28 - stat_main
```assembly
loc_4F7700:
    PUSH r12
    PUSH rbp
    MOV r12d, offset sub_4F6A00
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aTlfc
    MOV rdi, rbx
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV rdx, rsp
    MOV [rsp+28h+var_28], 0
    CALL sub_5291B0
    TEST al, 4
    MOV eax, offset sub_4F6E80
    CMOVZ r12, rax
    MOVSXD rax, cs:optind
    LEA rbx, [rbx+rax*8]
    MOV rdi, [rbx]
    TEST rdi, rdi
    JZ loc_4F7793
loc_4F7757:
    MOV ebp, 1
    NOP dword ptr [rax+00h]
loc_4F7760:
    ADD rbx, 8
    MOV rsi, [rsp+28h+var_28]
    CALL r12
    MOV rdi, [rbx]
    AND ebp, eax
    TEST rdi, rdi
    JNZ loc_4F7760
loc_4F7775:
    MOV eax, ebp
    XOR eax, 1
loc_4F777A:
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_4F7797
loc_4F778A:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4F7793:
    XOR eax, eax
    JMP loc_4F777A
loc_4F7797:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x48', '0x44'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop', 'inferred_category': 'Utility'}

##### Q 29 - fstype_matches
```assembly
loc_4E55C0:
    TEST rsi, rsi
    JZ loc_4E563F
loc_4E55C5:
    PUSH r12
    PUSH rbp
    MOV r12d, 1
    PUSH rbx
    CMP byte ptr [rsi], 6Eh
    MOV rbp, rdi
    MOV rbx, rsi
    JNZ loc_4E55E4
loc_4E55DA:
    JMP loc_4E5630
loc_4E55E0:
    LEA rbx, [rax+1]
loc_4E55E4:
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_4097D0
    TEST rax, rax
    JZ loc_4E5600
loc_4E55F4:
    MOVZX edx, byte ptr [rax]
    TEST dl, dl
    JZ loc_4E5620
loc_4E55FB:
    CMP dl, 2Ch
    JZ loc_4E5620
loc_4E5600:
    MOV esi, 2Ch
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JNZ loc_4E55E0
loc_4E5612:
    MOV eax, r12d
    POP rbx
    XOR eax, 1
    POP rbp
    POP r12
    RETN 
loc_4E5620:
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4E5630:
    CMP byte ptr [rsi+1], 6Fh
    JNZ loc_4E55E4
loc_4E5636:
    ADD rbx, 2
    XOR r12d, r12d
    JMP loc_4E55E4
loc_4E563F:
    MOV eax, 1
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x21', '0x28', '0x2E8', '0x2F8', '0x2F98', '0x2F90', '0x2F98', '0x2F90'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 4, 'inferred_algorithm': 'Process Creation and Management', 'inferred_category': 'System/OS Interaction'}

##### T 29 - fstype_matches
```assembly
loc_5301E0:
    TEST rsi, rsi
    JZ loc_53025F
loc_5301E5:
    PUSH r12
    PUSH rbp
    MOV r12d, 1
    PUSH rbx
    CMP byte ptr [rsi], 6Eh
    MOV rbp, rdi
    MOV rbx, rsi
    JNZ loc_530204
loc_5301FA:
    JMP loc_530250
loc_530200:
    LEA rbx, [rax+1]
loc_530204:
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_40A180
    TEST rax, rax
    JZ loc_530220
loc_530214:
    MOVZX edx, byte ptr [rax]
    TEST dl, dl
    JZ loc_530240
loc_53021B:
    CMP dl, 2Ch
    JZ loc_530240
loc_530220:
    MOV esi, 2Ch
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JNZ loc_530200
loc_530232:
    MOV eax, r12d
    POP rbx
    XOR eax, 1
    POP rbp
    POP r12
    RETN 
loc_530240:
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_530250:
    CMP byte ptr [rsi+1], 6Fh
    JNZ loc_530204
loc_530256:
    ADD rbx, 2
    XOR r12d, r12d
    JMP loc_530204
loc_53025F:
    MOV eax, 1
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x21', '0x20', '0x28', '0x2E8', '0x2F8', '0x28', '0x20', '0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 3, 'inferred_algorithm': 'Process Management', 'inferred_category': 'System/OS Interaction'}

##### Q 30 - scan_proc_net_or_maps
```assembly
loc_456E60:
    PUSH r15
    PUSH r14
    MOV r15d, esi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 228h
    MOV rax, fs:28h
    MOV [rsp+258h+var_40], rax
    XOR eax, eax
    CALL sub_40A3C0
    TEST rax, rax
    JZ loc_4570C6
loc_456E95:
    MOV ecx, cs:dest.c_iflag
    MOV rbx, rax
    TEST ecx, ecx
    JZ loc_457060
loc_456EA6:
    LEA r13, [rsp+258h+var_238]
    LEA r12, [rsp+258h+var_23C]
    MOV ebp, offset aSSSXX
loc_456EB5:
    LEA rax, [rsp+258h+stat_buf.st_ino]
    LEA r14, [rsp+258h+var_198]
    MOV [rsp+258h+var_250], rax
    NOP word ptr [rax+rax+00000000h]
loc_456ED0:
    LEA rdi, [rsp+258h+s]
    MOV rdx, rbx
    MOV esi, 0FFh
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_457010
loc_456EEE:
    LEA r8, [rsp+258h+var_230]
    LEA rdi, [rsp+258h+s]
    XOR eax, eax
    MOV rcx, r13
    MOV rdx, r12
    MOV rsi, rbp
    CALL _sscanf
    CMP eax, 3
    JNZ loc_456ED0
loc_456F10:
    MOV edx, cs:dest.c_iflag
    MOV rax, [rsp+258h+var_230]
    TEST edx, edx
    MOV [rsp+258h+stat_buf.st_ino], rax
    JNZ loc_456F98
loc_456F24:
    MOV rdx, r14
loc_456F27:
    MOV ecx, [rdx]
    ADD rdx, 4
    LEA eax, [rcx-1010101h]
    NOT ecx
    AND eax, ecx
    AND eax, 80808080h
    JZ loc_456F27
loc_456F3E:
    MOV ecx, eax
    SHR ecx, 10h
    TEST eax, 8080h
    CMOVZ eax, ecx
    LEA rcx, [rdx+2]
    CMOVZ rdx, rcx
    MOV ecx, eax
    ADD cl, al
    SBB rdx, 3
    SUB rdx, r14
    CMP edx, 8
    JZ loc_457048
loc_456F67:
    JLE loc_456F76
loc_456F69:
    TEST byte ptr cs:dword_74363C, 10h
    JNZ loc_456ED0
loc_456F76:
    CMP [rsp+258h+var_234], r15d
    JNZ loc_456ED0
loc_456F81:
    MOV rsi, [rsp+258h+var_250]
    LEA rdi, [rsp+258h+stat_buf]
    CALL sub_456DE0
    JMP loc_456ED0
loc_456F98:
    MOV edi, [rsp+258h+var_23C]
    TEST edi, edi
    JZ loc_456ED0
loc_456FA4:
    TEST rax, rax
    MOV esi, [rsp+258h+var_238]
    JZ loc_456ED0
loc_456FB1:
    TEST esi, esi
    JZ loc_456ED0
loc_456FB9:
    CALL sub_4E5580
    MOV rdx, qword ptr cs:dest.c_cflag
    MOV [rsp+258h+stat_buf.st_dev], rax
    TEST rdx, rdx
    JZ loc_456ED0
loc_456FD3:
    MOV ecx, cs:dword_74363C
    MOV rsi, [rsp+258h+stat_buf.st_ino]
    AND ecx, 1
    JMP loc_456FF4
loc_456FE8:
    MOV rdx, [rdx]
    TEST rdx, rdx
    JZ loc_456ED0
loc_456FF4:
    CMP rax, [rdx+10h]
    JNZ loc_456FE8
loc_456FFA:
    TEST ecx, ecx
    JNZ loc_457004
loc_456FFE:
    CMP [rdx+8], rsi
    JNZ loc_456FE8
loc_457004:
    MOV ebp, 1
    JMP loc_457012
loc_457010:
    XOR ebp, ebp
loc_457012:
    MOV rdi, rbx
    CALL _fclose
    MOV eax, ebp
loc_45701C:
    MOV rbx, [rsp+258h+var_40]
    XOR rbx, fs:28h
    JNZ loc_4570CD
loc_457033:
    ADD rsp, 228h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_457048:
    TEST byte ptr cs:dword_74363C, 8
    JNZ loc_456ED0
loc_457055:
    JMP loc_456F76
loc_457060:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    MOV [rsp+258h+stat_buf.st_dev], 0
    CALL _socket
    TEST eax, eax
    MOV ebp, eax
    JS loc_4570AF
loc_457080:
    LEA rdx, [rsp+258h+stat_buf]
    MOV esi, eax
    MOV edi, 1
    LEA r13, [rsp+258h+var_234]
    LEA r12, [rsp+258h+var_198]
    CALL ___fxstat64
    MOV edi, ebp
    MOV ebp, offset aD6409aFaFXXXXX
    CALL _close
    JMP loc_456EB5
loc_4570AF:
    LEA r13, [rsp+258h+var_234]
    LEA r12, [rsp+258h+var_198]
    MOV ebp, offset aD6409aFaFXXXXX
    JMP loc_456EB5
loc_4570C6:
    XOR eax, eax
    JMP loc_45701C
loc_4570CD:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2F', '0x517613', '0x4000', '0x10', '0x48', '0x8', '0x13', '0x2E', '0x0', '0x3A'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Directory Traversal and File Information Retrieval', 'inferred_category': 'File System Interaction'}

##### T 30 - scan_proc_net_or_maps
```assembly
loc_46AE80:
    PUSH r15
    PUSH r14
    MOV r15d, esi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 228h
    MOV rax, fs:28h
    MOV [rsp+258h+var_40], rax
    XOR eax, eax
    CALL sub_40AD80
    TEST rax, rax
    JZ loc_46B14D
loc_46AEB5:
    MOV edx, cs:buf.c_iflag
    MOV rbx, rax
    TEST edx, edx
    JZ loc_46B0D0
loc_46AEC6:
    LEA r13, [rsp+258h+var_238]
    LEA r12, [rsp+258h+var_23C]
    MOV ebp, offset aSSSXX
loc_46AED5:
    LEA r14, [rsp+258h+var_198]
    NOP dword ptr [rax]
loc_46AEE0:
    LEA rdi, [rsp+258h+s]
    MOV rdx, rbx
    MOV esi, 0FFh
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_46B080
loc_46AEFE:
    LEA r8, [rsp+258h+var_230]
    LEA rdi, [rsp+258h+s]
    XOR eax, eax
    MOV rcx, r13
    MOV rdx, r12
    MOV rsi, rbp
    CALL _sscanf
    CMP eax, 3
    JNZ loc_46AEE0
loc_46AF20:
    MOV eax, cs:buf.c_iflag
    MOV r8, [rsp+258h+var_230]
    TEST eax, eax
    MOV [rsp+258h+stat_buf.st_ino], r8
    JNZ loc_46B008
loc_46AF38:
    MOV rdx, r14
loc_46AF3B:
    MOV ecx, [rdx]
    ADD rdx, 4
    LEA eax, [rcx-1010101h]
    NOT ecx
    AND eax, ecx
    AND eax, 80808080h
    JZ loc_46AF3B
loc_46AF52:
    MOV ecx, eax
    SHR ecx, 10h
    TEST eax, 8080h
    CMOVZ eax, ecx
    LEA rcx, [rdx+2]
    MOV esi, eax
    CMOVZ rdx, rcx
    ADD sil, al
    SBB rdx, 3
    SUB rdx, r14
    CMP edx, 8
    JZ loc_46B0B8
loc_46AF7C:
    JLE loc_46AF8B
loc_46AF7E:
    TEST byte ptr cs:dword_78D63C, 10h
    JNZ loc_46AEE0
loc_46AF8B:
    CMP [rsp+258h+var_234], r15d
    JNZ loc_46AEE0
loc_46AF96:
    MOV rax, qword ptr cs:buf.c_cflag
    TEST rax, rax
    JZ loc_46B154
loc_46AFA6:
    MOV rcx, [rsp+258h+stat_buf.st_dev]
    JMP loc_46AFBB
loc_46AFB0:
    MOV rdx, [rax]
    TEST rdx, rdx
    JZ loc_46AFD3
loc_46AFB8:
    MOV rax, rdx
loc_46AFBB:
    CMP rcx, [rax+10h]
    JNZ loc_46AFB0
loc_46AFC1:
    CMP r8, [rax+8]
    JZ loc_46AEE0
loc_46AFCB:
    MOV rdx, [rax]
    TEST rdx, rdx
    JNZ loc_46AFB8
loc_46AFD3:
    MOV rdx, rax
loc_46AFD6:
    MOV edi, 18h
    MOV [rsp+258h+var_250], rdx
    CALL sub_40C260
    MOV rdx, [rsp+258h+var_250]
    MOV [rdx], rax
    MOV rdx, [rsp+258h+stat_buf.st_dev]
    MOV [rax+10h], rdx
    MOV rdx, [rsp+258h+stat_buf.st_ino]
    MOV [rax+8], rdx
    JMP loc_46AEE0
loc_46B008:
    MOV edi, [rsp+258h+var_23C]
    TEST edi, edi
    JZ loc_46AEE0
loc_46B014:
    MOV esi, [rsp+258h+var_238]
    TEST esi, esi
    JZ loc_46AEE0
loc_46B020:
    TEST r8, r8
    JZ loc_46AEE0
loc_46B029:
    CALL sub_5301A0
    MOV rdx, qword ptr cs:buf.c_cflag
    MOV [rsp+258h+stat_buf.st_dev], rax
    TEST rdx, rdx
    JZ loc_46AEE0
loc_46B043:
    TEST byte ptr cs:dword_78D63C, 1
    MOV rcx, [rsp+258h+stat_buf.st_ino]
    JZ loc_46B06C
loc_46B051:
    JMP loc_46B142
loc_46B060:
    MOV rdx, [rdx]
    TEST rdx, rdx
    JZ loc_46AEE0
loc_46B06C:
    CMP rax, [rdx+10h]
    JNZ loc_46B060
loc_46B072:
    CMP rcx, [rdx+8]
    JNZ loc_46B060
loc_46B078:
    MOV ebp, 1
    JMP loc_46B082
loc_46B080:
    XOR ebp, ebp
loc_46B082:
    MOV rdi, rbx
    CALL _fclose
    MOV eax, ebp
loc_46B08C:
    MOV rbx, [rsp+258h+var_40]
    XOR rbx, fs:28h
    JNZ loc_46B15E
loc_46B0A3:
    ADD rsp, 228h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46B0B8:
    TEST byte ptr cs:dword_78D63C, 8
    JZ loc_46AF8B
loc_46B0C5:
    JMP loc_46AEE0
loc_46B0D0:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    MOV [rsp+258h+stat_buf.st_dev], 0
    CALL _socket
    TEST eax, eax
    MOV ebp, eax
    JS loc_46B11F
loc_46B0F0:
    LEA rdx, [rsp+258h+stat_buf]
    MOV esi, eax
    MOV edi, 1
    LEA r13, [rsp+258h+var_234]
    LEA r12, [rsp+258h+var_198]
    CALL ___fxstat64
    MOV edi, ebp
    MOV ebp, offset aD6409aFaFXXXXX
    CALL _close
    JMP loc_46AED5
loc_46B11F:
    LEA r13, [rsp+258h+var_234]
    LEA r12, [rsp+258h+var_198]
    MOV ebp, offset aD6409aFaFXXXXX
    JMP loc_46AED5
loc_46B136:
    MOV rdx, [rdx]
    TEST rdx, rdx
    JZ loc_46AEE0
loc_46B142:
    CMP rax, [rdx+10h]
    JNZ loc_46B136
loc_46B148:
    JMP loc_46B078
loc_46B14D:
    XOR eax, eax
    JMP loc_46B08C
loc_46B154:
    MOV edx, offset buf.c_cflag
    JMP loc_46AFD6
loc_46B15E:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['UnknownType'], 'return_value_type': 'UnknownType', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xF8', '0x2', '0x565699', '0x10', '0x13', '0x14', '0x15', '0x28', '0x40', '0x4F', '0x50', '0x52', '0x63', '0x7A', '0x80', '0x81', '0x82', '0x83', '0x85', '0x88', '0x8B', '0x8C', '0x90', '0x93', '0x94', '0x98', '0x9C', '0x9F', '0xA0', '0xA5', '0xB0', '0xD6'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 29, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File System Access and Parsing', 'inferred_category': 'Application/File Handling'}

##### Q 31 - parse_conf
```assembly
loc_42980C:
    NOP dword ptr [rax+00h]
loc_429810:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_429810
loc_429820:
    CMP ebx, 2
    MOV qword ptr [r14+58h], 0
    MOV byte ptr [r14+4], 0
    JZ loc_429D0E
loc_429836:
    MOV rdi, [r14+0C0h]
    TEST rdi, rdi
    JZ loc_429858
loc_429842:
    NOP word ptr [rax+rax+00h]
loc_429848:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_429848
loc_429858:
    MOV rdi, [r14+0B8h]
    MOV qword ptr [r14+0C0h], 0
    TEST rdi, rdi
    JZ loc_429880
loc_42986F:
    NOP 
loc_429870:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_429870
loc_429880:
    MOV rdi, [r14+0C8h]
    MOV qword ptr [r14+0B8h], 0
    TEST rdi, rdi
    JZ loc_4298B0
loc_429897:
    NOP word ptr [rax+rax+00000000h]
loc_4298A0:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_4298A0
loc_4298B0:
    MOV r12, [r14+30h]
    MOV qword ptr [r14+0C8h], 0
    TEST r12, r12
    JNZ loc_4298F5
loc_4298C4:
    JMP loc_429D0E
loc_4298D0:
    CMP ebx, 1
    JG loc_429BDB
loc_4298D9:
    TEST ebx, ebx
    JNZ loc_4298EA
loc_4298DD:
    MOV rdi, [r14+30h]
    TEST rdi, rdi
    JNZ loc_42A0A5
loc_4298EA:
    MOV r12d, offset aHttpdConf
    MOV ebx, 3
loc_4298F5:
    MOV rdi, r12
    CALL sub_40A3C0
    TEST rax, rax
    JZ loc_4298D0
loc_429902:
    CMP ebx, 2
    MOV r15, rax
    MOV eax, offset buf
    CMOVZ rax, [rbp+var_100]
    MOV r13, 800000401h
    MOV [rbp+var_100], rax
    LEA rax, [rbp+s]
    ADD rax, 1
    MOV [rbp+nptr], rax
    NOP dword ptr [rax+rax+00000000h]
loc_429940:
    LEA rdi, [rbp+s]
    MOV rdx, r15
    MOV esi, 0A0h
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_429BD3
loc_42995D:
    MOVZX eax, [rbp+s]
    TEST al, al
    JZ loc_429D02
loc_42996C:
    CMP al, 0Ah
    JZ loc_429D02
loc_429974:
    CMP al, 23h
    JZ loc_429D02
loc_42997C:
    CMP al, 9
    LEA rdx, [rbp+s]
    JZ loc_429B70
loc_42998B:
    CMP al, 20h
    JNZ loc_4299B0
loc_42998F:
    JMP loc_429B70
loc_429998:
    CMP al, 0Ah
    JZ loc_4299BB
loc_42999C:
    CMP al, 23h
    JZ loc_4299BB
loc_4299A0:
    CMP al, 20h
    JZ loc_429B70
loc_4299A8:
    CMP al, 9
    JZ loc_429B70
loc_4299B0:
    ADD rdx, 1
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JNZ loc_429998
loc_4299BB:
    LEA rax, [rbp+s]
    MOV rcx, rdx
    MOV byte ptr [rdx], 0
    SUB rcx, rax
    TEST ecx, ecx
    MOV [rbp+var_F8], rcx
    JZ loc_429940
loc_4299DA:
    LEA rdi, [rbp+s]
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JZ loc_429BB8
loc_4299F4:
    MOVZX edx, byte ptr [rax+1]
    TEST dl, dl
    JZ loc_429BB8
loc_429A00:
    ADD rax, 1
    MOV rcx, [rbp+var_F8]
    MOV [rbp+src], rax
    MOVZX eax, [rbp+s]
    MOV r8d, eax
    AND r8d, 0FFFFFFDFh
    CMP r8b, 49h
    JZ loc_429CDB
loc_429A2A:
    TEST ebx, ebx
    SETZ sil
    CMP r8b, 48h
    JNZ loc_429A3F
loc_429A36:
    TEST sil, sil
    JNZ loc_429BFD
loc_429A3F:
    CMP r8b, 41h
    JZ loc_429C1A
loc_429A49:
    CMP r8b, 44h
    JZ loc_429C1A
loc_429A53:
    CMP r8b, 45h
    JNZ loc_429A62
loc_429A59:
    TEST sil, sil
    JNZ loc_429D6E
loc_429A62:
    CMP r8b, 50h
    JNZ loc_429B9C
loc_429A6C:
    TEST sil, sil
    JZ loc_429B9C
loc_429A75:
    MOV rdi, [rbp+src]
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JZ loc_429BB8
loc_429A8F:
    LEA rdx, [rax+1]
    MOV byte ptr [rax], 0
    MOV esi, offset aHttp
    MOV [rbp+var_118], rax
    MOV rdi, rdx
    MOV [rbp+var_F8], rdx
    CALL sub_4097D0
    MOV rcx, [rbp+var_118]
    MOV rdx, [rbp+var_F8]
    ADD rcx, 8
    TEST rax, rax
    CMOVNZ rdx, rcx
    CMP byte ptr [rdx], 0
    JZ loc_429BB8
loc_429AD3:
    MOV esi, 2Fh
    MOV rdi, rdx
    MOV [rbp+var_120], rdx
    CALL _strchr
    TEST rax, rax
    JZ loc_429BB8
loc_429AF0:
    MOV edi, 20h
    MOV byte ptr [rax], 0
    MOV [rbp+var_118], rax
    CALL sub_40AD10
    MOV rdi, [rbp+src]
    MOV [rbp+var_F8], rax
    CALL sub_40AD40
    MOV rcx, [rbp+var_F8]
    MOV rdx, [rbp+var_120]
    MOV [rcx+8], rax
    MOV rdi, rdx
    CALL sub_40AD40
    MOV rcx, [rbp+var_F8]
    MOV rsi, [rbp+var_118]
    MOV [rcx+10h], rax
    MOV byte ptr [rsi], 2Fh
    MOV rdi, rsi
    CALL sub_40AD40
    MOV rcx, [rbp+var_F8]
    MOV [rcx+18h], rax
    MOV rax, [r14+138h]
    MOV [rcx], rax
    MOV [r14+138h], rcx
    JMP loc_429940
loc_429B70:
    MOV rcx, rdx
    NOP dword ptr [rax+rax+00h]
loc_429B78:
    CMP al, 20h
    JZ loc_429B86
loc_429B7C:
    CMP al, 9
    JZ loc_429B86
loc_429B80:
    MOV [rdx], al
    ADD rdx, 1
loc_429B86:
    ADD rcx, 1
    MOVZX eax, byte ptr [rcx]
    CMP al, 23h
    JA loc_429B78
loc_429B91:
    BT r13, rax
    JNB loc_429B78
loc_429B97:
    JMP loc_4299BB
loc_429B9C:
    CMP al, 2Eh
    JZ loc_42A02F
loc_429BA4:
    CMP al, 2Ah
    JZ loc_429FB8
loc_429BAC:
    CMP al, 2Fh
    JZ loc_429E2C
loc_429BB4:
    NOP dword ptr [rax+00h]
loc_429BB8:
    LEA rsi, [rbp+s]
    MOV rdx, r12
    MOV edi, offset aConfigErrorSIn
    XOR eax, eax
    CALL sub_40A280
    JMP loc_429940
loc_429BD3:
    MOV rdi, r15
    CALL _fclose
loc_429BDB:
    MOV rax, [rbp+var_38]
    XOR rax, fs:28h
    JNZ loc_42A0AA
loc_429BEE:
    LEA rsp, [rbp-28h]
    POP rbx
    POP r12
    POP r13
    POP r14
    POP r15
    POP rbp
    RETN 
loc_429BFD:
    MOV rdi, [rbp+src]
    CALL sub_40AD40
    MOV [r14+38h], rax
    MOV rdi, rax
    CALL sub_40B450
    JMP loc_429940
loc_429C1A:
    CMP dl, 2Ah
    JZ loc_429D5A
loc_429C23:
    MOV edi, 18h
    MOV byte ptr [rbp+var_118], r8b
    CALL sub_40AD10
    MOV r9, rax
    MOV rax, [rbp+src]
    LEA rdi, [rbp+var_F0]
    LEA rsi, [r9+8]
    MOV edx, 2Fh
    MOV [rbp+var_F8], r9
    MOV [rbp+var_F0], rax
    CALL sub_4296F0
    TEST eax, eax
    MOV r9, [rbp+var_F8]
    JS loc_429E0C
loc_429C70:
    MOV rdi, [rbp+var_F0]
    MOVZX r8d, byte ptr [rbp+var_118]
    CMP byte ptr [rdi], 0
    JNZ loc_429F67
loc_429C88:
    CMP eax, 20h
    JG loc_429E0C
loc_429C91:
    MOV edx, 0FFFFFFFFh
    JZ loc_429C9E
loc_429C98:
    MOV ecx, eax
    SHR edx, cl
    NOT edx
loc_429C9E:
    MOV [r9+0Ch], edx
loc_429CA2:
    MOVZX eax, r8b
    CMP r8b, 44h
    MOV [r9+10h], eax
    JZ loc_429E1C
loc_429CB4:
    MOV rdx, [r14+58h]
    TEST rdx, rdx
    JNZ loc_429CCB
loc_429CBD:
    JMP loc_42A026
loc_429CC8:
    MOV rdx, rax
loc_429CCB:
    MOV rax, [rdx]
    TEST rax, rax
    JNZ loc_429CC8
loc_429CD3:
    MOV [rdx], r9
    JMP loc_429940
loc_429CDB:
    MOV rdi, [r14+40h]
    CMP rdi, offset aIndexHtml
    JZ loc_429CED
loc_429CE8:
    CALL _free
loc_429CED:
    MOV rdi, [rbp+src]
    CALL sub_40AD40
    MOV [r14+40h], rax
    JMP loc_429940
loc_429D02:
    MOV [rbp+s], 0
    JMP loc_429940
loc_429D0E:
    MOV r15, [rbp+var_100]
    MOV rdi, r15
    CALL _strlen
    ADD rax, 2Bh
    MOV r9d, offset aHttpdConf
    MOV r8, r15
    AND rax, 0FFFFFFFFFFFFFFF0h
    MOV ecx, offset aSS_6
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    SUB rsp, rax
    MOV esi, 1
    XOR eax, eax
    LEA r12, [rsp+120h+var_118+7]
    AND r12, 0FFFFFFFFFFFFFFF0h
    MOV rdi, r12
    CALL ___sprintf_chk
    JMP loc_4298F5
loc_429D5A:
    CMP r8b, 44h
    JNZ loc_429940
loc_429D64:
    MOV byte ptr [r14+4], 1
    JMP loc_429940
loc_429D6E:
    MOV rdi, [rbp+nptr]
    XOR esi, esi
    MOV edx, 0Ah
    CALL _strtol
    CMP eax, 63h
    MOV esi, eax
    JLE loc_429BB8
loc_429D8C:
    XOR eax, eax
    MOV edx, 0C8h
    JMP loc_429DAB
loc_429D95:
    ADD rax, 1
    CMP rax, 0Ah
    JZ loc_429940
loc_429DA3:
    MOVZX edx, ds:word_4F9020[rax+rax]
loc_429DAB:
    CMP esi, edx
    JNZ loc_429D95
loc_429DAF:
    MOV rdi, [rbp+src]
    MOV dword ptr [rbp+var_F8], eax
    CALL sub_40AD40
    MOV ecx, dword ptr [rbp+var_F8]
    MOV [r14+rcx*8+0E8h], rax
    JMP loc_429940
loc_429DD4:
    LEA rsi, [r9+0Ch]
    LEA rdi, [rbp+var_F0]
    XOR edx, edx
    MOV byte ptr [rbp+src], r8b
    MOV [rbp+var_F8], r9
    CALL sub_4296F0
    CMP eax, 20h
    MOV r9, [rbp+var_F8]
    MOVZX r8d, byte ptr [rbp+src]
    JZ loc_429CA2
loc_429E0C:
    MOV dword ptr [r9+0Ch], 0
    MOV dword ptr [r9+10h], 44h
loc_429E1C:
    MOV rax, [r14+58h]
    MOV [r9], rax
    MOV [r14+58h], r9
    JMP loc_429940
loc_429E2C:
    MOV rdi, [rbp+var_100]
    MOV [rbp+var_F8], rcx
    CALL _strlen
    MOV rcx, [rbp+var_F8]
    MOV ecx, ecx
    LEA rdi, [rax+rcx+19h]
    CALL sub_40AD10
    MOV rcx, [rbp+src]
    LEA rdx, [rbp+s]
    SUB rsp, 8
    MOV r8, [rbp+var_100]
    MOV [rbp+var_F8], rax
    ADD rax, 10h
    PUSH rdx
    MOV rdi, rax
    MOV esi, 1
    SUB rcx, rdx
    XOR eax, eax
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    LEA r9d, [rcx-1]
    MOV ecx, offset aSS_14
    MOV [rbp+var_118], rdi
    CALL ___sprintf_chk
    MOV rdi, [rbp+var_118]
    CALL sub_4EA990
    MOV rdx, rax
    SUB rdx, [rbp+var_118]
    MOV rsi, [rbp+src]
    MOV [rbp+var_118], rdx
    LEA rdx, [rax+1]
    MOV rdi, rdx
    CALL _strcpy
    MOV rdx, rax
    MOV rax, [rbp+var_F8]
    LEA rcx, [r14+0B8h]
    MOV [rax+8], rdx
    MOV rdx, [r14+0B8h]
    POP rax
    POP rsi
    TEST rdx, rdx
    JZ loc_429F58
loc_429EF3:
    MOV eax, dword ptr [rbp+var_118]
    MOV dword ptr [rbp+var_120], ebx
    MOV rbx, rcx
    MOV [rbp+var_118], r12
    MOV r12, rdx
    MOV [rbp+src], rax
    JMP loc_429F28
loc_429F18:
    MOV rbx, r12
    MOV r12, [r12]
    TEST r12, r12
    JZ loc_42A090
loc_429F28:
    LEA rdi, [r12+10h]
    CALL _strlen
    CMP rax, [rbp+src]
    JA loc_429F18
loc_429F3B:
    MOV rax, [rbp+var_F8]
    MOV rdx, r12
    MOV rcx, rbx
    MOV r12, [rbp+var_118]
    MOV ebx, dword ptr [rbp+var_120]
    MOV [rax], rdx
loc_429F58:
    MOV rax, [rbp+var_F8]
    MOV [rcx], rax
    JMP loc_429940
loc_429F67:
    LEA rsi, [rbp+var_E8]
    MOV edx, 0Ah
    MOV [rbp+src], r9
    MOV byte ptr [rbp+var_F8], r8b
    CALL sub_40CC40
    MOV rdx, [rbp+var_E8]
    MOVZX r8d, byte ptr [rbp+var_F8]
    MOV r9, [rbp+src]
    MOVZX edx, byte ptr [rdx]
    CMP dl, 2Eh
    JZ loc_429DD4
loc_429FA8:
    TEST dl, dl
    JZ loc_429C88
loc_429FB0:
    JMP loc_429E0C
loc_429FB8:
    CMP [rbp+var_DF], 2Eh
    JNZ loc_429BB8
loc_429FC5:
    MOV ecx, ecx
    LEA rdi, [rcx+18h]
    CALL sub_40AD10
    LEA rcx, [rax+10h]
    LEA rsi, [rbp+s]
    MOV [rbp+var_F8], rax
    MOV rdi, rcx
    CALL _strcpy
    MOV rcx, rax
    MOV rax, [rbp+src]
    LEA rsi, [rbp+s]
    MOV rdx, [rbp+var_F8]
    SUB rax, rsi
    ADD rax, rcx
    MOV byte ptr [rax-1], 0
    MOV [rdx+8], rax
    MOV rax, [r14+0C8h]
    MOV [rdx], rax
    MOV [r14+0C8h], rdx
    JMP loc_429940
loc_42A026:
    MOV [r14+58h], r9
    JMP loc_429940
loc_42A02F:
    MOV ecx, ecx
    LEA rdi, [rcx+18h]
    CALL sub_40AD10
    LEA rcx, [rax+10h]
    LEA rsi, [rbp+s]
    MOV [rbp+var_F8], rax
    MOV rdi, rcx
    CALL _strcpy
    MOV rcx, rax
    MOV rax, [rbp+src]
    LEA rsi, [rbp+s]
    MOV rdx, [rbp+var_F8]
    SUB rax, rsi
    ADD rax, rcx
    MOV byte ptr [rax-1], 0
    MOV [rdx+8], rax
    MOV rax, [r14+0C0h]
    MOV [rdx], rax
    MOV [r14+0C0h], rdx
    JMP loc_429940
loc_42A090:
    MOV rcx, rbx
    MOV r12, [rbp+var_118]
    MOV ebx, dword ptr [rbp+var_120]
    JMP loc_429F58
loc_42A0A5:
    CALL sub_409E70
loc_42A0AA:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3C', '0x8', '0x44', '0x82'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Error Handling'}

##### T 31 - parse_conf
```assembly
loc_433EBC:
    NOP dword ptr [rax+00h]
loc_433EC0:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433EC0
loc_433ED0:
    CMP ebx, 2
    MOV qword ptr [r14+58h], 0
    MOV byte ptr [r14+4], 0
    JZ loc_4343AE
loc_433EE6:
    MOV rdi, [r14+0C0h]
    TEST rdi, rdi
    JZ loc_433F08
loc_433EF2:
    NOP word ptr [rax+rax+00h]
loc_433EF8:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433EF8
loc_433F08:
    MOV rdi, [r14+0B8h]
    MOV qword ptr [r14+0C0h], 0
    TEST rdi, rdi
    JZ loc_433F30
loc_433F1F:
    NOP 
loc_433F20:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433F20
loc_433F30:
    MOV rdi, [r14+0C8h]
    MOV qword ptr [r14+0B8h], 0
    TEST rdi, rdi
    JZ loc_433F60
loc_433F47:
    NOP word ptr [rax+rax+00000000h]
loc_433F50:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433F50
loc_433F60:
    MOV r12, [r14+30h]
    MOV qword ptr [r14+0C8h], 0
    TEST r12, r12
    JNZ loc_433FA5
loc_433F74:
    JMP loc_4343AE
loc_433F80:
    CMP ebx, 1
    JG loc_43427B
loc_433F89:
    TEST ebx, ebx
    JNZ loc_433F9A
loc_433F8D:
    MOV rdi, [r14+30h]
    TEST rdi, rdi
    JNZ loc_43479C
loc_433F9A:
    MOV r12d, offset aHttpdConf
    MOV ebx, 3
loc_433FA5:
    MOV rdi, r12
    CALL sub_40AD80
    TEST rax, rax
    JZ loc_433F80
loc_433FB2:
    CMP ebx, 2
    MOV r15, rax
    MOV eax, offset data
    CMOVZ rax, [rbp+var_100]
    MOV r13, 800000401h
    MOV [rbp+var_100], rax
    LEA rax, [rbp+s]
    ADD rax, 1
    MOV [rbp+nptr], rax
    NOP dword ptr [rax+rax+00000000h]
loc_433FF0:
    LEA rdi, [rbp+s]
    MOV rdx, r15
    MOV esi, 0A0h
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_434273
loc_43400D:
    MOVZX eax, [rbp+s]
    TEST al, al
    JZ loc_4343A2
loc_43401C:
    CMP al, 0Ah
    JZ loc_4343A2
loc_434024:
    CMP al, 23h
    JZ loc_4343A2
loc_43402C:
    LEA rdx, [rbp+s]
    JMP loc_434040
loc_434038:
    CMP al, 0Ah
    JZ loc_43405B
loc_43403C:
    CMP al, 23h
    JZ loc_43405B
loc_434040:
    CMP al, 20h
    JZ loc_434210
loc_434048:
    CMP al, 9
    JZ loc_434210
loc_434050:
    ADD rdx, 1
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JNZ loc_434038
loc_43405B:
    LEA rax, [rbp+s]
    MOV rcx, rdx
    MOV byte ptr [rdx], 0
    SUB rcx, rax
    TEST ecx, ecx
    MOV [rbp+var_F8], rcx
    JZ loc_433FF0
loc_43407A:
    LEA rdi, [rbp+s]
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JZ loc_434258
loc_434094:
    MOVZX edx, byte ptr [rax+1]
    TEST dl, dl
    JZ loc_434258
loc_4340A0:
    ADD rax, 1
    MOV rcx, [rbp+var_F8]
    MOV [rbp+src], rax
    MOVZX eax, [rbp+s]
    MOV r8d, eax
    AND r8d, 0FFFFFFDFh
    CMP r8b, 49h
    JZ loc_43437B
loc_4340CA:
    TEST ebx, ebx
    SETZ sil
    CMP r8b, 48h
    JNZ loc_4340DF
loc_4340D6:
    TEST sil, sil
    JNZ loc_43429D
loc_4340DF:
    CMP r8b, 41h
    JZ loc_4342BA
loc_4340E9:
    CMP r8b, 44h
    JZ loc_4342BA
loc_4340F3:
    CMP r8b, 45h
    JNZ loc_434102
loc_4340F9:
    TEST sil, sil
    JNZ loc_43440E
loc_434102:
    CMP r8b, 50h
    JNZ loc_43423C
loc_43410C:
    TEST sil, sil
    JZ loc_43423C
loc_434115:
    MOV rdi, [rbp+src]
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JZ loc_434258
loc_43412F:
    LEA rdx, [rax+1]
    MOV byte ptr [rax], 0
    MOV esi, offset aHttp
    MOV [rbp+var_118], rax
    MOV rdi, rdx
    MOV [rbp+var_F8], rdx
    CALL sub_40A180
    MOV rcx, [rbp+var_118]
    MOV rdx, [rbp+var_F8]
    ADD rcx, 8
    TEST rax, rax
    CMOVNZ rdx, rcx
    CMP byte ptr [rdx], 0
    JZ loc_434258
loc_434173:
    MOV esi, 2Fh
    MOV rdi, rdx
    MOV [rbp+var_120], rdx
    CALL _strchr
    TEST rax, rax
    JZ loc_434258
loc_434190:
    MOV edi, 20h
    MOV byte ptr [rax], 0
    MOV [rbp+var_118], rax
    CALL sub_40C260
    MOV rdi, [rbp+src]
    MOV [rbp+var_F8], rax
    CALL sub_40C290
    MOV rcx, [rbp+var_F8]
    MOV rdx, [rbp+var_120]
    MOV [rcx+8], rax
    MOV rdi, rdx
    CALL sub_40C290
    MOV rcx, [rbp+var_F8]
    MOV rsi, [rbp+var_118]
    MOV [rcx+10h], rax
    MOV byte ptr [rsi], 2Fh
    MOV rdi, rsi
    CALL sub_40C290
    MOV rcx, [rbp+var_F8]
    MOV [rcx+18h], rax
    MOV rax, [r14+138h]
    MOV [rcx], rax
    MOV [r14+138h], rcx
    JMP loc_433FF0
loc_434210:
    MOV rcx, rdx
    NOP dword ptr [rax+rax+00h]
loc_434218:
    CMP al, 20h
    JZ loc_434226
loc_43421C:
    CMP al, 9
    JZ loc_434226
loc_434220:
    MOV [rdx], al
    ADD rdx, 1
loc_434226:
    ADD rcx, 1
    MOVZX eax, byte ptr [rcx]
    CMP al, 23h
    JA loc_434218
loc_434231:
    BT r13, rax
    JNB loc_434218
loc_434237:
    JMP loc_43405B
loc_43423C:
    CMP al, 2Eh
    JZ loc_43471F
loc_434244:
    CMP al, 2Ah
    JZ loc_4346A8
loc_43424C:
    CMP al, 2Fh
    JZ loc_43451A
loc_434254:
    NOP dword ptr [rax+00h]
loc_434258:
    LEA rsi, [rbp+s]
    MOV rdx, r12
    MOV edi, offset aConfigErrorSIn
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_433FF0
loc_434273:
    MOV rdi, r15
    CALL _fclose
loc_43427B:
    MOV rax, [rbp+var_38]
    XOR rax, fs:28h
    JNZ loc_4347AB
loc_43428E:
    LEA rsp, [rbp-28h]
    POP rbx
    POP r12
    POP r13
    POP r14
    POP r15
    POP rbp
    RETN 
loc_43429D:
    MOV rdi, [rbp+src]
    CALL sub_40C290
    MOV [r14+38h], rax
    MOV rdi, rax
    CALL sub_40CC60
    JMP loc_433FF0
loc_4342BA:
    CMP dl, 2Ah
    JZ loc_4343FA
loc_4342C3:
    MOV edi, 18h
    MOV byte ptr [rbp+var_118], r8b
    CALL sub_40C260
    MOV r9, rax
    MOV rax, [rbp+src]
    LEA rdi, [rbp+var_F0]
    LEA rsi, [r9+8]
    MOV edx, 2Fh
    MOV [rbp+var_F8], r9
    MOV [rbp+var_F0], rax
    CALL sub_433D90
    TEST eax, eax
    MOV r9, [rbp+var_F8]
    JS loc_4344FA
loc_434310:
    MOV rdi, [rbp+var_F0]
    MOVZX r8d, byte ptr [rbp+var_118]
    CMP byte ptr [rdi], 0
    JNZ loc_434656
loc_434328:
    CMP eax, 20h
    JG loc_4344FA
loc_434331:
    MOV edx, 0FFFFFFFFh
    JZ loc_43433E
loc_434338:
    MOV ecx, eax
    SHR edx, cl
    NOT edx
loc_43433E:
    MOV [r9+0Ch], edx
loc_434342:
    MOVZX eax, r8b
    CMP r8b, 44h
    MOV [r9+10h], eax
    JZ loc_43450A
loc_434354:
    MOV rdx, [r14+58h]
    TEST rdx, rdx
    JNZ loc_43436B
loc_43435D:
    JMP loc_434716
loc_434368:
    MOV rdx, rax
loc_43436B:
    MOV rax, [rdx]
    TEST rax, rax
    JNZ loc_434368
loc_434373:
    MOV [rdx], r9
    JMP loc_433FF0
loc_43437B:
    MOV rdi, [r14+40h]
    CMP rdi, offset aIndexHtml
    JZ loc_43438D
loc_434388:
    CALL _free
loc_43438D:
    MOV rdi, [rbp+src]
    CALL sub_40C290
    MOV [r14+40h], rax
    JMP loc_433FF0
loc_4343A2:
    MOV [rbp+s], 0
    JMP loc_433FF0
loc_4343AE:
    MOV r15, [rbp+var_100]
    MOV rdi, r15
    CALL _strlen
    ADD rax, 2Bh
    MOV r9d, offset aHttpdConf
    MOV r8, r15
    AND rax, 0FFFFFFFFFFFFFFF0h
    MOV ecx, offset aSS_6
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    SUB rsp, rax
    MOV esi, 1
    XOR eax, eax
    LEA r12, [rsp+120h+var_118+7]
    AND r12, 0FFFFFFFFFFFFFFF0h
    MOV rdi, r12
    CALL ___sprintf_chk
    JMP loc_433FA5
loc_4343FA:
    CMP r8b, 44h
    JNZ loc_433FF0
loc_434404:
    MOV byte ptr [r14+4], 1
    JMP loc_433FF0
loc_43440E:
    MOV rdi, [rbp+nptr]
    XOR esi, esi
    MOV edx, 0Ah
    CALL _strtol
    CMP eax, 63h
    JLE loc_434258
loc_43442A:
    CMP eax, 0C8h
    JZ loc_4347BA
loc_434435:
    CMP eax, 0CEh
    JZ loc_4347B0
loc_434440:
    CMP eax, 12Eh
    JZ loc_4347A1
loc_43444B:
    CMP eax, 198h
    JZ loc_4347F3
loc_434456:
    CMP eax, 1F5h
    JZ loc_4347E9
loc_434461:
    CMP eax, 191h
    JZ loc_4347DF
loc_43446C:
    CMP eax, 194h
    JZ loc_4347D5
loc_434477:
    CMP eax, 190h
    JZ loc_4347CB
loc_434482:
    CMP eax, 193h
    JZ loc_4347C1
loc_43448D:
    CMP eax, 1F4h
    MOV edx, 9
    JNZ loc_433FF0
loc_43449D:
    MOV rdi, [rbp+src]
    MOV dword ptr [rbp+var_F8], edx
    CALL sub_40C290
    MOV edx, dword ptr [rbp+var_F8]
    MOV [r14+rdx*8+0E8h], rax
    JMP loc_433FF0
loc_4344C2:
    LEA rsi, [r9+0Ch]
    LEA rdi, [rbp+var_F0]
    XOR edx, edx
    MOV byte ptr [rbp+src], r8b
    MOV [rbp+var_F8], r9
    CALL sub_433D90
    CMP eax, 20h
    MOV r9, [rbp+var_F8]
    MOVZX r8d, byte ptr [rbp+src]
    JZ loc_434342
loc_4344FA:
    MOV dword ptr [r9+0Ch], 0
    MOV dword ptr [r9+10h], 44h
loc_43450A:
    MOV rax, [r14+58h]
    MOV [r9], rax
    MOV [r14+58h], r9
    JMP loc_433FF0
loc_43451A:
    MOV rdi, [rbp+var_100]
    MOV [rbp+var_F8], rcx
    CALL _strlen
    MOV rcx, [rbp+var_F8]
    MOV ecx, ecx
    LEA rdi, [rax+rcx+19h]
    CALL sub_40C260
    MOV rcx, [rbp+src]
    LEA rdx, [rbp+s]
    SUB rsp, 8
    MOV r8, [rbp+var_100]
    MOV [rbp+var_F8], rax
    ADD rax, 10h
    PUSH rdx
    MOV rdi, rax
    MOV esi, 1
    SUB rcx, rdx
    XOR eax, eax
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    LEA r9d, [rcx-1]
    MOV ecx, offset aSS_14
    MOV [rbp+var_118], rdi
    CALL ___sprintf_chk
    MOV rdi, [rbp+var_118]
    CALL sub_536BD0
    MOV rdx, rax
    SUB rdx, [rbp+var_118]
    MOV rsi, [rbp+src]
    MOV [rbp+var_118], rdx
    LEA rdx, [rax+1]
    MOV rdi, rdx
    CALL _strcpy
    MOV rdx, rax
    MOV rax, [rbp+var_F8]
    LEA rcx, [r14+0B8h]
    MOV [rax+8], rdx
    MOV rdx, [r14+0B8h]
    POP rsi
    POP rdi
    TEST rdx, rdx
    JZ loc_43464E
loc_4345E5:
    MOV eax, dword ptr [rbp+var_118]
    MOV dword ptr [rbp+var_120], ebx
    MOV rbx, rdx
    MOV [rbp+var_118], r12
    MOV r12, rcx
    MOV [rbp+src], rax
    JMP loc_43461F
loc_434610:
    MOV r12, rbx
    MOV rbx, [rbx]
    TEST rbx, rbx
    JZ loc_434780
loc_43461F:
    LEA rdi, [rbx+10h]
    CALL _strlen
    CMP rax, [rbp+src]
    JA loc_434610
loc_434631:
    MOV rax, [rbp+var_F8]
    MOV rdx, rbx
    MOV rcx, r12
    MOV ebx, dword ptr [rbp+var_120]
    MOV r12, [rbp+var_118]
    MOV [rax], rdx
loc_43464E:
    MOV [rcx], rax
    JMP loc_433FF0
loc_434656:
    LEA rsi, [rbp+var_E8]
    MOV edx, 0Ah
    MOV [rbp+src], r9
    MOV byte ptr [rbp+var_F8], r8b
    CALL sub_40E6F0
    MOV rdx, [rbp+var_E8]
    MOVZX r8d, byte ptr [rbp+var_F8]
    MOV r9, [rbp+src]
    MOVZX edx, byte ptr [rdx]
    CMP dl, 2Eh
    JZ loc_4344C2
loc_434697:
    TEST dl, dl
    JZ loc_434328
loc_43469F:
    JMP loc_4344FA
loc_4346A8:
    CMP [rbp+var_DF], 2Eh
    JNZ loc_434258
loc_4346B5:
    MOV ecx, ecx
    LEA rdi, [rcx+18h]
    CALL sub_40C260
    LEA rcx, [rax+10h]
    LEA rsi, [rbp+s]
    MOV [rbp+var_F8], rax
    MOV rdi, rcx
    CALL _strcpy
    MOV rcx, rax
    MOV rax, [rbp+src]
    LEA rsi, [rbp+s]
    MOV rdx, [rbp+var_F8]
    SUB rax, rsi
    ADD rax, rcx
    MOV byte ptr [rax-1], 0
    MOV [rdx+8], rax
    MOV rax, [r14+0C8h]
    MOV [rdx], rax
    MOV [r14+0C8h], rdx
    JMP loc_433FF0
loc_434716:
    MOV [r14+58h], r9
    JMP loc_433FF0
loc_43471F:
    MOV ecx, ecx
    LEA rdi, [rcx+18h]
    CALL sub_40C260
    LEA rcx, [rax+10h]
    LEA rsi, [rbp+s]
    MOV [rbp+var_F8], rax
    MOV rdi, rcx
    CALL _strcpy
    MOV rcx, rax
    MOV rax, [rbp+src]
    LEA rsi, [rbp+s]
    MOV rdx, [rbp+var_F8]
    SUB rax, rsi
    ADD rax, rcx
    MOV byte ptr [rax-1], 0
    MOV [rdx+8], rax
    MOV rax, [r14+0C0h]
    MOV [rdx], rax
    MOV [r14+0C0h], rdx
    JMP loc_433FF0
loc_434780:
    MOV rcx, r12
    MOV ebx, dword ptr [rbp+var_120]
    MOV r12, [rbp+var_118]
    MOV rax, [rbp+var_F8]
    JMP loc_43464E
loc_43479C:
    CALL sub_40A880
loc_4347A1:
    MOV edx, 2
    JMP loc_43449D
loc_4347AB:
    CALL ___stack_chk_fail
loc_4347B0:
    MOV edx, 1
    JMP loc_43449D
loc_4347BA:
    XOR edx, edx
    JMP loc_43449D
loc_4347C1:
    MOV edx, 8
    JMP loc_43449D
loc_4347CB:
    MOV edx, 7
    JMP loc_43449D
loc_4347D5:
    MOV edx, 6
    JMP loc_43449D
loc_4347DF:
    MOV edx, 5
    JMP loc_43449D
loc_4347E9:
    MOV edx, 4
    JMP loc_43449D
loc_4347F3:
    MOV edx, 3
    JMP loc_43449D
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3C', '0x8', '0x44', '0x2', '0x82'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Error Handling'}

##### Q 32 - rtc_xopen
```assembly
loc_40AE50:

loc_4EA450:
    PUSH r15
    PUSH r14
    MOV r14, rdi
    PUSH r13
    PUSH r12
    MOV r13d, esi
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV r12, [rdi]
    MOV rbp, cs:qword_7431E8
    TEST r12, r12
    JZ loc_4EA4ED
loc_4EA473:
    MOV r15d, offset buf
loc_4EA479:
    MOV ebx, 32h
    JMP loc_4EA48F
loc_4EA480:
    MOV edi, 4E20h
    CALL _usleep
    SUB ebx, 1
    JZ loc_4EA4E0
loc_4EA48F:
    MOV dword ptr [rbp+0], 0
    MOV esi, r13d
    MOV rdi, r12
    CALL ___open64_2
    CMP dword ptr [rbp+0], 10h
    JZ loc_4EA480
loc_4EA4A7:
    TEST eax, eax
    JS loc_4EA4C0
loc_4EA4AB:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4EA4C0:
    CMP byte ptr [r15], 0
    JZ loc_4EA4F5
loc_4EA4C6:
    MOV [r14], r15
    MOV rdi, r15
    MOV r12, r15
    CALL _strlen
    LEA r15, [r15+rax+1]
    JMP loc_4EA479
loc_4EA4E0:
    MOV esi, r13d
    MOV rdi, r12
    CALL sub_40AE50
    JMP loc_4EA4A7
loc_4EA4ED:
    MOV r15d, offset aDevRtc
    JMP loc_4EA4C6
loc_4EA4F5:
    MOV rdi, [r14]
    ADD rsp, 8
    MOV esi, r13d
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    JMP sub_40AE50
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x23', '0x6E', '0xD', '0xA', '0x17', '0x4', '0x3', '0x5', '0x4', '0x7', '0x2', '0x9', '0xA', '0x1A', '0x0', '0x1', '0x77'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### T 32 - rtc_xopen
```assembly
loc_40C3E0:

loc_536690:
    PUSH r15
    PUSH r14
    MOV r14, rdi
    PUSH r13
    PUSH r12
    MOV r13d, esi
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV r12, [rdi]
    MOV rbp, cs:qword_78D1E8
    TEST r12, r12
    JZ loc_53672D
loc_5366B3:
    MOV r15d, offset data
loc_5366B9:
    MOV ebx, 32h
    JMP loc_5366CF
loc_5366C0:
    MOV edi, 4E20h
    CALL _usleep
    SUB ebx, 1
    JZ loc_536720
loc_5366CF:
    MOV dword ptr [rbp+0], 0
    MOV esi, r13d
    MOV rdi, r12
    CALL ___open64_2
    CMP dword ptr [rbp+0], 10h
    JZ loc_5366C0
loc_5366E7:
    TEST eax, eax
    JS loc_536700
loc_5366EB:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_536700:
    CMP byte ptr [r15], 0
    JZ loc_536735
loc_536706:
    MOV [r14], r15
    MOV rdi, r15
    MOV r12, r15
    CALL _strlen
    LEA r15, [r15+rax+1]
    JMP loc_5366B9
loc_536720:
    MOV esi, r13d
    MOV rdi, r12
    CALL sub_40C3E0
    JMP loc_5366E7
loc_53672D:
    MOV r15d, offset aDevRtc
    JMP loc_536706
loc_536735:
    MOV rdi, [r14]
    ADD rsp, 8
    MOV esi, r13d
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    JMP sub_40C3E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFE', '0x48', '0x23', '0x6E', '0x2C', '0x2B', '0x0A', '0x0D'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 28, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### Q 33 - glob_brace
```assembly
loc_479360:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV ebp, edx
    MOV r14, rdi
    SUB rsp, 78h
    MOV rax, fs:28h
    MOV [rsp+0A8h+var_40], rax
    XOR eax, eax
    MOVZX eax, byte ptr [rdi]
    JMP loc_479394
loc_479390:
    ADD r14, 1
loc_479394:
    TEST al, al
    JZ loc_4794C0
loc_47939C:
    CMP al, 7Bh
    JZ loc_4793C0
loc_4793A0:
    CMP al, 5Ch
    MOVZX eax, byte ptr [r14+1]
    JNZ loc_479390
loc_4793A9:
    TEST al, al
    JZ loc_479390
loc_4793AD:
    MOVZX eax, byte ptr [r14+2]
    ADD r14, 1
    JMP loc_479390
loc_4793C0:
    MOV rdi, r14
    CALL sub_475A20
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4794C0
loc_4793D4:
    CMP byte ptr [rax], 7Dh
    JZ loc_479540
loc_4793DD:
    NOP dword ptr [rax]
loc_4793E0:
    MOV rdi, rax
    CALL sub_475A20
    TEST rax, rax
    JZ loc_4794C0
loc_4793F1:
    CMP byte ptr [rax], 7Dh
    JNZ loc_4793E0
loc_4793F6:
    ADD rax, 1
    LEA r12, [r14+1]
    SUB r14, r15
    MOV rdi, rax
    MOV [rsp+0A8h+src], rax
    CALL _strlen
    MOV rdi, r15
    ADD rax, 1
    MOV [rsp+0A8h+var_98], rax
    CALL _strlen
    MOV rdi, rax
    CALL sub_40ACD0
    MOV [rsp+0A8h+n], r14
    MOV [rsp+0A8h+s], rax
    JMP loc_479447
loc_479438:
    MOV rdi, rbx
    LEA r12, [rbx+1]
    CALL sub_475A20
    MOV rbx, rax
loc_479447:
    MOV r14, [rsp+0A8h+s]
    MOV rdx, [rsp+0A8h+n]
    MOV rsi, r15
    MOV rdi, r14
    CALL _mempcpy
    MOV rdx, rbx
    MOV rsi, r12
    MOV rdi, rax
    SUB rdx, r12
    CALL _mempcpy
    MOV rdx, [rsp+0A8h+var_98]
    MOV rsi, [rsp+0A8h+src]
    MOV rdi, rax
    CALL _memcpy
    MOV edx, ebp
    MOV rsi, r13
    MOV rdi, r14
    CALL sub_479360
    CMP byte ptr [rbx], 7Dh
    MOV ebp, eax
    JNZ loc_479438
loc_479492:
    MOV rdi, [rsp+0A8h+s]
    CALL _free
    MOV eax, ebp
loc_47949D:
    MOV rcx, [rsp+0A8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_479586
loc_4794B1:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4794C0:
    LEA r12, [rsp+0A8h+pglob]
    XOR eax, eax
    MOV ecx, 9
    XOR edx, edx
    XOR esi, esi
    MOV rdi, r12
    REP 
    MOV rcx, r12
    MOV rdi, r15
    CALL _glob64
    TEST eax, eax
    JZ loc_479500
loc_4794E5:
    CMP eax, 3
    JZ loc_47955C
loc_4794EA:
    CMP eax, 1
    JZ loc_479550
loc_4794EF:
    MOV esi, eax
    MOV rdx, r15
    MOV edi, offset unk_515719
    XOR eax, eax
    CALL sub_40A1E0
loc_479500:
    MOV rbx, [rsp+0A8h+pglob.gl_pathv]
    TEST rbx, rbx
    JNZ loc_479528
loc_47950A:
    JMP loc_479530
loc_479510:
    MOV rdi, r13
    ADD rbx, 8
    CALL sub_4773A0
    MOV esi, ebp
    MOV rdi, r13
    CALL sub_476FB0
    MOV ebp, eax
loc_479528:
    MOV rsi, [rbx]
    TEST rsi, rsi
    JNZ loc_479510
loc_479530:
    MOV rdi, r12
    CALL _globfree64
    MOV eax, ebp
    JMP loc_47949D
loc_479540:
    LEA r14, [rax+1]
    MOVZX eax, byte ptr [rax+1]
    JMP loc_479394
loc_479550:
    MOV edi, offset aOutOfMemory
    XOR eax, eax
    CALL sub_40A1E0
loc_47955C:
    MOV rdi, r12
    CALL _globfree64
    MOV rdi, r15
    CALL sub_476310
    MOV rsi, r15
    MOV rdi, r13
    CALL sub_4773A0
    MOV esi, ebp
    MOV rdi, r13
    CALL sub_476FB0
    JMP loc_47949D
loc_479586:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x64', '0x210', '0x18', '0x1C4', '0x8', '0x1', '0x1FF', '0x1FFFFF', '0x1B4', '0x1AC', '0x1A0', '0x20207261747375', '0x20', '0x94', '0x8', '0x1', '0x200'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Formatting and Output', 'inferred_category': 'IO/Output'}

##### T 33 - glob_brace
```assembly
loc_496D80:
    PUSH r15
    PUSH r14
    MOV r14, rdi
    PUSH r13
    PUSH r12
    MOV r12d, edx
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV rsi, rdi
    SUB rsp, 78h
    MOV rax, fs:28h
    MOV [rsp+0A8h+var_40], rax
    XOR eax, eax
    MOVZX eax, byte ptr [rdi]
    JMP loc_496DB4
loc_496DB0:
    ADD rsi, 1
loc_496DB4:
    TEST al, al
    JZ loc_496E20
loc_496DB8:
    CMP al, 7Bh
    JZ loc_496DD8
loc_496DBC:
    CMP al, 5Ch
    MOVZX eax, byte ptr [rsi+1]
    JNZ loc_496DB0
loc_496DC4:
    TEST al, al
    JZ loc_496DB0
loc_496DC8:
    MOVZX eax, byte ptr [rsi+2]
    ADD rsi, 1
    JMP loc_496DB0
loc_496DD8:
    LEA r15, [rsi+1]
    XOR edx, edx
    MOV r13, r15
loc_496DE1:
    MOVZX eax, byte ptr [r13+0]
    TEST al, al
    JZ loc_496E20
loc_496DEA:
    CMP al, 5Ch
    JZ loc_496F38
loc_496DF2:
    CMP al, 7Dh
    JZ loc_496F50
loc_496DFA:
    CMP al, 2Ch
    JZ loc_496F70
loc_496E02:
    ADD r13, 1
    CMP al, 7Bh
    SETZ al
    MOVZX eax, al
    ADD edx, eax
    MOVZX eax, byte ptr [r13+0]
    TEST al, al
    JNZ loc_496DEA
loc_496E19:
    NOP dword ptr [rax+00000000h]
loc_496E20:
    LEA rdi, [rsp+0A8h+pglob]
    XOR eax, eax
    MOV ecx, 9
    XOR edx, edx
    XOR esi, esi
    REP 
    LEA rcx, [rsp+0A8h+pglob]
    MOV rdi, r14
    CALL _glob64
    TEST eax, eax
    JNZ loc_496F81
loc_496E48:
    MOV rbx, [rsp+0A8h+pglob.gl_pathv]
    TEST rbx, rbx
    JZ loc_497034
loc_496E56:
    CMP qword ptr [rbx], 0
    JZ loc_497034
loc_496E60:
    MOVSXD r13, r12d
    MOV r15d, [rbp+8]
    LEA rax, ds:0[r13*8]
    MOV [rsp+0A8h+pattern], rax
    JMP loc_496EC2
loc_496E80:
    LEA eax, ds:78h[r12*8]
    MOV r14d, r15d
    AND eax, 0FFFFFF80h
    SUB r14d, eax
    TEST r12b, 0Fh
    JZ loc_496FD8
loc_496E9B:
    ADD rdi, [rsp+0A8h+pattern]
    MOVSXD r8, r14d
loc_496EA3:
    ADD rbx, 8
    MOV byte ptr [rbp+14h], 0
    ADD r12d, 1
    MOV [rdi], r8
    ADD [rsp+0A8h+pattern], 8
    CMP qword ptr [rbx], 0
    JZ loc_497034
loc_496EC2:
    MOV r14, [rbx]
    MOV rdi, r14
    CALL _strlen
    LEA r13d, [rax+1]
    MOV eax, [rbp+0Ch]
    LEA edx, [r13+r15+0]
    CMP edx, eax
    JG loc_496FA8
loc_496EE1:
    MOV rax, [rbp+0]
loc_496EE5:
    MOVSXD rcx, r15d
    MOVSXD rdx, r13d
    MOV rsi, r14
    LEA rdi, [rax+rcx]
    CALL _mempcpy
    MOV byte ptr [rax], 0
    MOV r15d, [rbp+8]
    MOV rdi, [rbp+0]
    ADD r15d, r13d
    CMP byte ptr [rbp+15h], 0
    MOV [rbp+8], r15d
    JZ loc_496E80
loc_496F13:
    LEA eax, ds:80h[r12*8]
    MOV r8d, r15d
    MOV byte ptr [rbp+15h], 0
    ADD rdi, [rsp+0A8h+pattern]
    AND eax, 0FFFFFF80h
    SUB r8d, eax
    MOVSXD r8, r8d
    JMP loc_496EA3
loc_496F38:
    CMP byte ptr [r13+1], 0
    JZ loc_496E20
loc_496F43:
    ADD r13, 2
    JMP loc_496DE1
loc_496F50:
    TEST edx, edx
    LEA eax, [rdx-1]
    JZ loc_497064
loc_496F5B:
    ADD r13, 1
    MOV edx, eax
    JMP loc_496DE1
loc_496F70:
    TEST edx, edx
    JZ loc_497106
loc_496F78:
    ADD r13, 1
    JMP loc_496DE1
loc_496F81:
    CMP eax, 3
    JZ loc_49707E
loc_496F8A:
    CMP eax, 1
    JZ loc_497072
loc_496F93:
    MOV esi, eax
    MOV rdx, r14
    MOV edi, offset unk_563802
    XOR eax, eax
    CALL sub_40ABE0
loc_496FA8:
    LEA edx, [r13+r13+0]
    MOV rdi, [rbp+0]
    OR dl, 0FFh
    ADD eax, edx
    MOV [rbp+0Ch], eax
    ADD eax, 1
    MOVSXD rsi, eax
    CALL sub_40C240
    MOV r15d, [rbp+8]
    MOV [rbp+0], rax
    JMP loc_496EE5
loc_496FD8:
    MOV eax, [rbp+0Ch]
    LEA edx, [rax+80h]
    ADD eax, 81h
    MOVSXD rsi, eax
    MOV [rbp+0Ch], edx
    CALL sub_40C240
    MOV rcx, [rsp+0A8h+pattern]
    MOVSXD r8, r14d
    MOV [rbp+0], rax
    MOV rdx, r8
    MOV [rsp+0A8h+n], r8
    LEA r14, [rax+rcx]
    LEA rdi, [rax+rcx+80h]
    MOV rsi, r14
    CALL _memmove
    MOV eax, [rbp+8]
    MOV rdi, r14
    MOV r8, [rsp+0A8h+n]
    LEA r15d, [rax+80h]
    MOV [rbp+8], r15d
    JMP loc_496EA3
loc_497034:
    LEA rdi, [rsp+0A8h+pglob]
    CALL _globfree64
    MOV eax, r12d
loc_497041:
    MOV rcx, [rsp+0A8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_4972CC
loc_497055:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_497064:
    LEA rsi, [r13+1]
    MOVZX eax, byte ptr [r13+1]
    JMP loc_496DB4
loc_497072:
    MOV edi, offset aOutOfMemory
    XOR eax, eax
    CALL sub_40ABE0
loc_49707E:
    LEA rdi, [rsp+0A8h+pglob]
    CALL _globfree64
    MOV esi, 5Ch
    MOV rdi, r14
    CALL _strchrnul
    MOV rcx, rax
    JMP loc_4970AF
loc_4970A0:
    ADD rcx, 1
    ADD rax, 1
    TEST dl, dl
    MOV [rcx-1], dl
    JZ loc_4970C1
loc_4970AF:
    MOVZX edx, byte ptr [rax]
    CMP dl, 5Ch
    JNZ loc_4970A0
loc_4970B7:
    MOVZX edx, byte ptr [rax+1]
    ADD rax, 1
    JMP loc_4970A0
loc_4970C1:
    MOV rdi, r14
    CALL _strlen
    MOVSXD rcx, dword ptr [rbp+8]
    LEA ebx, [rax+1]
    MOV eax, [rbp+0Ch]
    LEA edx, [rbx+rcx]
    CMP edx, eax
    JG loc_4972A2
loc_4970DE:
    MOV rdi, [rbp+0]
loc_4970E2:
    ADD rdi, rcx
    MOV rsi, r14
    MOVSXD rdx, ebx
    CALL _mempcpy
    MOV byte ptr [rax], 0
    ADD [rbp+8], ebx
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_492C90
    JMP loc_497041
loc_497106:
    MOV rbx, r13
loc_497109:
    ADD rbx, 1
    XOR edx, edx
loc_49710F:
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_496E20
loc_49711A:
    CMP al, 5Ch
    JZ loc_497143
loc_49711E:
    CMP al, 7Dh
    JZ loc_497158
loc_497122:
    CMP al, 2Ch
    JZ loc_497170
loc_497126:
    ADD rbx, 1
    CMP al, 7Bh
    SETZ al
    MOVZX eax, al
    ADD edx, eax
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_496E20
loc_49713F:
    CMP al, 5Ch
    JNZ loc_49711E
loc_497143:
    CMP byte ptr [rbx+1], 0
    JZ loc_496E20
loc_49714D:
    ADD rbx, 2
    JMP loc_49710F
loc_497158:
    TEST edx, edx
    LEA eax, [rdx-1]
    JZ loc_49717A
loc_49715F:
    ADD rbx, 1
    MOV edx, eax
    JMP loc_49710F
loc_497170:
    TEST edx, edx
    JZ loc_497109
loc_497174:
    ADD rbx, 1
    JMP loc_49710F
loc_49717A:
    ADD rbx, 1
    MOV [rsp+0A8h+var_90], rsi
    MOV rdi, rbx
    CALL _strlen
    MOV rdi, r14
    ADD rax, 1
    MOV [rsp+0A8h+n], rax
    CALL _strlen
    MOV rdi, rax
    CALL sub_40C220
    MOV rsi, [rsp+0A8h+var_90]
    MOV [rsp+0A8h+pattern], rax
    MOV rdi, rax
    SUB rsi, r14
    MOV [rsp+0A8h+var_90], rsi
    MOV rdx, rsi
    NOP dword ptr [rax+00h]
loc_4971C0:
    MOV rsi, r14
    CALL _mempcpy
    MOV rdx, r13
    MOV rsi, r15
    MOV rdi, rax
    SUB rdx, r15
    CALL _mempcpy
    MOV rdx, [rsp+0A8h+n]
    MOV rsi, rbx
    MOV rdi, rax
    CALL _memcpy
    MOV rdi, [rsp+0A8h+pattern]
    MOV edx, r12d
    MOV rsi, rbp
    CALL sub_496D80
    CMP byte ptr [r13+0], 7Dh
    MOV r12d, eax
    JZ loc_497290
loc_497207:
    LEA r15, [r13+1]
    XOR edx, edx
    MOV r13, r15
loc_497210:
    MOVZX eax, byte ptr [r13+0]
    TEST al, al
    JZ loc_497240
loc_497219:
    CMP al, 5Ch
    JZ loc_497258
loc_49721D:
    CMP al, 7Dh
    JZ loc_497268
loc_497221:
    CMP al, 2Ch
    JZ loc_497280
loc_497225:
    ADD r13, 1
    CMP al, 7Bh
    SETZ al
    MOVZX eax, al
    ADD edx, eax
    MOVZX eax, byte ptr [r13+0]
    TEST al, al
    JNZ loc_497219
loc_49723C:
    NOP dword ptr [rax+00h]
loc_497240:
    XOR r13d, r13d
loc_497243:
    MOV rdx, [rsp+0A8h+var_90]
    MOV rdi, [rsp+0A8h+pattern]
    JMP loc_4971C0
loc_497258:
    CMP byte ptr [r13+1], 0
    JZ loc_497240
loc_49725F:
    ADD r13, 2
    JMP loc_497210
loc_497268:
    TEST edx, edx
    LEA eax, [rdx-1]
    JZ loc_497243
loc_49726F:
    ADD r13, 1
    MOV edx, eax
    JMP loc_497210
loc_497280:
    TEST edx, edx
    JZ loc_497243
loc_497284:
    ADD r13, 1
    JMP loc_497210
loc_497290:
    MOV rdi, [rsp+0A8h+pattern]
    CALL _free
    MOV eax, r12d
    JMP loc_497041
loc_4972A2:
    LEA edx, [rbx+rbx]
    MOV rdi, [rbp+0]
    OR dl, 0FFh
    ADD eax, edx
    MOV [rbp+0Ch], eax
    ADD eax, 1
    MOVSXD rsi, eax
    CALL sub_40C240
    MOVSXD rcx, dword ptr [rbp+8]
    MOV [rbp+0], rax
    MOV rdi, rax
    JMP loc_4970E2
loc_4972CC:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'StringHandling', 'ControlFlow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x40', '0x64', '0x210', '0x18C', '0x18D', '0x28', '0x127', '0x20207261747375', '0x200', '0xE0', '0x1E0', '0x2000000000000000', '0x10', '0x8', '0x4', '0x2', '0x1', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing', 'inferred_category': 'Utility/Helper'}

##### Q 34 - xrtnl_open
```assembly
loc_44EA50:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    XOR edx, edx
    MOV esi, 3
    LEA rbp, [rbx+4]
    SUB rsp, 18h
    MOV qword ptr [rdi], 0
    MOV qword ptr [rdi+8], 0
    MOV qword ptr [rdi+10h], 0
    MOV qword ptr [rdi+18h], 0
    MOV dword ptr [rdi+20h], 0
    MOV edi, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CALL sub_40B520
    MOV edx, 10h
    MOV edi, eax
    MOV [rbx], eax
    MOV [rbx+4], dx
    MOV rsi, rbp
    MOV edx, 0Ch
    CALL sub_40B540
    MOV edi, [rbx]
    LEA rdx, [rsp+28h+len]
    MOV rsi, rbp
    MOV [rsp+28h+len], 0Ch
    CALL _getsockname
    XOR edi, edi
    CALL _time
    MOV [rbx+1Ch], eax
    MOV rax, [rsp+28h+var_20]
    XOR rax, fs:28h
    JNZ loc_44EAF6
loc_44EAEF:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_44EAF6:
    CALL ___stack_chk_fail
```
None

##### T 34 - xrtnl_open
```assembly
loc_461930:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    XOR edx, edx
    MOV esi, 3
    LEA rbp, [rbx+4]
    SUB rsp, 18h
    MOV qword ptr [rdi], 0
    MOV qword ptr [rdi+8], 0
    MOV qword ptr [rdi+10h], 0
    MOV qword ptr [rdi+18h], 0
    MOV dword ptr [rdi+20h], 0
    MOV edi, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CALL sub_40CD40
    MOV edx, 10h
    MOV edi, eax
    MOV [rbx], eax
    MOV [rbx+4], dx
    MOV rsi, rbp
    MOV edx, 0Ch
    CALL sub_40CD60
    MOV edi, [rbx]
    LEA rdx, [rsp+28h+len]
    MOV rsi, rbp
    MOV [rsp+28h+len], 0Ch
    CALL _getsockname
    XOR edi, edi
    CALL _time
    MOV [rbx+1Ch], eax
    MOV rax, [rsp+28h+var_20]
    XOR rax, fs:28h
    JNZ loc_4619D6
loc_4619CF:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_4619D6:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['FileHandle'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x561F7E', '0x80', '0xD0', '0xD8', '0xE0', '0xE8', '0xF0', '0xF8', '0x100', '0x108', '0x110', '0x118', '0x128', '0x130', '0x138', '0x50', '0x10001', '0x53B960', '0x10004', '0x40C260', '0xC350', '0x10000', '0x1000000', '0x40ABE0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 25, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'I/O Operations'}

##### Q 35 - parse_chown_usergroup_or_die
```assembly
loc_40D9C0:

loc_40D9E0:
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rbp, rdi
    MOV esi, 2Eh
    SUB rsp, 8
    MOV dword ptr [rdi+4], 0FFFFFFFFh
    MOV dword ptr [rdi], 0FFFFFFFFh
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JZ loc_40DA30
loc_40DA0B:
    MOV byte ptr [rax], 3Ah
loc_40DA0E:
    CMP rbx, rax
    JZ loc_40DA60
loc_40DA13:
    CMP byte ptr [rax+1], 0
    JNZ loc_40DA1C
loc_40DA19:
    MOV byte ptr [rax], 0
loc_40DA1C:
    ADD rsp, 8
    MOV rsi, rbx
    MOV rdi, rbp
    POP rbx
    POP rbp
    JMP sub_40D9C0
loc_40DA30:
    MOV esi, 3Ah
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JNZ loc_40DA0E
loc_40DA42:
    MOV esi, offset sub_4DC2E0
    MOV rdi, rbx
    CALL sub_4DC320
    MOV [rbp+0], eax
loc_40DA52:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_40DA60:
    LEA rdi, [rbx+1]
    MOV esi, offset sub_4DC300
    CALL sub_4DC320
    MOV [rbp+4], eax
    JMP loc_40DA52
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xD8', '0x28', '0x10', '0x30'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'StackProtection'}

##### T 35 - parse_chown_usergroup_or_die
```assembly
loc_4106D0:
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rbp, rdi
    MOV esi, 2Eh
    SUB rsp, 8
    MOV dword ptr [rdi+4], 0FFFFFFFFh
    MOV dword ptr [rdi], 0FFFFFFFFh
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JZ loc_410728
loc_4106FB:
    MOV byte ptr [rax], 3Ah
loc_4106FE:
    CMP rbx, rax
    JZ loc_410750
loc_410703:
    CMP byte ptr [rax+1], 0
    JZ loc_410720
loc_410709:
    MOV rsi, rbx
    MOV rdi, rbp
    CALL sub_410570
    TEST eax, eax
    JZ loc_410763
loc_410718:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_410720:
    MOV byte ptr [rax], 0
    JMP loc_410709
loc_410728:
    MOV esi, 3Ah
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JNZ loc_4106FE
loc_41073A:
    MOV esi, offset sub_524770
    MOV rdi, rbx
    CALL sub_5247B0
    MOV [rbp+0], eax
    JMP loc_410718
loc_410750:
    LEA rdi, [rbx+1]
    MOV esi, offset sub_524790
    CALL sub_5247B0
    MOV [rbp+4], eax
    JMP loc_410718
loc_410763:
    MOV rsi, rbx
    MOV edi, offset aUnknownUserGro_0
    CALL sub_40ABE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xD8', '0xA8', '0xA0', '0x98', '0x90', '0x88', '0x78', '0x68', '0x58', '0x48', '0x38', '0x28', '0x18', '0xC0', '0xB8', '0xD0', '0xD8', '0xD4', '0xC8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Validation'}

##### Q 36 - new_line_input_t
```assembly
loc_4E3EB0:
    PUSH rbx
    MOV ebx, edi
    MOV edi, 828h
    CALL sub_40AD10
    MOV [rax], ebx
    MOV dword ptr [rax+4], 0FFFFFFFFh
    MOV dword ptr [rax+18h], 0FFh
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x50', '0x2F', '0xFFFFFFFFFFFFFFFF', '0xFFFFFFFFFFFFFFFE', '0x96', '0xB2', '0xB3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Searching', 'inferred_category': 'String Processing'}

##### T 36 - new_line_input_t
```assembly
loc_52E690:
    PUSH rbx
    MOV ebx, edi
    MOV edi, 828h
    CALL sub_40C260
    MOV [rax], ebx
    MOV dword ptr [rax+4], 0FFFFFFFFh
    MOV dword ptr [rax+18h], 0FFh
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Character'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2F', '0x50', '0xFFFFFFFFFFFFFFFF', '0xFFFFFFFFFFFFFFFE', '0x96', '0xB2', '0xB3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Search', 'inferred_category': 'Search/Traversal'}

##### Q 37 - count_lines
```assembly
loc_4D25F0:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 8
    CMP rsi, rdi
    JNB loc_4D2608
loc_4D2602:
    MOV rbx, rsi
    MOV rsi, rdi
loc_4D2608:
    MOV rdi, rsi
    CALL sub_4D2560
    CMP rbx, rax
    MOV r13, rax
    JA loc_4D265D
loc_4D2618:
    MOV rax, cs:qword_7431F0
    XOR ebp, ebp
    MOV r12, [rax+8]
    SUB r12, 1
    JMP loc_4D264B
loc_4D2630:
    MOV rdi, rbx
    CALL sub_4D2560
    XOR edx, edx
    CMP byte ptr [rax], 0Ah
    LEA rbx, [rax+1]
    SETZ dl
    ADD ebp, edx
    CMP r13, rbx
    JB loc_4D2650
loc_4D264B:
    CMP rbx, r12
    JBE loc_4D2630
loc_4D2650:
    ADD rsp, 8
    MOV eax, ebp
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4D265D:
    XOR ebp, ebp
    JMP loc_4D2650
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['ConditionalBranching', 'DataMovement', 'Arithmetic'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### T 37 - count_lines
```assembly
loc_514F10:
    CMP rsi, rdi
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    JNB loc_514F26
loc_514F20:
    MOV rbx, rsi
    MOV rsi, rdi
loc_514F26:
    MOV rax, cs:qword_78D1F0
    MOV r12, rsi
    MOV r13, [rax+8]
    LEA rbp, [r13-1]
    CMP rsi, rbp
    JNB loc_514F5E
loc_514F3D:
    MOV rdx, r13
    MOV rdi, r12
    SUB rdx, rsi
    MOV esi, 0Ah
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, rbp
    MOV r12, rax
loc_514F5E:
    XOR r14d, r14d
    CMP rbx, r12
    JA loc_514FAF
loc_514F66:
    CMP rbx, rbp
    JBE loc_514F75
loc_514F6B:
    JMP loc_514FAF
loc_514F70:
    CMP rbx, r12
    JA loc_514FAF
loc_514F75:
    CMP rbp, rbx
    MOV rdi, rbx
    JBE loc_514F9B
loc_514F7D:
    MOV rdx, r13
    MOV esi, 0Ah
    SUB rdx, rbx
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, rbp
    MOV rdi, rax
loc_514F9B:
    XOR eax, eax
    CMP byte ptr [rdi], 0Ah
    LEA rbx, [rdi+1]
    SETZ al
    ADD r14d, eax
    CMP rbx, rbp
    JBE loc_514F70
loc_514FAF:
    POP rbx
    MOV eax, r14d
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x80', '0x60', '0x7F', '0xFFFFFFFFFFFFFF80'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy with Alignment and Padding', 'inferred_category': 'Utility Function'}

##### Q 38 - dd_main
```assembly
loc_4B2900:
    PUSH r15
    PUSH r14
    MOV ecx, 7
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0F8h
    LEA rdx, [rsp+128h+n]
    MOV rax, fs:28h
    MOV [rsp+128h+var_40], rax
    XOR eax, eax
    MOV rdi, rdx
    REP 
    MOV edi, offset dest.c_cflag
    MOV ecx, offset dest
    MOV qword ptr cs:dest.c_iflag, 0
    AND rdi, 0FFFFFFFFFFFFFFF8h
    MOV qword ptr cs:dest.c_cc+1Fh, 0
    SUB rcx, rdi
    ADD ecx, 38h
    SHR ecx, 3
    REP 
    MOV r15, [rsi+8]
    TEST r15, r15
    JZ loc_4B2F5F
loc_4B2971:
    LEA r12, [rsi+10h]
    MOV ebp, 200h
    MOV [rsp+128h+nbytes], 200h
    MOV r14d, 100h
    JMP loc_4B2A26
loc_4B2990:
    MOV esi, 3Dh
    MOV rdi, r15
    CALL _strchr
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4B30A0
loc_4B29A9:
    MOV byte ptr [rax], 0
    MOV rsi, r15
    MOV edi, offset aBs
    CALL sub_4098B0
    TEST eax, eax
    JS loc_4B30A0
loc_4B29C1:
    ADD rbx, 1
    CMP eax, 7
    JZ loc_4B2DB8
loc_4B29CE:
    CMP eax, 8
    JZ loc_4B2D90
loc_4B29D7:
    CMP eax, 9
    JZ loc_4B2D70
loc_4B29E0:
    CMP eax, 0Ah
    JZ loc_4B2D48
loc_4B29E9:
    TEST eax, eax
    JNZ loc_4B2C70
loc_4B29F1:
    MOV ecx, offset unk_5000C0
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    MOV rdi, rbx
    CALL sub_4ECBC0
    MOV [rsp+128h+nbytes], rax
    MOV rbp, rax
    NOP dword ptr [rax+00h]
loc_4B2A18:
    ADD r12, 8
    MOV r15, [r12-8]
    TEST r15, r15
    JZ loc_4B2A54
loc_4B2A26:
    CMP byte ptr [r15], 2Dh
    JNZ loc_4B2990
loc_4B2A30:
    CMP byte ptr [r15+1], 2Dh
    JNZ loc_4B2990
loc_4B2A3B:
    CMP byte ptr [r15+2], 0
    JNZ loc_4B2990
loc_4B2A46:
    ADD r12, 8
    MOV r15, [r12-8]
    TEST r15, r15
    JNZ loc_4B2A26
loc_4B2A54:
    MOV rbx, [rsp+128h+nbytes]
    MOV rdi, rbx
    CALL sub_40ACD0
    CMP rbx, rbp
    MOV [rsp+128h+src], rax
    JZ loc_4B2F52
loc_4B2A6E:
    MOV rdi, rbp
    OR dword ptr cs:dest.c_cc+1Fh, 40h
    CALL sub_40ACD0
    MOV rbx, [rsp+128h+var_F0]
    MOV r12, rax
loc_4B2A85:
    MOV esi, offset sub_4B2790
    MOV edi, 0Ah
    CALL sub_40C240
    CALL sub_40C990
    TEST rbx, rbx
    MOV qword ptr cs:dest.c_cc+17h, rax
    JZ loc_4B2F99
loc_4B2AA9:
    XOR esi, esi
    MOV rdi, rbx
    CALL sub_40AE50
    XOR esi, esi
    MOV edi, eax
    CALL sub_40AF80
    MOV r15, [rsp+128h+var_E8]
    TEST r15, r15
    JZ loc_4B2FB0
loc_4B2ACA:
    MOV rbx, [rsp+128h+var_100]
    TEST rbx, rbx
    JZ loc_4B2DDD
loc_4B2AD8:
    MOV esi, 41h
    MOV rdi, r15
    CALL sub_40AE50
    MOV esi, 1
    MOV edi, eax
    CALL sub_40AF80
    TEST cs:dest.c_cc+1Fh, 1
    JZ loc_4B302B
loc_4B2AFE:
    MOV rsi, [rsp+128h+var_F8]
    TEST rsi, rsi
    JNZ loc_4B2E16
loc_4B2B0C:
    MOV rsi, rbx
    MOV edx, 1
    MOV edi, 1
    IMUL rsi, rbp
    CALL _lseek64
    TEST rax, rax
    JS loc_4B3092
loc_4B2B2B:
    NOP dword ptr [rax+rax+00h]
loc_4B2B30:
    MOV ebx, dword ptr cs:dest.c_cc+1Fh
loc_4B2B36:
    TEST bl, 80h
    JZ loc_4B2B54
loc_4B2B3B:
    MOV rax, qword ptr cs:dest.c_cc+7
    ADD rax, qword ptr cs:dest.c_line
    CMP rax, [rsp+128h+var_108]
    JZ loc_4B2FD6
loc_4B2B54:
    MOV rdx, [rsp+128h+nbytes]
    MOV rsi, [rsp+128h+src]
    XOR edi, edi
    CALL sub_40BE10
    TEST rax, rax
    MOV r15, rax
    JZ loc_4B2FD0
loc_4B2B70:
    JS loc_4B2EF8
loc_4B2B76:
    MOV ebx, dword ptr cs:dest.c_cc+1Fh
    TEST bl, 10h
    JZ loc_4B2BC4
loc_4B2B81:
    MOV rsi, [rsp+128h+var_110]
    TEST sil, 1
    JNZ loc_4B30AA
loc_4B2B90:
    MOV rax, r15
    MOV [rsp+128h+var_110], r15
    SAR rax, 1
    JZ loc_4B2BC4
loc_4B2B9D:
    MOV rdx, [rsp+128h+src]
    LEA rcx, [rdx+rax*2]
    NOP word ptr [rax+rax+00000000h]
loc_4B2BB0:
    MOVZX eax, word ptr [rdx]
    ADD rdx, 2
    ROR ax, 8
    MOV [rdx-2], ax
    CMP rdx, rcx
    JNZ loc_4B2BB0
loc_4B2BC4:
    CMP r15, [rsp+128h+nbytes]
    JZ loc_4B2EE8
loc_4B2BCE:
    ADD qword ptr cs:dest.c_cc+7, 1
    TEST bl, 2
    JNZ loc_4B2F30
loc_4B2BDF:
    TEST bl, 40h
    JZ loc_4B2E80
loc_4B2BE8:
    TEST r15, r15
    JZ loc_4B2B36
loc_4B2BF1:
    MOV r14, [rsp+128h+src]
    JMP loc_4B2C09
loc_4B2C00:
    TEST r15, r15
    JZ loc_4B2B30
loc_4B2C09:
    MOV r13, [rsp+128h+n]
    MOV rax, rbp
    MOV rsi, r14
    SUB rax, r13
    LEA rdi, [r12+r13]
    CMP rax, r15
    CMOVA rax, r15
    MOV rbx, rax
    MOV rdx, rax
    SUB r15, rbx
    ADD r14, rbx
    ADD rbx, r13
    CALL _memcpy
    CMP rbx, rbp
    MOV [rsp+128h+n], rbx
    JNZ loc_4B2C00
loc_4B2C40:
    MOV rcx, [rsp+128h+var_E8]
    MOV rdx, rbp
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_4B2710
    TEST al, al
    JNZ loc_4B2E9D
loc_4B2C5B:
    MOV [rsp+128h+n], 0
    JMP loc_4B2C00
loc_4B2C70:
    CMP eax, 1
    JZ loc_4B2D20
loc_4B2C79:
    CMP eax, 2
    JZ loc_4B2D00
loc_4B2C82:
    CMP eax, 3
    JZ loc_4B2CE0
loc_4B2C87:
    CMP eax, 4
    JNZ loc_4B2C96
loc_4B2C8C:
    MOV [rsp+128h+var_F0], rbx
    JMP loc_4B2A18
loc_4B2C96:
    CMP eax, 5
    JNZ loc_4B2CA8
loc_4B2C9B:
    MOV [rsp+128h+var_E8], rbx
    JMP loc_4B2A18
loc_4B2CA8:
    CMP eax, 6
    JNZ loc_4B2A18
loc_4B2CB1:
    MOV rsi, rbx
    MOV edi, offset aNone_4
    CALL sub_4098B0
    TEST eax, eax
    JS loc_4B30B6
loc_4B2CC6:
    MOV esi, r14d
    MOV ecx, eax
    SHL esi, cl
    OR dword ptr cs:dest.c_cc+1Fh, esi
    JMP loc_4B2A18
loc_4B2CE0:
    MOV esi, offset unk_5000C0
    MOV rdi, rbx
    CALL sub_4ECC00
    MOV [rsp+128h+var_F8], rax
    JMP loc_4B2A18
loc_4B2D00:
    MOV esi, offset unk_5000C0
    MOV rdi, rbx
    CALL sub_4ECC00
    MOV [rsp+128h+var_100], rax
    JMP loc_4B2A18
loc_4B2D20:
    MOV esi, offset unk_5000C0
    MOV rdi, rbx
    OR dword ptr cs:dest.c_cc+1Fh, 80h
    CALL sub_4ECC00
    MOV [rsp+128h+var_108], rax
    JMP loc_4B2A18
loc_4B2D48:
    MOV edx, offset aIflag
    MOV esi, offset aSkipBytes
    MOV rdi, rbx
    CALL sub_4B2660
    SHL eax, 5
    OR dword ptr cs:dest.c_cc+1Fh, eax
    JMP loc_4B2A18
loc_4B2D70:
    MOV edx, offset aConv
    MOV esi, offset aNotrunc
    MOV rdi, rbx
    CALL sub_4B2660
    OR dword ptr cs:dest.c_cc+1Fh, eax
    JMP loc_4B2A18
loc_4B2D90:
    MOV ecx, offset unk_5000C0
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    MOV rdi, rbx
    CALL sub_4ECBC0
    MOV rbp, rax
    JMP loc_4B2A18
loc_4B2DB8:
    MOV ecx, offset unk_5000C0
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    MOV rdi, rbx
    CALL sub_4ECBC0
    MOV [rsp+128h+nbytes], rax
    JMP loc_4B2A18
loc_4B2DDD:
    MOV eax, dword ptr cs:dest.c_cc+1Fh
    MOV rdi, r15
    AND eax, 1
    CMP eax, 1
    SBB esi, esi
    AND esi, 200h
    ADD esi, 41h
    CALL sub_40AE50
    MOV esi, 1
    MOV edi, eax
    CALL sub_40AF80
    MOV rsi, [rsp+128h+var_F8]
    TEST rsi, rsi
    JZ loc_4B2B30
loc_4B2E16:
    TEST cs:dest.c_cc+1Fh, 20h
    MOV ebx, 1
    MOV edx, 1
    CMOVZ rbx, [rsp+128h+nbytes]
    XOR edi, edi
    IMUL rsi, rbx
    CALL _lseek64
    TEST rax, rax
    JS loc_4B2E5A
loc_4B2E3C:
    MOV rbx, [rsp+128h+var_100]
    TEST rbx, rbx
    JZ loc_4B2B30
loc_4B2E4A:
    JMP loc_4B2B0C
loc_4B2E50:
    JZ loc_4B2E3C
loc_4B2E52:
    SUB [rsp+128h+var_F8], 1
    JZ loc_4B2E3C
loc_4B2E5A:
    MOV rsi, [rsp+128h+src]
    XOR edi, edi
    MOV rdx, rbx
    CALL sub_40BE10
    TEST rax, rax
    JNS loc_4B2E50
loc_4B2E6E:
    MOV rdi, [rsp+128h+var_F0]
    CALL sub_409E70
loc_4B2E80:
    MOV rcx, [rsp+128h+var_E8]
    MOV rdi, [rsp+128h+src]
    MOV rdx, rbp
    MOV rsi, r15
    CALL sub_4B2710
    TEST al, al
    JZ loc_4B2B30
loc_4B2E9D:
    MOV eax, 1
loc_4B2EA2:
    TEST byte ptr cs:dest+31h, 1
    JNZ loc_4B2EB8
loc_4B2EAB:
    XOR edi, edi
    MOV dword ptr [rsp+128h+nbytes], eax
    CALL sub_4B2790
    MOV eax, dword ptr [rsp+128h+nbytes]
loc_4B2EB8:
    MOV rcx, [rsp+128h+var_40]
    XOR rcx, fs:28h
    JNZ loc_4B30A5
loc_4B2ECF:
    ADD rsp, 0F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B2EE8:
    ADD qword ptr cs:dest.c_line, 1
    JMP loc_4B2BDF
loc_4B2EF8:
    TEST cs:dest.c_cc+1Fh, 4
    JZ loc_4B2E6E
loc_4B2F05:
    MOV rdi, [rsp+128h+var_F0]
    XOR r15d, r15d
    CALL sub_409E60
    MOV rsi, [rsp+128h+nbytes]
    MOV edx, 1
    XOR edi, edi
    CALL sub_40B050
    JMP loc_4B2B76
loc_4B2F30:
    MOV r14, [rsp+128h+nbytes]
    MOV rax, [rsp+128h+src]
    XOR esi, esi
    LEA rdi, [rax+r15]
    MOV rdx, r14
    SUB rdx, r15
    MOV r15, r14
    CALL _memset
    JMP loc_4B2BDF
loc_4B2F52:
    MOV rbx, [rsp+128h+var_F0]
    MOV r12, rax
    JMP loc_4B2A85
loc_4B2F5F:
    MOV edi, 200h
    MOV ebp, 200h
    CALL sub_40ACD0
    MOV esi, offset sub_4B2790
    MOV edi, 0Ah
    MOV r12, rax
    MOV [rsp+128h+src], rax
    CALL sub_40C240
    CALL sub_40C990
    MOV [rsp+128h+nbytes], 200h
    MOV qword ptr cs:dest.c_cc+17h, rax
loc_4B2F99:
    MOV r15, [rsp+128h+var_E8]
    MOV [rsp+128h+var_F0], offset aStandardInput
    TEST r15, r15
    JNZ loc_4B2ACA
loc_4B2FB0:
    MOV rsi, [rsp+128h+var_F8]
    MOV [rsp+128h+var_E8], offset aStandardOutput
    TEST rsi, rsi
    JNZ loc_4B2E16
loc_4B2FC7:
    JMP loc_4B2E3C
loc_4B2FD0:
    MOV ebx, dword ptr cs:dest.c_cc+1Fh
loc_4B2FD6:
    AND ebx, 8
    JNZ loc_4B3080
loc_4B2FDF:
    MOV rsi, [rsp+128h+n]
    TEST rsi, rsi
    JNZ loc_4B3011
loc_4B2FE9:
    XOR edi, edi
    CALL _close
    TEST eax, eax
    JS loc_4B2E6E
loc_4B2FF8:
    MOV edi, 1
    CALL _close
    TEST eax, eax
    JS loc_4B3092
loc_4B300A:
    XOR eax, eax
    JMP loc_4B2EA2
loc_4B3011:
    MOV rcx, [rsp+128h+var_E8]
    MOV rdx, rbp
    MOV rdi, r12
    CALL sub_4B2710
    TEST al, al
    JNZ loc_4B2E9D
loc_4B3029:
    JMP loc_4B2FE9
loc_4B302B:
    MOV rsi, rbx
    MOV edi, 1
    IMUL rsi, rbp
    CALL _ftruncate64
    TEST eax, eax
    JNS loc_4B2AFE
loc_4B3044:
    LEA rdx, [rsp+128h+stat_buf]
    MOV esi, 1
    MOV edi, 1
    CALL ___fxstat64
    TEST eax, eax
    JS loc_4B3075
loc_4B305C:
    MOV eax, [rsp+128h+stat_buf.st_mode]
    AND eax, 0F000h
    SUB eax, 4000h
    TEST eax, 0FFFFB000h
    JNZ loc_4B2AFE
loc_4B3075:
    MOV rdi, r15
    CALL sub_409E70
loc_4B3080:
    MOV edi, 1
    CALL _fsync
    TEST eax, eax
    JNS loc_4B2FDF
loc_4B3092:
    MOV r15, [rsp+128h+var_E8]
    JMP loc_4B3075
loc_4B30A0:
    CALL sub_408E80
loc_4B30A5:
    CALL ___stack_chk_fail
loc_4B30AA:
    MOV edi, offset aCanTSwabLuByte
    XOR eax, eax
    CALL sub_40A1E0
loc_4B30B6:
    MOV edx, 510FC7h
    MOV rsi, rbx
    MOV edi, offset aInvalidArgumen
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20', '0x30', '0x32', '0x31', '0x18', '0x28', '0x20', '0x2', '0xFFFFFFFFFFFFFFFF', '0x100', '0x6', '0xA', '0x100', '0x6', '0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing or Indexing', 'inferred_category': 'Utility/Helper'}

##### T 38 - dd_main
```assembly
loc_4EA5C0:
    PUSH r15
    PUSH r14
    MOV ecx, 7
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0F8h
    LEA rdx, [rsp+128h+n]
    MOV rax, fs:28h
    MOV [rsp+128h+var_40], rax
    XOR eax, eax
    MOV rdi, rdx
    REP 
    MOV edi, offset buf.c_cflag
    MOV ecx, offset buf
    MOV qword ptr cs:buf.c_iflag, 0
    AND rdi, 0FFFFFFFFFFFFFFF8h
    MOV qword ptr cs:buf.c_cc+1Fh, 0
    SUB rcx, rdi
    ADD ecx, 38h
    SHR ecx, 3
    REP 
    MOV rbp, [rsi+8]
    TEST rbp, rbp
    JZ loc_4EAD69
loc_4EA631:
    LEA r13, [rsi+10h]
    MOV r12d, 200h
    MOV [rsp+128h+nbytes], 200h
    JMP loc_4EA6E5
loc_4EA650:
    MOV esi, 3Dh
    MOV rdi, rbp
    CALL _strchr
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4EAEA5
loc_4EA669:
    MOV byte ptr [rax], 0
    MOV rsi, rbp
    MOV edi, offset aBs
    CALL sub_40A260
    TEST eax, eax
    JS loc_4EAEA5
loc_4EA681:
    ADD rbx, 1
    CMP eax, 7
    JZ loc_4EAA38
loc_4EA68E:
    CMP eax, 8
    JZ loc_4EAA10
loc_4EA697:
    CMP eax, 9
    JZ loc_4EA998
loc_4EA6A0:
    CMP eax, 0Ah
    JZ loc_4EAA60
loc_4EA6A9:
    TEST eax, eax
    JNZ loc_4EA928
loc_4EA6B1:
    MOV ecx, offset unk_54DB60
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    MOV rdi, rbx
    CALL sub_539340
    MOV r12, rax
    MOV [rsp+128h+nbytes], rax
    NOP dword ptr [rax+00h]
loc_4EA6D8:
    ADD r13, 8
    MOV rbp, [r13-8]
    TEST rbp, rbp
    JZ loc_4EA710
loc_4EA6E5:
    CMP byte ptr [rbp+0], 2Dh
    JNZ loc_4EA650
loc_4EA6EF:
    CMP byte ptr [rbp+1], 2Dh
    JNZ loc_4EA650
loc_4EA6F9:
    CMP byte ptr [rbp+2], 0
    JNZ loc_4EA650
loc_4EA703:
    ADD r13, 8
    MOV rbp, [r13-8]
    TEST rbp, rbp
    JNZ loc_4EA6E5
loc_4EA710:
    MOV rbx, [rsp+128h+nbytes]
    MOV rdi, rbx
    CALL sub_40C220
    CMP rbx, r12
    MOV [rsp+128h+src], rax
    JZ loc_4EAB71
loc_4EA72A:
    MOV rdi, r12
    OR dword ptr cs:buf.c_cc+1Fh, 40h
    CALL sub_40C220
    MOV rbx, [rsp+128h+var_F0]
    MOV rbp, rax
loc_4EA741:
    MOV esi, offset sub_4EA450
    MOV edi, 0Ah
    CALL sub_40DCA0
    CALL sub_40E3D0
    TEST rbx, rbx
    MOV qword ptr cs:buf.c_cc+17h, rax
    JZ loc_4EADA4
loc_4EA765:
    XOR esi, esi
    MOV rdi, rbx
    CALL sub_40C3E0
    XOR esi, esi
    MOV edi, eax
    CALL sub_40C630
loc_4EA778:
    MOV rbx, [rsp+128h+var_E8]
    TEST rbx, rbx
    JZ loc_4EAC8C
loc_4EA786:
    MOV r15, [rsp+128h+var_100]
    TEST r15, r15
    JNZ loc_4EAD30
loc_4EA794:
    MOV eax, dword ptr cs:buf.c_cc+1Fh
    MOV rdi, rbx
    AND eax, 1
    CMP eax, 1
    SBB esi, esi
    AND esi, 200h
    ADD esi, 41h
    CALL sub_40C3E0
    MOV esi, 1
    MOV edi, eax
    CALL sub_40C630
    MOV rbx, [rsp+128h+var_F8]
    TEST rbx, rbx
    JNZ loc_4EAC9F
loc_4EA7CD:
    NOP dword ptr [rax]
loc_4EA7D0:
    MOV ebx, dword ptr cs:buf.c_cc+1Fh
loc_4EA7D6:
    TEST bl, 80h
    JZ loc_4EA7F4
loc_4EA7DB:
    MOV rax, qword ptr cs:buf.c_cc+7
    ADD rax, qword ptr cs:buf.c_line
    CMP rax, [rsp+128h+var_108]
    JZ loc_4EADB8
loc_4EA7F4:
    MOV rdx, [rsp+128h+nbytes]
    MOV rsi, [rsp+128h+src]
    XOR edi, edi
    CALL sub_40D7B0
    TEST rax, rax
    MOV r13, rax
    JZ loc_4EADB2
loc_4EA810:
    JS loc_4EAC30
loc_4EA816:
    MOV ebx, dword ptr cs:buf.c_cc+1Fh
    TEST bl, 10h
    JZ loc_4EA864
loc_4EA821:
    MOV rsi, [rsp+128h+var_110]
    TEST sil, 1
    JNZ loc_4EAEBE
loc_4EA830:
    MOV rax, r13
    MOV [rsp+128h+var_110], r13
    SAR rax, 1
    JZ loc_4EA864
loc_4EA83D:
    MOV rcx, [rsp+128h+src]
    LEA rsi, [rcx+rax*2]
    MOV rdx, rcx
    NOP dword ptr [rax+00000000h]
loc_4EA850:
    MOVZX eax, word ptr [rdx]
    ADD rdx, 2
    ROR ax, 8
    MOV [rdx-2], ax
    CMP rsi, rdx
    JNZ loc_4EA850
loc_4EA864:
    CMP r13, [rsp+128h+nbytes]
    JZ loc_4EAC20
loc_4EA86E:
    ADD qword ptr cs:buf.c_cc+7, 1
    TEST bl, 2
    JNZ loc_4EAC60
loc_4EA87F:
    TEST bl, 40h
    JZ loc_4EABE0
loc_4EA888:
    TEST r13, r13
    JZ loc_4EA7D6
loc_4EA891:
    MOV r15, [rsp+128h+n]
    MOV r14, [rsp+128h+src]
    JMP loc_4EA8A9
loc_4EA8A0:
    TEST r13, r13
    JZ loc_4EA7D0
loc_4EA8A9:
    MOV rbx, r12
    LEA rdi, [rbp+r15+0]
    MOV rsi, r14
    SUB rbx, r15
    CMP rbx, r13
    CMOVA rbx, r13
    ADD r15, rbx
    MOV rdx, rbx
    SUB r13, rbx
    CALL _memcpy
    ADD r14, rbx
    CMP r15, r12
    MOV [rsp+128h+n], r15
    JNZ loc_4EA8A0
loc_4EA8D9:
    MOV rdx, r15
    MOV rsi, rbp
    MOV edi, 1
    MOV rbx, [rsp+128h+var_E8]
    CALL sub_40D740
    TEST rax, rax
    JS loc_4EAB90
loc_4EA8F7:
    CMP rax, r12
    JZ loc_4EAB80
loc_4EA900:
    TEST rax, rax
    JZ loc_4EA90D
loc_4EA905:
    ADD qword ptr cs:buf.c_cflag, 1
loc_4EA90D:
    ADD qword ptr cs:buf.c_cc+0Fh, rax
    MOV [rsp+128h+n], 0
    XOR r15d, r15d
    JMP loc_4EA8A0
loc_4EA928:
    CMP eax, 1
    JZ loc_4EAB10
loc_4EA931:
    CMP eax, 2
    JZ loc_4EAAF0
loc_4EA93A:
    CMP eax, 3
    JZ loc_4EAAD8
loc_4EA943:
    CMP eax, 4
    JNZ loc_4EA952
loc_4EA948:
    MOV [rsp+128h+var_F0], rbx
    JMP loc_4EA6D8
loc_4EA952:
    CMP eax, 5
    JNZ loc_4EA961
loc_4EA957:
    MOV [rsp+128h+var_E8], rbx
    JMP loc_4EA6D8
loc_4EA961:
    CMP eax, 6
    JNZ loc_4EA6D8
loc_4EA96A:
    MOV rsi, rbx
    MOV edi, offset aNone_4
    CALL sub_40A260
    TEST eax, eax
    JS loc_4EAEAA
loc_4EA97F:
    MOV esi, 100h
    MOV ecx, eax
    SHL esi, cl
    OR dword ptr cs:buf.c_cc+1Fh, esi
    JMP loc_4EA6D8
loc_4EA998:
    XOR ebp, ebp
    MOV r15d, 1
    JMP loc_4EA9CD
loc_4EA9A8:
    MOV byte ptr [rax], 0
    MOV rsi, rbx
    MOV edi, offset aNotrunc
    CALL sub_40A260
    TEST eax, eax
    JS loc_4EA9F7
loc_4EA9BC:
    MOV edx, r15d
    MOV ecx, eax
    LEA rbx, [r14+1]
    SHL edx, cl
    MOV byte ptr [r14], 2Ch
    OR ebp, edx
loc_4EA9CD:
    MOV esi, 2Ch
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    MOV r14, rax
    JNZ loc_4EA9A8
loc_4EA9E2:
    MOV rsi, rbx
    MOV edi, offset aNotrunc
    CALL sub_40A260
    TEST eax, eax
    JNS loc_4EAB38
loc_4EA9F7:
    MOV edx, offset aConv
    MOV rsi, rbx
    MOV edi, offset aInvalidArgumen
    XOR eax, eax
    CALL sub_40ABE0
loc_4EAA10:
    MOV ecx, offset unk_54DB60
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    MOV rdi, rbx
    CALL sub_539340
    MOV r12, rax
    JMP loc_4EA6D8
loc_4EAA38:
    MOV ecx, offset unk_54DB60
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    MOV rdi, rbx
    CALL sub_539340
    MOV [rsp+128h+nbytes], rax
    JMP loc_4EA6D8
loc_4EAA60:
    XOR ebp, ebp
    MOV r15d, 1
    JMP loc_4EAA95
loc_4EAA70:
    MOV byte ptr [rax], 0
    MOV rsi, rbx
    MOV edi, offset aSkipBytes
    CALL sub_40A260
    TEST eax, eax
    JS loc_4EAABF
loc_4EAA84:
    MOV edx, r15d
    MOV ecx, eax
    LEA rbx, [r14+1]
    SHL edx, cl
    MOV byte ptr [r14], 2Ch
    OR ebp, edx
loc_4EAA95:
    MOV esi, 2Ch
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    MOV r14, rax
    JNZ loc_4EAA70
loc_4EAAAA:
    MOV rsi, rbx
    MOV edi, offset aSkipBytes
    CALL sub_40A260
    TEST eax, eax
    JNS loc_4EAB58
loc_4EAABF:
    MOV edx, offset aIflag
    MOV rsi, rbx
    MOV edi, offset aInvalidArgumen
    XOR eax, eax
    CALL sub_40ABE0
loc_4EAAD8:
    MOV esi, offset unk_54DB60
    MOV rdi, rbx
    CALL sub_539430
    MOV [rsp+128h+var_F8], rax
    JMP loc_4EA6D8
loc_4EAAF0:
    MOV esi, offset unk_54DB60
    MOV rdi, rbx
    CALL sub_539430
    MOV [rsp+128h+var_100], rax
    JMP loc_4EA6D8
loc_4EAB10:
    MOV esi, offset unk_54DB60
    MOV rdi, rbx
    OR dword ptr cs:buf.c_cc+1Fh, 80h
    CALL sub_539430
    MOV [rsp+128h+var_108], rax
    JMP loc_4EA6D8
loc_4EAB38:
    OR ebp, dword ptr cs:buf.c_cc+1Fh
    MOV edx, 1
    MOV ecx, eax
    SHL edx, cl
    OR edx, ebp
    MOV dword ptr cs:buf.c_cc+1Fh, edx
    JMP loc_4EA6D8
loc_4EAB58:
    MOV edx, 1
    MOV ecx, eax
    SHL edx, cl
    OR ebp, edx
    SHL ebp, 5
    OR dword ptr cs:buf.c_cc+1Fh, ebp
    JMP loc_4EA6D8
loc_4EAB71:
    MOV rbx, [rsp+128h+var_F0]
    MOV rbp, rax
    JMP loc_4EA741
loc_4EAB80:
    ADD qword ptr cs:buf.c_iflag, 1
    JMP loc_4EA90D
loc_4EAB90:
    MOV rsi, rbx
    MOV edi, offset aWritingS
    XOR eax, eax
    MOV ebx, 1
    CALL sub_40A6D0
loc_4EABA4:
    TEST byte ptr cs:buf+31h, 1
    JNZ loc_4EABB4
loc_4EABAD:
    XOR edi, edi
    CALL sub_4EA450
loc_4EABB4:
    MOV rcx, [rsp+128h+var_40]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_4EAECA
loc_4EABCD:
    ADD rsp, 0F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4EABE0:
    MOV rsi, [rsp+128h+src]
    MOV rdx, r13
    MOV edi, 1
    MOV rbx, [rsp+128h+var_E8]
    CALL sub_40D740
    TEST rax, rax
    JS loc_4EAB90
loc_4EABFC:
    CMP rax, r12
    JZ loc_4EAC82
loc_4EAC05:
    TEST rax, rax
    JZ loc_4EAC12
loc_4EAC0A:
    ADD qword ptr cs:buf.c_cflag, 1
loc_4EAC12:
    ADD qword ptr cs:buf.c_cc+0Fh, rax
    JMP loc_4EA7D0
loc_4EAC20:
    ADD qword ptr cs:buf.c_line, 1
    JMP loc_4EA87F
loc_4EAC30:
    TEST cs:buf.c_cc+1Fh, 4
    JZ loc_4EAD24
loc_4EAC3D:
    MOV rdi, [rsp+128h+var_F0]
    XOR r13d, r13d
    CALL sub_40A870
    MOV rsi, [rsp+128h+nbytes]
    MOV edx, 1
    XOR edi, edi
    CALL sub_40C720
    JMP loc_4EA816
loc_4EAC60:
    MOV r15, [rsp+128h+nbytes]
    MOV rax, [rsp+128h+src]
    XOR esi, esi
    LEA rdi, [rax+r13]
    MOV rdx, r15
    SUB rdx, r13
    MOV r13, r15
    CALL _memset
    JMP loc_4EA87F
loc_4EAC82:
    ADD qword ptr cs:buf.c_iflag, 1
    JMP loc_4EAC12
loc_4EAC8C:
    MOV rbx, [rsp+128h+var_F8]
    MOV [rsp+128h+var_E8], offset aStandardOutput
    TEST rbx, rbx
    JZ loc_4EACC9
loc_4EAC9F:
    TEST cs:buf.c_cc+1Fh, 20h
    MOV r15d, 1
    MOV rsi, rbx
    CMOVZ r15, [rsp+128h+nbytes]
    MOV edx, 1
    XOR edi, edi
    IMUL rsi, r15
    CALL _lseek64
    TEST rax, rax
    JS loc_4EAD10
loc_4EACC9:
    MOV r15, [rsp+128h+var_100]
    TEST r15, r15
    JZ loc_4EA7D0
loc_4EACD7:
    MOV rsi, r15
    MOV edx, 1
    MOV edi, 1
    IMUL rsi, r12
    CALL _lseek64
    TEST rax, rax
    JNS loc_4EA7D0
loc_4EACF6:
    MOV rbx, [rsp+128h+var_E8]
    JMP loc_4EAE8A
loc_4EAD00:
    JZ loc_4EACC9
loc_4EAD02:
    SUB rbx, 1
    TEST rbx, rbx
    MOV [rsp+128h+var_F8], rbx
    JZ loc_4EACC9
loc_4EAD10:
    MOV rsi, [rsp+128h+src]
    XOR edi, edi
    MOV rdx, r15
    CALL sub_40D7B0
    TEST rax, rax
    JNS loc_4EAD00
loc_4EAD24:
    MOV rdi, [rsp+128h+var_F0]
    CALL sub_40A880
loc_4EAD30:
    MOV esi, 41h
    MOV rdi, rbx
    CALL sub_40C3E0
    MOV esi, 1
    MOV edi, eax
    CALL sub_40C630
    TEST cs:buf.c_cc+1Fh, 1
    JZ loc_4EAE40
loc_4EAD56:
    MOV rbx, [rsp+128h+var_F8]
    TEST rbx, rbx
    JNZ loc_4EAC9F
loc_4EAD64:
    JMP loc_4EACD7
loc_4EAD69:
    MOV edi, 200h
    MOV r12d, 200h
    CALL sub_40C220
    MOV esi, offset sub_4EA450
    MOV edi, 0Ah
    MOV rbp, rax
    MOV [rsp+128h+src], rax
    CALL sub_40DCA0
    CALL sub_40E3D0
    MOV [rsp+128h+nbytes], 200h
    MOV qword ptr cs:buf.c_cc+17h, rax
loc_4EADA4:
    MOV [rsp+128h+var_F0], offset aStandardInput
    JMP loc_4EA778
loc_4EADB2:
    MOV ebx, dword ptr cs:buf.c_cc+1Fh
loc_4EADB8:
    AND ebx, 8
    JNZ loc_4EAE27
loc_4EADBD:
    MOV rdx, [rsp+128h+n]
    TEST rdx, rdx
    JZ loc_4EADFF
loc_4EADC7:
    MOV rsi, rbp
    MOV edi, 1
    MOV rbx, [rsp+128h+var_E8]
    CALL sub_40D740
    TEST rax, rax
    JS loc_4EAB90
loc_4EADE2:
    CMP rax, r12
    JZ loc_4EAE98
loc_4EADEB:
    TEST rax, rax
    JZ loc_4EADF8
loc_4EADF0:
    ADD qword ptr cs:buf.c_cflag, 1
loc_4EADF8:
    ADD qword ptr cs:buf.c_cc+0Fh, rax
loc_4EADFF:
    XOR edi, edi
    CALL _close
    TEST eax, eax
    JS loc_4EAD24
loc_4EAE0E:
    MOV edi, 1
    CALL _close
    TEST eax, eax
    JS loc_4EACF6
loc_4EAE20:
    XOR ebx, ebx
    JMP loc_4EABA4
loc_4EAE27:
    MOV edi, 1
    CALL _fsync
    TEST eax, eax
    JNS loc_4EADBD
loc_4EAE35:
    JMP loc_4EACF6
loc_4EAE40:
    MOV rsi, r15
    MOV edi, 1
    IMUL rsi, r12
    CALL _ftruncate64
    TEST eax, eax
    JNS loc_4EAD56
loc_4EAE59:
    LEA rdx, [rsp+128h+stat_buf]
    MOV esi, 1
    MOV edi, 1
    CALL ___fxstat64
    TEST eax, eax
    JS loc_4EAE8A
loc_4EAE71:
    MOV eax, [rsp+128h+stat_buf.st_mode]
    AND eax, 0F000h
    SUB eax, 4000h
    TEST eax, 0FFFFB000h
    JNZ loc_4EAD56
loc_4EAE8A:
    MOV rdi, rbx
    CALL sub_40A880
loc_4EAE98:
    ADD qword ptr cs:buf.c_iflag, 1
    JMP loc_4EADF8
loc_4EAEA5:
    CALL sub_409830
loc_4EAEAA:
    MOV edx, 55F0C5h
    MOV rsi, rbx
    MOV edi, offset aInvalidArgumen
    XOR eax, eax
    CALL sub_40ABE0
loc_4EAEBE:
    MOV edi, offset aCanTSwabLuByte
    XOR eax, eax
    CALL sub_40ABE0
loc_4EAECA:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x4', '0xB', '0x100', '0x200', '0x4', '0x4000', '0x200', '0x8000', '0x2', '0x1', '0x400'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 25, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing/Analysis'}

##### Q 39 - sha_crypt
```assembly
loc_4E8130:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    MOV rdi, rsi
    MOV rbx, rsi
    SUB rsp, 2A8h
    MOV rax, fs:28h
    MOV [rsp+2D8h+var_40], rax
    XOR eax, eax
    CALL _strlen
    CMP byte ptr [rbx+1], 36h
    JZ loc_4E88A3
loc_4E816C:
    LEA edi, [rax+2Dh]
    MOV r13d, 20h
    MOV [rsp+2D8h+var_2B4], 20h
loc_4E817D:
    CALL sub_40AD10
    MOV rdi, rax
    MOV byte ptr [rax], 24h
    MOV [rsp+2D8h+var_290], rax
    MOVZX eax, byte ptr [rbx+1]
    LEA r14, [rbx+3]
    LEA rbp, [rdi+3]
    MOV byte ptr [rdi+2], 24h
    MOV ecx, 7
    MOV [rsp+2D8h+var_280], 1388h
    MOV rsi, r14
    MOV [rdi+1], al
    MOV edi, offset aRoundsU
    REPE 
    SETNBE dl
    SETB al
    CMP dl, al
    JZ loc_4E8871
loc_4E81C5:
    MOV rdi, r14
    MOV esi, 24h
    CALL _strchrnul
    SUB rax, r14
    MOV edx, 10h
    MOV rdi, r14
    CMP eax, 10h
    CMOVBE edx, eax
    MOV esi, edx
    MOV ebx, edx
    MOV [rsp+2D8h+var_2B8], edx
    CALL sub_40AD70
    MOV rdi, rbp
    MOV rsi, rax
    MOV [rsp+2D8h+var_2C0], rax
    CALL _strcpy
    MOV eax, ebx
    MOV rdi, r12
    MOV byte ptr [rbp+rax+0], 24h
    MOV r15, rax
    LEA rbx, [rbp+rax+1]
    MOV [rsp+2D8h+var_2A8], rax
    CALL _strlen
    MOV rdi, r12
    MOV [rsp+2D8h+var_2A0], rax
    MOV ebp, eax
    CALL sub_40AD40
    MOV edi, [rsp+2D8h+var_2B4]
    MOV [rsp+2D8h+ptr], rax
    MOV eax, offset sub_4E0EC0
    MOV rsi, rax
    MOV r12d, offset sub_4E0DB0
    MOV eax, offset sub_4E0BB0
    MOV edx, offset sub_4E0F70
    CMP edi, 20h
    CMOVZ r12, rax
    MOV eax, offset sub_4E0D30
    CMOVNZ rsi, rdx
    MOV rdi, rax
    MOV edx, offset sub_4E0D70
    MOV [rsp+2D8h+var_2D8], rsi
    CMOVNZ rdi, rdx
    MOV rsi, rdi
    LEA rdi, [rsp+2D8h+var_1E8]
    MOV [rsp+2D8h+var_2B0], rsi
    MOV r14, rdi
    CALL rsi
    MOV edi, dword ptr [rsp+2D8h+var_2A0]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdx, rdi
    MOV [rsp+2D8h+var_2C8], rdi
    MOV rdi, r14
    CALL r12
    MOV rdi, r14
    MOV [rsp+2D8h+var_298], r14
    LEA r14, [rsp+2D8h+var_118]
    MOV rsi, [rsp+2D8h+var_2C0]
    MOV rdx, r15
    CALL r12
    MOV rdi, r14
    MOV rdx, [rsp+2D8h+var_2B0]
    CALL rdx
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r14
    CALL r12
    MOV rdx, r15
    MOV rsi, [rsp+2D8h+var_2C0]
    MOV rdi, r14
    CALL r12
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r14
    CALL r12
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    MOV rdx, [rsp+2D8h+var_2D8]
    CALL rdx
    MOV rax, [rsp+2D8h+var_2A0]
    CMP eax, r13d
    JBE loc_4E89D1
loc_4E8307:
    MOVSXD rsi, [rsp+2D8h+var_2B4]
    MOV r14, [rsp+2D8h+var_298]
    MOV r15, rbx
    MOV dword ptr [rsp+2D8h+var_298], ebp
    MOV ebp, eax
    MOV rbx, rsi
    NOP dword ptr [rax]
loc_4E8320:
    SUB ebp, r13d
    MOV rdx, rbx
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    CALL r12
    CMP ebp, r13d
    JA loc_4E8320
loc_4E8336:
    MOV edx, ebp
    MOV rbx, r15
    MOV ebp, dword ptr [rsp+2D8h+var_298]
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    CALL r12
loc_4E834A:
    MOVSXD rax, [rsp+2D8h+var_2B4]
    MOV dword ptr [rsp+2D8h+var_298], ebp
    LEA r14, [rsp+2D8h+var_1E8]
    MOV [rsp+2D8h+var_288], rbx
    MOV [rsp+2D8h+var_27C], r13d
    MOV r15d, dword ptr [rsp+2D8h+var_2A0]
    MOV rbp, [rsp+2D8h+var_2C8]
    MOV r13, [rsp+2D8h+ptr]
    MOV rbx, rax
    JMP loc_4E8393
loc_4E8380:
    MOV rdx, rbx
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    CALL r12
    SHR r15d, 1
    JZ loc_4E83AA
loc_4E8393:
    TEST r15b, 1
    JNZ loc_4E8380
loc_4E8399:
    MOV rdx, rbp
    MOV rsi, r13
    MOV rdi, r14
    CALL r12
    SHR r15d, 1
    JNZ loc_4E8393
loc_4E83AA:
    MOV rbx, [rsp+2D8h+var_288]
    MOV r13d, [rsp+2D8h+var_27C]
    LEA rax, [rsp+2D8h+var_268]
    LEA r14, [rsp+2D8h+var_118]
    LEA rdi, [rsp+2D8h+var_1E8]
    MOV ebp, dword ptr [rsp+2D8h+var_298]
    MOV rsi, rax
    MOV rax, [rsp+2D8h+var_2D8]
    CALL rax
    MOV rdi, r14
    MOV rax, [rsp+2D8h+var_2B0]
    CALL rax
    MOV [rsp+2D8h+var_298], rbx
    MOV dword ptr [rsp+2D8h+var_288], r13d
    MOV r13d, r15d
    MOV rbx, [rsp+2D8h+var_2C8]
    MOV r15, [rsp+2D8h+ptr]
    NOP word ptr [rax+rax+00000000h]
loc_4E8400:
    ADD r13d, 1
    MOV rdx, rbx
    MOV rsi, r15
    MOV rdi, r14
    CALL r12
    CMP ebp, r13d
    JNZ loc_4E8400
loc_4E8415:
    LEA r15, [rsp+2D8h+var_228]
    MOV r13d, dword ptr [rsp+2D8h+var_288]
    MOV rbx, [rsp+2D8h+var_298]
    MOV rdi, r14
    MOV rax, [rsp+2D8h+var_2D8]
    MOV rsi, r15
    CALL rax
    CMP dword ptr [rsp+2D8h+var_2A0], r13d
    JB loc_4E8A8D
loc_4E843E:
    MOVSXD r8, [rsp+2D8h+var_2B4]
    MOV rax, [rsp+2D8h+ptr]
    MOV rdx, r15
    MOV r9d, r8d
    LEA r10, [r15+r9]
    NOP word ptr [rax+rax+00h]
loc_4E8458:
    MOV rcx, [rdx]
    LEA rdi, [rax+8]
    MOV rsi, rdx
    SUB ebp, r13d
    AND rdi, 0FFFFFFFFFFFFFFF8h
    MOV [rax], rcx
    MOV rcx, [r10-8]
    MOV [rax+r9-8], rcx
    MOV rcx, rax
    ADD rax, r8
    SUB rcx, rdi
    SUB rsi, rcx
    ADD ecx, r8d
    SHR ecx, 3
    CMP ebp, r13d
    REP 
    JNB loc_4E8458
loc_4E848F:
    CMP ebp, 8
    LEA rdx, [rsp+2D8h+var_228]
    JNB loc_4E8630
loc_4E84A0:
    TEST bpl, 4
    JNZ loc_4E89BB
loc_4E84AA:
    TEST ebp, ebp
    JZ loc_4E84C2
loc_4E84AE:
    MOVZX ecx, byte ptr [rsp+2D8h+var_228]
    TEST bpl, 2
    MOV [rax], cl
    JNZ loc_4E8A7E
loc_4E84C2:
    LEA rbp, [rsp+2D8h+var_118]
    MOV rax, [rsp+2D8h+var_2B0]
    XOR r13d, r13d
    MOV rdi, rbp
    CALL rax
    MOV r14, [rsp+2D8h+var_2C0]
    MOV r15, [rsp+2D8h+var_2A8]
    NOP dword ptr [rax+00000000h]
loc_4E84E8:
    MOV rdx, r15
    MOV rsi, r14
    MOV rdi, rbp
    CALL r12
    MOVZX eax, [rsp+2D8h+var_268]
    ADD r13d, 1
    ADD eax, 10h
    CMP eax, r13d
    JA loc_4E84E8
loc_4E8505:
    LEA r13, [rsp+2D8h+var_228]
    MOV rdi, rbp
    MOV rax, [rsp+2D8h+var_2D8]
    MOV rsi, r13
    CALL rax
    MOV eax, [rsp+2D8h+var_2B8]
    CMP eax, 8
    JNB loc_4E8680
loc_4E8526:
    TEST al, 4
    JNZ loc_4E8850
loc_4E852E:
    MOV edi, [rsp+2D8h+var_2B8]
    TEST edi, edi
    JZ loc_4E854F
loc_4E8536:
    MOVZX eax, byte ptr [rsp+2D8h+var_228]
    MOV rsi, [rsp+2D8h+var_2C0]
    MOV [rsi], al
    MOV eax, edi
    TEST al, 2
    JNZ loc_4E89A1
loc_4E854F:
    XOR ebp, ebp
    LEA r13, [rsp+2D8h+var_1E8]
    MOVSXD r15, [rsp+2D8h+var_2B4]
    JMP loc_4E85D9
loc_4E8560:
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r13
    CALL r12
    MOV eax, 0AAAAAAABh
    MUL ebp
    SHR edx, 1
    LEA eax, [rdx+rdx*2]
    CMP ebp, eax
    JNZ loc_4E8612
loc_4E8584:
    MOV eax, 24924925h
    MUL ebp
    MOV eax, ebp
    SUB eax, edx
    SHR eax, 1
    ADD edx, eax
    SHR edx, 2
    LEA eax, ds:0[rdx*8]
    SUB eax, edx
    CMP ebp, eax
    JNZ loc_4E86F8
loc_4E85A7:
    TEST r14d, r14d
    JZ loc_4E86E0
loc_4E85B0:
    MOV rdx, r15
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r13
    CALL r12
loc_4E85BE:
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r13
    MOV rax, [rsp+2D8h+var_2D8]
    ADD ebp, 1
    CALL rax
    CMP [rsp+2D8h+var_280], ebp
    JBE loc_4E8710
loc_4E85D9:
    MOV r14d, ebp
    MOV rdi, r13
    MOV rax, [rsp+2D8h+var_2B0]
    CALL rax
    AND r14d, 1
    JNZ loc_4E8560
loc_4E85F0:
    MOV rdx, r15
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r13
    CALL r12
    MOV eax, 0AAAAAAABh
    MUL ebp
    SHR edx, 1
    LEA eax, [rdx+rdx*2]
    CMP ebp, eax
    JZ loc_4E8584
loc_4E8612:
    MOV rdx, [rsp+2D8h+var_2A8]
    MOV rsi, [rsp+2D8h+var_2C0]
    MOV rdi, r13
    CALL r12
    JMP loc_4E8584
loc_4E8630:
    MOV rcx, [rsp+2D8h+var_228]
    MOV [rax], rcx
    MOV ecx, ebp
    MOV rsi, [rdx+rcx-8]
    MOV [rax+rcx-8], rsi
    LEA rcx, [rax+8]
    AND rcx, 0FFFFFFFFFFFFFFF8h
    SUB rax, rcx
    ADD ebp, eax
    SUB rdx, rax
    AND ebp, 0FFFFFFF8h
    CMP ebp, 8
    JB loc_4E84C2
loc_4E8663:
    AND ebp, 0FFFFFFF8h
    XOR eax, eax
loc_4E8668:
    MOV esi, eax
    ADD eax, 8
    MOV rdi, [rdx+rsi]
    CMP eax, ebp
    MOV [rcx+rsi], rdi
    JB loc_4E8668
loc_4E8679:
    JMP loc_4E84C2
loc_4E8680:
    MOV rdi, [rsp+2D8h+var_2C0]
    MOV rax, [rsp+2D8h+var_228]
    MOV [rdi], rax
    MOV rsi, [rsp+2D8h+var_2A8]
    LEA rdx, [rdi+8]
    AND rdx, 0FFFFFFFFFFFFFFF8h
    MOV rax, [r13+rsi-8]
    MOV [rdi+rsi-8], rax
    MOV rax, rdi
    SUB rax, rdx
    SUB r13, rax
    ADD eax, [rsp+2D8h+var_2B8]
    AND eax, 0FFFFFFF8h
    CMP eax, 8
    JB loc_4E854F
loc_4E86C0:
    AND eax, 0FFFFFFF8h
    XOR ecx, ecx
loc_4E86C5:
    MOV esi, ecx
    ADD ecx, 8
    MOV rdi, [r13+rsi+0]
    CMP ecx, eax
    MOV [rdx+rsi], rdi
    JB loc_4E86C5
loc_4E86D7:
    JMP loc_4E854F
loc_4E86E0:
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r13
    CALL r12
    JMP loc_4E85BE
loc_4E86F8:
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r13
    CALL r12
    JMP loc_4E85A7
loc_4E8710:
    CMP [rsp+2D8h+var_2B4], 20h
    JZ loc_4E88B9
loc_4E871B:
    XOR edx, edx
    MOV esi, 15h
    MOV ecx, 2Ah
    NOP word ptr [rax+rax+00000000h]
loc_4E8730:
    MOV eax, edx
    LEA r8, [rbx+4]
    MOVZX eax, [rsp+rax+2D8h+var_268]
    SHL eax, 10h
    MOV edx, eax
    MOV eax, esi
    MOVZX eax, [rsp+rax+2D8h+var_268]
    SHL eax, 8
    OR eax, edx
    MOVZX edx, [rsp+rcx+2D8h+var_268]
    OR eax, edx
loc_4E8753:
    MOV ecx, eax
    ADD rbx, 1
    MOV edx, 2Eh
    AND ecx, 3Fh
    JZ loc_4E8788
loc_4E8763:
    CMP ecx, 1
    MOV edx, 2Fh
    JZ loc_4E8788
loc_4E876D:
    CMP ecx, 0Bh
    LEA edx, [rcx+2Eh]
    JLE loc_4E8788
loc_4E8775:
    LEA edi, [rcx+35h]
    LEA edx, [rcx+3Bh]
    CMP ecx, 25h
    CMOVLE edx, edi
    NOP dword ptr [rax+00000000h]
loc_4E8788:
    SHR eax, 6
    CMP rbx, r8
    MOV [rbx-1], dl
    JNZ loc_4E8753
loc_4E8793:
    CMP esi, 14h
    JZ loc_4E87C0
loc_4E8798:
    LEA eax, [rsi+16h]
    LEA ecx, [rsi+2Bh]
    LEA edi, [rsi-29h]
    LEA edx, [rsi+1]
    CMP eax, 3Fh
    CMOVNB eax, edi
    SUB esi, 14h
    CMP ecx, 3Fh
    CMOVNB rcx, rsi
    MOV esi, eax
    JMP loc_4E8730
loc_4E87C0:
    MOVZX eax, [rsp+2D8h+var_229]
    LEA rdi, [r8+2]
loc_4E87CC:
    MOV ecx, eax
    ADD r8, 1
    MOV edx, 2Eh
    AND ecx, 3Fh
    JZ loc_4E8800
loc_4E87DC:
    CMP ecx, 1
    MOV edx, 2Fh
    JZ loc_4E8800
loc_4E87E6:
    CMP ecx, 0Bh
    LEA edx, [rcx+2Eh]
    JLE loc_4E8800
loc_4E87EE:
    LEA esi, [rcx+35h]
    LEA edx, [rcx+3Bh]
    CMP ecx, 25h
    CMOVLE edx, esi
    NOP word ptr [rax+rax+00h]
loc_4E8800:
    SHR eax, 6
    CMP r8, rdi
    MOV [r8-1], dl
    JNZ loc_4E87CC
loc_4E880C:
    MOV rdi, [rsp+2D8h+ptr]
    CALL _free
    MOV rdi, [rsp+2D8h+var_2C0]
    CALL _free
    MOV rbx, [rsp+2D8h+var_40]
    XOR rbx, fs:28h
    MOV rax, [rsp+2D8h+var_290]
    JNZ loc_4E8A97
loc_4E883C:
    ADD rsp, 2A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E8850:
    MOV eax, dword ptr [rsp+2D8h+var_228]
    MOV rdi, [rsp+2D8h+var_2C0]
    MOV [rdi], eax
    MOV rsi, [rsp+2D8h+var_2A8]
    MOV eax, [r13+rsi-4]
    MOV [rdi+rsi-4], eax
    JMP loc_4E854F
loc_4E8871:
    LEA rdi, [rbx+0Ah]
    LEA rsi, [rsp+2D8h+var_270]
    MOV edx, 0Ah
    CALL sub_40CC40
    MOV [rsp+2D8h+var_280], eax
    MOV rax, [rsp+2D8h+var_270]
    CMP byte ptr [rax], 24h
    JZ loc_4E8A26
loc_4E8896:
    MOV [rsp+2D8h+var_280], 1388h
    JMP loc_4E81C5
loc_4E88A3:
    LEA edi, [rax+58h]
    MOV r13d, 40h
    MOV [rsp+2D8h+var_2B4], 40h
    JMP loc_4E817D
loc_4E88B9:
    XOR eax, eax
    MOV ecx, 0Ah
    MOV esi, 14h
    NOP dword ptr [rax]
loc_4E88C8:
    MOVZX eax, [rsp+rax+2D8h+var_268]
    LEA r8, [rbx+4]
    SHL eax, 10h
    MOV edx, eax
    MOVZX eax, [rsp+rcx+2D8h+var_268]
    SHL eax, 8
    OR eax, edx
    MOV edx, esi
    MOVZX edx, [rsp+rdx+2D8h+var_268]
    OR eax, edx
loc_4E88E9:
    MOV ecx, eax
    ADD rbx, 1
    MOV edx, 2Eh
    AND ecx, 3Fh
    JZ loc_4E8920
loc_4E88F9:
    CMP ecx, 1
    MOV edx, 2Fh
    JZ loc_4E8920
loc_4E8903:
    CMP ecx, 0Bh
    LEA edx, [rcx+2Eh]
    JLE loc_4E8920
loc_4E890B:
    LEA edi, [rcx+35h]
    LEA edx, [rcx+3Bh]
    CMP ecx, 25h
    CMOVLE edx, edi
    NOP word ptr [rax+rax+00000000h]
loc_4E8920:
    SHR eax, 6
    CMP rbx, r8
    MOV [rbx-1], dl
    JNZ loc_4E88E9
loc_4E892B:
    CMP esi, 1Dh
    JZ loc_4E8951
loc_4E8930:
    LEA ecx, [rsi+0Bh]
    LEA edx, [rsi+15h]
    LEA edi, [rsi-13h]
    LEA eax, [rsi+1]
    CMP ecx, 1Eh
    CMOVNB rcx, rdi
    SUB esi, 9
    CMP edx, 1Eh
    CMOVB esi, edx
    JMP loc_4E88C8
loc_4E8951:
    MOVZX eax, [rsp+2D8h+var_24A]
    LEA rdi, [r8+3]
loc_4E895D:
    MOV ecx, eax
    ADD r8, 1
    MOV edx, 2Eh
    AND ecx, 3Fh
    JZ loc_4E8990
loc_4E896D:
    CMP ecx, 1
    MOV edx, 2Fh
    JZ loc_4E8990
loc_4E8977:
    CMP ecx, 0Bh
    LEA edx, [rcx+2Eh]
    JLE loc_4E8990
loc_4E897F:
    LEA esi, [rcx+35h]
    LEA edx, [rcx+3Bh]
    CMP ecx, 25h
    CMOVLE edx, esi
    NOP dword ptr [rax+rax+00h]
loc_4E8990:
    SHR eax, 6
    CMP rdi, r8
    MOV [r8-1], dl
    JNZ loc_4E895D
loc_4E899C:
    JMP loc_4E880C
loc_4E89A1:
    MOV rdi, [rsp+2D8h+var_2A8]
    MOV rsi, [rsp+2D8h+var_2C0]
    MOVZX eax, word ptr [r13+rdi-2]
    MOV [rsi+rdi-2], ax
    JMP loc_4E854F
loc_4E89BB:
    MOV ecx, dword ptr [rsp+2D8h+var_228]
    MOV [rax], ecx
    MOV edx, [rdx+rbp-4]
    MOV [rax+rbp-4], edx
    JMP loc_4E84C2
loc_4E89D1:
    MOV rdx, [rsp+2D8h+var_2C8]
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, [rsp+2D8h+var_298]
    CALL r12
    MOV eax, dword ptr [rsp+2D8h+var_2A0]
    TEST eax, eax
    JNZ loc_4E834A
loc_4E89EF:
    MOV r15, [rsp+2D8h+var_2D8]
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, [rsp+2D8h+var_298]
    MOV rax, r15
    CALL rax
    MOV rdi, r14
    MOV rax, [rsp+2D8h+var_2B0]
    CALL rax
    LEA rsi, [rsp+2D8h+var_228]
    MOV rdi, r14
    MOV rax, r15
    CALL rax
    MOV rax, [rsp+2D8h+ptr]
    JMP loc_4E848F
loc_4E8A26:
    MOV ebx, [rsp+2D8h+var_280]
    LEA r14, [rax+1]
    CMP ebx, 3E7h
    JBE loc_4E8A74
loc_4E8A36:
    MOV eax, 3B9AC9FFh
    CMP ebx, 3B9ACA00h
    MOV edi, eax
    CMOVB edi, ebx
    MOV [rsp+2D8h+var_280], edi
loc_4E8A4A:
    MOV r8d, [rsp+2D8h+var_280]
    MOV rdi, rbp
    MOV ecx, offset aRoundsU
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    CDQE 
    ADD rbp, rax
    JMP loc_4E81C5
loc_4E8A74:
    MOV [rsp+2D8h+var_280], 3E8h
    JMP loc_4E8A4A
loc_4E8A7E:
    MOVZX edx, word ptr [rdx+rbp-2]
    MOV [rax+rbp-2], dx
    JMP loc_4E84C2
loc_4E8A8D:
    MOV rax, [rsp+2D8h+ptr]
    JMP loc_4E848F
loc_4E8A97:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFE', '0xFFFFFFFF', '5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Error Handling'}

##### T 39 - sha_crypt
```assembly
loc_5336F0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rsi
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV rdi, rsi
    SUB rsp, 2A8h
    MOV rax, fs:28h
    MOV [rsp+2D8h+var_40], rax
    XOR eax, eax
    CALL _strlen
    CMP byte ptr [r12+1], 36h
    JZ loc_5340E0
loc_53372E:
    LEA edi, [rax+2Dh]
    MOV r13d, 20h
    MOV [rsp+2D8h+var_2B4], 20h
loc_53373F:
    CALL sub_40C260
    MOV rdi, rax
    MOV byte ptr [rax], 24h
    MOV [rsp+2D8h+var_290], rax
    MOVZX eax, byte ptr [r12+1]
    LEA r14, [r12+3]
    LEA rbx, [rdi+3]
    MOV byte ptr [rdi+2], 24h
    MOV ecx, 7
    MOV [rsp+2D8h+var_280], 1388h
    MOV rsi, r14
    MOV [rdi+1], al
    MOV edi, offset aRoundsU
    REPE 
    SETNBE dl
    SETB al
    CMP dl, al
    JZ loc_533ED0
loc_53378A:
    MOV rdi, r14
    MOV esi, 24h
    CALL _strchrnul
    SUB rax, r14
    MOV edx, 10h
    MOV rdi, r14
    CMP eax, 10h
    CMOVBE edx, eax
    MOV esi, edx
    MOV r15d, edx
    MOV [rsp+2D8h+var_2B8], edx
    CALL sub_40C2C0
    MOV rdi, rbx
    MOV rsi, rax
    MOV [rsp+2D8h+var_2C0], rax
    CALL _strcpy
    MOV eax, r15d
    MOV rdi, rbp
    MOV byte ptr [rbx+rax], 24h
    MOV r15, rax
    LEA r12, [rbx+rax+1]
    MOV [rsp+2D8h+var_2A8], rax
    CALL _strlen
    MOV rdi, rbp
    MOV [rsp+2D8h+var_2A0], rax
    MOV ebx, eax
    CALL sub_40C290
    MOV edi, [rsp+2D8h+var_2B4]
    MOV [rsp+2D8h+ptr], rax
    MOV eax, offset sub_52B090
    MOV rcx, rax
    MOV ebp, offset sub_52AF80
    MOV eax, offset sub_52AC10
    MOV edx, offset sub_52B260
    CMP edi, 20h
    CMOVZ rbp, rax
    MOV eax, offset sub_52AE90
    CMOVNZ rcx, rdx
    MOV rdi, rax
    MOV edx, offset sub_52AED0
    MOV [rsp+2D8h+var_2D8], rcx
    CMOVNZ rdi, rdx
    MOV rcx, rdi
    LEA rdi, [rsp+2D8h+var_1E8]
    MOV [rsp+2D8h+var_2B0], rcx
    MOV r14, rdi
    CALL rcx
    MOV edx, dword ptr [rsp+2D8h+var_2A0]
    MOV rdi, r14
    MOV rsi, [rsp+2D8h+ptr]
    MOV [rsp+2D8h+var_2C8], rdx
    CALL rbp
    MOV rdi, r14
    MOV [rsp+2D8h+var_298], r14
    LEA r14, [rsp+2D8h+var_118]
    MOV rdx, r15
    MOV rsi, [rsp+2D8h+var_2C0]
    CALL rbp
    MOV rcx, [rsp+2D8h+var_2B0]
    MOV rdi, r14
    CALL rcx
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r14
    CALL rbp
    MOV rdx, r15
    MOV rsi, [rsp+2D8h+var_2C0]
    MOV rdi, r14
    CALL rbp
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r14
    CALL rbp
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    MOV rcx, [rsp+2D8h+var_2D8]
    CALL rcx
    MOV rax, [rsp+2D8h+var_2A0]
    CMP eax, r13d
    JBE loc_534147
loc_5338C4:
    MOVSXD rcx, [rsp+2D8h+var_2B4]
    MOV r15d, eax
    MOV rax, r12
    MOV r14, [rsp+2D8h+var_298]
    MOV r12d, r15d
    MOV dword ptr [rsp+2D8h+var_298], ebx
    MOV r15, rax
    MOV rbx, rcx
    NOP dword ptr [rax+00000000h]
loc_5338E8:
    SUB r12d, r13d
    MOV rdx, rbx
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    CALL rbp
    CMP r12d, r13d
    JA loc_5338E8
loc_5338FD:
    MOV edx, r12d
    MOV ebx, dword ptr [rsp+2D8h+var_298]
    MOV r12, r15
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    CALL rbp
loc_533911:
    MOVSXD rax, [rsp+2D8h+var_2B4]
    MOV dword ptr [rsp+2D8h+var_298], ebx
    LEA r14, [rsp+2D8h+var_1E8]
    MOV [rsp+2D8h+var_288], r12
    MOV [rsp+2D8h+var_27C], r13d
    MOV r15d, dword ptr [rsp+2D8h+var_2A0]
    MOV r12, [rsp+2D8h+var_2C8]
    MOV r13, [rsp+2D8h+ptr]
    MOV rbx, rax
    JMP loc_533952
loc_533940:
    MOV rdx, rbx
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r14
    CALL rbp
    SHR r15d, 1
    JZ loc_533968
loc_533952:
    TEST r15b, 1
    JNZ loc_533940
loc_533958:
    MOV rdx, r12
    MOV rsi, r13
    MOV rdi, r14
    CALL rbp
    SHR r15d, 1
    JNZ loc_533952
loc_533968:
    MOV r12, [rsp+2D8h+var_288]
    MOV r13d, [rsp+2D8h+var_27C]
    LEA rax, [rsp+2D8h+var_268]
    LEA r14, [rsp+2D8h+var_118]
    LEA rdi, [rsp+2D8h+var_1E8]
    MOV ebx, dword ptr [rsp+2D8h+var_298]
    MOV rsi, rax
    MOV rax, [rsp+2D8h+var_2D8]
    CALL rax
    MOV rdi, r14
    MOV rax, [rsp+2D8h+var_2B0]
    CALL rax
    MOV [rsp+2D8h+var_298], r12
    MOV dword ptr [rsp+2D8h+var_288], r13d
    MOV r13d, r15d
    MOV r12, [rsp+2D8h+var_2C8]
    MOV r15, [rsp+2D8h+ptr]
    NOP dword ptr [rax]
loc_5339B8:
    ADD r13d, 1
    MOV rdx, r12
    MOV rsi, r15
    MOV rdi, r14
    CALL rbp
    CMP ebx, r13d
    JNZ loc_5339B8
loc_5339CC:
    LEA r15, [rsp+2D8h+var_228]
    MOV r13d, dword ptr [rsp+2D8h+var_288]
    MOV r12, [rsp+2D8h+var_298]
    MOV rdi, r14
    MOV rax, [rsp+2D8h+var_2D8]
    MOV rsi, r15
    CALL rax
    CMP dword ptr [rsp+2D8h+var_2A0], r13d
    JB loc_534205
loc_5339F5:
    MOVSXD r8, [rsp+2D8h+var_2B4]
    MOV rax, [rsp+2D8h+ptr]
    MOV rdx, r15
    MOV r9d, r8d
    LEA r10, [r15+r9]
    NOP dword ptr [rax+00000000h]
loc_533A10:
    MOV rcx, [rdx]
    LEA rdi, [rax+8]
    MOV rsi, rdx
    SUB ebx, r13d
    AND rdi, 0FFFFFFFFFFFFFFF8h
    MOV [rax], rcx
    MOV rcx, [r10-8]
    MOV [rax+r9-8], rcx
    MOV rcx, rax
    ADD rax, r8
    SUB rcx, rdi
    SUB rsi, rcx
    ADD ecx, r8d
    SHR ecx, 3
    CMP ebx, r13d
    REP 
    JNB loc_533A10
loc_533A47:
    CMP ebx, 8
    LEA rdx, [rsp+2D8h+var_228]
    JNB loc_533BE0
loc_533A58:
    TEST bl, 4
    JNZ loc_534131
loc_533A61:
    TEST ebx, ebx
    JZ loc_533A78
loc_533A65:
    MOVZX ecx, byte ptr [rsp+2D8h+var_228]
    TEST bl, 2
    MOV [rax], cl
    JNZ loc_5341F6
loc_533A78:
    LEA rbx, [rsp+2D8h+var_118]
    MOV rax, [rsp+2D8h+var_2B0]
    XOR r13d, r13d
    MOV rdi, rbx
    CALL rax
    MOV r14, [rsp+2D8h+var_2C0]
    MOV r15, [rsp+2D8h+var_2A8]
    NOP word ptr [rax+rax+00000000h]
loc_533AA0:
    MOV rdx, r15
    MOV rsi, r14
    MOV rdi, rbx
    CALL rbp
    MOVZX eax, [rsp+2D8h+var_268]
    ADD r13d, 1
    ADD eax, 10h
    CMP eax, r13d
    JA loc_533AA0
loc_533ABC:
    LEA r13, [rsp+2D8h+var_228]
    MOV rdi, rbx
    MOV rax, [rsp+2D8h+var_2D8]
    MOV rsi, r13
    CALL rax
    MOV eax, [rsp+2D8h+var_2B8]
    CMP eax, 8
    JNB loc_533C30
loc_533ADD:
    TEST al, 4
    JNZ loc_533E90
loc_533AE5:
    TEST eax, eax
    MOV edi, eax
    JZ loc_533B04
loc_533AEB:
    MOVZX eax, byte ptr [rsp+2D8h+var_228]
    MOV rbx, [rsp+2D8h+var_2C0]
    MOV [rbx], al
    MOV eax, edi
    TEST al, 2
    JNZ loc_534100
loc_533B04:
    XOR ebx, ebx
    LEA r13, [rsp+2D8h+var_1E8]
    MOVSXD r15, [rsp+2D8h+var_2B4]
    JMP loc_533B8F
loc_533B18:
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r13
    CALL rbp
    MOV eax, 0AAAAAAABh
    MUL ebx
    SHR edx, 1
    LEA eax, [rdx+rdx*2]
    CMP ebx, eax
    JNZ loc_533BC7
loc_533B3B:
    MOV eax, 24924925h
    MUL ebx
    MOV eax, ebx
    SUB eax, edx
    SHR eax, 1
    ADD edx, eax
    SHR edx, 2
    LEA eax, ds:0[rdx*8]
    SUB eax, edx
    CMP ebx, eax
    JNZ loc_533CA8
loc_533B5E:
    TEST r14d, r14d
    JZ loc_533C90
loc_533B67:
    MOV rdx, r15
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r13
    CALL rbp
loc_533B74:
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r13
    MOV rax, [rsp+2D8h+var_2D8]
    ADD ebx, 1
    CALL rax
    CMP [rsp+2D8h+var_280], ebx
    JBE loc_533CC0
loc_533B8F:
    MOV r14d, ebx
    MOV rdi, r13
    MOV rax, [rsp+2D8h+var_2B0]
    CALL rax
    AND r14d, 1
    JNZ loc_533B18
loc_533BA6:
    MOV rdx, r15
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, r13
    CALL rbp
    MOV eax, 0AAAAAAABh
    MUL ebx
    SHR edx, 1
    LEA eax, [rdx+rdx*2]
    CMP ebx, eax
    JZ loc_533B3B
loc_533BC7:
    MOV rdx, [rsp+2D8h+var_2A8]
    MOV rsi, [rsp+2D8h+var_2C0]
    MOV rdi, r13
    CALL rbp
    JMP loc_533B3B
loc_533BE0:
    MOV rcx, [rsp+2D8h+var_228]
    MOV [rax], rcx
    MOV ecx, ebx
    MOV rsi, [rdx+rcx-8]
    MOV [rax+rcx-8], rsi
    LEA rcx, [rax+8]
    AND rcx, 0FFFFFFFFFFFFFFF8h
    SUB rax, rcx
    ADD ebx, eax
    SUB rdx, rax
    AND ebx, 0FFFFFFF8h
    CMP ebx, 8
    JB loc_533A78
loc_533C13:
    AND ebx, 0FFFFFFF8h
    XOR eax, eax
loc_533C18:
    MOV esi, eax
    ADD eax, 8
    MOV rdi, [rdx+rsi]
    CMP eax, ebx
    MOV [rcx+rsi], rdi
    JB loc_533C18
loc_533C29:
    JMP loc_533A78
loc_533C30:
    MOV rbx, [rsp+2D8h+var_2C0]
    MOV rax, [rsp+2D8h+var_228]
    MOV [rbx], rax
    MOV rdi, [rsp+2D8h+var_2A8]
    LEA rdx, [rbx+8]
    AND rdx, 0FFFFFFFFFFFFFFF8h
    MOV rax, [r13+rdi-8]
    MOV [rbx+rdi-8], rax
    MOV rax, rbx
    SUB rax, rdx
    SUB r13, rax
    ADD eax, [rsp+2D8h+var_2B8]
    AND eax, 0FFFFFFF8h
    CMP eax, 8
    JB loc_533B04
loc_533C70:
    AND eax, 0FFFFFFF8h
    XOR ecx, ecx
loc_533C75:
    MOV esi, ecx
    ADD ecx, 8
    MOV rdi, [r13+rsi+0]
    CMP ecx, eax
    MOV [rdx+rsi], rdi
    JB loc_533C75
loc_533C87:
    JMP loc_533B04
loc_533C90:
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r13
    CALL rbp
    JMP loc_533B74
loc_533CA8:
    MOV rdx, [rsp+2D8h+var_2C8]
    MOV rsi, [rsp+2D8h+ptr]
    MOV rdi, r13
    CALL rbp
    JMP loc_533B5E
loc_533CC0:
    CMP [rsp+2D8h+var_2B4], 20h
    JZ loc_533F08
loc_533CCB:
    XOR edx, edx
    MOV ecx, 15h
    MOV esi, 2Ah
    JMP loc_533CFE
loc_533CE0:
    LEA eax, [rcx+16h]
    LEA esi, [rcx+2Bh]
    LEA edi, [rcx-29h]
    LEA edx, [rcx+1]
    CMP eax, 3Fh
    CMOVNB eax, edi
    SUB ecx, 14h
    CMP esi, 3Fh
    CMOVNB rsi, rcx
    MOV ecx, eax
loc_533CFE:
    MOV eax, edx
    MOVZX eax, [rsp+rax+2D8h+var_268]
    SHL eax, 10h
    MOV edi, eax
    MOV eax, ecx
    MOVZX edx, [rsp+rax+2D8h+var_268]
    MOV eax, edx
    MOVZX edx, [rsp+rsi+2D8h+var_268]
    SHL eax, 8
    OR eax, edi
    OR eax, edx
    MOV edx, 2Eh
    MOV esi, eax
    AND esi, 3Fh
    JZ loc_533D50
loc_533D2B:
    CMP esi, 1
    MOV edx, 2Fh
    JZ loc_533D50
loc_533D35:
    CMP esi, 0Bh
    LEA edx, [rsi+2Eh]
    JLE loc_533D50
loc_533D3D:
    LEA edi, [rsi+3Bh]
    LEA edx, [rsi+35h]
    CMP esi, 26h
    CMOVGE edx, edi
    NOP dword ptr [rax+00000000h]
loc_533D50:
    SHR eax, 6
    MOV [r12], dl
    MOV edx, 2Eh
    MOV esi, eax
    AND esi, 3Fh
    JZ loc_533D88
loc_533D63:
    CMP esi, 1
    MOV edx, 2Fh
    JZ loc_533D88
loc_533D6D:
    CMP esi, 0Bh
    LEA edx, [rsi+2Eh]
    JLE loc_533D88
loc_533D75:
    LEA edi, [rsi+3Bh]
    LEA edx, [rsi+35h]
    CMP esi, 26h
    CMOVGE edx, edi
    NOP dword ptr [rax+00000000h]
loc_533D88:
    SHR eax, 6
    MOV [r12+1], dl
    MOV edx, 2Eh
    MOV esi, eax
    AND esi, 3Fh
    JZ loc_533DC0
loc_533D9C:
    CMP esi, 1
    MOV edx, 2Fh
    JZ loc_533DC0
loc_533DA6:
    CMP esi, 0Bh
    LEA edx, [rsi+2Eh]
    JLE loc_533DC0
loc_533DAE:
    LEA edi, [rsi+3Bh]
    LEA edx, [rsi+35h]
    CMP esi, 26h
    CMOVGE edx, edi
    NOP word ptr [rax+rax+00h]
loc_533DC0:
    SHR eax, 6
    MOV [r12+2], dl
    ADD r12, 4
    TEST eax, eax
    MOV edx, 2Eh
    JZ loc_533DF8
loc_533DD5:
    CMP eax, 1
    MOV edx, 2Fh
    JZ loc_533DF8
loc_533DDF:
    CMP eax, 0Bh
    LEA edx, [rax+2Eh]
    JLE loc_533DF8
loc_533DE7:
    LEA esi, [rax+3Bh]
    LEA edx, [rax+35h]
    CMP eax, 26h
    CMOVGE edx, esi
    NOP dword ptr [rax+rax+00h]
loc_533DF8:
    CMP ecx, 14h
    MOV [r12-1], dl
    JNZ loc_533CE0
loc_533E06:
    MOVZX edx, [rsp+2D8h+var_229]
    MOV ecx, 2Eh
    MOV eax, edx
    AND eax, 3Fh
    JZ loc_533E30
loc_533E1A:
    CMP eax, 1
    MOV ecx, 2Fh
    JZ loc_533E30
loc_533E24:
    CMP eax, 0Bh
    LEA ecx, [rax+2Eh]
    JG loc_534120
loc_533E30:
    MOV eax, edx
    MOV [r12], cl
    MOV edx, 2Eh
    SHR eax, 6
    TEST eax, eax
    JNZ loc_533EB8
loc_533E42:
    MOV [r12+1], dl
loc_533E47:
    MOV rdi, [rsp+2D8h+ptr]
    CALL _free
    MOV rdi, [rsp+2D8h+var_2C0]
    CALL _free
    MOV rbx, [rsp+2D8h+var_40]
    XOR rbx, fs:28h
    MOV rax, [rsp+2D8h+var_290]
    JNZ loc_53420F
loc_533E77:
    ADD rsp, 2A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_533E90:
    MOV eax, dword ptr [rsp+2D8h+var_228]
    MOV rbx, [rsp+2D8h+var_2C0]
    MOV [rbx], eax
    MOV rdi, [rsp+2D8h+var_2A8]
    MOV eax, [r13+rdi-4]
    MOV [rbx+rdi-4], eax
    JMP loc_533B04
loc_533EB8:
    LEA edx, [rax+2Eh]
    CMP eax, 1
    MOV eax, 2Fh
    CMOVZ edx, eax
    JMP loc_533E42
loc_533ED0:
    LEA rdi, [r12+0Ah]
    LEA rsi, [rsp+2D8h+var_270]
    MOV edx, 0Ah
    CALL sub_40E6F0
    MOV [rsp+2D8h+var_280], eax
    MOV rax, [rsp+2D8h+var_270]
    CMP byte ptr [rax], 24h
    JZ loc_53419B
loc_533EF6:
    MOV [rsp+2D8h+var_280], 1388h
    JMP loc_53378A
loc_533F08:
    XOR eax, eax
    MOV esi, 0Ah
    MOV ecx, 14h
    JMP loc_533F3C
loc_533F20:
    LEA esi, [rcx+0Bh]
    LEA edx, [rcx+15h]
    LEA edi, [rcx-13h]
    LEA eax, [rcx+1]
    CMP esi, 1Eh
    CMOVNB rsi, rdi
    SUB ecx, 9
    CMP edx, 1Eh
    CMOVB ecx, edx
loc_533F3C:
    MOVZX eax, [rsp+rax+2D8h+var_268]
    MOVZX edx, [rsp+rsi+2D8h+var_268]
    SHL eax, 10h
    MOV edi, eax
    MOV eax, edx
    MOV edx, ecx
    MOVZX edx, [rsp+rdx+2D8h+var_268]
    SHL eax, 8
    OR eax, edi
    OR eax, edx
    MOV edx, 2Eh
    MOV esi, eax
    AND esi, 3Fh
    JZ loc_533F88
loc_533F67:
    CMP esi, 1
    MOV edx, 2Fh
    JZ loc_533F88
loc_533F71:
    CMP esi, 0Bh
    LEA edx, [rsi+2Eh]
    JLE loc_533F88
loc_533F79:
    LEA edi, [rsi+3Bh]
    LEA edx, [rsi+35h]
    CMP esi, 26h
    CMOVGE edx, edi
    NOP dword ptr [rax]
loc_533F88:
    SHR eax, 6
    MOV [r12], dl
    MOV edx, 2Eh
    MOV esi, eax
    AND esi, 3Fh
    JZ loc_533FC0
loc_533F9B:
    CMP esi, 1
    MOV edx, 2Fh
    JZ loc_533FC0
loc_533FA5:
    CMP esi, 0Bh
    LEA edx, [rsi+2Eh]
    JLE loc_533FC0
loc_533FAD:
    LEA edi, [rsi+3Bh]
    LEA edx, [rsi+35h]
    CMP esi, 26h
    CMOVGE edx, edi
    NOP dword ptr [rax+00000000h]
loc_533FC0:
    SHR eax, 6
    MOV [r12+1], dl
    MOV edx, 2Eh
    MOV esi, eax
    AND esi, 3Fh
    JZ loc_533FF8
loc_533FD4:
    CMP esi, 1
    MOV edx, 2Fh
    JZ loc_533FF8
loc_533FDE:
    CMP esi, 0Bh
    LEA edx, [rsi+2Eh]
    JLE loc_533FF8
loc_533FE6:
    LEA edi, [rsi+3Bh]
    LEA edx, [rsi+35h]
    CMP esi, 26h
    CMOVGE edx, edi
    NOP word ptr [rax+rax+00h]
loc_533FF8:
    SHR eax, 6
    MOV [r12+2], dl
    ADD r12, 4
    TEST eax, eax
    MOV edx, 2Eh
    JZ loc_534030
loc_53400D:
    CMP eax, 1
    MOV edx, 2Fh
    JZ loc_534030
loc_534017:
    CMP eax, 0Bh
    LEA edx, [rax+2Eh]
    JLE loc_534030
loc_53401F:
    LEA esi, [rax+3Bh]
    LEA edx, [rax+35h]
    CMP eax, 26h
    CMOVGE edx, esi
    NOP dword ptr [rax+rax+00h]
loc_534030:
    CMP ecx, 1Dh
    MOV [r12-1], dl
    JNZ loc_533F20
loc_53403E:
    MOVZX eax, [rsp+2D8h+var_24A]
    MOV ecx, 2Eh
    MOV edx, eax
    AND edx, 3Fh
    JZ loc_534070
loc_534052:
    CMP edx, 1
    MOV ecx, 2Fh
    JZ loc_534070
loc_53405C:
    CMP edx, 0Bh
    LEA ecx, [rdx+2Eh]
    JLE loc_534070
loc_534064:
    LEA esi, [rdx+3Bh]
    LEA ecx, [rdx+35h]
    CMP edx, 26h
    CMOVGE ecx, esi
loc_534070:
    SHR eax, 6
    MOV [r12], cl
    MOV edx, 2Eh
    MOV ecx, eax
    AND ecx, 3Fh
    JZ loc_5340A8
loc_534083:
    CMP ecx, 1
    MOV edx, 2Fh
    JZ loc_5340A8
loc_53408D:
    CMP ecx, 0Bh
    LEA edx, [rcx+2Eh]
    JLE loc_5340A8
loc_534095:
    LEA esi, [rcx+3Bh]
    LEA edx, [rcx+35h]
    CMP ecx, 26h
    CMOVGE edx, esi
    NOP dword ptr [rax+00000000h]
loc_5340A8:
    SHR eax, 6
    MOV [r12+1], dl
    MOV edx, 2Eh
    TEST eax, eax
    JZ loc_5340CF
loc_5340B9:
    CMP eax, 1
    MOV edx, 2Fh
    JZ loc_5340CF
loc_5340C3:
    LEA ecx, [rax+2Eh]
    LEA edx, [rax+35h]
    CMP eax, 0Bh
    CMOVLE edx, ecx
loc_5340CF:
    MOV [r12+2], dl
    JMP loc_533E47
loc_5340E0:
    LEA edi, [rax+58h]
    MOV r13d, 40h
    MOV [rsp+2D8h+var_2B4], 40h
    JMP loc_53373F
loc_534100:
    MOV rbx, [rsp+2D8h+var_2A8]
    MOV rdi, [rsp+2D8h+var_2C0]
    MOVZX eax, word ptr [r13+rbx-2]
    MOV [rdi+rbx-2], ax
    JMP loc_533B04
loc_534120:
    LEA esi, [rax+3Bh]
    LEA ecx, [rax+35h]
    CMP eax, 26h
    CMOVGE ecx, esi
    JMP loc_533E30
loc_534131:
    MOV ecx, dword ptr [rsp+2D8h+var_228]
    MOV [rax], ecx
    MOV edx, [rdx+rbx-4]
    MOV [rax+rbx-4], edx
    JMP loc_533A78
loc_534147:
    MOV rdx, [rsp+2D8h+var_2C8]
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, [rsp+2D8h+var_298]
    CALL rbp
    MOV eax, dword ptr [rsp+2D8h+var_2A0]
    TEST eax, eax
    JNZ loc_533911
loc_534164:
    MOV r15, [rsp+2D8h+var_2D8]
    LEA rsi, [rsp+2D8h+var_268]
    MOV rdi, [rsp+2D8h+var_298]
    MOV rax, r15
    CALL rax
    MOV rdi, r14
    MOV rax, [rsp+2D8h+var_2B0]
    CALL rax
    LEA rsi, [rsp+2D8h+var_228]
    MOV rdi, r14
    MOV rax, r15
    CALL rax
    MOV rax, [rsp+2D8h+ptr]
    JMP loc_533A47
loc_53419B:
    MOV ecx, [rsp+2D8h+var_280]
    LEA r14, [rax+1]
    CMP ecx, 3E7h
    JBE loc_5341E7
loc_5341AB:
    MOV eax, 3B9AC9FFh
    CMP ecx, 3B9ACA00h
    MOV edi, eax
    CMOVB edi, ecx
    MOV [rsp+2D8h+var_280], edi
    MOV r8d, edi
loc_5341C2:
    MOV rdi, rbx
    MOV ecx, offset aRoundsU
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    CDQE 
    ADD rbx, rax
    JMP loc_53378A
loc_5341E7:
    MOV [rsp+2D8h+var_280], 3E8h
    MOV r8d, [rsp+2D8h+var_280]
    JMP loc_5341C2
loc_5341F6:
    MOVZX edx, word ptr [rdx+rbx-2]
    MOV [rax+rbx-2], dx
    JMP loc_533A78
loc_534205:
    MOV rax, [rsp+2D8h+ptr]
    JMP loc_533A47
loc_53420F:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFE', '0xFFFFFFFF', '0x5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ErrorHandling'}

##### Q 40 - xmalloc_fgets_str
```assembly
loc_4DE9D0:
    SUB rsp, 18h
    XOR edx, edx
    MOV rcx, rsp
    MOV [rsp+18h+var_18], 7FFFF000h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CALL sub_4DE850
    MOV rdx, [rsp+18h+var_10]
    XOR rdx, fs:28h
    JNZ loc_4DEA0B
loc_4DEA06:
    ADD rsp, 18h
    RETN 
loc_4DEA0B:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'JumpTable'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop with Jump Table', 'inferred_category': 'Control Flow'}

##### T 40 - xmalloc_fgets_str
```assembly
loc_527620:
    SUB rsp, 18h
    XOR edx, edx
    MOV rcx, rsp
    MOV [rsp+18h+var_18], 7FFFF000h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CALL sub_5274A0
    MOV rdx, [rsp+18h+var_10]
    XOR rdx, fs:28h
    JNZ loc_52765B
loc_527656:
    ADD rsp, 18h
    RETN 
loc_52765B:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'MemoryAllocation', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Dynamic Memory Management', 'inferred_category': 'Memory Management'}

##### Q 41 - init_fork
```assembly
loc_45A5C0:
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 20h
    CALL sub_40AD10
    CMP byte ptr [rbx], 6Eh
    MOV ecx, offset sub_45AC70
    MOV edx, offset sub_45ABC0
    CMOVZ rdx, rcx
    MOV [rax+8], rdx
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2D', '0x5', '0x1', '0xFFFFFFFF', '0xFFFFFFFFFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Command Line Parsing and File Handling', 'inferred_category': 'Utility/Application'}

##### T 41 - init_fork
```assembly
loc_46E830:
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 20h
    CALL sub_40C260
    CMP byte ptr [rbx], 6Eh
    MOV ecx, offset sub_46F110
    MOV edx, offset sub_46F4E0
    CMOVNZ rdx, rcx
    MOV [rax+8], rdx
    POP rbx
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFF7D', '0xFFFFFF7E', '0xFFFFFFFD', '0xFFFFFFFE', '0xFFFFFFFF', '0x52A7CE', '0x743148'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 42 - parse_url
```assembly
loc_445170:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV rdi, [rsi]
    MOV rbx, rsi
    CALL _free
    MOV rdi, rbp
    CALL sub_40AD40
    MOV qword ptr [rbx+18h], offset aFtp
    MOV [rbx], rax
    MOV esi, (offset aHttp+4)
    MOV rdi, rax
    MOV rbp, rax
    CALL _strstr
    TEST rax, rax
    JZ loc_445380
loc_4451B2:
    LEA rdx, [rax+3]
    MOV byte ptr [rax], 0
    MOV edi, offset aFtp
    MOV ecx, 4
    MOV rsi, rbp
    MOV [rbx+20h], rdx
    REPE 
    JZ loc_445338
loc_4451D2:
    MOV edi, offset aHttps
    MOV ecx, 6
    MOV rsi, rbp
    REPE 
    JZ loc_445358
loc_4451E7:
    MOV edi, offset aHttp_0
    MOV ecx, 5
    MOV rsi, rbp
    REPE 
    JNZ loc_4453A6
loc_4451FC:
    MOV edx, 50h
    MOV esi, (offset aProcNetTcp+0Ah)
    MOV edi, offset aHttp_0
    CALL sub_4ED950
    MOV qword ptr [rbx+18h], offset aHttp_0
    MOV [rbx+28h], eax
loc_44521B:
    MOV rbp, [rbx+20h]
    MOV esi, 2Fh
    MOV rdi, rbp
    CALL _strchr
    MOV esi, 3Fh
    MOV r14, rax
    MOV rdi, rbp
    CALL _strchr
    TEST r14, r14
    MOV r13, rax
    JZ loc_445256
loc_445244:
    TEST rax, rax
    JZ loc_445310
loc_44524D:
    CMP r14, rax
    JBE loc_445310
loc_445256:
    MOV esi, 23h
    MOV rdi, rbp
    CALL _strchr
    TEST r13, r13
    MOV r12, rax
    JZ loc_445390
loc_44526F:
    TEST r12, r12
    JZ loc_44532C
loc_445278:
    CMP r12, r13
    JNB loc_44532C
loc_445281:
    CMP byte ptr [r12], 2Fh
    JNZ loc_4452E8
loc_445288:
    MOV byte ptr [r12], 0
    MOV rbp, [rbx+20h]
    ADD r12, 1
    MOV [rbx+8], r12
loc_445299:
    MOV rdi, rbp
    MOV esi, 40h
    CALL _strrchr
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4452D9
loc_4452AE:
    MOV byte ptr [rax], 0
    MOV rdi, [rbx+10h]
    ADD rbp, 1
    CALL _free
    MOV rdi, [rbx+20h]
    XOR esi, esi
    CALL sub_4E61D0
    MOV rdi, rax
    CALL sub_40AD40
    MOV [rbx+20h], rbp
    MOV [rbx+10h], rax
loc_4452D9:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4452E8:
    LEA rdi, [rbp-1]
    MOV rdx, r12
    MOV rsi, rbp
    SUB rdx, rbp
    CALL _memmove
    SUB qword ptr [rbx+20h], 1
    MOV byte ptr [r12-1], 0
    MOV [rbx+8], r12
    MOV rbp, [rbx+20h]
    JMP loc_445299
loc_445310:
    MOV esi, 23h
    MOV rdi, rbp
    MOV r13, r14
    CALL _strchr
    MOV r12, rax
    TEST r12, r12
    JNZ loc_445278
loc_44532C:
    MOV r12, r13
    JMP loc_445281
loc_445338:
    MOV edx, 15h
    MOV esi, (offset aProcNetTcp+0Ah)
    MOV edi, offset aFtp
    CALL sub_4ED950
    MOV [rbx+28h], eax
    JMP loc_44521B
loc_445358:
    MOV edx, 1BBh
    MOV esi, (offset aProcNetTcp+0Ah)
    MOV edi, offset aHttps
    CALL sub_4ED950
    MOV qword ptr [rbx+18h], offset aHttps
    MOV [rbx+28h], eax
    JMP loc_44521B
loc_445380:
    MOV [rbx+20h], rbp
    JMP loc_4451FC
loc_445390:
    TEST rax, rax
    JNZ loc_445281
loc_445399:
    MOV qword ptr [rbx+8], offset buf
    JMP loc_445299
loc_4453A6:
    MOV byte ptr [rax], 3Ah
    CMP byte ptr [rbp+0], 1Fh
    MOV rax, rbp
    JBE loc_4453BB
loc_4453B2:
    ADD rax, 1
    CMP byte ptr [rax], 1Fh
    JA loc_4453B2
loc_4453BB:
    MOV byte ptr [rax], 0
    MOV rsi, rbp
    MOV edi, offset aNotAnHttpOrFtp
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0xFFFFFF80', '0xFFFFFF7E', '0xFFFFFF7D', '0xF000', '0x8000', '0x98', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File Handling', 'inferred_category': 'Utility/Helper'}

##### T 42 - parse_url
```assembly
loc_457550:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV rdi, [rsi]
    MOV rbx, rsi
    CALL _free
    MOV rdi, rbp
    CALL sub_40C290
    MOV qword ptr [rbx+18h], offset aFtp
    MOV [rbx], rax
    MOV esi, (offset aHttp+4)
    MOV rdi, rax
    MOV rbp, rax
    CALL _strstr
    TEST rax, rax
    JZ loc_457760
loc_457592:
    LEA rdx, [rax+3]
    MOV byte ptr [rax], 0
    MOV edi, offset aFtp
    MOV ecx, 4
    MOV rsi, rbp
    MOV [rbx+20h], rdx
    REPE 
    JZ loc_457718
loc_4575B2:
    MOV edi, offset aHttps
    MOV ecx, 6
    MOV rsi, rbp
    REPE 
    JZ loc_457738
loc_4575C7:
    MOV edi, offset aHttp_0
    MOV ecx, 5
    MOV rsi, rbp
    REPE 
    JNZ loc_457786
loc_4575DC:
    MOV edx, 50h
    MOV esi, (offset aProcNetTcp+0Ah)
    MOV edi, offset aHttp_0
    CALL sub_53AF00
    MOV qword ptr [rbx+18h], offset aHttp_0
    MOV [rbx+28h], eax
loc_4575FB:
    MOV rbp, [rbx+20h]
    MOV esi, 2Fh
    MOV rdi, rbp
    CALL _strchr
    MOV esi, 3Fh
    MOV r14, rax
    MOV rdi, rbp
    CALL _strchr
    TEST r14, r14
    MOV r13, rax
    JZ loc_457636
loc_457624:
    TEST rax, rax
    JZ loc_4576F0
loc_45762D:
    CMP r14, rax
    JBE loc_4576F0
loc_457636:
    MOV esi, 23h
    MOV rdi, rbp
    CALL _strchr
    TEST r13, r13
    MOV r12, rax
    JZ loc_457770
loc_45764F:
    TEST r12, r12
    JZ loc_45770C
loc_457658:
    CMP r12, r13
    JNB loc_45770C
loc_457661:
    CMP byte ptr [r12], 2Fh
    JNZ loc_4576C8
loc_457668:
    MOV byte ptr [r12], 0
    MOV rbp, [rbx+20h]
    ADD r12, 1
    MOV [rbx+8], r12
loc_457679:
    MOV rdi, rbp
    MOV esi, 40h
    CALL _strrchr
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4576B9
loc_45768E:
    MOV byte ptr [rax], 0
    MOV rdi, [rbx+10h]
    ADD rbp, 1
    CALL _free
    MOV rdi, [rbx+20h]
    XOR esi, esi
    CALL sub_530EE0
    MOV rdi, rax
    CALL sub_40C290
    MOV [rbx+20h], rbp
    MOV [rbx+10h], rax
loc_4576B9:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4576C8:
    LEA rdi, [rbp-1]
    MOV rdx, r12
    MOV rsi, rbp
    SUB rdx, rbp
    CALL _memmove
    SUB qword ptr [rbx+20h], 1
    MOV byte ptr [r12-1], 0
    MOV [rbx+8], r12
    MOV rbp, [rbx+20h]
    JMP loc_457679
loc_4576F0:
    MOV esi, 23h
    MOV rdi, rbp
    MOV r13, r14
    CALL _strchr
    MOV r12, rax
    TEST r12, r12
    JNZ loc_457658
loc_45770C:
    MOV r12, r13
    JMP loc_457661
loc_457718:
    MOV edx, 15h
    MOV esi, (offset aProcNetTcp+0Ah)
    MOV edi, offset aFtp
    CALL sub_53AF00
    MOV [rbx+28h], eax
    JMP loc_4575FB
loc_457738:
    MOV edx, 1BBh
    MOV esi, (offset aProcNetTcp+0Ah)
    MOV edi, offset aHttps
    CALL sub_53AF00
    MOV qword ptr [rbx+18h], offset aHttps
    MOV [rbx+28h], eax
    JMP loc_4575FB
loc_457760:
    MOV [rbx+20h], rbp
    JMP loc_4575DC
loc_457770:
    TEST rax, rax
    JNZ loc_457661
loc_457779:
    MOV qword ptr [rbx+8], offset data
    JMP loc_457679
loc_457786:
    MOV byte ptr [rax], 3Ah
    CMP byte ptr [rbp+0], 1Fh
    MOV rax, rbp
    JBE loc_45779B
loc_457792:
    ADD rax, 1
    CMP byte ptr [rax], 1Fh
    JA loc_457792
loc_45779B:
    MOV byte ptr [rax], 0
    MOV rsi, rbp
    MOV edi, offset aNotAnHttpOrFtp
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2D', '0x0', '0x8000', '0x98', '0x1', '0x5', '0x4', '0x5000', '0x8', '0x1000', '0x10', '0x2000'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 4, 'inferred_algorithm': 'File Handling and Parsing', 'inferred_category': 'Utility/Helper Function'}

##### Q 43 - logical_getcwd
```assembly
loc_4BB570:
    PUSH rbx
    MOV edi, (offset aOldpwd+3)
    SUB rsp, 130h
    MOV rax, fs:28h
    MOV [rsp+138h+var_10], rax
    XOR eax, eax
    CALL _getenv
    TEST rax, rax
    JZ loc_4BB5A4
loc_4BB59A:
    MOV rbx, rax
    MOVZX eax, byte ptr [rax]
    CMP al, 2Fh
    JZ loc_4BB5D0
loc_4BB5A4:
    XOR eax, eax
loc_4BB5A6:
    MOV rsi, [rsp+138h+var_10]
    XOR rsi, fs:28h
    JNZ loc_4BB68D
loc_4BB5BD:
    ADD rsp, 130h
    POP rbx
    RETN 
loc_4BB5D0:
    MOV rdx, rbx
    JMP loc_4BB5DF
loc_4BB5D8:
    TEST al, al
    MOV rdx, rcx
    JZ loc_4BB610
loc_4BB5DF:
    CMP al, 2Fh
    LEA rcx, [rdx+1]
    MOVZX eax, byte ptr [rdx+1]
    JNZ loc_4BB5D8
loc_4BB5EB:
    CMP al, 2Eh
    JNZ loc_4BB5D8
loc_4BB5EF:
    MOVZX eax, byte ptr [rdx+2]
    CMP al, 2Eh
    JZ loc_4BB680
loc_4BB5FB:
    ADD rdx, 2
loc_4BB5FF:
    TEST al, al
    JZ loc_4BB5A4
loc_4BB603:
    CMP al, 2Fh
    JZ loc_4BB5A4
loc_4BB607:
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JNZ loc_4BB5DF
loc_4BB60E:
    XCHG ax, ax
loc_4BB610:
    MOV rdx, rsp
    MOV rsi, rbx
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JNZ loc_4BB5A4
loc_4BB624:
    LEA rdx, [rsp+138h+stat_buf]
    MOV esi, (offset aD_9+5)
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JNZ loc_4BB5A4
loc_4BB643:
    MOV rax, [rsp+138h+stat_buf.st_ino]
    CMP [rsp+138h+var_130], rax
    JNZ loc_4BB5A4
loc_4BB656:
    MOV rax, [rsp+138h+stat_buf.st_dev]
    CMP [rsp+138h+var_138], rax
    JNZ loc_4BB5A4
loc_4BB668:
    MOV rdi, rbx
    CALL _puts
    MOV eax, 1
    JMP loc_4BB5A6
loc_4BB680:
    MOVZX eax, byte ptr [rdx+3]
    ADD rdx, 3
    JMP loc_4BB5FF
loc_4BB68D:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'Arithmetic', 'MemoryAccess', 'FunctionCall', 'Output', 'Input'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['2', '6', '80', '81', '1', '100', '102', '106', '109', '111', '113'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parsing Options', 'inferred_category': 'Command-Line Interface'}

##### T 43 - logical_getcwd
```assembly
loc_4F4C10:
    PUSH rbx
    MOV edi, (offset aOldpwd+3)
    SUB rsp, 130h
    MOV rax, fs:28h
    MOV [rsp+138h+var_10], rax
    XOR eax, eax
    CALL _getenv
    TEST rax, rax
    JZ loc_4F4C47
loc_4F4C3A:
    MOV rbx, rax
    MOVZX eax, byte ptr [rax]
    MOV rdx, rbx
    CMP al, 2Fh
    JZ loc_4F4C7F
loc_4F4C47:
    XOR eax, eax
loc_4F4C49:
    MOV rsi, [rsp+138h+var_10]
    XOR rsi, fs:28h
    JNZ loc_4F4D2A
loc_4F4C60:
    ADD rsp, 130h
    POP rbx
    RETN 
loc_4F4C70:
    CMP al, 2Eh
    JZ loc_4F4CF8
loc_4F4C78:
    TEST al, al
    JZ loc_4F4C8F
loc_4F4C7C:
    MOV rdx, rcx
loc_4F4C7F:
    CMP al, 2Fh
    LEA rcx, [rdx+1]
    MOVZX eax, byte ptr [rdx+1]
    JZ loc_4F4C70
loc_4F4C8B:
    TEST al, al
    JNZ loc_4F4C7C
loc_4F4C8F:
    MOV rdx, rsp
    MOV rsi, rbx
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JNZ loc_4F4C47
loc_4F4CA3:
    LEA rdx, [rsp+138h+stat_buf]
    MOV esi, (offset aD_8+5)
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JNZ loc_4F4C47
loc_4F4CBE:
    MOV rax, [rsp+138h+stat_buf.st_ino]
    CMP [rsp+138h+var_130], rax
    JNZ loc_4F4C47
loc_4F4CD1:
    MOV rax, [rsp+138h+stat_buf.st_dev]
    CMP [rsp+138h+var_138], rax
    JNZ loc_4F4C47
loc_4F4CE3:
    MOV rdi, rbx
    CALL _puts
    MOV eax, 1
    JMP loc_4F4C49
loc_4F4CF8:
    MOVZX eax, byte ptr [rdx+2]
    LEA rcx, [rdx+2]
    CMP al, 2Eh
    JZ loc_4F4D20
loc_4F4D04:
    TEST al, al
    JZ loc_4F4C47
loc_4F4D0C:
    CMP al, 2Fh
    JNZ loc_4F4C7C
loc_4F4D14:
    JMP loc_4F4C47
loc_4F4D20:
    LEA rcx, [rdx+3]
    MOVZX eax, byte ptr [rdx+3]
    JMP loc_4F4D04
loc_4F4D2A:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0xFFFFFF7E', '0xFFFFFF7D', '0x80', '0x81', '5', '0x50CABA', '0xFFFFFFFFFFFFFFFF', '1', '0', '0xFFFFFFFE'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Command Line Argument Parsing', 'inferred_category': 'Utility/Helper'}

##### Q 44 - get_input_line
```assembly
loc_4D3470:
    PUSH r13
    PUSH r12
    MOV edx, 80h
    PUSH rbp
    PUSH rbx
    MOV rsi, rdi
    MOV rbx, rdi
    SUB rsp, 8
    MOV rbp, cs:qword_7431F0
    LEA r13, [rbp+500h]
    MOV rdi, r13
    CALL ___strcpy_chk
    MOV dword ptr [rbp+4Ch], 0
    CALL sub_4D32B0
    MOV rsi, cs:stdout
    MOV rdi, rbx
    CALL _fputs_unlocked
    MOV rdi, r13
    CALL _strlen
    CMP eax, 7Fh
    JG loc_4D3524
loc_4D34C3:
    MOV ebx, eax
    MOV r12d, 8002400h
    NOP dword ptr [rax+rax+00h]
loc_4D34D0:
    CALL sub_4D33C0
    CMP eax, 1Bh
    JA loc_4D34E0
loc_4D34DA:
    BT r12, rax
    JB loc_4D3524
loc_4D34E0:
    MOVSX edx, byte ptr [rbp+74h]
    CMP eax, edx
    JZ loc_4D3540
loc_4D34E8:
    CMP eax, 8
    JZ loc_4D3540
loc_4D34ED:
    CMP eax, 7Fh
    JZ loc_4D3540
loc_4D34F2:
    LEA edx, [rax-1]
    CMP edx, 0FEh
    JA loc_4D34D0
loc_4D34FD:
    MOVSXD rdx, ebx
    ADD ebx, 1
    MOV edi, eax
    MOV [rbp+rdx+500h], al
    MOVSXD rdx, ebx
    MOV byte ptr [rbp+rdx+500h], 0
    CALL sub_40B110
    CMP ebx, 80h
    JNZ loc_4D34D0
loc_4D3524:
    XOR edi, edi
    CALL sub_4D2E90
    ADD rsp, 8
    MOV rax, r13
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4D3540:
    SUB ebx, 1
    MOV rcx, cs:stdout
    MOV edx, 3
    MOVSXD rax, ebx
    MOV esi, 1
    MOV edi, offset asc_50E198
    MOV byte ptr [rbp+rax+500h], 0
    CALL _fwrite_unlocked
    TEST ebx, ebx
    JG loc_4D34D0
loc_4D3571:
    JMP loc_4D3524
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x21', '0x28', '0x29', '0x2D', '0x61', '0x6F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parsing/Symbolic Execution', 'inferred_category': 'Control Flow Analysis'}

##### T 44 - get_input_line
```assembly
loc_516570:
    PUSH r13
    PUSH r12
    MOV rsi, rdi
    PUSH rbp
    PUSH rbx
    MOV edx, 80h
    MOV rbx, rdi
    SUB rsp, 38h
    MOV rbp, cs:qword_78D1F0
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    LEA r13, [rbp+500h]
    MOV rdi, r13
    CALL ___strcpy_chk
    MOV ecx, [rbp+30h]
    MOV edx, 0
    MOV esi, 1
    MOV rdi, rsp
    MOV dword ptr [rbp+4Ch], 0
    MOV eax, ecx
    SUB eax, 1
    CMOVNS edx, eax
    CMP ecx, edx
    MOV ecx, offset aUUh
    CMOVA eax, edx
    MOV edx, [rbp+34h]
    XOR r9d, r9d
    LEA r8d, [rax+1]
    TEST edx, edx
    MOV edx, 21h
    SETNZ r9b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    MOV rdi, rsp
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset aU0hK+7)
    CALL _fwrite_unlocked
    MOV rsi, cs:stdout
    MOV rdi, rbx
    CALL _fputs_unlocked
    MOV rdi, r13
    CALL _strlen
    CMP eax, 7Fh
    JG loc_516694
loc_516636:
    MOV ebx, eax
    MOV r12d, 8002400h
    XCHG ax, ax
loc_516640:
    CALL sub_516350
    CMP eax, 1Bh
    JA loc_516650
loc_51664A:
    BT r12, rax
    JB loc_516694
loc_516650:
    MOVSX edx, byte ptr [rbp+74h]
    CMP eax, edx
    JZ loc_5166C0
loc_516658:
    CMP eax, 8
    JZ loc_5166C0
loc_51665D:
    CMP eax, 7Fh
    JZ loc_5166C0
loc_516662:
    LEA edx, [rax-1]
    CMP edx, 0FEh
    JA loc_516640
loc_51666D:
    MOVSXD rdx, ebx
    ADD ebx, 1
    MOV edi, eax
    MOV [rbp+rdx+500h], al
    MOVSXD rdx, ebx
    MOV byte ptr [rbp+rdx+500h], 0
    CALL sub_40C7E0
    CMP ebx, 80h
    JNZ loc_516640
loc_516694:
    XOR edi, edi
    CALL sub_515580
    MOV rcx, [rsp+58h+var_30]
    XOR rcx, fs:28h
    MOV rax, r13
    JNZ loc_5166F3
loc_5166AE:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_5166C0:
    SUB ebx, 1
    MOV rcx, cs:stdout
    MOV edx, 3
    MOVSXD rax, ebx
    MOV esi, 1
    MOV edi, offset asc_55C250
    MOV byte ptr [rbp+rax+500h], 0
    CALL _fwrite_unlocked
    TEST ebx, ebx
    JG loc_516640
loc_5166F1:
    JMP loc_516694
loc_5166F3:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x21', '0x2D', '0x6E', '0x6F', '0x74', '0x3D', '0x28', '0x29', '0x61', '0x6F', '0x65', '0x6C', '0x67'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 26, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Comparison or Parsing', 'inferred_category': 'Utility/Helper'}

##### Q 45 - __lookupalias
```assembly
loc_4666B0:
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOVZX esi, byte ptr [rdi]
    MOV ecx, esi
    SHL ecx, 4
    TEST sil, sil
    JZ loc_4666DE
loc_4666C4:
    MOV rax, rdi
    NOP word ptr [rax+rax+00000000h]
loc_4666D0:
    ADD rax, 1
    ADD ecx, esi
    MOVZX esi, byte ptr [rax]
    TEST sil, sil
    JNZ loc_4666D0
loc_4666DE:
    MOV eax, ecx
    MOV edx, 0A41A41A5h
    MUL edx
    MOV eax, ecx
    SUB eax, edx
    SHR eax, 1
    ADD eax, edx
    SHR eax, 5
    IMUL eax, 27h
    SUB ecx, eax
    MOV rax, cs:qword_742FB8
    LEA r12, [rax+rcx*8]
    MOV rbx, [r12]
    TEST rbx, rbx
    JNZ loc_46671B
loc_46670B:
    JMP loc_46672B
loc_466710:
    MOV r12, rbx
    MOV rbx, [rbx]
    TEST rbx, rbx
    JZ loc_46672B
loc_46671B:
    MOV rsi, [rbx+8]
    MOV rdi, rbp
    CALL _strcmp
    TEST eax, eax
    JNZ loc_466710
loc_46672B:
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Byte'], 'return_value_type': 'Byte', 'dominant_operation_categories': ['BitwiseOperation', 'DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x5042A0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation', 'inferred_category': 'Utility Function'}

##### T 45 - __lookupalias
```assembly
loc_47E6A0:
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOVZX esi, byte ptr [rdi]
    MOV ecx, esi
    SHL ecx, 4
    TEST sil, sil
    JZ loc_47E6CE
loc_47E6B4:
    MOV rax, rdi
    NOP word ptr [rax+rax+00000000h]
loc_47E6C0:
    ADD rax, 1
    ADD ecx, esi
    MOVZX esi, byte ptr [rax]
    TEST sil, sil
    JNZ loc_47E6C0
loc_47E6CE:
    MOV eax, ecx
    MOV edx, 0A41A41A5h
    MUL edx
    MOV eax, ecx
    SUB eax, edx
    SHR eax, 1
    ADD eax, edx
    SHR eax, 5
    IMUL eax, 27h
    SUB ecx, eax
    MOV rax, cs:qword_78CFB8
    LEA r12, [rax+rcx*8]
    MOV rbx, [r12]
    TEST rbx, rbx
    JNZ loc_47E70B
loc_47E6FB:
    JMP loc_47E71B
loc_47E700:
    MOV r12, rbx
    MOV rbx, [rbx]
    TEST rbx, rbx
    JZ loc_47E71B
loc_47E70B:
    MOV rsi, [rbx+8]
    MOV rdi, rbp
    CALL _strcmp
    TEST eax, eax
    JNZ loc_47E700
loc_47E71B:
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Byte'], 'return_value_type': 'Byte', 'dominant_operation_categories': ['BitwiseOperation', 'DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation', 'inferred_category': 'Utility Function'}

##### Q 46 - vi_main
```assembly
loc_4D7350:
    PUSH r13
    PUSH r12
    MOV r12, rsi
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV edi, 16D8h
    SUB rsp, 8
    CALL sub_40AD10
    MOV rbx, rax
    MOV cs:qword_7431F0, rax
    MOV edi, 2
    MOV dword ptr [rax+24h], 0FFFFFFFFh
    CALL sub_40AD10
    MOV byte ptr [rbx+15C0h], 40h
    MOV [rbx+98h], rax
    CALL _getpid
    MOV edi, offset aExinit
    MOV [rbx+90h], eax
    MOV byte ptr [rbx+1Ch], 6
    CALL _getenv
    TEST rax, rax
    JZ loc_4D73B5
loc_4D73B0:
    CMP byte ptr [rax], 0
    JNZ loc_4D7430
loc_4D73B5:
    MOV edx, offset aHcrhc
    MOV rsi, r12
    MOV edi, ebp
    CALL _getopt
    CMP eax, 0FFFFFFFFh
    JZ loc_4D7450
loc_4D73CD:
    CMP eax, 52h
    JZ loc_4D7420
loc_4D73D2:
    CMP eax, 63h
    JZ loc_4D73F0
loc_4D73D7:
    CMP eax, 48h
    JNZ loc_4D73E6
loc_4D73DC:
    MOV edi, offset aTheseFeaturesA
    CALL _puts
loc_4D73E6:
    CALL sub_408E80
loc_4D73F0:
    MOV rdi, cs:optarg
    CMP byte ptr [rdi], 0
    JZ loc_4D73B5
loc_4D73FC:
    XOR r13d, r13d
    CMP qword ptr [rbx+390h], 0
    MOV esi, 80h
    SETNZ r13b
    ADD r13, 72h
    CALL sub_40AD70
    MOV [rbx+r13*8], rax
    JMP loc_4D73B5
loc_4D7420:
    OR byte ptr [rbx+1Dh], 2
    JMP loc_4D73B5
loc_4D7430:
    MOV esi, 80h
    MOV rdi, rax
    CALL sub_40AD70
    MOV [rbx+390h], rax
    JMP loc_4D73B5
loc_4D7450:
    MOVSXD r13, cs:optind
    MOV rcx, cs:stdout
    MOV edx, 8
    MOV esi, 1
    MOV edi, offset a1049h
    MOV cs:optind, 0
    MOV rax, r13
    SHL r13, 3
    SUB ebp, eax
    MOV [rbx+28h], ebp
    CALL _fwrite_unlocked
    MOV eax, cs:optind
    XCHG ax, ax
loc_4D7490:
    CDQE 
    LEA rax, [r12+rax*8]
    MOV rdi, [rax+r13]
    CALL sub_4D6CB0
    MOV eax, cs:optind
    ADD eax, 1
    CMP ebp, eax
    MOV cs:optind, eax
    JG loc_4D7490
loc_4D74B2:
    MOV rcx, cs:stdout
    MOV edx, 8
    MOV esi, 1
    MOV edi, offset a1049l
    CALL _fwrite_unlocked
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8000', '0x8048'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing', 'inferred_category': 'File Handling'}

##### T 46 - vi_main
```assembly
loc_51E410:
    PUSH r13
    PUSH r12
    MOV r12, rsi
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV edi, 16D8h
    SUB rsp, 8
    CALL sub_40C260
    MOV rbx, rax
    MOV cs:qword_78D1F0, rax
    MOV edi, 2
    MOV dword ptr [rax+24h], 0FFFFFFFFh
    CALL sub_40C260
    MOV byte ptr [rbx+15C0h], 40h
    MOV [rbx+98h], rax
    CALL _getpid
    MOV edi, offset aExinit
    MOV [rbx+90h], eax
    MOV byte ptr [rbx+1Ch], 6
    CALL _getenv
    TEST rax, rax
    JZ loc_51E475
loc_51E470:
    CMP byte ptr [rax], 0
    JNZ loc_51E4F0
loc_51E475:
    MOV edx, offset aHcrhc
    MOV rsi, r12
    MOV edi, ebp
    CALL _getopt
    CMP eax, 0FFFFFFFFh
    JZ loc_51E510
loc_51E48D:
    CMP eax, 52h
    JZ loc_51E4E0
loc_51E492:
    CMP eax, 63h
    JZ loc_51E4B0
loc_51E497:
    CMP eax, 48h
    JNZ loc_51E4A6
loc_51E49C:
    MOV edi, offset aTheseFeaturesA
    CALL _puts
loc_51E4A6:
    CALL sub_409830
loc_51E4B0:
    MOV rdi, cs:optarg
    CMP byte ptr [rdi], 0
    JZ loc_51E475
loc_51E4BC:
    XOR r13d, r13d
    CMP qword ptr [rbx+390h], 0
    MOV esi, 80h
    SETNZ r13b
    ADD r13, 72h
    CALL sub_40C2C0
    MOV [rbx+r13*8], rax
    JMP loc_51E475
loc_51E4E0:
    OR byte ptr [rbx+1Dh], 2
    JMP loc_51E475
loc_51E4F0:
    MOV esi, 80h
    MOV rdi, rax
    CALL sub_40C2C0
    MOV [rbx+390h], rax
    JMP loc_51E475
loc_51E510:
    MOVSXD r13, cs:optind
    MOV rcx, cs:stdout
    MOV edx, 8
    MOV esi, 1
    MOV edi, offset a1049h
    MOV cs:optind, 0
    MOV rax, r13
    SHL r13, 3
    SUB ebp, eax
    MOV [rbx+28h], ebp
    CALL _fwrite_unlocked
    MOV eax, cs:optind
    XCHG ax, ax
loc_51E550:
    CDQE 
    LEA rax, [r12+rax*8]
    MOV rdi, [rax+r13]
    CALL sub_51DD60
    MOV eax, cs:optind
    ADD eax, 1
    CMP ebp, eax
    MOV cs:optind, eax
    JG loc_51E550
loc_51E572:
    MOV rcx, cs:stdout
    MOV edx, 8
    MOV esi, 1
    MOV edi, offset a1049l
    CALL _fwrite_unlocked
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8048', '0x8000', '0x10', '0x20'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hash Function', 'inferred_category': 'Cryptographic/Security'}

##### Q 47 - delete_partition
```assembly
loc_485330:
    PUSH r15
    PUSH r14
    MOVSXD r15, edi
    PUSH r13
    PUSH r12
    LEA rax, [r15+r15*4]
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rbp, cs:qword_7431F0
    LEA r12, [rbp+rax*8+0]
    MOV r13, [r12+978h]
    MOV r14, [r12+980h]
    CALL sub_485050
    TEST eax, eax
    JNZ loc_4853A7
loc_48536A:
    CMP r15d, 3
    MOV rbx, r15
    MOV byte ptr [r12+998h], 1
    JG loc_4853C0
loc_48537C:
    MOVZX eax, byte ptr [r13+4]
    MOV edx, eax
    AND edx, 7Fh
    CMP dl, 5
    JZ loc_4854D8
loc_48538F:
    CMP al, 0Fh
    JZ loc_4854D8
loc_485397:
    MOV qword ptr [r13+0], 0
    MOV qword ptr [r13+8], 0
loc_4853A7:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4853C0:
    CMP byte ptr [r14+4], 0
    JZ loc_485490
loc_4853CB:
    CMP r15d, 4
    JZ loc_485508
loc_4853D5:
    LEA eax, [r15-1]
    MOV rsi, [r14]
    MOV rdi, [r14+8]
    CDQE 
    LEA rax, [rax+rax*4]
    LEA rdx, [rbp+rax*8+0]
    MOV rax, [rdx+980h]
    MOV [rax+8], rdi
    MOV [rax], rsi
    MOV esi, [r14+8]
    MOV [rax+8], esi
    MOV esi, [r14+0Ch]
    MOV [rax+0Ch], esi
    MOV byte ptr [rdx+998h], 1
    MOV edi, [rbp+10h]
loc_485411:
    CMP edi, 5
    JLE loc_485548
loc_48541A:
    SUB edi, 1
    CMP ebx, edi
    MOV [rbp+10h], edi
    JL loc_485433
loc_485424:
    JMP loc_4853A7
loc_485430:
    MOV r15, rcx
loc_485433:
    ADD ebx, 1
    LEA rax, [r15+r15*4]
    MOVSXD rcx, ebx
    CMP ebx, edi
    LEA rdx, [rcx+rcx*4]
    LEA rax, [rbp+rax*8+970h]
    LEA rdx, [rbp+rdx*8+970h]
    MOV rsi, [rdx+8]
    MOV [rax+8], rsi
    MOV rsi, [rdx+10h]
    MOV [rax+10h], rsi
    MOV rsi, [rdx+18h]
    MOV [rax+18h], rsi
    MOV rsi, [rdx+20h]
    MOV [rax+20h], rsi
    MOV rdx, [rdx+28h]
    MOV [rax+28h], rdx
    JNZ loc_485430
loc_48547D:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_485490:
    CMP r15d, 4
    JZ loc_485508
loc_485496:
    LEA eax, [r15-1]
    SUB dword ptr [rbp+10h], 1
    CDQE 
    LEA rdx, [rax+rax*4]
    MOV rdx, [rbp+rdx*8+980h]
    TEST rdx, rdx
    JZ loc_4854C0
loc_4854B1:
    MOV qword ptr [rdx], 0
    MOV qword ptr [rdx+8], 0
loc_4854C0:
    LEA rax, [rax+rax*4]
    MOV byte ptr [rbp+rax*8+998h], 1
    JMP loc_4853A7
loc_4854D8:
    CMP ebx, [rbp+38h]
    JNZ loc_485397
loc_4854E1:
    LEA rax, [r15+r15*4]
    MOV dword ptr [rbp+10h], 4
    MOV qword ptr [rbp+rax*8+980h], 0
    MOV dword ptr [rbp+58h], 0
    JMP loc_485397
loc_485508:
    MOV edi, [rbp+10h]
    CMP edi, 5
    JLE loc_485548
loc_485510:
    MOV rdx, [rbp+0A40h]
    TEST rdx, rdx
    JZ loc_48552E
loc_48551C:
    MOV eax, [rbp+0A50h]
    ADD eax, [rdx+8]
    SUB eax, [rbp+58h]
    MOV [rdx+8], eax
    MOV edi, [rbp+10h]
loc_48552E:
    MOV eax, [rbp+58h]
    MOV byte ptr [rbp+0A60h], 1
    MOV [rbp+0A50h], eax
    JMP loc_485411
loc_485548:
    LEA rax, [r15+r15*4]
    MOV rax, [rbp+rax*8+978h]
    TEST rax, rax
    JZ loc_4853A7
loc_48555D:
    MOV qword ptr [rax], 0
    MOV qword ptr [rax+8], 0
    JMP loc_4853A7
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Character Conversion', 'inferred_category': 'Utility'}

##### T 47 - delete_partition
```assembly
loc_406F80:

loc_4A7B40:
    PUSH rbx
    MOV rbx, cs:qword_78D1F0
    MOV r9d, [rbx+24h]
    TEST r9d, r9d
    JZ loc_4A7B5A
loc_4A7B51:
    MOV r8d, [rbx+28h]
    TEST r8d, r8d
    JNZ loc_4A7BA0
loc_4A7B5A:
    XOR eax, eax
    MOV esi, offset aUnknownValueSF
    MOV edi, 1
    CALL ___printf_chk
    MOV ecx, [rbx+24h]
    TEST ecx, ecx
    JZ loc_4A7CD0
loc_4A7B76:
    MOV edx, [rbx+28h]
    TEST edx, edx
    JZ loc_4A7CB0
loc_4A7B81:
    MOV eax, [rbx+2Ch]
    TEST eax, eax
    JZ loc_4A7C90
loc_4A7B8C:
    POP rbx
    MOV edi, offset aSettableInTheE
    JMP _puts
loc_4A7BA0:
    MOV esi, [rbx+2Ch]
    TEST esi, esi
    JZ loc_4A7B5A
loc_4A7BA7:
    MOVSXD rdx, edi
    CMP edi, 3
    LEA rax, [rdx+rdx*4]
    LEA rax, [rbx+rax*8]
    MOV rcx, [rax+978h]
    MOV rsi, [rax+980h]
    MOV byte ptr [rax+998h], 1
    JG loc_4A7C00
loc_4A7BCC:
    MOVZX eax, byte ptr [rcx+4]
    MOV esi, eax
    AND esi, 7Fh
    CMP sil, 5
    JZ loc_4A7D30
loc_4A7BDF:
    CMP al, 0Fh
    JZ loc_4A7D30
loc_4A7BE7:
    MOV qword ptr [rcx], 0
    MOV qword ptr [rcx+8], 0
loc_4A7BF6:
    POP rbx
    RETN 
loc_4A7C00:
    CMP byte ptr [rsi+4], 0
    JZ loc_4A7CF0
loc_4A7C0A:
    CMP edi, 4
    JZ loc_4A7D60
loc_4A7C13:
    LEA eax, [rdi-1]
    MOV r9, [rsi]
    MOV r10, [rsi+8]
    CDQE 
    LEA rax, [rax+rax*4]
    LEA rcx, [rbx+rax*8]
    MOV rax, [rcx+980h]
    MOV [rax+8], r10
    MOV [rax], r9
    MOV r8d, [rsi+8]
    MOV [rax+8], r8d
    MOV esi, [rsi+0Ch]
    MOV [rax+0Ch], esi
    MOV byte ptr [rcx+998h], 1
    MOV eax, [rbx+10h]
loc_4A7C4D:
    CMP eax, 5
    JLE loc_4A7DA0
loc_4A7C56:
    LEA ecx, [rax-1]
    CMP edi, ecx
    MOV [rbx+10h], ecx
    JGE loc_4A7BF6
loc_4A7C60:
    LEA rcx, [rdx+rdx*4]
    SUB eax, edi
    SUB eax, 2
    SHL rcx, 3
    LEA rdx, [rax+rax*4+5]
    LEA rsi, [rbx+rcx+9A0h]
    LEA rdi, [rbx+rcx+978h]
    POP rbx
    SHL rdx, 3
    JMP _memmove
loc_4A7C90:
    MOV edi, 1
    MOV esi, offset unk_5645FA
    XOR eax, eax
    CALL ___printf_chk
    POP rbx
    MOV edi, offset aSettableInTheE
    JMP _puts
loc_4A7CB0:
    MOV esi, offset unk_564655
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4A7B81
loc_4A7CD0:
    MOV esi, offset aHeads
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4A7B76
loc_4A7CF0:
    CMP edi, 4
    JZ loc_4A7D60
loc_4A7CF5:
    LEA eax, [rdi-1]
    SUB dword ptr [rbx+10h], 1
    CDQE 
    LEA rdx, [rax+rax*4]
    MOV rdx, [rbx+rdx*8+980h]
    TEST rdx, rdx
    JZ loc_4A7D1E
loc_4A7D0F:
    MOV qword ptr [rdx], 0
    MOV qword ptr [rdx+8], 0
loc_4A7D1E:
    LEA rax, [rax+rax*4]
    MOV byte ptr [rbx+rax*8+998h], 1
    POP rbx
    RETN 
loc_4A7D30:
    CMP edi, [rbx+38h]
    JNZ loc_4A7BE7
loc_4A7D39:
    LEA rax, [rdx+rdx*4]
    MOV dword ptr [rbx+10h], 4
    MOV qword ptr [rbx+rax*8+980h], 0
    MOV dword ptr [rbx+58h], 0
    JMP loc_4A7BE7
loc_4A7D60:
    MOV eax, [rbx+10h]
    CMP eax, 5
    JLE loc_4A7DA0
loc_4A7D68:
    MOV rcx, [rbx+0A40h]
    TEST rcx, rcx
    JZ loc_4A7D86
loc_4A7D74:
    MOV eax, [rbx+0A50h]
    ADD eax, [rcx+8]
    SUB eax, [rbx+58h]
    MOV [rcx+8], eax
    MOV eax, [rbx+10h]
loc_4A7D86:
    MOV ecx, [rbx+58h]
    MOV byte ptr [rbx+0A60h], 1
    MOV [rbx+0A50h], ecx
    JMP loc_4A7C4D
loc_4A7DA0:
    LEA rax, [rdx+rdx*4]
    MOV rax, [rbx+rax*8+978h]
    TEST rax, rax
    JZ loc_4A7BF6
loc_4A7DB5:
    MOV qword ptr [rax], 0
    MOV qword ptr [rax+8], 0
    JMP loc_4A7BF6
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Character Processing'}

##### Q 48 - set_mode
```assembly
loc_479900:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    CMP sil, 6Eh
    JZ loc_479998
loc_479910:
    MOV ebx, edi
    JLE loc_479968
loc_479914:
    CMP sil, 6Fh
    JZ loc_479938
loc_47991A:
    CMP sil, 78h
    JNZ loc_479988
loc_479920:
    MOV rax, cs:qword_7431F0
    MOV [rax+57h], dil
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_479938:
    TEST rdx, rdx
    JZ loc_4799B0
loc_47993D:
    MOV rsi, rdx
    MOV edi, offset aPipefail
    CALL sub_4098B0
    TEST eax, eax
    JS loc_47996E
loc_47994E:
    MOV rdx, cs:qword_7431F0
    CDQE 
    MOV [rdx+rax+54h], bl
    XOR eax, eax
loc_47995D:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_479968:
    CMP sil, 65h
    JNZ loc_479988
loc_47996E:
    MOV rax, cs:qword_7431F0
    MOV [rax+56h], bl
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_479988:
    ADD rsp, 8
    MOV eax, 1
    POP rbx
    POP rbp
    RETN 
loc_479998:
    MOV rax, cs:qword_7431F0
    MOV [rax+55h], dil
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_4799B0:
    MOV rax, cs:qword_7431F0
    MOV ebx, offset aPipefail
    LEA rbp, [rax+54h]
loc_4799C0:
    CMP byte ptr [rbp+0], 1
    MOV rcx, rbx
    MOV esi, offset aSetCoS
    MOV edi, 1
    SBB edx, edx
    XOR eax, eax
    ADD rbp, 1
    AND edx, 0FFFFFFFEh
    ADD edx, 2Dh
    CALL ___printf_chk
    MOV rdi, rbx
    CALL _strlen
    LEA rbx, [rbx+rax+1]
    CMP byte ptr [rbx], 0
    JNZ loc_4799C0
loc_4799F6:
    XOR eax, eax
    JMP loc_47995D
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2D', '0x1', '0x5', '0x2', '0x8', '0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parsing/Syntax Checking', 'inferred_category': 'Application Logic'}

##### T 48 - set_mode
```assembly
loc_4F7980:
    CMP rdi, offset byte_54C340
    JZ loc_4F7A60
loc_4F798D:
    CMP rdi, offset unk_54C348
    JZ loc_4F7A60
loc_4F799A:
    CMP rdi, offset unk_54C350
    JZ loc_4F7AA0
loc_4F79A7:
    CMP rdi, offset unk_54C358
    JZ loc_4F7AB8
loc_4F79B4:
    CMP rdi, offset unk_54C360
    JZ loc_4F7A90
loc_4F79C1:
    CMP rdi, offset unk_54C368
    JZ loc_4F7BF0
loc_4F79CE:
    CMP rdi, offset unk_54C390
    JZ loc_4F7AD8
loc_4F79DB:
    CMP rdi, offset unk_54C380
    JZ loc_4F7AE8
loc_4F79E8:
    CMP rdi, offset unk_54C388
    JZ loc_4F7B80
loc_4F79F5:
    CMP rdi, offset unk_54C378
    JZ loc_4F7B60
loc_4F7A02:
    CMP rdi, offset unk_54C370
    JZ loc_4F7B10
loc_4F7A0F:
    CMP rdi, offset unk_54C3A8
    JZ loc_4F7BB8
loc_4F7A1C:
    CMP rdi, offset unk_54C3B0
    JZ loc_4F7BC8
loc_4F7A29:
    CMP rdi, offset unk_54C3C0
    JZ loc_4F7B9C
loc_4F7A36:
    CMP rdi, offset unk_54C3B8
    JZ loc_4F7B9C
loc_4F7A43:
    CMP rdi, offset unk_54C398
    JZ loc_4F7CAF
loc_4F7A50:
    CMP rdi, offset unk_54C3A0
    JZ loc_4F7B40
loc_4F7A5D:
    REP 
loc_4F7A60:
    TEST esi, esi
    JZ loc_4F7A78
loc_4F7A64:
    MOV eax, [rdx+8]
    AND eax, 0FFFFFECFh
    OR eax, 30h
    MOV [rdx+8], eax
    RETN 
loc_4F7A78:
    MOV eax, [rdx+8]
    AND eax, 0FFFFFCCFh
    OR eax, 120h
    MOV [rdx+8], eax
    RETN 
loc_4F7A90:
    MOV byte ptr [rdx+13h], 7Fh
    MOV byte ptr [rdx+14h], 15h
    RETN 
loc_4F7AA0:
    TEST esi, esi
    JNZ loc_4F7A64
loc_4F7AA4:
    MOV eax, [rdx+8]
    AND eax, 0FFFFFCCFh
    OR eax, 320h
    MOV [rdx+8], eax
    RETN 
loc_4F7AB8:
    TEST esi, esi
    JZ loc_4F7B00
loc_4F7ABC:
    MOV eax, [rdx]
    AND eax, 0FFFFFE3Fh
    OR ah, 1
    MOV [rdx], eax
    MOV eax, [rdx+4]
    AND eax, 0FFFFFFD3h
    OR eax, 4
    MOV [rdx+4], eax
    RETN 
loc_4F7AD8:
    TEST esi, esi
    JZ loc_4F7B28
loc_4F7ADC:
    OR dword ptr [rdx+0Ch], 2
    RETN 
loc_4F7AE8:
    MOV eax, [rdx+8]
    AND eax, 0FFFFFECFh
    TEST esi, esi
    JZ loc_4F7B30
loc_4F7AF4:
    OR eax, 120h
    OR dword ptr [rdx], 20h
    MOV [rdx+8], eax
    RETN 
loc_4F7B00:
    AND dword ptr [rdx], 0FFFFFEFFh
    AND dword ptr [rdx+4], 0FFFFFFFBh
    RETN 
loc_4F7B10:
    TEST esi, esi
    JNZ loc_4F7B64
loc_4F7B14:
    OR dword ptr [rdx], 526h
    OR dword ptr [rdx+4], 1
    OR dword ptr [rdx+0Ch], 3
    RETN 
loc_4F7B28:
    AND dword ptr [rdx+0Ch], 0FFFFFFFDh
    RETN 
loc_4F7B30:
    OR eax, 30h
    AND dword ptr [rdx], 0FFFFFFDFh
    MOV [rdx+8], eax
    RETN 
loc_4F7B40:
    OR dword ptr [rdx+0Ch], 0A10h
    MOV byte ptr [rdx+11h], 3
    MOV byte ptr [rdx+13h], 7Fh
    MOV byte ptr [rdx+14h], 15h
loc_4F7B53:
    AND dword ptr [rdx], 0FFFFF7FFh
    RETN 
loc_4F7B60:
    TEST esi, esi
    JNZ loc_4F7B14
loc_4F7B64:
    MOV dword ptr [rdx], 0
    AND dword ptr [rdx+4], 0FFFFFFFEh
    AND dword ptr [rdx+0Ch], 0FFFFFFF8h
    MOV byte ptr [rdx+17h], 1
    MOV byte ptr [rdx+16h], 0
    RETN 
loc_4F7B80:
    MOV eax, [rdx+8]
    AND eax, 0FFFFFECFh
    TEST esi, esi
    JZ loc_4F7BE0
loc_4F7B8C:
    OR eax, 120h
    OR dword ptr [rdx], 20h
    OR dword ptr [rdx+4], 1
    MOV [rdx+8], eax
    RETN 
loc_4F7B9C:
    TEST esi, esi
    JZ loc_4F7C98
loc_4F7BA4:
    AND dword ptr [rdx+0Ch], 0FFFFFFFBh
    AND dword ptr [rdx], 0FFFFFDFFh
    AND dword ptr [rdx+4], 0FFFFFFFDh
    RETN 
loc_4F7BB8:
    TEST esi, esi
    JZ loc_4F7B53
loc_4F7BBC:
    OR dword ptr [rdx], 800h
    RETN 
loc_4F7BC8:
    TEST esi, esi
    JZ loc_4F7CA7
loc_4F7BD0:
    OR dword ptr [rdx+4], 1800h
    RETN 
loc_4F7BE0:
    OR eax, 30h
    AND dword ptr [rdx], 0FFFFFFDFh
    AND dword ptr [rdx+4], 0FFFFFFFEh
    MOV [rdx+8], eax
    RETN 
loc_4F7BF0:
    MOV byte ptr [rdx+11h], 3
    MOV byte ptr [rdx+12h], 1Ch
    MOV eax, offset dword_54C344
    MOV byte ptr [rdx+13h], 7Fh
    MOV byte ptr [rdx+14h], 15h
    MOV byte ptr [rdx+15h], 4
    MOV byte ptr [rdx+1Ch], 0
    MOV byte ptr [rdx+21h], 0
    MOV byte ptr [rdx+18h], 0
    MOV byte ptr [rdx+19h], 11h
    MOV byte ptr [rdx+1Ah], 13h
    MOV byte ptr [rdx+1Bh], 1Ah
    MOV byte ptr [rdx+1Dh], 12h
    MOV byte ptr [rdx+1Fh], 17h
    MOV byte ptr [rdx+20h], 16h
    MOV byte ptr [rdx+1Eh], 0Fh
    MOV byte ptr [rdx+17h], 1
    MOV byte ptr [rdx+16h], 0
    JMP loc_4F7C50
loc_4F7C40:
    OR ecx, [rax]
    MOV [rsi], ecx
loc_4F7C44:
    ADD rax, 8
    CMP rax, (offset aEvenp+4)
    JZ locret_4F7C90
loc_4F7C50:
    MOVZX ecx, byte ptr [rax-4]
    CMP ecx, 3
    JA loc_4F7C44
loc_4F7C59:
    MOVZX esi, ds:byte_54C284[rcx]
    ADD rsi, rdx
    JZ loc_4F7C44
loc_4F7C65:
    MOVZX ecx, word ptr [rax-2]
    MOVZX edi, byte ptr [rax-3]
    NOT ecx
    AND ecx, [rsi]
    TEST dil, 1
    JNZ loc_4F7C40
loc_4F7C77:
    AND edi, 2
    JZ loc_4F7C44
loc_4F7C7C:
    MOV edi, [rax]
    NOT edi
    AND ecx, edi
    MOV [rsi], ecx
    JMP loc_4F7C44
loc_4F7C90:
    REP 
loc_4F7C98:
    OR dword ptr [rdx+0Ch], 4
    OR dword ptr [rdx], 200h
    OR dword ptr [rdx+4], 2
    RETN 
loc_4F7CA7:
    AND dword ptr [rdx+4], 0FFFFE7FFh
    RETN 
loc_4F7CAF:
    OR dword ptr [rdx+0Ch], 0A10h
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'MemoryAccess', 'ControlFlow', 'SubroutineCall'], 'loop_indicators': [{'type': 'IterativeLoop', 'entry_points': ['loc_43C98F'], 'condition_evaluation': 'rbp != 1', 'update_statements': [{'register': 'rbx', 'operation': 'rbx + 8'}, {'register': 'edi', 'operation': 'edi - 1'}], 'exit_conditions': ['ebp <= 1']}], 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xD', '0x1', '0xA', '0x5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 9, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String parsing and handling based on command-line arguments and environment settings.', 'inferred_category': 'User Interface/Tool Command Line'}

##### Q 49 - sha1_end
```assembly
loc_4E0EC0:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV rbx, rsi
    MOV esi, 1
    SUB rsp, 8
    CALL sub_4E0460
    CMP qword ptr [rbp+40h], offset sub_4E07D0
    LEA rdi, [rbp+50h]
    MOV eax, 14h
    MOV edx, 20h
    MOV r8d, 20h
    SETNZ cl
    CMOVZ r8, rax
    CMOVNZ eax, edx
    MOVZX ecx, cl
    MOV rdx, rdi
    LEA ecx, [rcx+rcx*2+4]
    LEA rsi, [rbp+rcx*4+54h]
    NOP dword ptr [rax+rax+00h]
loc_4E0F10:
    MOV ecx, [rdx]
    ADD rdx, 4
    BSWAP ecx
    MOV [rdx-4], ecx
    CMP rdx, rsi
    JNZ loc_4E0F10
loc_4E0F20:
    MOV rdx, [rbp+50h]
    MOV [rbx], rdx
    MOV edx, r8d
    MOV rcx, [rdi+rdx-8]
    MOV [rbx+rdx-8], rcx
    LEA rcx, [rbx+8]
    XOR edx, edx
    AND rcx, 0FFFFFFFFFFFFFFF8h
    SUB rbx, rcx
    SUB rdi, rbx
    ADD ebx, r8d
    AND ebx, 0FFFFFFF8h
loc_4E0F4A:
    MOV esi, edx
    ADD edx, 8
    MOV r8, [rdi+rsi]
    CMP edx, ebx
    MOV [rcx+rsi], r8
    JB loc_4E0F4A
loc_4E0F5B:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['String'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x5', '0xA', '0x3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Help Message Generation', 'inferred_category': 'Utility/Application'}

##### T 49 - sha1_end
```assembly
loc_52B090:
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV rbx, rdi
    SUB rsp, 8
    MOV edx, [rdi+48h]
    AND edx, 3Fh
    LEA eax, [rdx+1]
    MOV byte ptr [rdi+rdx], 80h
    MOV edx, 40h
    SUB edx, eax
    ADD rax, rdi
    CMP edx, 8
    JNB loc_52B1E0
loc_52B0BC:
    TEST dl, 4
    JNZ loc_52B230
loc_52B0C5:
    TEST edx, edx
    JZ loc_52B0DA
loc_52B0C9:
    TEST dl, 2
    MOV byte ptr [rax], 0
    JNZ loc_52B248
loc_52B0D5:
    CMP edx, 7
    JA loc_52B108
loc_52B0DA:
    MOV rdi, rbx
    CALL qword ptr [rbx+40h]
    LEA rdi, [rbx+8]
    MOV rcx, rbx
    XOR eax, eax
    MOV qword ptr [rbx], 0
    MOV qword ptr [rbx+38h], 0
    AND rdi, 0FFFFFFFFFFFFFFF8h
    SUB rcx, rdi
    ADD ecx, 40h
    SHR ecx, 3
    REP 
loc_52B108:
    MOV rax, [rbx+48h]
    MOV rdi, rbx
    SHL rax, 3
    BSWAP rax
    MOV [rbx+38h], rax
    CALL qword ptr [rbx+40h]
    MOV ecx, [rbx+50h]
    CMP qword ptr [rbx+40h], offset sub_52A4E0
    MOV eax, 20h
    MOV edx, 14h
    MOV esi, 14h
    BSWAP ecx
    MOV [rbx+50h], ecx
    MOV ecx, [rbx+54h]
    CMOVNZ rsi, rax
    CMOVZ eax, edx
    SETNZ dl
    MOVZX edx, dl
    BSWAP ecx
    LEA edx, [rdx+rdx*2+5]
    MOV [rbx+54h], ecx
    MOV ecx, [rbx+58h]
    CMP edx, 5
    BSWAP ecx
    MOV [rbx+58h], ecx
    MOV ecx, [rbx+5Ch]
    BSWAP ecx
    MOV [rbx+5Ch], ecx
    MOV ecx, [rbx+60h]
    BSWAP ecx
    MOV [rbx+60h], ecx
    JZ loc_52B194
loc_52B172:
    MOV ecx, [rbx+64h]
    CMP edx, 6
    BSWAP ecx
    MOV [rbx+64h], ecx
    JZ loc_52B194
loc_52B17F:
    MOV ecx, [rbx+68h]
    CMP edx, 8
    BSWAP ecx
    MOV [rbx+68h], ecx
    JNZ loc_52B194
loc_52B18C:
    MOV edx, [rbx+6Ch]
    BSWAP edx
    MOV [rbx+6Ch], edx
loc_52B194:
    MOV rcx, [rbx+50h]
    LEA rdx, [rbx+50h]
    MOV [rbp+0], rcx
    MOV ecx, esi
    MOV rdi, [rbx+rcx+48h]
    MOV [rbp+rcx-8], rdi
    LEA rdi, [rbp+8]
    AND rdi, 0FFFFFFFFFFFFFFF8h
    SUB rbp, rdi
    SUB rdx, rbp
    ADD ebp, esi
    MOV rcx, rdx
    AND ebp, 0FFFFFFF8h
    XOR edx, edx
loc_52B1C4:
    MOV esi, edx
    ADD edx, 8
    MOV r8, [rcx+rsi]
    CMP edx, ebp
    MOV [rdi+rsi], r8
    JB loc_52B1C4
loc_52B1D5:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_52B1E0:
    MOV ecx, edx
    MOV qword ptr [rax], 0
    MOV qword ptr [rax+rcx-8], 0
    LEA rcx, [rax+8]
    AND rcx, 0FFFFFFFFFFFFFFF8h
    SUB rax, rcx
    ADD eax, edx
    AND eax, 0FFFFFFF8h
    CMP eax, 8
    JB loc_52B0D5
loc_52B20B:
    AND eax, 0FFFFFFF8h
    XOR esi, esi
loc_52B210:
    MOV edi, esi
    ADD esi, 8
    CMP esi, eax
    MOV qword ptr [rcx+rdi], 0
    JB loc_52B210
loc_52B221:
    JMP loc_52B0D5
loc_52B230:
    MOV ecx, edx
    MOV dword ptr [rax], 0
    MOV dword ptr [rax+rcx-4], 0
    JMP loc_52B0D5
loc_52B248:
    MOV ecx, edx
    XOR esi, esi
    MOV [rax+rcx-2], si
    JMP loc_52B0D5
```
{'input_parameter_count': 1, 'input_parameter_types': ['String'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x5', '0x10', '0x4', '0x3', '0x50CC20', '0x50CABAh', '0x4EA7AD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Help Text Generation', 'inferred_category': 'Utility/Helper'}

##### Q 50 - log5
```assembly
loc_413C90:
    SUB rsp, 0D8h
    TEST al, al
    MOV [rsp+0D8h+var_B0], rsi
    MOV [rsp+0D8h+var_A8], rdx
    MOV [rsp+0D8h+var_A0], rcx
    MOV [rsp+0D8h+var_98], r8
    MOV [rsp+0D8h+var_90], r9
    JZ loc_413CEB
loc_413CB4:
    MOVAPS [rsp+0D8h+var_88], xmm0
    MOVAPS [rsp+0D8h+var_78], xmm1
    MOVAPS [rsp+0D8h+var_68], xmm2
    MOVAPS [rsp+0D8h+var_58], xmm3
    MOVAPS [rsp+0D8h+var_48], xmm4
    MOVAPS [rsp+0D8h+var_38], xmm5
    MOVAPS [rsp+0D8h+var_28], xmm6
    MOVAPS [rsp+0D8h+var_18], xmm7
loc_413CEB:
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_C0], rax
    XOR eax, eax
    LEA rax, [rsp+0D8h+arg_0]
    CMP cs:dest.c_iflag, 4
    MOV [rsp+0D8h+var_D0], rax
    LEA rax, [rsp+0D8h+var_B8]
    MOV [rsp+0D8h+var_D8], 8
    MOV [rsp+0D8h+var_D4], 30h
    MOV [rsp+0D8h+var_C8], rax
    JA loc_413D42
loc_413D2A:
    XOR edx, edx
    MOV rsi, rsp
    MOV cs:byte_742E39, 6
    CALL sub_409F10
    MOV cs:byte_742E39, 3
loc_413D42:
    MOV rax, [rsp+0D8h+var_C0]
    XOR rax, fs:28h
    JNZ loc_413D5A
loc_413D52:
    ADD rsp, 0D8h
    RETN 
loc_413D5A:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Size'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Linear Search', 'inferred_category': 'Search'}

##### T 50 - log5
```assembly
loc_416EC0:
    SUB rsp, 0D8h
    TEST al, al
    MOV [rsp+0D8h+var_B0], rsi
    MOV [rsp+0D8h+var_A8], rdx
    MOV [rsp+0D8h+var_A0], rcx
    MOV [rsp+0D8h+var_98], r8
    MOV [rsp+0D8h+var_90], r9
    JZ loc_416F1B
loc_416EE4:
    MOVAPS [rsp+0D8h+var_88], xmm0
    MOVAPS [rsp+0D8h+var_78], xmm1
    MOVAPS [rsp+0D8h+var_68], xmm2
    MOVAPS [rsp+0D8h+var_58], xmm3
    MOVAPS [rsp+0D8h+var_48], xmm4
    MOVAPS [rsp+0D8h+var_38], xmm5
    MOVAPS [rsp+0D8h+var_28], xmm6
    MOVAPS [rsp+0D8h+var_18], xmm7
loc_416F1B:
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_C0], rax
    XOR eax, eax
    LEA rax, [rsp+0D8h+arg_0]
    CMP cs:buf.c_iflag, 4
    MOV [rsp+0D8h+var_D0], rax
    LEA rax, [rsp+0D8h+var_B8]
    MOV [rsp+0D8h+var_D8], 8
    MOV [rsp+0D8h+var_D4], 30h
    MOV [rsp+0D8h+var_C8], rax
    JA loc_416F72
loc_416F5A:
    XOR edx, edx
    MOV rsi, rsp
    MOV cs:byte_78CE39, 6
    CALL sub_40A920
    MOV cs:byte_78CE39, 3
loc_416F72:
    MOV rax, [rsp+0D8h+var_C0]
    XOR rax, fs:28h
    JNZ loc_416F8A
loc_416F82:
    ADD rsp, 0D8h
    RETN 
loc_416F8A:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Size'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Comparison', 'inferred_category': 'Utility'}

##### Q 51 - endofname
```assembly
loc_4DE5A0:
    MOVZX edx, byte ptr [rdi]
    MOV rax, rdi
    CMP dl, 5Fh
    JZ loc_4DE5C0
loc_4DE5AB:
    OR edx, 20h
    SUB edx, 61h
    CMP dl, 19h
    JA locret_4DE5E8
loc_4DE5B6:
    NOP word ptr [rax+rax+00000000h]
loc_4DE5C0:
    ADD rax, 1
    MOVZX edx, byte ptr [rax]
    TEST dl, dl
    JZ locret_4DE5E3
loc_4DE5CB:
    CMP dl, 5Fh
    JZ loc_4DE5C0
loc_4DE5D0:
    LEA ecx, [rdx-30h]
    CMP cl, 9
    JBE loc_4DE5C0
loc_4DE5D8:
    OR edx, 20h
    SUB edx, 61h
    CMP dl, 19h
    JBE loc_4DE5C0
loc_4DE5E3:
    REP 
loc_4DE5E8:
    REP 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '5', '0xFFFFFF7D', '0xFFFFFF7E', '0x1FF', '0x1', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Command Line Argument Parsing', 'inferred_category': 'Utility/Application'}

##### T 51 - endofname
```assembly
loc_527100:
    MOVZX edx, byte ptr [rdi]
    MOV rax, rdi
    CMP dl, 5Fh
    JZ loc_527120
loc_52710B:
    OR edx, 20h
    SUB edx, 61h
    CMP dl, 19h
    JA locret_527148
loc_527116:
    NOP word ptr [rax+rax+00000000h]
loc_527120:
    ADD rax, 1
    MOVZX edx, byte ptr [rax]
    TEST dl, dl
    JZ locret_527143
loc_52712B:
    CMP dl, 5Fh
    JZ loc_527120
loc_527130:
    LEA ecx, [rdx-30h]
    CMP cl, 9
    JBE loc_527120
loc_527138:
    OR edx, 20h
    SUB edx, 61h
    CMP dl, 19h
    JBE loc_527120
loc_527143:
    REP 
loc_527148:
    REP 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0xFFFFFF7D', '0xFFFFFF7E', '0x5', '0x1', '0x1FF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Command Line Parsing and Directory Creation', 'inferred_category': 'Utility/Application'}

##### Q 52 - do_iptunnel
```assembly
loc_44E870:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 48h
    MOV rsi, [rdi]
    MOV rax, fs:28h
    MOV [rsp+58h+var_20], rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_44E8C1
loc_44E891:
    MOV edi, offset aAdd_4
    CALL sub_409910
    TEST eax, eax
    JS loc_44EA34
loc_44E8A3:
    ADD rbx, 8
    TEST eax, eax
    JZ loc_44E990
loc_44E8AF:
    CMP eax, 1
    JZ loc_44E9A8
loc_44E8B8:
    CMP eax, 2
    JZ loc_44E9C0
loc_44E8C1:
    MOV rdx, rsp
    MOV esi, 89F0h
    MOV rdi, rbx
    CALL sub_44DDA0
    MOVZX eax, [rsp+58h+var_2F]
    MOV rbp, rsp
    CMP al, 29h
    JZ loc_44E970
loc_44E8E1:
    CMP al, 2Fh
    JZ loc_44E918
loc_44E8E5:
    CMP al, 4
    JZ loc_44E950
loc_44E8E9:
    MOV rdi, rsp
    CALL sub_44E580
    XOR eax, eax
    NOP dword ptr [rax+rax+00h]
loc_44E8F8:
    MOV rcx, [rsp+58h+var_20]
    XOR rcx, fs:28h
    JNZ loc_44EA2F
loc_44E90C:
    ADD rsp, 48h
    POP rbx
    POP rbp
    RETN 
loc_44E918:
    CMP [rsp+58h+var_58], 0
    MOV edi, offset aGre0
    MOV rsi, rsp
    CMOVNZ rdi, rsp
    CALL sub_44D810
    MOV edx, eax
loc_44E92F:
    TEST edx, edx
    MOV eax, 0FFFFFFFFh
    JNZ loc_44E8F8
loc_44E938:
    MOV rdi, rbp
    CALL sub_44D9F0
    MOV edi, 0Ah
    CALL sub_40B110
    XOR eax, eax
    JMP loc_44E8F8
loc_44E950:
    CMP [rsp+58h+var_58], 0
    MOV edi, offset aTunl0
    MOV rsi, rsp
    CMOVNZ rdi, rsp
    CALL sub_44D810
    MOV edx, eax
    JMP loc_44E92F
loc_44E970:
    CMP [rsp+58h+var_58], 0
    MOV edi, offset aSit0
    MOV rsi, rsp
    CMOVNZ rdi, rsp
    CALL sub_44D810
    MOV edx, eax
    JMP loc_44E92F
loc_44E990:
    MOV rsi, rbx
    MOV edi, 89F1h
    CALL sub_44E4C0
    JMP loc_44E8F8
loc_44E9A8:
    MOV rsi, rbx
    MOV edi, 89F3h
    CALL sub_44E4C0
    JMP loc_44E8F8
loc_44E9C0:
    MOV esi, 89F2h
    MOV rdx, rsp
    MOV rdi, rbx
    CALL sub_44DDA0
    MOVZX eax, [rsp+58h+var_2F]
    MOV rsi, rsp
    CMP al, 29h
    JZ loc_44E9F8
loc_44E9DC:
    CMP al, 2Fh
    JZ loc_44EA20
loc_44E9E0:
    CMP al, 4
    JZ loc_44EA07
loc_44E9E4:
    MOV rdi, rsp
    CALL sub_44D960
    JMP loc_44E8F8
loc_44E9F8:
    MOV edi, offset aSit0
    CALL sub_44D960
    JMP loc_44E8F8
loc_44EA07:
    MOV edi, offset aTunl0
    CALL sub_44D960
    JMP loc_44E8F8
loc_44EA20:
    MOV edi, offset aGre0
    CALL sub_44D960
    JMP loc_44E8F8
loc_44EA2F:
    CALL ___stack_chk_fail
loc_44EA34:
    MOV rsi, cs:ident
    MOV rdi, [rbx]
    CALL sub_450870
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'ArithmeticOperation'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Concatenation', 'inferred_category': 'Utility/Helper Function'}

##### T 52 - do_iptunnel
```assembly
loc_461530:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rsi, [rdi]
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_461583
loc_461553:
    MOV edi, offset aAdd_4
    CALL sub_40A2C0
    TEST eax, eax
    JS loc_46191D
loc_461565:
    ADD rbx, 8
    TEST eax, eax
    JZ loc_461670
loc_461571:
    CMP eax, 1
    JZ loc_461710
loc_46157A:
    CMP eax, 2
    JZ loc_4617B8
loc_461583:
    LEA rbp, [rsp+98h+s2]
    MOV esi, 89F0h
    MOV rdi, rbx
    MOV rdx, rbp
    CALL sub_460A80
    MOVZX eax, [rsp+98h+var_2F]
    CMP al, 29h
    JZ loc_461660
loc_4615A5:
    CMP al, 2Fh
    JZ loc_4615E0
loc_4615A9:
    CMP al, 4
    JZ loc_461650
loc_4615B1:
    MOV rdi, rbp
    CALL sub_461200
    XOR eax, eax
    NOP dword ptr [rax+rax+00h]
loc_4615C0:
    MOV rcx, [rsp+98h+var_20]
    XOR rcx, fs:28h
    JNZ loc_461918
loc_4615D4:
    SUB rsp, 0FFFFFFFFFFFFFF80h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4615E0:
    CMP [rsp+98h+s2], 0
    MOV esi, offset aGre0
loc_4615EA:
    CMOVNZ rsi, rbp
    MOV rdi, rsp
    CALL sub_40AEE0
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    MOV [rsp+98h+var_88], rbp
    CALL sub_40CD40
    MOV ecx, offset aSiocgettunnel
    MOV r12d, eax
    MOV rdx, rsp
    MOV esi, 89F0h
    MOV edi, eax
    CALL sub_40CFF0
    MOV edi, r12d
    MOV ebx, eax
    CALL _close
    TEST ebx, ebx
    MOV eax, 0FFFFFFFFh
    JNZ loc_4615C0
loc_461636:
    MOV rdi, rbp
    CALL sub_4606D0
    MOV edi, 0Ah
    CALL sub_40C7E0
    XOR eax, eax
    JMP loc_4615C0
loc_461650:
    CMP [rsp+98h+s2], 0
    MOV esi, offset aTunl0
    JMP loc_4615EA
loc_461660:
    CMP [rsp+98h+s2], 0
    MOV esi, offset aSit0
    JMP loc_4615EA
loc_461670:
    MOV rdx, rsp
    MOV esi, 89F1h
    MOV rdi, rbx
    CALL sub_460A80
    CMP [rsp+98h+var_70], 0
    MOV r12, rsp
    JZ loc_461696
loc_46168A:
    CMP [rsp+98h+var_72], 0
    JZ loc_461734
loc_461696:
    MOVZX eax, [rsp+98h+var_6F]
    CMP al, 29h
    JZ loc_4616C0
loc_46169F:
    CMP al, 2Fh
    JZ loc_461890
loc_4616A7:
    CMP al, 4
    MOV esi, offset aTunl0
    JZ loc_4616C5
loc_4616B0:
    MOV edi, offset aCanTDetermineT
    XOR eax, eax
    CALL sub_40ABE0
loc_4616C0:
    MOV esi, offset aSit0
loc_4616C5:
    LEA rdi, [rsp+98h+s2]
    CALL sub_40AEE0
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    MOV [rsp+98h+var_48], r12
    CALL sub_40CD40
    LEA rdx, [rsp+98h+s2]
    MOV ebx, eax
    MOV ecx, offset aSiocaddtunnel
    MOV esi, 89F1h
    MOV edi, eax
    CALL sub_40D030
    MOV edi, ebx
    CALL _close
    XOR eax, eax
    JMP loc_4615C0
loc_461710:
    LEA rbp, [rsp+98h+s2]
    MOV esi, 89F3h
    MOV rdi, rbx
    MOV rdx, rbp
    CALL sub_460A80
    CMP [rsp+98h+var_30], 0
    JZ loc_461740
loc_46172C:
    CMP [rsp+98h+var_32], 0
    JNZ loc_461740
loc_461734:
    MOV edi, offset aTtl0AndNoptmud
    XOR eax, eax
    CALL sub_40ABE0
loc_461740:
    MOVZX eax, [rsp+98h+var_2F]
    CMP al, 29h
    JZ loc_461830
loc_46174D:
    CMP al, 2Fh
    JZ loc_4618B0
loc_461755:
    CMP al, 4
    JNZ loc_4616B0
loc_46175D:
    CMP [rsp+98h+s2], 0
    MOV r12, rsp
    JNZ loc_461908
loc_46176B:
    MOV esi, offset aTunl0
    MOV rdi, rsp
    CALL sub_40AEE0
loc_461778:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    MOV [rsp+98h+var_88], rbp
    CALL sub_40CD40
    MOV ecx, offset aSiocchgtunnel
    MOV ebx, eax
    MOV rdx, r12
    MOV esi, 89F3h
    MOV edi, eax
    CALL sub_40D030
    MOV edi, ebx
    CALL _close
    XOR eax, eax
    JMP loc_4615C0
loc_4617B8:
    LEA rbp, [rsp+98h+s2]
    MOV esi, 89F2h
    MOV rdi, rbx
    MOV rdx, rbp
    CALL sub_460A80
    MOVZX eax, [rsp+98h+var_2F]
    CMP al, 29h
    JZ loc_461850
loc_4617D6:
    CMP al, 2Fh
    JZ loc_4618E8
loc_4617DE:
    CMP al, 4
    JZ loc_4618CC
loc_4617E6:
    MOV rsi, rbp
    MOV rdi, rsp
    CALL sub_40AEE0
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    MOV [rsp+98h+var_88], rbp
    CALL sub_40CD40
    MOV ecx, offset aSiocdeltunnel
    MOV ebx, eax
    MOV rdx, rsp
loc_461811:
    MOV esi, 89F2h
    MOV edi, ebx
    CALL sub_40D030
    MOV edi, ebx
    CALL _close
    XOR eax, eax
    JMP loc_4615C0
loc_461830:
    CMP [rsp+98h+s2], 0
    MOV r12, rsp
    JNZ loc_461908
loc_46183E:
    MOV esi, offset aSit0
    MOV rdi, rsp
    CALL sub_40AEE0
    JMP loc_461778
loc_461850:
    CMP [rsp+98h+s2], 0
    MOV r12, rsp
    JNZ loc_4618A0
loc_46185A:
    MOV esi, offset aSit0
    MOV rdi, rsp
    CALL sub_40AEE0
loc_461867:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    MOV [rsp+98h+var_88], rbp
    CALL sub_40CD40
    MOV ecx, offset aSiocdeltunnel
    MOV ebx, eax
    MOV rdx, r12
    JMP loc_461811
loc_461890:
    MOV esi, offset aGre0
    JMP loc_4616C5
loc_4618A0:
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_40AEE0
    JMP loc_461867
loc_4618B0:
    CMP [rsp+98h+s2], 0
    MOV r12, rsp
    JNZ loc_461908
loc_4618BA:
    MOV esi, offset aGre0
    MOV rdi, rsp
    CALL sub_40AEE0
    JMP loc_461778
loc_4618CC:
    CMP [rsp+98h+s2], 0
    MOV r12, rsp
    JNZ loc_4618A0
loc_4618D6:
    MOV esi, offset aTunl0
    MOV rdi, rsp
    CALL sub_40AEE0
    JMP loc_461867
loc_4618E8:
    CMP [rsp+98h+s2], 0
    MOV r12, rsp
    JNZ loc_4618A0
loc_4618F2:
    MOV esi, offset aGre0
    MOV rdi, rsp
    CALL sub_40AEE0
    JMP loc_461867
loc_461908:
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_40AEE0
    JMP loc_461778
loc_461918:
    CALL ___stack_chk_fail
loc_46191D:
    MOV rsi, cs:ident
    MOV rdi, [rbx]
    CALL sub_464220
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ComparisonAndJump'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2A8', '0x0', '0x4', '0x7524FC', '0x75252C', '0x752538', '0x50', '0x0B4', '0x752565', '0x8', '0x752514', '0x1', '0x3', '0x49', '0x120', '0xF', '0x150', '0xA', '0x1A0', '0xC', '0x20', '0x380', '0xB', '0x6', '0x3C0', '0x9', '0x700', '0xE', '0x200', '0xD0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 40, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Cryptography/Low-Level'}

##### Q 53 - nuke_str
```assembly
loc_4E56E0:
    TEST rdi, rdi
    JNZ loc_4E56F8
loc_4E56E5:
    JMP locret_4E56FD
loc_4E56F0:
    ADD rdi, 1
    MOV byte ptr [rdi-1], 0
loc_4E56F8:
    CMP byte ptr [rdi], 0
    JNZ loc_4E56F0
loc_4E56FD:
    REP 
```
{'input_parameter_count': 5, 'input_parameter_types': ['File Descriptor', 'Flags', 'Mode', 'Pathname', 'Status Flags'], 'return_value_type': 'Error Code', 'dominant_operation_categories': ['SubroutineCall', 'DataMovement', 'ConditionalBranching', 'MemoryManagement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28', '0x50'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 1, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'File Management'}

##### T 53 - nuke_str
```assembly
loc_5303C0:
    TEST rdi, rdi
    JNZ loc_5303D8
loc_5303C5:
    JMP locret_5303DD
loc_5303D0:
    ADD rdi, 1
    MOV byte ptr [rdi-1], 0
loc_5303D8:
    CMP byte ptr [rdi], 0
    JNZ loc_5303D0
loc_5303DD:
    REP 
```
{'input_parameter_count': 5, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer', 'Boolean', 'Boolean'], 'return_value_type': 'Boolean', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xA0', '1', '2', '30', '28', '500', '70', '72', '8', '16', '54', '2', '14', '54', '16', '27', '28', '27h', '100', '0xFFFFFFFF', '8000320000h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 7, 'inferred_algorithm': 'File/Directory Management', 'inferred_category': 'File System Operations'}

##### Q 54 - fatal_cannot
```assembly
loc_463460:
    MOV rsi, rdi
    SUB rsp, 8
    MOV edi, offset aFatalCanTS
    XOR eax, eax
    CALL sub_409CC0
    MOV edi, 97h
    CALL __exit
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Error Handling', 'inferred_category': 'Utility/Helper'}

##### T 54 - fatal_cannot
```assembly
loc_47AF40:
    MOV rsi, rdi
    SUB rsp, 8
    MOV edi, offset aFatalCanTS
    XOR eax, eax
    CALL sub_40A6D0
    MOV edi, 97h
    CALL __exit
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Error Handling', 'inferred_category': 'Utility/Error Reporting'}

##### Q 55 - send_to_from
```assembly
loc_4EB0F0:
    PUSH rbx
    MOV r11d, ecx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOVZX r10d, word ptr [r9]
    MOV rax, fs:28h
    MOV [rsp+88h+var_10], rax
    XOR eax, eax
    MOV eax, r10d
    AND eax, 0FFFFFFF7h
    CMP ax, 2
    JNZ loc_4EB1D0
loc_4EB11E:
    XOR eax, eax
    MOV ecx, 7
    MOV rdi, rsp
    REP 
    MOV eax, [rsp+88h+addr_len]
    MOV [rsp+88h+var_40], rdx
    LEA rdx, [rsp+88h+var_38]
    CMP r10w, 2
    MOV [rsp+88h+var_48], rsi
    MOV [rsp+88h+var_38], 0
    MOV [rsp+88h+var_30], 0
    MOV [rsp+88h+var_28], 0
    MOV rsi, rsp
    MOV [rsp+88h+var_80], eax
    LEA rax, [rsp+88h+var_48]
    MOV [rsp+88h+var_20], 0
    MOV [rsp+88h+var_18], 0
    MOV [rsp+88h+var_88], r8
    MOV [rsp+88h+var_78], rax
    MOV [rsp+88h+var_70], 1
    MOV [rsp+88h+var_68], rdx
    MOV [rsp+88h+var_58], r11d
    JZ loc_4EB1E0
loc_4EB19D:
    XOR eax, eax
    CMP r10w, 0Ah
    JZ loc_4EB200
loc_4EB1A6:
    MOV edx, r11d
    MOV edi, ebx
    MOV [rsp+88h+var_60], rax
    CALL _sendmsg
loc_4EB1B5:
    MOV rbx, [rsp+88h+var_10]
    XOR rbx, fs:28h
    JNZ loc_4EB235
loc_4EB1C5:
    SUB rsp, 0FFFFFFFFFFFFFF80h
    POP rbx
    RETN 
loc_4EB1D0:
    MOV r9d, [rsp+88h+addr_len]
    CALL _sendto
    JMP loc_4EB1B5
loc_4EB1E0:
    MOV eax, [r9+4]
    MOV dword ptr [rsp+88h+var_30+4], 8
    MOV [rsp+88h+var_38], 1Ch
    MOV dword ptr [rsp+88h+var_28+4], eax
    MOV eax, 1Ch
    JMP loc_4EB1A6
loc_4EB200:
    MOV rax, [r9+8]
    MOV rdx, [r9+10h]
    MOV dword ptr [rsp+88h+var_30], 29h
    MOV dword ptr [rsp+88h+var_30+4], 32h
    MOV [rsp+88h+var_38], 24h
    MOV [rsp+88h+var_28], rax
    MOV [rsp+88h+var_20], rdx
    MOV eax, 24h
    JMP loc_4EB1A6
loc_4EB235:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 55 - send_to_from
```assembly
loc_537310:
    PUSH rbx
    MOV r11d, ecx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOVZX r10d, word ptr [r9]
    MOV rax, fs:28h
    MOV [rsp+88h+var_10], rax
    XOR eax, eax
    MOV eax, r10d
    AND eax, 0FFFFFFF7h
    CMP ax, 2
    JNZ loc_5373F0
loc_53733E:
    XOR eax, eax
    MOV ecx, 7
    MOV rdi, rsp
    REP 
    MOV eax, [rsp+88h+addr_len]
    MOV [rsp+88h+var_40], rdx
    LEA rdx, [rsp+88h+var_38]
    CMP r10w, 2
    MOV [rsp+88h+var_48], rsi
    MOV [rsp+88h+var_38], 0
    MOV [rsp+88h+var_30], 0
    MOV [rsp+88h+var_28], 0
    MOV rsi, rsp
    MOV [rsp+88h+var_80], eax
    LEA rax, [rsp+88h+var_48]
    MOV [rsp+88h+var_20], 0
    MOV [rsp+88h+var_18], 0
    MOV [rsp+88h+var_88], r8
    MOV [rsp+88h+var_78], rax
    MOV [rsp+88h+var_70], 1
    MOV [rsp+88h+var_68], rdx
    MOV [rsp+88h+var_58], r11d
    JZ loc_537400
loc_5373BD:
    XOR eax, eax
    CMP r10w, 0Ah
    JZ loc_537420
loc_5373C6:
    MOV edx, r11d
    MOV edi, ebx
    MOV [rsp+88h+var_60], rax
    CALL _sendmsg
loc_5373D5:
    MOV rbx, [rsp+88h+var_10]
    XOR rbx, fs:28h
    JNZ loc_537455
loc_5373E5:
    SUB rsp, 0FFFFFFFFFFFFFF80h
    POP rbx
    RETN 
loc_5373F0:
    MOV r9d, [rsp+88h+addr_len]
    CALL _sendto
    JMP loc_5373D5
loc_537400:
    MOV eax, [r9+4]
    MOV dword ptr [rsp+88h+var_30+4], 8
    MOV [rsp+88h+var_38], 1Ch
    MOV dword ptr [rsp+88h+var_28+4], eax
    MOV eax, 1Ch
    JMP loc_5373C6
loc_537420:
    MOV rax, [r9+8]
    MOV rdx, [r9+10h]
    MOV dword ptr [rsp+88h+var_30], 29h
    MOV dword ptr [rsp+88h+var_30+4], 32h
    MOV [rsp+88h+var_38], 24h
    MOV [rsp+88h+var_28], rax
    MOV [rsp+88h+var_20], rdx
    MOV eax, 24h
    JMP loc_5373C6
loc_537455:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x743C98'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### Q 56 - less_exit
```assembly
loc_41D010:
    PUSH rbp
    PUSH rbx
    MOV ebx, edi
    SUB rsp, 8
    CALL sub_41CF90
    MOV rbp, cs:qword_7431F0
    TEST byte ptr [rbp+9], 8
    JZ loc_41D04C
loc_41D02A:
    MOV edx, [rbp+20h]
    XOR eax, eax
    MOV esi, offset aU0hK
    MOV edi, 1
    ADD edx, 2
    CALL ___printf_chk
    TEST ebx, ebx
    JS loc_41D056
loc_41D045:
    MOV edi, ebx
    CALL _exit
loc_41D04C:
    MOV edi, [rbp+4]
    CALL sub_40A4F0
    JMP loc_41D02A
loc_41D056:
    NEG ebx
    MOV edi, ebx
    CALL sub_40C210
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['MemoryManagement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Deallocation', 'inferred_category': 'Memory Management'}

##### T 56 - less_exit
```assembly
loc_423FA0:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    SUB rsp, 8
    CALL sub_40C7D0
    MOV rbx, cs:qword_78D1F0
    XOR esi, esi
    MOV edi, [rbx+4]
    LEA rdx, [rbx+154h]
    CALL _tcsetattr
    TEST byte ptr [rbx+9], 8
    JZ loc_423FED
loc_423FCB:
    MOV edx, [rbx+20h]
    MOV edi, 1
    XOR eax, eax
    MOV esi, offset aU0hK
    ADD edx, 2
    CALL ___printf_chk
    TEST ebp, ebp
    MOV edi, ebp
    JS loc_423FF7
loc_423FE8:
    CALL _exit
loc_423FED:
    MOV edi, [rbx+4]
    CALL sub_40AE80
    JMP loc_423FCB
loc_423FF7:
    NEG edi
    CALL sub_40DC70
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['MemoryManagement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Deallocation', 'inferred_category': 'Memory Management'}

##### Q 57 - print_common
```assembly
loc_4B5BD0:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 8
    TEST rdx, rdx
    JZ loc_4B5BF1
loc_4B5BE0:
    MOV esi, 50F5B8h
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B5BF1:
    MOV eax, cs:dword_74363C
    TEST al, 2
    JZ loc_4B5C30
loc_4B5BFB:
    TEST rbx, rbx
    JZ loc_4B5C30
loc_4B5C00:
    TEST al, 2
    JZ loc_4B5C1D
loc_4B5C04:
    TEST rbx, rbx
    MOV esi, 50F5B8h
    JZ loc_4B5C60
loc_4B5C0E:
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B5C1D:
    XOR eax, eax
loc_4B5C1F:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4B5C30:
    XOR eax, eax
    MOV edx, ebp
    MOV esi, 517593h
    MOV edi, 1
    CALL ___printf_chk
    MOV eax, cs:dword_74363C
    TEST eax, eax
    JNZ loc_4B5C00
loc_4B5C4D:
    TEST rbx, rbx
    MOV esi, 511E92h
    JNZ loc_4B5C0E
loc_4B5C57:
    JMP loc_4B5C1D
loc_4B5C60:
    XOR eax, eax
    MOV esi, ebp
    MOV edi, offset aUnknownIdU
    CALL sub_40A280
    MOV eax, 1
    JMP loc_4B5C1F
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0xFFFFFF7E', '0xFFFFFF7D', '0xFFFFFF80', '0x5', '0x6B', '0x62', '0x66', '0x73', '0x7A', '0x6E', '0x71', '0x6D', '0x74', '0x27', '0x23', '0x2D', '0x30', '0x2E', '0x69', '0x58', '0x64', '0x75'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 25, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parsing/Option Handling', 'inferred_category': 'Utility/Helper'}

##### T 57 - print_common
```assembly
loc_4EE440:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 8
    TEST rdx, rdx
    JZ loc_4EE461
loc_4EE450:
    MOV esi, 55D681h
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4EE461:
    MOV eax, cs:dword_78D63C
    TEST al, 2
    JZ loc_4EE4A0
loc_4EE46B:
    TEST rbx, rbx
    JZ loc_4EE4A0
loc_4EE470:
    TEST al, 2
    JZ loc_4EE48D
loc_4EE474:
    TEST rbx, rbx
    MOV esi, 55D681h
    JZ loc_4EE4D0
loc_4EE47E:
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4EE48D:
    XOR eax, eax
loc_4EE48F:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4EE4A0:
    XOR eax, eax
    MOV edx, ebp
    MOV esi, 565619h
    MOV edi, 1
    CALL ___printf_chk
    MOV eax, cs:dword_78D63C
    TEST eax, eax
    JNZ loc_4EE470
loc_4EE4BD:
    TEST rbx, rbx
    MOV esi, 55FF42h
    JNZ loc_4EE47E
loc_4EE4C7:
    JMP loc_4EE48D
loc_4EE4D0:
    XOR eax, eax
    MOV esi, ebp
    MOV edi, offset aUnknownIdU
    CALL sub_40AC80
    MOV eax, 1
    JMP loc_4EE48F
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'ControlFlow', 'Mathematics', 'SystemCalls'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 9, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFE', '0xFFFFFF7D', '0xFFFFFF7C', '0xFFFFFF7E', '0xFFFFFF80'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'String Parsing', 'inferred_category': 'Utilities'}

##### Q 58 - check_signature16
```assembly
loc_4AF020:
    PUSH r12
    PUSH rbp
    XOR ebp, ebp
    PUSH rbx
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CMP byte ptr [rdi], 0
    JZ loc_4AF060
loc_4AF03F:
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    MOV eax, ebp
    JNZ loc_4AF0A3
loc_4AF051:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4AF060:
    MOV rbx, rdi
    MOV edi, [rdi+10h]
    MOV r12d, esi
    LEA rsi, [rsp+28h+buf]
    MOV edx, 2
    CALL sub_40BE60
    CMP rax, 2
    JNZ loc_4AF090
loc_4AF07E:
    MOVZX eax, [rsp+28h+buf]
    CMP eax, r12d
    JNZ loc_4AF090
loc_4AF088:
    MOV byte ptr [rbx], 2
    JMP loc_4AF03F
loc_4AF090:
    MOV edi, offset aInvalidMagic
    XOR eax, eax
    MOV ebp, 0FFFFFFFFh
    CALL sub_40A280
    JMP loc_4AF03F
loc_4AF0A3:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0x1Ch'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop with Conditional Branching', 'inferred_category': 'Utility/Helper'}

##### T 58 - check_signature16
```assembly
loc_4E6400:
    PUSH r12
    PUSH rbp
    XOR ebp, ebp
    PUSH rbx
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CMP byte ptr [rdi], 0
    JZ loc_4E6440
loc_4E641F:
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    MOV eax, ebp
    JNZ loc_4E6483
loc_4E6431:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4E6440:
    MOV rbx, rdi
    MOV edi, [rdi+10h]
    MOV r12d, esi
    LEA rsi, [rsp+28h+buf]
    MOV edx, 2
    CALL sub_40D800
    CMP rax, 2
    JNZ loc_4E6470
loc_4E645E:
    MOVZX eax, [rsp+28h+buf]
    CMP eax, r12d
    JNZ loc_4E6470
loc_4E6468:
    MOV byte ptr [rbx], 2
    JMP loc_4E641F
loc_4E6470:
    MOV edi, offset aInvalidMagic
    XOR eax, eax
    MOV ebp, 0FFFFFFFFh
    CALL sub_40AC80
    JMP loc_4E641F
loc_4E6483:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFFh', '0x1Ch'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop with conditional check and error handling', 'inferred_category': 'Utility/Helper'}

##### Q 59 - lsusb_main
```assembly
loc_48E800:
    SUB rsp, 8
    XOR r9d, r9d
    XOR r8d, r8d
    XOR ecx, ecx
    MOV edx, offset sub_48E680
    MOV esi, 1
    MOV edi, offset aSysBusUsbDevic
    CALL sub_4E9D30
    XOR eax, eax
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0x0C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 59 - lsusb_main
```assembly
loc_4B34F0:
    SUB rsp, 8
    XOR r9d, r9d
    XOR r8d, r8d
    XOR ecx, ecx
    MOV edx, offset sub_4B3370
    MOV esi, 1
    MOV edi, offset aSysBusUsbDevic
    CALL sub_535F70
    XOR eax, eax
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFFh', '0Ch'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Conversion', 'inferred_category': 'Utility/Helper'}

##### Q 60 - common_traceroute_main
```assembly
loc_44391A:
    XOR r12d, r12d
loc_44391D:
    TEST [rsp+198h+var_144], 400h
    MOV [rsp+198h+var_134], 1Eh
    JNZ loc_444885
loc_443933:
    TEST [rsp+198h+var_144], 800h
    JNZ loc_44486E
loc_443941:
    TEST [rsp+198h+var_144], 1000h
    MOV [rsp+198h+var_138], 3
    JNZ loc_444900
loc_443957:
    MOV r14d, [rsp+198h+var_144]
    AND r14d, 2000h
    JNZ loc_4448E2
loc_443969:
    TEST [rsp+198h+var_144], 4000h
    JNZ loc_4448C2
loc_443977:
    TEST [rsp+198h+var_144], 8000h
    MOV [rsp+198h+var_148], 0
    JNZ loc_4448A5
loc_44398D:
    TEST [rsp+198h+var_144], 10000h
    MOV [rsp+198h+var_17C], 1
    JNZ loc_4449EE
loc_4439A3:
    MOV edi, [rsp+198h+var_144]
    MOVZX esi, word ptr [r13+24h]
    MOV edx, 0Ah
    MOV eax, edi
    AND eax, 20000h
    CMP eax, 1
    SBB eax, eax
    NOT eax
    AND eax, 2
    AND edi, 40000h
    MOV rdi, [rbp+0]
    MOVZX eax, ax
    CMOVZ edx, eax
    CALL sub_4EDA30
    MOV [r13+10h], rax
    MOVZX ebx, word ptr [rax+4]
    CMP bx, 0Ah
    JZ loc_444920
loc_4439E9:
    MOV rdi, [rbp+8]
    MOV dword ptr [r13+18h], 2Eh
    TEST rdi, rdi
    JZ loc_443A0D
loc_4439FA:
    MOV edx, 8000h
    MOV esi, 2Eh
    CALL sub_4ECBE0
    MOV [r13+18h], eax
loc_443A0D:
    CALL sub_4EC940
    MOV edx, 1
    MOV esi, 3
    MOV edi, 2
    CALL sub_40B520
    MOV esi, 3
    MOV edi, eax
    CALL sub_40AF80
    MOV r13d, [rsp+198h+var_144]
    AND r13d, 10h
    JNZ loc_444A68
loc_443A41:
    TEST byte ptr [rsp+198h+var_144], 2
    JZ loc_44480D
loc_443A4C:
    MOV edx, 1
    MOV esi, 3
loc_443A56:
    MOV edi, 2
    CALL sub_40B520
    MOV esi, 4
    MOV edi, eax
    CALL sub_40AF80
loc_443A6C:
    MOV r15, cs:qword_7431F0
    MOV esi, 7
    MOV edi, 4
    MOV edx, [r15+18h]
    CALL sub_4ED6E0
    TEST eax, eax
    JNZ loc_444B7B
loc_443A8E:
    MOV r8d, [rsp+198h+var_180]
    TEST r8d, r8d
    JNZ loc_444A21
loc_443A9C:
    TEST r13d, r13d
    JNZ loc_444A0D
loc_443AA5:
    MOVSXD rdi, dword ptr [r15+18h]
    CALL sub_40AD10
    MOV [r15], rax
    CALL _getpid
    CMP bx, 2
    MOV [r15+20h], eax
    JZ loc_444835
loc_443AC4:
    CMP bx, 0Ah
    JZ loc_444744
loc_443ACE:
    MOV r12d, [rsp+198h+var_144]
    AND r12d, 200h
    JNZ loc_444761
loc_443AE0:
    TEST r14d, r14d
    JNZ loc_44477C
loc_443AE9:
    CMP bx, 0Ah
    JZ loc_444AB0
loc_443AF3:
    CALL _getgid
    MOV edi, eax
    CALL sub_40B360
    CALL _getuid
    MOV edi, eax
    CALL sub_40B380
    MOV rax, [r15+10h]
    LEA rdi, [rax+4]
    CALL sub_4EDD90
    MOV rdx, [rbp+0]
    MOV rcx, rax
    MOV esi, offset aTracerouteToSS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_443B30:
    MOV ebx, [rsp+198h+var_134]
    MOV ecx, [r15+18h]
    MOV esi, offset aDHopsMaxDByteP
    MOV edi, 1
    XOR eax, eax
    MOV edx, ebx
    CALL ___printf_chk
    MOV rdi, [r15+10h]
    MOV eax, [rdi]
    LEA esi, [rax+4]
    CALL sub_40ADE0
    MOV r14, rax
    MOV rax, [r15+10h]
    MOV edi, [rax]
    CALL sub_40AD10
    MOV [rsp+198h+s1], rax
    MOV rax, [r15+10h]
    MOV edi, [rax]
    CALL sub_40AD10
    MOV edi, [rsp+198h+var_17C]
    MOV [rsp+198h+var_188], rax
    CMP ebx, edi
    JL loc_4440AB
loc_443B88:
    IMUL eax, [rsp+198h+var_148], 3E8h
    MOV [rsp+198h+var_180], 0
    MOV [rsp+198h+useconds], eax
    MOV eax, [rsp+198h+var_138]
    SUB eax, 1
    MOV [rsp+198h+var_130], eax
    NOP word ptr [rax+rax+00000000h]
loc_443BB0:
    MOV edx, [rsp+198h+var_17C]
    MOV edi, 1
    XOR eax, eax
    MOV esi, offset a2d_0
    CALL ___printf_chk
    MOV edi, [rsp+198h+var_138]
    TEST edi, edi
    JLE loc_4446EB
loc_443BD1:
    CALL sub_40B100
    MOV eax, [rsp+198h+var_180]
    MOV edi, [rsp+198h+var_138]
    MOV [rsp+198h+var_150], 0
    MOV [rsp+198h+var_14C], 0
    MOV [rsp+198h+var_13C], 0
    ADD edi, eax
    MOV [rsp+198h+var_154], eax
    LEA rax, [r14+4]
    MOV [rsp+198h+var_15C], edi
    MOV [rsp+198h+s2], rax
    NOP dword ptr [rax+00000000h]
loc_443C10:
    MOV rax, [r15+10h]
    ADD [rsp+198h+var_180], 1
    CMP word ptr [rax+4], 0Ah
    JZ loc_443E68
loc_443C24:
    MOVZX esi, byte ptr [rsp+198h+var_180]
    MOV rax, [r15+8]
    MOV [rax], sil
    MOVZX esi, byte ptr [rsp+198h+var_17C]
    MOV rax, [r15+8]
    MOV [rax+1], sil
    TEST byte ptr cs:dword_74363C, 2
    JZ loc_443C86
loc_443C46:
    MOV rdx, [r15]
    MOVZX eax, word ptr [rsp+198h+var_180]
    XOR ecx, ecx
    ROR ax, 8
    MOV [rdx+1Ah], ax
    MOV rbx, [r15]
    MOV eax, [r15+18h]
    LEA rdi, [rbx+14h]
    MOV [rbx+16h], cx
    LEA esi, [rax-14h]
    CALL sub_4E1980
    MOV [rbx+16h], ax
    MOV rax, [r15]
    CMP word ptr [rax+16h], 0
    JNZ loc_443C86
loc_443C7D:
    MOV edx, 0FFFFFFFFh
    MOV [rax+16h], dx
loc_443C86:
    MOV rax, [r15+10h]
    MOV rbx, [r15+8]
    MOV ecx, [rsp+198h+var_17C]
    CMP word ptr [rax+4], 0Ah
    JZ loc_443E8C
loc_443C9D:
    XOR esi, esi
    MOV edx, 2
    MOV edi, 4
    CALL sub_4ED670
    TEST eax, eax
    JNZ loc_444B91
loc_443CB6:
    TEST byte ptr cs:dword_74363C, 2
    JZ loc_444220
loc_443CC3:
    MOV rbp, [r15]
    LEA rbx, [rbp+14h]
loc_443CCA:
    MOVSXD rax, dword ptr [r15+18h]
    MOV rsi, rbx
    MOV edi, 4
    ADD rbp, rax
    MOV rax, [r15+10h]
    SUB rbp, rbx
    MOVSXD rdx, ebp
    MOV r8d, [rax]
    LEA rcx, [rax+4]
    CALL sub_40B580
    CMP ebp, eax
    JZ loc_443D03
loc_443CF3:
    MOV edx, eax
    MOV esi, ebp
    MOV edi, offset aSentDOctetsRet
    XOR eax, eax
    CALL sub_40A280
loc_443D03:
    CALL sub_40C990
    IMUL r13d, [r15+28h], 3E8h
    MOV [rsp+198h+var_178], rax
    MOV ebx, eax
    MOVZX eax, word ptr [rsp+198h+var_180]
    ROR ax, 8
    MOV [rsp+198h+var_158], ax
    MOV [rsp+198h+var_156], ax
    JMP loc_443DEA
loc_443D30:
    LEA rdi, [rsp+198h+fds]
    MOV edx, r13d
    MOV esi, 1
    CALL sub_4EA710
    TEST eax, eax
    JLE loc_443E0D
loc_443D4D:
    MOV eax, [r14]
    SUB rsp, 8
    LEA rbp, [r15+2Ch]
    MOV ecx, 40h
    MOV edx, 200h
    MOV edi, 3
    MOV rsi, rbp
    PUSH rax
    MOV r9, [rsp+1A8h+var_188]
    MOV r8, [rsp+1A8h+s2]
    CALL sub_4EB240
    MOV dword ptr [rsp+1A8h+var_170], eax
    MOV r12, rax
    CALL sub_40C990
    MOV edx, 10624DD3h
    MOV [rsp+1A8h+var_198], rax
    MOV ecx, eax
    SUB eax, ebx
    MUL edx
    POP rsi
    POP rdi
    SHR edx, 6
    SUB r13d, edx
    TEST r12d, r12d
    JZ loc_443E0D
loc_443DA3:
    JS loc_443DE7
loc_443DA5:
    CMP word ptr [r14+4], 2
    JZ loc_444350
loc_443DB1:
    MOVZX r9d, byte ptr [r15+2Ch]
    MOVZX ebp, byte ptr [r15+2Dh]
    CMP r9b, 3
    SETZ dl
    TEST bpl, bpl
    SETZ al
    TEST dl, al
    JNZ loc_443EC0
loc_443DD0:
    CMP r9b, 1
    JZ loc_443EC0
loc_443DDA:
    TEST byte ptr cs:dword_74363C, 40h
    JNZ loc_4440E0
loc_443DE7:
    MOV ebx, dword ptr [rsp+198h+var_198]
loc_443DEA:
    MOV r8d, 1
    TEST r13d, r13d
    MOV [rsp+198h+fds.fd], 3
    MOV [rsp+198h+fds.events], r8w
    JNS loc_443D30
loc_443E0D:
    MOV esi, 50EB24h
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_443E1E:
    MOV esi, [rsp+198h+var_180]
    CMP [rsp+198h+var_15C], esi
    JZ loc_444078
loc_443E2C:
    CALL sub_40B100
    MOV esi, [rsp+198h+var_154]
    CMP [rsp+198h+var_180], esi
    JZ loc_443C10
loc_443E3F:
    MOV esi, [rsp+198h+var_148]
    TEST esi, esi
    JZ loc_443C10
loc_443E4B:
    MOV edi, [rsp+198h+useconds]
    CALL _usleep
    MOV rax, [r15+10h]
    ADD [rsp+198h+var_180], 1
    CMP word ptr [rax+4], 0Ah
    JNZ loc_443C24
loc_443E68:
    MOV edx, [r15+20h]
    MOV rbx, [r15+8]
    MOV ecx, [rsp+198h+var_17C]
    BSWAP edx
    MOV [rbx], edx
    MOV edx, [rsp+198h+var_180]
    BSWAP edx
    MOV [rbx+4], edx
    CMP word ptr [rax+4], 0Ah
    JNZ loc_443C9D
loc_443E8C:
    MOV edx, 10h
    MOV esi, 29h
    MOV edi, 4
    CALL sub_4ED670
    TEST eax, eax
    JNZ loc_444BA6
loc_443EA8:
    TEST byte ptr cs:dword_74363C, 2
    JZ loc_444220
loc_443EB5:
    MOV rbp, [r15]
    JMP loc_443CCA
loc_443EC0:
    MOVZX eax, byte ptr [r15+3Ah]
    LEA rdx, [r15+5Ch]
    CMP eax, 2Ch
    JZ loc_4442C0
loc_443ED2:
    CMP eax, 11h
    JNZ loc_443DDA
loc_443EDB:
    MOV eax, [rdx+8]
    BSWAP eax
    CMP eax, [r15+20h]
    JNZ loc_443DDA
loc_443EEA:
    MOV eax, [rdx+0Ch]
    BSWAP eax
    CMP eax, [rsp+198h+var_180]
    JNZ loc_443DDA
loc_443EF9:
    CMP r9b, 3
    MOV dword ptr [rsp+198h+var_198], ecx
    JZ loc_444B60
loc_443F06:
    MOVZX ebx, bpl
    SHL ebx, 8
    ADD ebx, 1
loc_443F10:
    MOV eax, [rsp+198h+var_150]
    TEST eax, eax
    JZ loc_443F32
loc_443F18:
    MOV edx, [r14]
    MOV rsi, [rsp+198h+s2]
    MOV rdi, [rsp+198h+s1]
    CALL _memcmp
    TEST eax, eax
    JZ loc_443FB6
loc_443F32:
    MOV rdi, [rsp+198h+s2]
    CALL sub_4EDD90
    TEST byte ptr cs:dword_74363C, 8
    MOV rbp, rax
    JNZ loc_4443A0
loc_443F4C:
    CMP word ptr [r14+4], 2
    JNZ loc_444250
loc_443F58:
    MOV r9d, [r14+8]
    TEST r9d, r9d
    JNZ loc_444250
loc_443F65:
    MOV rdx, rax
    XOR r13d, r13d
loc_443F6B:
    MOV edi, 1
    MOV rcx, rbp
    MOV esi, offset unk_5125A0
    XOR eax, eax
    CALL ___printf_chk
    MOV rdi, r13
    CALL _free
loc_443F87:
    MOV rdi, rbp
    CALL _free
    TEST byte ptr cs:dword_74363C, 40h
    JNZ loc_444300
loc_443F9C:
    MOV edx, [r14]
    MOV rsi, [rsp+198h+s2]
    MOV rdi, [rsp+198h+s1]
    CALL _memcpy
    MOV [rsp+198h+var_150], 1
loc_443FB6:
    MOV ecx, dword ptr [rsp+198h+var_198]
    SUB ecx, dword ptr [rsp+198h+var_178]
    MOV edx, 10624DD3h
    MOV esi, offset aU03uMs
    MOV edi, 1
    MOV eax, ecx
    MUL edx
    SHR edx, 6
    IMUL eax, edx, 3E8h
    SUB ecx, eax
    XOR eax, eax
    CALL ___printf_chk
    CMP word ptr [r14+4], 2
    JZ loc_4442D0
loc_443FEE:
    CMP ebx, 0FFFFFFFFh
    JZ loc_443E1E
loc_443FF7:
    LEA edx, [rbx-1]
    CMP edx, 9
    JZ loc_444657
loc_444003:
    JG loc_444270
loc_444009:
    CMP edx, 4
    JZ loc_444638
loc_444012:
    JG loc_4443C0
loc_444018:
    CMP edx, 1
    JZ loc_4445CC
loc_444021:
    JLE loc_444550
loc_444027:
    CMP edx, 2
    JZ loc_444593
loc_444030:
    CMP edx, 3
    JNZ loc_444578
loc_444039:
    CMP byte ptr [r15+34h], 1
    MOV [rsp+198h+var_13C], 1
    JA loc_443E1E
loc_44404C:
    MOV esi, offset asc_5125CD
    XOR eax, eax
    MOV edi, 1
    CALL ___printf_chk
    MOV esi, [rsp+198h+var_180]
    CMP [rsp+198h+var_15C], esi
    MOV [rsp+198h+var_13C], 1
    JNZ loc_443E2C
loc_444073:
    NOP dword ptr [rax+rax+00h]
loc_444078:
    MOV edi, 0Ah
    CALL sub_40B110
    MOV edx, [rsp+198h+var_13C]
    TEST edx, edx
    JNZ loc_4440AB
loc_44408A:
    MOV eax, [rsp+198h+var_14C]
    TEST eax, eax
    JZ loc_444098
loc_444092:
    CMP [rsp+198h+var_130], eax
    JLE loc_4440AB
loc_444098:
    ADD [rsp+198h+var_17C], 1
    MOV eax, [rsp+198h+var_17C]
    CMP [rsp+198h+var_134], eax
    JGE loc_443BB0
loc_4440AB:
    XOR eax, eax
    MOV rdi, [rsp+198h+var_40]
    XOR rdi, fs:28h
    JNZ loc_444B8C
loc_4440C4:
    ADD rsp, 168h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4440E0:
    LEA rax, [r15+34h]
    MOV edi, r9d
    MOV [rsp+198h+var_160], r9d
    MOV [rsp+198h+var_170], rax
    CALL sub_4437E0
    MOV rbx, rax
    MOV rax, [rsp+198h+var_188]
    LEA rdx, [rsp+198h+buf]
    MOV ecx, 40h
    MOV edi, 0Ah
    LEA rsi, [rax+8]
    CALL _inet_ntop
    LEA rdx, [rsp+198h+var_C8]
    LEA rsi, [r14+0Ch]
    MOV ecx, 40h
    MOV edi, 0Ah
    MOV [rsp+198h+var_170], rax
    CALL _inet_ntop
    MOVZX r8d, bpl
    MOV rcx, rax
    MOV edx, r12d
    PUSH r8
    PUSH rbx
    XOR eax, eax
    MOV r9d, [rsp+1A8h+var_160]
    MOV r8, [rsp+1A8h+var_170]
    MOV esi, offset aDBytesFromSToS
    MOV edi, 1
    CALL ___printf_chk
    LEA eax, [r12-8]
    POP r10
    TEST eax, eax
    POP r11
    JLE loc_44420D
loc_444172:
    LEA rbp, [r15+34h]
    MOV ebx, 1
    MOV r12d, eax
    MOV dword ptr [rsp+198h+var_170], r13d
    JMP loc_4441BA
loc_444188:
    TEST r13b, 3
    JZ loc_4441DE
loc_44418E:
    MOVZX edx, byte ptr [rbp+0]
    XOR eax, eax
    MOV esi, offset a02x_1
    MOV edi, 1
    CALL ___printf_chk
    MOV ecx, r13d
    AND ecx, 0Fh
    CMP ecx, 0Fh
    JZ loc_4441F0
loc_4441AE:
    CMP r12d, ebx
    JLE loc_444208
loc_4441B3:
    ADD ebx, 1
    ADD rbp, 1
loc_4441BA:
    LEA r13d, [rbx-1]
    TEST r13b, 0Fh
    JNZ loc_444188
loc_4441C4:
    XOR eax, eax
    MOV edx, r13d
    MOV esi, offset a04x_0
    MOV edi, 1
    CALL ___printf_chk
    TEST r13b, 3
    JNZ loc_44418E
loc_4441DE:
    MOV edi, 20h
    CALL sub_40B110
    JMP loc_44418E
loc_4441F0:
    CMP r12d, ebx
    JLE loc_444208
loc_4441F5:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_4441B3
loc_444208:
    MOV r13d, dword ptr [rsp+198h+var_170]
loc_44420D:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_443DE7
loc_444220:
    MOV rax, [r15+10h]
    MOVZX esi, word ptr [rsp+198h+var_180]
    ADD si, [r15+24h]
    ROR si, 8
    LEA rdi, [rax+4]
    MOVZX esi, si
    CALL sub_4EDA00
    MOV rbp, [r15]
    JMP loc_443CCA
loc_444250:
    MOV rdi, [rsp+198h+s2]
    CALL sub_4EDD60
    TEST rax, rax
    MOV rdx, rax
    MOV r13, rax
    CMOVZ rdx, rbp
    JMP loc_443F6B
loc_444270:
    CMP edx, 0Eh
    JZ loc_4445E7
loc_444279:
    JLE loc_4443F0
loc_44427F:
    CMP edx, 100h
    JZ loc_4443D2
loc_44428B:
    JLE loc_44456F
loc_444291:
    CMP edx, 300h
    JZ loc_4445CC
loc_44429D:
    CMP edx, 400h
    JNZ loc_444578
loc_4442A9:
    MOV [rsp+198h+var_13C], 1
    JMP loc_443E1E
loc_4442C0:
    MOVZX eax, byte ptr [r15+5Ch]
    LEA rdx, [r15+64h]
    JMP loc_443ED2
loc_4442D0:
    TEST byte ptr [rsp+198h+var_144], 4
    JZ loc_443FEE
loc_4442DB:
    MOVZX edx, byte ptr [r15+34h]
    MOV esi, offset aD_1
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_443FEE
loc_444300:
    MOV r13, [rsp+198h+var_188]
    MOV rdi, r13
    CALL sub_4EDD90
    CMP word ptr [r13+0], 0Ah
    MOV rbp, rax
    LEA edx, [r12-28h]
    JZ loc_44432E
loc_44431D:
    MOVZX eax, byte ptr [r15+2Ch]
    MOV edx, dword ptr [rsp+198h+var_170]
    AND eax, 0Fh
    SHL eax, 2
    SUB edx, eax
loc_44432E:
    MOV rcx, rbp
    MOV esi, offset aDBytesToS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rdi, rbp
    CALL _free
    JMP loc_443F9C
loc_444350:
    MOVZX eax, byte ptr [r15+2Ch]
    AND eax, 0Fh
    SHL eax, 2
    LEA edx, [rax+7]
    CMP edx, r12d
    JL loc_444420
loc_444367:
    TEST byte ptr cs:dword_74363C, 40h
    JZ loc_443DE7
loc_444374:
    MOV edi, [r14+8]
    CALL _inet_ntoa
    MOV edx, r12d
    MOV rcx, rax
    MOV esi, offset aPacketTooShort
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_443DE7
loc_4443A0:
    MOV rdx, rax
    MOV esi, offset aS_12
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_443F87
loc_4443C0:
    CMP edx, 7
    JG loc_44461D
loc_4443C9:
    CMP edx, 6
    JGE loc_444602
loc_4443D2:
    MOV esi, offset off_5125E3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_4443F0:
    CMP edx, 0Ch
    JG loc_444657
loc_4443F9:
    CMP edx, 0Bh
    JGE loc_4445B1
loc_444402:
    MOV esi, offset unk_5125EB
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_444420:
    MOV ebx, r12d
    SUB ebx, eax
    CDQE 
    ADD rax, rbp
    MOVZX edi, byte ptr [rax+1]
    MOVZX esi, byte ptr [rax]
    MOV dword ptr [r15+1Ch], 0
    CMP dil, 4
    JZ loc_444672
loc_444443:
    CMP sil, 0Bh
    JNZ loc_444681
loc_44444D:
    TEST dil, dil
    JNZ loc_444681
loc_444456:
    MOVZX edx, byte ptr [rax+8]
    MOV r9d, cs:dword_74363C
    LEA r8, [rax+8]
    AND edx, 0Fh
    SHL edx, 2
    TEST r9b, 2
    JZ loc_4446A0
loc_444475:
    TEST sil, sil
    JNZ loc_44448F
loc_44447A:
    MOVZX r10d, word ptr [r15+20h]
    ROR r10w, 8
    CMP [rax+4], r10w
    JZ loc_444726
loc_44448F:
    LEA r10d, [rdx+7]
    CMP ebx, r10d
    JLE loc_4444A8
loc_444498:
    CMP byte ptr [rax+11h], 1
    JZ loc_4446FA
loc_4444A2:
    NOP word ptr [rax+rax+00h]
loc_4444A8:
    AND r9d, 40h
    JZ loc_443DE7
loc_4444B2:
    MOVZX ecx, byte ptr [rax+1]
    MOVZX r9d, sil
    LEA r12, [rax+8]
    MOV edi, r9d
    MOV [rsp+198h+var_160], r9d
    MOV [rsp+198h+var_12C], ecx
    CALL sub_4437E0
    MOV edi, [rbp+10h]
    MOV [rsp+198h+var_170], rax
    CALL _inet_ntoa
    MOV edi, [r14+8]
    MOV rbp, rax
    CALL _inet_ntoa
    MOV ecx, [rsp+198h+var_12C]
    MOV r8, rbp
    MOV esi, offset aDBytesFromSToS
    MOV edi, 1
    PUSH rcx
    MOV rdx, [rsp+1A0h+var_170]
    MOV rcx, rax
    XOR eax, eax
    PUSH rdx
    MOV r9d, [rsp+1A8h+var_160]
    MOV edx, ebx
    CALL ___printf_chk
    CMP ebx, 4
    POP rbp
    POP rax
    JLE loc_443DE7
loc_44451C:
    MOV ebp, 4
    NOP dword ptr [rax+00000000h]
loc_444528:
    ADD r12, 4
    MOV ecx, [r12-4]
    MOV edx, ebp
    XOR eax, eax
    MOV esi, offset a2dX88x
    MOV edi, 1
    ADD ebp, 4
    CALL ___printf_chk
    CMP ebx, ebp
    JG loc_444528
loc_44454B:
    JMP loc_443DE7
loc_444550:
    TEST edx, edx
    JNZ loc_444578
loc_444554:
    MOV esi, offset aN_3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_44456F:
    CMP edx, 0Fh
    JZ loc_444402
loc_444578:
    MOV esi, offset aD_2
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_444593:
    MOV esi, offset off_5125D8
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+198h+var_13C], 1
    JMP loc_443E1E
loc_4445B1:
    MOV esi, offset unk_5125FB
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_4445CC:
    MOV esi, offset asc_5125D4
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_4445E7:
    MOV esi, offset unk_5125EF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_444602:
    MOV esi, offset unk_5125F3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_44461D:
    MOV esi, offset unk_5125F7
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_444638:
    MOV edx, [r15+1Ch]
    MOV esi, 5125DCh
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_444657:
    MOV esi, offset off_5125E7
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+198h+var_14C], 1
    JMP loc_443E1E
loc_444672:
    MOVZX edx, word ptr [rax+6]
    ROR dx, 8
    MOVZX edx, dx
    MOV [r15+1Ch], edx
loc_444681:
    CMP sil, 3
    JZ loc_444456
loc_44468B:
    TEST sil, sil
    MOV r9d, cs:dword_74363C
    JNZ loc_4444A8
loc_44469B:
    JMP loc_444456
loc_4446A0:
    LEA r10d, [rdx+0Bh]
    CMP ebx, r10d
    JLE loc_4444A8
loc_4446AD:
    CMP byte ptr [rax+11h], 11h
    JNZ loc_4444A8
loc_4446B7:
    MOVZX r10d, word ptr [rsp+198h+var_180]
    MOVSXD rdx, edx
    ADD r10w, [r15+24h]
    ROR r10w, 8
    CMP [r8+rdx+2], r10w
    JNZ loc_4444A8
loc_4446D6:
    CMP sil, 0Bh
    MOV dword ptr [rsp+198h+var_198], ecx
    JZ loc_444B60
loc_4446E3:
    LEA ebx, [rdi+1]
    JMP loc_443F10
loc_4446EB:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_444098
loc_4446FA:
    MOVSXD rdx, edx
    ADD r8, rdx
    MOVZX edx, word ptr [r15+20h]
    ROR dx, 8
    CMP [r8+4], dx
    JNZ loc_4444A8
loc_444714:
    MOVZX edx, [rsp+198h+var_158]
    CMP [r8+6], dx
    JNZ loc_4444A8
loc_444724:
    JMP loc_4446D6
loc_444726:
    MOVZX r11d, [rsp+198h+var_156]
    CMP [rax+6], r11w
    JNZ loc_44448F
loc_444737:
    MOV dword ptr [rsp+198h+var_198], ecx
    MOV ebx, 4
    JMP loc_443F10
loc_444744:
    MOV rax, [r15]
    MOV r12d, [rsp+198h+var_144]
    ADD rax, 30h
    AND r12d, 200h
    MOV [r15+8], rax
    JZ loc_443AE0
loc_444761:
    MOV rsi, [rsp+198h+var_118]
    MOV edi, 4
    CALL sub_4ED870
    TEST r14d, r14d
    JZ loc_443AE9
loc_44477C:
    MOV rdi, [rsp+198h+var_120]
    XOR esi, esi
    MOVZX edx, bx
    CALL sub_4EDA30
    CMP bx, 2
    MOV r12, rax
    LEA r13, [rax+4]
    JZ loc_444A7C
loc_44479C:
    MOV edx, [r12]
    MOV rsi, r13
    MOV edi, 4
    CALL sub_40B540
    MOV rdi, r12
    CALL _free
    CALL _getgid
    MOV edi, eax
    CALL sub_40B360
    CALL _getuid
    MOV edi, eax
    CALL sub_40B380
    MOV rax, [r15+10h]
    LEA rdi, [rax+4]
    CALL sub_4EDD90
    MOV rdx, [rbp+0]
    MOV rcx, rax
    MOV esi, offset aTracerouteToSS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rdx, [rsp+198h+var_120]
    MOV esi, offset aFromS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_443B30
loc_44480D:
    XOR edx, edx
    MOV esi, 2
    JMP loc_443A56
loc_444819:
    MOV rdi, [rsp+198h+var_110]
    MOV edx, 0FFh
    XOR esi, esi
    CALL sub_4ECF10
    MOV r12d, eax
    JMP loc_44391D
loc_444835:
    TEST byte ptr [rsp+198h+var_144], 2
    JZ loc_444A58
loc_444840:
    OR ah, 80h
    MOV [r15+20h], eax
    MOV rax, [r15]
    MOV byte ptr [rax+14h], 8
    MOV rdx, [r15]
    MOVZX eax, word ptr [r15+20h]
    ROR ax, 8
    MOV [rdx+18h], ax
    MOV rax, [r15]
    ADD rax, 1Ch
    MOV [r15+8], rax
    JMP loc_443ACE
loc_44486E:
    MOV rdi, [rsp+198h+var_100]
    CALL sub_4ED0B0
    MOV [r13+24h], ax
    JMP loc_443941
loc_444885:
    MOV rdi, [rsp+198h+var_108]
    MOV edx, 0FFh
    MOV esi, 1
    CALL sub_4ECF10
    MOV [rsp+198h+var_134], eax
    JMP loc_443933
loc_4448A5:
    MOV rdi, [rsp+198h+var_E8]
    MOV edx, 36EE80h
    XOR esi, esi
    CALL sub_4ECF10
    MOV [rsp+198h+var_148], eax
    JMP loc_44398D
loc_4448C2:
    MOV rdi, [rsp+198h+var_F0]
    MOV edx, 15180h
    MOV esi, 1
    CALL sub_4ECF10
    MOV [r13+28h], eax
    JMP loc_443977
loc_4448E2:
    CALL _getuid
    TEST eax, eax
    JZ loc_443969
loc_4448EF:
    MOV edi, offset aYouMustBeRoot
    XOR eax, eax
    CALL sub_40A1E0
loc_444900:
    MOV rdi, [rsp+198h+var_F8]
    MOV edx, 7FFFFFFFh
    MOV esi, 1
    CALL sub_4ECF10
    MOV [rsp+198h+var_138], eax
    JMP loc_443957
loc_444920:
    MOV rdi, [rbp+8]
    MOV dword ptr [r13+18h], 48h
    TEST rdi, rdi
    JZ loc_444944
loc_444931:
    MOV edx, 8000h
    MOV esi, 48h
    CALL sub_4ECBE0
    MOV [r13+18h], eax
loc_444944:
    CALL sub_4EC940
    MOV edx, 3Ah
    MOV esi, 3
loc_444953:
    MOV edi, 0Ah
    CALL sub_40B520
    MOV esi, 3
    MOV edi, eax
    CALL sub_40AF80
    MOV edx, 31h
    MOV esi, 29h
    MOV edi, 3
    CALL sub_4ED690
    MOV edx, 2
    MOV esi, 29h
    MOV edi, 3
    CALL sub_4ED690
    MOV r13d, [rsp+198h+var_144]
    AND r13d, 10h
    JZ loc_4449AB
loc_44499C:
    MOV esi, 5
    MOV edi, 3
    CALL sub_4ED730
loc_4449AB:
    MOV ecx, 2
    MOV edx, 7
    MOV esi, 0FFh
    MOV edi, 3
    CALL sub_4ED670
    TEST eax, eax
    JNZ loc_444B6A
loc_4449CC:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40B520
    MOV esi, 4
    MOV edi, eax
    CALL sub_40AF80
    JMP loc_443A6C
loc_4449EE:
    MOV edx, [rsp+198h+var_134]
    MOV rdi, [rsp+198h+var_E0]
    MOV esi, 1
    CALL sub_4ECF10
    MOV [rsp+198h+var_17C], eax
    JMP loc_4439A3
loc_444A0D:
    MOV esi, 5
    MOV edi, 4
    CALL sub_4ED730
    JMP loc_443AA5
loc_444A21:
    XOR esi, esi
    MOV ecx, r12d
    MOV edx, 1
    MOV edi, 4
    CALL sub_4ED670
    TEST eax, eax
    JZ loc_443A9C
loc_444A3D:
    MOV edx, r12d
    MOV esi, offset off_512520
    MOV edi, 512524h
    XOR eax, eax
    CALL sub_409DA0
loc_444A58:
    MOV rax, [r15]
    ADD rax, 1Ch
    MOV [r15+8], rax
    JMP loc_443ACE
loc_444A68:
    MOV esi, 5
    MOV edi, 3
    CALL sub_4ED730
    JMP loc_443A41
loc_444A7C:
    MOV r8d, [rax]
    XOR esi, esi
    MOV rcx, r13
    MOV edx, 20h
    MOV edi, 4
    CALL _setsockopt
    TEST eax, eax
    JZ loc_44479C
loc_444A9B:
    MOV edi, offset aCanTSetMultica
    XOR eax, eax
    CALL sub_40A1E0
loc_444AB0:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40B520
    TEST r12d, r12d
    MOV ebx, eax
    JNZ loc_444BC7
loc_444ACC:
    MOV rax, [r15+10h]
    MOV esi, 104h
    LEA rdi, [rax+4]
    CALL sub_4EDA00
    MOV rax, [r15+10h]
    MOV edi, ebx
    MOV edx, [rax]
    LEA rsi, [rax+4]
    CALL sub_4ED900
    MOVZX eax, word ptr [r15+24h]
    ROR ax, 8
    MOVZX esi, ax
    MOV rax, [r15+10h]
    LEA rdi, [rax+4]
    CALL sub_4EDA00
    MOV edi, ebx
    CALL sub_4ED8E0
    TEST rax, rax
    MOV r12, rax
    JZ loc_444BBB
loc_444B1B:
    MOV edi, ebx
    LEA rbx, [r12+4]
    CALL _close
    XOR esi, esi
    MOV rdi, rbx
    CALL sub_4EDA00
    MOV edx, [r12]
    MOV rsi, rbx
    MOV edi, 4
    CALL sub_40B540
    MOV edx, [r12]
    MOV rsi, rbx
    MOV edi, 3
    CALL sub_40B540
    MOV rdi, r12
    CALL _free
    JMP loc_443AF3
loc_444B60:
    MOV ebx, 0FFFFFFFFh
    JMP loc_443F10
loc_444B6A:
    MOV esi, offset aIpv6Checksum
    MOV edi, offset aSetsockoptS
    XOR eax, eax
    CALL sub_409DA0
loc_444B7B:
    MOV esi, offset aSoSndbuf
    MOV edi, offset aSetsockoptS
    XOR eax, eax
    CALL sub_409DA0
loc_444B8C:
    CALL ___stack_chk_fail
loc_444B91:
    MOV edx, [rsp+198h+var_17C]
    MOV esi, offset aTtl
    MOV edi, 512524h
    XOR eax, eax
    CALL sub_409DA0
loc_444BA6:
    MOV edx, [rsp+198h+var_17C]
    MOV esi, offset aUnicastHops
    MOV edi, 512524h
    XOR eax, eax
    CALL sub_409DA0
loc_444BBB:
    MOV edi, offset aCanTGetProbeAd
    XOR eax, eax
    CALL sub_40A1E0
loc_444BC7:
    MOV rsi, [rsp+198h+var_118]
    MOV edi, eax
    CALL sub_4ED870
    JMP loc_444ACC
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'MemoryAllocation'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 1, 'inferred_algorithm': 'Dynamic Memory Management (Heap Allocation)', 'inferred_category': 'Memory Management'}

##### T 60 - common_traceroute_main
```assembly
loc_455CE2:
    XOR r13d, r13d
loc_455CE5:
    TEST bh, 4
    MOV [rsp+1A8h+var_138], 1Eh
    JNZ loc_456D13
loc_455CF6:
    TEST bh, 8
    JNZ loc_456CD0
loc_455CFF:
    TEST bh, 10h
    MOV [rsp+1A8h+var_13C], 3
    JNZ loc_456CF3
loc_455D10:
    MOV eax, ebx
    AND eax, 2000h
    MOV dword ptr [rsp+1A8h+var_198], eax
    JNZ loc_456CB5
loc_455D21:
    TEST bh, 40h
    JNZ loc_456EA1
loc_455D2A:
    TEST bh, 80h
    MOV [rsp+1A8h+var_14C], 0
    JNZ loc_456E84
loc_455D3B:
    TEST ebx, 10000h
    MOV [rsp+1A8h+var_170], 1
    JNZ loc_456E65
loc_455D4F:
    MOV edx, ebx
    MOVZX esi, word ptr [r14+24h]
    MOV eax, 2
    AND edx, 20000h
    MOV rdi, [r12]
    CMOVNZ edx, eax
    TEST ebx, 40000h
    MOV eax, 0Ah
    CMOVNZ edx, eax
    CALL sub_53AFE0
    MOV [r14+10h], rax
    MOVZX ebp, word ptr [rax+4]
    CMP bp, 0Ah
    JZ loc_456D98
loc_455D8D:
    MOV rdi, [r12+8]
    MOV dword ptr [r14+18h], 2Eh
    TEST rdi, rdi
    JZ loc_455DB2
loc_455D9F:
    MOV edx, 8000h
    MOV esi, 2Eh
    CALL sub_539360
    MOV [r14+18h], eax
loc_455DB2:
    CALL sub_538F00
    MOV edx, 1
    MOV esi, 3
    MOV edi, 2
    CALL sub_40CD40
    MOV r14d, ebx
    MOV esi, 3
    MOV edi, eax
    CALL sub_40C630
    AND r14d, 10h
    JNZ loc_456ED1
loc_455DE4:
    TEST bl, 2
    JZ loc_456C62
loc_455DED:
    MOV edx, 1
    MOV esi, 3
loc_455DF7:
    MOV edi, 2
    CALL sub_40CD40
    MOV esi, 4
    MOV edi, eax
    CALL sub_40C630
loc_455E0D:
    MOV r15, cs:qword_78D1F0
    MOV esi, 7
    MOV edi, 4
    MOV edx, [r15+18h]
    CALL sub_53AA50
    TEST eax, eax
    JNZ loc_456FC9
loc_455E2F:
    MOV r9d, [rsp+1A8h+var_19C]
    TEST r9d, r9d
    JNZ loc_456D63
loc_455E3D:
    TEST r14d, r14d
    JNZ loc_456D4F
loc_455E46:
    MOVSXD rdi, dword ptr [r15+18h]
    CALL sub_40C260
    MOV [r15], rax
    CALL _getpid
    CMP bp, 2
    MOV [r15+20h], eax
    JZ loc_456C7E
loc_455E65:
    CMP bp, 0Ah
    JZ loc_456B90
loc_455E6F:
    MOV r13d, ebx
    AND r13d, 200h
    JNZ loc_456BAB
loc_455E7F:
    MOV r8d, dword ptr [rsp+1A8h+var_198]
    TEST r8d, r8d
    JNZ loc_456BCB
loc_455E8D:
    CMP bp, 0Ah
    JZ loc_456F10
loc_455E97:
    CALL _getgid
    MOV edi, eax
    CALL sub_40CBE0
    CALL _getuid
    MOV edi, eax
    CALL sub_40CC00
    MOV rax, [r15+10h]
    LEA rdi, [rax+4]
    CALL sub_53B820
    MOV rdx, [r12]
    MOV rcx, rax
    MOV esi, offset aTracerouteToSS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_455ED4:
    MOV ebp, [rsp+1A8h+var_138]
    MOV ecx, [r15+18h]
    MOV esi, offset aDHopsMaxDByteP
    MOV edi, 1
    XOR eax, eax
    MOV edx, ebp
    CALL ___printf_chk
    MOV rdi, [r15+10h]
    MOV eax, [rdi]
    LEA esi, [rax+4]
    CALL sub_40C360
    MOV r14, rax
    MOV rax, [r15+10h]
    MOV edi, [rax]
    CALL sub_40C260
    MOV [rsp+1A8h+s1], rax
    MOV rax, [r15+10h]
    MOV edi, [rax]
    CALL sub_40C260
    MOV edi, [rsp+1A8h+var_170]
    MOV [rsp+1A8h+var_188], rax
    CMP ebp, edi
    JL loc_45645B
loc_455F2C:
    IMUL eax, [rsp+1A8h+var_14C], 3E8h
    AND ebx, 4
    MOV [rsp+1A8h+var_19C], 0
    MOV [rsp+1A8h+var_140], ebx
    MOV [rsp+1A8h+useconds], eax
    MOV eax, [rsp+1A8h+var_13C]
    SUB eax, 1
    MOV [rsp+1A8h+var_134], eax
    NOP word ptr [rax+rax+00h]
loc_455F58:
    MOV edx, [rsp+1A8h+var_170]
    MOV edi, 1
    XOR eax, eax
    MOV esi, offset a2d_0
    CALL ___printf_chk
    MOV edi, [rsp+1A8h+var_13C]
    TEST edi, edi
    JLE loc_456B0C
loc_455F79:
    CALL sub_40C7D0
    MOV eax, [rsp+1A8h+var_19C]
    MOV edi, [rsp+1A8h+var_13C]
    MOV [rsp+1A8h+var_150], 0
    MOV [rsp+1A8h+var_144], 0
    MOV [rsp+1A8h+var_154], 0
    ADD edi, eax
    MOV [rsp+1A8h+var_158], eax
    LEA rax, [r14+4]
    MOV [rsp+1A8h+var_160], edi
    MOV [rsp+1A8h+s2], rax
    NOP dword ptr [rax+00000000h]
loc_455FB8:
    MOV rax, [r15+10h]
    ADD [rsp+1A8h+var_19C], 1
    CMP word ptr [rax+4], 0Ah
    JZ loc_456217
loc_455FCC:
    MOVZX esi, byte ptr [rsp+1A8h+var_19C]
    MOV rax, [r15+8]
    MOVZX ebx, byte ptr [rsp+1A8h+var_170]
    MOV [rax], sil
    MOV rax, [r15+8]
    MOV [rax+1], bl
    TEST byte ptr cs:dword_78D63C, 2
    JZ loc_45602D
loc_455FED:
    MOV rdx, [r15]
    MOVZX eax, word ptr [rsp+1A8h+var_19C]
    XOR ecx, ecx
    ROR ax, 8
    MOV [rdx+1Ah], ax
    MOV rbx, [r15]
    MOV eax, [r15+18h]
    LEA rdi, [rbx+14h]
    MOV [rbx+16h], cx
    LEA esi, [rax-14h]
    CALL sub_52BF40
    MOV [rbx+16h], ax
    MOV rax, [r15]
    CMP word ptr [rax+16h], 0
    JNZ loc_45602D
loc_456024:
    MOV edx, 0FFFFFFFFh
    MOV [rax+16h], dx
loc_45602D:
    MOV rax, [r15+10h]
    MOV rbx, [r15+8]
    MOV ecx, [rsp+1A8h+var_170]
    CMP word ptr [rax+4], 0Ah
    JZ loc_45623B
loc_456044:
    XOR esi, esi
    MOV edx, 2
    MOV edi, 4
    CALL sub_53A9E0
    TEST eax, eax
    JNZ loc_456FDF
loc_45605D:
    TEST byte ptr cs:dword_78D63C, 2
    JZ loc_4565E8
loc_45606A:
    MOV rbp, [r15]
    LEA rbx, [rbp+14h]
loc_456071:
    MOVSXD rax, dword ptr [r15+18h]
    MOV rsi, rbx
    MOV edi, 4
    ADD rbp, rax
    MOV rax, [r15+10h]
    SUB rbp, rbx
    MOVSXD rdx, ebp
    MOV r8d, [rax]
    LEA rcx, [rax+4]
    CALL sub_40CDA0
    CMP ebp, eax
    JZ loc_4560AA
loc_45609A:
    MOV edx, eax
    MOV esi, ebp
    MOV edi, offset aSentDOctetsRet
    XOR eax, eax
    CALL sub_40AC80
loc_4560AA:
    CALL sub_40E3D0
    IMUL r13d, [r15+28h], 3E8h
    MOV [rsp+1A8h+var_180], rax
    MOV ebx, eax
    MOVZX eax, word ptr [rsp+1A8h+var_19C]
    ROR ax, 8
    MOV [rsp+1A8h+var_15C], ax
    MOV [rsp+1A8h+var_15A], ax
    JMP loc_456199
loc_4560E0:
    LEA rdi, [rsp+1A8h+fds]
    MOV edx, r13d
    MOV esi, 1
    CALL sub_536950
    TEST eax, eax
    JLE loc_4561BC
loc_4560FD:
    MOV eax, [r14]
    SUB rsp, 8
    LEA rbp, [r15+2Ch]
    MOV ecx, 40h
    MOV edx, 200h
    MOV edi, 3
    MOV rsi, rbp
    PUSH rax
    MOV r9, [rsp+1B8h+var_188]
    MOV r8, [rsp+1B8h+s2]
    CALL sub_537460
    MOV dword ptr [rsp+1B8h+var_178], eax
    MOV r12, rax
    CALL sub_40E3D0
    MOV edx, 10624DD3h
    MOV [rsp+1B8h+var_198], rax
    MOV ecx, eax
    SUB eax, ebx
    MUL edx
    POP rsi
    POP rdi
    SHR edx, 6
    SUB r13d, edx
    TEST r12d, r12d
    JZ loc_4561BC
loc_456153:
    JS loc_456195
loc_456155:
    CMP word ptr [r14+4], 2
    MOVZX eax, byte ptr [r15+2Ch]
    JZ loc_456740
loc_456166:
    MOVZX r8d, byte ptr [r15+2Dh]
    CMP al, 3
    SETZ sil
    TEST r8b, r8b
    SETZ dl
    TEST sil, dl
    JNZ loc_456270
loc_456180:
    CMP al, 1
    JZ loc_456270
loc_456188:
    TEST byte ptr cs:dword_78D63C, 40h
    JNZ loc_456490
loc_456195:
    MOV ebx, dword ptr [rsp+1A8h+var_198]
loc_456199:
    MOV r8d, 1
    TEST r13d, r13d
    MOV [rsp+1A8h+fds.fd], 3
    MOV [rsp+1A8h+fds.events], r8w
    JNS loc_4560E0
loc_4561BC:
    MOV esi, 55CBC4h
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4561CD:
    MOV esi, [rsp+1A8h+var_160]
    CMP [rsp+1A8h+var_19C], esi
    JZ loc_456428
loc_4561DB:
    CALL sub_40C7D0
    MOV edi, [rsp+1A8h+var_158]
    CMP [rsp+1A8h+var_19C], edi
    JZ loc_455FB8
loc_4561EE:
    MOV esi, [rsp+1A8h+var_14C]
    TEST esi, esi
    JZ loc_455FB8
loc_4561FA:
    MOV edi, [rsp+1A8h+useconds]
    CALL _usleep
    MOV rax, [r15+10h]
    ADD [rsp+1A8h+var_19C], 1
    CMP word ptr [rax+4], 0Ah
    JNZ loc_455FCC
loc_456217:
    MOV edx, [r15+20h]
    MOV rbx, [r15+8]
    MOV ecx, [rsp+1A8h+var_170]
    BSWAP edx
    MOV [rbx], edx
    MOV edx, [rsp+1A8h+var_19C]
    BSWAP edx
    MOV [rbx+4], edx
    CMP word ptr [rax+4], 0Ah
    JNZ loc_456044
loc_45623B:
    MOV edx, 10h
    MOV esi, 29h
    MOV edi, 4
    CALL sub_53A9E0
    TEST eax, eax
    JNZ loc_456FF4
loc_456257:
    TEST byte ptr cs:dword_78D63C, 2
    JZ loc_4565E8
loc_456264:
    MOV rbp, [r15]
    JMP loc_456071
loc_456270:
    MOVZX edx, byte ptr [r15+3Ah]
    LEA rsi, [r15+5Ch]
    CMP edx, 2Ch
    JZ loc_456680
loc_456282:
    CMP edx, 11h
    JNZ loc_456188
loc_45628B:
    MOV edx, [rsi+8]
    BSWAP edx
    CMP edx, [r15+20h]
    JNZ loc_456188
loc_45629A:
    MOV edx, [rsi+0Ch]
    BSWAP edx
    CMP edx, [rsp+1A8h+var_19C]
    JNZ loc_456188
loc_4562A9:
    CMP al, 3
    MOV dword ptr [rsp+1A8h+var_198], ecx
    JZ loc_456FBF
loc_4562B5:
    SHL r8d, 8
    LEA ebx, [r8+1]
loc_4562BD:
    MOV eax, [rsp+1A8h+var_154]
    TEST eax, eax
    JZ loc_4562DF
loc_4562C5:
    MOV edx, [r14]
    MOV rsi, [rsp+1A8h+s2]
    MOV rdi, [rsp+1A8h+s1]
    CALL _memcmp
    TEST eax, eax
    JZ loc_456363
loc_4562DF:
    MOV rdi, [rsp+1A8h+s2]
    CALL sub_53B820
    TEST byte ptr cs:dword_78D63C, 8
    MOV rbp, rax
    JNZ loc_456788
loc_4562F9:
    CMP word ptr [r14+4], 2
    JNZ loc_456610
loc_456305:
    MOV r10d, [r14+8]
    TEST r10d, r10d
    JNZ loc_456610
loc_456312:
    MOV rdx, rax
    XOR r13d, r13d
loc_456318:
    MOV edi, 1
    MOV rcx, rbp
    MOV esi, offset unk_560650
    XOR eax, eax
    CALL ___printf_chk
    MOV rdi, r13
    CALL _free
loc_456334:
    MOV rdi, rbp
    CALL _free
    TEST byte ptr cs:dword_78D63C, 40h
    JNZ loc_4566C0
loc_456349:
    MOV edx, [r14]
    MOV rsi, [rsp+1A8h+s2]
    MOV rdi, [rsp+1A8h+s1]
    CALL _memcpy
    MOV [rsp+1A8h+var_154], 1
loc_456363:
    MOV ecx, dword ptr [rsp+1A8h+var_198]
    SUB ecx, dword ptr [rsp+1A8h+var_180]
    MOV edx, 10624DD3h
    MOV esi, offset aU03uMs
    MOV edi, 1
    MOV eax, ecx
    MUL edx
    SHR edx, 6
    IMUL eax, edx, 3E8h
    SUB ecx, eax
    XOR eax, eax
    CALL ___printf_chk
    CMP word ptr [r14+4], 2
    JZ loc_456690
loc_45639C:
    CMP ebx, 0FFFFFFFFh
    JZ loc_4561CD
loc_4563A5:
    LEA edx, [rbx-1]
    CMP edx, 9
    JZ loc_4569EC
loc_4563B1:
    JG loc_456630
loc_4563B7:
    CMP edx, 4
    JZ loc_456A07
loc_4563C0:
    JG loc_4567A8
loc_4563C6:
    CMP edx, 1
    JZ loc_4569D1
loc_4563CF:
    JLE loc_456994
loc_4563D5:
    CMP edx, 2
    JZ loc_4569B3
loc_4563DE:
    CMP edx, 3
    JNZ loc_456979
loc_4563E7:
    CMP byte ptr [r15+34h], 1
    MOV [rsp+1A8h+var_144], 1
    JA loc_4561CD
loc_4563FA:
    MOV esi, offset asc_56067D
    XOR eax, eax
    MOV edi, 1
    CALL ___printf_chk
    MOV esi, [rsp+1A8h+var_160]
    CMP [rsp+1A8h+var_19C], esi
    MOV [rsp+1A8h+var_144], 1
    JNZ loc_4561DB
loc_456421:
    NOP dword ptr [rax+00000000h]
loc_456428:
    MOV edi, 0Ah
    CALL sub_40C7E0
    MOV edx, [rsp+1A8h+var_144]
    TEST edx, edx
    JNZ loc_45645B
loc_45643A:
    MOV eax, [rsp+1A8h+var_150]
    TEST eax, eax
    JZ loc_456448
loc_456442:
    CMP [rsp+1A8h+var_134], eax
    JLE loc_45645B
loc_456448:
    ADD [rsp+1A8h+var_170], 1
    MOV eax, [rsp+1A8h+var_170]
    CMP [rsp+1A8h+var_138], eax
    JGE loc_455F58
loc_45645B:
    XOR eax, eax
    MOV rdi, [rsp+1A8h+var_40]
    XOR rdi, fs:28h
    JNZ loc_456FDA
loc_456474:
    ADD rsp, 178h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_456490:
    MOV rdx, [r15+10h]
    LEA rdi, [r15+34h]
    MOVZX ebx, r8b
    MOVZX r9d, al
    MOV [rsp+1A8h+var_178], rdi
    CMP word ptr [rdx+4], 0Ah
    JZ loc_456710
loc_4564B0:
    CMP al, 12h
    MOV ebp, offset aOutOfRange
    JA loc_4564C4
loc_4564B9:
    MOVSXD rax, r9d
    MOV rbp, ds:off_547B20[rax*8]
loc_4564C4:
    MOV rax, [rsp+1A8h+var_188]
    LEA rdx, [rsp+1A8h+buf]
    MOV ecx, 40h
    MOV edi, 0Ah
    MOV [rsp+1A8h+var_16C], r9d
    LEA rsi, [rax+8]
    CALL _inet_ntop
    LEA rdx, [rsp+1A8h+var_C8]
    LEA rsi, [r14+0Ch]
    MOV ecx, 40h
    MOV edi, 0Ah
    MOV [rsp+1A8h+var_178], rax
    CALL _inet_ntop
    PUSH rbx
    PUSH rbp
    MOV rcx, rax
    MOV r9d, [rsp+1B8h+var_16C]
    MOV r8, [rsp+1B8h+var_178]
    XOR eax, eax
    MOV edx, r12d
    MOV esi, offset aDBytesFromSToS
    MOV edi, 1
    CALL ___printf_chk
    LEA eax, [r12-8]
    POP r11
    TEST eax, eax
    POP rbx
    JLE loc_4565D5
loc_45653C:
    LEA rbp, [r15+34h]
    MOV ebx, 1
    MOV r12d, eax
    MOV dword ptr [rsp+1A8h+var_178], r13d
    JMP loc_456582
loc_456550:
    TEST r13b, 3
    JZ loc_4565A6
loc_456556:
    MOVZX edx, byte ptr [rbp+0]
    XOR eax, eax
    MOV esi, offset a02x_1
    MOV edi, 1
    CALL ___printf_chk
    MOV ecx, r13d
    AND ecx, 0Fh
    CMP ecx, 0Fh
    JZ loc_4565B8
loc_456576:
    CMP r12d, ebx
    JLE loc_4565D0
loc_45657B:
    ADD ebx, 1
    ADD rbp, 1
loc_456582:
    LEA r13d, [rbx-1]
    TEST r13b, 0Fh
    JNZ loc_456550
loc_45658C:
    XOR eax, eax
    MOV edx, r13d
    MOV esi, offset a04x_0
    MOV edi, 1
    CALL ___printf_chk
    TEST r13b, 3
    JNZ loc_456556
loc_4565A6:
    MOV edi, 20h
    CALL sub_40C7E0
    JMP loc_456556
loc_4565B8:
    CMP r12d, ebx
    JLE loc_4565D0
loc_4565BD:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_45657B
loc_4565D0:
    MOV r13d, dword ptr [rsp+1A8h+var_178]
loc_4565D5:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_456195
loc_4565E8:
    MOV rax, [r15+10h]
    MOVZX esi, word ptr [rsp+1A8h+var_19C]
    ADD si, [r15+24h]
    ROR si, 8
    LEA rdi, [rax+4]
    MOVZX esi, si
    CALL sub_53AFB0
    MOV rbp, [r15]
    JMP loc_456071
loc_456610:
    MOV rdi, [rsp+1A8h+s2]
    CALL sub_53B630
    TEST rax, rax
    MOV rdx, rax
    MOV r13, rax
    CMOVZ rdx, rbp
    JMP loc_456318
loc_456630:
    CMP edx, 0Eh
    JZ loc_456A41
loc_456639:
    JLE loc_4567D8
loc_45663F:
    CMP edx, 100h
    JZ loc_4567BA
loc_45664B:
    JLE loc_456970
loc_456651:
    CMP edx, 300h
    JZ loc_4569D1
loc_45665D:
    CMP edx, 400h
    JNZ loc_456979
loc_456669:
    MOV [rsp+1A8h+var_144], 1
    JMP loc_4561CD
loc_456680:
    MOVZX edx, byte ptr [r15+5Ch]
    LEA rsi, [r15+64h]
    JMP loc_456282
loc_456690:
    MOV r9d, [rsp+1A8h+var_140]
    TEST r9d, r9d
    JZ loc_45639C
loc_45669E:
    MOVZX edx, byte ptr [r15+34h]
    MOV esi, offset aD_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_45639C
loc_4566C0:
    MOV r13, [rsp+1A8h+var_188]
    MOV rdi, r13
    CALL sub_53B820
    CMP word ptr [r13+0], 0Ah
    MOV rbp, rax
    LEA edx, [r12-28h]
    JZ loc_4566EE
loc_4566DD:
    MOVZX eax, byte ptr [r15+2Ch]
    MOV edx, dword ptr [rsp+1A8h+var_178]
    AND eax, 0Fh
    SHL eax, 2
    SUB edx, eax
loc_4566EE:
    MOV rcx, rbp
    MOV esi, offset aDBytesToS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rdi, rbp
    CALL _free
    JMP loc_456349
loc_456710:
    CMP al, 4
    JBE loc_456960
loc_456718:
    LEA edx, [rax-80h]
    MOV ebp, offset aOutOfRange
    CMP dl, 9
    JA loc_4564C4
loc_456729:
    AND eax, 3Fh
    MOV rbp, ds:off_547C00[rax*8]
    JMP loc_4564C4
loc_456740:
    AND eax, 0Fh
    SHL eax, 2
    LEA edx, [rax+7]
    CMP edx, r12d
    JL loc_456808
loc_456752:
    TEST byte ptr cs:dword_78D63C, 40h
    JZ loc_456195
loc_45675F:
    MOV edi, [r14+8]
    CALL _inet_ntoa
    MOV edx, r12d
    MOV rcx, rax
    MOV esi, offset aPacketTooShort
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_456195
loc_456788:
    MOV rdx, rax
    MOV esi, offset aS_12
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_456334
loc_4567A8:
    CMP edx, 7
    JG loc_456A77
loc_4567B1:
    CMP edx, 6
    JGE loc_456A5C
loc_4567BA:
    MOV esi, offset off_560693
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_4567D8:
    CMP edx, 0Ch
    JG loc_4569EC
loc_4567E1:
    CMP edx, 0Bh
    JGE loc_456A26
loc_4567EA:
    MOV esi, offset unk_56069B
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456808:
    MOV ebx, r12d
    SUB ebx, eax
    CDQE 
    ADD rax, rbp
    MOVZX edi, byte ptr [rax+1]
    MOVZX esi, byte ptr [rax]
    MOV dword ptr [r15+1Ch], 0
    CMP dil, 4
    JZ loc_456A92
loc_45682B:
    CMP sil, 0Bh
    JNZ loc_456AA1
loc_456835:
    TEST dil, dil
    JNZ loc_456AA1
loc_45683E:
    MOVZX edx, byte ptr [rax+8]
    MOV r9d, cs:dword_78D63C
    LEA r8, [rax+8]
    AND edx, 0Fh
    SHL edx, 2
    TEST r9b, 2
    JZ loc_456AC0
loc_45685D:
    TEST sil, sil
    JNZ loc_456877
loc_456862:
    MOVZX r10d, word ptr [r15+20h]
    ROR r10w, 8
    CMP [rax+4], r10w
    JZ loc_456B71
loc_456877:
    LEA r10d, [rdx+7]
    CMP ebx, r10d
    JLE loc_456890
loc_456880:
    CMP byte ptr [rax+11h], 1
    JZ loc_456B45
loc_45688A:
    NOP word ptr [rax+rax+00h]
loc_456890:
    AND r9d, 40h
    JZ loc_456195
loc_45689A:
    LEA r12, [rax+8]
    MOVZX ecx, byte ptr [rax+1]
    MOV rax, [r15+10h]
    MOVZX r9d, sil
    CMP word ptr [rax+4], 0Ah
    JZ loc_456B1B
loc_4568B5:
    CMP sil, 12h
    MOV edx, offset aOutOfRange
    JA loc_4568CB
loc_4568C0:
    MOVSXD rax, r9d
    MOV rdx, ds:off_547B20[rax*8]
loc_4568CB:
    MOV edi, [rbp+10h]
    MOV [rsp+1A8h+var_130], rdx
    MOV [rsp+1A8h+var_16C], r9d
    MOV dword ptr [rsp+1A8h+var_178], ecx
    CALL _inet_ntoa
    MOV edi, [r14+8]
    MOV rbp, rax
    CALL _inet_ntoa
    MOV ecx, dword ptr [rsp+1A8h+var_178]
    MOV r8, rbp
    MOV esi, offset aDBytesFromSToS
    MOV edi, 1
    PUSH rcx
    MOV rdx, [rsp+1B0h+var_130]
    MOV rcx, rax
    XOR eax, eax
    PUSH rdx
    MOV r9d, [rsp+1B8h+var_16C]
    MOV edx, ebx
    CALL ___printf_chk
    CMP ebx, 4
    POP rbp
    POP rax
    JLE loc_456195
loc_456924:
    MOV ebp, 4
    NOP dword ptr [rax+00000000h]
loc_456930:
    ADD r12, 4
    MOV ecx, [r12-4]
    MOV edx, ebp
    XOR eax, eax
    MOV esi, offset a2dX88x
    MOV edi, 1
    ADD ebp, 4
    CALL ___printf_chk
    CMP ebx, ebp
    JG loc_456930
loc_456953:
    JMP loc_456195
loc_456960:
    MOVSXD rax, r9d
    MOV rbp, ds:off_547BC0[rax*8]
    JMP loc_4564C4
loc_456970:
    CMP edx, 0Fh
    JZ loc_4567EA
loc_456979:
    MOV esi, offset aD_1
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456994:
    TEST edx, edx
    JNZ loc_456979
loc_456998:
    MOV esi, offset off_560680
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_4569B3:
    MOV esi, offset unk_560688
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+1A8h+var_144], 1
    JMP loc_4561CD
loc_4569D1:
    MOV esi, 560684h
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_4569EC:
    MOV esi, offset unk_560697
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456A07:
    MOV edx, [r15+1Ch]
    MOV esi, offset aFD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456A26:
    MOV esi, offset off_5606AB
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456A41:
    MOV esi, offset off_56069F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456A5C:
    MOV esi, offset off_5606A3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456A77:
    MOV esi, offset off_5606A7
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD [rsp+1A8h+var_150], 1
    JMP loc_4561CD
loc_456A92:
    MOVZX edx, word ptr [rax+6]
    ROR dx, 8
    MOVZX edx, dx
    MOV [r15+1Ch], edx
loc_456AA1:
    CMP sil, 3
    JZ loc_45683E
loc_456AAB:
    TEST sil, sil
    MOV r9d, cs:dword_78D63C
    JNZ loc_456890
loc_456ABB:
    JMP loc_45683E
loc_456AC0:
    LEA r10d, [rdx+0Bh]
    CMP ebx, r10d
    JLE loc_456890
loc_456ACD:
    CMP byte ptr [rax+11h], 11h
    JNZ loc_456890
loc_456AD7:
    MOVZX r10d, word ptr [rsp+1A8h+var_19C]
    MOVSXD rdx, edx
    ADD r10w, [r15+24h]
    ROR r10w, 8
    CMP [r8+rdx+2], r10w
    JNZ loc_456890
loc_456AF6:
    CMP sil, 0Bh
    MOV dword ptr [rsp+1A8h+var_198], ecx
    JZ loc_456FBF
loc_456B04:
    LEA ebx, [rdi+1]
    JMP loc_4562BD
loc_456B0C:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_456448
loc_456B1B:
    CMP sil, 4
    JBE loc_456C6E
loc_456B25:
    LEA eax, [rsi-80h]
    MOV edx, offset aOutOfRange
    CMP al, 9
    JA loc_4568CB
loc_456B35:
    AND esi, 3Fh
    MOV rdx, ds:off_547C00[rsi*8]
    JMP loc_4568CB
loc_456B45:
    MOVSXD rdx, edx
    ADD r8, rdx
    MOVZX edx, word ptr [r15+20h]
    ROR dx, 8
    CMP [r8+4], dx
    JNZ loc_456890
loc_456B5F:
    MOVZX edx, [rsp+1A8h+var_15C]
    CMP [r8+6], dx
    JNZ loc_456890
loc_456B6F:
    JMP loc_456AF6
loc_456B71:
    MOVZX r11d, [rsp+1A8h+var_15A]
    CMP [rax+6], r11w
    JNZ loc_456877
loc_456B82:
    MOV dword ptr [rsp+1A8h+var_198], ecx
    MOV ebx, 4
    JMP loc_4562BD
loc_456B90:
    MOV rax, [r15]
    MOV r13d, ebx
    ADD rax, 30h
    AND r13d, 200h
    MOV [r15+8], rax
    JZ loc_455E7F
loc_456BAB:
    MOV rsi, [rsp+1A8h+var_118]
    MOV edi, 4
    CALL sub_53ABE0
    MOV r8d, dword ptr [rsp+1A8h+var_198]
    TEST r8d, r8d
    JZ loc_455E8D
loc_456BCB:
    MOV rdi, [rsp+1A8h+var_120]
    XOR esi, esi
    MOVZX edx, bp
    CALL sub_53AFE0
    CMP bp, 2
    MOV r13, rax
    LEA r14, [rax+4]
    JZ loc_456EE5
loc_456BEE:
    MOV edx, [r13+0]
    MOV rsi, r14
    MOV edi, 4
    CALL sub_40CD60
    MOV rdi, r13
    CALL _free
    CALL _getgid
    MOV edi, eax
    CALL sub_40CBE0
    CALL _getuid
    MOV edi, eax
    CALL sub_40CC00
    MOV rax, [r15+10h]
    LEA rdi, [rax+4]
    CALL sub_53B820
    MOV rdx, [r12]
    MOV rcx, rax
    MOV esi, offset aTracerouteToSS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rdx, [rsp+1A8h+var_120]
    MOV esi, offset aFromS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_455ED4
loc_456C62:
    XOR edx, edx
    MOV esi, 2
    JMP loc_455DF7
loc_456C6E:
    MOVSXD rax, r9d
    MOV rdx, ds:off_547BC0[rax*8]
    JMP loc_4568CB
loc_456C7E:
    TEST bl, 2
    JZ loc_456EC1
loc_456C87:
    OR ah, 80h
    MOV [r15+20h], eax
    MOV rax, [r15]
    MOV byte ptr [rax+14h], 8
    MOV rdx, [r15]
    MOVZX eax, word ptr [r15+20h]
    ROR ax, 8
    MOV [rdx+18h], ax
    MOV rax, [r15]
    ADD rax, 1Ch
    MOV [r15+8], rax
    JMP loc_455E6F
loc_456CB5:
    CALL _getuid
    TEST eax, eax
    JZ loc_455D21
loc_456CC2:
    MOV edi, offset aYouMustBeRoot
    XOR eax, eax
    CALL sub_40ABE0
loc_456CD0:
    MOV rdi, [rsp+1A8h+var_100]
    CALL sub_53A5A0
    TEST bh, 10h
    MOV [r14+24h], ax
    MOV [rsp+1A8h+var_13C], 3
    JZ loc_455D10
loc_456CF3:
    MOV rdi, [rsp+1A8h+nptr]
    MOV edx, 7FFFFFFFh
    MOV esi, 1
    CALL sub_539D60
    MOV [rsp+1A8h+var_13C], eax
    JMP loc_455D10
loc_456D13:
    MOV rdi, [rsp+1A8h+var_108]
    MOV edx, 0FFh
    MOV esi, 1
    CALL sub_539D60
    MOV [rsp+1A8h+var_138], eax
    JMP loc_455CF6
loc_456D33:
    MOV rdi, [rsp+1A8h+var_110]
    MOV edx, 0FFh
    XOR esi, esi
    CALL sub_539D60
    MOV r13d, eax
    JMP loc_455CE5
loc_456D4F:
    MOV esi, 5
    MOV edi, 4
    CALL sub_53AAA0
    JMP loc_455E46
loc_456D63:
    XOR esi, esi
    MOV ecx, r13d
    MOV edx, 1
    MOV edi, 4
    CALL sub_53A9E0
    TEST eax, eax
    JZ loc_455E3D
loc_456D7F:
    MOV edx, r13d
    MOV esi, offset off_5605D0
    MOV edi, 5605D4h
    XOR eax, eax
    CALL sub_40A7B0
loc_456D98:
    MOV rdi, [r12+8]
    MOV dword ptr [r14+18h], 48h
    TEST rdi, rdi
    JZ loc_456DBD
loc_456DAA:
    MOV edx, 8000h
    MOV esi, 48h
    CALL sub_539360
    MOV [r14+18h], eax
loc_456DBD:
    CALL sub_538F00
    MOV edx, 3Ah
    MOV esi, 3
    MOV edi, 0Ah
    CALL sub_40CD40
    MOV esi, 3
    MOV edi, eax
    MOV r14d, ebx
    CALL sub_40C630
    MOV edx, 31h
    MOV esi, 29h
    MOV edi, 3
    CALL sub_53AA00
    MOV edx, 2
    MOV esi, 29h
    MOV edi, 3
    CALL sub_53AA00
    AND r14d, 10h
    JZ loc_456E22
loc_456E13:
    MOV esi, 5
    MOV edi, 3
    CALL sub_53AAA0
loc_456E22:
    MOV ecx, 2
    MOV edx, 7
    MOV esi, 0FFh
    MOV edi, 3
    CALL sub_53A9E0
    TEST eax, eax
    JNZ loc_457009
loc_456E43:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40CD40
    MOV esi, 4
    MOV edi, eax
    CALL sub_40C630
    JMP loc_455E0D
loc_456E65:
    MOV edx, [rsp+1A8h+var_138]
    MOV rdi, [rsp+1A8h+var_E0]
    MOV esi, 1
    CALL sub_539D60
    MOV [rsp+1A8h+var_170], eax
    JMP loc_455D4F
loc_456E84:
    MOV rdi, [rsp+1A8h+var_E8]
    MOV edx, 36EE80h
    XOR esi, esi
    CALL sub_539D60
    MOV [rsp+1A8h+var_14C], eax
    JMP loc_455D3B
loc_456EA1:
    MOV rdi, [rsp+1A8h+var_F0]
    MOV edx, 15180h
    MOV esi, 1
    CALL sub_539D60
    MOV [r14+28h], eax
    JMP loc_455D2A
loc_456EC1:
    MOV rax, [r15]
    ADD rax, 1Ch
    MOV [r15+8], rax
    JMP loc_455E6F
loc_456ED1:
    MOV esi, 5
    MOV edi, 3
    CALL sub_53AAA0
    JMP loc_455DE4
loc_456EE5:
    MOV r8d, [rax]
    XOR esi, esi
    MOV rcx, r14
    MOV edx, 20h
    MOV edi, 4
    CALL _setsockopt
    TEST eax, eax
    JZ loc_456BEE
loc_456F04:
    MOV edi, offset aCanTSetMultica
    XOR eax, eax
    CALL sub_40ABE0
loc_456F10:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40CD40
    TEST r13d, r13d
    MOV ebp, eax
    JNZ loc_457026
loc_456F2C:
    MOV rax, [r15+10h]
    MOV esi, 104h
    LEA rdi, [rax+4]
    CALL sub_53AFB0
    MOV rax, [r15+10h]
    MOV edi, ebp
    MOV edx, [rax]
    LEA rsi, [rax+4]
    CALL sub_53AEB0
    MOVZX eax, word ptr [r15+24h]
    ROR ax, 8
    MOVZX esi, ax
    MOV rax, [r15+10h]
    LEA rdi, [rax+4]
    CALL sub_53AFB0
    MOV edi, ebp
    CALL sub_53AC50
    TEST rax, rax
    MOV r13, rax
    JZ loc_45701A
loc_456F7B:
    MOV edi, ebp
    LEA rbp, [r13+4]
    CALL _close
    XOR esi, esi
    MOV rdi, rbp
    CALL sub_53AFB0
    MOV edx, [r13+0]
    MOV rsi, rbp
    MOV edi, 4
    CALL sub_40CD60
    MOV edx, [r13+0]
    MOV rsi, rbp
    MOV edi, 3
    CALL sub_40CD60
    MOV rdi, r13
    CALL _free
    JMP loc_455E97
loc_456FBF:
    MOV ebx, 0FFFFFFFFh
    JMP loc_4562BD
loc_456FC9:
    MOV esi, offset aSoSndbuf
    MOV edi, offset aSetsockoptS
    XOR eax, eax
    CALL sub_40A7B0
loc_456FDA:
    CALL ___stack_chk_fail
loc_456FDF:
    MOV edx, [rsp+1A8h+var_170]
    MOV esi, offset aTtl
    MOV edi, 5605D4h
    XOR eax, eax
    CALL sub_40A7B0
loc_456FF4:
    MOV edx, [rsp+1A8h+var_170]
    MOV esi, offset aUnicastHops
    MOV edi, 5605D4h
    XOR eax, eax
    CALL sub_40A7B0
loc_457009:
    MOV esi, offset aIpv6Checksum
    MOV edi, offset aSetsockoptS
    XOR eax, eax
    CALL sub_40A7B0
loc_45701A:
    MOV edi, offset aCanTGetProbeAd
    XOR eax, eax
    CALL sub_40ABE0
loc_457026:
    MOV rsi, [rsp+1A8h+var_118]
    MOV edi, eax
    CALL sub_53ABE0
    JMP loc_456F2C
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 1, 'inferred_algorithm': 'Array Manipulation', 'inferred_category': 'Memory Management'}

##### Q 61 - i_getch
```assembly
loc_47AF40:
    CMP qword ptr [rdi+18h], 0
    JZ loc_47AF90
loc_47AF47:
    PUSH rbx
    MOV rax, [rdi]
    MOV rbx, rdi
    TEST rax, rax
    JZ loc_47AF70
loc_47AF53:
    CMP byte ptr [rax], 0
    JZ loc_47AF70
loc_47AF58:
    LEA rdx, [rax+1]
    MOV [rdi], rdx
    MOVZX eax, byte ptr [rax]
loc_47AF62:
    MOV [rbx+14h], eax
    POP rbx
    RETN 
loc_47AF70:
    MOV eax, [rbx+0Ch]
    TEST eax, eax
    JZ loc_47AFA8
loc_47AF77:
    MOV edx, [rbx+10h]
    TEST edx, edx
    MOV [rbx+0Ch], edx
    JZ loc_47AF62
loc_47AF81:
    MOV dword ptr [rbx+10h], 0
    MOV [rbx+14h], eax
    POP rbx
    RETN 
loc_47AF90:
    MOV rdx, [rdi]
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JZ loc_47AFB5
loc_47AF9A:
    ADD rdx, 1
    MOV [rdi+14h], eax
    MOV [rdi], rdx
    RETN 
loc_47AFA8:
    MOV rdi, rbx
    CALL sub_47AE20
    MOV [rbx+14h], eax
    POP rbx
    RETN 
loc_47AFB5:
    MOV eax, 0FFFFFFFFh
    RETN 
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['MemoryManagement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Cleanup', 'inferred_category': 'Resource Management'}

##### T 61 - i_getch
```assembly
loc_499CE0:
    MOV rdx, [rdi+18h]
    TEST rdx, rdx
    JZ loc_499D48
loc_499CE9:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rax, [rdi]
    MOV rbx, rdi
    TEST rax, rax
    JZ loc_499D20
loc_499CFC:
    CMP byte ptr [rax], 0
    JZ loc_499D20
loc_499D01:
    LEA rdx, [rax+1]
    MOV [rdi], rdx
    MOVZX eax, byte ptr [rax]
loc_499D0B:
    MOV [rbx+14h], eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_499D20:
    MOV eax, [rbx+0Ch]
    TEST eax, eax
    JZ loc_499D60
loc_499D27:
    MOV edx, [rbx+10h]
    TEST edx, edx
    MOV [rbx+0Ch], edx
    JZ loc_499D0B
loc_499D31:
    MOV dword ptr [rbx+10h], 0
    MOV [rbx+14h], eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_499D48:
    MOV rdx, [rdi]
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JZ loc_499DAB
loc_499D52:
    ADD rdx, 1
    MOV [rdi+14h], eax
    MOV [rdi], rdx
    RETN 
loc_499D60:
    MOV rbp, cs:qword_78D1F0
    MOV eax, [rbp+0]
    TEST eax, eax
    JZ loc_499D97
loc_499D6E:
    CMP rdx, cs:stdin
    JNZ loc_499D97
loc_499D77:
    JMP loc_499DB1
loc_499D80:
    LEA rcx, [rax+1]
    MOV [rdx+8], rcx
    MOVZX eax, byte ptr [rax]
loc_499D8B:
    TEST eax, eax
    JNZ loc_499D0B
loc_499D93:
    MOV rdx, [rbx+18h]
loc_499D97:
    MOV rax, [rdx+8]
    CMP rax, [rdx+10h]
    JB loc_499D80
loc_499DA1:
    MOV rdi, rdx
    CALL ___uflow
    JMP loc_499D8B
loc_499DAB:
    MOV eax, 0FFFFFFFFh
    RETN 
loc_499DB1:
    CMP byte ptr [rbx+8], 0
    MOV r13, [rbp+10h]
    LEA r14, [rbp+1F0h]
    CMOVZ r13, [rbp+8]
    JMP loc_499E0E
loc_499DD0:
    MOV rdi, [rbp+18h]
    MOV ecx, 3FFh
    MOV rdx, r14
    MOV rsi, r13
    CALL sub_52E740
    TEST eax, eax
    MOV r12d, eax
    JZ loc_499E24
loc_499DEB:
    CALL sub_499A80
    CMP byte ptr [rbp+58h], 0
    JZ loc_499E35
loc_499DF6:
    MOV edx, 2
    MOV esi, offset aC_0
    MOV edi, 1
    CALL _write
    MOV byte ptr [rbp+5Ch], 82h
loc_499E0E:
    CMP byte ptr [rbp+58h], 0
    JZ loc_499DD0
loc_499E14:
    MOV edi, 0Ah
    CALL sub_40C7E0
    MOV byte ptr [rbp+58h], 0
    JMP loc_499DD0
loc_499E24:
    MOV edi, 2
    CALL _raise
    CALL sub_499A80
    JMP loc_499DF6
loc_499E35:
    TEST r12d, r12d
    JS loc_499E54
loc_499E3A:
    LEA rax, [rbp+1F1h]
    MOV [rbx], rax
    MOVZX eax, byte ptr [rbp+1F0h]
loc_499E4B:
    MOV byte ptr [rbx+8], 1
    JMP loc_499D0B
loc_499E54:
    MOV qword ptr [rbx], 0
    MOV dword ptr [rbx+0Ch], 0FFFFFFFFh
    OR eax, 0FFFFFFFFh
    JMP loc_499E4B
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['MemoryManagement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Management'}

##### Q 62 - init_cr
```assembly
loc_45A490:
    MOV rax, cs:qword_7431F0
    MOV byte ptr [rax+3], 0Dh
    XOR eax, eax
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10000', '0x4000', '0xF000', '0xFFFDFFFF', '0x14'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 5, 'inferred_algorithm': 'Error Handling and Validation', 'inferred_category': 'Security/Safety'}

##### T 62 - init_cr
```assembly
loc_46E6C0:
    MOV rax, cs:qword_78D1F0
    MOV byte ptr [rax+3], 0Dh
    XOR eax, eax
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Integer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFDFEFF', '0x3', '0x10000', '0xFFFFFFFF', '0xF000', '0x4000', '0x14', '0x5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 4, 'inferred_algorithm': 'Error Handling and Validation', 'inferred_category': 'Security/Critical Path'}

##### Q 63 - arith
```assembly
loc_47FB70:

loc_47FFD0:
    MOV qword ptr [rdi], 0
    MOV qword ptr [rdi+18h], 0
    JMP sub_47FB70
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0xFFFFFFFFFFFFFFFD', '0x5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 25, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### T 63 - arith
```assembly
loc_49FE90:

loc_4A0980:
    MOV qword ptr [rdi], 0
    MOV qword ptr [rdi+18h], 0
    JMP sub_49FE90
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x30', '0x2D', '0x8', '0x6', '0x58', '0x5', '0x4', '0x3', '0x2', '0x1', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### Q 64 - send_headers_and_exit
```assembly
loc_42AB90:
    SUB rsp, 8
    MOV rax, cs:qword_7431F0
    MOV byte ptr [rax+140h], 0
    CALL sub_42A770
    CALL sub_42A3F0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1B6', '0x41', '0x50', '0x2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 23, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 8, 'inferred_algorithm': 'File Operations', 'inferred_category': 'Program Execution'}

##### T 64 - send_headers_and_exit
```assembly
loc_435310:
    SUB rsp, 8
    MOV rax, cs:qword_78D1F0
    MOV byte ptr [rax+140h], 0
    CALL sub_434E10
    CALL sub_434A90
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['ControlTransfer', 'ErrorHandling', 'DataMovement', 'SubroutineCall'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 15, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xB6', '0x41', '0x2', '0xFDDFEDCEFADECABF', '0x1B', '0xFFFFFFFFFFFFFFFE', '0x1555555555555554', '0xA0', '0x50', '0x28', '0x1', '0x3', '0x5', '0x20', '0x15'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 44, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 6, 'inferred_algorithm': 'Execution and Control Flow Management', 'inferred_category': 'Utility or Interface'}

##### Q 65 - re_wrap
```assembly
loc_41D100:
    PUSH rbp
    MOV rbp, rsp
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbx
    SUB rsp, 48h
    MOV [rbp+var_5C], 0
    MOV rax, fs:28h
    MOV [rbp+var_38], rax
    XOR eax, eax
    MOV rax, cs:qword_7431F0
    MOV eax, [rax+24h]
    MOV ecx, eax
    ADD eax, 1
    CDQE 
    ADD rax, 0Fh
    AND rax, 0FFFFFFFFFFFFFFF0h
    SUB rsp, rax
    MOV rax, cs:qword_7431F0
    MOV [rbp+src], rsp
    MOV rax, [rax+50h]
    MOV rbx, rax
    MOV [rbp+ptr], rax
    MOV eax, ecx
    SUB eax, 8
    TEST byte ptr cs:dword_74363C, 8
    MOV r15, [rbx]
    CMOVZ eax, ecx
    XOR r12d, r12d
    XOR ebx, ebx
    MOV [rbp+var_4C], eax
    MOV eax, [r15-4]
    XOR r14d, r14d
    XOR r13d, r13d
    MOV [rbp+var_50], eax
    MOV rax, rsp
    NOP dword ptr [rax+rax+00h]
loc_41D188:
    MOVZX edx, byte ptr [r15]
    TEST dl, dl
    MOV [rax], dl
    JZ loc_41D250
loc_41D196:
    CMP dl, 9
    JZ loc_41D2E0
loc_41D19F:
    ADD r13d, 1
loc_41D1A3:
    ADD r15, 1
    CMP [rbp+var_4C], r13d
    LEA rdx, [rax+1]
    JG loc_41D2C0
loc_41D1B5:
    MOV byte ptr [rax+1], 0
    MOV rax, rdx
loc_41D1BC:
    SUB rax, [rbp+src]
    LEA esi, [rax+1]
    ADD eax, 5
    MOVSXD rdi, eax
    MOV dword ptr [rbp+var_58], esi
    CALL sub_40ACD0
    MOV edi, [rbp+var_50]
    MOVSXD rdx, dword ptr [rbp+var_58]
    LEA r9, [rax+4]
    MOV rsi, [rbp+src]
    MOV [rbp+var_58], r9
    MOV [rax], edi
    MOV rdi, r9
    CALL _memcpy
    MOV edx, ebx
    MOV rdi, r12
    MOV esi, 808h
    CALL sub_4EDE50
    CMP [rbp+var_4C], r13d
    MOV r9, [rbp+var_58]
    MOV r12, rax
    MOVSXD rax, ebx
    LEA edx, [rbx+1]
    MOV [r12+rax*8], r9
    JLE loc_41D2D0
loc_41D218:
    MOV rdi, cs:qword_7431F0
    CMP [rdi+18h], r14d
    JB loc_41D2F0
loc_41D229:
    MOV ebx, [r15-4]
    MOV rax, [rbp+src]
    XOR r13d, r13d
    MOV [rbp+var_50], ebx
    MOV ebx, edx
    MOVZX edx, byte ptr [r15]
    TEST dl, dl
    MOV [rax], dl
    JNZ loc_41D196
loc_41D247:
    NOP word ptr [rax+rax+00000000h]
loc_41D250:
    MOVSXD rdx, r14d
    MOV [rbp+var_58], rax
    LEA rax, ds:0[rdx*8]
    MOV [rbp+var_70], rax
    MOV rax, [rbp+ptr]
    MOV rdi, [rax+rdx*8]
    SUB rdi, 4
    CALL _free
    MOV rsi, cs:qword_7431F0
    MOV eax, [rbp+var_5C]
    CMP r14d, [rsi]
    CMOVZ eax, ebx
    ADD r14d, 1
    CMP [rsi+18h], r14d
    MOV [rbp+var_5C], eax
    MOV rax, [rbp+var_58]
    JB loc_41D1BC
loc_41D299:
    MOV rcx, [rbp+ptr]
    MOV rsi, [rbp+var_70]
    MOV r15, [rcx+rsi+8]
    MOV ecx, [rbp+var_50]
    CMP ecx, [r15-4]
    JNZ loc_41D1BC
loc_41D2B3:
    JMP loc_41D188
loc_41D2C0:
    MOV rax, rdx
    JMP loc_41D188
loc_41D2D0:
    MOV rax, [rbp+src]
    MOV ebx, edx
    XOR r13d, r13d
    JMP loc_41D188
loc_41D2E0:
    LEA ecx, [r13+8]
    AND ecx, 0FFFFFFF8h
    MOV r13d, ecx
    JMP loc_41D1A3
loc_41D2F0:
    MOV rdi, [rbp+ptr]
    CALL _free
    MOV rax, cs:qword_7431F0
    MOVSXD rcx, r13d
    MOV [rax+18h], ebx
    MOV ebx, [rbp+var_5C]
    MOV [rax+50h], r12
    MOV [rax+10h], rcx
    MOV byte ptr [rax+150h], 0
    MOV [rax], ebx
    MOV rax, [rbp+var_38]
    XOR rax, fs:28h
    JNZ loc_41D338
loc_41D329:
    LEA rsp, [rbp-28h]
    POP rbx
    POP r12
    POP r13
    POP r14
    POP r15
    POP rbp
    RETN 
loc_41D338:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x30', '0x9', '0xA', '0x5', '0xFF', '0x7F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Error Handling and Parsing', 'inferred_category': 'Utility Function'}

##### T 65 - re_wrap
```assembly
loc_4240A0:
    PUSH rbp
    MOV rbp, rsp
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbx
    SUB rsp, 48h
    MOV [rbp+var_5C], 0
    MOV rax, fs:28h
    MOV [rbp+var_38], rax
    XOR eax, eax
    MOV rax, cs:qword_78D1F0
    MOV eax, [rax+24h]
    MOV ecx, eax
    ADD eax, 1
    CDQE 
    ADD rax, 0Fh
    AND rax, 0FFFFFFFFFFFFFFF0h
    SUB rsp, rax
    MOV rax, cs:qword_78D1F0
    MOV [rbp+src], rsp
    MOV rax, [rax+50h]
    MOV rbx, rax
    MOV [rbp+ptr], rax
    MOV eax, ecx
    SUB eax, 8
    TEST byte ptr cs:dword_78D63C, 8
    MOV r15, [rbx]
    CMOVZ eax, ecx
    XOR r12d, r12d
    XOR ebx, ebx
    MOV [rbp+var_4C], eax
    MOV eax, [r15-4]
    XOR r14d, r14d
    XOR r13d, r13d
    MOV [rbp+var_50], eax
    MOV rax, rsp
    NOP dword ptr [rax+rax+00h]
loc_424128:
    MOVZX edx, byte ptr [r15]
    TEST dl, dl
    MOV [rax], dl
    JZ loc_4241F0
loc_424136:
    CMP dl, 9
    JZ loc_424280
loc_42413F:
    ADD r13d, 1
loc_424143:
    ADD r15, 1
    CMP [rbp+var_4C], r13d
    LEA rdx, [rax+1]
    JG loc_424260
loc_424155:
    MOV byte ptr [rax+1], 0
    MOV rax, rdx
loc_42415C:
    SUB rax, [rbp+src]
    LEA esi, [rax+1]
    ADD eax, 5
    MOVSXD rdi, eax
    MOV dword ptr [rbp+var_58], esi
    CALL sub_40C220
    MOV edi, [rbp+var_50]
    MOVSXD rdx, dword ptr [rbp+var_58]
    LEA r9, [rax+4]
    MOV rsi, [rbp+src]
    MOV [rbp+var_58], r9
    MOV [rax], edi
    MOV rdi, r9
    CALL _memcpy
    MOV edx, ebx
    MOV rdi, r12
    MOV esi, 808h
    CALL sub_53B960
    CMP [rbp+var_4C], r13d
    MOV r9, [rbp+var_58]
    MOV r12, rax
    MOVSXD rax, ebx
    LEA edx, [rbx+1]
    MOV [r12+rax*8], r9
    JLE loc_424270
loc_4241B8:
    MOV rdi, cs:qword_78D1F0
    CMP [rdi+18h], r14d
    JB loc_424290
loc_4241C9:
    MOV ebx, [r15-4]
    MOV rax, [rbp+src]
    XOR r13d, r13d
    MOV [rbp+var_50], ebx
    MOV ebx, edx
    MOVZX edx, byte ptr [r15]
    TEST dl, dl
    MOV [rax], dl
    JNZ loc_424136
loc_4241E7:
    NOP word ptr [rax+rax+00000000h]
loc_4241F0:
    MOVSXD rdx, r14d
    MOV [rbp+var_58], rax
    LEA rax, ds:0[rdx*8]
    MOV [rbp+var_70], rax
    MOV rax, [rbp+ptr]
    MOV rdi, [rax+rdx*8]
    SUB rdi, 4
    CALL _free
    MOV rsi, cs:qword_78D1F0
    MOV eax, [rbp+var_5C]
    CMP r14d, [rsi]
    CMOVZ eax, ebx
    ADD r14d, 1
    CMP [rsi+18h], r14d
    MOV [rbp+var_5C], eax
    MOV rax, [rbp+var_58]
    JB loc_42415C
loc_424239:
    MOV rcx, [rbp+ptr]
    MOV rsi, [rbp+var_70]
    MOV r15, [rcx+rsi+8]
    MOV ecx, [rbp+var_50]
    CMP ecx, [r15-4]
    JNZ loc_42415C
loc_424253:
    JMP loc_424128
loc_424260:
    MOV rax, rdx
    JMP loc_424128
loc_424270:
    MOV rax, [rbp+src]
    MOV ebx, edx
    XOR r13d, r13d
    JMP loc_424128
loc_424280:
    LEA ecx, [r13+8]
    AND ecx, 0FFFFFFF8h
    MOV r13d, ecx
    JMP loc_424143
loc_424290:
    MOV rdi, [rbp+ptr]
    CALL _free
    MOV rax, cs:qword_78D1F0
    MOVSXD rcx, r13d
    MOV [rax+18h], ebx
    MOV ebx, [rbp+var_5C]
    MOV [rax+50h], r12
    MOV [rax+10h], rcx
    MOV byte ptr [rax+150h], 0
    MOV [rax], ebx
    MOV rax, [rbp+var_38]
    XOR rax, fs:28h
    JNZ loc_4242D8
loc_4242C9:
    LEA rsp, [rbp-28h]
    POP rbx
    POP r12
    POP r13
    POP r14
    POP r15
    POP rbp
    RETN 
loc_4242D8:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 8, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x30', '0x9', '0xA', '0x5', '0x20', '0x53', '0x49', '0x47'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parsing/Signal Handling', 'inferred_category': 'Utility/Helper'}

##### Q 66 - get_cpu_count
```assembly
loc_4DF150:
    PUSH r12
    PUSH rbp
    MOV edi, offset aProcStat
    PUSH rbx
    MOV ebx, 0FFFFFFFFh
    SUB rsp, 120h
    LEA r12, [rsp+138h+var_125]
    MOV rax, fs:28h
    MOV [rsp+138h+var_20], rax
    XOR eax, eax
    CALL sub_40A3D0
    MOV rbp, rax
loc_4DF185:
    LEA rdi, [rsp+138h+s]
    MOV rdx, rbp
    MOV esi, 100h
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_4DF1BF
loc_4DF19C:
    MOVSX edx, [rsp+138h+s]
    MOVSX ecx, [rsp+138h+var_127]
    LEA eax, [rdx-63h]
    LEA edx, [rcx-70h]
    OR edx, eax
    MOVSX eax, [rsp+138h+var_126]
    SUB eax, 75h
    OR edx, eax
    JZ loc_4DF1F0
loc_4DF1BA:
    CMP ebx, 0FFFFFFFFh
    JZ loc_4DF185
loc_4DF1BF:
    MOV rdi, rbp
    CALL _fclose
    MOV rsi, [rsp+138h+var_20]
    XOR rsi, fs:28h
    LEA eax, [rbx+1]
    JNZ loc_4DF222
loc_4DF1DD:
    ADD rsp, 120h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4DF1F0:
    CMP [rsp+138h+var_125], 20h
    JZ loc_4DF185
loc_4DF1F7:
    LEA rdx, [rsp+138h+var_12C]
    XOR eax, eax
    MOV esi, (offset aU_5+2)
    MOV rdi, r12
    CALL _sscanf
    CMP eax, 1
    JNZ loc_4DF185
loc_4DF214:
    MOV eax, [rsp+138h+var_12C]
    CMP ebx, eax
    CMOVL ebx, eax
    JMP loc_4DF185
loc_4DF222:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### T 66 - get_cpu_count
```assembly
loc_527DE0:
    PUSH r12
    PUSH rbp
    MOV edi, offset aProcStat
    PUSH rbx
    MOV ebx, 0FFFFFFFFh
    SUB rsp, 120h
    LEA r12, [rsp+138h+var_125]
    MOV rax, fs:28h
    MOV [rsp+138h+var_20], rax
    XOR eax, eax
    CALL sub_40AD90
    MOV rbp, rax
loc_527E15:
    LEA rdi, [rsp+138h+s]
    MOV rdx, rbp
    MOV esi, 100h
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_527E4F
loc_527E2C:
    MOVSX edx, [rsp+138h+s]
    MOVSX ecx, [rsp+138h+var_127]
    LEA eax, [rdx-63h]
    LEA edx, [rcx-70h]
    OR edx, eax
    MOVSX eax, [rsp+138h+var_126]
    SUB eax, 75h
    OR edx, eax
    JZ loc_527E80
loc_527E4A:
    CMP ebx, 0FFFFFFFFh
    JZ loc_527E15
loc_527E4F:
    MOV rdi, rbp
    CALL _fclose
    MOV rsi, [rsp+138h+var_20]
    XOR rsi, fs:28h
    LEA eax, [rbx+1]
    JNZ loc_527EB2
loc_527E6D:
    ADD rsp, 120h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_527E80:
    CMP [rsp+138h+var_125], 20h
    JZ loc_527E15
loc_527E87:
    LEA rdx, [rsp+138h+var_12C]
    XOR eax, eax
    MOV esi, (offset aU_5+2)
    MOV rdi, r12
    CALL _sscanf
    CMP eax, 1
    JNZ loc_527E15
loc_527EA4:
    MOV eax, [rsp+138h+var_12C]
    CMP ebx, eax
    CMOVL ebx, eax
    JMP loc_527E15
loc_527EB2:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'JumpTable'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 67 - bb_daemonize_or_rexec
```assembly
loc_4EC83C:
    TEST r12b, 2
    JNZ loc_4EC8B0
loc_4EC842:
    XOR eax, eax
    MOV esi, 2
    MOV edi, offset aDevNull
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JNS loc_4EC869
loc_4EC859:
    JMP loc_4EC920
loc_4EC860:
    MOV edi, ebx
    CALL _dup
    MOV ebx, eax
loc_4EC869:
    CMP ebx, 1
    JBE loc_4EC860
loc_4EC86E:
    TEST r12b, 8
    JZ loc_4EC8D0
loc_4EC874:
    AND r12d, 4
    CMP ebx, 2
    JG loc_4EC887
loc_4EC87D:
    JMP loc_4EC896
loc_4EC880:
    CMP ebp, 2
    MOV ebx, ebp
    JZ loc_4EC896
loc_4EC887:
    MOV edi, ebx
    LEA ebp, [rbx-1]
    CALL _close
    TEST r12d, r12d
    JNZ loc_4EC880
loc_4EC896:
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4EC8A0:
    MOV edi, 518B4Ch
    CALL sub_40B450
    TEST r12b, 2
    JZ loc_4EC842
loc_4EC8B0:
    XOR edi, edi
    CALL _close
    MOV edi, 1
    CALL _close
    MOV edi, 2
    CALL _close
    JMP loc_4EC842
loc_4EC8D0:
    CALL sub_40B950
    TEST eax, eax
    JNZ loc_4EC916
loc_4EC8D9:
    CALL _setsid
    XOR esi, esi
    MOV edi, ebx
    CALL _dup2
    MOV esi, 1
    MOV edi, ebx
    CALL _dup2
    MOV esi, 2
    MOV edi, ebx
    CALL _dup2
    TEST r12b, 10h
    JZ loc_4EC874
loc_4EC909:
    CALL sub_40B950
    TEST eax, eax
    JZ loc_4EC874
loc_4EC916:
    XOR edi, edi
    CALL __exit
loc_4EC920:
    XOR esi, esi
    MOV edi, 518B4Ch
    CALL sub_40AE50
    MOV ebx, eax
    JMP loc_4EC869
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'MemoryAllocation'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1B8', '0xF000', '0x8000', '0x2000', '0xFFFFFFFFFFFFFFFF', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File Reading and Buffer Management', 'inferred_category': 'File I/O'}

##### T 67 - bb_daemonize_or_rexec
```assembly
loc_538DE0:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    SUB rsp, 8
    AND edi, 1
    JNZ loc_538ED0
loc_538DF1:
    TEST bpl, 2
    JNZ loc_538EB0
loc_538DFB:
    XOR eax, eax
    MOV esi, 2
    MOV edi, offset aDevNull
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JNS loc_538E29
loc_538E12:
    JMP loc_538EE0
loc_538E20:
    MOV edi, ebx
    CALL _dup
    MOV ebx, eax
loc_538E29:
    CMP ebx, 1
    JBE loc_538E20
loc_538E2E:
    TEST bpl, 8
    JZ loc_538E68
loc_538E34:
    CMP ebx, 2
    JLE loc_538E51
loc_538E39:
    AND ebp, 4
    JZ loc_538E58
loc_538E3E:
    XCHG ax, ax
loc_538E40:
    LEA ebp, [rbx-1]
    MOV edi, ebx
    CALL _close
    CMP ebp, 2
    MOV ebx, ebp
    JNZ loc_538E40
loc_538E51:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_538E58:
    ADD rsp, 8
    MOV edi, ebx
    POP rbx
    POP rbp
    JMP _close
loc_538E68:
    CALL sub_40D170
    TEST eax, eax
    JNZ loc_538EA6
loc_538E71:
    CALL _setsid
    XOR esi, esi
    MOV edi, ebx
    CALL _dup2
    MOV esi, 1
    MOV edi, ebx
    CALL _dup2
    MOV esi, 2
    MOV edi, ebx
    CALL _dup2
    TEST bpl, 10h
    JZ loc_538E34
loc_538E9D:
    CALL sub_40D170
    TEST eax, eax
    JZ loc_538E34
loc_538EA6:
    XOR edi, edi
    CALL __exit
loc_538EB0:
    XOR edi, edi
    CALL _close
    MOV edi, 1
    CALL _close
    MOV edi, 2
    CALL _close
    JMP loc_538DFB
loc_538ED0:
    MOV edi, 566B08h
    CALL sub_40CC60
    JMP loc_538DF1
loc_538EE0:
    XOR esi, esi
    MOV edi, 566B08h
    CALL sub_40C3E0
    MOV ebx, eax
    JMP loc_538E29
```
{'input_parameter_count': 2, 'input_parameter_types': ['FileHandle', 'Buffer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8000', '0x1', '0xFFFFFFFFFFFFFFFF', '0x10', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Reading File into Buffer', 'inferred_category': 'I/O Operations'}

##### Q 68 - unicode_strwidth
```assembly
loc_4EB880:
    SUB rsp, 28h
    MOV rsi, rdi
    MOV rdi, rsp
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    CALL sub_4E6650
    MOV rdx, [rsp+28h+var_10]
    XOR rdx, fs:28h
    MOV eax, [rsp+28h+var_20]
    JNZ loc_4EB8B8
loc_4EB8B3:
    ADD rsp, 28h
    RETN 
loc_4EB8B8:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Output/Logging'}

##### T 68 - unicode_strwidth
```assembly
loc_537E20:
    SUB rsp, 28h
    MOV rsi, rdi
    MOV rdi, rsp
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    CALL sub_531410
    MOV rdx, [rsp+28h+var_10]
    XOR rdx, fs:28h
    MOV eax, [rsp+28h+var_20]
    JNZ loc_537E58
loc_537E53:
    ADD rsp, 28h
    RETN 
loc_537E58:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Output/Logging'}

##### Q 69 - indicate_error
```assembly
loc_4068D0:

loc_4D3800:

loc_4D39B0:
    MOV rax, cs:qword_7431F0
    TEST byte ptr [rax+1Ch], 8
    JZ loc_4D3A20
loc_4D39BD:
    SUB rsp, 8
    MOV rcx, cs:stdout
    MOV edx, 4
    MOV esi, 1
    MOV edi, offset a7m
    CALL _fwrite_unlocked
    MOV edi, 1
    CALL sub_4D3800
    MOV edi, 0Ah
    CALL sub_4D2D90
    MOV rcx, cs:stdout
    MOV edi, (offset a7mSFileIOfIM+16h)
    MOV edx, 3
    MOV esi, 1
    CALL _fwrite_unlocked
    MOV edi, 1
    ADD rsp, 8
    JMP sub_4D3800
loc_4D3A20:
    MOV rsi, cs:stdout
    MOV edi, 7
    JMP _fputc_unlocked
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Output'}

##### T 69 - indicate_error
```assembly
loc_5170E0:
    PUSH rbx
    SUB rsp, 40h
    MOV rbx, cs:qword_78D1F0
    MOV rax, fs:28h
    MOV [rsp+48h+var_10], rax
    XOR eax, eax
    TEST byte ptr [rbx+1Ch], 8
    JZ loc_517290
loc_517106:
    MOV rcx, cs:stdout
    MOV edx, 4
    MOV esi, 1
    MOV edi, offset a7m
    CALL _fwrite_unlocked
    MOV eax, [rbx+34h]
    MOV edx, [rbx+30h]
    XOR r9d, r9d
    LEA rdi, [rsp+48h+s]
    MOV ecx, offset aUUh
    MOV esi, 1
    TEST eax, eax
    SETNZ r9b
    XOR r8d, r8d
    TEST edx, edx
    SETNZ r8b
    MOV edx, 21h
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    LEA rdi, [rsp+48h+s]
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset a11hJ+4)
    CALL _fwrite_unlocked
    MOVSXD rdx, dword ptr [rbx+68h]
    MOV rdi, [rbx+60h]
    MOV esi, 20h
    CALL _memset
    MOV edi, 1
    MOV dword ptr [rbx+4Ch], 0
    CALL sub_515580
    CALL sub_516820
    CALL sub_40C7D0
    MOV ecx, 1
    MOV edx, 64h
    MOV esi, 1
    MOV rdi, rsp
    MOV [rsp+48h+var_44], cx
    MOV [rsp+48h+var_48], 0
    CALL sub_536950
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset a7mSFileIOfIM+16h)
    CALL _fwrite_unlocked
    MOV esi, [rbx+34h]
    MOV edi, [rbx+30h]
    XOR r9d, r9d
    MOV ecx, offset aUUh
    MOV edx, 21h
    TEST esi, esi
    MOV esi, 1
    SETNZ r9b
    XOR r8d, r8d
    TEST edi, edi
    LEA rdi, [rsp+48h+s]
    SETNZ r8b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    LEA rdi, [rsp+48h+s]
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset a11hJ+4)
    CALL _fwrite_unlocked
    MOVSXD rdx, dword ptr [rbx+68h]
    MOV rdi, [rbx+60h]
    MOV esi, 20h
    CALL _memset
    MOV edi, 1
    MOV dword ptr [rbx+4Ch], 0
    CALL sub_515580
    CALL sub_516820
loc_517272:
    MOV rax, [rsp+48h+var_10]
    XOR rax, fs:28h
    JNZ loc_5172A3
loc_517282:
    ADD rsp, 40h
    POP rbx
    RETN 
loc_517290:
    MOV rsi, cs:stdout
    MOV edi, 7
    CALL _fputc_unlocked
    JMP loc_517272
loc_5172A3:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'I/O Operation'}

##### Q 70 - udhcp_get_option
```assembly
loc_455900:
    PUSH rbx
    XOR r9d, r9d
    LEA rbx, [rdi+0F0h]
    MOV eax, 184h
    JMP loc_455923
loc_455918:
    SUB eax, 1
    ADD rbx, 1
    TEST eax, eax
    JZ loc_455967
loc_455923:
    MOVZX edx, byte ptr [rbx]
    TEST dl, dl
    JZ loc_455918
loc_45592A:
    CMP dl, 0FFh
    JZ loc_455980
loc_45592F:
    CMP eax, 1
    JZ loc_455967
loc_455934:
    MOVZX ecx, byte ptr [rbx+1]
    ADD ecx, 2
    SUB eax, ecx
    JS loc_455967
loc_45593F:
    MOVZX r8d, dl
    CMP esi, r8d
    JZ loc_4559ED
loc_45594C:
    CMP ecx, 2
    JZ loc_45595D
loc_455951:
    CMP dl, 34h
    JNZ loc_45595D
loc_455956:
    MOVZX edx, byte ptr [rbx+2]
    OR r9d, edx
loc_45595D:
    MOVSXD rcx, ecx
    ADD rbx, rcx
    TEST eax, eax
    JNZ loc_455923
loc_455967:
    MOV edi, offset aBadPacketMalfo
    XOR eax, eax
    XOR ebx, ebx
    CALL sub_40A280
loc_455975:
    MOV rax, rbx
    POP rbx
    RETN 
loc_455980:
    MOV eax, r9d
    AND eax, 101h
    CMP eax, 1
    JZ loc_4559C0
loc_45598D:
    MOV eax, r9d
    AND eax, 202h
    CMP eax, 2
    JZ loc_4559D8
loc_45599A:
    XOR ebx, ebx
    CMP cs:dword_743638, 2
    JBE loc_455975
loc_4559A5:
    XOR eax, eax
    MOV edi, offset aOption0x02xNot
    CALL sub_40A280
    MOV rax, rbx
    POP rbx
    RETN 
loc_4559C0:
    OR r9d, 101h
    LEA rbx, [rdi+6Ch]
    MOV eax, 80h
    JMP loc_455923
loc_4559D8:
    OR r9d, 202h
    LEA rbx, [rdi+2Ch]
    MOV eax, 40h
    JMP loc_455923
loc_4559ED:
    CMP cs:dword_743638, 1
    JBE loc_455A03
loc_4559F6:
    MOV rsi, rbx
    MOV edi, offset aOptionFound
    CALL sub_4555F0
loc_455A03:
    ADD rbx, 2
    JMP loc_455975
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ControlFlow', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 14, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['2', '0xFFFFFFFF', '8', '5', '2A', '28', '77', '62', '0xFFFFFFFD', '0xFFFFFFFE', '82', '80', '81', '83', '84'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parsing', 'inferred_category': 'Utility'}

##### T 70 - udhcp_get_option
```assembly
loc_4695A0:
    PUSH rbx
    XOR r9d, r9d
    LEA rbx, [rdi+0F0h]
    MOV eax, 184h
    JMP loc_4695C3
loc_4695B8:
    SUB eax, 1
    ADD rbx, 1
    TEST eax, eax
    JZ loc_469607
loc_4695C3:
    MOVZX edx, byte ptr [rbx]
    TEST dl, dl
    JZ loc_4695B8
loc_4695CA:
    CMP dl, 0FFh
    JZ loc_469620
loc_4695CF:
    CMP eax, 1
    JZ loc_469607
loc_4695D4:
    MOVZX ecx, byte ptr [rbx+1]
    ADD ecx, 2
    SUB eax, ecx
    JS loc_469607
loc_4695DF:
    MOVZX r8d, dl
    CMP esi, r8d
    JZ loc_46968D
loc_4695EC:
    CMP ecx, 2
    JZ loc_4695FD
loc_4695F1:
    CMP dl, 34h
    JNZ loc_4695FD
loc_4695F6:
    MOVZX edx, byte ptr [rbx+2]
    OR r9d, edx
loc_4695FD:
    MOVSXD rcx, ecx
    ADD rbx, rcx
    TEST eax, eax
    JNZ loc_4695C3
loc_469607:
    MOV edi, offset aBadPacketMalfo
    XOR eax, eax
    XOR ebx, ebx
    CALL sub_40AC80
loc_469615:
    MOV rax, rbx
    POP rbx
    RETN 
loc_469620:
    MOV eax, r9d
    AND eax, 101h
    CMP eax, 1
    JZ loc_469660
loc_46962D:
    MOV eax, r9d
    AND eax, 202h
    CMP eax, 2
    JZ loc_469678
loc_46963A:
    XOR ebx, ebx
    CMP cs:dword_78D638, 2
    JBE loc_469615
loc_469645:
    XOR eax, eax
    MOV edi, offset aOption0x02xNot
    CALL sub_40AC80
    MOV rax, rbx
    POP rbx
    RETN 
loc_469660:
    OR r9d, 101h
    LEA rbx, [rdi+6Ch]
    MOV eax, 80h
    JMP loc_4695C3
loc_469678:
    OR r9d, 202h
    LEA rbx, [rdi+2Ch]
    MOV eax, 40h
    JMP loc_4695C3
loc_46968D:
    CMP cs:dword_78D638, 1
    JBE loc_4696A3
loc_469696:
    MOV rsi, rbx
    MOV edi, offset aOptionFound
    CALL sub_4692F0
loc_4696A3:
    ADD rbx, 2
    JMP loc_469615
```
{'input_parameter_count': 2, 'input_parameter_types': ['Integer', 'String'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'ControlFlow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28', '0x14', '0x2', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 124, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Command-Line Argument Parsing', 'inferred_category': 'Utility Function'}

##### Q 71 - volume_id_probe_vfat
```assembly
loc_4981F0:
    PUSH r15
    PUSH r14
    XOR esi, esi
    PUSH r13
    PUSH r12
    MOV edx, 200h
    PUSH rbp
    PUSH rbx
    MOV r13, rdi
    SUB rsp, 28h
    CALL sub_4999F0
    TEST rax, rax
    JZ loc_498493
loc_498216:
    LEA rdi, [rax+3]
    MOV edx, 4
    MOV esi, offset aNtfs
    MOV r12, rax
    CALL _memcmp
    TEST eax, eax
    JZ loc_498493
loc_498234:
    LEA rbx, [r12+52h]
    MOV edx, 5
    MOV esi, offset aMswin
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_498318
loc_498253:
    MOV edx, 8
    MOV esi, offset aFat32
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_498318
loc_49826D:
    LEA rbx, [r12+36h]
    MOV edx, 8
    MOV esi, offset aFat16
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_498318
loc_49828C:
    MOV edx, 5
    MOV esi, offset aMsdos
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_498318
loc_4982A2:
    MOV edx, 8
    MOV esi, offset aFat12
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_498318
loc_4982B8:
    MOVZX eax, byte ptr [r12]
    CMP al, 0EBh
    JZ loc_498605
loc_4982C5:
    CMP al, 0E9h
    JNZ loc_498493
loc_4982CD:
    CMP word ptr [r12+1Ah], 0
    JZ loc_498493
loc_4982DA:
    MOVZX eax, byte ptr [r12+0Dh]
    TEST al, al
    JZ loc_498493
loc_4982E8:
    LEA edx, [rax-1]
    TEST edx, eax
    JNZ loc_498493
loc_4982F3:
    MOVZX eax, byte ptr [r12+15h]
    CMP al, 0F7h
    JA loc_498305
loc_4982FD:
    CMP al, 0F0h
    JNZ loc_498493
loc_498305:
    CMP byte ptr [r12+10h], 2
    JNZ loc_498493
loc_498311:
    NOP dword ptr [rax+00000000h]
loc_498318:
    MOVZX eax, word ptr [r12+0Bh]
    LEA edx, [rax-200h]
    TEST dx, 0FDFFh
    JZ loc_49833C
loc_49832B:
    LEA edx, [rax-800h]
    TEST dx, 0F7FFh
    JNZ loc_498493
loc_49833C:
    MOVZX ecx, word ptr [r12+13h]
    MOVZX r15d, word ptr [r12+0Eh]
    TEST ecx, ecx
    JNZ loc_498351
loc_49834C:
    MOV ecx, [r12+20h]
loc_498351:
    MOVZX esi, word ptr [r12+16h]
    TEST esi, esi
    JZ loc_498468
loc_49835F:
    MOVZX edi, ax
    MOV rbx, rax
    MOVZX r8d, word ptr [r12+11h]
    MOV [rsp+58h+s1], rax
    MOVZX eax, byte ptr [r12+10h]
    LEA r9d, [rdi-1]
    XOR edx, edx
    MOVSXD r9, r9d
    IMUL esi, eax
    MOVZX eax, r8w
    SHL rax, 5
    ADD rax, r9
    MOVZX r9d, byte ptr [r12+0Dh]
    DIV rbx
    ADD esi, r15d
    XOR edx, edx
    SUB ecx, eax
    MOV eax, ecx
    MOV rcx, r9
    SUB eax, esi
    DIV r9d
    CMP eax, 0FFF3h
    JBE loc_4984B0
loc_4983B2:
    IMUL r9d, edi
    MOV ebx, [r12+2Ch]
    MOV eax, esi
    IMUL r15d, edi
    MOV [rsp+58h+var_48], rax
    MOV ebp, 63h
    MOVSXD r14, r9d
    SHR r9d, 5
    MOV [rsp+58h+var_3C], r9d
    MOVSXD r15, r15d
    LEA esi, [rbx-2]
    JMP loc_498427
loc_4983E0:
    MOV esi, [rsp+58h+var_3C]
    MOV rdi, rax
    CALL sub_498180
    TEST rax, rax
    JNZ loc_498590
loc_4983F5:
    LEA rsi, [r15+rbx*4]
    MOV rdx, r14
    MOV rdi, r13
    CALL sub_4999F0
    TEST rax, rax
    JZ loc_498446
loc_498409:
    MOV ebx, [rax]
    AND ebx, 0FFFFFFFh
    LEA esi, [rbx-2]
    CMP esi, 0FFFFFF4h
    JA loc_498478
loc_49841C:
    SUB ebp, 1
    JZ loc_498478
loc_498421:
    MOVZX ecx, byte ptr [r12+0Dh]
loc_498427:
    IMUL rsi, rcx
    MOV rdx, r14
    MOV rdi, r13
    ADD rsi, [rsp+58h+var_48]
    IMUL rsi, [rsp+58h+s1]
    CALL sub_4999F0
    TEST rax, rax
    JNZ loc_4983E0
loc_498446:
    MOV qword ptr [r13+98h], offset aVfat
    ADD rsp, 28h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_498468:
    MOV esi, [r12+24h]
    JMP loc_49835F
loc_498478:
    XOR esi, esi
    MOV edx, 200h
    MOV rdi, r13
    CALL sub_4999F0
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_498548
loc_498493:
    ADD rsp, 28h
    MOV eax, 0FFFFFFFFh
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4984B0:
    IMUL esi, edi
    MOVZX ebx, r8w
    MOV rdi, r13
    MOV edx, ebx
    SHL edx, 5
    CALL sub_4999F0
    TEST rax, rax
    JZ loc_498446
loc_4984CD:
    MOV esi, ebx
    MOV rdi, rax
    CALL sub_498180
    XOR esi, esi
    MOV edx, 200h
    MOV rdi, r13
    MOV rbp, rax
    CALL sub_4999F0
    TEST rax, rax
    MOV rbx, rax
    JZ loc_498493
loc_4984F1:
    TEST rbp, rbp
    JZ loc_498510
loc_4984F6:
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV rdi, rbp
    CALL _memcmp
    TEST eax, eax
    JNZ loc_4985F0
loc_498510:
    LEA rbp, [rbx+2Bh]
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV rdi, rbp
    CALL _memcmp
    TEST eax, eax
    JNZ loc_4985F0
loc_49852E:
    LEA rsi, [rbx+27h]
    XOR edx, edx
    MOV rdi, r13
    CALL sub_499830
    JMP loc_498446
loc_498548:
    LEA rbp, [rbx+47h]
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV rdi, rbp
    CALL _memcmp
    TEST eax, eax
    JNZ loc_498578
loc_498562:
    LEA rsi, [rbx+43h]
    XOR edx, edx
    MOV rdi, r13
    CALL sub_499830
    JMP loc_498446
loc_498578:
    MOV edx, 0Bh
    MOV rsi, rbp
    MOV rdi, r13
    CALL sub_4997B0
    JMP loc_498562
loc_498590:
    XOR esi, esi
    MOV edx, 200h
    MOV rdi, r13
    MOV [rsp+58h+s1], rax
    CALL sub_4999F0
    TEST rax, rax
    MOV rbx, rax
    MOV rcx, [rsp+58h+s1]
    JZ loc_498493
loc_4985B5:
    MOV rdi, rcx
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV [rsp+58h+s1], rcx
    CALL _memcmp
    TEST eax, eax
    MOV rcx, [rsp+58h+s1]
    JZ loc_498548
loc_4985D9:
    MOV edx, 0Bh
    MOV rsi, rcx
    MOV rdi, r13
    CALL sub_4997B0
    JMP loc_498562
loc_4985F0:
    MOV edx, 0Bh
    MOV rsi, rbp
    MOV rdi, r13
    CALL sub_4997B0
    JMP loc_49852E
loc_498605:
    CMP byte ptr [r12+2], 90h
    JNZ loc_498493
loc_498611:
    JMP loc_4982CD
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'MemoryAccess'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x20', '0x28', '0x30', '0x38', '0x40', '0x40', '0x80', '0x81', '0x82', '0x83', '0x84', '0x85'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Initialization', 'inferred_category': 'Utility'}

##### T 71 - volume_id_probe_vfat
```assembly
loc_4BE4E0:
    PUSH r15
    PUSH r14
    XOR esi, esi
    PUSH r13
    PUSH r12
    MOV edx, 200h
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 28h
    CALL sub_4BFF90
    TEST rax, rax
    JZ loc_4BE86D
loc_4BE506:
    LEA rdi, [rax+3]
    MOV edx, 4
    MOV esi, offset aNtfs
    MOV r12, rax
    CALL _memcmp
    TEST eax, eax
    JZ loc_4BE86D
loc_4BE524:
    LEA rbx, [r12+52h]
    MOV edx, 5
    MOV esi, offset aMswin
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_4BE608
loc_4BE543:
    MOV edx, 8
    MOV esi, offset aFat32
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_4BE608
loc_4BE55D:
    LEA rbx, [r12+36h]
    MOV edx, 8
    MOV esi, offset aFat16
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_4BE608
loc_4BE57C:
    MOV edx, 5
    MOV esi, offset aMsdos
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_4BE608
loc_4BE592:
    MOV edx, 8
    MOV esi, offset aFat12
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JZ loc_4BE608
loc_4BE5A8:
    MOVZX eax, byte ptr [r12]
    CMP al, 0EBh
    JZ loc_4BE9C4
loc_4BE5B5:
    CMP al, 0E9h
    JNZ loc_4BE86D
loc_4BE5BD:
    CMP word ptr [r12+1Ah], 0
    JZ loc_4BE86D
loc_4BE5CA:
    MOVZX eax, byte ptr [r12+0Dh]
    TEST al, al
    JZ loc_4BE86D
loc_4BE5D8:
    LEA edx, [rax-1]
    TEST edx, eax
    JNZ loc_4BE86D
loc_4BE5E3:
    MOVZX eax, byte ptr [r12+15h]
    CMP al, 0F7h
    JA loc_4BE5F5
loc_4BE5ED:
    CMP al, 0F0h
    JNZ loc_4BE86D
loc_4BE5F5:
    CMP byte ptr [r12+10h], 2
    JNZ loc_4BE86D
loc_4BE601:
    NOP dword ptr [rax+00000000h]
loc_4BE608:
    MOVZX edx, word ptr [r12+0Bh]
    LEA eax, [rdx-200h]
    TEST ax, 0FDFFh
    JZ loc_4BE62A
loc_4BE61A:
    LEA eax, [rdx-800h]
    TEST ax, 0F7FFh
    JNZ loc_4BE86D
loc_4BE62A:
    MOVZX ecx, word ptr [r12+13h]
    MOVZX r15d, word ptr [r12+0Eh]
    TEST ecx, ecx
    JNZ loc_4BE63F
loc_4BE63A:
    MOV ecx, [r12+20h]
loc_4BE63F:
    MOVZX eax, word ptr [r12+16h]
    TEST eax, eax
    JZ loc_4BE848
loc_4BE64D:
    MOVZX edi, byte ptr [r12+10h]
    MOVZX r13d, word ptr [r12+11h]
    MOVZX esi, dx
    MOVZX ebx, dx
    MOVZX r14d, byte ptr [r12+0Dh]
    MOV [rsp+58h+s1], rbx
    IMUL eax, edi
    LEA edi, [rax+r15]
    MOVZX eax, r13w
    SHL rax, 5
    MOV rdx, rax
    LEA eax, [rsi-1]
    CDQE 
    ADD rax, rdx
    XOR edx, edx
    DIV rbx
    XOR edx, edx
    SUB ecx, eax
    MOV eax, ecx
    MOV rcx, r14
    SUB eax, edi
    DIV r14d
    CMP eax, 0FFF3h
    JBE loc_4BE881
loc_4BE6A1:
    MOV eax, r14d
    MOV r14d, [r12+2Ch]
    MOV ebx, edi
    IMUL eax, esi
    MOV [rsp+58h+var_50], rbx
    MOV ebx, 63h
    IMUL r15d, esi
    LEA esi, [r14-2]
    MOVSXD r13, eax
    SHR eax, 5
    MOV [rsp+58h+var_44], eax
    SUB eax, 1
    MOVSXD r15, r15d
    ADD rax, 1
    SHL rax, 5
    MOV [rsp+58h+var_40], rax
    NOP dword ptr [rax]
loc_4BE6E0:
    IMUL rsi, rcx
    MOV rdx, r13
    MOV rdi, rbp
    ADD rsi, [rsp+58h+var_50]
    IMUL rsi, [rsp+58h+s1]
    CALL sub_4BFF90
    TEST rax, rax
    MOV rcx, rax
    JZ loc_4BE7E0
loc_4BE705:
    MOV eax, [rsp+58h+var_44]
    TEST eax, eax
    JZ loc_4BE800
loc_4BE711:
    MOVZX eax, byte ptr [rcx]
    MOV rdi, [rsp+58h+var_40]
    LEA rsi, [rcx+rdi]
    TEST al, al
    JNZ loc_4BE748
loc_4BE721:
    JMP loc_4BE800
loc_4BE730:
    ADD rcx, 20h
    CMP rcx, rsi
    JZ loc_4BE800
loc_4BE73D:
    MOVZX eax, byte ptr [rcx]
    TEST al, al
    JZ loc_4BE800
loc_4BE748:
    CMP al, 0E5h
    JZ loc_4BE730
loc_4BE74C:
    MOVZX eax, byte ptr [rcx+0Bh]
    MOV edx, eax
    AND edx, 3Fh
    CMP dl, 0Fh
    JZ loc_4BE730
loc_4BE75A:
    AND eax, 18h
    CMP al, 8
    JNZ loc_4BE730
loc_4BE761:
    CMP word ptr [rcx+14h], 0
    JNZ loc_4BE730
loc_4BE768:
    CMP word ptr [rcx+1Ah], 0
    JNZ loc_4BE730
loc_4BE76F:
    XOR esi, esi
    MOV edx, 200h
    MOV rdi, rbp
    MOV [rsp+58h+s1], rcx
    CALL sub_4BFF90
    TEST rax, rax
    MOV rbx, rax
    MOV rcx, [rsp+58h+s1]
    JZ loc_4BE86D
loc_4BE792:
    MOV rdi, rcx
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV [rsp+58h+s1], rcx
    CALL _memcmp
    TEST eax, eax
    MOV rcx, [rsp+58h+s1]
    JNZ loc_4BE988
loc_4BE7B4:
    LEA r12, [rbx+47h]
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV rdi, r12
    CALL _memcmp
    TEST eax, eax
    JNZ loc_4BE9AF
loc_4BE7D2:
    LEA rsi, [rbx+43h]
    XOR edx, edx
    MOV rdi, rbp
    CALL sub_4BFE10
loc_4BE7E0:
    MOV qword ptr [rbp+98h], offset aVfat
    ADD rsp, 28h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4BE800:
    MOV r8d, r14d
    MOV rdx, r13
    MOV rdi, rbp
    LEA rsi, [r15+r8*4]
    CALL sub_4BFF90
    TEST rax, rax
    JZ loc_4BE7E0
loc_4BE817:
    MOV r8d, [rax]
    MOV r14d, r8d
    AND r14d, 0FFFFFFFh
    LEA esi, [r14-2]
    CMP esi, 0FFFFFF4h
    JA loc_4BE963
loc_4BE834:
    SUB ebx, 1
    JZ loc_4BE963
loc_4BE83D:
    MOVZX ecx, byte ptr [r12+0Dh]
    JMP loc_4BE6E0
loc_4BE848:
    MOV eax, [r12+24h]
    JMP loc_4BE64D
loc_4BE852:
    XOR esi, esi
    MOV edx, 200h
    MOV rdi, rbp
    CALL sub_4BFF90
    TEST rax, rax
    MOV r12, rax
    JNZ loc_4BE934
loc_4BE86D:
    MOV eax, 0FFFFFFFFh
loc_4BE872:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4BE881:
    IMUL esi, edi
    MOVZX r12d, r13w
    MOV rdi, rbp
    MOV edx, r12d
    SHL edx, 5
    CALL sub_4BFF90
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4BE7E0
loc_4BE8A2:
    TEST r13w, r13w
    JZ loc_4BE852
loc_4BE8A8:
    MOVZX eax, byte ptr [rax]
    TEST al, al
    JZ loc_4BE852
loc_4BE8AF:
    LEA edx, [r12-1]
    ADD rdx, 1
    SHL rdx, 5
    ADD rdx, rbx
    JMP loc_4BE8DC
loc_4BE8C8:
    ADD rbx, 20h
    CMP rdx, rbx
    JZ loc_4BE852
loc_4BE8D1:
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_4BE852
loc_4BE8DC:
    CMP al, 0E5h
    JZ loc_4BE8C8
loc_4BE8E0:
    MOVZX eax, byte ptr [rbx+0Bh]
    MOV ecx, eax
    AND ecx, 3Fh
    CMP cl, 0Fh
    JZ loc_4BE8C8
loc_4BE8EE:
    AND eax, 18h
    CMP al, 8
    JNZ loc_4BE8C8
loc_4BE8F5:
    CMP word ptr [rbx+14h], 0
    JNZ loc_4BE8C8
loc_4BE8FC:
    CMP word ptr [rbx+1Ah], 0
    JNZ loc_4BE8C8
loc_4BE903:
    XOR esi, esi
    MOV edx, 200h
    MOV rdi, rbp
    CALL sub_4BFF90
    TEST rax, rax
    MOV r12, rax
    JZ loc_4BE86D
loc_4BE91E:
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JNZ loc_4BE99D
loc_4BE934:
    LEA rbx, [r12+2Bh]
    MOV edx, 0Bh
    MOV esi, offset aNoName
    MOV rdi, rbx
    CALL _memcmp
    TEST eax, eax
    JNZ loc_4BE99D
loc_4BE94F:
    LEA rsi, [r12+27h]
    XOR edx, edx
    MOV rdi, rbp
    CALL sub_4BFE10
    JMP loc_4BE7E0
loc_4BE963:
    XOR esi, esi
    MOV edx, 200h
    MOV rdi, rbp
    CALL sub_4BFF90
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4BE7B4
loc_4BE97E:
    MOV eax, 0FFFFFFFFh
    JMP loc_4BE872
loc_4BE988:
    MOV edx, 0Bh
    MOV rsi, rcx
    MOV rdi, rbp
    CALL sub_4BFD90
    JMP loc_4BE7D2
loc_4BE99D:
    MOV edx, 0Bh
    MOV rsi, rbx
    MOV rdi, rbp
    CALL sub_4BFD90
    JMP loc_4BE94F
loc_4BE9AF:
    MOV edx, 0Bh
    MOV rsi, r12
    MOV rdi, rbp
    CALL sub_4BFD90
    JMP loc_4BE7D2
loc_4BE9C4:
    CMP byte ptr [r12+2], 90h
    JNZ loc_4BE86D
loc_4BE9D0:
    JMP loc_4BE5BD
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x20', '0x28', '0x30', '0x38', '0x40', '0x40', '0x80', '0x81', '0x82', '0x83', '0x84', '0x85'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Initialization/Cleanup'}

##### Q 72 - do_msg
```assembly
loc_48C890:
    PUSH r15
    PUSH r14
    XOR edi, edi
    PUSH r13
    PUSH r12
    MOV esi, 0Ch
    PUSH rbp
    PUSH rbx
    SUB rsp, 0B8h
    LEA rdx, [rsp+0E8h+buf]
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_40], rax
    XOR eax, eax
    CALL _msgctl
    TEST eax, eax
    JS loc_48CD0C
loc_48C8CD:
    CMP cs:byte_7431D8, 5
    MOV r12d, eax
    JA def_48C8E4
loc_48C8DD:
    MOVZX eax, cs:byte_7431D8
    JMP ds:jpt_48C8E4[rax*8]
loc_48C8EB:
    MOV edx, offset aQueuesPids
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r9d, offset aLrpid
    MOV r8d, offset aLspid
    MOV ecx, offset aOwner
    MOV edx, offset aMsqid
    MOV esi, offset unk_516FCD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48C928:
    LEA rax, [rsp+0E8h+buf.msg_perm.__unused1]
    XOR ebx, ebx
    LEA r15, [rsp+0E8h+buf.msg_lspid]
    LEA r14, [rax+38h]
    ADD rax, 30h
    MOV [rsp+0E8h+timer], rax
    JMP loc_48C9BC
loc_48C948:
    MOV edi, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    CALL sub_40D6D0
    MOV r13, rax
    MOVZX eax, cs:byte_7431D8
    CMP al, 4
    JZ loc_48CB90
loc_48C963:
    CMP al, 5
    JNZ loc_48CC20
loc_48C96B:
    TEST r13, r13
    JZ loc_48CCF0
loc_48C974:
    MOV rcx, [r13+0]
    MOV edx, ebp
    MOV esi, offset a8d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48C98B:
    MOV ecx, [rsp+0E8h+var_54]
    MOV edx, [rsp+0E8h+var_58]
    MOV esi, offset a5d5d
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP word ptr [rax+rax+00h]
loc_48C9B0:
    ADD ebx, 1
    CMP r12d, ebx
    JL loc_48CA40
loc_48C9BC:
    LEA rdx, [rsp+0E8h+buf.msg_perm.__unused1]
    MOV esi, 0Bh
    MOV edi, ebx
    CALL _msgctl
    TEST eax, eax
    MOV ebp, eax
    JS loc_48C9B0
loc_48C9D3:
    CMP cs:byte_7431D8, 3
    JNZ loc_48C948
loc_48C9E0:
    LEA rsi, [rsp+0E8h+buf.msg_perm.__unused1]
    MOV edi, eax
    CALL sub_48C760
    JMP loc_48C9B0
loc_48C9EE:
    LEA rdx, [rsp+0E8h+buf]
    XOR edi, edi
    MOV esi, 3
    CALL _msgctl
    TEST eax, eax
    JS loc_48CA40
loc_48CA03:
    MOV edx, offset aSLimits
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r8d, [rsp+0E8h+buf.msg_perm.cuid]
    MOV ecx, [rsp+0E8h+buf.msg_perm.gid]
    MOV esi, offset aMaxQueuesSyste
    MOV edx, [rsp+0E8h+buf.msg_perm.cgid]
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP word ptr [rax+rax+00000000h]
loc_48CA40:
    MOV rax, [rsp+0E8h+var_40]
    XOR rax, fs:28h
    JNZ loc_48CD27
loc_48CA57:
    ADD rsp, 0B8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_48CA69:
    MOV edx, offset aSStatus
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r8d, dword ptr [rsp+0E8h+buf.msg_perm.__seq]
    MOV ecx, [rsp+0E8h+buf.msg_perm.uid]
    MOV esi, offset aAllocatedQueue
    MOV edx, [rsp+0E8h+buf.msg_perm.__key]
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48CA40
loc_48CA9F:
    MOV edx, offset aQueuesCreators
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH 50DF61h
    PUSH (offset aCuid+1)
    MOV r9d, offset aCgid
    MOV r8d, offset aCuid
    MOV ecx, offset aPerms
    MOV edx, offset aMsqid
    MOV esi, offset a10s10s10s10s10
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    POP r8
    POP r9
    JMP loc_48C928
loc_48CAEF:
    MOV edx, offset aQueuesSendRecv
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH rcx
    PUSH offset aChange
    MOV esi, offset a8s10s20s20s20s
    MOV edi, 1
    MOV r9d, 510F57h
    MOV r8d, offset aSend_0
    MOV ecx, offset aOwner
    MOV edx, offset aMsqid
    XOR eax, eax
    CALL ___printf_chk
    POP rsi
    POP rdi
    JMP loc_48C928
loc_48CB39:
    MOV edx, offset aQueues
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH offset aMessages
    PUSH offset aUsedBytes
    MOV edx, 512451h
    MOV r9d, offset aPerms
    MOV r8d, offset aOwner
    MOV ecx, offset aMsqid
    MOV esi, offset a10s10s10s10s12
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    POP rax
    POP rdx
    JMP loc_48C928
loc_48CB90:
    TEST r13, r13
    JZ loc_48CCB8
loc_48CB99:
    MOV rcx, [r13+0]
    MOV edx, ebp
    MOV esi, offset a8d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48CBB0:
    CMP [rsp+0E8h+buf.msg_qnum], 0
    MOV edx, offset aNotSet
    JNZ loc_48CC94
loc_48CBC1:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+0E8h+buf.msg_qbytes], 0
    MOV edx, offset aNotSet
    JNZ loc_48CCA7
loc_48CBE3:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP qword ptr [rsp+0E8h+buf.msg_lspid], 0
    MOV edx, offset aNotSet
    JNZ loc_48CC83
loc_48CC05:
    MOV esi, offset a2016s_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48C9B0
loc_48CC20:
    MOV edx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1]
    XOR eax, eax
    MOV esi, offset a0x08x
    MOV edi, 1
    CALL ___printf_chk
    TEST r13, r13
    JZ loc_48CCD4
loc_48CC3E:
    MOV rcx, [r13+0]
    MOV edx, ebp
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48CC55:
    MOVZX edx, word ptr [rsp+0E8h+buf.msg_stime+4]
    MOV r8, [rsp+0E8h+buf.__unused5]
    MOV esi, offset a10o12ld12ld
    MOV rcx, [rsp+0E8h+buf.__unused4]
    MOV edi, 1
    XOR eax, eax
    AND edx, 1FFh
    CALL ___printf_chk
    JMP loc_48C9B0
loc_48CC83:
    MOV rdi, r15
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_48CC05
loc_48CC94:
    MOV rdi, [rsp+0E8h+timer]
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_48CBC1
loc_48CCA7:
    MOV rdi, r14
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_48CBE3
loc_48CCB8:
    MOV ecx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    MOV edx, ebp
    MOV esi, offset a8d10d
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48CBB0
loc_48CCD4:
    MOV ecx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    MOV edx, ebp
    MOV esi, offset unk_51704D
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48CC55
loc_48CCF0:
    MOV ecx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    MOV edx, ebp
    MOV esi, offset a8d10d
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48C98B
loc_48CD0C:
    MOV edx, offset aMessageQueues
    MOV esi, offset aKernelNotConfi
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48CA40
loc_48CD27:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2', '0x20', '0x9', '0x100002600'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### T 72 - do_msg
```assembly
loc_4B1570:
    PUSH r15
    PUSH r14
    XOR edi, edi
    PUSH r13
    PUSH r12
    MOV esi, 0Ch
    PUSH rbp
    PUSH rbx
    SUB rsp, 0B8h
    LEA rdx, [rsp+0E8h+buf]
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_40], rax
    XOR eax, eax
    CALL _msgctl
    TEST eax, eax
    JS loc_4B19EC
loc_4B15AD:
    CMP cs:byte_78D1D8, 5
    MOV r12d, eax
    JA def_4B15C4
loc_4B15BD:
    MOVZX eax, cs:byte_78D1D8
    JMP ds:jpt_4B15C4[rax*8]
loc_4B15CB:
    MOV edx, offset aQueuesPids
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r9d, offset aLrpid
    MOV r8d, offset aLspid
    MOV ecx, offset aOwner
    MOV edx, offset aMsqid
    MOV esi, offset unk_565053
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1608:
    LEA rax, [rsp+0E8h+buf.msg_perm.__unused1]
    XOR ebx, ebx
    LEA r15, [rsp+0E8h+buf.msg_lspid]
    LEA r14, [rax+38h]
    ADD rax, 30h
    MOV [rsp+0E8h+timer], rax
    JMP loc_4B169C
loc_4B1628:
    MOV edi, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    CALL sub_410130
    MOV r13, rax
    MOVZX eax, cs:byte_78D1D8
    CMP al, 4
    JZ loc_4B1870
loc_4B1643:
    CMP al, 5
    JNZ loc_4B1900
loc_4B164B:
    TEST r13, r13
    JZ loc_4B19D0
loc_4B1654:
    MOV rcx, [r13+0]
    MOV edx, ebp
    MOV esi, offset a8d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B166B:
    MOV ecx, [rsp+0E8h+var_54]
    MOV edx, [rsp+0E8h+var_58]
    MOV esi, offset a5d5d
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP word ptr [rax+rax+00h]
loc_4B1690:
    ADD ebx, 1
    CMP r12d, ebx
    JL loc_4B1720
loc_4B169C:
    LEA rdx, [rsp+0E8h+buf.msg_perm.__unused1]
    MOV esi, 0Bh
    MOV edi, ebx
    CALL _msgctl
    TEST eax, eax
    MOV ebp, eax
    JS loc_4B1690
loc_4B16B3:
    CMP cs:byte_78D1D8, 3
    JNZ loc_4B1628
loc_4B16C0:
    LEA rsi, [rsp+0E8h+buf.msg_perm.__unused1]
    MOV edi, eax
    CALL sub_4B1440
    JMP loc_4B1690
loc_4B16CE:
    LEA rdx, [rsp+0E8h+buf]
    XOR edi, edi
    MOV esi, 3
    CALL _msgctl
    TEST eax, eax
    JS loc_4B1720
loc_4B16E3:
    MOV edx, offset aSLimits
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r8d, [rsp+0E8h+buf.msg_perm.cuid]
    MOV ecx, [rsp+0E8h+buf.msg_perm.gid]
    MOV esi, offset aMaxQueuesSyste
    MOV edx, [rsp+0E8h+buf.msg_perm.cgid]
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP word ptr [rax+rax+00000000h]
loc_4B1720:
    MOV rax, [rsp+0E8h+var_40]
    XOR rax, fs:28h
    JNZ loc_4B1A07
loc_4B1737:
    ADD rsp, 0B8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B1749:
    MOV edx, offset aSStatus
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r8d, dword ptr [rsp+0E8h+buf.msg_perm.__seq]
    MOV ecx, [rsp+0E8h+buf.msg_perm.uid]
    MOV esi, offset aAllocatedQueue
    MOV edx, [rsp+0E8h+buf.msg_perm.__key]
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1720
loc_4B177F:
    MOV edx, offset aQueuesCreators
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH 55C075h
    PUSH (offset aCuid+1)
    MOV r9d, offset aCgid
    MOV r8d, offset aCuid
    MOV ecx, offset aPerms
    MOV edx, offset aMsqid
    MOV esi, offset a10s10s10s10s10
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    POP r8
    POP r9
    JMP loc_4B1608
loc_4B17CF:
    MOV edx, offset aQueuesSendRecv
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH rcx
    PUSH offset aChange
    MOV esi, offset a8s10s20s20s20s
    MOV edi, 1
    MOV r9d, 55EFD0h
    MOV r8d, offset aSend_0
    MOV ecx, offset aOwner
    MOV edx, offset aMsqid
    XOR eax, eax
    CALL ___printf_chk
    POP rsi
    POP rdi
    JMP loc_4B1608
loc_4B1819:
    MOV edx, offset aQueues
    MOV esi, offset aMessageS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH offset aMessages
    PUSH offset aUsedBytes
    MOV edx, 560501h
    MOV r9d, offset aPerms
    MOV r8d, offset aOwner
    MOV ecx, offset aMsqid
    MOV esi, offset a10s10s10s10s12
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    POP rax
    POP rdx
    JMP loc_4B1608
loc_4B1870:
    TEST r13, r13
    JZ loc_4B1998
loc_4B1879:
    MOV rcx, [r13+0]
    MOV edx, ebp
    MOV esi, offset a8d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1890:
    CMP [rsp+0E8h+buf.msg_qnum], 0
    MOV edx, offset aNotSet
    JNZ loc_4B1974
loc_4B18A1:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+0E8h+buf.msg_qbytes], 0
    MOV edx, offset aNotSet
    JNZ loc_4B1987
loc_4B18C3:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP qword ptr [rsp+0E8h+buf.msg_lspid], 0
    MOV edx, offset aNotSet
    JNZ loc_4B1963
loc_4B18E5:
    MOV esi, offset a2016s_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1690
loc_4B1900:
    MOV edx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1]
    XOR eax, eax
    MOV esi, offset a0x08x
    MOV edi, 1
    CALL ___printf_chk
    TEST r13, r13
    JZ loc_4B19B4
loc_4B191E:
    MOV rcx, [r13+0]
    MOV edx, ebp
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1935:
    MOVZX edx, word ptr [rsp+0E8h+buf.msg_stime+4]
    MOV r8, [rsp+0E8h+buf.__unused5]
    MOV esi, offset a10o12ld12ld
    MOV rcx, [rsp+0E8h+buf.__unused4]
    MOV edi, 1
    XOR eax, eax
    AND edx, 1FFh
    CALL ___printf_chk
    JMP loc_4B1690
loc_4B1963:
    MOV rdi, r15
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_4B18E5
loc_4B1974:
    MOV rdi, [rsp+0E8h+timer]
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_4B18A1
loc_4B1987:
    MOV rdi, r14
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_4B18C3
loc_4B1998:
    MOV ecx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    MOV edx, ebp
    MOV esi, offset a8d10d
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1890
loc_4B19B4:
    MOV ecx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    MOV edx, ebp
    MOV esi, offset unk_5650D3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1935
loc_4B19D0:
    MOV ecx, dword ptr [rsp+0E8h+buf.msg_perm.__unused1+4]
    MOV edx, ebp
    MOV esi, offset a8d10d
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B166B
loc_4B19EC:
    MOV edx, offset aMessageQueues
    MOV esi, offset aKernelNotConfi
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1720
loc_4B1A07:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2', '0x9', '0x20', '0x100002600'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### Q 73 - open3_or_warn
```assembly
loc_40AE76:
    ADD rsp, 8
    MOV eax, ebx
    POP rbx
    POP rbp
    RETN 
loc_40AE80:
    MOV rsi, rbp
    XOR eax, eax
    MOV edi, offset aCanTOpenS
    CALL sub_409CC0
    ADD rsp, 8
    MOV eax, ebx
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xB8', '0x2', '0x3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Recursive', 'inferred_category': 'Utility/Helper'}

##### T 73 - open3_or_warn
```assembly
loc_40C410:
    PUSH rbp
    PUSH rbx
    XOR eax, eax
    MOV rbp, rdi
    SUB rsp, 8
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JS loc_40C430
loc_40C426:
    ADD rsp, 8
    MOV eax, ebx
    POP rbx
    POP rbp
    RETN 
loc_40C430:
    MOV rsi, rbp
    XOR eax, eax
    MOV edi, offset aCanTOpenS
    CALL sub_40A6D0
    ADD rsp, 8
    MOV eax, ebx
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xB8', '0x2', '0x3', '0x10', '0x0', '0x2E8', '0x2E3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop with Conditional Checks', 'inferred_category': 'Utility Function'}

##### Q 74 - data_skip
```assembly
loc_4A7860:
    MOV rdx, [rdi+28h]
    MOV rax, rdi
    MOV edi, [rdi+4]
    MOV rsi, [rdx+20h]
    JMP qword ptr [rax+40h]
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x58', '0x1E8', '0x608', '0x8', '0x20', '0x7B9', '0x9D0', '0x79A', '0x50A8', '0x3B4', '0x5B0', '0x5E8', '0x5D8', '0x5E0', '0xB', '0x620', '0x1', '0x3C0', '0x50', '0x4BD', '0x5', '0x4C7', '0x4D6'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 26, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'SMTP Protocol Handling', 'inferred_category': 'Network Communication'}

##### T 74 - data_skip
```assembly
loc_4D7BC0:
    MOV rdx, [rdi+28h]
    MOV rax, rdi
    MOV edi, [rdi+4]
    MOV rsi, [rdx+20h]
    JMP qword ptr [rax+40h]
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x50', '0x2', '0x3', '0x5', '0xB'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Network Communication'}

##### Q 75 - dowait
```assembly
loc_46AEB0:
    PUSH r12
    PUSH rbp
    MOV r12, rsi
    PUSH rbx
    SUB rsp, 0D0h
    MOV rbx, cs:qword_743208
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_20], rax
    XOR eax, eax
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    CMP edi, 2
    JZ loc_46B035
loc_46AEEA:
    XOR edx, edx
    TEST edi, edi
    LEA rsi, [rsp+0E8h+stat_loc]
    SETZ dl
    MOV edi, 0FFFFFFFFh
    MOV eax, edx
    OR eax, 2
    CMP cs:byte_742FB4, 0
    CMOVNZ edx, eax
    CALL _waitpid
    MOV ebp, eax
loc_46AF11:
    XOR edi, edi
    TEST ebp, ebp
    JLE loc_46AFB4
loc_46AF1B:
    MOV r10, cs:qword_742F98
    MOV r9d, [rsp+0E8h+stat_loc]
    TEST r10, r10
    MOV r8, r10
    JZ loc_46B13D
loc_46AF33:
    CMP byte ptr [r8+20h], 2
    JZ loc_46B130
loc_46AF3E:
    MOV esi, [r8+1Ch]
    MOV rax, [r8+10h]
    MOV ecx, 2
    XOR edi, edi
    SHL rsi, 4
    ADD rsi, rax
    JMP loc_46AF7E
loc_46AF60:
    MOV edx, [rax+4]
    CMP edx, 0FFFFFFFFh
    JZ loc_46AF98
loc_46AF68:
    TEST ecx, ecx
    JZ loc_46AF98
loc_46AF6C:
    CMP dl, 7Fh
    JZ loc_46B0B8
loc_46AF75:
    ADD rax, 10h
    CMP rsi, rax
    JBE loc_46AFA3
loc_46AF7E:
    CMP ebp, [rax]
    JNZ loc_46AF60
loc_46AF82:
    MOV edx, r9d
    MOV [rax+4], r9d
    MOV rdi, r8
    CMP edx, 0FFFFFFFFh
    JNZ loc_46AF68
loc_46AF91:
    NOP dword ptr [rax+00000000h]
loc_46AF98:
    ADD rax, 10h
    XOR ecx, ecx
    CMP rsi, rax
    JA loc_46AF7E
loc_46AFA3:
    TEST rdi, rdi
    JZ loc_46B130
loc_46AFAC:
    TEST ecx, ecx
    JNZ loc_46B0D0
loc_46AFB4:
    SUB dword ptr [rbx+38h], 1
    JNZ loc_46AFC6
loc_46AFBA:
    MOVZX eax, byte ptr [rbx+3Ch]
    TEST al, al
    JNZ loc_46B19B
loc_46AFC6:
    TEST rdi, rdi
    JZ loc_46AFEE
loc_46AFCB:
    CMP rdi, r12
    JNZ loc_46AFEE
loc_46AFD0:
    MOV esi, [rsp+0E8h+stat_loc]
    LEA rdi, [rsp+0E8h+var_58]
    MOV edx, 1
    CALL sub_467A00
    TEST eax, eax
    JNZ loc_46B152
loc_46AFEE:
    MOV rcx, [rsp+0E8h+var_20]
    XOR rcx, fs:28h
    MOV eax, ebp
    JNZ loc_46B196
loc_46B007:
    ADD rsp, 0D0h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_46B018:
    LEA rsi, [rsp+0E8h+set]
    XOR edx, edx
    MOV edi, 2
    CALL _sigprocmask
    MOVZX eax, byte ptr [rbx+3Dh]
    TEST al, al
    JZ loc_46B14B
loc_46B035:
    CMP cs:byte_742FB4, 1
    LEA rsi, [rsp+0E8h+stat_loc]
    MOV byte ptr [rbx+3Dh], 0
    MOV edi, 0FFFFFFFFh
    SBB edx, edx
    AND edx, 0FFFFFFFEh
    ADD edx, 3
    CALL _waitpid
    TEST eax, eax
    MOV ebp, eax
    JNZ loc_46AF11
loc_46B061:
    LEA rdi, [rsp+0E8h+set]
    CALL _sigfillset
    LEA rdx, [rsp+0E8h+set]
    MOV edi, 2
    MOV rsi, rdx
    CALL _sigprocmask
    MOVZX eax, byte ptr [rbx+3Dh]
    TEST al, al
    JZ loc_46B0A6
loc_46B085:
    JMP loc_46B018
loc_46B090:
    LEA rdi, [rsp+0E8h+set]
    CALL _sigsuspend
    MOVZX eax, byte ptr [rbx+3Dh]
    TEST al, al
    JNZ loc_46B018
loc_46B0A6:
    MOVZX eax, byte ptr [rbx+3Eh]
    TEST al, al
    JZ loc_46B090
loc_46B0AE:
    JMP loc_46B018
loc_46B0B8:
    MOV [r8+18h], edx
    MOV ecx, 1
    JMP loc_46AF75
loc_46B0D0:
    MOVZX eax, byte ptr [rdi+20h]
    OR byte ptr [rdi+21h], 10h
    CMP ecx, eax
    JZ loc_46AFB4
loc_46B0E0:
    CMP ecx, 1
    MOV [rdi+20h], cl
    JNZ loc_46AFB4
loc_46B0EC:
    CMP rdi, r10
    JNZ loc_46B103
loc_46B0F1:
    JMP loc_46B188
loc_46B100:
    MOV r10, rax
loc_46B103:
    MOV rax, [r10+28h]
    CMP rdi, rax
    JNZ loc_46B100
loc_46B10C:
    ADD r10, 28h
loc_46B110:
    MOV rax, [rax+28h]
    MOV [r10], rax
    MOV rax, cs:qword_742F98
    MOV cs:qword_742F98, rdi
    MOV [rdi+28h], rax
    JMP loc_46AFB4
loc_46B130:
    MOV r8, [r8+28h]
    TEST r8, r8
    JNZ loc_46AF33
loc_46B13D:
    CMP byte ptr [rsp+0E8h+stat_loc], 7Fh
    JZ loc_46B14B
loc_46B144:
    SUB cs:dword_742F90, 1
loc_46B14B:
    XOR edi, edi
    JMP loc_46AFB4
loc_46B152:
    MOV rsi, cs:stderr
    MOVSXD rdx, eax
    LEA rdi, [rsp+0E8h+var_58]
    ADD eax, 1
    MOV [rsp+rdx+0E8h+var_58], 0Ah
    CDQE 
    MOV [rsp+rax+0E8h+var_58], 0
    CALL sub_467630
    CALL sub_467600
    JMP loc_46AFEE
loc_46B188:
    MOV rax, rdi
    MOV r10d, offset qword_742F98
    JMP loc_46B110
loc_46B196:
    CALL ___stack_chk_fail
loc_46B19B:
    CALL sub_466B40
loc_46B1A0:
    PUSH r13
    PUSH r12
    MOV r13d, 7Fh
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rbp, cs:qword_743208
    LEA rdi, [rbp+40h]
    CALL sub_468140
    MOV r12, cs:qword_742FF0
    MOV rdi, [r12]
    TEST rdi, rdi
    JZ loc_46B258
loc_46B1D4:
    CMP byte ptr [rdi], 25h
    JZ loc_46B2B8
loc_46B1DD:
    CALL sub_467EE0
    MOV rbx, cs:qword_742F98
    TEST rbx, rbx
    JNZ loc_46B1F9
loc_46B1EE:
    JMP loc_46B241
loc_46B1F0:
    MOV rbx, [rbx+28h]
    TEST rbx, rbx
    JZ loc_46B241
loc_46B1F9:
    MOV edx, [rbx+1Ch]
    SUB edx, 1
    SHL rdx, 4
    ADD rdx, [rbx+10h]
    CMP eax, [rdx]
    JNZ loc_46B1F0
loc_46B20B:
    CMP byte ptr [rbx+20h], 0
    JNZ loc_46B232
loc_46B211:
    NOP dword ptr [rax+00000000h]
loc_46B218:
    XOR esi, esi
    MOV edi, 2
    CALL sub_46AEB0
    MOVZX eax, byte ptr [rbp+3Eh]
    TEST al, al
    JNZ loc_46B2A0
loc_46B22C:
    CMP byte ptr [rbx+20h], 0
    JZ loc_46B218
loc_46B232:
    OR byte ptr [rbx+21h], 4
    MOV rdi, rbx
    CALL sub_466560
    MOV r13d, eax
loc_46B241:
    ADD r12, 8
    MOV rdi, [r12]
    TEST rdi, rdi
    JNZ loc_46B1D4
loc_46B24E:
    MOV eax, r13d
    JMP loc_46B2A7
loc_46B258:
    MOV rax, cs:qword_742F98
    TEST rax, rax
    JNZ loc_46B27D
loc_46B264:
    JMP loc_46B2C7
loc_46B270:
    OR byte ptr [rax+21h], 4
    MOV rax, [rax+28h]
    TEST rax, rax
    JZ loc_46B2C7
loc_46B27D:
    CMP byte ptr [rax+20h], 0
    JNZ loc_46B270
loc_46B283:
    XOR esi, esi
    MOV edi, 2
    CALL sub_46AEB0
    MOVZX eax, byte ptr [rbp+3Eh]
    TEST al, al
    JZ loc_46B258
loc_46B297:
    NOP word ptr [rax+rax+00000000h]
loc_46B2A0:
    MOVSX eax, byte ptr [rbp+3Eh]
    SUB eax, 0FFFFFF80h
loc_46B2A7:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_46B2B8:
    XOR esi, esi
    CALL sub_468240
    MOV rbx, rax
    JMP loc_46B22C
loc_46B2C7:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0BAB1E', '0', '10', '5'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 25, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing or Dictionary Lookup', 'inferred_category': 'Data Processing'}

##### T 75 - dowait
```assembly
loc_47FB60:
    PUSH r12
    PUSH rbp
    MOV r12, rsi
    PUSH rbx
    SUB rsp, 0D0h
    MOV rbx, cs:qword_78D208
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_20], rax
    XOR eax, eax
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    CMP edi, 2
    JZ loc_47FCDD
loc_47FB9A:
    XOR edx, edx
    TEST edi, edi
    LEA rsi, [rsp+0E8h+stat_loc]
    SETZ dl
    MOV edi, 0FFFFFFFFh
    MOV eax, edx
    OR eax, 2
    CMP cs:byte_78CFB4, 0
    CMOVNZ edx, eax
    CALL _waitpid
    MOV ebp, eax
loc_47FBC1:
    TEST ebp, ebp
    JLE loc_47FD88
loc_47FBC9:
    MOV r9, cs:qword_78CF98
    MOV r8d, [rsp+0E8h+stat_loc]
    TEST r9, r9
    MOV rdi, r9
    JZ loc_47FD75
loc_47FBE1:
    CMP byte ptr [rdi+20h], 2
    JZ loc_47FD68
loc_47FBEB:
    MOV esi, [rdi+1Ch]
    MOV rax, [rdi+10h]
    MOV ecx, 2
    XOR ebx, ebx
    SHL rsi, 4
    ADD rsi, rax
    JMP loc_47FC26
loc_47FC08:
    MOV edx, [rax+4]
    CMP edx, 0FFFFFFFFh
    JZ loc_47FC40
loc_47FC10:
    TEST ecx, ecx
    JZ loc_47FC40
loc_47FC14:
    CMP dl, 7Fh
    JZ loc_47FD58
loc_47FC1D:
    ADD rax, 10h
    CMP rsi, rax
    JBE loc_47FC4B
loc_47FC26:
    CMP ebp, [rax]
    JNZ loc_47FC08
loc_47FC2A:
    MOV edx, r8d
    MOV [rax+4], r8d
    MOV rbx, rdi
    CMP edx, 0FFFFFFFFh
    JNZ loc_47FC10
loc_47FC39:
    NOP dword ptr [rax+00000000h]
loc_47FC40:
    ADD rax, 10h
    XOR ecx, ecx
    CMP rsi, rax
    JA loc_47FC26
loc_47FC4B:
    TEST rbx, rbx
    JZ loc_47FD68
loc_47FC54:
    TEST ecx, ecx
    JZ loc_47FC70
loc_47FC58:
    MOVZX eax, byte ptr [rbx+20h]
    OR byte ptr [rbx+21h], 10h
    CMP ecx, eax
    JZ loc_47FC70
loc_47FC64:
    CMP ecx, 1
    MOV [rbx+20h], cl
    JZ loc_47FDC8
loc_47FC70:
    CALL sub_47EB80
    CMP rbx, r12
    JNZ loc_47FC98
loc_47FC7A:
    MOV esi, [rsp+0E8h+stat_loc]
    LEA rdi, [rsp+0E8h+var_58]
    MOV edx, 1
    CALL sub_47FA80
    TEST eax, eax
    JNZ loc_47FD92
loc_47FC98:
    MOV rcx, [rsp+0E8h+var_20]
    XOR rcx, fs:28h
    MOV eax, ebp
    JNZ loc_47FE09
loc_47FCB1:
    ADD rsp, 0D0h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_47FCC0:
    LEA rsi, [rsp+0E8h+set]
    XOR edx, edx
    MOV edi, 2
    CALL _sigprocmask
    MOVZX eax, byte ptr [rbx+3Dh]
    TEST al, al
    JZ loc_47FD88
loc_47FCDD:
    CMP cs:byte_78CFB4, 1
    LEA rsi, [rsp+0E8h+stat_loc]
    MOV byte ptr [rbx+3Dh], 0
    MOV edi, 0FFFFFFFFh
    SBB edx, edx
    AND edx, 0FFFFFFFEh
    ADD edx, 3
    CALL _waitpid
    TEST eax, eax
    MOV ebp, eax
    JNZ loc_47FBC1
loc_47FD09:
    LEA rdi, [rsp+0E8h+set]
    CALL _sigfillset
    LEA rdx, [rsp+0E8h+set]
    MOV edi, 2
    MOV rsi, rdx
    CALL _sigprocmask
    MOVZX eax, byte ptr [rbx+3Dh]
    TEST al, al
    JZ loc_47FD46
loc_47FD2D:
    JMP loc_47FCC0
loc_47FD30:
    LEA rdi, [rsp+0E8h+set]
    CALL _sigsuspend
    MOVZX eax, byte ptr [rbx+3Dh]
    TEST al, al
    JNZ loc_47FCC0
loc_47FD46:
    MOVZX eax, byte ptr [rbx+3Eh]
    TEST al, al
    JZ loc_47FD30
loc_47FD4E:
    JMP loc_47FCC0
loc_47FD58:
    MOV [rdi+18h], edx
    MOV ecx, 1
    JMP loc_47FC1D
loc_47FD68:
    MOV rdi, [rdi+28h]
    TEST rdi, rdi
    JNZ loc_47FBE1
loc_47FD75:
    CMP byte ptr [rsp+0E8h+stat_loc], 7Fh
    JZ loc_47FD88
loc_47FD7C:
    SUB cs:dword_78CF90, 1
    NOP dword ptr [rax+rax+00h]
loc_47FD88:
    CALL sub_47EB80
    JMP loc_47FC98
loc_47FD92:
    MOV rsi, cs:stderr
    MOVSXD rdx, eax
    LEA rdi, [rsp+0E8h+var_58]
    ADD eax, 1
    MOV [rsp+rdx+0E8h+var_58], 0Ah
    CDQE 
    MOV [rsp+rax+0E8h+var_58], 0
    CALL sub_47F650
    CALL sub_47F620
    JMP loc_47FC98
loc_47FDC8:
    CMP rbx, r9
    JNZ loc_47FDD3
loc_47FDCD:
    JMP loc_47FDFE
loc_47FDD0:
    MOV r9, rax
loc_47FDD3:
    MOV rax, [r9+28h]
    CMP rbx, rax
    JNZ loc_47FDD0
loc_47FDDC:
    ADD r9, 28h
loc_47FDE0:
    MOV rax, [rax+28h]
    MOV [r9], rax
    MOV rax, cs:qword_78CF98
    MOV cs:qword_78CF98, rbx
    MOV [rbx+28h], rax
    JMP loc_47FC70
loc_47FDFE:
    MOV rax, rbx
    MOV r9d, offset qword_78CF98
    JMP loc_47FDE0
loc_47FE09:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xBAB1E', '0x20', '0x5059', '0x1', '0x10000', '0x2', '0x20000', '0x4', '0x40000', '0x8', '0x80000', '0xA', '0xFFFFFFFF', '0x10', '0x100000'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 76 - center
```assembly
loc_4830F0:
    PUSH r12
    PUSH rbp
    MOV r12d, edx
    PUSH rbx
    MOV ebx, esi
    MOV rbp, rdi
    CALL _strlen
    SUB ebx, eax
    MOV r9d, offset buf
    MOV edi, 1
    MOV esi, ebx
    MOV ecx, ebx
    SHR ecx, 1
    AND esi, 1
    ADD esi, ecx
    LEA edx, [rcx+rax]
    MOV rcx, rbp
    LEA r8d, [rsi+r12]
    XOR eax, eax
    MOV esi, offset aSS_24
    POP rbx
    POP rbp
    POP r12
    JMP ___printf_chk
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x5B0', '0x608', '0x35F', '0x63C', '0x658', '0x660', '0x65B', '0xE', '0x1', '0x620'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### T 76 - center
```assembly
loc_4A3E00:
    PUSH r12
    PUSH rbp
    MOV r12d, edx
    PUSH rbx
    MOV ebx, esi
    MOV rbp, rdi
    CALL _strlen
    SUB ebx, eax
    MOV r9d, offset data
    MOV edi, 1
    MOV esi, ebx
    MOV ecx, ebx
    SHR ecx, 1
    AND esi, 1
    ADD esi, ecx
    LEA edx, [rcx+rax]
    MOV rcx, rbp
    LEA r8d, [rsi+r12]
    XOR eax, eax
    MOV esi, offset aSS_24
    POP rbx
    POP rbp
    POP r12
    JMP ___printf_chk
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x5B0', '0x608', '0x35F', '0x63C', '0x658', '0x660', '0x620', '0xE', '0x6BC2A0', '0x1', '0x65B'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Finite State Machine', 'inferred_category': 'Complex Logic/Control Flow'}

##### Q 77 - format_address_paren
```assembly
loc_4B99DB:
    LEA rcx, [rax+1]
    MOV [rdi+28h], rcx
    MOV byte ptr [rax], 28h
loc_4B99E6:
    XOR eax, eax
    MOV esi, offset unk_742E55
    MOV edi, 1
    MOV cs:byte_742E5A, 29h
    CALL ___printf_chk
    TEST bl, bl
    JZ loc_4B9A1D
loc_4B9A02:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4B9A40
loc_4B9A13:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], bl
loc_4B9A1D:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_4B9A28:
    MOV esi, 28h
    MOV [rsp+18h+var_10], rdx
    CALL ___overflow
    MOV rdx, [rsp+18h+var_10]
    JMP loc_4B99E6
loc_4B9A40:
    ADD rsp, 10h
    MOVZX esi, bl
    POP rbx
    JMP ___overflow
```
None

##### T 77 - format_address_paren
```assembly
loc_4F21F0:
    PUSH rbx
    MOV rdx, rdi
    MOV ebx, esi
    SUB rsp, 10h
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4F2258
loc_4F220B:
    LEA rcx, [rax+1]
    MOV [rdi+28h], rcx
    MOV byte ptr [rax], 28h
loc_4F2216:
    XOR eax, eax
    MOV esi, offset unk_78CE55
    MOV edi, 1
    MOV cs:byte_78CE5A, 29h
    CALL ___printf_chk
    TEST bl, bl
    JZ loc_4F224D
loc_4F2232:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4F2270
loc_4F2243:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], bl
loc_4F224D:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_4F2258:
    MOV esi, 28h
    MOV [rsp+18h+var_10], rdx
    CALL ___overflow
    MOV rdx, [rsp+18h+var_10]
    JMP loc_4F2216
loc_4F2270:
    ADD rsp, 10h
    MOVZX esi, bl
    POP rbx
    JMP ___overflow
```
None

##### Q 78 - get_file
```assembly
loc_45A780:
    MOV rax, cs:qword_7431F0
    MOVZX edx, byte ptr [rax]
    CMP [rdi+0Ch], dl
    JZ loc_45A860
loc_45A793:
    PUSH r15
    PUSH r14
    ADD rax, 28h
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    MOV [rdi+0Ch], dl
    MOV rdx, rdi
    SUB rdx, rax
    MOV rbp, [rdi]
    MOV [rsp+48h+var_40], rdi
    MOV rax, rdx
    MOV ebx, [rdi+8]
    SAR rax, 4
    MOV rax, ds:off_4FA6C0[rax*8]
    TEST rbp, rbp
    MOV [rsp+48h+var_48], rax
    JNZ loc_45A7FD
loc_45A7D1:
    JMP loc_45A864
loc_45A7E0:
    CMP ebx, 3FFFh
    JG loc_45A850
loc_45A7E8:
    CMP r15d, r12d
    JNZ loc_45A850
loc_45A7ED:
    ADD ebx, ebx
    MOV rdi, rbp
    MOVSXD rsi, ebx
    CALL sub_40ACF0
    MOV rbp, rax
loc_45A7FD:
    MOV rdi, [rsp+48h+var_48]
    LEA r15d, [rbx-1]
    XOR esi, esi
    CALL sub_40AE50
    MOVSXD rdx, r15d
    MOV r14d, eax
    MOV rsi, rbp
    MOV edi, eax
    MOV byte ptr [rbp+0], 0
    CALL _read
    MOV edi, r14d
    MOV r12, rax
    MOVSXD r13, eax
    CALL _close
    TEST r12d, r12d
    JG loc_45A7E0
loc_45A833:
    MOV rax, [rsp+48h+var_40]
    MOV [rax+8], ebx
    MOV [rax], rbp
    ADD rsp, 18h
    POP rbx
    MOV rax, rbp
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45A850:
    MOV byte ptr [rbp+r13+0], 0
    JMP loc_45A833
loc_45A860:
    MOV rax, [rdi]
    RETN 
loc_45A864:
    MOV edi, 100h
    MOV ebx, 100h
    CALL sub_40ACD0
    MOV rbp, rax
    JMP loc_45A7FD
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0x419h', '0x40Bh', '0x20h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Concatenation', 'inferred_category': 'Utility/Helper'}

##### T 78 - get_file
```assembly
loc_46E9F0:
    MOV rax, cs:qword_78D1F0
    MOVZX edx, byte ptr [rax]
    CMP [rdi+0Ch], dl
    JZ loc_46EAD0
loc_46EA03:
    PUSH r15
    PUSH r14
    ADD rax, 28h
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    MOV [rdi+0Ch], dl
    MOV rdx, rdi
    SUB rdx, rax
    MOV rbp, [rdi]
    MOV [rsp+48h+var_40], rdi
    MOV rax, rdx
    MOV ebx, [rdi+8]
    SAR rax, 4
    MOV rax, ds:off_548200[rax*8]
    TEST rbp, rbp
    MOV [rsp+48h+var_48], rax
    JNZ loc_46EA6D
loc_46EA41:
    JMP loc_46EAD4
loc_46EA50:
    CMP ebx, 3FFFh
    JG loc_46EAC0
loc_46EA58:
    CMP r15d, r12d
    JNZ loc_46EAC0
loc_46EA5D:
    ADD ebx, ebx
    MOV rdi, rbp
    MOVSXD rsi, ebx
    CALL sub_40C240
    MOV rbp, rax
loc_46EA6D:
    MOV rdi, [rsp+48h+var_48]
    LEA r15d, [rbx-1]
    XOR esi, esi
    CALL sub_40C3E0
    MOVSXD rdx, r15d
    MOV r14d, eax
    MOV rsi, rbp
    MOV edi, eax
    MOV byte ptr [rbp+0], 0
    CALL _read
    MOV edi, r14d
    MOV r12, rax
    MOVSXD r13, eax
    CALL _close
    TEST r12d, r12d
    JG loc_46EA50
loc_46EAA3:
    MOV rax, [rsp+48h+var_40]
    MOV [rax+8], ebx
    MOV [rax], rbp
    ADD rsp, 18h
    POP rbx
    MOV rax, rbp
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46EAC0:
    MOV byte ptr [rbp+r13+0], 0
    JMP loc_46EAA3
loc_46EAD0:
    MOV rax, [rdi]
    RETN 
loc_46EAD4:
    MOV edi, 100h
    MOV ebx, 100h
    CALL sub_40C220
    MOV rbp, rax
    JMP loc_46EA6D
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0x419h', '0x40Bh', '0x20h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Manipulation', 'inferred_category': 'Utility Function'}

##### Q 79 - loadfont_main
```assembly
loc_4B0240:
    PUSH rbp
    PUSH rbx
    MOV rdi, rsi
    MOV esi, offset asc_518D22
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CALL sub_4DFD70
    XOR edi, edi
    MOV rsi, rsp
    MOV [rsp+28h+var_28], 20000h
    CALL sub_4E9AF0
    TEST rax, rax
    JZ loc_4B02AC
loc_4B027A:
    MOV rbp, [rsp+28h+var_28]
    MOV rbx, rax
    CALL sub_4DEFB0
    MOV rsi, rbx
    MOV edi, eax
    MOV rdx, rbp
    CALL sub_4AFCF0
    XOR eax, eax
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_4B02B8
loc_4B02A5:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_4B02AC:
    MOV edi, offset aErrorReadingIn
    XOR eax, eax
    CALL sub_409DA0
loc_4B02B8:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xD8', '0x0', '0x10', '0x30', '0x4BB', '0x4BF', '0x4C0', '0x1B'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'String Processing'}

##### T 79 - loadfont_main
```assembly
loc_4E7BE0:
    PUSH rbp
    PUSH rbx
    MOV rdi, rsi
    MOV esi, offset asc_566CDE
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CALL sub_5291B0
    XOR edi, edi
    MOV rsi, rsp
    MOV [rsp+28h+var_28], 20000h
    CALL sub_535D00
    TEST rax, rax
    JZ loc_4E7C4C
loc_4E7C1A:
    MOV rbp, [rsp+28h+var_28]
    MOV rbx, rax
    CALL sub_527C50
    MOV rsi, rbx
    MOV edi, eax
    MOV rdx, rbp
    CALL sub_4E7620
    XOR eax, eax
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_4E7C58
loc_4E7C45:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_4E7C4C:
    MOV edi, offset aErrorReadingIn
    XOR eax, eax
    CALL sub_40A7B0
loc_4E7C58:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x10', '0x30', '0xFFFFFFFFFFFFFFFF', '0x4D0', '0x4BB', '0x4BF', '0x4C0', '0x4EB', '0x4E7'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Concatenation or Buffer Handling', 'inferred_category': 'Utility Function'}

##### Q 80 - func_type
```assembly
loc_4D7560:
    MOV eax, [rsi+18h]
    AND eax, 0F000h
    CMP eax, [rdx+10h]
    SETZ al
    MOVZX eax, al
    RETN 
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x1', '0x45D18Ch', '0x80', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Enumeration', 'inferred_category': 'Information Retrieval'}

##### T 80 - func_type
```assembly
loc_51E5A0:
    MOV eax, [rsi+18h]
    AND eax, 0F000h
    CMP eax, [rdx+10h]
    SETZ al
    MOVZX eax, al
    RETN 
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x8', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Iterative', 'inferred_category': 'InformationDisplay'}

##### Q 81 - buffer_fill_and_print
```assembly
loc_41DF26:
    TEST eax, eax
    JZ loc_41DF6C
loc_41DF2A:
    MOV rdi, [rsi+50h]
    MOVSXD rcx, eax
    SHL rcx, 3
    LEA rdx, [rdi+rcx]
    MOV rcx, [rdi+rcx-8]
    MOV r8, [rdx]
    MOV edi, [rcx-4]
    CMP [r8-4], edi
    JZ loc_41DF67
loc_41DF4A:
    JMP loc_41DF6C
loc_41DF50:
    MOV rcx, rdx
    SUB rdx, 8
    MOV rdi, [rcx-8]
    MOV rcx, [rcx-10h]
    MOV ecx, [rcx-4]
    CMP [rdi-4], ecx
    JNZ loc_41DF6C
loc_41DF67:
    SUB eax, 1
    JNZ loc_41DF50
loc_41DF6C:
    MOV r11d, [rsi+20h]
    MOV edi, [rsi+18h]
    XOR r10d, r10d
    NOP word ptr [rax+rax+00000000h]
loc_41DF80:
    CMP edi, eax
    JB loc_41DFE0
loc_41DF84:
    MOV rcx, [rsi+50h]
    MOVSXD rdx, eax
    MOV r8, [rsi+48h]
    MOV ebp, r10d
    ADD r10d, 1
    TEST ebx, ebx
    MOV rcx, [rcx+rdx*8]
    LEA rdx, ds:8[rdx*8]
    MOV r9d, [rcx-4]
    MOV [r8+rbp*8], rcx
    SETNZ r8b
loc_41DFB0:
    ADD eax, 1
    CMP edi, eax
    JB loc_41DFCE
loc_41DFB7:
    TEST r8b, r8b
    JZ loc_41DFCE
loc_41DFBC:
    MOV rcx, [rsi+50h]
    MOV rcx, [rcx+rdx]
    ADD rdx, 8
    CMP r9d, [rcx-4]
    JZ loc_41DFB0
loc_41DFCE:
    CMP r10d, r11d
    JBE loc_41DF80
loc_41DFD3:
    POP rbx
    POP rbp
    JMP sub_41DB60
loc_41DFE0:
    MOV rcx, [rsi+58h]
    MOV rax, [rsi+48h]
    MOV edx, r10d
    ADD r10d, 1
    CMP r10d, r11d
    MOV [rax+rdx*8], rcx
    JBE loc_41DFE0
loc_41DFF8:
    JMP loc_41DFD3
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xBAB1E', '0xC0DEDBAD', '0x10', '0xA', '0x6', '0x11', '0x2', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing or Comparison', 'inferred_category': 'Utility Function'}

##### T 81 - buffer_fill_and_print
```assembly
loc_424A76:
    TEST eax, eax
    JZ loc_424ABC
loc_424A7A:
    MOV rdi, [rsi+50h]
    MOVSXD rcx, eax
    SHL rcx, 3
    LEA rdx, [rdi+rcx]
    MOV rcx, [rdi+rcx-8]
    MOV r8, [rdx]
    MOV edi, [rcx-4]
    CMP [r8-4], edi
    JZ loc_424AB7
loc_424A9A:
    JMP loc_424ABC
loc_424AA0:
    MOV rcx, rdx
    SUB rdx, 8
    MOV rdi, [rcx-8]
    MOV rcx, [rcx-10h]
    MOV ecx, [rcx-4]
    CMP [rdi-4], ecx
    JNZ loc_424ABC
loc_424AB7:
    SUB eax, 1
    JNZ loc_424AA0
loc_424ABC:
    MOV r11d, [rsi+20h]
    MOV edi, [rsi+18h]
    XOR r10d, r10d
    NOP word ptr [rax+rax+00000000h]
loc_424AD0:
    CMP edi, eax
    JB loc_424B30
loc_424AD4:
    MOV rcx, [rsi+50h]
    MOVSXD rdx, eax
    MOV r8, [rsi+48h]
    MOV ebp, r10d
    ADD r10d, 1
    TEST ebx, ebx
    MOV rcx, [rcx+rdx*8]
    LEA rdx, ds:8[rdx*8]
    MOV r9d, [rcx-4]
    MOV [r8+rbp*8], rcx
    SETNZ r8b
loc_424B00:
    ADD eax, 1
    CMP edi, eax
    JB loc_424B1E
loc_424B07:
    TEST r8b, r8b
    JZ loc_424B1E
loc_424B0C:
    MOV rcx, [rsi+50h]
    MOV rcx, [rcx+rdx]
    ADD rdx, 8
    CMP r9d, [rcx-4]
    JZ loc_424B00
loc_424B1E:
    CMP r10d, r11d
    JBE loc_424AD0
loc_424B23:
    POP rbx
    POP rbp
    JMP sub_4246B0
loc_424B30:
    MOV rcx, [rsi+58h]
    MOV rax, [rsi+48h]
    MOV edx, r10d
    ADD r10d, 1
    CMP r10d, r11d
    MOV [rax+rdx*8], rcx
    JBE loc_424B30
loc_424B48:
    JMP loc_424B23
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 17, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0BAB1E', '0x2', '0xC0DEDBAD', '0x5228', '0x10h', '0xA8h', '0x4E00h', '0x4E48h', '0x4E08h', '0x4E60h', '0x10h', '0x10', '0xFFFFFFFA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 54, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Control Flow and State Management', 'inferred_category': 'Utility/Helper Function'}

##### Q 82 - letcmd
```assembly
loc_468860:
    MOV rdi, [rsi+8]
    PUSH rbx
    TEST rdi, rdi
    JZ loc_46888C
loc_46886A:
    LEA rbx, [rsi+8]
    XCHG ax, ax
loc_468870:
    ADD rbx, 8
    CALL sub_4687E0
    MOV rdi, [rbx]
    TEST rdi, rdi
    JNZ loc_468870
loc_468881:
    TEST rax, rax
    SETZ al
    MOVZX eax, al
    POP rbx
    RETN 
loc_46888C:
    MOV edi, offset aExpressionExpe
    XOR eax, eax
    CALL sub_467C20
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1F', '0x100', '0x210'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 9, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Copy and Concatenation', 'inferred_category': 'Utility'}

##### T 82 - letcmd
```assembly
loc_483CA0:
    PUSH rbp
    PUSH rbx
    SUB rsp, 38h
    MOV rax, fs:28h
    MOV [rsp+48h+var_20], rax
    XOR eax, eax
    CMP qword ptr [rsi+8], 0
    JZ loc_483D45
loc_483CC1:
    MOV rbx, cs:qword_78D208
    LEA rbp, [rsi+8]
    NOP dword ptr [rax+00h]
loc_483CD0:
    MOV eax, [rbx+38h]
    MOV rsi, [rbp+0]
    MOV [rsp+48h+var_40], offset sub_47F680
    MOV [rsp+48h+var_38], offset sub_481940
    ADD eax, 1
    MOV [rbx+38h], eax
    MOV rdi, rsp
    CALL sub_4A0980
    MOV rdi, [rsp+48h+var_48]
    TEST rdi, rdi
    JNZ loc_483D39
loc_483D00:
    SUB dword ptr [rbx+38h], 1
    JNZ loc_483D0E
loc_483D06:
    MOVZX edx, byte ptr [rbx+3Ch]
    TEST dl, dl
    JNZ loc_483D40
loc_483D0E:
    ADD rbp, 8
    CMP qword ptr [rbp+0], 0
    JNZ loc_483CD0
loc_483D19:
    TEST rax, rax
    SETZ al
    MOV rcx, [rsp+48h+var_20]
    XOR rcx, fs:28h
    MOVZX eax, al
    JNZ loc_483D4F
loc_483D32:
    ADD rsp, 38h
    POP rbx
    POP rbp
    RETN 
loc_483D39:
    XOR eax, eax
    CALL sub_4813A0
loc_483D40:
    CALL sub_47EAB0
loc_483D45:
    MOV edi, offset aExpressionExpe
    CALL sub_4813A0
loc_483D4F:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1F', '0x100'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Copy and Concatenation', 'inferred_category': 'Utility/Helper'}

##### Q 83 - buffer_down
```assembly
loc_41E4F0:
    SUB rsp, 8
    TEST byte ptr cs:dword_74363C, 40h
    MOV rax, cs:qword_7431F0
    JNZ loc_41E520
loc_41E504:
    ADD [rax], edi
loc_41E506:
    CALL sub_41D4C0
    CALL sub_41E470
    ADD rsp, 8
    JMP sub_41DF10
loc_41E520:
    MOVSXD rdx, dword ptr [rax]
    MOV rax, [rax+50h]
    MOV rax, [rax+rdx*8]
    ADD edi, [rax-4]
    CALL sub_41D850
    JMP loc_41E506
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing', 'inferred_category': 'Utility'}

##### T 83 - buffer_down
```assembly
loc_425580:
    TEST byte ptr cs:dword_78D63C, 40h
    PUSH rbx
    MOV rbx, cs:qword_78D1F0
    JNZ loc_425600
loc_425591:
    ADD [rbx], edi
loc_425593:
    CALL sub_424B50
    TEST byte ptr cs:dword_78D63C, 40h
    JZ loc_4255D0
loc_4255A1:
    MOVSXD rax, dword ptr [rbx]
    MOV edx, [rbx+18h]
    CMP eax, edx
    JBE loc_4255B0
loc_4255AB:
    MOVSXD rax, edx
    MOV [rbx], eax
loc_4255B0:
    MOV ecx, [rbx+1Ch]
    MOV edx, [rbx+20h]
    LEA edi, [rcx+1]
    MOV rcx, [rbx+50h]
    MOV rax, [rcx+rax*8]
    MOV esi, [rax-4]
    ADD esi, edx
    CMP esi, edi
    JA loc_425620
loc_4255CA:
    POP rbx
    JMP sub_424A60
loc_4255D0:
    MOV edx, [rbx]
    MOV ecx, [rbx+20h]
    MOV eax, [rbx+18h]
    LEA esi, [rdx+rcx]
    ADD eax, 1
    CMP esi, eax
    JBE loc_4255E8
loc_4255E2:
    SUB eax, ecx
    MOV edx, eax
    MOV [rbx], eax
loc_4255E8:
    TEST edx, edx
    JNS loc_4255CA
loc_4255EC:
    MOV dword ptr [rbx], 0
    POP rbx
    JMP sub_424A60
loc_425600:
    MOVSXD rdx, dword ptr [rbx]
    MOV rax, [rbx+50h]
    MOV rax, [rax+rdx*8]
    ADD edi, [rax-4]
    CALL sub_425030
    JMP loc_425593
loc_425620:
    SUB edi, edx
    CALL sub_425030
    CALL sub_424B50
    POP rbx
    JMP sub_424A60
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xA', '0xB08', '0xB48', '0xB50', '0xB68', '0xB70', '0xB58', '0xB60', '0xB48', '0xB50', '0xB38', '0xB40', '0xB30', '0xB10', '0xB18', '0xB20', '0xB28', '0xB78', '0x78'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 26, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Dynamic Dispatch', 'inferred_category': 'Control Flow'}

##### Q 84 - complete_username
```assembly
loc_4E2E10:
    PUSH r12
    PUSH rbp
    LEA rbp, [rdi+1]
    PUSH rbx
    MOV rdi, rbp
    CALL _strlen
    MOV r12, rax
    CALL sub_40D750
    JMP loc_4E2E40
loc_4E2E30:
    MOV rdi, [rbx]
    MOV rsi, rbp
    CALL sub_4097D0
    TEST rax, rax
    JNZ loc_4E2E60
loc_4E2E40:
    CALL sub_40D640
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4E2E30
loc_4E2E4D:
    CALL sub_40D710
    LEA eax, [r12+1]
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4E2E60:
    MOV rsi, [rbx]
    MOV edi, offset aS_34
    XOR eax, eax
    CALL sub_40B190
    MOV rdi, rax
    CALL sub_4E2DD0
    JMP loc_4E2E40
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2D', '0x51', '0x61', '0x4985A4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### T 84 - complete_username
```assembly
loc_52CE60:
    PUSH r13
    PUSH r12
    PUSH rbp
    LEA rbp, [rdi+1]
    PUSH rbx
    MOV rdi, rbp
    SUB rsp, 8
    CALL _strlen
    MOV r13, rax
    CALL sub_410440
    MOV r12, cs:qword_78D630
    JMP loc_52CEA0
loc_52CE90:
    MOV rdi, [rbx]
    MOV rsi, rbp
    CALL sub_40A180
    TEST rax, rax
    JNZ loc_52CEC8
loc_52CEA0:
    CALL sub_40F8F0
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_52CE90
loc_52CEAD:
    CALL sub_410400
    ADD rsp, 8
    LEA eax, [r13+1]
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_52CEC8:
    MOV rsi, [rbx]
    MOV edi, offset aS_34
    XOR eax, eax
    CALL sub_40C860
    MOV edx, [r12+58h]
    MOV rdi, [r12+50h]
    MOV esi, 804h
    MOV rbx, rax
    CALL sub_53B960
    MOV ecx, [r12+58h]
    MOV [r12+50h], rax
    MOV rdx, rcx
    MOV [rax+rcx*8], rbx
    ADD edx, 1
    MOV [r12+58h], edx
    JMP loc_52CEA0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x58', '0x48', '0x50', '0x39', '0x4', '0x2D', '0x51', '0x61', '0x2', '0x42', '0x41'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### Q 85 - setvar
```assembly
loc_469EE9:
    CMP rbx, rax
    JNZ loc_469F8D
loc_469EF2:
    TEST r12, r12
    JZ loc_469F80
loc_469EFB:
    MOV rdi, r12
    CALL _strlen
    MOV r13, rax
loc_469F06:
    MOV rbx, cs:qword_743208
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    LEA rdi, [r13+r15+2]
    CALL sub_40ACD0
    MOV rdx, r15
    MOV rsi, rbp
    MOV rdi, rax
    MOV r14, rax
    CALL _mempcpy
    TEST r12, r12
    JZ loc_469F48
loc_469F36:
    LEA rdi, [rax+1]
    MOV byte ptr [rax], 3Dh
    MOV rdx, r13
    MOV rsi, r12
    CALL _mempcpy
loc_469F48:
    MOV esi, [rsp+48h+var_3C]
    MOV rdi, r14
    MOV byte ptr [rax], 0
    OR esi, 100h
    CALL sub_467CE0
    SUB dword ptr [rbx+38h], 1
    JNZ loc_469F6B
loc_469F63:
    MOVZX edx, byte ptr [rbx+3Ch]
    TEST dl, dl
    JNZ loc_469F9F
loc_469F6B:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_469F80:
    OR [rsp+48h+var_3C], 20h
    XOR r13d, r13d
    JMP loc_469F06
loc_469F8D:
    MOV rdx, rbp
    MOV rsi, r15
    MOV edi, offset aSBadVariableNa
    XOR eax, eax
    CALL sub_467C20
loc_469F9F:
    CALL sub_466B40
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Initialization/Cleanup'}

##### T 85 - setvar
```assembly
loc_481719:
    CMP rbx, rax
    JNZ loc_4817BD
loc_481722:
    TEST r12, r12
    JZ loc_4817B0
loc_48172B:
    MOV rdi, r12
    CALL _strlen
    MOV r13, rax
loc_481736:
    MOV rbx, cs:qword_78D208
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    LEA rdi, [r13+r15+2]
    CALL sub_40C220
    MOV rdx, r15
    MOV rsi, rbp
    MOV rdi, rax
    MOV r14, rax
    CALL _mempcpy
    TEST r12, r12
    JZ loc_481778
loc_481766:
    LEA rdi, [rax+1]
    MOV byte ptr [rax], 3Dh
    MOV rdx, r13
    MOV rsi, r12
    CALL _mempcpy
loc_481778:
    MOV esi, [rsp+48h+var_3C]
    MOV rdi, r14
    MOV byte ptr [rax], 0
    OR esi, 100h
    CALL sub_481460
    SUB dword ptr [rbx+38h], 1
    JNZ loc_48179B
loc_481793:
    MOVZX edx, byte ptr [rbx+3Ch]
    TEST dl, dl
    JNZ loc_4817CF
loc_48179B:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4817B0:
    OR [rsp+48h+var_3C], 20h
    XOR r13d, r13d
    JMP loc_481736
loc_4817BD:
    MOV rdx, rbp
    MOV rsi, r15
    MOV edi, offset aSBadVariableNa
    XOR eax, eax
    CALL sub_4813A0
loc_4817CF:
    CALL sub_47EAB0
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Initialization/Cleanup'}

##### Q 86 - bb_ioctl_or_warn
```assembly
loc_40B7E5:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_40B7F0:
    MOV rdi, rbx
    MOV [rsp+18h+var_C], eax
    CALL sub_409E60
    MOV eax, [rsp+18h+var_C]
    ADD rsp, 10h
    POP rbx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x48', '0x20', '0x2BF', '0x2C2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 86 - bb_ioctl_or_warn
```assembly
loc_40CFF0:
    PUSH rbx
    XOR eax, eax
    MOV esi, esi
    MOV rbx, rcx
    SUB rsp, 10h
    CALL _ioctl
    TEST eax, eax
    JS loc_40D010
loc_40D005:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_40D010:
    MOV rdi, rbx
    MOV [rsp+18h+var_C], eax
    CALL sub_40A870
    MOV eax, [rsp+18h+var_C]
    ADD rsp, 10h
    POP rbx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2BF', '0x2C2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### Q 87 - breakcmd
```assembly
loc_468580:
    PUSH rbx
    MOV rdi, [rsi+8]
    MOV rbx, rsi
    TEST rdi, rdi
    JZ loc_4685C8
loc_46858D:
    CALL sub_467EE0
    TEST eax, eax
    JLE loc_4685CF
loc_468596:
    MOV edx, cs:dword_742F08
    CMP edx, eax
    JGE loc_4685A6
loc_4685A0:
    TEST edx, edx
    JLE loc_4685BE
loc_4685A4:
    MOV eax, edx
loc_4685A6:
    MOV rdx, [rbx]
    MOV cs:dword_742F10, eax
    CMP byte ptr [rdx], 63h
    SETZ dl
    ADD edx, 1
    MOV cs:byte_742F14, dl
loc_4685BE:
    XOR eax, eax
    POP rbx
    RETN 
loc_4685C8:
    MOV eax, 1
    JMP loc_468596
loc_4685CF:
    MOV rsi, [rbx+8]
    MOV edi, offset nptr
    XOR eax, eax
    CALL sub_467C20
```
None

##### T 87 - breakcmd
```assembly
loc_484350:
    PUSH rbx
    MOV rdi, [rsi+8]
    MOV rbx, rsi
    TEST rdi, rdi
    JZ loc_4843D0
loc_48435D:
    MOV rdx, rdi
    JMP loc_484371
loc_484368:
    ADD rdx, 1
    CMP byte ptr [rdx], 0
    JZ loc_484390
loc_484371:
    MOVZX eax, byte ptr [rdx]
    SUB eax, 30h
    CMP al, 9
    JBE loc_484368
loc_48437B:
    MOV rsi, rdi
    XOR eax, eax
    MOV edi, offset nptr
    CALL sub_4813A0
loc_484390:
    MOV edx, 0Ah
    XOR esi, esi
    CALL _strtol
    TEST eax, eax
    MOV edx, eax
    JLE loc_4843D7
loc_4843A2:
    MOV eax, cs:dword_78CF08
    CMP eax, edx
    JGE loc_4843B2
loc_4843AC:
    TEST eax, eax
    JLE loc_4843CA
loc_4843B0:
    MOV edx, eax
loc_4843B2:
    MOV rax, [rbx]
    MOV cs:dword_78CF10, edx
    CMP byte ptr [rax], 63h
    SETZ al
    ADD eax, 1
    MOV cs:byte_78CF14, al
loc_4843CA:
    XOR eax, eax
    POP rbx
    RETN 
loc_4843D0:
    MOV edx, 1
    JMP loc_4843A2
loc_4843D7:
    MOV rsi, [rbx+8]
    MOV edi, offset nptr
    XOR eax, eax
    CALL sub_4813A0
loc_4843F0:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rdi, [rsi+8]
    TEST rdi, rdi
    JZ loc_484508
loc_484407:
    MOV rdx, rdi
    JMP loc_484419
loc_484410:
    ADD rdx, 1
    CMP byte ptr [rdx], 0
    JZ loc_484438
loc_484419:
    MOVZX eax, byte ptr [rdx]
    SUB eax, 30h
    CMP al, 9
    JBE loc_484410
loc_484423:
    MOV rsi, rdi
    XOR eax, eax
    MOV edi, offset nptr
    CALL sub_4813A0
loc_484438:
    MOV edx, 0Ah
    XOR esi, esi
    CALL _strtol
loc_484444:
    MOV r12, cs:qword_78D210
    LEA edx, [rax-1]
    CMP eax, [r12]
    JLE loc_48445B
loc_484454:
    MOV edx, 0FFFFFFFFh
    XOR eax, eax
loc_48445B:
    MOV r13, cs:qword_78D208
    MOV ecx, [r13+38h]
    ADD ecx, 1
    MOV [r13+38h], ecx
    SUB [r12], eax
    TEST edx, edx
    MOV rbx, [r12+10h]
    JS loc_484512
loc_48447E:
    MOVSXD rdx, edx
    LEA rbp, [rbx+rdx*8+8]
    JMP loc_484499
loc_484490:
    ADD rbx, 8
    CMP rbp, rbx
    JZ loc_4844B2
loc_484499:
    CMP byte ptr [r12+0Ch], 0
    JZ loc_484490
loc_4844A1:
    MOV rdi, [rbx]
    ADD rbx, 8
    CALL _free
    CMP rbp, rbx
    JNZ loc_484499
loc_4844B2:
    MOV rbx, [r12+10h]
    NOP word ptr [rax+rax+00000000h]
loc_4844C0:
    ADD rbp, 8
    MOV rax, [rbp-8]
    ADD rbx, 8
    TEST rax, rax
    MOV [rbx-8], rax
    JNZ loc_4844C0
loc_4844D5:
    MOV dword ptr [r12+4], 1
    MOV dword ptr [r12+8], 0FFFFFFFFh
    SUB dword ptr [r13+38h], 1
    JNZ loc_4844F7
loc_4844EE:
    MOVZX eax, byte ptr [r13+3Ch]
    TEST al, al
    JNZ loc_484517
loc_4844F7:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_484508:
    MOV eax, 1
    JMP loc_484444
loc_484512:
    MOV rbp, rbx
    JMP loc_4844C0
loc_484517:
    CALL sub_47EAB0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0xFFFFFFFF', '0x170', '0xD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 33, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Character processing or String comparison', 'inferred_category': 'Character Processing'}

##### Q 88 - xsetenv_proto
```assembly
loc_43A690:
    MOV rcx, rdx
    SUB rsp, 8
    MOV rdx, rsi
    XOR eax, eax
    MOV rsi, rdi
    MOV edi, offset aSSS_3
    CALL sub_40B190
    MOV rdx, qword ptr cs:dest.c_cc+7
    MOV rdi, rax
    LEA rcx, [rdx+8]
    MOV qword ptr cs:dest.c_cc+7, rcx
    MOV [rdx], rax
    ADD rsp, 8
    JMP _putenv
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x408'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### T 88 - xsetenv_proto
```assembly
loc_448030:
    MOV rcx, rdx
    SUB rsp, 8
    MOV rdx, rsi
    XOR eax, eax
    MOV rsi, rdi
    MOV edi, offset aSSS_3
    CALL sub_40C860
    MOV rdx, qword ptr cs:buf.c_cc+7
    MOV rdi, rax
    LEA rcx, [rdx+8]
    MOV qword ptr cs:buf.c_cc+7, rcx
    MOV [rdx], rax
    ADD rsp, 8
    JMP _putenv
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x408'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### Q 89 - get_header_tar
```assembly
loc_4AD480:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 258h
    MOV rbp, [rdi+28h]
    MOV rax, fs:28h
    MOV [rsp+288h+var_40], rax
    XOR eax, eax
    LEA rax, [rsp+288h+var_147]
    LEA r13, [rsp+288h+nptr]
    MOV [rsp+288h+s1], rax
    LEA rax, [rsp+288h+buf]
    LEA r12, [rax+200h]
loc_4AD4CC:
    MOV esi, 200h
    MOV rdi, rbx
    CALL sub_4AF6B0
loc_4AD4D9:
    MOV edi, [rbx+4]
    LEA rsi, [rsp+288h+buf]
    MOV edx, 200h
    MOV [rsp+288h+buf], 0
    CALL sub_40BE60
    TEST eax, eax
    MOV r14, rax
    JZ loc_4ADBAC
loc_4AD4FE:
    CMP eax, 200h
    JNZ loc_4AD758
loc_4AD509:
    ADD qword ptr [rbx+48h], 200h
    CMP byte ptr [rsp+288h+buf], 0
    JNZ loc_4AD533
loc_4AD518:
    MOVZX eax, [rsp+288h+var_EF]
    TEST al, al
    MOV byte ptr [rsp+288h+var_280], al
    JNZ loc_4AD533
loc_4AD528:
    CMP qword ptr [rbx+58h], 0
    JZ loc_4ADBDC
loc_4AD533:
    MOV rdi, [rsp+288h+s1]
    MOV byte ptr [rbx+54h], 0
    MOV esi, offset aUstar
    CALL sub_4097D0
    TEST rax, rax
    JZ loc_4AD736
loc_4AD54F:
    LEA rdx, [rsp+288h+buf]
    MOV r15d, 100h
    MOV r14d, 100h
loc_4AD560:
    MOVZX esi, byte ptr [rdx]
    ADD rdx, 1
    MOVSX eax, sil
    ADD r14d, esi
    ADD r15d, eax
    CMP r13, rdx
    JNZ loc_4AD560
loc_4AD576:
    LEA rdx, [rsp+288h+var_1AC]
    XCHG ax, ax
loc_4AD580:
    MOVZX esi, byte ptr [rdx]
    ADD rdx, 1
    MOVSX eax, sil
    ADD r14d, esi
    ADD r15d, eax
    CMP rdx, r12
    JNZ loc_4AD580
loc_4AD596:
    LEA rsi, [rsp+288h+endptr]
    MOV edx, 8
    MOV rdi, r13
    CALL _strtoul
    MOV rdx, [rsp+288h+endptr]
    MOVZX edx, byte ptr [rdx]
    AND edx, 0DFh
    MOV byte ptr [rsp+288h+var_280], dl
    JNZ loc_4ADC61
loc_4AD5C0:
    CMP r14d, eax
    JZ loc_4AD5CE
loc_4AD5C5:
    CMP r15d, eax
    JNZ loc_4ADC61
loc_4AD5CE:
    XOR esi, esi
    MOV edx, 8
    MOV rdi, r13
    CALL _strtoul
    CMP r14d, eax
    JZ loc_4AD5EB
loc_4AD5E2:
    CMP r15d, eax
    JNZ loc_4ADC61
loc_4AD5EB:
    MOVZX eax, [rsp+288h+var_1AC]
    TEST al, al
    JZ loc_4AD793
loc_4AD5FB:
    SUB eax, 30h
    CMP al, 7
    SETBE r14b
    CMP [rsp+288h+var_FF], 0
    JNZ loc_4AD7AF
loc_4AD612:
    CMP qword ptr [rbx+60h], 0
    MOV qword ptr [rbp+8], 0
    JNZ loc_4AD634
loc_4AD621:
    TEST r14b, r14b
    JZ loc_4AD634
loc_4AD626:
    CMP [rsp+288h+var_1AB], 0
    JNZ loc_4ADBC1
loc_4AD634:
    XOR eax, eax
    CMP [rsp+288h+var_13F], 0
    JNZ loc_4AD926
loc_4AD644:
    MOV [rbp+10h], rax
    XOR eax, eax
    CMP [rsp+288h+src], 0
    JNZ loc_4AD90F
loc_4AD658:
    LEA rdi, [rsp+288h+var_1C0]
    MOV esi, 0Ch
    MOV [rbp+18h], rax
    CALL sub_4AD3E0
    LEA rdi, [rsp+288h+var_1CC]
    MOV esi, 0Ch
    MOV [rbp+38h], rax
    CALL sub_4AD3E0
    LEA rdi, [rsp+288h+var_1D4]
    MOV esi, 8
    MOV [rbp+20h], rax
    CALL sub_4AD3E0
    LEA rdi, [rsp+288h+var_1DC]
    MOV esi, 8
    MOV [rbp+2Ch], eax
    CALL sub_4AD3E0
    LEA rdi, [rsp+288h+var_1E4]
    MOV [rbp+28h], eax
    MOV esi, 8
    CALL sub_4AD3E0
    AND eax, 0FFFh
    CMP qword ptr [rbx+58h], 0
    MOV qword ptr [rbp+0], 0
    MOV [rbp+30h], eax
    JNZ loc_4AD717
loc_4AD6DB:
    TEST r14b, r14b
    JZ loc_4AD717
loc_4AD6E0:
    CMP [rsp+288h+var_EF], 0
    MOV [rsp+288h+var_1E4], 0
    JZ loc_4ADB0D
loc_4AD6F6:
    LEA rax, [rsp+288h+buf]
    LEA rdi, [rsp+288h+var_EF]
    MOV [rsp+288h+var_54], 0
    MOV rsi, rax
    CALL sub_4099E0
    MOV [rbp+0], rax
loc_4AD717:
    MOVZX r15d, [rsp+288h+var_1AC]
    LEA eax, [r15-30h]
    CMP al, 48h
    JA def_4AD72F
loc_4AD72C:
    MOVZX eax, al
    JMP ds:jpt_4AD72F[rax*8]
loc_4AD736:
    MOV rdi, [rsp+288h+s1]
    MOV edx, 5
    MOV esi, offset unk_509DB8
    CALL _memcmp
    TEST eax, eax
    JZ loc_4AD54F
loc_4AD752:
    NOP word ptr [rax+rax+00h]
loc_4AD758:
    MOV edi, [rbx+4]
    NEG r14d
    MOV edx, 1
    MOVSXD rsi, r14d
    CALL _lseek64
    TEST rax, rax
    JNZ loc_4ADC6D
loc_4AD774:
    MOV edi, [rbx+4]
    XOR esi, esi
    CALL sub_4AF2B0
    TEST eax, eax
    JNZ loc_4ADC6D
loc_4AD786:
    MOV qword ptr [rbx+48h], 0
    JMP loc_4AD4D9
loc_4AD793:
    CMP [rsp+288h+var_FF], 0
    MOV [rsp+288h+var_1AC], 30h
    MOV r14d, 1
    JZ loc_4AD612
loc_4AD7AF:
    LEA rdi, [rsp+288h+var_F7]
    MOV esi, 8
    MOVZX r15d, [rsp+288h+var_EF]
    CALL sub_4AD3E0
    LEA rdi, [rsp+288h+var_FF]
    MOV esi, 8
    MOV [rsp+288h+ptr], rax
    CALL sub_4AD3E0
    MOV esi, dword ptr [rsp+288h+ptr]
    MOV edi, eax
    CALL sub_4E5580
    MOV [rbp+40h], rax
    MOV [rsp+288h+var_EF], r15b
    JMP loc_4AD612
loc_4AD7FD:
    MOV rdi, [rbp+0]
    MOV esi, 2Fh
    CALL sub_409AE0
    TEST rax, rax
    JZ loc_4ADC00
loc_4AD814:
    OR dword ptr [rbp+30h], 4000h
loc_4AD81B:
    MOV qword ptr [rbp+20h], 0
loc_4AD823:
    MOV rax, [rbx+58h]
    TEST rax, rax
    JZ loc_4AD838
loc_4AD82C:
    MOV [rbp+0], rax
    MOV qword ptr [rbx+58h], 0
loc_4AD838:
    MOV rax, [rbx+60h]
    TEST rax, rax
    JZ loc_4AD84D
loc_4AD841:
    MOV [rbp+8], rax
    MOV qword ptr [rbx+60h], 0
loc_4AD84D:
    MOV rdi, [rbp+0]
    CALL sub_4AF570
    MOV rdi, [rbp+0]
    MOV rsi, rax
    CALL sub_4EA7A0
    MOV rdi, [rbp+0]
    MOV esi, 2Fh
    CALL sub_409AE0
    MOV rdi, rbx
    MOV r12, rax
    CALL qword ptr [rbx+8]
    TEST al, al
    JNZ loc_4AD8FC
loc_4AD87D:
    MOV rdi, rbp
    CALL qword ptr [rbx+30h]
    TEST r12, r12
    JZ loc_4AD88D
loc_4AD888:
    MOV byte ptr [r12], 0
loc_4AD88D:
    MOV rdi, rbx
    CALL qword ptr [rbx+38h]
    CMP qword ptr [rbx+10h], 0
    JZ loc_4ADB20
loc_4AD89E:
    MOV rsi, [rbp+0]
    LEA rdi, [rbx+20h]
    CALL sub_409B20
loc_4AD8AB:
    MOV rax, [rbp+20h]
    ADD [rbx+48h], rax
    MOV rdi, [rbp+8]
    CALL _free
    MOV rdi, [rbp+10h]
    CALL _free
    MOV rdi, [rbp+18h]
    CALL _free
loc_4AD8CE:
    MOV rcx, [rsp+288h+var_40]
    XOR rcx, fs:28h
    MOVZX eax, byte ptr [rsp+288h+var_280]
    JNZ loc_4ADC5C
loc_4AD8EA:
    ADD rsp, 258h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4AD8FC:
    MOV rdi, rbx
    CALL sub_4A7860
loc_4AD904:
    MOV rdi, [rbp+0]
    CALL _free
    JMP loc_4AD8AB
loc_4AD90F:
    LEA rdi, [rsp+288h+src]
    MOV esi, 20h
    CALL sub_40AD70
    JMP loc_4AD658
loc_4AD926:
    LEA rdi, [rsp+288h+var_13F]
    MOV esi, 20h
    CALL sub_40AD70
    JMP loc_4AD644
loc_4AD93D:
    OR dword ptr [rbp+30h], 6000h
    JMP loc_4AD81B
loc_4AD949:
    OR dword ptr [rbp+30h], 1000h
    JMP loc_4AD81B
loc_4AD955:
    MOV rdi, [rbx+60h]
    CALL _free
    MOV rax, [rbp+20h]
    LEA rdi, [rax+1]
    CALL sub_40AD10
    MOV [rbx+60h], rax
loc_4AD96F:
    MOV rdx, [rbp+20h]
    MOV edi, [rbx+4]
    MOV rsi, rax
    CALL sub_4E9C70
    MOV rax, [rbp+20h]
    ADD [rbx+48h], rax
    JMP loc_4AD4CC
loc_4AD98B:
    MOV rdi, [rbx+58h]
    CALL _free
    MOV rax, [rbp+20h]
    LEA rdi, [rax+1]
    CALL sub_40AD10
    MOV [rbx+58h], rax
    JMP loc_4AD96F
loc_4AD9A7:
    MOV r10, [rbp+20h]
    CMP r10, 0FFFFFh
    JA loc_4ADB5B
loc_4AD9B8:
    LEA eax, [r10+1FFh]
    MOV r14d, r10d
    MOV [rsp+288h+var_268], r10
    AND eax, 0FFFFFE00h
    LEA edi, [rax+1]
    MOV dword ptr [rsp+288h+var_280], eax
    CALL sub_40ACD0
    MOV rcx, rax
    MOV eax, dword ptr [rsp+288h+var_280]
    MOV edi, [rbx+4]
    MOV rsi, rcx
    MOV [rsp+288h+ptr], rcx
    MOV rdx, rax
    MOV [rsp+288h+var_280], rax
    CALL sub_4E9C70
    MOV r10, [rsp+288h+var_268]
    MOV rax, [rsp+288h+var_280]
    ADD [rbx+48h], rax
    MOV rax, [rsp+288h+ptr]
    TEST r10, r10
    MOV byte ptr [rax+r10], 0
    JZ loc_4ADB4C
loc_4ADA18:
    MOV [rsp+288h+var_280], rax
    JMP loc_4ADA28
loc_4ADA1F:
    TEST r14d, r14d
    JZ loc_4ADB4C
loc_4ADA28:
    MOV rdi, [rsp+288h+var_280]
    LEA rsi, [rsp+288h+endptr]
    MOV edx, 0Ah
    CALL sub_40CC40
    SUB r14d, eax
    MOV ecx, eax
    MOV edx, eax
    ADD [rsp+288h+var_280], rdx
    OR ecx, r14d
    JS loc_4ADB40
loc_4ADA51:
    TEST eax, eax
    JZ loc_4ADB40
loc_4ADA59:
    MOV rax, cs:qword_7431E8
    CMP dword ptr [rax], 16h
    JNZ loc_4ADB40
loc_4ADA69:
    MOV rdx, [rsp+288h+endptr]
    CMP byte ptr [rdx], 20h
    JNZ loc_4ADB40
loc_4ADA77:
    MOV rax, [rsp+288h+var_280]
    CMP r15b, 67h
    MOV byte ptr [rax-1], 0
    JZ loc_4ADA1F
loc_4ADA86:
    LEA r10, [rdx+1]
    MOV esi, offset aPath_0
    MOV [rsp+288h+var_260], rdx
    MOV rdi, r10
    MOV [rsp+288h+var_268], r10
    CALL sub_4097D0
    MOV rdx, [rsp+288h+var_260]
    TEST rax, rax
    MOV r10, [rsp+288h+var_268]
    MOV [rsp+288h+var_268], rdx
    JZ loc_4ADC0C
loc_4ADAB9:
    MOV rdi, [rbx+58h]
    CALL _free
    MOV rdx, [rsp+288h+var_268]
    LEA rdi, [rdx+6]
    CALL sub_40AD40
    MOV [rbx+58h], rax
    JMP loc_4ADA1F
loc_4ADAD9:
    OR dword ptr [rbp+30h], 8000h
    JMP loc_4AD81B
loc_4ADAE5:
    OR dword ptr [rbp+30h], 0A000h
    JMP loc_4AD81B
loc_4ADAF1:
    OR dword ptr [rbp+30h], 2000h
    JMP loc_4AD81B
loc_4ADAFD:
    MOVSX esi, r15b
    MOV edi, offset aUnknownTypefla
    XOR eax, eax
    CALL sub_40A1E0
loc_4ADB0D:
    LEA rdi, [rsp+288h+buf]
    CALL sub_40AD40
    MOV [rbp+0], rax
    JMP loc_4AD717
loc_4ADB20:
    CMP qword ptr [rbx+18h], 0
    JNZ loc_4AD89E
loc_4ADB2B:
    TEST dword ptr [rbx], 200h
    JNZ loc_4AD89E
loc_4ADB37:
    JMP loc_4AD904
loc_4ADB40:
    MOV edi, offset aMalformedExten
    XOR eax, eax
    CALL sub_40A280
loc_4ADB4C:
    MOV rdi, [rsp+288h+ptr]
    CALL _free
    JMP loc_4AD4D9
loc_4ADB5B:
    XOR eax, eax
    MOVSX esi, r15b
    MOV edi, offset aWarningSkippin
    CALL sub_40A280
    MOV rax, [rbp+20h]
    ADD rax, 1FFh
    AND rax, 0FFFFFFFFFFFFFE00h
    ADD [rbx+48h], rax
    SAR rax, 9
    TEST rax, rax
    JZ loc_4AD4D9
loc_4ADB8C:
    MOV r14, rax
loc_4ADB8F:
    MOV edi, [rbx+4]
    LEA rsi, [rsp+288h+buf]
    MOV edx, 200h
    CALL sub_4E9C70
    SUB r14, 1
    JNZ loc_4ADB8F
loc_4ADBA7:
    JMP loc_4AD4D9
loc_4ADBAC:
    CMP qword ptr [rbx+48h], 0
    JZ loc_4ADC42
loc_4ADBB7:
    MOV byte ptr [rsp+288h+var_280], 1
    JMP loc_4AD8CE
loc_4ADBC1:
    LEA rdi, [rsp+288h+var_1AB]
    MOV esi, 64h
    CALL sub_40AD70
    MOV [rbp+8], rax
    JMP loc_4AD634
loc_4ADBDC:
    CMP byte ptr [rbx+54h], 0
    JZ loc_4ADC53
loc_4ADBE2:
    MOV edi, [rbx+4]
    LEA rsi, [rsp+288h+buf]
    MOV edx, 200h
    CALL sub_40BE60
    CMP rax, 200h
    JNZ loc_4ADBB7
loc_4ADBFC:
    JMP loc_4ADBE2
loc_4ADC00:
    OR dword ptr [rbp+30h], 8000h
    JMP loc_4AD823
loc_4ADC0C:
    MOV esi, offset unk_518AA4
    MOV rdi, r10
    CALL sub_4097D0
    TEST rax, rax
    JZ loc_4ADA1F
loc_4ADC22:
    MOV rdi, [rbx+60h]
    CALL _free
    MOV rdx, [rsp+288h+var_268]
    LEA rdi, [rdx+0Ah]
    CALL sub_40AD40
    MOV [rbx+60h], rax
    JMP loc_4ADA1F
loc_4ADC42:
    MOV edi, offset aShortRead
    XOR eax, eax
    CALL sub_40A280
    JMP loc_4ADBB7
loc_4ADC53:
    MOV byte ptr [rbx+54h], 1
    JMP loc_4AD8CE
loc_4ADC5C:
    CALL ___stack_chk_fail
loc_4ADC61:
    MOV edi, offset aInvalidTarHead
    XOR eax, eax
    CALL sub_40A1E0
loc_4ADC6D:
    MOV edi, offset aInvalidTarMagi
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'StringOperation', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6', '0x41', '0x4E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Search and Replace', 'inferred_category': 'Utility'}

##### T 89 - get_header_tar
```assembly
loc_4E2630:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 268h
    MOV rbp, [rdi+28h]
    MOV rax, fs:28h
    MOV [rsp+298h+var_40], rax
    XOR eax, eax
loc_4E265B:
    MOV esi, 200h
    MOV rdi, rbx
    CALL sub_4E6FD0
loc_4E2668:
    MOV edi, [rbx+4]
    LEA rsi, [rsp+298h+buf]
    MOV edx, 200h
    MOV dword ptr [rsp+298h+buf], 0
    CALL sub_40D800
    TEST eax, eax
    MOV r13, rax
    JZ loc_4E3848
loc_4E268D:
    CMP eax, 200h
    JNZ loc_4E32F8
loc_4E2698:
    ADD qword ptr [rbx+48h], 200h
    CMP byte ptr [rsp+298h+buf], 0
    JNZ loc_4E26C0
loc_4E26A7:
    MOVZX r12d, [rsp+298h+var_EF]
    TEST r12b, r12b
    JNZ loc_4E26C0
loc_4E26B5:
    CMP qword ptr [rbx+58h], 0
    JZ loc_4E38F6
loc_4E26C0:
    LEA r12, [rsp+298h+s1]
    MOV byte ptr [rbx+54h], 0
    MOV esi, offset aUstar
    MOV rdi, r12
    CALL sub_40A180
    TEST rax, rax
    JZ loc_4E32D8
loc_4E26E2:
    MOVDQA xmm2, [rsp+298h+buf]
    PXOR xmm1, xmm1
    PXOR xmm0, xmm0
    MOVZX edx, [rsp+298h+var_1B8]
    MOVDQA xmm4, xmm2
    MOVZX esi, [rsp+298h+var_1B7]
    MOVDQA xmm3, xmm2
    PUNPCKLBW xmm4, xmm1
    MOVDQA xmm7, xmm0
    PUNPCKHBW xmm3, xmm1
    MOV ecx, edx
    MOVSX ecx, cl
    MOVDQA xmm6, xmm4
    PUNPCKLWD xmm4, xmm0
    MOVDQA xmm5, xmm3
    PUNPCKHWD xmm6, xmm0
    PUNPCKLWD xmm5, xmm0
    PUNPCKHWD xmm3, xmm0
    PADDD xmm4, xmm6
    PADDD xmm4, xmm5
    MOVDQA xmm6, xmm4
    MOVDQA xmm5, xmm2
    MOVDQA xmm4, xmm0
    PADDD xmm6, xmm3
    MOVDQA xmm3, xmm1
    PCMPGTB xmm3, xmm2
    PUNPCKLBW xmm5, xmm3
    PUNPCKHBW xmm2, xmm3
    PCMPGTW xmm4, xmm5
    MOVDQA xmm3, xmm5
    PCMPGTW xmm7, xmm2
    PUNPCKLWD xmm3, xmm4
    PUNPCKHWD xmm5, xmm4
    MOVDQA xmm4, xmm2
    PUNPCKHWD xmm2, xmm7
    PUNPCKLWD xmm4, xmm7
    PADDD xmm5, xmm3
    PADDD xmm5, xmm4
    MOVDQA xmm3, xmm5
    PADDD xmm3, xmm2
    MOVDQA xmm2, [rsp+298h+var_238]
    MOVDQA xmm4, xmm2
    MOVDQA xmm5, xmm2
    PUNPCKLBW xmm4, xmm1
    PUNPCKHBW xmm5, xmm1
    MOVDQA xmm7, xmm4
    PUNPCKHWD xmm4, xmm0
    PUNPCKLWD xmm7, xmm0
    PADDD xmm6, xmm7
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm5
    PUNPCKHWD xmm5, xmm0
    MOVDQA xmm7, xmm0
    PUNPCKLWD xmm6, xmm0
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm4
    MOVDQA xmm4, xmm2
    PADDD xmm6, xmm5
    MOVDQA xmm5, xmm1
    PCMPGTB xmm5, xmm2
    PUNPCKLBW xmm4, xmm5
    PUNPCKHBW xmm2, xmm5
    PCMPGTW xmm7, xmm4
    MOVDQA xmm5, xmm4
    PUNPCKLWD xmm5, xmm7
    PUNPCKHWD xmm4, xmm7
    PADDD xmm3, xmm5
    MOVDQA xmm5, xmm0
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTW xmm5, xmm2
    PUNPCKLWD xmm4, xmm5
    PUNPCKHWD xmm2, xmm5
    PADDD xmm3, xmm4
    PADDD xmm3, xmm2
    MOVDQA xmm2, [rsp+298h+var_228]
    MOVDQA xmm4, xmm2
    MOVDQA xmm5, xmm2
    PUNPCKLBW xmm4, xmm1
    PUNPCKHBW xmm5, xmm1
    MOVDQA xmm7, xmm4
    PUNPCKHWD xmm4, xmm0
    PUNPCKLWD xmm7, xmm0
    PADDD xmm6, xmm7
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm5
    PUNPCKHWD xmm5, xmm0
    MOVDQA xmm7, xmm0
    PUNPCKLWD xmm6, xmm0
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm4
    MOVDQA xmm4, xmm2
    PADDD xmm6, xmm5
    MOVDQA xmm5, xmm1
    PCMPGTB xmm5, xmm2
    PUNPCKLBW xmm4, xmm5
    PUNPCKHBW xmm2, xmm5
    PCMPGTW xmm7, xmm4
    MOVDQA xmm5, xmm4
    PUNPCKLWD xmm5, xmm7
    PUNPCKHWD xmm4, xmm7
    PADDD xmm3, xmm5
    MOVDQA xmm5, xmm0
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTW xmm5, xmm2
    PUNPCKLWD xmm4, xmm5
    PUNPCKHWD xmm2, xmm5
    PADDD xmm3, xmm4
    PADDD xmm3, xmm2
    MOVDQA xmm2, [rsp+298h+var_218]
    MOVDQA xmm4, xmm2
    MOVDQA xmm5, xmm2
    PUNPCKLBW xmm4, xmm1
    PUNPCKHBW xmm5, xmm1
    MOVDQA xmm7, xmm4
    PUNPCKHWD xmm4, xmm0
    PUNPCKLWD xmm7, xmm0
    PADDD xmm6, xmm7
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm5
    PUNPCKHWD xmm5, xmm0
    MOVDQA xmm7, xmm0
    PUNPCKLWD xmm6, xmm0
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm4
    MOVDQA xmm4, xmm2
    PADDD xmm6, xmm5
    MOVDQA xmm5, xmm1
    PCMPGTB xmm5, xmm2
    PUNPCKLBW xmm4, xmm5
    PUNPCKHBW xmm2, xmm5
    PCMPGTW xmm7, xmm4
    MOVDQA xmm5, xmm4
    PUNPCKLWD xmm5, xmm7
    PUNPCKHWD xmm4, xmm7
    PADDD xmm3, xmm5
    MOVDQA xmm5, xmm0
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTW xmm5, xmm2
    PUNPCKLWD xmm4, xmm5
    PUNPCKHWD xmm2, xmm5
    PADDD xmm3, xmm4
    PADDD xmm3, xmm2
    MOVDQA xmm2, [rsp+298h+var_208]
    MOVDQA xmm4, xmm2
    MOVDQA xmm5, xmm2
    PUNPCKLBW xmm4, xmm1
    PUNPCKHBW xmm5, xmm1
    MOVDQA xmm7, xmm4
    PUNPCKHWD xmm4, xmm0
    PUNPCKLWD xmm7, xmm0
    PADDD xmm6, xmm7
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm5
    PUNPCKHWD xmm5, xmm0
    MOVDQA xmm7, xmm0
    PUNPCKLWD xmm6, xmm0
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm4
    MOVDQA xmm4, xmm2
    PADDD xmm6, xmm5
    MOVDQA xmm5, xmm1
    PCMPGTB xmm5, xmm2
    PUNPCKLBW xmm4, xmm5
    PUNPCKHBW xmm2, xmm5
    PCMPGTW xmm7, xmm4
    MOVDQA xmm5, xmm4
    PUNPCKLWD xmm5, xmm7
    PUNPCKHWD xmm4, xmm7
    PADDD xmm3, xmm5
    MOVDQA xmm5, xmm0
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTW xmm5, xmm2
    PUNPCKLWD xmm4, xmm5
    PUNPCKHWD xmm2, xmm5
    PADDD xmm3, xmm4
    PADDD xmm3, xmm2
    MOVDQA xmm2, [rsp+298h+var_1F8]
    MOVDQA xmm4, xmm2
    MOVDQA xmm5, xmm2
    PUNPCKLBW xmm4, xmm1
    PUNPCKHBW xmm5, xmm1
    MOVDQA xmm7, xmm4
    PUNPCKHWD xmm4, xmm0
    PUNPCKLWD xmm7, xmm0
    PADDD xmm6, xmm7
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm5
    PUNPCKHWD xmm5, xmm0
    MOVDQA xmm7, xmm0
    PUNPCKLWD xmm6, xmm0
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm4
    MOVDQA xmm4, xmm2
    PADDD xmm6, xmm5
    MOVDQA xmm5, xmm1
    PCMPGTB xmm5, xmm2
    PUNPCKLBW xmm4, xmm5
    PUNPCKHBW xmm2, xmm5
    PCMPGTW xmm7, xmm4
    MOVDQA xmm5, xmm4
    PUNPCKLWD xmm5, xmm7
    PUNPCKHWD xmm4, xmm7
    PADDD xmm3, xmm5
    MOVDQA xmm5, xmm0
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTW xmm5, xmm2
    PUNPCKLWD xmm4, xmm5
    PUNPCKHWD xmm2, xmm5
    PADDD xmm3, xmm4
    PADDD xmm3, xmm2
    MOVDQA xmm2, xmmword ptr [rsp+298h+var_1E8]
    MOVDQA xmm4, xmm2
    MOVDQA xmm5, xmm2
    PUNPCKLBW xmm4, xmm1
    PUNPCKHBW xmm5, xmm1
    MOVDQA xmm7, xmm4
    PUNPCKHWD xmm4, xmm0
    PUNPCKLWD xmm7, xmm0
    PADDD xmm6, xmm7
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm5
    PUNPCKHWD xmm5, xmm0
    MOVDQA xmm7, xmm0
    PUNPCKLWD xmm6, xmm0
    PADDD xmm4, xmm6
    MOVDQA xmm6, xmm1
    PADDD xmm5, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTB xmm6, xmm2
    PUNPCKLBW xmm4, xmm6
    PUNPCKHBW xmm2, xmm6
    PCMPGTW xmm7, xmm4
    MOVDQA xmm6, xmm4
    PUNPCKLWD xmm6, xmm7
    PUNPCKHWD xmm4, xmm7
    PADDD xmm3, xmm6
    MOVDQA xmm6, xmm0
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTW xmm6, xmm2
    PUNPCKLWD xmm4, xmm6
    PUNPCKHWD xmm2, xmm6
    PADDD xmm3, xmm4
    PADDD xmm3, xmm2
    MOVDQA xmm2, xmmword ptr [rsp+298h+var_1D8]
    MOVDQA xmm4, xmm2
    MOVDQA xmm6, xmm2
    PUNPCKLBW xmm4, xmm1
    PUNPCKHBW xmm6, xmm1
    MOVDQA xmm7, xmm4
    PUNPCKHWD xmm4, xmm0
    PUNPCKLWD xmm7, xmm0
    PADDD xmm5, xmm7
    MOVDQA xmm7, xmm6
    PADDD xmm4, xmm5
    MOVDQA xmm5, xmm1
    PUNPCKHWD xmm6, xmm0
    PUNPCKLWD xmm7, xmm0
    PCMPGTB xmm5, xmm2
    PADDD xmm4, xmm7
    MOVDQA xmm7, xmm4
    MOVDQA xmm4, xmm2
    PUNPCKHBW xmm2, xmm5
    PADDD xmm7, xmm6
    MOVDQA xmm6, xmm0
    PUNPCKLBW xmm4, xmm5
    PCMPGTW xmm6, xmm4
    MOVDQA xmm5, xmm4
    PUNPCKLWD xmm5, xmm6
    PUNPCKHWD xmm4, xmm6
    PADDD xmm3, xmm5
    MOVDQA xmm5, xmm0
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm2
    PCMPGTW xmm5, xmm2
    PUNPCKLWD xmm4, xmm5
    PUNPCKHWD xmm2, xmm5
    PADDD xmm3, xmm4
    PADDD xmm3, xmm2
    MOVDQA xmm2, xmmword ptr [rsp+298h+var_1C8]
    MOVDQA xmm5, xmm2
    MOVDQA xmm6, xmm2
    PUNPCKLBW xmm5, xmm1
    PUNPCKHBW xmm6, xmm1
    PCMPGTB xmm1, xmm2
    MOVDQA xmm4, xmm5
    PUNPCKHWD xmm5, xmm0
    PUNPCKLWD xmm4, xmm0
    PADDD xmm7, xmm4
    MOVDQA xmm4, xmm6
    PADDD xmm5, xmm7
    PUNPCKHWD xmm6, xmm0
    PUNPCKLWD xmm4, xmm0
    PXOR xmm7, xmm7
    PADDD xmm5, xmm4
    PADDD xmm5, xmm6
    MOVDQA xmm4, xmm5
    MOVDQA xmm5, xmm2
    MOVDQA xmm6, xmm0
    PUNPCKHBW xmm2, xmm1
    PUNPCKLBW xmm5, xmm1
    PCMPGTW xmm0, xmm2
    PCMPGTW xmm6, xmm5
    MOVDQA xmm1, xmm5
    PUNPCKHWD xmm5, xmm6
    PUNPCKLWD xmm1, xmm6
    PXOR xmm6, xmm6
    PADDD xmm3, xmm1
    PADDD xmm3, xmm5
    MOVDQA xmm5, xmm2
    PUNPCKHWD xmm2, xmm0
    MOVDQA xmm1, xmm4
    PUNPCKLWD xmm5, xmm0
    PSRLDQ xmm1, 8
    PADDD xmm4, xmm1
    MOVDQA xmm1, xmm4
    PADDD xmm3, xmm5
    PADDD xmm2, xmm3
    MOVDQA xmm0, xmm2
    PSRLDQ xmm1, 4
    PADDD xmm4, xmm1
    MOVD eax, xmm4
    PSRLDQ xmm0, 8
    PADDD xmm2, xmm0
    MOVDQA xmm0, xmm2
    LEA eax, [rax+rdx+100h]
    PXOR xmm5, xmm5
    PSRLDQ xmm0, 4
    PADDD xmm2, xmm0
    MOVD edx, xmm2
    ADD eax, esi
    MOVDQA xmm3, xmm7
    LEA edx, [rdx+rcx+100h]
    MOVSX ecx, sil
    MOVZX esi, [rsp+298h+var_1B6]
    ADD edx, ecx
    ADD eax, esi
    MOVSX ecx, sil
    MOVZX esi, [rsp+298h+var_1B5]
    ADD edx, ecx
    ADD eax, esi
    MOVSX ecx, sil
    MOVZX esi, [rsp+298h+var_1AC]
    ADD edx, ecx
    ADD eax, esi
    MOVSX ecx, sil
    MOVZX esi, [rsp+298h+var_1AB]
    ADD edx, ecx
    MOVSX ecx, sil
    ADD eax, esi
    ADD ecx, edx
    MOVZX edx, [rsp+298h+var_1AA]
    ADD eax, edx
    MOVSX esi, dl
    MOVZX edx, [rsp+298h+var_1A9]
    ADD ecx, esi
    MOV esi, edx
    ADD edx, eax
    LEA rax, [rsp+298h+var_1A8]
    MOVSX esi, sil
    ADD ecx, esi
    LEA rsi, [rsp+298h+var_48]
    NOP word ptr [rax+rax+00h]
loc_4E2CD8:
    MOVDQA xmm0, xmmword ptr [rax]
    ADD rax, 10h
    CMP rax, rsi
    MOVDQA xmm2, xmm0
    MOVDQA xmm4, xmm0
    PUNPCKLBW xmm2, xmm6
    PUNPCKHBW xmm4, xmm6
    MOVDQA xmm1, xmm2
    PUNPCKHWD xmm2, xmm5
    PUNPCKLWD xmm1, xmm5
    PADDD xmm3, xmm1
    PADDD xmm2, xmm3
    MOVDQA xmm3, xmm4
    MOVDQA xmm1, xmm0
    PUNPCKHWD xmm4, xmm5
    PUNPCKLWD xmm3, xmm5
    PADDD xmm3, xmm2
    MOVDQA xmm2, xmm6
    PADDD xmm3, xmm4
    MOVDQA xmm4, xmm5
    PCMPGTB xmm2, xmm0
    PUNPCKLBW xmm1, xmm2
    PUNPCKHBW xmm0, xmm2
    PCMPGTW xmm4, xmm1
    MOVDQA xmm2, xmm1
    PUNPCKHWD xmm1, xmm4
    PUNPCKLWD xmm2, xmm4
    MOVDQA xmm4, xmm5
    PCMPGTW xmm4, xmm0
    PADDD xmm2, xmm7
    PADDD xmm1, xmm2
    MOVDQA xmm2, xmm0
    PUNPCKHWD xmm0, xmm4
    PUNPCKLWD xmm2, xmm4
    PADDD xmm1, xmm2
    MOVDQA xmm7, xmm1
    PADDD xmm7, xmm0
    JNZ loc_4E2CD8
loc_4E2D71:
    MOVDQA xmm2, xmm7
    LEA rdi, [rsp+298h+nptr]
    LEA rsi, [rsp+298h+endptr]
    PSRLDQ xmm2, 8
    PADDD xmm2, xmm7
    MOVDQA xmm4, xmm2
    PSRLDQ xmm4, 4
    PADDD xmm2, xmm4
    MOVD r14d, xmm2
    MOVDQA xmm2, xmm3
    ADD r14d, ecx
    PSRLDQ xmm2, 8
    PADDD xmm3, xmm2
    MOVDQA xmm0, xmm3
    PSRLDQ xmm0, 4
    PADDD xmm3, xmm0
    MOVD r13d, xmm3
    ADD r13d, edx
    MOV edx, 8
    CALL _strtoul
    MOV rdx, [rsp+298h+endptr]
    MOVZX r12d, byte ptr [rdx]
    AND r12d, 0DFh
    JNZ loc_4E3962
loc_4E2DE2:
    CMP r13d, eax
    JZ loc_4E2DF0
loc_4E2DE7:
    CMP r14d, eax
    JNZ loc_4E3962
loc_4E2DF0:
    LEA rdi, [rsp+298h+nptr]
    XOR esi, esi
    MOV edx, 8
    CALL _strtoul
    CMP r13d, eax
    JZ loc_4E2E12
loc_4E2E09:
    CMP r14d, eax
    JNZ loc_4E3962
loc_4E2E12:
    MOVZX r13d, [rsp+298h+var_1AC]
    TEST r13b, r13b
    JZ loc_4E3338
loc_4E2E24:
    SUB r13d, 30h
    CMP [rsp+298h+var_FF], 0
    JNZ loc_4E3351
loc_4E2E36:
    CMP r13b, 7
    MOV qword ptr [rbp+8], 0
    SETBE r13b
    CMP qword ptr [rbx+60h], 0
    JNZ loc_4E2E60
loc_4E2E4D:
    TEST r13b, r13b
    JZ loc_4E2E60
loc_4E2E52:
    CMP [rsp+298h+var_1AB], 0
    JNZ loc_4E38CF
loc_4E2E60:
    XOR eax, eax
    CMP [rsp+298h+var_13F], 0
    JNZ loc_4E3630
loc_4E2E70:
    MOV [rbp+10h], rax
    XOR eax, eax
    CMP [rsp+298h+src], 0
    JNZ loc_4E3618
loc_4E2E84:
    LEA rdi, [rsp+298h+var_1C8+8]
    LEA rsi, [rsp+298h+endptr]
    MOV [rbp+18h], rax
    MOV edx, 8
    MOV [rsp+298h+nptr], 0
    CALL _strtoull
    MOV rdx, [rsp+298h+endptr]
    TEST byte ptr [rdx], 0DFh
    JZ loc_4E2F72
loc_4E2EB5:
    MOVZX eax, [rsp+298h+var_1C8+8]
    TEST al, al
    JNS loc_4E396E
loc_4E2EC5:
    MOVZX edx, [rsp+298h+var_1C8+9]
    ADD eax, eax
    SAR al, 1
    MOVSX rax, al
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+0Ah]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+0Bh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+0Ch]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+0Dh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+0Eh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+0Fh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1B8]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1B7]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1B6]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1B5]
    SHL rax, 8
    ADD rax, rdx
loc_4E2F72:
    LEA rdi, [rsp+298h+var_1D8+0Ch]
    LEA rsi, [rsp+298h+var_258]
    MOV [rbp+38h], rax
    MOV edx, 8
    MOV [rsp+298h+var_1C8+8], 0
    CALL _strtoull
    MOV rdx, [rsp+298h+var_258]
    TEST byte ptr [rdx], 0DFh
    JZ loc_4E3060
loc_4E2FA3:
    MOVZX eax, [rsp+298h+var_1D8+0Ch]
    TEST al, al
    JNS loc_4E396E
loc_4E2FB3:
    MOVZX edx, [rsp+298h+var_1D8+0Dh]
    ADD eax, eax
    SAR al, 1
    MOVSX rax, al
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+0Eh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+0Fh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+1]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+2]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+3]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+4]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+5]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+6]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1C8+7]
    SHL rax, 8
    ADD rax, rdx
loc_4E3060:
    LEA rdi, [rsp+298h+var_1D8+4]
    LEA rsi, [rsp+298h+var_260]
    MOV [rbp+20h], rax
    MOV edx, 8
    MOV [rsp+298h+var_1D8+0Ch], 0
    CALL _strtoull
    MOV rdx, [rsp+298h+var_260]
    TEST byte ptr [rdx], 0DFh
    JZ loc_4E3112
loc_4E3091:
    MOVZX eax, [rsp+298h+var_1D8+4]
    TEST al, al
    JNS loc_4E396E
loc_4E30A1:
    MOVZX edx, [rsp+298h+var_1D8+5]
    ADD eax, eax
    SAR al, 1
    MOVSX rax, al
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+6]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+7]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+8]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+9]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+0Ah]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+0Bh]
    SHL rax, 8
    ADD rax, rdx
loc_4E3112:
    LEA rdi, [rsp+298h+var_1E8+0Ch]
    LEA rsi, [rsp+298h+var_268]
    MOV [rbp+2Ch], eax
    MOV edx, 8
    MOV [rsp+298h+var_1D8+4], 0
    CALL _strtoull
    MOV rdx, [rsp+298h+var_268]
    TEST byte ptr [rdx], 0DFh
    JZ loc_4E31C3
loc_4E3142:
    MOVZX eax, [rsp+298h+var_1E8+0Ch]
    TEST al, al
    JNS loc_4E396E
loc_4E3152:
    MOVZX edx, [rsp+298h+var_1E8+0Dh]
    ADD eax, eax
    SAR al, 1
    MOVSX rax, al
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+0Eh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+0Fh]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+1]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+2]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1D8+3]
    SHL rax, 8
    ADD rax, rdx
loc_4E31C3:
    LEA rdi, [rsp+298h+var_1E8+4]
    LEA rsi, [rsp+298h+var_270]
    MOV [rbp+28h], eax
    MOV edx, 8
    MOV [rsp+298h+var_1E8+0Ch], 0
    CALL _strtoull
    MOV rdx, [rsp+298h+var_270]
    TEST byte ptr [rdx], 0DFh
    JZ loc_4E3274
loc_4E31F3:
    MOVZX eax, [rsp+298h+var_1E8+4]
    TEST al, al
    JNS loc_4E396E
loc_4E3203:
    MOVZX edx, [rsp+298h+var_1E8+5]
    ADD eax, eax
    SAR al, 1
    MOVSX rax, al
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+6]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+7]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+8]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+9]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+0Ah]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_1E8+0Bh]
    SHL rax, 8
    ADD rax, rdx
loc_4E3274:
    AND eax, 0FFFh
    CMP qword ptr [rbx+58h], 0
    MOV qword ptr [rbp+0], 0
    MOV [rbp+30h], eax
    JNZ loc_4E34D8
loc_4E328F:
    TEST r13b, r13b
    JZ loc_4E34D8
loc_4E3298:
    CMP [rsp+298h+var_EF], 0
    MOV [rsp+298h+var_1E8+4], 0
    JZ loc_4E3810
loc_4E32AE:
    LEA rax, [rsp+298h+buf]
    LEA rdi, [rsp+298h+var_EF]
    MOV [rsp+298h+var_54], 0
    MOV rsi, rax
    CALL sub_40A390
    MOV [rbp+0], rax
    JMP loc_4E34DA
loc_4E32D8:
    MOV edx, 5
    MOV esi, offset unk_557FC0
    MOV rdi, r12
    CALL _memcmp
    TEST eax, eax
    JZ loc_4E26E2
loc_4E32F2:
    NOP word ptr [rax+rax+00h]
loc_4E32F8:
    MOV edi, [rbx+4]
    NEG r13d
    MOV edx, 1
    MOVSXD rsi, r13d
    CALL _lseek64
    TEST rax, rax
    JNZ loc_4E397F
loc_4E3314:
    MOV edi, [rbx+4]
    XOR esi, esi
    CALL sub_4E6730
    TEST eax, eax
    JNZ loc_4E397F
loc_4E3326:
    MOV qword ptr [rbx+48h], 0
    JMP loc_4E2668
loc_4E3338:
    XOR r13d, r13d
    CMP [rsp+298h+var_FF], 0
    MOV [rsp+298h+var_1AC], 30h
    JZ loc_4E2E36
loc_4E3351:
    LEA rdi, [rsp+298h+var_F7]
    LEA rsi, [rsp+298h+var_278]
    MOV edx, 8
    MOVZX r15d, [rsp+298h+var_EF]
    MOV [rsp+298h+var_EF], 0
    CALL _strtoull
    MOV rdx, [rsp+298h+var_278]
    TEST byte ptr [rdx], 0DFh
    JZ loc_4E3409
loc_4E3387:
    MOVZX eax, [rsp+298h+var_F7]
    TEST al, al
    JNS loc_4E396E
loc_4E3397:
    MOVZX edx, [rsp+298h+var_F6]
    ADD eax, eax
    MOVZX r14d, [rsp+298h+var_F0]
    SAR al, 1
    MOVSX rax, al
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_F5]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_F4]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_F3]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_F2]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_F1]
    SHL rax, 8
    ADD rax, rdx
    SHL rax, 8
    ADD rax, r14
loc_4E3409:
    LEA rdi, [rsp+298h+var_FF]
    LEA rsi, [rsp+298h+var_280]
    MOV edx, 8
    MOV r14d, eax
    MOV [rsp+298h+var_F7], 0
    CALL _strtoull
    MOV rdx, [rsp+298h+var_280]
    TEST byte ptr [rdx], 0DFh
    JZ loc_4E34BA
loc_4E3439:
    MOVZX eax, [rsp+298h+var_FF]
    TEST al, al
    JNS loc_4E396E
loc_4E3449:
    MOVZX edx, [rsp+298h+var_FE]
    ADD eax, eax
    SAR al, 1
    MOVSX rax, al
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_FD]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_FC]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_FB]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_FA]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_F9]
    SHL rax, 8
    ADD rax, rdx
    MOVZX edx, [rsp+298h+var_F8]
    SHL rax, 8
    ADD rax, rdx
loc_4E34BA:
    MOV esi, r14d
    MOV edi, eax
    CALL sub_5301A0
    MOV [rbp+40h], rax
    MOV [rsp+298h+var_EF], r15b
    JMP loc_4E2E36
loc_4E34D8:
    XOR eax, eax
loc_4E34DA:
    MOVZX r14d, [rsp+298h+var_1AC]
    LEA edx, [r14-30h]
    CMP dl, 48h
    JA def_4E34F3
loc_4E34F0:
    MOVZX edx, dl
    JMP ds:jpt_4E34F3[rdx*8]
loc_4E3500:
    MOV esi, 2Fh
    MOV rdi, rax
    CALL sub_40A4C0
    TEST rax, rax
    JZ loc_4E38EA
loc_4E3516:
    OR dword ptr [rbp+30h], 4000h
loc_4E351D:
    MOV qword ptr [rbp+20h], 0
loc_4E3525:
    MOV rax, [rbx+58h]
    TEST rax, rax
    JZ loc_4E353A
loc_4E352E:
    MOV [rbp+0], rax
    MOV qword ptr [rbx+58h], 0
loc_4E353A:
    MOV rax, [rbx+60h]
    TEST rax, rax
    JZ loc_4E354F
loc_4E3543:
    MOV [rbp+8], rax
    MOV qword ptr [rbx+60h], 0
loc_4E354F:
    MOV rdi, [rbp+0]
    CALL sub_4E6E90
    MOV rdi, [rbp+0]
    MOV rsi, rax
    CALL sub_5369E0
    MOV rdi, [rbp+0]
    MOV esi, 2Fh
    CALL sub_40A4C0
    MOV rdi, rbx
    MOV r13, rax
    CALL qword ptr [rbx+8]
    TEST al, al
    JNZ loc_4E3600
loc_4E3583:
    MOV rdi, rbp
    CALL qword ptr [rbx+30h]
    TEST r13, r13
    JZ loc_4E3593
loc_4E358E:
    MOV byte ptr [r13+0], 0
loc_4E3593:
    MOV rdi, rbx
    CALL qword ptr [rbx+38h]
    CMP qword ptr [rbx+10h], 0
    JZ loc_4E3828
loc_4E35A4:
    MOV rsi, [rbp+0]
    LEA rdi, [rbx+20h]
    CALL sub_40A500
loc_4E35B1:
    MOV rax, [rbp+20h]
    ADD [rbx+48h], rax
    MOV rdi, [rbp+8]
    CALL _free
    MOV rdi, [rbp+10h]
    CALL _free
    MOV rdi, [rbp+18h]
    CALL _free
loc_4E35D4:
    MOV rbx, [rsp+298h+var_40]
    XOR rbx, fs:28h
    MOV eax, r12d
    JNZ loc_4E397A
loc_4E35EE:
    ADD rsp, 268h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E3600:
    MOV rdi, rbx
    CALL sub_4D7BC0
loc_4E3608:
    MOV rdi, [rbp+0]
    CALL _free
    JMP loc_4E35B1
loc_4E3618:
    LEA rdi, [rsp+298h+src]
    MOV esi, 20h
    CALL sub_40C2C0
    JMP loc_4E2E84
loc_4E3630:
    LEA rdi, [rsp+298h+var_13F]
    MOV esi, 20h
    CALL sub_40C2C0
    JMP loc_4E2E70
loc_4E3650:
    OR dword ptr [rbp+30h], 6000h
    JMP loc_4E351D
loc_4E3660:
    OR dword ptr [rbp+30h], 1000h
    JMP loc_4E351D
loc_4E3670:
    MOV rdi, [rbx+60h]
    CALL _free
    MOV rax, [rbp+20h]
    LEA rdi, [rax+1]
    CALL sub_40C260
    MOV [rbx+60h], rax
loc_4E368A:
    MOV rdx, [rbp+20h]
    MOV edi, [rbx+4]
    MOV rsi, rax
    CALL sub_535E80
    MOV rax, [rbp+20h]
    ADD [rbx+48h], rax
    JMP loc_4E265B
loc_4E36B0:
    MOV rdi, [rbx+58h]
    CALL _free
    MOV rax, [rbp+20h]
    LEA rdi, [rax+1]
    CALL sub_40C260
    MOV [rbx+58h], rax
    JMP loc_4E368A
loc_4E36D0:
    MOV r15, [rbp+20h]
    CMP r15, 0FFFFFh
    JA loc_4E3860
loc_4E36E1:
    LEA r12d, [r15+1FFh]
    MOV r13d, r15d
    AND r12d, 0FFFFFE00h
    LEA edi, [r12+1]
    CALL sub_40C220
    MOV edi, [rbx+4]
    MOV rsi, rax
    MOV rdx, r12
    MOV [rsp+298h+ptr], rax
    CALL sub_535E80
    MOV rax, [rsp+298h+ptr]
    ADD [rbx+48h], r12
    TEST r15, r15
    MOV byte ptr [rax+r15], 0
    JZ loc_4E38C1
loc_4E3724:
    MOV r12, rax
    JMP loc_4E3739
loc_4E3730:
    TEST r13d, r13d
    JZ loc_4E38C1
loc_4E3739:
    LEA rsi, [rsp+298h+endptr]
    MOV edx, 0Ah
    MOV rdi, r12
    CALL sub_40E6F0
    MOV edx, eax
    SUB r13d, eax
    MOV ecx, eax
    ADD r12, rdx
    OR ecx, r13d
    JS loc_4E38B5
loc_4E375E:
    TEST eax, eax
    JZ loc_4E38B5
loc_4E3766:
    MOV rax, cs:qword_78D1E8
    CMP dword ptr [rax], 16h
    JNZ loc_4E38B5
loc_4E3776:
    MOV r15, [rsp+298h+endptr]
    CMP byte ptr [r15], 20h
    JNZ loc_4E38B5
loc_4E3785:
    CMP r14b, 67h
    MOV byte ptr [r12-1], 0
    JZ loc_4E3730
loc_4E3791:
    LEA r8, [r15+1]
    MOV esi, offset aPath_0
    MOV rdi, r8
    MOV [rsp+298h+var_290], r8
    CALL sub_40A180
    TEST rax, rax
    MOV r8, [rsp+298h+var_290]
    JZ loc_4E3920
loc_4E37B5:
    MOV rdi, [rbx+58h]
    CALL _free
    LEA rdi, [r15+6]
    CALL sub_40C290
    MOV [rbx+58h], rax
    JMP loc_4E3730
loc_4E37D0:
    OR dword ptr [rbp+30h], 8000h
    JMP loc_4E351D
loc_4E37E0:
    OR dword ptr [rbp+30h], 0A000h
    JMP loc_4E351D
loc_4E37F0:
    OR dword ptr [rbp+30h], 2000h
    JMP loc_4E351D
loc_4E3800:
    MOVSX esi, r14b
    MOV edi, offset aUnknownTypefla
    XOR eax, eax
    CALL sub_40ABE0
loc_4E3810:
    LEA rdi, [rsp+298h+buf]
    CALL sub_40C290
    MOV [rbp+0], rax
    JMP loc_4E34DA
loc_4E3828:
    CMP qword ptr [rbx+18h], 0
    JNZ loc_4E35A4
loc_4E3833:
    TEST dword ptr [rbx], 200h
    JNZ loc_4E35A4
loc_4E383F:
    JMP loc_4E3608
loc_4E3848:
    CMP qword ptr [rbx+48h], 0
    JZ loc_4E3951
loc_4E3853:
    MOV r12d, 1
    JMP loc_4E35D4
loc_4E3860:
    XOR eax, eax
    MOVSX esi, r14b
    MOV edi, offset aWarningSkippin
    CALL sub_40AC80
    MOV rax, [rbp+20h]
    LEA r12, [rax+1FFh]
    AND r12, 0FFFFFFFFFFFFFE00h
    ADD [rbx+48h], r12
    SAR r12, 9
    TEST r12, r12
    JZ loc_4E2668
loc_4E3893:
    NOP dword ptr [rax+rax+00h]
loc_4E3898:
    MOV edi, [rbx+4]
    LEA rsi, [rsp+298h+buf]
    MOV edx, 200h
    CALL sub_535E80
    SUB r12, 1
    JNZ loc_4E3898
loc_4E38B0:
    JMP loc_4E2668
loc_4E38B5:
    MOV edi, offset aMalformedExten
    XOR eax, eax
    CALL sub_40AC80
loc_4E38C1:
    MOV rdi, [rsp+298h+ptr]
    CALL _free
    JMP loc_4E2668
loc_4E38CF:
    LEA rdi, [rsp+298h+var_1AB]
    MOV esi, 64h
    CALL sub_40C2C0
    MOV [rbp+8], rax
    JMP loc_4E2E60
loc_4E38EA:
    OR dword ptr [rbp+30h], 8000h
    JMP loc_4E3525
loc_4E38F6:
    CMP byte ptr [rbx+54h], 0
    JZ loc_4E398B
loc_4E3900:
    MOV edi, [rbx+4]
    LEA rsi, [rsp+298h+buf]
    MOV edx, 200h
    CALL sub_40D800
    CMP rax, 200h
    JNZ loc_4E3853
loc_4E391E:
    JMP loc_4E3900
loc_4E3920:
    MOV esi, offset unk_566A60
    MOV rdi, r8
    CALL sub_40A180
    TEST rax, rax
    JZ loc_4E3730
loc_4E3936:
    MOV rdi, [rbx+60h]
    CALL _free
    LEA rdi, [r15+0Ah]
    CALL sub_40C290
    MOV [rbx+60h], rax
    JMP loc_4E3730
loc_4E3951:
    MOV edi, offset aShortRead
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_4E3853
loc_4E3962:
    MOV edi, offset aInvalidTarHead
    XOR eax, eax
    CALL sub_40ABE0
loc_4E396E:
    MOV edi, offset aCorruptedOctal
    XOR eax, eax
    CALL sub_40ABE0
loc_4E397A:
    CALL ___stack_chk_fail
loc_4E397F:
    MOV edi, offset aInvalidTarMagi
    XOR eax, eax
    CALL sub_40ABE0
loc_4E398B:
    MOV byte ptr [rbx+54h], 1
    JMP loc_4E35D4
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### Q 90 - refresh
```assembly
loc_4D2E90:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 28h
    MOV rbp, cs:qword_7431F0
    MOV [rsp+58h+var_44], edi
    MOV edx, [rbp+38h]
    TEST edx, edx
    JZ loc_4D3278
loc_4D2EB4:
    MOV rdi, [rbp+10h]
    LEA rdx, [rbp+40h]
    LEA rsi, [rbp+3Ch]
    LEA r15, [rbp+580h]
    CALL sub_4D2B30
    CMP dword ptr [rbp+30h], 1
    MOV rax, [rbp+58h]
    MOV [rsp+58h+var_48], 0
    MOV [rsp+58h+s], rax
    JZ loc_4D3188
loc_4D2EE7:
    NOP word ptr [rax+rax+00000000h]
loc_4D2EF0:
    MOV r13d, [rbp+44h]
    MOV r12, [rsp+58h+s]
    MOV ebx, 7Eh
    MOV r11d, [rbp+6Ch]
    XOR r14d, r14d
    MOV r8d, r13d
    MOV r13, r12
    MOV r12d, ebx
    MOV ebx, r11d
    JMP loc_4D2F44
loc_4D2F18:
    MOV eax, r12d
    MOV ecx, r14d
loc_4D2F1E:
    LEA r14d, [rcx+1]
    MOVSXD rcx, ecx
    MOV [r15+rcx], al
    MOV ebx, [rbp+6Ch]
    CMP ebx, r8d
    JG loc_4D2F3A
loc_4D2F31:
    CMP r14d, ebx
    JGE loc_4D2FC0
loc_4D2F3A:
    CMP [rbp+8], r13
    JBE loc_4D2FF0
loc_4D2F44:
    MOV ecx, [rbp+34h]
    LEA eax, [rbx+rcx]
    CMP eax, r14d
    JBE loc_4D3088
loc_4D2F53:
    CMP [rbp+8], r13
    JBE loc_4D2F18
loc_4D2F59:
    MOVZX r12d, byte ptr [r13+0]
    LEA r9, [r13+1]
    CMP r12b, 0Ah
    MOV eax, r12d
    JZ loc_4D3088
loc_4D2F6F:
    TEST r12b, r12b
    JS loc_4D3000
loc_4D2F78:
    CMP r12b, 1Fh
    JBE loc_4D2F90
loc_4D2F7E:
    CMP r12b, 7Fh
    JZ loc_4D2F90
loc_4D2F84:
    MOV ecx, r14d
    MOV r13, r9
    JMP loc_4D2F1E
loc_4D2F90:
    CMP r12b, 9
    JZ loc_4D3020
loc_4D2F9A:
    LEA ecx, [r14+1]
    CMP r12b, 7Fh
    MOVSXD r14, r14d
    MOV byte ptr [r15+r14], 5Eh
    JZ loc_4D3070
loc_4D2FB0:
    ADD r12d, 40h
    MOV r13, r9
    MOV eax, r12d
    JMP loc_4D2F1E
loc_4D2FC0:
    MOVSXD rsi, ebx
    MOVSXD rdx, r14d
    MOV rdi, r15
    ADD rsi, r15
    MOV dword ptr [rsp+58h+ptr], r8d
    SUB r14d, ebx
    CALL _memmove
    MOV r8d, dword ptr [rsp+58h+ptr]
    SUB r8d, ebx
    CMP [rbp+8], r13
    JA loc_4D2F44
loc_4D2FE9:
    NOP dword ptr [rax+00000000h]
loc_4D2FF0:
    MOV r13d, r8d
    MOV ecx, [rbp+34h]
    JMP loc_4D308B
loc_4D3000:
    MOV ecx, r14d
    MOV r13, r9
    MOV eax, 2Eh
    MOV r12d, 2Eh
    JMP loc_4D2F1E
loc_4D3020:
    MOV eax, r14d
    LEA ecx, [rbx-1]
    CDQ 
    IDIV ebx
    CMP ecx, edx
    JZ loc_4D3262
loc_4D3031:
    MOVSXD rdi, r14d
    MOV ecx, r14d
    ADD rdi, r15
    NOP word ptr [rax+rax+00h]
loc_4D3040:
    MOV byte ptr [rdi], 20h
    ADD ecx, 1
    MOV esi, [rbp+6Ch]
    MOV eax, ecx
    ADD rdi, 1
    CDQ 
    IDIV esi
    SUB esi, 1
    CMP edx, esi
    JNZ loc_4D3040
loc_4D3059:
    MOV r13, r9
    MOV eax, 20h
    MOV r12d, 20h
    JMP loc_4D2F1E
loc_4D3070:
    MOV r13, r9
    MOV eax, 3Fh
    MOV r12d, 3Fh
    JMP loc_4D2F1E
loc_4D3088:
    MOV r13d, r8d
loc_4D308B:
    CMP r14d, r13d
    MOV r10d, r13d
    CMOVLE r10d, r14d
    SUB r14d, r10d
    MOVSXD r10, r10d
    CMP r14d, ecx
    LEA r13, [r15+r10]
    JNB loc_4D30BE
loc_4D30A4:
    MOV edx, ecx
    MOV esi, 20h
    SUB edx, r14d
    MOVSXD r14, r14d
    LEA rdi, [r13+r14+0]
    CALL _memset
    MOV ecx, [rbp+34h]
loc_4D30BE:
    MOV r14, [rbp+8]
    MOV rax, [rsp+58h+s]
    CMP r14, rax
    JBE loc_4D30F9
loc_4D30CC:
    MOV rdx, r14
    MOV esi, 0Ah
    MOV rdi, rax
    SUB rdx, rax
    MOV dword ptr [rsp+58h+ptr], ecx
    SUB r14, 1
    CALL _memchr
    TEST rax, rax
    MOV ecx, dword ptr [rsp+58h+ptr]
    CMOVZ rax, r14
    ADD rax, 1
    MOV [rsp+58h+s], rax
loc_4D30F9:
    LEA esi, [rcx-1]
    MOV eax, [rsp+58h+var_44]
    IMUL ecx, [rsp+58h+var_48]
    MOV edi, esi
    ADD rcx, [rbp+60h]
    TEST eax, eax
    JNZ loc_4D3210
loc_4D3113:
    TEST esi, esi
    JS loc_4D3297
loc_4D311B:
    MOVZX eax, byte ptr [r13+0]
    CMP [rcx], al
    JNZ loc_4D321F
loc_4D3128:
    XOR eax, eax
    XOR r14d, r14d
    JMP loc_4D3143
loc_4D3130:
    MOVZX edx, byte ptr [r13+rax+1]
    ADD rax, 1
    CMP dl, [rcx+rax]
    JNZ loc_4D3228
loc_4D3143:
    ADD r14d, 1
    CMP esi, r14d
    JGE loc_4D3130
loc_4D314C:
    MOV eax, esi
    XOR edx, edx
loc_4D3150:
    MOV ebx, [rbp+0A8h]
    CMP [rbp+44h], ebx
    MOV ebx, 1
    CMOVNZ edx, ebx
loc_4D3161:
    CMP esi, eax
    CMOVB eax, esi
    CMP eax, r14d
    JL loc_4D31B0
loc_4D316B:
    TEST edx, edx
    MOV edi, eax
    JNZ loc_4D31B7
loc_4D3171:
    ADD [rsp+58h+var_48], 1
    MOV eax, [rbp+30h]
    MOV edi, [rsp+58h+var_48]
    SUB eax, 1
    CMP eax, edi
    JA loc_4D2EF0
loc_4D3188:
    MOV esi, [rbp+40h]
    MOV edi, [rbp+3Ch]
    CALL sub_4D2E00
    MOV eax, [rbp+44h]
    MOV [rbp+0A8h], eax
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4D31B0:
    XOR r14d, r14d
    TEST edx, edx
    JZ loc_4D3171
loc_4D31B7:
    SUB edi, r14d
    MOVSXD rsi, r14d
    LEA r8d, [rdi+1]
    LEA r9, [rcx+rsi]
    ADD rsi, r13
    MOVSXD r8, r8d
    MOV rdi, r9
    MOV [rsp+58h+ptr], r9
    MOV rdx, r8
    MOV [rsp+58h+size], r8
    CALL _memcpy
    MOV edi, [rsp+58h+var_48]
    MOV esi, r14d
    CALL sub_4D2E00
    MOV r8, [rsp+58h+size]
    MOV r9, [rsp+58h+ptr]
    MOV edx, 1
    MOV rcx, cs:stdout
    MOV rsi, r8
    MOV rdi, r9
    CALL _fwrite
    JMP loc_4D3171
loc_4D3210:
    MOV eax, esi
    XOR r14d, r14d
    MOV edx, 1
    JMP loc_4D3161
loc_4D321F:
    XOR r14d, r14d
    NOP word ptr [rax+rax+00h]
loc_4D3228:
    MOVSXD r9, esi
    LEA r11, [r13+r9+0]
    ADD r9, rcx
    MOVZX eax, byte ptr [r9]
    CMP [r11], al
    MOV eax, esi
    JNZ loc_4D3258
loc_4D323E:
    XOR edx, edx
loc_4D3240:
    SUB eax, 1
    CMP r14d, eax
    JG loc_4D3258
loc_4D3248:
    MOVZX r8d, byte ptr [r11+rdx-1]
    SUB rdx, 1
    CMP r8b, [r9+rdx]
    JZ loc_4D3240
loc_4D3258:
    MOV edx, 1
    JMP loc_4D3150
loc_4D3262:
    MOV ecx, r14d
    MOV r13, r9
    MOV eax, 20h
    MOV r12d, 20h
    JMP loc_4D2F1E
loc_4D3278:
    MOV r12d, [rbp+34h]
    MOV ebx, [rbp+30h]
    CALL sub_4D1810
    SUB r12d, [rbp+34h]
    SUB ebx, [rbp+30h]
    OR ebx, r12d
    OR [rsp+58h+var_44], ebx
    JMP loc_4D2EB4
loc_4D3297:
    MOV eax, [rbp+44h]
    XOR edx, edx
    CMP [rbp+0A8h], eax
    MOV eax, esi
    SETNZ dl
    XOR r14d, r14d
    JMP loc_4D3161
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'MemoryAccess', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xB0', '0xB8', '0xC0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Copy and Adjust', 'inferred_category': 'Utility'}

##### T 90 - refresh
```assembly
loc_515580:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 58h
    MOV rbx, cs:qword_78D1F0
    MOV rax, fs:28h
    MOV [rsp+88h+var_40], rax
    XOR eax, eax
    MOV [rsp+88h+var_74], edi
    MOV edx, [rbx+38h]
    TEST edx, edx
    JZ loc_515A48
loc_5155B4:
    MOV rdi, [rbx+10h]
    LEA rdx, [rbx+40h]
    LEA rsi, [rbx+3Ch]
    CALL sub_514FC0
    MOV rax, [rbx+58h]
    MOV [rsp+88h+s], rax
    MOV eax, [rbx+30h]
    CMP eax, 1
    JZ loc_515AB8
loc_5155DA:
    LEA r14, [rbx+580h]
    LEA rax, [rsp+88h+var_68]
    MOV r12d, [rbx+34h]
    MOV [rsp+88h+var_78], 0
    MOV [rsp+88h+var_70], rax
    MOV r15, r14
    NOP word ptr [rax+rax+00h]
loc_515600:
    MOV r14d, [rbx+44h]
    MOV r8, [rsp+88h+s]
    MOV ecx, 7Eh
    MOV edx, r12d
    MOV ebp, [rbx+6Ch]
    XOR r13d, r13d
    MOV r12d, ecx
    MOV eax, r14d
    MOV r14, r8
    MOV r8d, eax
    JMP loc_515657
loc_515628:
    MOV eax, r12d
    MOV esi, r13d
loc_51562E:
    LEA r13d, [rsi+1]
    MOVSXD rsi, esi
    MOV [r15+rsi], al
    MOV ebp, [rbx+6Ch]
    CMP ebp, r8d
    JG loc_51564A
loc_515641:
    CMP r13d, ebp
    JGE loc_5156D0
loc_51564A:
    CMP [rbx+8], r14
    JBE loc_515700
loc_515654:
    MOV edx, [rbx+34h]
loc_515657:
    LEA eax, [rbp+rdx+0]
    CMP eax, r13d
    JBE loc_515798
loc_515664:
    CMP [rbx+8], r14
    JBE loc_515628
loc_51566A:
    MOVZX r12d, byte ptr [r14]
    LEA r9, [r14+1]
    CMP r12b, 0Ah
    MOV eax, r12d
    JZ loc_515798
loc_51567F:
    TEST r12b, r12b
    JS loc_515710
loc_515688:
    CMP r12b, 1Fh
    JBE loc_5156A0
loc_51568E:
    CMP r12b, 7Fh
    JZ loc_5156A0
loc_515694:
    MOV esi, r13d
    MOV r14, r9
    JMP loc_51562E
loc_5156A0:
    CMP r12b, 9
    JZ loc_515730
loc_5156AA:
    LEA esi, [r13+1]
    CMP r12b, 7Fh
    MOVSXD r13, r13d
    MOV byte ptr [r15+r13], 5Eh
    JZ loc_515780
loc_5156C0:
    ADD r12d, 40h
    MOV r14, r9
    MOV eax, r12d
    JMP loc_51562E
loc_5156D0:
    MOVSXD rsi, ebp
    MOVSXD rdx, r13d
    MOV rdi, r15
    ADD rsi, r15
    MOV dword ptr [rsp+88h+ptr], r8d
    SUB r13d, ebp
    CALL _memmove
    MOV r8d, dword ptr [rsp+88h+ptr]
    SUB r8d, ebp
    CMP [rbx+8], r14
    JA loc_515654
loc_5156F9:
    NOP dword ptr [rax+00000000h]
loc_515700:
    MOV r14d, r8d
    MOV r12d, [rbx+34h]
    JMP loc_51579E
loc_515710:
    MOV esi, r13d
    MOV r14, r9
    MOV eax, 2Eh
    MOV r12d, 2Eh
    JMP loc_51562E
loc_515730:
    MOV eax, r13d
    LEA ecx, [rbp-1]
    CDQ 
    IDIV ebp
    CMP ecx, edx
    JZ loc_515A32
loc_515741:
    MOVSXD rdi, r13d
    MOV esi, r13d
    ADD rdi, r15
    NOP word ptr [rax+rax+00h]
loc_515750:
    MOV byte ptr [rdi], 20h
    ADD esi, 1
    MOV ecx, [rbx+6Ch]
    MOV eax, esi
    ADD rdi, 1
    CDQ 
    IDIV ecx
    SUB ecx, 1
    CMP edx, ecx
    JNZ loc_515750
loc_515769:
    MOV r14, r9
    MOV eax, 20h
    MOV r12d, 20h
    JMP loc_51562E
loc_515780:
    MOV r14, r9
    MOV eax, 3Fh
    MOV r12d, 3Fh
    JMP loc_51562E
loc_515798:
    MOV r14d, r8d
    MOV r12d, edx
loc_51579E:
    CMP r13d, r14d
    MOV r9d, r14d
    CMOVLE r9d, r13d
    SUB r13d, r9d
    MOVSXD r9, r9d
    CMP r13d, r12d
    LEA rbp, [r15+r9]
    JNB loc_5157D3
loc_5157B7:
    MOV edx, r12d
    MOV esi, 20h
    SUB edx, r13d
    MOVSXD r13, r13d
    LEA rdi, [rbp+r13+0]
    CALL _memset
    MOV r12d, [rbx+34h]
loc_5157D3:
    MOV r13, [rbx+8]
    MOV rax, [rsp+88h+s]
    CMP r13, rax
    JBE loc_515808
loc_5157E1:
    MOV rdx, r13
    MOV esi, 0Ah
    MOV rdi, rax
    SUB rdx, rax
    SUB r13, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, r13
    ADD rax, 1
    MOV [rsp+88h+s], rax
loc_515808:
    MOV edi, [rsp+88h+var_78]
    MOV eax, [rsp+88h+var_74]
    LEA ecx, [r12-1]
    MOV r11d, ecx
    IMUL edi, r12d
    ADD rdi, [rbx+60h]
    TEST eax, eax
    JNZ loc_5159E0
loc_515828:
    TEST ecx, ecx
    JS loc_515AA0
loc_515830:
    MOVZX eax, byte ptr [rbp+0]
    CMP [rdi], al
    JNZ loc_5159EF
loc_51583C:
    XOR eax, eax
    XOR r13d, r13d
    JMP loc_51585A
loc_515848:
    MOVZX edx, byte ptr [rbp+rax+1]
    ADD rax, 1
    CMP dl, [rdi+rax]
    JNZ loc_5159F8
loc_51585A:
    ADD r13d, 1
    CMP ecx, r13d
    JGE loc_515848
loc_515863:
    MOV eax, ecx
    XOR edx, edx
loc_515867:
    MOV esi, [rbx+44h]
    CMP [rbx+0A8h], esi
    MOV esi, 1
    CMOVNZ edx, esi
loc_515878:
    CMP ecx, eax
    CMOVB eax, ecx
    CMP eax, r13d
    JL loc_515930
loc_515886:
    TEST edx, edx
    MOV r11d, eax
    JNZ loc_51593B
loc_515891:
    MOV eax, [rbx+30h]
    ADD [rsp+88h+var_78], 1
    MOV edi, [rsp+88h+var_78]
    LEA edx, [rax-1]
    CMP edx, edi
    JA loc_515600
loc_5158A8:
    MOV ecx, [rbx+3Ch]
    MOV esi, [rbx+40h]
    XOR edi, edi
    MOV r15, [rsp+88h+var_70]
    TEST ecx, ecx
    CMOVS ecx, edi
    CMP eax, ecx
    MOV eax, edi
    MOV rdi, r15
    CMOVBE ecx, edx
    TEST esi, esi
    LEA edx, [r12-1]
    CMOVNS eax, esi
    LEA r8d, [rcx+1]
    MOV esi, 1
    CMP eax, r12d
    MOV ecx, offset aUUh
    CMOVNB eax, edx
    MOV edx, 21h
    LEA r9d, [rax+1]
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    MOV rdi, r15
    CALL _fputs_unlocked
    MOV eax, [rbx+44h]
    MOV [rbx+0A8h], eax
    MOV rax, [rsp+88h+var_40]
    XOR rax, fs:28h
    JNZ loc_515ACD
loc_51591E:
    ADD rsp, 58h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_515930:
    XOR r13d, r13d
    TEST edx, edx
    JZ loc_515891
loc_51593B:
    SUB r11d, r13d
    MOVSXD rsi, r13d
    LEA r12d, [r11+1]
    LEA r11, [rdi+rsi]
    ADD rsi, rbp
    MOVSXD r12, r12d
    MOV rdi, r11
    MOV [rsp+88h+ptr], r11
    MOV rdx, r12
    CALL _memcpy
    MOV eax, [rbx+30h]
    MOV edi, [rsp+88h+var_78]
    MOV esi, 1
    MOV r14, [rsp+88h+var_70]
    LEA edx, [rax-1]
    CMP eax, edi
    MOV eax, 0
    CMOVA edx, edi
    TEST r13d, r13d
    MOV rdi, r14
    CMOVS r13d, eax
    MOV eax, [rbx+34h]
    LEA r8d, [rdx+1]
    MOV edx, 21h
    LEA ecx, [rax-1]
    CMP eax, r13d
    CMOVBE r13d, ecx
    MOV ecx, offset aUUh
    XOR eax, eax
    LEA r9d, [r13+1]
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    MOV rdi, r14
    CALL _fputs_unlocked
    MOV r11, [rsp+88h+ptr]
    MOV rcx, cs:stdout
    MOV rsi, r12
    MOV edx, 1
    MOV rdi, r11
    CALL _fwrite
    MOV r12d, [rbx+34h]
    JMP loc_515891
loc_5159E0:
    MOV eax, ecx
    XOR r13d, r13d
    MOV edx, 1
    JMP loc_515878
loc_5159EF:
    XOR r13d, r13d
    NOP word ptr [rax+rax+00h]
loc_5159F8:
    MOVSXD r8, ecx
    LEA r9, [rbp+r8+0]
    ADD r8, rdi
    MOVZX eax, byte ptr [r9]
    CMP [r8], al
    MOV eax, ecx
    JNZ loc_515A28
loc_515A0E:
    XOR edx, edx
loc_515A10:
    SUB eax, 1
    CMP eax, r13d
    JL loc_515A28
loc_515A18:
    MOVZX esi, byte ptr [r9+rdx-1]
    SUB rdx, 1
    CMP sil, [r8+rdx]
    JZ loc_515A10
loc_515A28:
    MOV edx, 1
    JMP loc_515867
loc_515A32:
    MOV esi, r13d
    MOV r14, r9
    MOV eax, 20h
    MOV r12d, 20h
    JMP loc_51562E
loc_515A48:
    LEA rdx, [rbx+30h]
    LEA rsi, [rbx+34h]
    XOR edi, edi
    MOV r12d, [rbx+34h]
    MOV ebp, [rbx+30h]
    CALL sub_40BBC0
    MOV edx, [rbx+30h]
    CMP edx, 1000h
    JBE loc_515A75
loc_515A69:
    MOV dword ptr [rbx+30h], 1000h
    MOV edx, 1000h
loc_515A75:
    MOV eax, [rbx+34h]
    CMP eax, 1000h
    JBE loc_515A8B
loc_515A7F:
    MOV dword ptr [rbx+34h], 1000h
    MOV eax, 1000h
loc_515A8B:
    SUB ebp, edx
    OR ebp, [rsp+88h+var_74]
    SUB r12d, eax
    OR ebp, r12d
    MOV [rsp+88h+var_74], ebp
    JMP loc_5155B4
loc_515AA0:
    MOV eax, [rbx+44h]
    XOR edx, edx
    CMP [rbx+0A8h], eax
    MOV eax, ecx
    SETNZ dl
    XOR r13d, r13d
    JMP loc_515878
loc_515AB8:
    LEA rdi, [rsp+88h+var_68]
    MOV r12d, [rbx+34h]
    XOR edx, edx
    MOV [rsp+88h+var_70], rdi
    JMP loc_5158A8
loc_515ACD:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Size', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xB0', '0xB8', '0xC0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy with Conditional Length Adjustment', 'inferred_category': 'Utility/Helper'}

##### Q 91 - list_i2c_busses_and_exit
```assembly
loc_41B3E0:
    PUSH r14
    PUSH r13
    MOV edi, offset aSysClassI2cDev
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 1A0h
    LEA r12, [rsp+1C8h+s]
    MOV rax, fs:28h
    MOV [rsp+1C8h+var_30], rax
    XOR eax, eax
    CALL sub_40B500
    MOV r13, rax
    NOP dword ptr [rax+00h]
loc_41B418:
    MOV rdi, r13
    CALL _readdir64
    TEST rax, rax
    JZ loc_41B538
loc_41B429:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_41B418
loc_41B42F:
    LEA rbx, [rax+13h]
    SUB rsp, 8
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSName
    MOV ecx, 0FFh
    MOV edx, 1
    PUSH rbx
    MOV esi, 0FFh
    XOR eax, eax
    LEA rdi, [rsp+1D8h+filename]
    CALL ___snprintf_chk
    LEA rdi, [rsp+1D8h+filename]
    MOV esi, (offset aNTR+5)
    CALL _fopen64
    TEST rax, rax
    MOV rbp, rax
    POP r11
    POP r14
    JZ loc_41B53F
loc_41B484:
    XOR eax, eax
    MOV ecx, 10h
    MOV rdi, r12
    REP 
    MOV rdx, rbp
    MOV esi, 80h
    MOV rdi, r12
    CALL _fgets_unlocked
    MOV rdi, rbp
    MOV r14, rax
    CALL _fclose
    TEST r14, r14
    JZ loc_41B418
loc_41B4B5:
    MOV esi, 0Ah
    MOV rdi, r12
    CALL _strchr
    TEST rax, rax
    JZ loc_41B4CA
loc_41B4C7:
    MOV byte ptr [rax], 0
loc_41B4CA:
    LEA rdx, [rsp+1C8h+var_1C4]
    XOR eax, eax
    MOV esi, (offset aDevI2cD+5)
    MOV rdi, rbx
    CALL _sscanf
    CMP eax, 1
    JNZ loc_41B418
loc_41B4E7:
    MOV esi, offset aIsa_0
    MOV rdi, r12
    MOV ebx, 1
    CALL sub_4097D0
    TEST rax, rax
    JZ loc_41B656
loc_41B502:
    MOV eax, ebx
    MOV edx, [rsp+1C8h+var_1C4]
    MOV r8, r12
    SHL rax, 4
    MOV esi, offset aI2cD10s32sS
    MOV edi, 1
    MOV r9, ds:off_4F8948[rax]
    MOV rcx, ds:off_4F8940[rax]
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B418
loc_41B538:
    XOR edi, edi
    CALL _exit
loc_41B53F:
    PUSH r8
    PUSH rbx
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSDeviceName
    MOV ecx, 0FFh
    MOV edx, 1
    LEA rdi, [rsp+1D8h+filename]
    MOV esi, 0FFh
    XOR eax, eax
    CALL ___snprintf_chk
    LEA rdi, [rsp+1D8h+filename]
    MOV esi, (offset aNTR+5)
    CALL _fopen64
    TEST rax, rax
    MOV rbp, rax
    POP r9
    POP r10
    JNZ loc_41B484
loc_41B58E:
    PUSH rcx
    PUSH rbx
    MOV esi, 0FFh
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSDeviceName
    MOV ecx, 0FFh
    LEA rdi, [rsp+1D8h+filename]
    MOV edx, 1
    XOR eax, eax
    CALL ___snprintf_chk
    LEA rdi, [rsp+1D8h+filename]
    CALL _opendir
    TEST rax, rax
    MOV r14, rax
    POP rsi
    POP rdi
    JZ loc_41B418
loc_41B5D5:
    NOP dword ptr [rax]
loc_41B5D8:
    MOV rdi, r14
    CALL _readdir64
    TEST rax, rax
    JZ loc_41B418
loc_41B5E9:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_41B5D8
loc_41B5EF:
    LEA rbp, [rax+13h]
    MOV esi, offset aI2c
    MOV rdi, rbp
    CALL sub_4097D0
    TEST rax, rax
    JZ loc_41B5D8
loc_41B605:
    PUSH rbp
    PUSH rbx
    MOV edx, 1
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSDeviceSName
    MOV ecx, 0FFh
    LEA rdi, [rsp+1D8h+filename]
    MOV esi, 0FFh
    XOR eax, eax
    CALL ___snprintf_chk
    LEA rdi, [rsp+1D8h+filename]
    MOV esi, (offset aNTR+5)
    CALL _fopen64
    MOV rbp, rax
    TEST rbp, rbp
    POP rax
    POP rdx
    JZ loc_41B418
loc_41B651:
    JMP loc_41B484
loc_41B656:
    MOV edi, [rsp+1C8h+var_1C4]
    MOV ebx, 2
    CALL sub_41AF90
    LEA rdx, [rsp+1C8h+var_1C0]
    MOV edi, eax
    MOV ebp, eax
    MOV ecx, offset aCanTGetAdapter
    XOR eax, eax
    MOV esi, 705h
    CALL sub_40B620
    MOV rax, [rsp+1C8h+var_1C0]
    TEST al, 1
    JZ loc_41B693
loc_41B687:
    MOV edi, ebp
    CALL _close
    JMP loc_41B502
loc_41B693:
    AND eax, 7E0000h
    CMP rax, 1
    SBB ebx, ebx
    NOT ebx
    AND ebx, 3
    JMP loc_41B687
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x638', '0x5B0', '0x598', '0x17'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Iterative Search', 'inferred_category': 'Search/Traversal'}

##### T 91 - list_i2c_busses_and_exit
```assembly
loc_4218A0:
    PUSH r14
    PUSH r13
    MOV edi, offset aSysClassI2cDev
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 1C0h
    LEA r12, [rsp+1E8h+s]
    MOV rax, fs:28h
    MOV [rsp+1E8h+var_30], rax
    XOR eax, eax
    CALL sub_40CD20
    MOV r13, rax
    NOP dword ptr [rax+00h]
loc_4218D8:
    MOV rdi, r13
    CALL _readdir64
    TEST rax, rax
    JZ loc_4219F8
loc_4218E9:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_4218D8
loc_4218EF:
    LEA rbx, [rax+13h]
    SUB rsp, 8
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSName
    MOV ecx, 0FFh
    MOV edx, 1
    PUSH rbx
    MOV esi, 0FFh
    XOR eax, eax
    LEA rdi, [rsp+1F8h+filename]
    CALL ___snprintf_chk
    LEA rdi, [rsp+1F8h+filename]
    MOV esi, (offset aNTR+5)
    CALL _fopen64
    TEST rax, rax
    MOV rbp, rax
    POP r11
    POP r14
    JZ loc_4219FF
loc_421944:
    XOR eax, eax
    MOV ecx, 10h
    MOV rdi, r12
    REP 
    MOV rdx, rbp
    MOV esi, 80h
    MOV rdi, r12
    CALL _fgets_unlocked
    MOV rdi, rbp
    MOV r14, rax
    CALL _fclose
    TEST r14, r14
    JZ loc_4218D8
loc_421975:
    MOV esi, 0Ah
    MOV rdi, r12
    CALL _strchr
    TEST rax, rax
    JZ loc_42198A
loc_421987:
    MOV byte ptr [rax], 0
loc_42198A:
    LEA rdx, [rsp+1E8h+var_1E4]
    XOR eax, eax
    MOV esi, offset aI2cD
    MOV rdi, rbx
    CALL _sscanf
    CMP eax, 1
    JNZ loc_4218D8
loc_4219A7:
    MOV esi, offset aIsa_0
    MOV rdi, r12
    MOV ebx, 1
    CALL sub_40A180
    TEST rax, rax
    JZ loc_421B16
loc_4219C2:
    MOV eax, ebx
    MOV edx, [rsp+1E8h+var_1E4]
    MOV r8, r12
    SHL rax, 4
    MOV esi, offset aI2cD10s32sS
    MOV edi, 1
    MOV r9, ds:off_5464A8[rax]
    MOV rcx, ds:off_5464A0[rax]
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4218D8
loc_4219F8:
    XOR edi, edi
    CALL _exit
loc_4219FF:
    PUSH r8
    PUSH rbx
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSDeviceName
    MOV ecx, 0FFh
    MOV edx, 1
    LEA rdi, [rsp+1F8h+filename]
    MOV esi, 0FFh
    XOR eax, eax
    CALL ___snprintf_chk
    LEA rdi, [rsp+1F8h+filename]
    MOV esi, (offset aNTR+5)
    CALL _fopen64
    TEST rax, rax
    MOV rbp, rax
    POP r9
    POP r10
    JNZ loc_421944
loc_421A4E:
    PUSH rcx
    PUSH rbx
    MOV esi, 0FFh
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSDeviceName
    MOV ecx, 0FFh
    LEA rdi, [rsp+1F8h+filename]
    MOV edx, 1
    XOR eax, eax
    CALL ___snprintf_chk
    LEA rdi, [rsp+1F8h+filename]
    CALL _opendir
    TEST rax, rax
    MOV r14, rax
    POP rsi
    POP rdi
    JZ loc_4218D8
loc_421A95:
    NOP dword ptr [rax]
loc_421A98:
    MOV rdi, r14
    CALL _readdir64
    TEST rax, rax
    JZ loc_4218D8
loc_421AA9:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_421A98
loc_421AAF:
    LEA rbp, [rax+13h]
    MOV esi, offset aI2c
    MOV rdi, rbp
    CALL sub_40A180
    TEST rax, rax
    JZ loc_421A98
loc_421AC5:
    PUSH rbp
    PUSH rbx
    MOV edx, 1
    MOV r9d, offset aSysClassI2cDev
    MOV r8d, offset aSSDeviceSName
    MOV ecx, 0FFh
    LEA rdi, [rsp+1F8h+filename]
    MOV esi, 0FFh
    XOR eax, eax
    CALL ___snprintf_chk
    LEA rdi, [rsp+1F8h+filename]
    MOV esi, (offset aNTR+5)
    CALL _fopen64
    MOV rbp, rax
    TEST rbp, rbp
    POP rax
    POP rdx
    JZ loc_4218D8
loc_421B11:
    JMP loc_421944
loc_421B16:
    MOV r8d, [rsp+1E8h+var_1E4]
    LEA rdi, [rsp+1E8h+file]
    MOV ecx, offset unk_55D7B7
    MOV edx, 18h
    MOV esi, 1
    CALL ___sprintf_chk
    LEA rdi, [rsp+1E8h+file]
    XOR eax, eax
    MOV esi, 2
    CALL _open64
    TEST eax, eax
    MOV ebp, eax
    JS loc_421B7D
loc_421B4B:
    LEA rdx, [rsp+1E8h+var_1E0]
    XOR eax, eax
    MOV ecx, offset aCanTGetAdapter
    MOV esi, 705h
    MOV edi, ebp
    MOV ebx, 2
    CALL sub_40CE40
    MOV rax, [rsp+1E8h+var_1E0]
    TEST al, 1
    JZ loc_421BA1
loc_421B71:
    MOV edi, ebp
    CALL _close
    JMP loc_4219C2
loc_421B7D:
    MOV rax, cs:qword_78D1E8
    CMP dword ptr [rax], 2
    JNZ loc_421BB3
loc_421B89:
    LEA rdi, [rsp+1E8h+file]
    MOV esi, 2
    MOV [rsp+1E8h+var_1D0], 2Fh
    CALL sub_40C3E0
    MOV ebp, eax
    JMP loc_421B4B
loc_421BA1:
    AND eax, 7E0000h
    CMP rax, 1
    SBB ebx, ebx
    NOT ebx
    AND ebx, 3
    JMP loc_421B71
loc_421BB3:
    LEA rsi, [rsp+1E8h+file]
    MOV edi, offset aCanTOpenS
    XOR eax, eax
    CALL sub_40A7B0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x638', '0x5B0', '0x78F', '0x7A6', '0x79A', '0x1D', '0x56E', '0x17', '0x598', '0x364', '0x35B', '0x1E', '0x53F', '0x584', '0x0D', '0x556', '0x818'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 28, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'FTP Client State Handling', 'inferred_category': 'Network/Protocol'}

##### Q 92 - set_environ
```assembly
loc_42E0B0:
    PUSH r15
    PUSH r14
    MOV r15, rsi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 18h
    MOV rbx, qword ptr cs:dest.c_iflag
    MOV [rsp+48h+var_40], rdx
    TEST rbx, rbx
    JZ loc_42E105
loc_42E0D5:
    MOV rdi, [rbx]
    TEST rdi, rdi
    JZ loc_42E23C
loc_42E0E1:
    NOP dword ptr [rax+00000000h]
loc_42E0E8:
    ADD rbx, 8
    CALL _free
    MOV rdi, [rbx]
    TEST rdi, rdi
    JNZ loc_42E0E8
loc_42E0F9:
    MOV rdi, qword ptr cs:dest.c_iflag
loc_42E100:
    CALL _free
loc_42E105:
    MOV eax, [rbp+18h]
    LEA edi, [rax+7]
    MOVSXD rdi, edi
    SHL rdi, 3
    CALL sub_40AD10
    MOV r12, rax
    MOV qword ptr cs:dest.c_iflag, rax
    MOV eax, [rbp+18h]
    TEST eax, eax
    JLE loc_42E190
loc_42E128:
    XOR ebx, ebx
    XOR r14d, r14d
    JMP loc_42E13E
loc_42E130:
    ADD r14d, 1
    ADD rbx, 10h
    CMP [rbp+18h], r14d
    JLE loc_42E190
loc_42E13E:
    MOV rax, [rbp+20h]
    MOV edi, offset aUp_3
    MOV rsi, [rax+rbx]
    CALL sub_4098B0
    TEST eax, eax
    JNS loc_42E130
loc_42E154:
    MOV rax, rbx
    ADD rax, [rbp+20h]
    MOV edi, offset aIfSS
    ADD r14d, 1
    ADD rbx, 10h
    LEA r13, [r12+8]
    MOV rdx, [rax+8]
    MOV rsi, [rax]
    CALL sub_42E020
    CMP [rbp+18h], r14d
    MOV [r12], rax
    MOV r12, r13
    JG loc_42E13E
loc_42E186:
    NOP word ptr [rax+rax+00000000h]
loc_42E190:
    MOV rdx, [rbp+10h]
    MOV esi, offset aIface
    MOV edi, offset aSS_3
    CALL sub_42E020
    MOV [r12], rax
    MOV rax, [rbp+0]
    MOV esi, offset aAddrfam
    MOV edi, offset aSS_3
    MOV rdx, [rax]
    CALL sub_42E020
    MOV [r12+8], rax
    MOV rax, [rbp+8]
    MOV esi, 510A36h
    MOV edi, offset aSS_3
    MOV rdx, [rax]
    CALL sub_42E020
    MOV rdx, r15
    MOV esi, offset aMode_0
    MOV edi, offset aSS_3
    MOV [r12+10h], rax
    CALL sub_42E020
    MOV rdx, [rsp+48h+var_40]
    MOV [r12+18h], rax
    MOV esi, offset aPhase
    MOV edi, offset aSS_3
    CALL sub_42E020
    MOV [r12+20h], rax
    MOV rdx, qword ptr cs:dest.c_cflag
    TEST rdx, rdx
    JZ loc_42E22D
loc_42E219:
    MOV esi, offset aPath
    MOV edi, offset aSS_3
    CALL sub_42E020
    MOV [r12+28h], rax
loc_42E22D:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42E23C:
    MOV rdi, rbx
    JMP loc_42E100
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFFh', '0xE3h', '0x5Ch', '0x22h', '0x40h', '0x5', '0x6E5Ch', '0x725Ch', '0x745Ch', '0x5C5Ch', '0x225Ch'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### T 92 - set_environ
```assembly
loc_4394A0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV r12, rsi
    SUB rsp, 18h
    MOV rbx, qword ptr cs:buf.c_iflag
    MOV [rsp+48h+var_40], rdx
    TEST rbx, rbx
    JZ loc_4394F5
loc_4394C5:
    MOV rdi, [rbx]
    TEST rdi, rdi
    JZ loc_4399B8
loc_4394D1:
    NOP dword ptr [rax+00000000h]
loc_4394D8:
    ADD rbx, 8
    CALL _free
    MOV rdi, [rbx]
    TEST rdi, rdi
    JNZ loc_4394D8
loc_4394E9:
    MOV rdi, qword ptr cs:buf.c_iflag
loc_4394F0:
    CALL _free
loc_4394F5:
    MOV eax, [r13+18h]
    LEA edi, [rax+7]
    MOVSXD rdi, edi
    SHL rdi, 3
    CALL sub_40C260
    MOV rbx, rax
    MOV qword ptr cs:buf.c_iflag, rax
    MOV eax, [r13+18h]
    TEST eax, eax
    JLE loc_439610
loc_43951E:
    XOR r15d, r15d
    XOR ebp, ebp
    JMP loc_439539
loc_439528:
    ADD ebp, 1
    ADD r15, 10h
    CMP [r13+18h], ebp
    JLE loc_439610
loc_439539:
    MOV rax, [r13+20h]
    MOV edi, offset aUp_3
    MOV rsi, [rax+r15]
    CALL sub_40A260
    TEST eax, eax
    JNS loc_439528
loc_43954F:
    MOV rax, r15
    ADD rax, [r13+20h]
    MOV edi, offset aIfSS
    LEA r14, [rbx+8]
    MOV rdx, [rax+8]
    MOV rsi, [rax]
    XOR eax, eax
    CALL sub_40C860
    MOVZX edx, byte ptr [rax]
    MOV rsi, rax
    MOV rdi, rax
    CMP dl, 3Dh
    JZ loc_4395E8
loc_43957B:
    TEST dl, dl
    JNZ loc_4395B9
loc_43957F:
    JMP loc_4395E8
loc_439588:
    LEA r9d, [rdx-61h]
    MOV ecx, edx
    CMP r9b, 19h
    JA loc_439599
loc_439594:
    SUB edx, 20h
    MOV ecx, edx
loc_439599:
    LEA r9d, [rcx-30h]
    CMP r9b, 9
    JA loc_4395C8
loc_4395A3:
    ADD rsi, 1
    MOV [rdi], dl
    ADD rdi, 1
    MOVZX edx, byte ptr [rsi]
    TEST dl, dl
    JZ loc_4395E8
loc_4395B4:
    CMP dl, 3Dh
    JZ loc_4395E8
loc_4395B9:
    CMP dl, 2Dh
    JNZ loc_439588
loc_4395BE:
    MOV edx, 5Fh
    JMP loc_4395A3
loc_4395C8:
    OR ecx, 20h
    SUB ecx, 61h
    CMP cl, 19h
    JBE loc_4395A3
loc_4395D3:
    CMP dl, 5Fh
    JZ loc_4395A3
loc_4395D8:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
    TEST dl, dl
    JNZ loc_4395B4
loc_4395E3:
    NOP dword ptr [rax+rax+00h]
loc_4395E8:
    MOV [rsp+48h+var_48], rax
    ADD ebp, 1
    ADD r15, 10h
    CALL sub_5369E0
    CMP [r13+18h], ebp
    MOV rax, [rsp+48h+var_48]
    MOV [rbx], rax
    MOV rbx, r14
    JG loc_439539
loc_43960C:
    NOP dword ptr [rax+00h]
loc_439610:
    MOV rdx, [r13+10h]
    MOV esi, offset aIface_0
    MOV edi, offset aSS_3
    XOR eax, eax
    CALL sub_40C860
    MOVZX edx, byte ptr [rax]
    MOV r14, rax
    MOV rsi, rax
    MOV rdi, rax
    TEST dl, dl
    JZ loc_4396A0
loc_439635:
    CMP dl, 3Dh
    JNZ loc_439671
loc_43963A:
    JMP loc_4396A0
loc_439640:
    LEA r8d, [rdx-61h]
    MOV ecx, edx
    CMP r8b, 19h
    JA loc_439651
loc_43964C:
    SUB edx, 20h
    MOV ecx, edx
loc_439651:
    LEA r8d, [rcx-30h]
    CMP r8b, 9
    JA loc_439680
loc_43965B:
    ADD rsi, 1
    MOV [rdi], dl
    ADD rdi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JZ loc_4396A0
loc_43966D:
    TEST dl, dl
    JZ loc_4396A0
loc_439671:
    CMP dl, 2Dh
    JNZ loc_439640
loc_439676:
    MOV edx, 5Fh
    JMP loc_43965B
loc_439680:
    OR ecx, 20h
    SUB ecx, 61h
    CMP cl, 19h
    JBE loc_43965B
loc_43968B:
    CMP dl, 5Fh
    JZ loc_43965B
loc_439690:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JNZ loc_43966D
loc_43969C:
    NOP dword ptr [rax+00h]
loc_4396A0:
    CALL sub_5369E0
    MOV rax, [r13+0]
    MOV [rbx], r14
    MOV esi, offset aAddrfam
    MOV edi, offset aSS_3
    MOV rdx, [rax]
    XOR eax, eax
    CALL sub_40C860
    MOVZX edx, byte ptr [rax]
    MOV r14, rax
    MOV rsi, rax
    MOV rdi, rax
    CMP dl, 3Dh
    JNZ loc_439705
loc_4396D1:
    JMP loc_439738
loc_4396D8:
    LEA r8d, [rdx-61h]
    MOV ecx, edx
    CMP r8b, 19h
    JA loc_4396E9
loc_4396E4:
    SUB edx, 20h
    MOV ecx, edx
loc_4396E9:
    LEA r8d, [rcx-30h]
    CMP r8b, 9
    JA loc_439718
loc_4396F3:
    ADD rsi, 1
    MOV [rdi], dl
    ADD rdi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JZ loc_439738
loc_439705:
    TEST dl, dl
    JZ loc_439738
loc_439709:
    CMP dl, 2Dh
    JNZ loc_4396D8
loc_43970E:
    MOV edx, 5Fh
    JMP loc_4396F3
loc_439718:
    OR ecx, 20h
    SUB ecx, 61h
    CMP cl, 19h
    JBE loc_4396F3
loc_439723:
    CMP dl, 5Fh
    JZ loc_4396F3
loc_439728:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JNZ loc_439705
loc_439734:
    NOP dword ptr [rax+00h]
loc_439738:
    CALL sub_5369E0
    MOV rax, [r13+8]
    MOV [rbx+8], r14
    MOV esi, 55EAE6h
    MOV edi, offset aSS_3
    MOV rdx, [rax]
    XOR eax, eax
    CALL sub_40C860
    MOVZX edx, byte ptr [rax]
    MOV r13, rax
    MOV rsi, rax
    MOV rdi, rax
    CMP dl, 3Dh
    JNZ loc_43979D
loc_43976A:
    JMP loc_4397D0
loc_439770:
    LEA r8d, [rdx-61h]
    MOV ecx, edx
    CMP r8b, 19h
    JA loc_439781
loc_43977C:
    SUB edx, 20h
    MOV ecx, edx
loc_439781:
    LEA r8d, [rcx-30h]
    CMP r8b, 9
    JA loc_4397B0
loc_43978B:
    ADD rsi, 1
    MOV [rdi], dl
    ADD rdi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JZ loc_4397D0
loc_43979D:
    TEST dl, dl
    JZ loc_4397D0
loc_4397A1:
    CMP dl, 2Dh
    JNZ loc_439770
loc_4397A6:
    MOV edx, 5Fh
    JMP loc_43978B
loc_4397B0:
    OR ecx, 20h
    SUB ecx, 61h
    CMP cl, 19h
    JBE loc_43978B
loc_4397BB:
    CMP dl, 5Fh
    JZ loc_43978B
loc_4397C0:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JNZ loc_43979D
loc_4397CC:
    NOP dword ptr [rax+00h]
loc_4397D0:
    CALL sub_5369E0
    MOV rdx, r12
    MOV esi, offset aMode_0
    MOV edi, offset aSS_3
    XOR eax, eax
    MOV [rbx+10h], r13
    CALL sub_40C860
    MOVZX edx, byte ptr [rax]
    MOV r12, rax
    MOV rsi, rax
    MOV rdi, rax
    CMP dl, 3Dh
    JNZ loc_43982D
loc_4397FE:
    JMP loc_439860
loc_439800:
    LEA r8d, [rdx-61h]
    MOV ecx, edx
    CMP r8b, 19h
    JA loc_439811
loc_43980C:
    SUB edx, 20h
    MOV ecx, edx
loc_439811:
    LEA r8d, [rcx-30h]
    CMP r8b, 9
    JA loc_439840
loc_43981B:
    ADD rsi, 1
    MOV [rdi], dl
    ADD rdi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JZ loc_439860
loc_43982D:
    TEST dl, dl
    JZ loc_439860
loc_439831:
    CMP dl, 2Dh
    JNZ loc_439800
loc_439836:
    MOV edx, 5Fh
    JMP loc_43981B
loc_439840:
    OR ecx, 20h
    SUB ecx, 61h
    CMP cl, 19h
    JBE loc_43981B
loc_43984B:
    CMP dl, 5Fh
    JZ loc_43981B
loc_439850:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JNZ loc_43982D
loc_43985C:
    NOP dword ptr [rax+00h]
loc_439860:
    CALL sub_5369E0
    MOV rdx, [rsp+48h+var_40]
    MOV esi, offset aPhase
    MOV edi, offset aSS_3
    XOR eax, eax
    MOV [rbx+18h], r12
    CALL sub_40C860
    MOVZX edx, byte ptr [rax]
    MOV rbp, rax
    MOV rsi, rax
    MOV rdi, rax
    TEST dl, dl
    JZ loc_439900
loc_43988F:
    CMP dl, 3Dh
    JNZ loc_4398D1
loc_439894:
    JMP loc_439900
loc_4398A0:
    LEA r8d, [rdx-61h]
    MOV ecx, edx
    CMP r8b, 19h
    JA loc_4398B1
loc_4398AC:
    SUB edx, 20h
    MOV ecx, edx
loc_4398B1:
    LEA r8d, [rcx-30h]
    CMP r8b, 9
    JA loc_4398E0
loc_4398BB:
    ADD rsi, 1
    MOV [rdi], dl
    ADD rdi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JZ loc_439900
loc_4398CD:
    TEST dl, dl
    JZ loc_439900
loc_4398D1:
    CMP dl, 2Dh
    JNZ loc_4398A0
loc_4398D6:
    MOV edx, 5Fh
    JMP loc_4398BB
loc_4398E0:
    OR ecx, 20h
    SUB ecx, 61h
    CMP cl, 19h
    JBE loc_4398BB
loc_4398EB:
    CMP dl, 5Fh
    JZ loc_4398BB
loc_4398F0:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
    CMP dl, 3Dh
    JNZ loc_4398CD
loc_4398FC:
    NOP dword ptr [rax+00h]
loc_439900:
    CALL sub_5369E0
    MOV [rbx+20h], rbp
    MOV rdx, qword ptr cs:buf.c_cflag
    TEST rdx, rdx
    JZ loc_4399A9
loc_439919:
    MOV esi, offset aPath
    MOV edi, offset aSS_3
    XOR eax, eax
    CALL sub_40C860
    MOVZX edx, byte ptr [rax]
    MOV rbp, rax
    MOV rsi, rax
    MOV rdi, rax
    TEST dl, dl
    JNZ loc_43996C
loc_43993A:
    JMP loc_4399A0
loc_439940:
    LEA r8d, [rdx-61h]
    MOV ecx, edx
    CMP r8b, 19h
    JA loc_439951
loc_43994C:
    SUB edx, 20h
    MOV ecx, edx
loc_439951:
    LEA r8d, [rcx-30h]
    CMP r8b, 9
    JA loc_439980
loc_43995B:
    ADD rsi, 1
    MOV [rdi], dl
    ADD rdi, 1
    MOVZX edx, byte ptr [rsi]
    TEST dl, dl
    JZ loc_4399A0
loc_43996C:
    CMP dl, 3Dh
    JZ loc_4399A0
loc_439971:
    CMP dl, 2Dh
    JNZ loc_439940
loc_439976:
    MOV edx, 5Fh
    JMP loc_43995B
loc_439980:
    OR ecx, 20h
    SUB ecx, 61h
    CMP cl, 19h
    JBE loc_43995B
loc_43998B:
    CMP dl, 5Fh
    JZ loc_43995B
loc_439990:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
    TEST dl, dl
    JNZ loc_43996C
loc_43999B:
    NOP dword ptr [rax+rax+00h]
loc_4399A0:
    CALL sub_5369E0
    MOV [rbx+28h], rbp
loc_4399A9:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4399B8:
    MOV rdi, rbx
    JMP loc_4394F0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'UnsignedLong'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0xE3', '0xA', '0xD', '0x9', '0x5C', '0x22', '0x40', '0x5', '0x6E5C', '0x725C', '0x745C', '0x5C5C', '0x225C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### Q 93 - wait_any_nohang
```assembly
loc_40AB40:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 8
    MOV rbp, cs:qword_7431E8
    JMP loc_40AB5E
loc_40AB58:
    CMP dword ptr [rbp+0], 4
    JNZ loc_40AB75
loc_40AB5E:
    MOV edx, 1
    MOV rsi, rbx
    MOV edi, 0FFFFFFFFh
    CALL _waitpid
    CMP eax, 0FFFFFFFFh
    JZ loc_40AB58
loc_40AB75:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xE'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### T 93 - wait_any_nohang
```assembly
loc_40C090:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 8
    MOV rbp, cs:qword_78D1E8
    JMP loc_40C0AE
loc_40C0A8:
    CMP dword ptr [rbp+0], 4
    JNZ loc_40C0C5
loc_40C0AE:
    MOV edx, 1
    MOV rsi, rbx
    MOV edi, 0FFFFFFFFh
    CALL _waitpid
    CMP eax, 0FFFFFFFFh
    JZ loc_40C0A8
loc_40C0C5:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xE'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### Q 94 - bb_dump_size
```assembly
loc_4DD3E0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    TEST rdi, rdi
    JZ loc_4DD55F
loc_4DD3F7:
    MOV r12, rdi
    XOR r14d, r14d
    JMP loc_4DD416
loc_4DD400:
    IMUL eax, [r12+14h]
    MOV r12, [r12]
    ADD r14d, eax
    TEST r12, r12
    JZ loc_4DD4B1
loc_4DD416:
    MOV eax, [r12+18h]
    TEST eax, eax
    JNZ loc_4DD400
loc_4DD41F:
    MOV rcx, [r12+20h]
    MOVZX eax, byte ptr [rcx]
    TEST al, al
    JZ loc_4DD54E
loc_4DD42F:
    MOV [rsp+48h+var_3C], 0
    XOR r13d, r13d
    JMP loc_4DD44D
loc_4DD440:
    MOVZX eax, byte ptr [r15+1]
    LEA rcx, [r15+1]
    TEST al, al
    JZ loc_4DD49B
loc_4DD44D:
    CMP al, 25h
    MOV r15, rcx
    JNZ loc_4DD440
loc_4DD454:
    NOP dword ptr [rax+00h]
loc_4DD458:
    ADD r15, 1
    MOVSX ebx, byte ptr [r15]
    MOV edi, offset a0123456789_1
    MOV esi, ebx
    CALL _strchr
    TEST rax, rax
    JNZ loc_4DD458
loc_4DD471:
    CMP bl, 2Eh
    JZ loc_4DD4C8
loc_4DD476:
    MOV esi, ebx
    MOV edi, offset aCdiouxxeefgg
    CALL _strchr
    TEST rax, rax
    JZ loc_4DD4E0
loc_4DD487:
    MOVSX eax, byte ptr [rax-0Ch]
    LEA rcx, [r15+1]
    ADD r13d, eax
    MOVZX eax, byte ptr [r15+1]
    TEST al, al
    JNZ loc_4DD44D
loc_4DD49B:
    IMUL r13d, [r12+14h]
    ADD r14d, r13d
loc_4DD4A4:
    MOV r12, [r12]
    TEST r12, r12
    JNZ loc_4DD416
loc_4DD4B1:
    ADD rsp, 18h
    MOV eax, r14d
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4DD4C8:
    MOVSX ebx, byte ptr [r15+1]
    LEA rbp, [r15+1]
    LEA eax, [rbx-30h]
    CMP al, 9
    JBE loc_4DD520
loc_4DD4D8:
    MOV r15, rbp
    JMP loc_4DD476
loc_4DD4E0:
    MOVZX eax, byte ptr [r15]
    CMP al, 73h
    JZ loc_4DD544
loc_4DD4E8:
    CMP al, 5Fh
    JNZ loc_4DD440
loc_4DD4F0:
    MOVZX eax, byte ptr [r15+1]
    ADD r15, 1
    SUB eax, 63h
    CMP al, 12h
    JA loc_4DD440
loc_4DD504:
    MOV edx, 42001h
    BT rdx, rax
    JNB loc_4DD440
loc_4DD513:
    ADD r13d, 1
    JMP loc_4DD440
loc_4DD520:
    MOV edx, 0Ah
    XOR esi, esi
    MOV rdi, rbp
    CALL _strtol
    MOV [rsp+48h+var_3C], eax
loc_4DD533:
    ADD rbp, 1
    MOVSX ebx, byte ptr [rbp+0]
    LEA eax, [rbx-30h]
    CMP al, 9
    JBE loc_4DD533
loc_4DD542:
    JMP loc_4DD4D8
loc_4DD544:
    ADD r13d, [rsp+48h+var_3C]
    JMP loc_4DD440
loc_4DD54E:
    XOR r13d, r13d
    IMUL r13d, [r12+14h]
    ADD r14d, r13d
    JMP loc_4DD4A4
loc_4DD55F:
    XOR r14d, r14d
    JMP loc_4DD4B1
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Validation/Check'}

##### T 94 - bb_dump_size
```assembly
loc_525C20:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    TEST rdi, rdi
    JZ loc_525DB8
loc_525C37:
    MOV r12, rdi
    XOR r14d, r14d
    JMP loc_525C56
loc_525C40:
    IMUL eax, [r12+14h]
    MOV r12, [r12]
    ADD r14d, eax
    TEST r12, r12
    JZ loc_525CF4
loc_525C56:
    MOV eax, [r12+18h]
    TEST eax, eax
    JNZ loc_525C40
loc_525C5F:
    MOV rcx, [r12+20h]
    MOVZX eax, byte ptr [rcx]
    TEST al, al
    JZ loc_525DA7
loc_525C6F:
    MOV [rsp+48h+var_44], 0
    XOR r13d, r13d
    JMP loc_525C8D
loc_525C80:
    MOVZX eax, byte ptr [r15+1]
    LEA rcx, [r15+1]
    TEST al, al
    JZ loc_525CDE
loc_525C8D:
    CMP al, 25h
    MOV r15, rcx
    JNZ loc_525C80
loc_525C94:
    NOP dword ptr [rax+00h]
loc_525C98:
    ADD r15, 1
    MOVSX ebp, byte ptr [r15]
    MOV edi, offset a0123456789_1
    MOV esi, ebp
    MOV ebx, ebp
    CALL _strchr
    TEST rax, rax
    JNZ loc_525C98
loc_525CB3:
    CMP bpl, 2Eh
    JZ loc_525D10
loc_525CB9:
    MOV esi, ebp
    MOV edi, offset aCdiouxxeefgg
    CALL _strchr
    TEST rax, rax
    JZ loc_525D30
loc_525CCA:
    MOVSX eax, byte ptr [rax-0Ch]
    LEA rcx, [r15+1]
    ADD r13d, eax
    MOVZX eax, byte ptr [r15+1]
    TEST al, al
    JNZ loc_525C8D
loc_525CDE:
    IMUL r13d, [r12+14h]
    ADD r14d, r13d
loc_525CE7:
    MOV r12, [r12]
    TEST r12, r12
    JNZ loc_525C56
loc_525CF4:
    ADD rsp, 18h
    MOV eax, r14d
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_525D10:
    MOVZX ebx, byte ptr [r15+1]
    LEA rcx, [r15+1]
    LEA eax, [rbx-30h]
    CMP al, 9
    JBE loc_525D70
loc_525D20:
    MOVSX ebp, bl
    MOV r15, rcx
    JMP loc_525CB9
loc_525D30:
    CMP bl, 73h
    JZ loc_525D9D
loc_525D35:
    CMP bl, 5Fh
    JNZ loc_525C80
loc_525D3E:
    MOVZX eax, byte ptr [r15+1]
    ADD r15, 1
    SUB eax, 63h
    CMP al, 12h
    JA loc_525C80
loc_525D52:
    MOV edx, 42001h
    BT rdx, rax
    JNB loc_525C80
loc_525D61:
    ADD r13d, 1
    JMP loc_525C80
loc_525D70:
    MOV rdi, rcx
    MOV edx, 0Ah
    XOR esi, esi
    MOV [rsp+48h+var_40], rcx
    CALL _strtol
    MOV rcx, [rsp+48h+var_40]
    MOV [rsp+48h+var_44], eax
loc_525D8D:
    ADD rcx, 1
    MOVZX ebx, byte ptr [rcx]
    LEA eax, [rbx-30h]
    CMP al, 9
    JBE loc_525D8D
loc_525D9B:
    JMP loc_525D20
loc_525D9D:
    ADD r13d, [rsp+48h+var_44]
    JMP loc_525C80
loc_525DA7:
    XOR r13d, r13d
    IMUL r13d, [r12+14h]
    ADD r14d, r13d
    JMP loc_525CE7
loc_525DB8:
    XOR r14d, r14d
    JMP loc_525CF4
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### Q 95 - func_regex
```assembly
loc_4D7950:
    PUSH rbx
    MOV rbx, rdi
    LEA rdi, [rdx+10h]
    XOR r8d, r8d
    MOV edx, 1
    MOV rsi, rbx
    SUB rsp, 10h
    MOV rcx, rsp
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CALL _regexec
    TEST eax, eax
    JNZ loc_4D79B0
loc_4D7983:
    MOV edx, [rsp+18h+var_18]
    TEST edx, edx
    JNZ loc_4D7999
loc_4D798A:
    MOVSXD rax, [rsp+18h+var_14]
    CMP byte ptr [rbx+rax], 0
    SETZ al
    MOVZX eax, al
loc_4D7999:
    MOV rcx, [rsp+18h+var_10]
    XOR rcx, fs:28h
    JNZ loc_4D79B4
loc_4D79A9:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_4D79B0:
    XOR eax, eax
    JMP loc_4D7999
loc_4D79B4:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8', '0x40', '0x41', '0x10', '0x4E', '0x4F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Thread Management'}

##### T 95 - func_regex
```assembly
loc_51E980:
    PUSH rbx
    MOV rbx, rdi
    LEA rdi, [rdx+10h]
    XOR r8d, r8d
    MOV edx, 1
    MOV rsi, rbx
    SUB rsp, 10h
    MOV rcx, rsp
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CALL _regexec
    TEST eax, eax
    JNZ loc_51E9E0
loc_51E9B3:
    MOV edx, [rsp+18h+var_18]
    TEST edx, edx
    JNZ loc_51E9C9
loc_51E9BA:
    MOVSXD rax, [rsp+18h+var_14]
    CMP byte ptr [rbx+rax], 0
    SETZ al
    MOVZX eax, al
loc_51E9C9:
    MOV rcx, [rsp+18h+var_10]
    XOR rcx, fs:28h
    JNZ loc_51E9E4
loc_51E9D9:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_51E9E0:
    XOR eax, eax
    JMP loc_51E9C9
loc_51E9E4:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x8', '0x41', '0x10', '0x4E', '0x4F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Thread Management'}

##### Q 96 - reformime_main
```assembly
loc_410F80:
    PUSH rbp
    PUSH rbx
    MOV edi, 30h
    MOV rbp, rsi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV [rsp+28h+var_28], offset buf
    CALL sub_40AD10
    MOV rbx, rax
    MOV cs:qword_7431F0, rax
    MOV qword ptr [rax+28h], offset aUsAscii
    PUSH 0
    LEA r9, [rax+28h]
    PUSH 0
    PUSH 0
    XOR r8d, r8d
    PUSH 0
    XOR ecx, ecx
    MOV esi, offset aXXdeisRCMHOO
    XOR eax, eax
    MOV rdi, rbp
    LEA rdx, [rsp+48h+var_28]
    CALL sub_4DFD70
    MOVSXD rdx, cs:optind
    ADD rsp, 20h
    TEST al, 2
    MOV [rbx+0Ch], eax
    LEA rsi, [rbp+rdx*8+0]
    JNZ loc_410FFC
loc_410FF9:
    MOV rsi, rsp
loc_410FFC:
    MOV edi, offset buf
    CALL sub_410A80
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_41101D
loc_411016:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_41101D:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 8, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2', '0xFFFFFFFF', '0x64', '0x95', '0x3F', '0x37', '0x1E0', '0xFFFFFFFFFFFFFFFF', '0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Network/HTTP'}

##### T 96 - reformime_main
```assembly
loc_413FD0:
    PUSH rbp
    PUSH rbx
    MOV edi, 30h
    MOV rbp, rsi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV [rsp+28h+var_28], offset data
    CALL sub_40C260
    MOV rbx, rax
    MOV cs:qword_78D1F0, rax
    MOV qword ptr [rax+28h], offset aUsAscii
    PUSH 0
    LEA r9, [rax+28h]
    PUSH 0
    PUSH 0
    XOR r8d, r8d
    PUSH 0
    XOR ecx, ecx
    MOV esi, offset aXXdeisRCMHOO
    XOR eax, eax
    MOV rdi, rbp
    LEA rdx, [rsp+48h+var_28]
    CALL sub_5291B0
    MOVSXD rdx, cs:optind
    ADD rsp, 20h
    TEST al, 2
    MOV [rbx+0Ch], eax
    LEA rsi, [rbp+rdx*8+0]
    JNZ loc_41404C
loc_414049:
    MOV rsi, rsp
loc_41404C:
    MOV edi, offset data
    CALL sub_4139B0
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_41406D
loc_414066:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_41406D:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x258', '0x5070', '0xFFFFFFFF', '0x64', '0x95', '0x3F', '0x37', '0x3', '0x2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Network/Communication'}

##### Q 97 - ignore
```assembly
loc_4C44D0:
    MOV edx, [rdi+28h]
    MOV eax, 1
    TEST edx, edx
    JNZ loc_4C44E0
loc_4C44DC:
    RETN 
loc_4C44E0:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rbx, qword ptr cs:dest.c_line
    TEST rbx, rbx
    JZ loc_4C45C8
loc_4C4501:
    MOV rdi, [rbx]
    TEST rdi, rdi
    JZ loc_4C45C8
loc_4C450D:
    MOV rbp, qword ptr cs:dest.c_cc+7
    ADD rbx, 8
    XOR r12d, r12d
    XOR r13d, r13d
    MOV r14d, 1
    JMP loc_4C4553
loc_4C4530:
    JB loc_4C4570
loc_4C4532:
    CMP al, 2
    JNZ loc_4C4543
loc_4C4536:
    MOV rsi, [r15+20h]
    CALL sub_4C4120
    TEST eax, eax
    JNZ loc_4C4568
loc_4C4543:
    MOV rdi, [rbx]
    ADD rbp, 1
    ADD rbx, 8
    TEST rdi, rdi
    JZ loc_4C4593
loc_4C4553:
    MOVZX eax, byte ptr [rbp+0]
    CMP al, 1
    JNZ loc_4C4530
loc_4C455B:
    MOV rsi, [r15+20h]
    CALL sub_4C4120
    TEST eax, eax
    JNZ loc_4C4543
loc_4C4568:
    MOV eax, 1
    JMP loc_4C45B3
loc_4C4570:
    MOV rsi, [r15+18h]
    ADD r13d, 1
    CALL _strcmp
    MOV rdi, [rbx]
    TEST eax, eax
    CMOVZ r12d, r14d
    ADD rbp, 1
    ADD rbx, 8
    TEST rdi, rdi
    JNZ loc_4C4553
loc_4C4593:
    TEST r13d, r13d
    JZ loc_4C45C8
loc_4C4598:
    CMP cs:dest.c_cc+0Fh, 0
    JZ loc_4C45A9
loc_4C45A1:
    XOR r12d, 1
    AND r12d, 1
loc_4C45A9:
    TEST r12d, r12d
    MOV eax, 1
    JNZ loc_4C45C8
loc_4C45B3:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4C45C8:
    MOV rsi, [r15+18h]
    MOV edi, offset aIgnore
    CALL sub_4098B0
    NOT eax
    SHR eax, 1Fh
    JMP loc_4C45B3
```
{'input_parameter_count': 1, 'input_parameter_types': ['UnknownType'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'Arithmetic', 'System/NetworkCalls', 'StringHandling'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 14, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFFh', '0xFFFFFFFFh', '1', '2', '3', '0', '0xFFFFFFFEh', '0x3FFFFFFEh', '0xFFFFFFFCu', '0xFFFFFFFFu', '0x2Au', '0x7Bh', '0x7Fu', '0xFFh', '0x7Bu', '0x29h', '0x2Bh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 28, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'Protocol Handling/Server-side Logic', 'inferred_category': 'Application/Library'}

##### T 97 - ignore
```assembly
loc_5000E0:
    MOV edx, [rdi+28h]
    MOV eax, 1
    TEST edx, edx
    JNZ loc_5000F0
loc_5000EC:
    RETN 
loc_5000F0:
    PUSH r15
    PUSH r14
    MOV r14, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    MOV rbp, qword ptr cs:buf.c_line
    TEST rbp, rbp
    JZ loc_500210
loc_500111:
    MOV rbx, [rbp+0]
    TEST rbx, rbx
    JZ loc_500210
loc_50011E:
    MOV r12, qword ptr cs:buf.c_cc+7
    ADD rbp, 8
    MOV [rsp+48h+var_40], 0
    MOV [rsp+48h+var_3C], 0
    NOP dword ptr [rax+00000000h]
loc_500140:
    MOVZX eax, byte ptr [r12]
    CMP al, 1
    JZ loc_500230
loc_50014D:
    JB loc_5001B0
loc_50014F:
    CMP al, 2
    JNZ loc_5001D1
loc_500153:
    MOV r13, [r14+20h]
    TEST r13, r13
    JZ loc_5001D1
loc_50015C:
    MOV rdi, rbx
    CALL _strlen
    MOV r15, rax
    LEA rax, [r13-1]
    MOVSXD r15, r15d
    XCHG ax, ax
loc_500170:
    LEA rdi, [rax+1]
    MOV rsi, rbx
    CALL _strstr
    TEST rax, rax
    JZ loc_5001D1
loc_500181:
    CMP r13, rax
    JZ loc_50018C
loc_500186:
    CMP byte ptr [rax-1], 2Ch
    JNZ loc_500170
loc_50018C:
    MOVZX edx, byte ptr [rax+r15]
    TEST dl, dl
    JZ loc_50019A
loc_500195:
    CMP dl, 2Ch
    JNZ loc_500170
loc_50019A:
    MOV eax, 1
loc_50019F:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_5001B0:
    MOV rsi, [r14+18h]
    MOV rdi, rbx
    ADD [rsp+48h+var_3C], 1
    CALL _strcmp
    TEST eax, eax
    MOV eax, 1
    CMOVNZ eax, [rsp+48h+var_40]
    MOV [rsp+48h+var_40], eax
loc_5001D1:
    MOV rbx, [rbp+0]
    ADD r12, 1
    ADD rbp, 8
    TEST rbx, rbx
    JNZ loc_500140
loc_5001E6:
    MOV eax, [rsp+48h+var_3C]
    TEST eax, eax
    JZ loc_500210
loc_5001EE:
    CMP cs:buf.c_cc+0Fh, 0
    MOV edx, [rsp+48h+var_40]
    JZ loc_500201
loc_5001FB:
    XOR edx, 1
    AND edx, 1
loc_500201:
    TEST edx, edx
    MOV eax, 1
    JZ loc_50019F
loc_50020A:
    NOP word ptr [rax+rax+00h]
loc_500210:
    MOV rsi, [r14+18h]
    MOV edi, offset aIgnore
    CALL sub_40A260
    NOT eax
    SHR eax, 1Fh
    JMP loc_50019F
loc_500230:
    MOV r13, [r14+20h]
    TEST r13, r13
    JZ loc_50019A
loc_50023D:
    MOV rdi, rbx
    CALL _strlen
    MOV r15, rax
    LEA rax, [r13-1]
    MOVSXD r15, r15d
    NOP 
loc_500250:
    LEA rdi, [rax+1]
    MOV rsi, rbx
    CALL _strstr
    TEST rax, rax
    JZ loc_50019A
loc_500265:
    CMP r13, rax
    JZ loc_500270
loc_50026A:
    CMP byte ptr [rax-1], 2Ch
    JNZ loc_500250
loc_500270:
    MOVZX edx, byte ptr [rax+r15]
    TEST dl, dl
    JZ loc_5001D1
loc_50027D:
    CMP dl, 2Ch
    JNZ loc_500250
loc_500282:
    JMP loc_5001D1
```
{'input_parameter_count': 1, 'input_parameter_types': ['Unknown'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['ControlTransfer', 'DataMovement', 'SubroutineCall', 'ErrorHandling', 'ComparisonAndBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 16, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['4', '50h', '2', '0', '2Ah', '1', '8', '0Dh', '19h', '1', '0', '8', '15h', '4Nh', '2Bh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Unidentified (Error Handling Based)', 'inferred_category': 'Interfacing/LibraryFunction'}

##### Q 98 - get_rt_realms
```assembly
loc_4502C0:
    PUSH r12
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV esi, 2Fh
    MOV rbx, rdi
    MOV rdi, rbp
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV [rsp+28h+var_24], 0
    CALL _strchr
    TEST rax, rax
    MOV dword ptr [rbx], 0
    JZ loc_450320
loc_4502FE:
    MOV byte ptr [rax], 0
    MOV rsi, rbp
    MOV rdi, rbx
    MOV r12, rax
    CALL sub_44FE60
    TEST eax, eax
    JNZ loc_450370
loc_450313:
    LEA rbp, [r12+1]
    SHL dword ptr [rbx], 10h
    MOV byte ptr [r12], 2Fh
loc_450320:
    CMP byte ptr [rbp+0], 0
    JNZ loc_450350
loc_450326:
    MOV eax, [rsp+28h+var_24]
    OR [rbx], eax
    XOR eax, eax
loc_45032E:
    MOV rdx, [rsp+28h+var_20]
    XOR rdx, fs:28h
    JNZ loc_45037C
loc_45033E:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_450350:
    LEA rdi, [rsp+28h+var_24]
    MOV rsi, rbp
    CALL sub_44FE60
    TEST eax, eax
    JZ loc_450326
loc_450361:
    MOV eax, 0FFFFFFFFh
    JMP loc_45032E
loc_450370:
    MOV byte ptr [r12], 2Fh
    MOV eax, 0FFFFFFFFh
    JMP loc_45032E
loc_45037C:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2F', '0x2D', '0x200000020001'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### T 98 - get_rt_realms
```assembly
loc_463A50:
    PUSH r12
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV esi, 2Fh
    MOV rbx, rdi
    MOV rdi, rbp
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    MOV [rsp+28h+var_24], 0
    CALL _strchr
    TEST rax, rax
    MOV dword ptr [rbx], 0
    JZ loc_463AB0
loc_463A8E:
    MOV byte ptr [rax], 0
    MOV rsi, rbp
    MOV rdi, rbx
    MOV r12, rax
    CALL sub_462EC0
    TEST eax, eax
    JNZ loc_463B00
loc_463AA3:
    LEA rbp, [r12+1]
    SHL dword ptr [rbx], 10h
    MOV byte ptr [r12], 2Fh
loc_463AB0:
    CMP byte ptr [rbp+0], 0
    JNZ loc_463AE0
loc_463AB6:
    MOV eax, [rsp+28h+var_24]
    OR [rbx], eax
    XOR eax, eax
loc_463ABE:
    MOV rdx, [rsp+28h+var_20]
    XOR rdx, fs:28h
    JNZ loc_463B0C
loc_463ACE:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_463AE0:
    LEA rdi, [rsp+28h+var_24]
    MOV rsi, rbp
    CALL sub_462EC0
    TEST eax, eax
    JZ loc_463AB6
loc_463AF1:
    MOV eax, 0FFFFFFFFh
    JMP loc_463ABE
loc_463B00:
    MOV byte ptr [r12], 2Fh
    MOV eax, 0FFFFFFFFh
    JMP loc_463ABE
loc_463B0C:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Boolean', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2F', '0x2D', '0x200000020001'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Character Processing', 'inferred_category': 'Utility'}

##### Q 99 - openvt_main
```assembly
loc_4B0630:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aCWslfv
    MOV rdi, rbx
    SUB rsp, 30h
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    LEA rdx, [rsp+58h+var_50]
    CALL sub_4DFD70
    MOV ebp, eax
    MOVSXD rax, cs:optind
    TEST bpl, 1
    LEA r13, [rbx+rax*8]
    JZ loc_4B0750
loc_4B0678:
    MOV rdi, [rsp+58h+var_50]
    MOV edx, 3Fh
    MOV esi, 1
    MOV r12, rsp
    CALL sub_4ECF10
    MOV ebx, eax
loc_4B0691:
    LEA rdi, [rsp+58h+var_48]
    MOV r8d, ebx
    MOV ecx, offset aDevTtyD
    MOV edx, 17h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV edi, 0Ch
    CALL sub_4EC830
    XOR edi, edi
    CALL _close
    LEA rdi, [rsp+58h+var_48]
    MOV esi, 2
    CALL sub_40AE50
    MOV rdx, r12
    XOR edi, edi
    MOV ecx, offset aVtGetstate
    MOV esi, 5603h
    MOV r12d, ebp
    CALL sub_40B810
    AND r12d, 4
    JNZ loc_4B0820
loc_4B06F0:
    CMP qword ptr [r13+0], 0
    JZ loc_4B0830
loc_4B06FB:
    XOR edi, edi
    MOV esi, 1
    CALL sub_40AF60
    XOR edi, edi
    MOV esi, 2
    CALL sub_40AF60
    MOV rdi, r13
    CALL sub_4B05F0
    AND ebp, 2
    JNZ loc_4B07E0
loc_4B0724:
    XOR eax, eax
    MOV rcx, [rsp+58h+var_30]
    XOR rcx, fs:28h
    JNZ loc_4B0845
loc_4B073A:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4B0750:
    XOR ebx, ebx
    MOV r12, rsp
loc_4B0755:
    XOR eax, eax
    MOV rdx, r12
    MOV esi, 5603h
    MOV edi, ebx
    CALL _ioctl
    TEST eax, eax
    JZ loc_4B07A6
loc_4B076A:
    ADD ebx, 1
    CMP ebx, 3
    JNZ loc_4B0755
loc_4B0772:
    XOR eax, eax
    MOV esi, 800h
    MOV edi, offset aDevConsole
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JS loc_4B084A
loc_4B078D:
    MOV edi, eax
    MOV rdx, r12
    XOR eax, eax
    MOV esi, 5603h
    CALL _ioctl
    TEST eax, eax
    JNZ loc_4B084A
loc_4B07A6:
    MOV rax, cs:qword_7431E8
    MOV rdx, r12
    MOV esi, 5600h
    MOV edi, ebx
    MOV dword ptr [rax], 0
    XOR eax, eax
    CALL _ioctl
    TEST eax, eax
    JNZ loc_4B07D3
loc_4B07C8:
    MOV ebx, [rsp+58h+var_58]
    TEST ebx, ebx
    JG loc_4B0691
loc_4B07D3:
    MOV edi, offset aCanTFindOpenVt
    XOR eax, eax
    CALL sub_409DA0
loc_4B07E0:
    XOR edx, edx
    XOR esi, esi
    MOV edi, 0FFFFFFFFh
    CALL sub_40AAF0
    TEST r12d, r12d
    JZ loc_4B0724
loc_4B07F7:
    MOVZX esi, word ptr [rsp+58h+var_58]
    XOR edi, edi
    CALL sub_4DF0F0
    MOVSXD rdx, ebx
    MOV ecx, offset aVtDisallocate
    MOV esi, 5608h
    XOR edi, edi
    CALL sub_40B810
    JMP loc_4B0724
loc_4B0820:
    MOV esi, ebx
    XOR edi, edi
    CALL sub_4DF0F0
    JMP loc_4B06F0
loc_4B0830:
    LEA r14, [r13-8]
    CALL sub_4DF390
    MOV [r13-8], rax
    MOV r13, r14
    JMP loc_4B06FB
loc_4B0845:
    CALL ___stack_chk_fail
loc_4B084A:
    MOV edi, offset aCanTFindOpenVt
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Linked List Manipulation', 'inferred_category': 'Data Structure Operations'}

##### T 99 - openvt_main
```assembly
loc_4E8300:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aCWslfv
    MOV rdi, rbx
    SUB rsp, 30h
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    LEA rdx, [rsp+58h+nptr]
    CALL sub_5291B0
    MOV ebp, eax
    MOVSXD rax, cs:optind
    TEST bpl, 1
    LEA r13, [rbx+rax*8]
    JZ loc_4E8420
loc_4E8348:
    MOV rdi, [rsp+58h+nptr]
    MOV edx, 3Fh
    MOV esi, 1
    MOV r12, rsp
    CALL sub_539D60
    MOV ebx, eax
loc_4E8361:
    LEA rdi, [rsp+58h+var_48]
    MOV r8d, ebx
    MOV ecx, offset aDevTtyD
    MOV edx, 17h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV edi, 0Ch
    CALL sub_538DE0
    XOR edi, edi
    CALL _close
    LEA rdi, [rsp+58h+var_48]
    MOV esi, 2
    CALL sub_40C3E0
    MOV rdx, r12
    XOR edi, edi
    MOV ecx, offset aVtGetstate
    MOV esi, 5603h
    MOV r12d, ebp
    CALL sub_40D030
    AND r12d, 4
    JNZ loc_4E84F0
loc_4E83C0:
    CMP qword ptr [r13+0], 0
    JZ loc_4E8500
loc_4E83CB:
    XOR edi, edi
    MOV esi, 1
    CALL sub_40C610
    XOR edi, edi
    MOV esi, 2
    CALL sub_40C610
    MOV rdi, r13
    CALL sub_4E82C0
    AND ebp, 2
    JNZ loc_4E84B0
loc_4E83F4:
    XOR eax, eax
    MOV rcx, [rsp+58h+var_30]
    XOR rcx, fs:28h
    JNZ loc_4E8515
loc_4E840A:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4E8420:
    XOR ebx, ebx
    MOV r12, rsp
loc_4E8425:
    XOR eax, eax
    MOV rdx, r12
    MOV esi, 5603h
    MOV edi, ebx
    CALL _ioctl
    TEST eax, eax
    JZ loc_4E8476
loc_4E843A:
    ADD ebx, 1
    CMP ebx, 3
    JNZ loc_4E8425
loc_4E8442:
    XOR eax, eax
    MOV esi, 800h
    MOV edi, offset aDevConsole
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JS loc_4E851A
loc_4E845D:
    MOV edi, eax
    MOV rdx, r12
    XOR eax, eax
    MOV esi, 5603h
    CALL _ioctl
    TEST eax, eax
    JNZ loc_4E851A
loc_4E8476:
    MOV rax, cs:qword_78D1E8
    MOV rdx, r12
    MOV esi, 5600h
    MOV edi, ebx
    MOV dword ptr [rax], 0
    XOR eax, eax
    CALL _ioctl
    TEST eax, eax
    JNZ loc_4E84A3
loc_4E8498:
    MOV ebx, [rsp+58h+var_58]
    TEST ebx, ebx
    JG loc_4E8361
loc_4E84A3:
    MOV edi, offset aCanTFindOpenVt
    XOR eax, eax
    CALL sub_40A7B0
loc_4E84B0:
    XOR edx, edx
    XOR esi, esi
    MOV edi, 0FFFFFFFFh
    CALL sub_40C040
    TEST r12d, r12d
    JZ loc_4E83F4
loc_4E84C7:
    MOVZX esi, word ptr [rsp+58h+var_58]
    XOR edi, edi
    CALL sub_527D80
    MOVSXD rdx, ebx
    MOV ecx, offset aVtDisallocate
    MOV esi, 5608h
    XOR edi, edi
    CALL sub_40D030
    JMP loc_4E83F4
loc_4E84F0:
    MOV esi, ebx
    XOR edi, edi
    CALL sub_527D80
    JMP loc_4E83C0
loc_4E8500:
    LEA r14, [r13-8]
    CALL sub_528110
    MOV [r13-8], rax
    MOV r13, r14
    JMP loc_4E83CB
loc_4E8515:
    CALL ___stack_chk_fail
loc_4E851A:
    MOV edi, offset aCanTFindOpenVt
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x10', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Linked List Manipulation', 'inferred_category': 'Data Structures'}

##### Q 100 - last_char_is
```assembly
loc_409AE0:
    TEST rdi, rdi
    JZ loc_409B18
loc_409AE5:
    CMP byte ptr [rdi], 0
    JZ loc_409B18
loc_409AEA:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV ebp, esi
    SUB rsp, 8
    CALL _strlen
    LEA rax, [rbx+rax-1]
    MOVZX edx, byte ptr [rax]
    CMP edx, ebp
    MOV edx, 0
    CMOVNZ rax, rdx
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_409B18:
    XOR eax, eax
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Unknown'], 'return_value_type': 'Unknown', 'dominant_operation_categories': ['DataMovement', 'ControlFlowModification', 'MemoryManagement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 35, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0xFFFFFFFFFFFFFFFF', '0', '1', '2', '8', '2A', '2B', '392'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 27, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Networking/Protocol Handling'}

##### T 100 - last_char_is
```assembly
loc_40A4C0:
    TEST rdi, rdi
    JZ loc_40A4F8
loc_40A4C5:
    CMP byte ptr [rdi], 0
    JZ loc_40A4F8
loc_40A4CA:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV ebp, esi
    SUB rsp, 8
    CALL _strlen
    LEA rax, [rbx+rax-1]
    MOVZX edx, byte ptr [rax]
    CMP edx, ebp
    MOV edx, 0
    CMOVNZ rax, rdx
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_40A4F8:
    XOR eax, eax
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 15, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x58', '0x258', '0x620', '0x5E0', '0x5B0', '0x638', '0x7A8', '0x290', '0x668', '0x2B', '0x2A', '0x7A8', '0x620', '0x658', '0x620'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 34, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Logic'}

##### Q 101 - display_topmem_process_list
```assembly
loc_45F780:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13d, esi
    PUSH rbp
    PUSH rbx
    MOV ebx, edi
    SUB rsp, 0B8h
    MOV r12, cs:qword_7431F0
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_40], rax
    XOR eax, eax
    LEA rdi, [rsp+0E8h+var_A8]
    MOVSXD rax, dword ptr [r12+50h]
    LEA rbp, [r12+14Ch]
    LEA r15, [rax+rax*4]
    SHL r15, 4
    ADD r15, [r12]
    CALL sub_45F6C0
    SUB rsp, 8
    MOV r8d, offset aMemTotalLuAnon
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    PUSH [rsp+0F0h+var_A0]
    PUSH [rsp+0F8h+var_50]
    MOV edx, 1
    PUSH [rsp+100h+var_58]
    MOV r9, [rsp+108h+var_A8]
    MOV esi, 1C0h
    MOV rdi, rbp
    XOR eax, eax
    CALL ___snprintf_chk
    ADD rsp, 20h
    TEST byte ptr cs:dword_74363C, 4
    MOV eax, offset unk_51447D
    MOV esi, offset aS_17
    MOV rcx, rbp
    MOV edx, r13d
    MOV edi, 1
    CMOVZ rsi, rax
    XOR eax, eax
    CALL ___printf_chk
    PUSH [rsp+0E8h+var_60]
    PUSH [rsp+0F0h+var_68]
    MOV r8d, offset aSlabLuBufLuCac
    PUSH [rsp+0F8h+var_80]
    PUSH [rsp+100h+var_88]
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV r9, [rsp+108h+var_48]
    MOV edx, 1
    MOV esi, 1C0h
    MOV rdi, rbp
    XOR eax, eax
    CALL ___snprintf_chk
    ADD rsp, 20h
    MOV rcx, rbp
    MOV edx, r13d
    MOV esi, offset aS_17
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    SUB rsp, 8
    MOV r8d, offset aSwapTotalLuFre
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    PUSH [rsp+0F0h+var_70]
    MOV r9, [rsp+0F8h+var_78]
    MOV edx, 1
    MOV esi, 1C0h
    MOV rdi, rbp
    XOR eax, eax
    CALL ___snprintf_chk
    MOV rcx, rbp
    MOV edx, r13d
    MOV esi, offset aS_17
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rax, 2020204449502020h
    MOV [r12+14Ch], rax
    MOV rax, 525A5356205A5356h
    MOV [rbp+8], rax
    MOV rax, 2053535220202057h
    MOV [rbp+10h], rax
    MOV rax, 4944202952485328h
    MOV [rbp+18h], rax
    MOV rax, 5248532820595452h
    MOV [rbp+20h], rax
    MOV rax, 204B434154532029h
    MOV [rbp+28h], rax
    MOV rax, 444E414D4D4F43h
    MOV [rbp+30h], rax
    MOVSX eax, byte ptr [r12+0Dh]
    MOVSX rdx, byte ptr [r12+0Ch]
    LEA eax, [rax+rax*2]
    MOVZX edx, ds:byte_5144A7[rdx]
    LEA eax, [rax+rax+5]
    CDQE 
    LEA rax, [r12+rax+14Ch]
    MOV [rax+6], dl
    POP rcx
    POP rsi
    XCHG ax, ax
loc_45F970:
    ADD rax, 1
    MOV [rax-1], dl
    CMP byte ptr [rax], 20h
    JZ loc_45F970
loc_45F97C:
    TEST byte ptr cs:dword_74363C, 4
    MOV eax, offset a7mSM
    MOV esi, offset aS_5
    MOV rcx, rbp
    MOV edx, r13d
    MOV edi, 1
    CMOVZ rsi, rax
    XOR eax, eax
    SUB ebx, 4
    CALL ___printf_chk
    MOV eax, [r12+8]
    SUB eax, [r12+50h]
    CMP ebx, eax
    CMOVLE eax, ebx
    TEST eax, eax
    JLE loc_45FB40
loc_45F9BD:
    LEA rcx, [r12+158h]
    SUB eax, 1
    LEA rbx, [r15+4]
    LEA rax, [rax+rax*4]
    LEA r14, [r12+152h]
    MOV [rsp+0E8h+var_D0], rcx
    LEA rcx, [r12+15Eh]
    SHL rax, 4
    MOV [rsp+0E8h+var_C0], rcx
    LEA rcx, [r12+164h]
    LEA r15, [r15+rax+54h]
    LEA eax, [r13-30h]
    MOV [rsp+0E8h+var_E8], rcx
    LEA rcx, [r12+16Ah]
    MOV [rsp+0E8h+var_B4], eax
    LEA rax, [r12+17Ch]
    MOV [rsp+0E8h+var_E0], rcx
    LEA rcx, [r12+170h]
    MOV [rsp+0E8h+s], rax
    MOV [rsp+0E8h+var_C8], rcx
    LEA rcx, [r12+176h]
    MOV [rsp+0E8h+var_D8], rcx
    JMP loc_45FA64
loc_45FA40:
    XOR eax, eax
    MOV rcx, rbp
    MOV edx, r13d
    MOV esi, offset unk_5144A1
    MOV edi, 1
    ADD rbx, 50h
    CALL ___printf_chk
    CMP rbx, r15
    JZ loc_45FB40
loc_45FA64:
    MOV edi, [rbx-4]
    MOV edx, offset aMgtpezy
    MOV rsi, rbp
    CALL sub_4E1500
    MOV byte ptr [rax], 20h
    MOV rdi, [rbx+14h]
    MOV edx, offset aMgtpezy
    MOV rsi, r14
    CALL sub_4E1500
    MOV rsi, [rsp+0E8h+var_D0]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+1Ch]
    CALL sub_4E1500
    MOV rsi, [rsp+0E8h+var_C0]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+24h]
    CALL sub_4E1500
    MOV rsi, [rsp+0E8h+var_E8]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+2Ch]
    CALL sub_4E1500
    MOV rsi, [rsp+0E8h+var_E0]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+34h]
    CALL sub_4E1500
    MOV rsi, [rsp+0E8h+var_C8]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+3Ch]
    CALL sub_4E1500
    MOV rsi, [rsp+0E8h+var_D8]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+44h]
    CALL sub_4E1500
    CMP r13d, 30h
    MOV byte ptr [rax], 20h
    MOV byte ptr [r12+17Ch], 0
    JLE loc_45FA40
loc_45FB21:
    MOV edx, [rbx-4]
    MOV esi, [rsp+0E8h+var_B4]
    MOV rcx, rbx
    MOV rdi, [rsp+0E8h+s]
    CALL sub_4E7510
    JMP loc_45FA40
loc_45FB40:
    MOV eax, cs:dword_74363C
    AND eax, 4
    CMP eax, 1
    SBB edi, edi
    AND edi, 3
    ADD edi, 0Ah
    CALL sub_40B110
    CALL sub_40B100
    MOV rax, [rsp+0E8h+var_40]
    XOR rax, fs:28h
    JNZ loc_45FB83
loc_45FB71:
    ADD rsp, 0B8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45FB83:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x74', '0x75', '0x76', '0x77', '0x78', '0x79'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Copying with Conditional Checks', 'inferred_category': 'Memory Management'}

##### T 101 - display_topmem_process_list
```assembly
loc_477A70:
    PUSH r15
    PUSH r14
    MOV ecx, 0Dh
    PUSH r13
    PUSH r12
    MOV r13d, esi
    PUSH rbp
    PUSH rbx
    SUB rsp, 108h
    MOV r12, cs:qword_78D1F0
    MOV rax, fs:28h
    MOV [rsp+138h+var_40], rax
    XOR eax, eax
    LEA rdx, [rsp+138h+var_F8]
    MOV dword ptr [rsp+138h+var_138], edi
    MOVSXD rax, dword ptr [r12+50h]
    MOV rdi, rdx
    LEA r15, [rax+rax*4]
    XOR eax, eax
    REP 
    MOV edi, 561EEDh
    SHL r15, 4
    ADD r15, [r12]
    CALL sub_40AD90
    MOV r14, rax
    NOP dword ptr [rax+00000000h]
loc_477AD8:
    LEA rdi, [rsp+138h+s]
    MOV rdx, r14
    MOV esi, 3Ch
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_477B40
loc_477AF2:
    LEA rdi, [rsp+138h+s]
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    MOV rbx, rax
    JZ loc_477AD8
loc_477B0C:
    LEA rsi, [rsp+138h+s]
    MOV byte ptr [rax], 0
    MOV edi, offset aMemtotal_0
    CALL sub_40A260
    MOVSXD rbp, eax
    TEST ebp, ebp
    JS loc_477AD8
loc_477B28:
    LEA rdi, [rbx+1]
    MOV edx, 0Ah
    XOR esi, esi
    CALL _strtoul
    MOV [rsp+rbp*8+138h+var_F8], rax
    JMP loc_477AD8
loc_477B40:
    MOV rdi, r14
    LEA rbp, [r12+14Ch]
    CALL _fclose
    SUB rsp, 8
    MOV r8d, offset aMemTotalLuAnon
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    PUSH [rsp+140h+var_F0]
    PUSH [rsp+148h+var_A0]
    MOV edx, 1
    PUSH [rsp+150h+var_A8]
    MOV r9, [rsp+158h+var_F8]
    MOV esi, 1C0h
    MOV rdi, rbp
    XOR eax, eax
    CALL ___snprintf_chk
    ADD rsp, 20h
    TEST byte ptr cs:dword_78D63C, 4
    MOV eax, offset unk_562542
    MOV esi, offset aS_17
    MOV rcx, rbp
    MOV edx, r13d
    MOV edi, 1
    CMOVZ rsi, rax
    XOR eax, eax
    CALL ___printf_chk
    PUSH [rsp+138h+var_B0]
    PUSH [rsp+140h+var_B8]
    MOV r8d, offset aSlabLuBufLuCac
    PUSH [rsp+148h+var_D0]
    PUSH [rsp+150h+var_D8]
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV r9, [rsp+158h+var_98]
    MOV edx, 1
    MOV esi, 1C0h
    MOV rdi, rbp
    XOR eax, eax
    CALL ___snprintf_chk
    ADD rsp, 20h
    MOV rcx, rbp
    MOV edx, r13d
    MOV esi, offset aS_17
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    SUB rsp, 8
    MOV r8d, offset aSwapTotalLuFre
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    PUSH [rsp+140h+var_C0]
    MOV r9, [rsp+148h+var_C8]
    MOV edx, 1
    MOV esi, 1C0h
    MOV rdi, rbp
    XOR eax, eax
    CALL ___snprintf_chk
    MOV rcx, rbp
    MOV edx, r13d
    MOV esi, offset aS_17
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rax, 2020204449502020h
    MOV [r12+14Ch], rax
    MOV rax, 525A5356205A5356h
    MOV [rbp+8], rax
    MOV rax, 2053535220202057h
    MOV [rbp+10h], rax
    MOV rax, 4944202952485328h
    MOV [rbp+18h], rax
    MOV rax, 5248532820595452h
    MOV [rbp+20h], rax
    MOV rax, 204B434154532029h
    MOV [rbp+28h], rax
    MOV rax, 444E414D4D4F43h
    MOV [rbp+30h], rax
    MOVSX eax, byte ptr [r12+0Dh]
    MOVSX rdx, byte ptr [r12+0Ch]
    LEA eax, [rax+rax*2]
    MOVZX edx, ds:byte_56256C[rdx]
    LEA eax, [rax+rax+5]
    CDQE 
    LEA rax, [r12+rax+14Ch]
    MOV [rax+6], dl
    POP rcx
    POP rsi
    NOP dword ptr [rax+rax+00h]
loc_477CF0:
    ADD rax, 1
    MOV [rax-1], dl
    CMP byte ptr [rax], 20h
    JZ loc_477CF0
loc_477CFC:
    TEST byte ptr cs:dword_78D63C, 4
    MOV eax, 55DA8Dh
    MOV esi, offset aS_5
    MOV rcx, rbp
    MOV edx, r13d
    MOV edi, 1
    CMOVZ rsi, rax
    XOR eax, eax
    CALL ___printf_chk
    MOV ebx, dword ptr [rsp+138h+var_138]
    MOV eax, [r12+8]
    SUB eax, [r12+50h]
    SUB ebx, 4
    CMP ebx, eax
    CMOVLE eax, ebx
    TEST eax, eax
    JLE loc_477EC0
loc_477D40:
    LEA rcx, [r12+158h]
    SUB eax, 1
    LEA rbx, [r15+4]
    LEA rax, [rax+rax*4]
    LEA r14, [r12+152h]
    MOV [rsp+138h+var_130], rcx
    LEA rcx, [r12+15Eh]
    SHL rax, 4
    MOV [rsp+138h+var_128], rcx
    LEA rcx, [r12+164h]
    LEA r15, [r15+rax+54h]
    LEA eax, [r13-30h]
    MOV [rsp+138h+var_110], rcx
    LEA rcx, [r12+16Ah]
    MOV [rsp+138h+var_104], eax
    LEA rax, [r12+17Ch]
    MOV [rsp+138h+var_120], rcx
    LEA rcx, [r12+170h]
    MOV [rsp+138h+var_100], rax
    MOV [rsp+138h+var_118], rcx
    LEA rcx, [r12+176h]
    MOV [rsp+138h+var_138], rcx
    JMP loc_477DE4
loc_477DC0:
    XOR eax, eax
    MOV rcx, rbp
    MOV edx, r13d
    MOV esi, offset unk_562566
    MOV edi, 1
    ADD rbx, 50h
    CALL ___printf_chk
    CMP rbx, r15
    JZ loc_477EC0
loc_477DE4:
    MOV edi, [rbx-4]
    MOV edx, offset aMgtpezy
    MOV rsi, rbp
    CALL sub_52B820
    MOV byte ptr [rax], 20h
    MOV rdi, [rbx+14h]
    MOV edx, offset aMgtpezy
    MOV rsi, r14
    CALL sub_52B820
    MOV rsi, [rsp+138h+var_130]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+1Ch]
    CALL sub_52B820
    MOV rsi, [rsp+138h+var_128]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+24h]
    CALL sub_52B820
    MOV rsi, [rsp+138h+var_110]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+2Ch]
    CALL sub_52B820
    MOV rsi, [rsp+138h+var_120]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+34h]
    CALL sub_52B820
    MOV rsi, [rsp+138h+var_118]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+3Ch]
    CALL sub_52B820
    MOV rsi, [rsp+138h+var_138]
    MOV byte ptr [rax], 20h
    MOV edx, offset aMgtpezy
    MOV rdi, [rbx+44h]
    CALL sub_52B820
    CMP r13d, 30h
    MOV byte ptr [rax], 20h
    MOV byte ptr [r12+17Ch], 0
    JLE loc_477DC0
loc_477EA1:
    MOV edx, [rbx-4]
    MOV esi, [rsp+138h+var_104]
    MOV rcx, rbx
    MOV rdi, [rsp+138h+var_100]
    CALL sub_5329A0
    JMP loc_477DC0
loc_477EC0:
    MOV eax, cs:dword_78D63C
    AND eax, 4
    CMP eax, 1
    SBB edi, edi
    AND edi, 3
    ADD edi, 0Ah
    CALL sub_40C7E0
    CALL sub_40C7D0
    MOV rax, [rsp+138h+var_40]
    XOR rax, fs:28h
    JNZ loc_477F03
loc_477EF1:
    ADD rsp, 108h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_477F03:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x74', '0x75', '0x76', '0x77', '0x78', '0x79'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Copy with Conditional Checks', 'inferred_category': 'Utility/Helper'}

##### Q 102 - alloc_dumper
```assembly
loc_4DDAA0:
    SUB rsp, 8
    MOV edi, 58h
    CALL sub_40AD10
    MOV dword ptr [rax+8], 0FFFFFFFFh
    MOV byte ptr [rax+0Ch], 2
    MOV byte ptr [rax+46h], 1
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 5, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1C', '0xFFFFFFFF', '0x51'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow Analysis'}

##### T 102 - alloc_dumper
```assembly
loc_526610:
    SUB rsp, 8
    MOV edi, 58h
    CALL sub_40C260
    MOV dword ptr [rax+8], 0FFFFFFFFh
    MOV byte ptr [rax+0Ch], 2
    MOV byte ptr [rax+46h], 1
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 5, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1Ch', '0xFFFFFFFFh', '0x51'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 103 - collect_cpu
```assembly
loc_45B490:
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    MOV ecx, 7
    SUB rsp, 68h
    MOV rbp, cs:qword_7431F0
    MOV ebx, [r12+50h]
    MOV rax, fs:28h
    MOV [rsp+88h+var_30], rax
    XOR eax, eax
    LEA rdi, [rsp+88h+var_68]
    MOV [rsp+88h+var_88], 0
    MOV [rsp+88h+var_80], 0
    MOV [rsp+88h+var_78], 0
    MOV [rsp+88h+var_70], 0
    REP 
    LEA rdi, [rbp+28h]
    CALL sub_45A780
    LEA rdx, [rsp+88h+var_68]
    MOV ecx, 0FEh
    MOV esi, offset aCpu_0
    MOV rdi, rax
    CALL sub_45A670
    TEST eax, eax
    JNZ loc_45B6D0
loc_45B510:
    XOR edx, edx
    XOR esi, esi
    NOP dword ptr [rax+00h]
loc_45B518:
    MOV rax, [rsp+rdx+88h+var_68]
    MOV rcx, [r12+rdx+18h]
    CMP rcx, rax
    MOV [r12+rdx+18h], rax
    CMOVA rcx, rax
    SUB rax, rcx
    MOV [rsp+rdx+88h+var_68], rax
    ADD rdx, 8
    ADD rsi, rax
    CMP rdx, 38h
    JNZ loc_45B518
loc_45B543:
    TEST rsi, rsi
    LEA r13, [r12+54h]
    JZ loc_45B6F9
loc_45B551:
    MOVSXD r9, ebx
    XOR ecx, ecx
    XOR r8d, r8d
    NOP dword ptr [rax+00000000h]
loc_45B560:
    MOV rax, r9
    XOR edx, edx
    IMUL rax, [rsp+rcx*2+88h+var_68]
    DIV rsi
    MOV [rsp+rcx*2+88h+var_68], rax
    MOV dword ptr [rsp+rcx+88h+var_88], edx
    ADD rcx, 4
    ADD r8d, eax
    CMP rcx, 1Ch
    JNZ loc_45B560
loc_45B583:
    CMP ebx, r8d
    JLE loc_45B5CD
loc_45B588:
    NOP dword ptr [rax+rax+00000000h]
loc_45B590:
    MOV esi, dword ptr [rsp+88h+var_88]
    LEA rdx, [rsp+88h+var_88+4]
    XOR edi, edi
    MOV eax, 1
    NOP 
loc_45B5A0:
    MOV ecx, [rdx]
    CMP ecx, esi
    JBE loc_45B5AB
loc_45B5A6:
    MOVSXD rdi, eax
    MOV esi, ecx
loc_45B5AB:
    ADD eax, 1
    ADD rdx, 4
    CMP eax, 7
    JNZ loc_45B5A0
loc_45B5B7:
    ADD r8d, 1
    ADD [rsp+rdi*8+88h+var_68], 1
    MOV dword ptr [rsp+rdi*4+88h+var_88], 0
    CMP ebx, r8d
    JNZ loc_45B590
loc_45B5CD:
    MOV rdx, r9
    MOV esi, 2Eh
    MOV rdi, r13
    CALL _memset
    MOV rbx, [rsp+88h+n]
    MOV esi, 53h
    MOV rdi, r13
    MOV rdx, rbx
    CALL _memset
    LEA rcx, [r13+rbx+0]
    MOV rdx, [rsp+88h+var_68]
    MOV esi, 55h
    MOV rdi, rcx
    CALL _memset
    MOV rcx, rax
    ADD rcx, [rsp+88h+var_68]
    MOV rdx, [rsp+88h+var_60]
    MOV esi, 4Eh
    MOV rdi, rcx
    CALL _memset
    MOV rcx, rax
    ADD rcx, [rsp+88h+var_60]
    MOV rdx, [rsp+88h+var_48]
    MOV esi, 44h
    MOV rdi, rcx
    CALL _memset
    MOV rcx, rax
    ADD rcx, [rsp+88h+var_48]
    MOV rdx, [rsp+88h+var_40]
    MOV esi, 49h
    MOV rdi, rcx
    CALL _memset
    MOV rdi, rax
    ADD rdi, [rsp+88h+var_40]
    MOV rdx, [rsp+88h+var_38]
    MOV esi, 69h
    CALL _memset
loc_45B66E:
    MOVZX edx, byte ptr [r12+54h]
    MOV rax, [rbp+8]
    MOV ecx, offset qword_743628
    SUB rcx, rax
    TEST dl, dl
    JZ loc_45B6B1
loc_45B684:
    TEST ecx, ecx
    JLE loc_45B6B1
loc_45B688:
    SUB ecx, 1
    LEA rcx, [r13+rcx+1]
    JMP loc_45B69D
loc_45B698:
    CMP r13, rcx
    JZ loc_45B6B1
loc_45B69D:
    ADD rax, 1
    ADD r13, 1
    MOV [rax-1], dl
    MOVZX edx, byte ptr [r13+0]
    TEST dl, dl
    JNZ loc_45B698
loc_45B6B1:
    MOV [rbp+8], rax
loc_45B6B5:
    MOV rax, [rsp+88h+var_30]
    XOR rax, fs:28h
    JNZ loc_45B70E
loc_45B6C5:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_45B6D0:
    SUB ebx, 1
    CMP ebx, 0FFFFFFFFh
    JZ loc_45B6B5
loc_45B6D8:
    MOV rax, [rbp+8]
    CMP rax, offset qword_743628
    JNB loc_45B6D0
loc_45B6E4:
    LEA rdx, [rax+1]
    SUB ebx, 1
    CMP ebx, 0FFFFFFFFh
    MOV [rbp+8], rdx
    MOV byte ptr [rax], 3Fh
    JNZ loc_45B6D8
loc_45B6F7:
    JMP loc_45B6B5
loc_45B6F9:
    MOVSXD rdx, ebx
    MOV esi, 3Fh
    MOV rdi, r13
    CALL _memset
    JMP loc_45B66E
loc_45B70E:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Network/Socket'}

##### T 103 - collect_cpu
```assembly
loc_46ECD0:
    PUSH r15
    PUSH r14
    MOV ecx, 7
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    SUB rsp, 68h
    MOV r12, cs:qword_78D1F0
    MOV ebp, [r13+50h]
    MOV rax, fs:28h
    MOV [rsp+98h+var_40], rax
    XOR eax, eax
    LEA rdi, [rsp+98h+var_78]
    REP 
    LEA rdi, [r12+28h]
    CALL sub_46E9F0
    LEA rdx, [rsp+98h+var_78]
    MOV ecx, 0FEh
    MOV esi, offset aCpu
    MOV rdi, rax
    CALL sub_46E8E0
    TEST eax, eax
    JNZ loc_46F068
loc_46ED32:
    MOV rdx, [rsp+98h+var_78]
    MOV rcx, [r13+18h]
    LEA rbx, [r13+54h]
    MOV r14, [rsp+98h+var_70]
    MOV r11, [rsp+98h+n]
    MOV r10, [rsp+98h+var_60]
    MOV r9, [rsp+98h+var_58]
    CMP rcx, rdx
    MOV [r13+18h], rdx
    MOV rdi, [rsp+98h+var_50]
    CMOVA rcx, rdx
    MOV r15, [rsp+98h+var_48]
    MOV r8, [r13+48h]
    SUB rdx, rcx
    MOV rcx, [r13+20h]
    MOV [r13+20h], r14
    MOV [rsp+98h+var_78], rdx
    MOV [r13+48h], r15
    CMP rcx, r14
    CMOVA rcx, r14
    SUB r14, rcx
    MOV rcx, [r13+28h]
    MOV [r13+28h], r11
    LEA rsi, [rdx+r14]
    MOV [rsp+98h+var_70], r14
    CMP rcx, r11
    CMOVA rcx, r11
    SUB r11, rcx
    MOV rcx, [r13+30h]
    MOV [r13+30h], r10
    ADD rsi, r11
    MOV [rsp+98h+n], r11
    CMP rcx, r10
    CMOVA rcx, r10
    SUB r10, rcx
    MOV rcx, [r13+38h]
    MOV [r13+38h], r9
    ADD rsi, r10
    MOV [rsp+98h+var_60], r10
    CMP rcx, r9
    CMOVA rcx, r9
    SUB r9, rcx
    MOV rcx, [r13+40h]
    MOV [r13+40h], rdi
    ADD rsi, r9
    MOV [rsp+98h+var_58], r9
    CMP rcx, rdi
    CMOVA rcx, rdi
    SUB rdi, rcx
    ADD rsi, rdi
    CMP r8, r15
    MOV [rsp+98h+var_50], rdi
    CMOVA r8, r15
    SUB r15, r8
    ADD rsi, r15
    MOV [rsp+98h+var_48], r15
    JZ loc_46F098
loc_46EE13:
    MOVSXD r8, ebp
    MOV rax, rdx
    XOR edx, edx
    IMUL rax, r8
    DIV rsi
    MOV rcx, rax
    MOV [rsp+98h+var_78], rax
    MOV rax, r14
    IMUL rax, r8
    MOV [rsp+98h+var_98], edx
    XOR edx, edx
    DIV rsi
    ADD ecx, eax
    MOV [rsp+98h+var_70], rax
    MOV rax, r11
    IMUL rax, r8
    MOV [rsp+98h+var_94], edx
    XOR edx, edx
    DIV rsi
    ADD ecx, eax
    MOV [rsp+98h+n], rax
    MOV rax, r10
    IMUL rax, r8
    MOV [rsp+98h+var_90], edx
    XOR edx, edx
    DIV rsi
    ADD ecx, eax
    MOV [rsp+98h+var_60], rax
    MOV rax, r9
    IMUL rax, r8
    MOV [rsp+98h+var_8C], edx
    XOR edx, edx
    DIV rsi
    ADD ecx, eax
    MOV [rsp+98h+var_58], rax
    MOV rax, rdi
    IMUL rax, r8
    MOV [rsp+98h+var_88], edx
    XOR edx, edx
    DIV rsi
    LEA r9d, [rcx+rax]
    MOV [rsp+98h+var_50], rax
    MOV rax, r15
    IMUL rax, r8
    MOV [rsp+98h+var_84], edx
    XOR edx, edx
    DIV rsi
    LEA ecx, [r9+rax]
    MOV [rsp+98h+var_48], rax
    MOV [rsp+98h+var_80], edx
    CMP ebp, ecx
    JLE loc_46EF5E
loc_46EEC3:
    MOV r10d, 2
    MOV r9d, 3
    MOV edi, 4
    MOV esi, 5
    MOV edx, 6
    XCHG ax, ax
loc_46EEE0:
    MOV r11d, [rsp+98h+var_98]
    MOV eax, [rsp+98h+var_94]
    MOV r14d, [rsp+98h+var_90]
    CMP r11d, eax
    MOV r15d, eax
    CMOVNB r15d, r11d
    SETB al
    MOV r11d, r14d
    CMP r15d, r14d
    MOVZX eax, al
    CMOVNB r11d, r15d
    MOV r15d, [rsp+98h+var_8C]
    CMOVB rax, r10
    MOV r14d, r15d
    CMP r11d, r15d
    MOV r15d, [rsp+98h+var_88]
    CMOVNB r14d, r11d
    CMOVB rax, r9
    MOV r11d, r15d
    CMP r14d, r15d
    CMOVNB r11d, r14d
    MOV r14d, [rsp+98h+var_84]
    CMOVB rax, rdi
    CMP r11d, r14d
    CMOVB rax, rsi
    CMOVB r11d, r14d
    CMP r11d, [rsp+98h+var_80]
    CMOVB rax, rdx
    ADD ecx, 1
    ADD [rsp+rax*8+98h+var_78], 1
    CMP ebp, ecx
    MOV [rsp+rax*4+98h+var_98], 0
    JNZ loc_46EEE0
loc_46EF5E:
    MOV rdx, r8
    MOV esi, 2Eh
    MOV rdi, rbx
    CALL _memset
    MOV rbp, [rsp+98h+n]
    MOV esi, 53h
    MOV rdi, rbx
    MOV rdx, rbp
    CALL _memset
    LEA rcx, [rbx+rbp]
    MOV rdx, [rsp+98h+var_78]
    MOV esi, 55h
    MOV rdi, rcx
    CALL _memset
    MOV rcx, rax
    ADD rcx, [rsp+98h+var_78]
    MOV rdx, [rsp+98h+var_70]
    MOV esi, 4Eh
    MOV rdi, rcx
    CALL _memset
    MOV rcx, rax
    ADD rcx, [rsp+98h+var_70]
    MOV rdx, [rsp+98h+var_58]
    MOV esi, 44h
    MOV rdi, rcx
    CALL _memset
    MOV rcx, rax
    ADD rcx, [rsp+98h+var_58]
    MOV rdx, [rsp+98h+var_50]
    MOV esi, 49h
    MOV rdi, rcx
    CALL _memset
    MOV rdi, rax
    ADD rdi, [rsp+98h+var_50]
    MOV rdx, [rsp+98h+var_48]
    MOV esi, 69h
    CALL _memset
loc_46EFFE:
    MOVZX edx, byte ptr [r13+54h]
    MOV rax, [r12+8]
    MOV ecx, offset qword_78D628
    SUB rcx, rax
    TEST dl, dl
    JZ loc_46F03F
loc_46F014:
    TEST ecx, ecx
    JLE loc_46F03F
loc_46F018:
    SUB ecx, 1
    LEA rcx, [rbx+rcx+1]
    JMP loc_46F02D
loc_46F028:
    CMP rbx, rcx
    JZ loc_46F03F
loc_46F02D:
    ADD rax, 1
    ADD rbx, 1
    MOV [rax-1], dl
    MOVZX edx, byte ptr [rbx]
    TEST dl, dl
    JNZ loc_46F028
loc_46F03F:
    MOV [r12+8], rax
loc_46F044:
    MOV rax, [rsp+98h+var_40]
    XOR rax, fs:28h
    JNZ loc_46F0AD
loc_46F054:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46F068:
    SUB ebp, 1
    CMP ebp, 0FFFFFFFFh
    JZ loc_46F044
loc_46F070:
    MOV rax, [r12+8]
    CMP rax, offset qword_78D628
    JNB loc_46F068
loc_46F07D:
    LEA rdx, [rax+1]
    SUB ebp, 1
    CMP ebp, 0FFFFFFFFh
    MOV [r12+8], rdx
    MOV byte ptr [rax], 3Fh
    JNZ loc_46F070
loc_46F091:
    JMP loc_46F044
loc_46F098:
    MOVSXD rdx, ebp
    MOV esi, 3Fh
    MOV rdi, rbx
    CALL _memset
    JMP loc_46EFFE
loc_46F0AD:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Iterative Data Processing', 'inferred_category': 'Network/Socket Programming'}

##### Q 104 - readprofile_main
```assembly
loc_494290:
    PUSH r15
    PUSH r14
    MOV rdi, rsi
    PUSH r13
    PUSH r12
    MOV esi, offset aMMPNabsirv
    PUSH rbp
    PUSH rbx
    SUB rsp, 208h
    MOV rax, fs:28h
    MOV [rsp+238h+var_40], rax
    XOR eax, eax
    LEA r8, [rsp+238h+var_1F8]
    LEA rcx, [rsp+238h+var_200]
    LEA rdx, [rsp+238h+var_204]
    MOV [rsp+238h+var_204], 0
    MOV [rsp+238h+var_1F8], offset aProcProfile
    MOV [rsp+238h+var_200], offset aBootSystemMap
    CALL sub_4DFD70
    TEST eax, 101h
    MOV [rsp+238h+var_218], eax
    JZ loc_494358
loc_4942F5:
    AND eax, 1
    MOV esi, 1
    MOV edi, offset aProcProfile
    CMP eax, 1
    SBB rbx, rbx
    AND rbx, 0FFFFFFFFFFFFFFFDh
    CALL sub_40AE50
    ADD rbx, 4
    LEA rsi, [rsp+238h+var_204]
    MOV ebp, eax
    MOV edi, eax
    MOV rdx, rbx
    CALL sub_40AFA0
    MOV edi, ebp
    CALL _close
loc_49432D:
    XOR eax, eax
    MOV rsi, [rsp+238h+var_40]
    XOR rsi, fs:28h
    JNZ loc_49493B
loc_494346:
    ADD rsp, 208h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_494358:
    MOV rdi, [rsp+238h+var_1F8]
    LEA rsi, [rsp+238h+var_1F0]
    MOV rax, 7FFFFFFFFFFFFFFFh
    MOV [rsp+238h+var_1F0], rax
    CALL sub_4E9D00
    TEST byte ptr [rsp+238h+var_218], 8
    MOV r12, rax
    JNZ loc_4943C7
loc_494380:
    LEA rdx, [rax+4]
    MOV rax, [rsp+238h+var_1F0]
    SHR rax, 2
    CDQE 
    LEA rbx, [r12+rax*4]
    CMP rdx, rbx
    JNB loc_4943C7
loc_494398:
    XOR ecx, ecx
    XOR esi, esi
    NOP dword ptr [rax+00h]
loc_4943A0:
    MOV eax, [rdx]
    MOV edi, eax
    MOVZX eax, ax
    XOR di, di
    CMP edi, 1
    SBB esi, 0FFFFFFFFh
    CMP eax, 1
    SBB ecx, 0FFFFFFFFh
    ADD rdx, 4
    CMP rdx, rbx
    JB loc_4943A0
loc_4943BF:
    CMP esi, ecx
    JG loc_4948AB
loc_4943C7:
    TEST byte ptr [rsp+238h+var_218], 80h
    MOV eax, [r12]
    MOV [rsp+238h+var_214], eax
    JNZ loc_494465
loc_4943DA:
    MOV rdi, [rsp+238h+var_200]
    MOV ebx, 1
    CALL sub_40A3D0
    MOV [rsp+238h+stream], rax
    MOV rbp, rax
    JMP loc_49443A
loc_4943F8:
    LEA r8, [rsp+238h+var_1C8]
    LEA rcx, [rsp+238h+var_1D8]
    LEA rdx, [rsp+238h+var_1E8]
    LEA rdi, [rsp+238h+s]
    XOR eax, eax
    MOV esi, offset aLlxSS
    CALL _sscanf
    CMP eax, 3
    JNZ loc_494928
loc_494424:
    LEA rsi, [rsp+238h+var_1C8]
    MOV edi, offset aStext
    MOV ecx, 7
    REPE 
    JZ loc_49447F
loc_494437:
    ADD ebx, 1
loc_49443A:
    LEA rdi, [rsp+238h+s]
    MOV rdx, rbp
    MOV esi, 80h
    CALL _fgets_unlocked
    TEST rax, rax
    JNZ loc_4943F8
loc_494454:
    MOV rsi, [rsp+238h+var_200]
    MOV edi, offset aCanTFindStextI
    XOR eax, eax
    CALL sub_40A1E0
loc_494465:
    MOV edx, [rsp+238h+var_214]
    MOV esi, offset aSamplingStepU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_49432D
loc_49447F:
    MOV rbp, [rsp+238h+var_1E8]
    MOV [rsp+238h+var_210], ebx
    TEST rbp, rbp
    JZ loc_494454
loc_49448D:
    MOV eax, [rsp+238h+var_218]
    MOV [rsp+238h+var_224], 0
    MOV ebx, 1
    MOV r13d, eax
    AND eax, 200h
    AND r13d, 20h
    MOV [rsp+238h+var_20C], eax
    XCHG ax, ax
loc_4944B0:
    MOV rdx, [rsp+238h+stream]
    LEA rdi, [rsp+238h+s]
    MOV esi, 80h
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_4947E2
loc_4944D0:
    LEA r8, [rsp+238h+var_148]
    LEA rcx, [rsp+238h+var_1D8]
    LEA rdx, [rsp+238h+var_1E0]
    LEA rdi, [rsp+238h+s]
    XOR eax, eax
    MOV esi, offset aLlxSS
    CALL _sscanf
    CMP eax, 3
    JNZ loc_49494C
loc_4944FF:
    MOVZX eax, [rsp+238h+var_1D8]
    LEA edx, [rax-3Fh]
    AND edx, 0FDh
    JNZ loc_494528
loc_49450F:
    MOV r8d, [rsp+238h+var_224]
    TEST r8d, r8d
    JNZ loc_494528
loc_494519:
    MOV [rsp+238h+var_224], 0
    JMP loc_4944B0
loc_494528:
    AND eax, 0FFFFFFDFh
    CMP al, 54h
    JZ loc_494537
loc_49452F:
    CMP al, 57h
    JNZ loc_4947E2
loc_494537:
    MOV rax, [rsp+238h+var_1F0]
    SHR rax, 2
    CMP rbx, rax
    JNB loc_494940
loc_494549:
    MOV rcx, [rsp+238h+var_1E0]
    MOV r14d, [rsp+238h+var_214]
    XOR edx, edx
    MOV rax, rcx
    SUB rax, rbp
    DIV r14
    CMP rbx, rax
    JNB loc_4947D1
loc_494567:
    LEA r9, [rbx-1]
    MOV eax, [rsp+238h+var_218]
    MOV [rsp+238h+var_238], rbp
    XOR r15d, r15d
    XOR esi, esi
    IMUL r9, r14
    AND eax, 10h
    MOV [rsp+238h+var_228], eax
    ADD r9, rbp
    MOV ebp, r13d
    MOV r13, r9
    JMP loc_4945D6
loc_494590:
    MOV ecx, r10d
    MOV esi, offset aLxU
    MOV rdx, r13
    MOV edi, 1
    XOR eax, eax
    MOV [rsp+238h+var_22C], r10d
    CALL ___printf_chk
    MOV rcx, [rsp+238h+var_1E0]
    MOV r10d, [rsp+238h+var_22C]
    MOV esi, 1
loc_4945BB:
    MOV rax, rcx
    SUB rax, [rsp+238h+var_238]
    XOR edx, edx
    ADD rbx, 1
    ADD r15d, r10d
    ADD r13, r14
    DIV r14
    CMP rax, rbx
    JBE loc_494618
loc_4945D6:
    TEST ebp, ebp
    MOV r10d, [r12+rbx*4]
    JZ loc_4945BB
loc_4945DE:
    TEST r10d, r10d
    JNZ loc_4945EB
loc_4945E3:
    MOV edi, [rsp+238h+var_228]
    TEST edi, edi
    JZ loc_4945BB
loc_4945EB:
    TEST esi, esi
    JNZ loc_494590
loc_4945EF:
    LEA rdx, [rsp+238h+var_1C8]
    MOV esi, 50F132h
    MOV edi, 1
    XOR eax, eax
    MOV [rsp+238h+var_22C], r10d
    CALL ___printf_chk
    MOV r10d, [rsp+238h+var_22C]
    JMP loc_494590
loc_494618:
    MOV r13d, ebp
    ADD [rsp+238h+var_224], r15d
    MOV rbp, [rsp+238h+var_238]
    TEST r13d, r13d
    JZ loc_494660
loc_494629:
    MOV eax, [rsp+238h+var_20C]
    OR eax, r15d
    JNZ loc_4946E0
loc_494636:
    LEA rsi, [rsp+238h+var_148]
    LEA rdi, [rsp+238h+var_1C8]
    MOV edx, 80h
    MOV [rsp+238h+var_1E8], rcx
    CALL ___strcpy_chk
    ADD [rsp+238h+var_210], 1
    JMP loc_4944B0
loc_494660:
    TEST r15d, r15d
    JZ loc_4946C8
loc_494665:
    MOV rdx, [rsp+238h+var_1E8]
    MOV eax, ecx
    SUB eax, edx
    JZ loc_494636
loc_494670:
    MOV ecx, [rsp+238h+var_20C]
    TEST ecx, ecx
    JZ loc_494795
loc_49467C:
    PXOR xmm0, xmm0
    MOV ecx, r15d
    MOV eax, eax
    PXOR xmm1, xmm1
    MOV r8d, r15d
    MOV esi, offset a016llx40s6u84f
    MOV edi, 1
    CVTSI2SD xmm0, rcx
    LEA rcx, [rsp+238h+var_1C8]
    CVTSI2SD xmm1, rax
    MOV eax, 1
    DIVSD xmm0, xmm1
    CALL ___printf_chk
loc_4946B3:
    TEST byte ptr [rsp+238h+var_218], 40h
    JNZ loc_4946FE
loc_4946BA:
    MOV rcx, [rsp+238h+var_1E0]
    JMP loc_494636
loc_4946C8:
    TEST byte ptr [rsp+238h+var_218], 10h
    JZ loc_494636
loc_4946D3:
    XOR r15d, r15d
    JMP loc_494665
loc_4946E0:
    MOV edx, r15d
    MOV esi, offset aTotalU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rcx, [rsp+238h+var_1E0]
    JMP loc_494636
loc_4946FE:
    MOV rsi, [rsp+238h+var_1E8]
    XOR edx, edx
    MOV rcx, [rsp+238h+var_1E0]
    MOV rax, rsi
    SUB rax, rbp
    DIV r14
    XOR edx, edx
    LEA r11, [rax+1]
    MOV r15, rax
    MOV rax, rcx
    SUB rax, rbp
    DIV r14
    CMP rax, r11
    JBE loc_494636
loc_49472E:
    IMUL r15, r14
    MOV [rsp+238h+var_238], rbx
    ADD r15, rbp
    MOV rbx, r15
    MOV r15, r11
    JMP loc_49474D
loc_494748:
    MOV rsi, [rsp+238h+var_1E8]
loc_49474D:
    MOV r9d, [r12+r15*4]
    MOV r8, rbx
    LEA rcx, [rsp+238h+var_1C8]
    SUB r8, rsi
    MOV rdx, rbx
    XOR eax, eax
    MOV esi, offset aLlxSLlxU
    MOV edi, 1
    ADD r15, 1
    CALL ___printf_chk
    MOV rcx, [rsp+238h+var_1E0]
    XOR edx, edx
    ADD rbx, r14
    MOV rax, rcx
    SUB rax, rbp
    DIV r14
    CMP rax, r15
    JA loc_494748
loc_49478C:
    MOV rbx, [rsp+238h+var_238]
    JMP loc_494636
loc_494795:
    PXOR xmm0, xmm0
    MOV edx, r15d
    PXOR xmm1, xmm1
    MOV eax, eax
    LEA rcx, [rsp+238h+var_1C8]
    MOV esi, offset a6u40s84f
    MOV edi, 1
    CVTSI2SD xmm0, rdx
    MOV edx, r15d
    CVTSI2SD xmm1, rax
    MOV eax, 1
    DIVSD xmm0, xmm1
    CALL ___printf_chk
    JMP loc_4946B3
loc_4947D1:
    TEST r13d, r13d
    JZ loc_4946C8
loc_4947DA:
    XOR r15d, r15d
    JMP loc_494629
loc_4947E2:
    MOV rax, [rsp+238h+var_1F0]
    MOV ecx, offset aUnknown_5
    MOV esi, offset a6uS
    MOV edi, 1
    SHR rax, 2
    MOV edx, [r12+rax*4-4]
    XOR eax, eax
    CALL ___printf_chk
    TEST [rsp+238h+var_218], 200h
    JNZ loc_49485A
loc_494810:
    MOV eax, [rsp+238h+var_224]
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
    MOV rax, [rsp+238h+var_1E8]
    SUB rax, rbp
    JS loc_4948EC
loc_49482B:
    PXOR xmm1, xmm1
    CVTSI2SD xmm1, rax
loc_494834:
    DIVSD xmm0, xmm1
    MOV edx, [rsp+238h+var_224]
    MOV ecx, offset aTotal
    MOV esi, offset a6u40s84f
    MOV edi, 1
    MOV eax, 1
    CALL ___printf_chk
    JMP loc_49432D
loc_49485A:
    MOV eax, [rsp+238h+var_224]
    MOV rdx, [rsp+238h+var_1E8]
    PXOR xmm1, xmm1
    SUB rdx, rbp
    CVTSI2SD xmm1, rax
    JS loc_49490A
loc_494875:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rdx
loc_49487E:
    DIVSD xmm1, xmm0
    MOV r8d, [rsp+238h+var_224]
    MOV ecx, offset aTotal
    XOR edx, edx
    MOV esi, offset a016x40s6u84f
    MOV edi, 1
    MOV eax, 1
    MOVAPD xmm0, xmm1
    CALL ___printf_chk
    JMP loc_49432D
loc_4948AB:
    XOR eax, eax
    MOV edi, offset aAssumingRevers
    CALL sub_40A280
    CMP r12, rbx
    JNB loc_4943C7
loc_4948C0:
    MOV rax, r12
loc_4948C3:
    MOVZX edx, byte ptr [rax]
    MOVZX ecx, byte ptr [rax+3]
    ADD rax, 4
    MOV [rax-4], cl
    MOV [rax-1], dl
    MOVZX ecx, byte ptr [rax-2]
    MOVZX edx, byte ptr [rax-3]
    MOV [rax-3], cl
    MOV [rax-2], dl
    CMP rax, rbx
    JB loc_4948C3
loc_4948E7:
    JMP loc_4943C7
loc_4948EC:
    MOV rdx, rax
    PXOR xmm1, xmm1
    SHR rdx, 1
    AND eax, 1
    OR rdx, rax
    CVTSI2SD xmm1, rdx
    ADDSD xmm1, xmm1
    JMP loc_494834
loc_49490A:
    MOV rax, rdx
    PXOR xmm0, xmm0
    SHR rax, 1
    AND edx, 1
    OR rax, rdx
    CVTSI2SD xmm0, rax
    ADDSD xmm0, xmm0
    JMP loc_49487E
loc_494928:
    MOV rsi, [rsp+238h+var_200]
    MOV edx, ebx
    MOV edi, offset aSIWrongMapLine
    XOR eax, eax
    CALL sub_40A1E0
loc_49493B:
    CALL ___stack_chk_fail
loc_494940:
    MOV edi, offset aProfileAddress
    XOR eax, eax
    CALL sub_40A1E0
loc_49494C:
    MOV edx, [rsp+238h+var_210]
    MOV rsi, [rsp+238h+var_200]
    MOV edi, offset aSIWrongMapLine
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Unknown', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7C', '0xA9', '0xB2', '0xB5', '0xB6', '0x97', '0x0A', '0x20', '0xA8', '0xF0', '0xC8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Address Information Parsing', 'inferred_category': 'Networking/URL Handling'}

##### T 104 - readprofile_main
```assembly
loc_4B9B80:
    PUSH r15
    PUSH r14
    MOV rdi, rsi
    PUSH r13
    PUSH r12
    MOV esi, offset aMMPNabsirv
    PUSH rbp
    PUSH rbx
    SUB rsp, 208h
    MOV rax, fs:28h
    MOV [rsp+238h+var_40], rax
    XOR eax, eax
    LEA r8, [rsp+238h+var_1F8]
    LEA rcx, [rsp+238h+var_200]
    LEA rdx, [rsp+238h+var_204]
    MOV [rsp+238h+var_204], 0
    MOV [rsp+238h+var_1F8], offset aProcProfile
    MOV [rsp+238h+var_200], offset aBootSystemMap
    CALL sub_5291B0
    TEST eax, 101h
    MOV ebx, eax
    JZ loc_4B9C50
loc_4B9BE3:
    AND ebx, 1
    MOV esi, 1
    MOV edi, offset aProcProfile
    CMP ebx, 1
    SBB rbx, rbx
    AND rbx, 0FFFFFFFFFFFFFFFDh
    CALL sub_40C3E0
    ADD rbx, 4
    LEA rsi, [rsp+238h+var_204]
    MOV ebp, eax
    MOV edi, eax
    MOV rdx, rbx
    CALL sub_40C670
    MOV edi, ebp
    CALL _close
loc_4B9C1B:
    XOR eax, eax
    MOV rsi, [rsp+238h+var_40]
    XOR rsi, fs:28h
    JNZ loc_4BA900
loc_4B9C34:
    ADD rsp, 208h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B9C50:
    MOV rdi, [rsp+238h+var_1F8]
    LEA rsi, [rsp+238h+var_1F0]
    MOV rax, 7FFFFFFFFFFFFFFFh
    MOV [rsp+238h+var_1F0], rax
    CALL sub_535F10
    TEST bl, 8
    MOV r12, rax
    JNZ loc_4B9F39
loc_4B9C7A:
    LEA rbp, [rax+4]
    MOV rax, [rsp+238h+var_1F0]
    MOV rsi, rbp
    SHR rax, 2
    CDQE 
    LEA r13, [r12+rax*4]
    CMP rbp, r13
    JNB loc_4B9F39
loc_4B9C99:
    LEA r14, [r13+3]
    LEA r8, [r12+8]
    MOV rax, rbp
    AND eax, 0Fh
    MOV rdi, r14
    SHR rax, 2
    SUB rdi, r8
    NEG rax
    SHR rdi, 2
    AND eax, 3
    LEA rcx, [rdi+1]
    CMP rax, rcx
    CMOVA rax, rcx
    CMP rcx, 6
    JA loc_4BA86B
loc_4B9CD1:
    MOV rax, rcx
loc_4B9CD4:
    MOV edx, [r12+4]
    MOV esi, edx
    MOVZX edx, dx
    XOR si, si
    CMP esi, 1
    MOV rsi, r8
    SBB r9d, r9d
    ADD r9d, 1
    CMP edx, 1
    SBB edx, edx
    ADD edx, 1
    CMP rax, 1
    JZ loc_4B9DED
loc_4B9D00:
    MOV esi, [r12+8]
    MOV r8d, esi
    MOVZX esi, si
    XOR r8w, r8w
    CMP r8d, 1
    SBB r8d, r8d
    CMP esi, 1
    SBB esi, esi
    CMP rax, 2
    LEA r9d, [r9+r8+1]
    LEA edx, [rdx+rsi+1]
    LEA rsi, [r12+0Ch]
    JZ loc_4B9DED
loc_4B9D33:
    MOV esi, [r12+0Ch]
    MOV r8d, esi
    MOVZX esi, si
    XOR r8w, r8w
    CMP r8d, 1
    SBB r8d, r8d
    CMP esi, 1
    SBB esi, esi
    CMP rax, 3
    LEA r9d, [r9+r8+1]
    LEA edx, [rdx+rsi+1]
    LEA rsi, [r12+10h]
    JZ loc_4B9DED
loc_4B9D66:
    MOV esi, [r12+10h]
    MOV r8d, esi
    MOVZX esi, si
    XOR r8w, r8w
    CMP r8d, 1
    SBB r8d, r8d
    CMP esi, 1
    SBB esi, esi
    CMP rax, 4
    LEA r9d, [r9+r8+1]
    LEA edx, [rdx+rsi+1]
    LEA rsi, [r12+14h]
    JZ loc_4B9DED
loc_4B9D95:
    MOV esi, [r12+14h]
    MOV r8d, esi
    MOVZX esi, si
    XOR r8w, r8w
    CMP r8d, 1
    SBB r8d, r8d
    CMP esi, 1
    SBB esi, esi
    CMP rax, 6
    LEA r9d, [r9+r8+1]
    LEA edx, [rdx+rsi+1]
    LEA rsi, [r12+18h]
    JNZ loc_4B9DED
loc_4B9DC4:
    MOV esi, [r12+18h]
    MOV r8d, esi
    MOVZX esi, si
    XOR r8w, r8w
    CMP r8d, 1
    SBB r8d, r8d
    CMP esi, 1
    SBB esi, esi
    LEA r9d, [r9+r8+1]
    LEA edx, [rdx+rsi+1]
    LEA rsi, [r12+1Ch]
loc_4B9DED:
    CMP rcx, rax
    JZ loc_4B9F30
loc_4B9DF6:
    SUB rcx, rax
    SUB rdi, rax
    LEA r8, [rcx-4]
    SHR r8, 2
    ADD r8, 1
    CMP rdi, 2
    LEA r10, ds:0[r8*4]
    JBE loc_4B9EC5
loc_4B9E1A:
    PXOR xmm2, xmm2
    MOVDQA xmm7, cs:xmmword_54E460
    LEA rdi, [r12+rax*4+4]
    XOR eax, eax
    MOVDQA xmm4, cs:xmmword_54DE40
    MOVDQA xmm5, xmm2
    MOVDQA xmm3, xmm2
    MOVDQA xmm6, cs:xmmword_54E470
loc_4B9E45:
    ADD rax, 1
    ADD rdi, 10h
    MOVDQA xmm0, xmmword ptr [rdi-10h]
    CMP rax, r8
    MOVDQA xmm1, xmm0
    PAND xmm0, xmm6
    PAND xmm1, xmm7
    PCMPEQD xmm0, xmm3
    PCMPEQD xmm1, xmm3
    PANDN xmm0, xmm4
    PANDN xmm1, xmm4
    PADDD xmm2, xmm0
    PADDD xmm5, xmm1
    JB loc_4B9E45
loc_4B9E7B:
    MOVDQA xmm0, xmm2
    LEA rsi, [rsi+r10*4]
    PSRLDQ xmm0, 8
    PADDD xmm2, xmm0
    MOVDQA xmm0, xmm2
    PSRLDQ xmm0, 4
    PADDD xmm0, xmm2
    MOVD eax, xmm0
    MOVDQA xmm0, xmm5
    ADD edx, eax
    PSRLDQ xmm0, 8
    PADDD xmm5, xmm0
    MOVDQA xmm0, xmm5
    PSRLDQ xmm0, 4
    PADDD xmm0, xmm5
    MOVD eax, xmm0
    ADD r9d, eax
    CMP rcx, r10
    JZ loc_4B9F30
loc_4B9EC5:
    MOV eax, [rsi]
    MOV ecx, eax
    MOVZX eax, ax
    XOR cx, cx
    CMP ecx, 1
    SBB ecx, ecx
    CMP eax, 1
    SBB eax, eax
    LEA r9d, [r9+rcx+1]
    LEA edx, [rdx+rax+1]
    LEA rax, [rsi+4]
    CMP r13, rax
    JBE loc_4B9F30
loc_4B9EEB:
    MOV eax, [rsi+4]
    MOV ecx, eax
    MOVZX eax, ax
    XOR cx, cx
    CMP ecx, 1
    SBB ecx, ecx
    CMP eax, 1
    SBB eax, eax
    LEA r9d, [r9+rcx+1]
    LEA edx, [rdx+rax+1]
    LEA rax, [rsi+8]
    CMP r13, rax
    JBE loc_4B9F30
loc_4B9F12:
    MOV eax, [rsi+8]
    MOV ecx, eax
    MOVZX eax, ax
    XOR cx, cx
    CMP ecx, 1
    SBB ecx, ecx
    CMP eax, 1
    SBB eax, eax
    LEA r9d, [r9+rcx+1]
    LEA edx, [rdx+rax+1]
loc_4B9F30:
    CMP r9d, edx
    JG loc_4BA4C9
loc_4B9F39:
    TEST bl, 80h
    MOV ebp, [r12]
    JNZ loc_4B9FCE
loc_4B9F46:
    MOV rdi, [rsp+238h+var_200]
    MOV r13d, 1
    CALL sub_40AD90
    MOV [rsp+238h+stream], rax
    MOV r14, rax
    JMP loc_4B9FA3
loc_4B9F60:
    LEA r8, [rsp+238h+var_1C8]
    LEA rcx, [rsp+238h+var_1D8]
    LEA rdx, [rsp+238h+var_1E8]
    LEA rdi, [rsp+238h+s]
    XOR eax, eax
    MOV esi, offset aLlxSS
    CALL _sscanf
    CMP eax, 3
    JNZ loc_4BA8EC
loc_4B9F8C:
    LEA rsi, [rsp+238h+var_1C8]
    MOV edi, offset aStext
    MOV ecx, 7
    REPE 
    JZ loc_4B9FE6
loc_4B9F9F:
    ADD r13d, 1
loc_4B9FA3:
    LEA rdi, [rsp+238h+s]
    MOV rdx, r14
    MOV esi, 80h
    CALL _fgets_unlocked
    TEST rax, rax
    JNZ loc_4B9F60
loc_4B9FBD:
    MOV rsi, [rsp+238h+var_200]
    MOV edi, offset aCanTFindStextI
    XOR eax, eax
    CALL sub_40ABE0
loc_4B9FCE:
    MOV edx, ebp
    MOV esi, offset aSamplingStepU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B9C1B
loc_4B9FE6:
    MOV [rsp+238h+var_224], r13d
    MOV r13, [rsp+238h+var_1E8]
    TEST r13, r13
    JZ loc_4B9FBD
loc_4B9FF5:
    MOV eax, ebx
    MOV [rsp+238h+var_228], 0
    AND eax, 20h
    MOV [rsp+238h+var_220], eax
    MOV eax, ebx
    AND eax, 10h
    MOV [rsp+238h+var_210], eax
    MOV eax, ebx
    AND ebx, 40h
    AND eax, 200h
    MOV [rsp+238h+var_20C], ebx
    MOV ebx, 1
    MOV [rsp+238h+var_21C], eax
    NOP word ptr [rax+rax+00000000h]
loc_4BA030:
    MOV rdx, [rsp+238h+stream]
    LEA rdi, [rsp+238h+s]
    MOV esi, 80h
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_4BA400
loc_4BA050:
    LEA r8, [rsp+238h+var_148]
    LEA rcx, [rsp+238h+var_1D8]
    LEA rdx, [rsp+238h+var_1E0]
    LEA rdi, [rsp+238h+s]
    XOR eax, eax
    MOV esi, offset aLlxSS
    CALL _sscanf
    CMP eax, 3
    JNZ loc_4BA911
loc_4BA07F:
    MOVZX eax, [rsp+238h+var_1D8]
    LEA edx, [rax-3Fh]
    AND edx, 0FDh
    JNZ loc_4BA0A8
loc_4BA08F:
    MOV r10d, [rsp+238h+var_228]
    TEST r10d, r10d
    JNZ loc_4BA0A8
loc_4BA099:
    MOV [rsp+238h+var_228], 0
    JMP loc_4BA030
loc_4BA0A8:
    AND eax, 0FFFFFFDFh
    CMP al, 54h
    JZ loc_4BA0B7
loc_4BA0AF:
    CMP al, 57h
    JNZ loc_4BA400
loc_4BA0B7:
    MOV rax, [rsp+238h+var_1F0]
    SHR rax, 2
    CMP rbx, rax
    JNB loc_4BA905
loc_4BA0C9:
    MOV rcx, [rsp+238h+var_1E0]
    XOR edx, edx
    MOV rax, rcx
    SUB rax, r13
    DIV rbp
    CMP rbx, rax
    JNB loc_4BA3E8
loc_4BA0E2:
    MOV r8d, [rsp+238h+var_220]
    TEST r8d, r8d
    JNZ loc_4BA1A0
loc_4BA0F0:
    XOR r8d, r8d
    NOP dword ptr [rax+rax+00h]
loc_4BA0F8:
    MOV edx, [r12+rbx*4]
    ADD rbx, 1
    ADD r8d, edx
    CMP rax, rbx
    JA loc_4BA0F8
loc_4BA108:
    ADD [rsp+238h+var_228], r8d
    TEST r8d, r8d
    JZ loc_4BA2F0
loc_4BA116:
    MOV rdx, [rsp+238h+var_1E8]
    MOV eax, ecx
    SUB eax, edx
    JZ loc_4BA178
loc_4BA121:
    MOV ecx, [rsp+238h+var_21C]
    TEST ecx, ecx
    JZ loc_4BA3A8
loc_4BA12D:
    PXOR xmm0, xmm0
    MOV ecx, r8d
    MOV eax, eax
    PXOR xmm1, xmm1
    MOV esi, offset a016llx40s6u84f
    MOV edi, 1
    CVTSI2SD xmm0, rcx
    LEA rcx, [rsp+238h+var_1C8]
    CVTSI2SD xmm1, rax
    MOV eax, 1
    DIVSD xmm0, xmm1
    CALL ___printf_chk
loc_4BA161:
    MOV edx, [rsp+238h+var_20C]
    TEST edx, edx
    JNZ loc_4BA318
loc_4BA16D:
    MOV rcx, [rsp+238h+var_1E0]
    NOP word ptr [rax+rax+00h]
loc_4BA178:
    LEA rsi, [rsp+238h+var_148]
    LEA rdi, [rsp+238h+var_1C8]
    MOV edx, 80h
    MOV [rsp+238h+var_1E8], rcx
    CALL ___strcpy_chk
    ADD [rsp+238h+var_224], 1
    JMP loc_4BA030
loc_4BA1A0:
    MOV edi, [rsp+238h+var_210]
    LEA r8, [rbx-1]
    IMUL r8, rbp
    TEST edi, edi
    JNZ loc_4BA240
loc_4BA1B4:
    LEA r14, [r8+r13]
    MOV [rsp+238h+var_238], r13
    XOR r15d, r15d
    MOV r13, r12
    XOR esi, esi
    MOV r12, r14
    JMP loc_4BA210
loc_4BA1D0:
    MOV ecx, r14d
    MOV esi, offset aLxU
    MOV rdx, r12
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rcx, [rsp+238h+var_1E0]
    MOV esi, 1
loc_4BA1F1:
    MOV rax, rcx
    SUB rax, [rsp+238h+var_238]
    XOR edx, edx
    ADD rbx, 1
    ADD r15d, r14d
    ADD r12, rbp
    DIV rbp
    CMP rax, rbx
    JBE loc_4BA308
loc_4BA210:
    MOV r14d, [r13+rbx*4+0]
    TEST r14d, r14d
    JZ loc_4BA1F1
loc_4BA21A:
    TEST esi, esi
    JNZ loc_4BA1D0
loc_4BA21E:
    LEA rdx, [rsp+238h+var_1C8]
    MOV esi, 55D13Ah
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4BA1D0
loc_4BA240:
    LEA rdx, [rsp+238h+var_1C8]
    ADD r8, r13
    MOV esi, 55D13Ah
    MOV edi, 1
    XOR eax, eax
    MOV r14d, [r12+rbx*4]
    MOV [rsp+238h+var_218], r8
    XOR r15d, r15d
    CALL ___printf_chk
    MOV r8, [rsp+238h+var_218]
    MOV [rsp+238h+var_238], r13
    MOV r13d, r14d
    MOV r14, r8
    JMP loc_4BA284
loc_4BA280:
    MOV r13d, [r12+rbx*4]
loc_4BA284:
    MOV rdx, r14
    MOV ecx, r13d
    XOR eax, eax
    MOV esi, offset aLxU
    MOV edi, 1
    ADD rbx, 1
    CALL ___printf_chk
    MOV rcx, [rsp+238h+var_1E0]
    XOR edx, edx
    ADD r15d, r13d
    ADD r14, rbp
    MOV rax, rcx
    SUB rax, [rsp+238h+var_238]
    DIV rbp
    CMP rax, rbx
    JA loc_4BA280
loc_4BA2BB:
    MOV r13, [rsp+238h+var_238]
loc_4BA2BF:
    ADD [rsp+238h+var_228], r15d
loc_4BA2C4:
    MOV eax, [rsp+238h+var_21C]
    OR eax, r15d
    JZ loc_4BA178
loc_4BA2D1:
    MOV edx, r15d
    MOV esi, offset aTotalU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rcx, [rsp+238h+var_1E0]
    JMP loc_4BA178
loc_4BA2F0:
    MOV esi, [rsp+238h+var_210]
    TEST esi, esi
    JZ loc_4BA178
loc_4BA2FC:
    XOR r8d, r8d
    JMP loc_4BA116
loc_4BA308:
    MOV r12, r13
    MOV r13, [rsp+238h+var_238]
    JMP loc_4BA2BF
loc_4BA318:
    MOV rsi, [rsp+238h+var_1E8]
    XOR edx, edx
    MOV rcx, [rsp+238h+var_1E0]
    MOV rax, rsi
    SUB rax, r13
    DIV rbp
    XOR edx, edx
    LEA r14, [rax+1]
    MOV r15, rax
    MOV rax, rcx
    SUB rax, r13
    DIV rbp
    CMP rax, r14
    JBE loc_4BA178
loc_4BA348:
    MOV rax, r15
    IMUL rax, rbp
    LEA r15, [rax+r13]
    JMP loc_4BA35D
loc_4BA358:
    MOV rsi, [rsp+238h+var_1E8]
loc_4BA35D:
    MOV r9d, [r12+r14*4]
    MOV r8, r15
    LEA rcx, [rsp+238h+var_1C8]
    SUB r8, rsi
    MOV rdx, r15
    XOR eax, eax
    MOV esi, offset aLlxSLlxU
    MOV edi, 1
    ADD r14, 1
    CALL ___printf_chk
    MOV rcx, [rsp+238h+var_1E0]
    XOR edx, edx
    ADD r15, rbp
    MOV rax, rcx
    SUB rax, r13
    DIV rbp
    CMP rax, r14
    JA loc_4BA358
loc_4BA39C:
    JMP loc_4BA178
loc_4BA3A8:
    PXOR xmm0, xmm0
    MOV edx, r8d
    PXOR xmm1, xmm1
    MOV eax, eax
    LEA rcx, [rsp+238h+var_1C8]
    MOV esi, offset a6u40s84f
    MOV edi, 1
    CVTSI2SD xmm0, rdx
    MOV edx, r8d
    CVTSI2SD xmm1, rax
    MOV eax, 1
    DIVSD xmm0, xmm1
    CALL ___printf_chk
    JMP loc_4BA161
loc_4BA3E8:
    MOV eax, [rsp+238h+var_220]
    TEST eax, eax
    JZ loc_4BA2F0
loc_4BA3F4:
    XOR r15d, r15d
    JMP loc_4BA2C4
loc_4BA400:
    MOV rax, [rsp+238h+var_1F0]
    MOV ecx, offset aUnknown_5
    MOV esi, offset a6uS
    MOV edi, 1
    SHR rax, 2
    MOV edx, [r12+rax*4-4]
    XOR eax, eax
    CALL ___printf_chk
    MOV r9d, [rsp+238h+var_21C]
    TEST r9d, r9d
    JNZ loc_4BA478
loc_4BA42E:
    MOV eax, [rsp+238h+var_228]
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
    MOV rax, [rsp+238h+var_1E8]
    SUB rax, r13
    JS loc_4BA87E
loc_4BA449:
    PXOR xmm1, xmm1
    CVTSI2SD xmm1, rax
loc_4BA452:
    DIVSD xmm0, xmm1
    MOV edx, [rsp+238h+var_228]
    MOV ecx, offset aTotal
    MOV esi, offset a6u40s84f
    MOV edi, 1
    MOV eax, 1
    CALL ___printf_chk
    JMP loc_4B9C1B
loc_4BA478:
    MOV eax, [rsp+238h+var_228]
    MOV rdx, [rsp+238h+var_1E8]
    PXOR xmm1, xmm1
    SUB rdx, r13
    CVTSI2SD xmm1, rax
    JS loc_4BA8CE
loc_4BA493:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rdx
loc_4BA49C:
    DIVSD xmm1, xmm0
    MOV r8d, [rsp+238h+var_228]
    MOV ecx, offset aTotal
    XOR edx, edx
    MOV esi, offset a016x40s6u84f
    MOV edi, 1
    MOV eax, 1
    MOVAPD xmm0, xmm1
    CALL ___printf_chk
    JMP loc_4B9C1B
loc_4BA4C9:
    XOR eax, eax
    MOV edi, offset aAssumingRevers
    CALL sub_40AC80
    CMP r12, r13
    JNB loc_4B9F39
loc_4BA4DE:
    SUB r14, rbp
    MOV rax, r14
    SHR rax, 2
    LEA rdx, [rax-0Fh]
    LEA rdi, [rax+1]
    SHR rdx, 4
    ADD rdx, 1
    MOV rsi, rdx
    SHL rsi, 4
    CMP r14, 3Bh
    JBE loc_4BA89C
loc_4BA509:
    MOVDQA xmm3, cs:xmmword_54DD30
    MOV rax, r12
    XOR ecx, ecx
loc_4BA516:
    MOVDQA xmm1, xmm3
    ADD rcx, 1
    MOVDQU xmm0, xmmword ptr [rax]
    ADD rax, 40h
    MOVDQA xmm6, xmm3
    MOVDQU xmm4, xmmword ptr [rax-30h]
    PAND xmm1, xmm0
    PSRLW xmm0, 8
    PAND xmm6, xmm4
    PSRLW xmm4, 8
    MOVDQU xmm2, xmmword ptr [rax-20h]
    PACKUSWB xmm0, xmm4
    MOVDQA xmm4, xmm3
    MOVDQU xmm5, xmmword ptr [rax-10h]
    PACKUSWB xmm1, xmm6
    MOVDQA xmm6, xmm3
    PAND xmm4, xmm2
    PSRLW xmm2, 8
    PAND xmm6, xmm5
    PSRLW xmm5, 8
    PACKUSWB xmm2, xmm5
    MOVDQA xmm5, xmm3
    PACKUSWB xmm4, xmm6
    MOVDQA xmm6, xmm3
    PAND xmm5, xmm1
    PSRLW xmm1, 8
    PAND xmm6, xmm4
    PSRLW xmm4, 8
    PACKUSWB xmm1, xmm4
    MOVDQA xmm4, xmm3
    PACKUSWB xmm5, xmm6
    MOVDQA xmm6, xmm3
    PAND xmm4, xmm0
    PSRLW xmm0, 8
    PAND xmm6, xmm2
    PSRLW xmm2, 8
    PACKUSWB xmm0, xmm2
    PACKUSWB xmm4, xmm6
    MOVDQA xmm2, xmm0
    PUNPCKHBW xmm0, xmm4
    PUNPCKLBW xmm2, xmm4
    MOVDQA xmm4, xmm1
    PUNPCKHBW xmm1, xmm5
    PUNPCKLBW xmm4, xmm5
    MOVDQA xmm5, xmm2
    PUNPCKHBW xmm2, xmm4
    PUNPCKLBW xmm5, xmm4
    MOVUPS xmmword ptr [rax-30h], xmm2
    MOVDQA xmm2, xmm0
    PUNPCKHBW xmm0, xmm1
    PUNPCKLBW xmm2, xmm1
    MOVUPS xmmword ptr [rax-40h], xmm5
    MOVUPS xmmword ptr [rax-20h], xmm2
    MOVUPS xmmword ptr [rax-10h], xmm0
    CMP rcx, rdx
    JB loc_4BA516
loc_4BA602:
    CMP rsi, rdi
    LEA rax, [r12+rsi*4]
    JZ loc_4B9F39
loc_4BA60F:
    MOVZX edx, byte ptr [rax]
    MOVZX ecx, byte ptr [rax+3]
    ADD rax, 4
    MOV [rax-4], cl
    MOV [rax-1], dl
    MOVZX ecx, byte ptr [rax-2]
    MOVZX edx, byte ptr [rax-3]
    MOV [rax-3], cl
    MOV [rax-2], dl
    CMP rax, r13
    JNB loc_4B9F39
loc_4BA637:
    MOVZX edx, byte ptr [rax]
    MOVZX ecx, byte ptr [rax+3]
    MOV [rax+3], dl
    MOVZX edx, byte ptr [rax+1]
    MOV [rax], cl
    MOVZX ecx, byte ptr [rax+2]
    MOV [rax+2], dl
    LEA rdx, [rax+4]
    MOV [rax+1], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA65E:
    MOVZX edx, byte ptr [rax+4]
    MOVZX ecx, byte ptr [rax+7]
    MOV [rax+7], dl
    MOVZX edx, byte ptr [rax+5]
    MOV [rax+4], cl
    MOVZX ecx, byte ptr [rax+6]
    MOV [rax+6], dl
    LEA rdx, [rax+8]
    MOV [rax+5], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA687:
    MOVZX edx, byte ptr [rax+8]
    MOVZX ecx, byte ptr [rax+0Bh]
    MOV [rax+0Bh], dl
    MOVZX edx, byte ptr [rax+9]
    MOV [rax+8], cl
    MOVZX ecx, byte ptr [rax+0Ah]
    MOV [rax+0Ah], dl
    LEA rdx, [rax+0Ch]
    MOV [rax+9], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA6B0:
    MOVZX edx, byte ptr [rax+0Ch]
    MOVZX ecx, byte ptr [rax+0Fh]
    MOV [rax+0Fh], dl
    MOVZX edx, byte ptr [rax+0Dh]
    MOV [rax+0Ch], cl
    MOVZX ecx, byte ptr [rax+0Eh]
    MOV [rax+0Eh], dl
    LEA rdx, [rax+10h]
    MOV [rax+0Dh], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA6D9:
    MOVZX edx, byte ptr [rax+10h]
    MOVZX ecx, byte ptr [rax+13h]
    MOV [rax+13h], dl
    MOVZX edx, byte ptr [rax+11h]
    MOV [rax+10h], cl
    MOVZX ecx, byte ptr [rax+12h]
    MOV [rax+12h], dl
    LEA rdx, [rax+14h]
    MOV [rax+11h], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA702:
    MOVZX edx, byte ptr [rax+14h]
    MOVZX ecx, byte ptr [rax+17h]
    MOV [rax+17h], dl
    MOVZX edx, byte ptr [rax+15h]
    MOV [rax+14h], cl
    MOVZX ecx, byte ptr [rax+16h]
    MOV [rax+16h], dl
    LEA rdx, [rax+18h]
    MOV [rax+15h], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA72B:
    MOVZX edx, byte ptr [rax+18h]
    MOVZX ecx, byte ptr [rax+1Bh]
    MOV [rax+1Bh], dl
    MOVZX edx, byte ptr [rax+19h]
    MOV [rax+18h], cl
    MOVZX ecx, byte ptr [rax+1Ah]
    MOV [rax+1Ah], dl
    LEA rdx, [rax+1Ch]
    MOV [rax+19h], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA754:
    MOVZX edx, byte ptr [rax+1Ch]
    MOVZX ecx, byte ptr [rax+1Fh]
    MOV [rax+1Fh], dl
    MOVZX edx, byte ptr [rax+1Dh]
    MOV [rax+1Ch], cl
    MOVZX ecx, byte ptr [rax+1Eh]
    MOV [rax+1Eh], dl
    LEA rdx, [rax+20h]
    MOV [rax+1Dh], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA77D:
    MOVZX edx, byte ptr [rax+20h]
    MOVZX ecx, byte ptr [rax+23h]
    MOV [rax+23h], dl
    MOVZX edx, byte ptr [rax+21h]
    MOV [rax+20h], cl
    MOVZX ecx, byte ptr [rax+22h]
    MOV [rax+22h], dl
    LEA rdx, [rax+24h]
    MOV [rax+21h], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA7A6:
    MOVZX edx, byte ptr [rax+24h]
    MOVZX ecx, byte ptr [rax+27h]
    MOV [rax+27h], dl
    MOVZX edx, byte ptr [rax+25h]
    MOV [rax+24h], cl
    MOVZX ecx, byte ptr [rax+26h]
    MOV [rax+26h], dl
    LEA rdx, [rax+28h]
    MOV [rax+25h], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA7CF:
    MOVZX edx, byte ptr [rax+28h]
    MOVZX ecx, byte ptr [rax+2Bh]
    MOV [rax+2Bh], dl
    MOVZX edx, byte ptr [rax+29h]
    MOV [rax+28h], cl
    MOVZX ecx, byte ptr [rax+2Ah]
    MOV [rax+2Ah], dl
    LEA rdx, [rax+2Ch]
    MOV [rax+29h], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA7F8:
    MOVZX edx, byte ptr [rax+2Ch]
    MOVZX ecx, byte ptr [rax+2Fh]
    MOV [rax+2Fh], dl
    MOVZX edx, byte ptr [rax+2Dh]
    MOV [rax+2Ch], cl
    MOVZX ecx, byte ptr [rax+2Eh]
    MOV [rax+2Eh], dl
    LEA rdx, [rax+30h]
    MOV [rax+2Dh], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA821:
    MOVZX edx, byte ptr [rax+30h]
    MOVZX ecx, byte ptr [rax+33h]
    MOV [rax+33h], dl
    MOVZX edx, byte ptr [rax+31h]
    MOV [rax+30h], cl
    MOVZX ecx, byte ptr [rax+32h]
    MOV [rax+32h], dl
    LEA rdx, [rax+34h]
    MOV [rax+31h], cl
    CMP r13, rdx
    JBE loc_4B9F39
loc_4BA84A:
    MOVZX edx, byte ptr [rax+34h]
    MOVZX ecx, byte ptr [rax+37h]
    MOV [rax+37h], dl
    MOV [rax+34h], cl
    MOVZX edx, byte ptr [rax+35h]
    MOVZX ecx, byte ptr [rax+36h]
    MOV [rax+36h], dl
    MOV [rax+35h], cl
    JMP loc_4B9F39
loc_4BA86B:
    TEST rax, rax
    JNZ loc_4B9CD4
loc_4BA874:
    XOR edx, edx
    XOR r9d, r9d
    JMP loc_4B9DF6
loc_4BA87E:
    MOV rdx, rax
    PXOR xmm1, xmm1
    SHR rdx, 1
    AND eax, 1
    OR rdx, rax
    CVTSI2SD xmm1, rdx
    ADDSD xmm1, xmm1
    JMP loc_4BA452
loc_4BA89C:
    MOVZX eax, byte ptr [r12]
    MOVZX edx, byte ptr [r12+3]
    MOV [r12+3], al
    MOV [r12], dl
    MOVZX eax, byte ptr [r12+1]
    MOVZX edx, byte ptr [r12+2]
    MOV [r12+2], al
    MOV [r12+1], dl
    MOV rax, rbp
    JMP loc_4BA637
loc_4BA8CE:
    MOV rax, rdx
    PXOR xmm0, xmm0
    SHR rax, 1
    AND edx, 1
    OR rax, rdx
    CVTSI2SD xmm0, rax
    ADDSD xmm0, xmm0
    JMP loc_4BA49C
loc_4BA8EC:
    MOV rsi, [rsp+238h+var_200]
    MOV edx, r13d
    MOV edi, offset aSIWrongMapLine
    XOR eax, eax
    CALL sub_40ABE0
loc_4BA900:
    CALL ___stack_chk_fail
loc_4BA905:
    MOV edi, offset aProfileAddress
    XOR eax, eax
    CALL sub_40ABE0
loc_4BA911:
    MOV edx, [rsp+238h+var_224]
    MOV rsi, [rsp+238h+var_200]
    MOV edi, offset aSIWrongMapLine
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['String'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'MemoryManagement', 'ControlFlow', 'ErrorHandling'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0', '0A', '10', '1C', '20', '28', '2C', '40', '48', '50', '58', '68', '70', '78', '80', '97', '9A', 'B2', 'C8', 'CA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 28, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Network Programming/HTTP', 'inferred_category': 'Networking/API Interaction'}

##### Q 105 - edit_file
```assembly
loc_4D6CB0:
    PUSH r15
    PUSH r14
    MOV edx, 2
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    XOR edi, edi
    SUB rsp, 18h
    MOV rbx, cs:qword_7431F0
    LEA rsi, [rbx+350h]
    MOV byte ptr [rbx+1Eh], 1
    CALL sub_40AAA0
    MOVZX eax, byte ptr [rbx+363h]
    MOV dword ptr [rbx+30h], 18h
    MOV dword ptr [rbx+34h], 50h
    MOV [rbx+74h], al
    CALL sub_4D1810
    TEST eax, eax
    MOV [rbx+38h], eax
    JZ loc_4D6D41
loc_4D6D03:
    MOV rcx, cs:stdout
    MOV edx, 0Eh
    MOV esi, 1
    MOV edi, offset a999999h6n
    CALL _fwrite_unlocked
    CALL sub_40B100
    LEA rsi, [rbx+3A8h]
    XOR edi, edi
    MOV edx, 64h
    CALL sub_4E9610
    CMP eax, 0FFFFFF00h
    JZ loc_4D6FF6
loc_4D6D41:
    MOV edi, [rbx+30h]
loc_4D6D44:
    MOV esi, [rbx+34h]
    CALL sub_4D1850
    MOV rdi, rbp
    CALL sub_4D3D50
    MOV rax, [rbx]
    MOV dword ptr [rbx+0B0h], 1Ah
    MOV esi, offset sub_4D17E0
    MOV dword ptr [rbx+0B4h], 1Bh
    MOV byte ptr [rbx+75h], 0
    MOV edi, 2
    MOV dword ptr [rbx+70h], 0
    MOV dword ptr [rbx+3Ch], 0
    MOV [rbx+270h], rax
    MOV [rbx+268h], rax
    MOV dword ptr [rbx+40h], 0
    CALL _signal
    MOV esi, offset sub_4D38D0
    MOV edi, 1Ch
    CALL _signal
    MOV esi, offset sub_4D32F0
    MOV edi, 14h
    CALL _signal
    LEA rdi, [rbx+288h]
    MOV esi, 1
    CALL ___sigsetjmp
    TEST eax, eax
    MOV rbp, cs:qword_7431F0
    JZ loc_4D6DE7
loc_4D6DDB:
    MOV rax, [rbp+0]
    MOV [rbp+10h], rax
    MOV [rbp+58h], rax
loc_4D6DE7:
    MOV rdi, [rbp+88h]
    MOV byte ptr [rbp+1Fh], 0
    LEA r12, [rbp+390h]
    MOV dword ptr [rbp+2Ch], 0
    MOV dword ptr [rbp+6Ch], 8
    MOV dword ptr [rbp+44h], 0
    CALL _free
    MOV rbx, [rbp+390h]
    MOV qword ptr [rbp+88h], 0
    MOV qword ptr [rbp+80h], 0
    MOV dword ptr [rbp+78h], 0
    MOV byte ptr [rbp+76h], 0
    TEST rbx, rbx
    JZ loc_4D6EBB
loc_4D6E40:
    MOV esi, 0Ah
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JZ loc_4D6E80
loc_4D6E52:
    CMP byte ptr [rax], 0Ah
    JNZ loc_4D6E6D
loc_4D6E57:
    NOP word ptr [rax+rax+00000000h]
loc_4D6E60:
    ADD rax, 1
    MOV byte ptr [rax-1], 0
    CMP byte ptr [rax], 0Ah
    JZ loc_4D6E60
loc_4D6E6D:
    CMP byte ptr [rbx], 0
    JNZ loc_4D6E85
loc_4D6E72:
    MOV rbx, rax
    JMP loc_4D6E40
loc_4D6E80:
    CMP byte ptr [rbx], 0
    JZ loc_4D6E9C
loc_4D6E85:
    MOV rdi, rbx
    MOV [rsp+48h+var_40], rax
    CALL sub_4D3E90
    MOV rax, [rsp+48h+var_40]
    TEST rax, rax
    JNZ loc_4D6E72
loc_4D6E9C:
    MOV rdi, [r12]
    ADD r12, 8
    CALL _free
    MOV qword ptr [r12-8], 0
    MOV rbx, [r12]
    TEST rbx, rbx
    JNZ loc_4D6E40
loc_4D6EBB:
    XOR edi, edi
    CALL sub_4D3800
    MOV r13, cs:qword_7431F0
    LEA r14, [r13+480h]
    JMP loc_4D6EEC
loc_4D6ED8:
    MOV edi, ebx
    CALL sub_4D4EC0
    CMP byte ptr [rbp+3A8h], 0
    JZ loc_4D6FAC
loc_4D6EEC:
    CMP byte ptr [rbp+1Eh], 0
    JLE loc_4D6FD1
loc_4D6EF6:
    CALL sub_4D33C0
    MOV r12, [rbp+10h]
    MOV [rbp+75h], al
    MOV ebx, eax
    MOV rdi, r12
    CALL sub_4D26D0
    CMP rax, [rbp+0A0h]
    JZ loc_4D6F40
loc_4D6F15:
    MOV rdi, r12
    MOV [rbp+0A0h], rax
    CALL sub_4D2560
    MOV rdi, r12
    MOV r15, rax
    CALL sub_4D26D0
    MOV edx, [rbp+0B4h]
    MOV rsi, r15
    MOV rdi, rax
    CALL sub_4D1700
loc_4D6F40:
    CMP byte ptr [rbp+76h], 0
    JNZ loc_4D6ED8
loc_4D6F46:
    CMP qword ptr [rbp+88h], 0
    JNZ loc_4D6ED8
loc_4D6F50:
    CMP byte ptr [rbp+1Fh], 0
    JNZ loc_4D6ED8
loc_4D6F56:
    LEA eax, [rbx-1]
    CMP eax, 7Dh
    JA loc_4D6ED8
loc_4D6F62:
    MOV esi, ebx
    MOV edi, offset aCcddjoopprrxx
    CALL _strchr
    TEST rax, rax
    JZ loc_4D6ED8
loc_4D6F77:
    MOV r8d, [r13+2Ch]
    TEST r8d, r8d
    JG loc_4D703E
loc_4D6F84:
    MOV [r13+480h], bl
    MOV dword ptr [r13+78h], 1
    MOV byte ptr [r13+76h], 1
loc_4D6F98:
    MOV edi, ebx
    CALL sub_4D4EC0
    CMP byte ptr [rbp+3A8h], 0
    JNZ loc_4D6EEC
loc_4D6FAC:
    XOR edi, edi
    CALL sub_4D2D90
    TEST eax, eax
    JNZ loc_4D6EEC
loc_4D6FBB:
    XOR edi, edi
    CALL sub_4D2E90
    CALL sub_4D3600
    CMP byte ptr [rbp+1Eh], 0
    JG loc_4D6EF6
loc_4D6FD1:
    CALL sub_4D32B0
    CALL sub_40B100
    LEA rdi, [rbp+350h]
    CALL sub_40A9C0
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4D6FF6:
    SHR rax, 20h
    MOV ecx, 1000h
    MOV edx, eax
    MOV edi, eax
    AND edx, 7FFFh
    CMP edx, 1001h
    CMOVNB edx, ecx
    SHR edi, 10h
    AND edi, 7FFFh
    MOV [rbx+34h], edx
    CMP edi, 1000h
    MOV [rbx+30h], edi
    JBE loc_4D6D44
loc_4D702D:
    MOV dword ptr [rbx+30h], 1000h
    MOV edi, 1000h
    JMP loc_4D6D44
loc_4D703E:
    MOVSX r9d, bl
    MOV ecx, offset aDC
    MOV edx, 80h
    MOV esi, 1
    MOV rdi, r14
    XOR eax, eax
    CALL ___sprintf_chk
    MOV byte ptr [r13+76h], 1
    MOV [r13+78h], eax
    JMP loc_4D6F98
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop', 'inferred_category': 'ControlFlow'}

##### T 105 - edit_file
```assembly
loc_51DD60:
    PUSH r15
    PUSH r14
    MOV edx, 2
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    XOR edi, edi
    SUB rsp, 0A8h
    MOV rbx, cs:qword_78D1F0
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_40], rax
    XOR eax, eax
    LEA rsi, [rbx+350h]
    MOV byte ptr [rbx+1Eh], 1
    CALL sub_40BF40
    MOVZX eax, byte ptr [rbx+363h]
    LEA rdx, [rbx+30h]
    LEA rsi, [rbx+34h]
    XOR edi, edi
    MOV dword ptr [rbx+30h], 18h
    MOV dword ptr [rbx+34h], 50h
    MOV [rbx+74h], al
    CALL sub_40BBC0
    CMP dword ptr [rbx+30h], 1000h
    JBE loc_51DDDC
loc_51DDD5:
    MOV dword ptr [rbx+30h], 1000h
loc_51DDDC:
    MOV r13d, [rbx+34h]
    CMP r13d, 1000h
    JBE loc_51DDF6
loc_51DDE9:
    MOV dword ptr [rbx+34h], 1000h
    MOV r13d, 1000h
loc_51DDF6:
    TEST eax, eax
    MOV [rbx+38h], eax
    JNZ loc_51E330
loc_51DE01:
    MOV ebp, [rbx+30h]
loc_51DE04:
    MOV rdi, [rbx+60h]
    CALL _free
    MOV eax, r13d
    IMUL eax, ebp
    ADD eax, 8
    MOVSXD rdi, eax
    MOV [rbx+68h], eax
    CALL sub_40C220
    MOVSXD rdx, dword ptr [rbx+68h]
    MOV [rbx+60h], rax
    MOV esi, 20h
    MOV rdi, rax
    CALL _memset
    CMP ebp, 2
    JLE loc_51DE5B
loc_51DE3B:
    MOVSXD r13, r13d
    SUB ebp, 1
    MOV eax, 1
    MOV rdx, r13
loc_51DE49:
    MOV rcx, [rbx+60h]
    ADD eax, 1
    MOV byte ptr [rcx+rdx], 7Eh
    ADD rdx, r13
    CMP eax, ebp
    JNZ loc_51DE49
loc_51DE5B:
    MOV rdi, r12
    CALL sub_518670
    MOV rax, [rbx]
    MOV dword ptr [rbx+0B0h], 1Ah
    MOV esi, offset sub_514700
    MOV dword ptr [rbx+0B4h], 1Bh
    MOV byte ptr [rbx+75h], 0
    MOV edi, 2
    MOV dword ptr [rbx+70h], 0
    MOV dword ptr [rbx+3Ch], 0
    MOV [rbx+270h], rax
    MOV [rbx+268h], rax
    MOV dword ptr [rbx+40h], 0
    CALL _signal
    MOV esi, offset sub_516E40
    MOV edi, 1Ch
    CALL _signal
    MOV esi, offset sub_514E20
    MOV edi, 14h
    CALL _signal
    LEA rdi, [rbx+288h]
    MOV esi, 1
    CALL ___sigsetjmp
    TEST eax, eax
    JZ loc_51E324
loc_51DEE7:
    MOV rbp, cs:qword_78D1F0
    MOV rax, [rbp+0]
    MOV [rbp+10h], rax
    MOV [rbp+58h], rax
loc_51DEFA:
    MOV rdi, [rbp+88h]
    MOV byte ptr [rbp+1Fh], 0
    LEA r12, [rbp+390h]
    MOV dword ptr [rbp+2Ch], 0
    MOV dword ptr [rbp+6Ch], 8
    MOV dword ptr [rbp+44h], 0
    CALL _free
    MOV rbx, [rbp+390h]
    MOV qword ptr [rbp+88h], 0
    MOV qword ptr [rbp+80h], 0
    MOV dword ptr [rbp+78h], 0
    MOV byte ptr [rbp+76h], 0
    TEST rbx, rbx
    JZ loc_51DFC9
loc_51DF53:
    NOP dword ptr [rax+rax+00h]
loc_51DF58:
    MOV esi, 0Ah
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JZ loc_51DF90
loc_51DF6A:
    CMP byte ptr [rax], 0Ah
    JNZ loc_51DF7D
loc_51DF6F:
    NOP 
loc_51DF70:
    ADD rax, 1
    MOV byte ptr [rax-1], 0
    CMP byte ptr [rax], 0Ah
    JZ loc_51DF70
loc_51DF7D:
    CMP byte ptr [rbx], 0
    JNZ loc_51DF95
loc_51DF82:
    MOV rbx, rax
    JMP loc_51DF58
loc_51DF90:
    CMP byte ptr [rbx], 0
    JZ loc_51DFAA
loc_51DF95:
    MOV rdi, rbx
    MOV [rsp+0D8h+var_D8], rax
    CALL sub_518840
    MOV rax, [rsp+0D8h+var_D8]
    TEST rax, rax
    JNZ loc_51DF82
loc_51DFAA:
    MOV rdi, [r12]
    ADD r12, 8
    CALL _free
    MOV qword ptr [r12-8], 0
    MOV rbx, [r12]
    TEST rbx, rbx
    JNZ loc_51DF58
loc_51DFC9:
    MOV esi, [rbp+34h]
    MOV edi, [rbp+30h]
    XOR r9d, r9d
    MOV ecx, offset aUUh
    MOV edx, 21h
    TEST esi, esi
    MOV esi, 1
    SETNZ r9b
    XOR r8d, r8d
    TEST edi, edi
    LEA rdi, [rsp+0D8h+s]
    SETNZ r8b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    LEA rdi, [rsp+0D8h+s]
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset a11hJ+4)
    CALL _fwrite_unlocked
    MOVSXD rdx, dword ptr [rbp+68h]
    MOV rdi, [rbp+60h]
    MOV esi, 20h
    CALL _memset
    XOR edi, edi
    MOV dword ptr [rbp+4Ch], 0
    CALL sub_515580
    CALL sub_516820
    MOV r12, cs:qword_78D1F0
    LEA rax, [r12+480h]
    MOV [rsp+0D8h+var_B0], rax
    JMP loc_51E137
loc_51E066:
    SUB rax, r15
    MOV esi, 0Ah
    MOV rdi, r15
    LEA rdx, [rax-1]
    MOV [rsp+0D8h+var_C8], r8
    MOV [rsp+0D8h+var_D0], r15
    CALL _memchr
    TEST rax, rax
    MOV r9, rax
    MOV r10, [rsp+0D8h+var_D0]
    MOV r8, [rsp+0D8h+var_C8]
    JZ loc_51E311
loc_51E09A:
    MOV r8, rax
loc_51E09D:
    CMP r15, r13
    JBE loc_51E0D9
loc_51E0A2:
    MOV rdx, r10
    MOV esi, 0Ah
    MOV rdi, r13
    SUB rdx, r13
    MOV [rsp+0D8h+var_B8], r8
    MOV [rsp+0D8h+var_C0], r9
    CALL _memrchr
    TEST rax, rax
    MOV r9, [rsp+0D8h+var_C0]
    MOV r8, [rsp+0D8h+var_B8]
    JZ loc_51E319
loc_51E0D2:
    LEA r15, [rax+1]
    MOV r10, r15
loc_51E0D9:
    MOV rax, r8
    SUB rax, r10
    TEST eax, eax
    MOV r13d, eax
    JNS loc_51E0EC
loc_51E0E6:
    NEG r13d
    MOV r15, r9
loc_51E0EC:
    LEA r14, [r12+r14*8]
    MOV rdi, [r14+0B8h]
    CALL _free
    LEA esi, [r13+1]
    MOV rdi, r15
    CALL sub_40C2C0
    MOV [r14+0B8h], rax
loc_51E10F:
    CMP byte ptr [rbp+76h], 0
    JNZ loc_51E123
loc_51E115:
    CMP qword ptr [rbp+88h], 0
    JZ loc_51E1BF
loc_51E123:
    MOV edi, ebx
    CALL sub_51A340
    CMP byte ptr [rbp+3A8h], 0
    JZ loc_51E223
loc_51E137:
    CMP byte ptr [rbp+1Eh], 0
    JLE loc_51E264
loc_51E141:
    CALL sub_516350
    MOV r15, [rbp+10h]
    MOV [rbp+75h], al
    MOV ebx, eax
    MOV r13, [r12]
    MOV rax, r15
    CMP r15, r13
    JBE loc_51E17C
loc_51E15B:
    MOV rdx, r15
    MOV esi, 0Ah
    MOV rdi, r13
    SUB rdx, r13
    CALL _memrchr
    LEA rdx, [rax+1]
    TEST rax, rax
    MOV rax, rdx
    CMOVZ rax, r13
loc_51E17C:
    CMP [rbp+0A0h], rax
    JZ loc_51E10F
loc_51E185:
    MOV [rbp+0A0h], rax
    MOV rax, [r12+8]
    MOVSXD r14, dword ptr [rbp+0B4h]
    LEA r8, [rax-1]
    CMP r15, r8
    JB loc_51E066
loc_51E1A5:
    CMP r15, r13
    MOV r8, r15
    MOV r10, r15
    MOV r9, r15
    JA loc_51E0A2
loc_51E1B7:
    XOR r13d, r13d
    JMP loc_51E0EC
loc_51E1BF:
    CMP byte ptr [rbp+1Fh], 0
    JNZ loc_51E123
loc_51E1C9:
    LEA eax, [rbx-1]
    CMP eax, 7Dh
    JA loc_51E123
loc_51E1D5:
    MOV esi, ebx
    MOV edi, offset aCcddjoopprrxx
    CALL _strchr
    TEST rax, rax
    JZ loc_51E123
loc_51E1EA:
    MOV r8d, [r12+2Ch]
    TEST r8d, r8d
    JG loc_51E376
loc_51E1F8:
    MOV [r12+480h], bl
    MOV dword ptr [r12+78h], 1
    MOV byte ptr [r12+76h], 1
loc_51E20F:
    MOV edi, ebx
    CALL sub_51A340
    CMP byte ptr [rbp+3A8h], 0
    JNZ loc_51E137
loc_51E223:
    LEA rdi, [rsp+0D8h+fds]
    MOV ecx, 1
    XOR edx, edx
    MOV esi, 1
    MOV [rsp+0D8h+fds.fd], 0
    MOV [rsp+0D8h+fds.events], cx
    CALL sub_536950
    TEST eax, eax
    JG loc_51E137
loc_51E24E:
    XOR edi, edi
    CALL sub_515580
    CALL sub_516820
    CMP byte ptr [rbp+1Eh], 0
    JG loc_51E141
loc_51E264:
    MOV rsi, cs:qword_78D1F0
    MOV edx, 0
    LEA rdi, [rsp+0D8h+var_68]
    MOV ecx, [rsi+30h]
    MOV eax, ecx
    SUB eax, 1
    CMOVNS edx, eax
    CMP ecx, edx
    MOV ecx, offset aUUh
    CMOVA eax, edx
    MOV edx, [rsi+34h]
    XOR r9d, r9d
    LEA r8d, [rax+1]
    MOV esi, 1
    TEST edx, edx
    MOV edx, 21h
    SETNZ r9b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    LEA rdi, [rsp+0D8h+var_68]
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset aU0hK+7)
    CALL _fwrite_unlocked
    CALL sub_40C7D0
    LEA rdi, [rbp+350h]
    CALL sub_40BE60
    MOV rax, [rsp+0D8h+var_40]
    XOR rax, fs:28h
    JNZ loc_51E3FC
loc_51E2FF:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_51E311:
    MOV r9, r8
    JMP loc_51E09D
loc_51E319:
    MOV r10, r13
    MOV r15, r13
    JMP loc_51E0D9
loc_51E324:
    MOV rbp, cs:qword_78D1F0
    JMP loc_51DEFA
loc_51E330:
    MOV rcx, cs:stdout
    MOV edx, 0Eh
    MOV esi, 1
    MOV edi, offset a999999h6n
    CALL _fwrite_unlocked
    CALL sub_40C7D0
    LEA rsi, [rbx+3A8h]
    XOR edi, edi
    MOV edx, 64h
    CALL sub_5357D0
    CMP eax, 0FFFFFF00h
    JZ loc_51E3A5
loc_51E36A:
    MOV ebp, [rbx+30h]
    MOV r13d, [rbx+34h]
    JMP loc_51DE04
loc_51E376:
    MOV rdi, [rsp+0D8h+var_B0]
    MOVSX r9d, bl
    MOV ecx, offset aDC
    MOV edx, 80h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV byte ptr [r12+76h], 1
    MOV [r12+78h], eax
    JMP loc_51E20F
loc_51E3A5:
    SHR rax, 20h
    MOV r13d, eax
    AND r13d, 7FFFh
    CMP r13d, 1000h
    MOV [rbx+34h], r13d
    JBE loc_51E3CD
loc_51E3C0:
    MOV dword ptr [rbx+34h], 1000h
    MOV r13d, 1000h
loc_51E3CD:
    MOV ebp, eax
    SHR ebp, 10h
    AND ebp, 7FFFh
    CMP ebp, 1000h
    MOV [rbx+30h], ebp
    JBE loc_51DE04
loc_51E3E7:
    MOV dword ptr [rbx+30h], 1000h
    MOV r13d, [rbx+34h]
    MOV ebp, 1000h
    JMP loc_51DE04
loc_51E3FC:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['ConditionalBranching', 'ControlTransfer'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop', 'inferred_category': 'ControlFlow'}

##### Q 106 - handle_upload_common
```assembly
loc_428210:
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0B0h
    MOV rbp, qword ptr cs:dest.c_cc+0Fh
    MOV qword ptr cs:dest.c_cc+0Fh, 0
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_20], rax
    XOR eax, eax
    CMP cs:dest.c_iflag, 1
    JLE loc_4283B0
loc_42824D:
    TEST esi, esi
    JNZ loc_428390
loc_428255:
    MOV rax, cs:pmatch
    TEST rax, rax
    JZ loc_428370
loc_428265:
    CMP edi, 1
    MOV edx, 41h
    MOV rdi, rax
    SBB esi, esi
    AND esi, 0FFFFFE00h
    ADD esi, 441h
    TEST rbp, rbp
    CMOVNZ esi, edx
    MOV edx, 1B6h
    XOR eax, eax
    CALL _open64
    XOR r12d, r12d
    MOV ebx, eax
loc_428295:
    TEST ebx, ebx
    JS loc_428373
loc_42829D:
    LEA rdx, [rsp+0C8h+stat_buf]
    MOV esi, ebx
    MOV edi, 1
    CALL ___fxstat64
    TEST eax, eax
    JZ loc_428300
loc_4282B2:
    MOV rdi, r12
    CALL _free
    MOV edi, 20333535h
    CALL sub_427AF0
loc_4282C4:
    MOV edi, ebx
    CALL _close
    MOV cs:dest.c_oflag, 0
loc_4282D5:
    MOV rax, [rsp+0C8h+var_20]
    XOR rax, fs:28h
    JNZ loc_4283F8
loc_4282EC:
    ADD rsp, 0B0h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_428300:
    MOV eax, [rsp+0C8h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 8000h
    JNZ loc_4282B2
loc_428310:
    TEST rbp, rbp
    MOV cs:dest.c_oflag, ebx
    JNZ loc_4283D8
loc_42831F:
    TEST r12, r12
    MOV edi, offset aOkToSendData
    CMOVNZ rdi, r12
    CALL sub_427D10
    MOV rdi, r12
    MOV ebp, eax
    CALL _free
    TEST ebp, ebp
    JS loc_4282C4
loc_42833E:
    MOV esi, ebx
    MOV edi, ebp
    CALL sub_40BD90
    MOV edi, ebp
    MOV r12, rax
    CALL _close
    TEST r12, r12
    JS loc_4283E9
loc_42835A:
    MOV edi, 20363232h
    CALL sub_427AB0
    JMP loc_4282C4
loc_428370:
    XOR r12d, r12d
loc_428373:
    MOV rdi, r12
    CALL _free
    MOV edi, 20333535h
    CALL sub_427AF0
    JMP loc_4282D5
loc_428390:
    MOV edi, offset aFileUniqXxxxxx
    CALL sub_40AD40
    LEA rdi, [rax+7]
    MOV r12, rax
    CALL _mkstemp64
    MOV ebx, eax
    JMP loc_428295
loc_4283B0:
    MOV [rsp+0C8h+var_BC], esi
    MOV [rsp+0C8h+var_C0], edi
    CALL sub_427FF0
    TEST eax, eax
    MOV edi, [rsp+0C8h+var_C0]
    MOV esi, [rsp+0C8h+var_BC]
    JZ loc_4282D5
loc_4283CD:
    JMP loc_42824D
loc_4283D8:
    XOR edx, edx
    MOV rsi, rbp
    MOV edi, ebx
    CALL sub_40B050
    JMP loc_42831F
loc_4283E9:
    MOV edi, 20313534h
    CALL sub_427AF0
    JMP loc_4282C4
loc_4283F8:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Sorting', 'inferred_category': 'Utility'}

##### T 106 - handle_upload_common
```assembly
loc_431380:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0A8h
    MOV rbp, qword ptr cs:buf.c_cc+0Fh
    MOV qword ptr cs:buf.c_cc+0Fh, 0
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    CMP cs:buf.c_iflag, 1
    JLE loc_4316A8
loc_4313BF:
    TEST esi, esi
    JNZ loc_431688
loc_4313C7:
    MOV rax, cs:pmatch
    TEST rax, rax
    JZ loc_431640
loc_4313D7:
    CMP edi, 1
    MOV edx, 41h
    MOV rdi, rax
    SBB esi, esi
    AND esi, 0FFFFFE00h
    ADD esi, 441h
    TEST rbp, rbp
    CMOVNZ esi, edx
    MOV edx, 1B6h
    XOR eax, eax
    CALL _open64
    XOR r12d, r12d
    MOV ebx, eax
loc_431407:
    TEST ebx, ebx
    JS loc_431648
loc_43140F:
    MOV rdx, rsp
    MOV esi, ebx
    MOV edi, 1
    CALL ___fxstat64
    TEST eax, eax
    JNZ loc_4315A0
loc_431426:
    MOV eax, [rsp+0C8h+var_B0]
    AND eax, 0F000h
    CMP eax, 8000h
    JNZ loc_4315A0
loc_43143A:
    TEST rbp, rbp
    MOV cs:buf.c_oflag, ebx
    JNZ loc_431716
loc_431449:
    MOV edi, cs:buf.c_iflag
    TEST r12, r12
    MOV r13d, offset aOkToSendData
    CMOVNZ r13, r12
    CMP edi, 1
    JLE loc_431727
loc_431465:
    XOR edx, edx
    XOR esi, esi
    CALL _accept
    TEST eax, eax
    MOV ebp, eax
    JS loc_431828
loc_431478:
    MOV edi, eax
    CALL sub_53AB90
    MOV rdi, qword ptr cs:buf.c_cc+1Fh
    CALL _free
    MOV edi, cs:buf.c_iflag
    MOV qword ptr cs:buf.c_cc+1Fh, 0
    CMP edi, 1
    JG loc_431757
loc_4314A5:
    MOV cs:buf.c_iflag, 0FFFFFFFFh
loc_4314AF:
    MOV rsi, r13
    MOV edi, 303531h
    CALL sub_430A50
    MOV rdi, r12
    CALL _free
    MOV esi, ebx
    MOV edi, ebp
    CALL sub_40D730
    MOV edi, ebp
    MOV r12, rax
    CALL _close
    TEST r12, r12
    JS loc_43179F
loc_4314E0:
    MOV edx, 1Ah
    MOV esi, offset qword_78D278
    MOV edi, 1
    MOV dword ptr cs:qword_78D278, 20363232h
    CALL sub_40C670
    CMP dword ptr cs:buf.c_line, 1
    JBE loc_431560
loc_431507:
    MOVZX eax, byte ptr cs:qword_78D278
    CMP al, 0Dh
    JBE loc_43177B
loc_431516:
    XOR esi, esi
loc_431518:
    MOV edi, 2401h
    MOV edx, 1
    NOP word ptr [rax+rax+00h]
loc_431528:
    ADD rsi, 1
    MOVZX ecx, byte ptr ds:qword_78D278[rsi]
    MOV rax, rdi
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    CMP cl, 0Dh
    CMOVA eax, edx
    TEST al, al
    JNZ loc_431528
loc_43154A:
    MOV edx, offset qword_78D278
    MOV edi, offset aS_5
    XOR eax, eax
    CALL sub_40AC80
    NOP dword ptr [rax+rax+00h]
loc_431560:
    MOV edi, ebx
    CALL _close
    MOV cs:buf.c_oflag, 0
loc_431571:
    MOV rax, [rsp+0C8h+var_30]
    XOR rax, fs:28h
    JNZ loc_431907
loc_431588:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4315A0:
    MOV rdi, r12
    CALL _free
    MOV edx, 0Bh
    MOV esi, 78D294h
    MOV edi, 1
    MOV dword ptr cs:qword_78D290+4, 20333535h
    CALL sub_40C670
    MOV edx, dword ptr cs:buf.c_line
    TEST edx, edx
    JZ loc_431560
loc_4315D0:
    MOVZX eax, byte ptr cs:qword_78D290+4
    CMP al, 0Dh
    JA loc_4315EA
loc_4315DB:
    MOV edx, 2401h
    BT rdx, rax
    JB loc_431798
loc_4315EA:
    XOR esi, esi
    MOV edi, 2401h
    MOV edx, 1
    NOP word ptr [rax+rax+00000000h]
loc_431600:
    ADD rsi, 1
    MOVZX ecx, byte ptr [rsi+78D294h]
    MOV rax, rdi
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    CMP cl, 0Dh
    CMOVA eax, edx
    TEST al, al
    JNZ loc_431600
loc_431622:
    XOR eax, eax
    MOV edx, 78D294h
    MOV edi, offset aS_5
    CALL sub_40AC80
    TEST ebx, ebx
    JNS loc_431560
loc_43163B:
    JMP loc_431571
loc_431640:
    MOV ebx, 0FFFFFFFFh
    XOR r12d, r12d
loc_431648:
    MOV rdi, r12
    CALL _free
    MOV edx, 0Bh
    MOV esi, 78D294h
    MOV edi, 1
    MOV dword ptr cs:qword_78D290+4, 20333535h
    CALL sub_40C670
    MOV eax, dword ptr cs:buf.c_line
    TEST eax, eax
    JZ loc_431571
loc_43167C:
    JMP loc_4315D0
loc_431688:
    MOV edi, offset aFileUniqXxxxxx
    CALL sub_40C290
    LEA rdi, [rax+7]
    MOV r12, rax
    CALL _mkstemp64
    MOV ebx, eax
    JMP loc_431407
loc_4316A8:
    CMP qword ptr cs:buf.c_cc+1Fh, 0
    JNZ loc_4313BF
loc_4316B6:
    MOV esi, offset a425UsePortPasv
    MOV edi, 1
    CALL sub_40C6B0
    CMP dword ptr cs:buf.c_line, 1
    JBE loc_431571
loc_4316D2:
    XOR esi, esi
    MOV edi, 2401h
    MOV edx, 1
    XCHG ax, ax
loc_4316E0:
    ADD rsi, 1
    MOVZX ecx, byte ptr ds:a425UsePortPasv[rsi]
    MOV rax, rdi
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    CMP cl, 0Dh
    CMOVA eax, edx
    TEST al, al
    JNZ loc_4316E0
loc_431702:
    MOV edx, offset a425UsePortPasv
    MOV edi, offset aS_5
    CALL sub_40AC80
    JMP loc_431571
loc_431716:
    XOR edx, edx
    MOV rsi, rbp
    MOV edi, ebx
    CALL sub_40C720
    JMP loc_431449
loc_431727:
    MOV rdi, qword ptr cs:buf.c_cc+1Fh
    CALL sub_53B4F0
    MOV rdi, qword ptr cs:buf.c_cc+1Fh
    MOV ebp, eax
    CALL _free
    MOV edi, cs:buf.c_iflag
    MOV qword ptr cs:buf.c_cc+1Fh, 0
    CMP edi, 1
    JLE loc_43175C
loc_431757:
    CALL _close
loc_43175C:
    TEST ebp, ebp
    MOV cs:buf.c_iflag, 0FFFFFFFFh
    JNS loc_4314AF
loc_43176E:
    MOV rdi, r12
    CALL _free
    JMP loc_431560
loc_43177B:
    MOV edx, 2401h
    XOR esi, esi
    BT rdx, rax
    JNB loc_431518
loc_43178C:
    JMP loc_43154A
loc_431798:
    XOR esi, esi
    JMP loc_431622
loc_43179F:
    MOV edx, 0Bh
    MOV esi, 78D294h
    MOV edi, 1
    MOV dword ptr cs:qword_78D290+4, 20313534h
    CALL sub_40C670
    MOV ecx, dword ptr cs:buf.c_line
    TEST ecx, ecx
    JZ loc_431560
loc_4317CB:
    MOVZX eax, byte ptr cs:qword_78D290+4
    CMP al, 0Dh
    JBE loc_431888
loc_4317DA:
    XOR esi, esi
loc_4317DC:
    MOV edi, 2401h
    MOV edx, 1
    NOP word ptr [rax+rax+00000000h]
loc_4317F0:
    ADD rsi, 1
    MOVZX ecx, byte ptr [rsi+78D294h]
    MOV rax, rdi
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    CMP cl, 0Dh
    CMOVA eax, edx
    TEST al, al
    JNZ loc_4317F0
loc_431812:
    MOV edx, 78D294h
    MOV edi, offset aS_5
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_431560
loc_431828:
    MOV esi, 78D294h
    MOV edx, 0Bh
    MOV edi, 1
    MOV dword ptr cs:qword_78D290+4, 20353234h
    CALL sub_40C670
    MOV esi, dword ptr cs:buf.c_line
    TEST esi, esi
    JNZ loc_4318A0
loc_431850:
    MOV rdi, qword ptr cs:buf.c_cc+1Fh
    CALL _free
    MOV edi, cs:buf.c_iflag
    MOV qword ptr cs:buf.c_cc+1Fh, 0
    CMP edi, 1
    JG loc_431757
loc_431876:
    MOV cs:buf.c_iflag, 0FFFFFFFFh
    JMP loc_43176E
loc_431888:
    MOV edx, 2401h
    XOR esi, esi
    BT rdx, rax
    JNB loc_4317DC
loc_431899:
    JMP loc_431812
loc_4318A0:
    MOVZX eax, byte ptr cs:qword_78D290+4
    CMP al, 0Dh
    JBE loc_4318F8
loc_4318AB:
    XOR esi, esi
loc_4318AD:
    MOV edi, 2401h
    MOV edx, 1
    NOP word ptr [rax+rax+00000000h]
loc_4318C0:
    ADD rsi, 1
    MOVZX ecx, byte ptr [rsi+78D294h]
    MOV rax, rdi
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    CMP cl, 0Dh
    CMOVA eax, edx
    TEST al, al
    JNZ loc_4318C0
loc_4318E2:
    MOV edx, 78D294h
    MOV edi, offset aS_5
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_431850
loc_4318F8:
    MOV edx, 2401h
    XOR esi, esi
    BT rdx, rax
    JNB loc_4318AD
loc_431905:
    JMP loc_4318E2
loc_431907:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Sorting', 'inferred_category': 'Algorithmic'}

##### Q 107 - init_text_buffer
```assembly
loc_4D3D50:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOV rbx, cs:qword_7431F0
    MOV rdi, [rbx]
    CALL _free
    MOV edi, 2800h
    MOV dword ptr [rbx+18h], 2800h
    CALL sub_40AD10
    MOV rdi, [rbx+50h]
    MOV [rbx], rax
    MOV rsi, rax
    MOV [rbx+8], rax
    MOV [rbx+10h], rax
    MOV [rbx+58h], rax
    CMP rdi, rbp
    JZ loc_4D3DA8
loc_4D3D94:
    CALL _free
    MOV rdi, rbp
    CALL sub_40AD40
    MOV rsi, [rbx]
    MOV [rbx+50h], rax
loc_4D3DA8:
    MOV rdi, rbp
    MOV edx, 1
    CALL sub_4D2020
    TEST eax, eax
    MOV ebp, eax
    JNS loc_4D3DCF
loc_4D3DBB:
    JMP loc_4D3E28
loc_4D3DC0:
    MOV rax, [rdi]
    MOV [rbx+16D0h], rax
    CALL _free
loc_4D3DCF:
    MOV rdi, [rbx+16D0h]
    TEST rdi, rdi
    JNZ loc_4D3DC0
loc_4D3DDB:
    LEA rdi, [rbx+1A0h]
    MOV dword ptr [rbx+20h], 0
    MOV dword ptr [rbx+24h], 0FFFFFFFFh
    MOV qword ptr [rbx+198h], 0
    MOV qword ptr [rbx+270h], 0
    XOR eax, eax
    AND rdi, 0FFFFFFFFFFFFFFF8h
    SUB ebx, edi
    LEA ecx, [rbx+278h]
    SHR ecx, 3
    REP 
    ADD rsp, 8
    MOV eax, ebp
    POP rbx
    POP rbp
    RETN 
loc_4D3E28:
    MOV rdi, [rbx]
    XOR edx, edx
    MOV esi, 0Ah
    CALL sub_4D3A40
    JMP loc_4D3DCF
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 107 - init_text_buffer
```assembly
loc_518670:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOV rbx, cs:qword_78D1F0
    MOV rdi, [rbx]
    CALL _free
    MOV edi, 2800h
    MOV dword ptr [rbx+18h], 2800h
    CALL sub_40C260
    MOV rdi, [rbx+50h]
    MOV [rbx], rax
    MOV rsi, rax
    MOV [rbx+8], rax
    MOV [rbx+10h], rax
    MOV [rbx+58h], rax
    CMP rdi, rbp
    JZ loc_5186C8
loc_5186B4:
    CALL _free
    MOV rdi, rbp
    CALL sub_40C290
    MOV rsi, [rbx]
    MOV [rbx+50h], rax
loc_5186C8:
    MOV rdi, rbp
    MOV edx, 1
    CALL sub_515AE0
    TEST eax, eax
    MOV ebp, eax
    JNS loc_5186EF
loc_5186DB:
    JMP loc_518748
loc_5186E0:
    MOV rax, [rdi]
    MOV [rbx+16D0h], rax
    CALL _free
loc_5186EF:
    MOV rdi, [rbx+16D0h]
    TEST rdi, rdi
    JNZ loc_5186E0
loc_5186FB:
    LEA rdi, [rbx+1A0h]
    MOV dword ptr [rbx+20h], 0
    MOV dword ptr [rbx+24h], 0FFFFFFFFh
    MOV qword ptr [rbx+198h], 0
    MOV qword ptr [rbx+270h], 0
    XOR eax, eax
    AND rdi, 0FFFFFFFFFFFFFFF8h
    SUB ebx, edi
    LEA ecx, [rbx+278h]
    SHR ecx, 3
    REP 
    ADD rsp, 8
    MOV eax, ebp
    POP rbx
    POP rbp
    RETN 
loc_518748:
    MOV rdi, [rbx]
    XOR edx, edx
    MOV esi, 0Ah
    CALL sub_518200
    JMP loc_5186EF
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Comparison', 'inferred_category': 'Utility/Helper'}

##### Q 108 - die_if_ferror_stdout
```assembly
loc_40B0E0:
    MOV rax, cs:stdout
    TEST byte ptr [rax], 20h
    JNZ loc_40B0EE
loc_40B0EC:
    REP 
loc_40B0EE:
    PUSH rax
    MOV esi, offset aStandardOutput
    MOV edi, offset aSIOError
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching', 'FunctionCall', 'SimdInstruction', 'UnconditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['5', '-2', '74h', '78h', '340h', '360h', '8', '34h', '44h', '48h', 'A8h', 'E0h', 'E8h', 'ECh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallelism via OpenMP', 'inferred_category': 'Compute/Execution'}

##### T 108 - die_if_ferror_stdout
```assembly
loc_40C7B0:
    MOV rax, cs:stdout
    TEST byte ptr [rax], 20h
    JNZ loc_40C7BE
loc_40C7BC:
    REP 
loc_40C7BE:
    PUSH rax
    MOV esi, offset aStandardOutput
    MOV edi, offset aSIOError
    XOR eax, eax
    CALL sub_40ABE0
```
None

##### Q 109 - unpack_bz2_stream
```assembly
loc_4A83C0:
    PUSH r15
    PUSH r14
    MOV esi, 5A42h
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    SUB rsp, 28h
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    CALL sub_4AF020
    TEST eax, eax
    JNZ loc_4A850A
loc_4A83FA:
    MOV edi, 1000h
    XOR ebp, ebp
    CALL sub_40ACD0
    MOV rbx, rax
    LEA rax, [rax+2]
    XOR ecx, ecx
    MOV [rsp+58h+var_50], rax
loc_4A8414:
    MOV esi, [r13+10h]
    MOV rdx, [rsp+58h+var_50]
    LEA rdi, [rsp+58h+ptr]
    CALL sub_4A82A0
    TEST eax, eax
    MOV r12d, eax
    JZ loc_4A84A3
loc_4A842E:
    CMP r12d, 0FFFFFFFFh
    JNZ loc_4A85B8
loc_4A8438:
    MOV r15, [rsp+58h+ptr]
    MOV eax, [r15+38h]
    CMP [r15+34h], eax
    JNZ loc_4A857B
loc_4A844B:
    MOVSXD rsi, dword ptr [r15+14h]
    MOV r12d, [r15+10h]
    MOV rdi, rbx
    SUB r12d, esi
    ADD rsi, [r15+18h]
    MOV r14d, r12d
    MOV rdx, r14
    CALL _memcpy
    CMP r12d, 1
    JBE loc_4A8530
loc_4A8472:
    CMP word ptr [rbx], 5A42h
    JNZ loc_4A8560
loc_4A847D:
    MOV rdi, [r15+40h]
    CALL _free
    MOV rdi, r15
    CALL _free
    LEA ecx, [r12-2]
    JMP loc_4A8414
loc_4A84A0:
    ADD rbp, r12
loc_4A84A3:
    MOV rdi, [rsp+58h+ptr]
    MOV edx, 1000h
    MOV rsi, rbx
    CALL sub_4A8120
    TEST eax, eax
    MOV r12d, eax
    JS loc_4A842E
loc_4A84C0:
    MOV eax, 1000h
    SUB eax, r12d
    MOVSXD r12, eax
    JZ loc_4A8438
loc_4A84D1:
    MOV rdx, r12
    MOV rsi, rbx
    MOV rdi, r13
    CALL sub_4AF0B0
    CMP r12, rax
    JZ loc_4A84A0
loc_4A84E4:
    MOV rbp, 0FFFFFFFFFFFFFFFCh
loc_4A84EB:
    MOV r12, [rsp+58h+ptr]
    MOV rdi, [r12+40h]
    CALL _free
    MOV rdi, r12
    CALL _free
    MOV rdi, rbx
    CALL _free
loc_4A850A:
    MOV rcx, [rsp+58h+var_40]
    XOR rcx, fs:28h
    MOV rax, rbp
    JNZ loc_4A85CF
loc_4A8521:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4A8530:
    MOV eax, 2
    MOV edi, [r13+10h]
    LEA rsi, [rbx+r14]
    SUB eax, r12d
    MOV r12, rax
    MOV rdx, rax
    CALL sub_40BE10
    CMP rax, r12
    MOV r15, [rsp+58h+ptr]
    JNZ loc_4A8560
loc_4A8555:
    MOV r12d, 2
    JMP loc_4A8472
loc_4A8560:
    MOV rdi, [r15+40h]
    CALL _free
    MOV rdi, r15
    CALL _free
    MOV rdi, rbx
    CALL _free
    JMP loc_4A850A
loc_4A857B:
    XOR eax, eax
    MOV edi, offset aCrcError_0
    CALL sub_40A280
    MOV r13, [rsp+58h+ptr]
    MOV rdi, [r13+40h]
    CALL _free
    MOV rdi, r13
    CALL _free
    MOV rdi, rbx
    CALL _free
    TEST r12d, r12d
    MOV r12, 0FFFFFFFFFFFFFFFFh
    CMOVNZ rbp, r12
    JMP loc_4A850A
loc_4A85B8:
    MOV esi, r12d
    MOV edi, offset unk_5189EE
    XOR eax, eax
    CALL sub_40A280
    MOVSXD rbp, r12d
    JMP loc_4A84EB
loc_4A85CF:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x22', '0x26', '0x1018', '0x40', '0x70E349'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### T 109 - unpack_bz2_stream
```assembly
loc_4D89F0:
    PUSH r15
    PUSH r14
    MOV esi, 5A42h
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    MOV rbx, 0FFFFFFFFFFFFFFFFh
    SUB rsp, 38h
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    CALL sub_4E6400
    TEST eax, eax
    JNZ loc_4D8C8B
loc_4D8A2A:
    MOV edi, 1000h
    CALL sub_40C220
    LEA r13, [rax+2]
    MOV rbp, rax
    XOR ecx, ecx
    MOV [rsp+68h+var_60], 0
loc_4D8A46:
    MOV esi, [r12+10h]
    LEA rdi, [rsp+68h+ptr]
    MOV rdx, r13
    CALL sub_4D8820
    TEST eax, eax
    MOV r15d, eax
    JZ loc_4D8B0A
loc_4D8A63:
    CMP r15d, 0FFFFFFFFh
    JNZ loc_4D8D85
loc_4D8A6D:
    MOV rbx, 0FFFFFFFFFFFFFFFFh
loc_4D8A74:
    MOV r14, [rsp+68h+ptr]
    MOV eax, [r14+38h]
    CMP [r14+34h], eax
    JNZ loc_4D8D4C
loc_4D8A87:
    MOVSXD rsi, dword ptr [r14+14h]
    MOV ebx, [r14+10h]
    MOV rdi, rbp
    SUB ebx, esi
    ADD rsi, [r14+18h]
    MOV r15d, ebx
    MOV rdx, r15
    CALL _memcpy
    CMP ebx, 1
    JBE loc_4D8CB8
loc_4D8AAC:
    CMP word ptr [rbp+0], 5A42h
    JNZ loc_4D8D29
loc_4D8AB8:
    MOV rdi, [r14+40h]
    CALL _free
    MOV rdi, r14
    CALL _free
    LEA ecx, [rbx-2]
    JMP loc_4D8A46
loc_4D8AD8:
    ADD dword ptr [rbx+20h], 1
    MOV [rbx+24h], edx
    MOV r15d, 1000h
    MOV [rbx+30h], r11d
    MOV [rbx+3Ch], edi
    MOV edx, 1000h
loc_4D8AF1:
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_4E6490
    CMP rax, r15
    JNZ loc_4D8C65
loc_4D8B05:
    ADD [rsp+68h+var_60], r15
loc_4D8B0A:
    MOV rbx, [rsp+68h+ptr]
    MOV r15d, [rbx+2Ch]
    TEST r15d, r15d
    JS loc_4D8A63
loc_4D8B1C:
    MOV eax, [rbx+20h]
    MOV r14, [rbx+40h]
    TEST eax, eax
    JZ loc_4D8BF0
loc_4D8B2B:
    MOV edx, [rbx+24h]
    MOV r11d, [rbx+30h]
    MOV rcx, rbp
    MOV edi, [rbx+3Ch]
    MOV r8d, 0FFFh
loc_4D8B3E:
    SUB eax, 1
    MOV [rbx+20h], eax
loc_4D8B44:
    TEST r8d, r8d
    JS loc_4D8AD8
loc_4D8B49:
    MOV eax, edi
    SHR edi, 18h
    MOV [rcx], r11b
    XOR edi, r11d
    SHL eax, 8
    LEA r10, [rcx+1]
    XOR eax, [rbx+rdi*4+118h]
    MOV edi, eax
    MOV eax, [rbx+20h]
    TEST eax, eax
    JNZ loc_4D8BE0
loc_4D8B6B:
    MOV eax, [rbx+2Ch]
    LEA esi, [rax-1]
    JMP loc_4D8BA4
loc_4D8B78:
    MOVSXD rdx, edx
    MOV edx, [r14+rdx*4]
    MOVZX eax, dl
    SAR edx, 8
    SUB dword ptr [rbx+28h], 1
    JNZ loc_4D8CF0
loc_4D8B8F:
    SUB esi, 1
    TEST eax, eax
    MOV [rbx+20h], eax
    MOV dword ptr [rbx+28h], 5
    JNZ loc_4D8D10
loc_4D8BA4:
    TEST esi, esi
    MOV [rbx+2Ch], esi
    JNS loc_4D8B78
loc_4D8BAB:
    MOV eax, [rbx+38h]
    NOT edi
    MOV [rbx+3Ch], edi
    ROL eax, 1
    XOR eax, edi
    MOV [rbx+38h], eax
    MOV eax, [rbx+34h]
    CMP edi, eax
    JZ loc_4D8BF9
loc_4D8BC1:
    ADD eax, 1
    MOV [rbx+38h], eax
    MOV rbx, 0FFFFFFFFFFFFFFFFh
    MOV r15d, ebx
    JMP loc_4D8A74
loc_4D8BE0:
    SUB r8d, 1
    MOV rcx, r10
    JMP loc_4D8B3E
loc_4D8BF0:
    MOV r10, rbp
    MOV r8d, 1000h
loc_4D8BF9:
    MOV rdi, rbx
    MOV [rsp+68h+var_4C], r8d
    MOV [rsp+68h+var_58], r10
    CALL sub_4D7CC0
    TEST eax, eax
    MOV r15d, eax
    MOV r10, [rsp+68h+var_58]
    MOV r8d, [rsp+68h+var_4C]
    JZ loc_4D8C48
loc_4D8C1C:
    CMP eax, 0FFFFFFFFh
    MOV [rbx+2Ch], eax
    JZ loc_4D8C60
loc_4D8C24:
    TEST eax, eax
    JS loc_4D8D85
loc_4D8C2C:
    MOV eax, 1000h
    SUB eax, r15d
    MOVSXD r15, eax
    JZ loc_4D8D22
loc_4D8C3D:
    MOV rdx, r15
    JMP loc_4D8AF1
loc_4D8C48:
    MOV edx, [rbx+24h]
    MOV r11d, [rbx+30h]
    MOV edi, 0FFFFFFFFh
    JMP loc_4D8B6B
loc_4D8C60:
    MOV r15d, r8d
    JMP loc_4D8C2C
loc_4D8C65:
    MOV rbx, 0FFFFFFFFFFFFFFFCh
loc_4D8C6C:
    MOV r12, [rsp+68h+ptr]
    MOV rdi, [r12+40h]
    CALL _free
    MOV rdi, r12
    CALL _free
    MOV rdi, rbp
    CALL _free
loc_4D8C8B:
    MOV rdi, [rsp+68h+var_40]
    XOR rdi, fs:28h
    MOV rax, rbx
    JNZ loc_4D8D9C
loc_4D8CA2:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4D8CB8:
    MOV eax, 2
    LEA rsi, [rbp+r15+0]
    MOV edi, eax
    SUB edi, ebx
    MOV rbx, rdi
    MOV edi, [r12+10h]
    MOV rdx, rbx
    CALL sub_40D7B0
    CMP rax, rbx
    MOV r14, [rsp+68h+ptr]
    JNZ loc_4D8D29
loc_4D8CE0:
    MOV ebx, 2
    JMP loc_4D8AAC
loc_4D8CF0:
    CMP eax, r11d
    JZ loc_4D8D16
loc_4D8CF5:
    MOV dword ptr [rbx+28h], 4
    SUB r8d, 1
    MOV r11d, eax
    MOV rcx, r10
    JMP loc_4D8B44
loc_4D8D10:
    SUB eax, 1
    MOV [rbx+20h], eax
loc_4D8D16:
    SUB r8d, 1
    MOV rcx, r10
    JMP loc_4D8B44
loc_4D8D22:
    XOR ebx, ebx
    JMP loc_4D8A74
loc_4D8D29:
    MOV rdi, [r14+40h]
    CALL _free
    MOV rdi, r14
    CALL _free
    MOV rdi, rbp
    CALL _free
    MOV rbx, [rsp+68h+var_60]
    JMP loc_4D8C8B
loc_4D8D4C:
    XOR eax, eax
    MOV edi, offset aCrcError_0
    CALL sub_40AC80
    MOV r12, [rsp+68h+ptr]
    MOV rdi, [r12+40h]
    CALL _free
    MOV rdi, r12
    CALL _free
    MOV rdi, rbp
    CALL _free
    TEST r15d, r15d
    CMOVZ rbx, [rsp+68h+var_60]
    JMP loc_4D8C8B
loc_4D8D85:
    MOV esi, r15d
    MOV edi, offset unk_5669AA
    XOR eax, eax
    CALL sub_40AC80
    MOVSXD rbx, r15d
    JMP loc_4D8C6C
loc_4D8D9C:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x22', '0x26', '0x40', '0x76FC0E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### Q 110 - colon
```assembly
loc_4D3E90:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 1C8h
    MOVZX r14d, byte ptr [rdi]
    MOV r12, cs:qword_7431F0
    MOV rax, fs:28h
    MOV [rsp+1F8h+var_40], rax
    XOR eax, eax
    TEST r14b, r14b
    JZ loc_4D4168
loc_4D3EC8:
    CMP r14b, 3Ah
    MOV rbp, rdi
    JZ loc_4D41F0
loc_4D3ED5:
    MOV r12, cs:qword_7431F0
    MOV [rsp+1F8h+var_1D0], 0FFFFFFFFh
    MOV [rsp+1F8h+var_1D4], 0FFFFFFFFh
    MOV rax, [r12+8]
    MOV rbx, [r12]
    LEA r13, [rax-1]
    MOV rdi, rbx
    MOV rsi, r13
    CALL sub_4D25F0
    MOV rax, [r12+50h]
    CMP r14b, 9
    MOV [rsp+1F8h+var_1F8], rax
    JZ loc_4D3F20
loc_4D3F13:
    CMP r14b, 20h
    JNZ loc_4D3F35
loc_4D3F19:
    NOP dword ptr [rax+00000000h]
loc_4D3F20:
    ADD rbp, 1
    MOVZX r14d, byte ptr [rbp+0]
    CMP r14b, 20h
    JZ loc_4D3F20
loc_4D3F2F:
    CMP r14b, 9
    JZ loc_4D3F20
loc_4D3F35:
    CMP r14b, 25h
    JZ loc_4D41D0
loc_4D3F3F:
    LEA rsi, [rsp+1F8h+var_1D4]
    MOV rdi, rbp
    CALL sub_4D2870
    MOV r15, rax
    MOVZX eax, byte ptr [rax]
    CMP al, 20h
    JNZ loc_4D3F6C
loc_4D3F56:
    NOP word ptr [rax+rax+00000000h]
loc_4D3F60:
    ADD r15, 1
    MOVZX eax, byte ptr [r15]
    CMP al, 20h
    JZ loc_4D3F60
loc_4D3F6C:
    CMP al, 9
    JZ loc_4D3F60
loc_4D3F70:
    CMP al, 2Ch
    JNZ loc_4D3FB4
loc_4D3F74:
    MOVZX eax, byte ptr [r15+1]
    LEA rdi, [r15+1]
    CMP al, 20h
    JNZ loc_4D3F93
loc_4D3F81:
    NOP dword ptr [rax+00000000h]
loc_4D3F88:
    ADD rdi, 1
    MOVZX eax, byte ptr [rdi]
    CMP al, 20h
    JZ loc_4D3F88
loc_4D3F93:
    CMP al, 9
    JZ loc_4D3F88
loc_4D3F97:
    LEA rsi, [rsp+1F8h+var_1D0]
    CALL sub_4D2870
    MOV r15, rax
    MOVZX eax, byte ptr [r15]
    CMP al, 20h
    JNZ loc_4D3FBC
loc_4D3FAC:
    NOP dword ptr [rax+00h]
loc_4D3FB0:
    ADD r15, 1
loc_4D3FB4:
    MOVZX eax, byte ptr [r15]
    CMP al, 20h
    JZ loc_4D3FB0
loc_4D3FBC:
    CMP al, 9
    JZ loc_4D3FB0
loc_4D3FC0:
    TEST al, 0DFh
    JZ loc_4D4450
loc_4D3FC8:
    LEA edx, [rax-9]
    LEA r14, [rsp+1F8h+s1]
    MOV rsi, r15
    CMP dl, 4
    MOV rdx, r14
    JA loc_4D3FE8
loc_4D3FDB:
    JMP loc_4D3FFA
loc_4D3FE0:
    LEA ecx, [rax-9]
    CMP cl, 4
    JBE loc_4D3FFA
loc_4D3FE8:
    ADD rdx, 1
    ADD rsi, 1
    MOV [rdx-1], al
    MOVZX eax, byte ptr [rsi]
    TEST al, 0DFh
    JNZ loc_4D3FE0
loc_4D3FFA:
    MOV byte ptr [rdx], 0
    MOVZX eax, byte ptr [rsi]
    CMP al, 20h
    JNZ loc_4D4013
loc_4D4004:
    NOP dword ptr [rax+00h]
loc_4D4008:
    ADD rsi, 1
    MOVZX eax, byte ptr [rsi]
    CMP al, 20h
    JZ loc_4D4008
loc_4D4013:
    CMP al, 9
    JZ loc_4D4008
loc_4D4017:
    LEA rdi, [rsp+1F8h+name]
    MOV edx, 80h
    CALL ___strcpy_chk
    MOV esi, 21h
    MOV rdi, r14
    CALL sub_409AE0
    TEST rax, rax
    JZ loc_4D4280
loc_4D403F:
    MOV byte ptr [rax], 0
    MOV dword ptr [rsp+1F8h+var_1F0], 1
loc_4D404A:
    MOV ebp, [rsp+1F8h+var_1D4]
    TEST ebp, ebp
    JS loc_4D4088
loc_4D4052:
    CMP ebp, 1
    MOV rbx, [r12]
    JLE loc_4D407D
loc_4D405B:
    MOV r13d, ebp
    MOV rax, rbx
    NOP dword ptr [rax+00000000h]
loc_4D4068:
    MOV rdi, rax
    SUB r13d, 1
    CALL sub_4D25A0
    CMP r13d, 1
    JNZ loc_4D4068
loc_4D407A:
    MOV rbx, rax
loc_4D407D:
    MOV rdi, rbx
    CALL sub_4D2560
    MOV r13, rax
loc_4D4088:
    MOV eax, [rsp+1F8h+var_1D0]
    TEST eax, eax
    MOV dword ptr [rsp+1F8h+n], eax
    JS loc_4D40BA
loc_4D4094:
    CMP eax, 1
    MOV rdi, [r12]
    JLE loc_4D40B2
loc_4D409D:
    MOV r13d, eax
loc_4D40A0:
    SUB r13d, 1
    CALL sub_4D25A0
    CMP r13d, 1
    MOV rdi, rax
    JNZ loc_4D40A0
loc_4D40B2:
    CALL sub_4D2560
    MOV r13, rax
loc_4D40BA:
    MOV rdx, r14
loc_4D40BD:
    MOV ecx, [rdx]
    ADD rdx, 4
    LEA eax, [rcx-1010101h]
    NOT ecx
    AND eax, ecx
    AND eax, 80808080h
    JZ loc_4D40BD
loc_4D40D4:
    MOV ecx, eax
    SHR ecx, 10h
    TEST eax, 8080h
    CMOVZ eax, ecx
    LEA rcx, [rdx+2]
    CMOVZ rdx, rcx
    MOV ecx, eax
    ADD cl, al
    SBB rdx, 3
    SUB rdx, r14
    TEST edx, edx
    MOVSXD r9, edx
    JZ loc_4D41A0
loc_4D40FF:
    MOVZX r10d, [rsp+1F8h+s1]
    CMP r10b, 21h
    JZ loc_4D42F5
loc_4D410F:
    CMP r10b, 3Dh
    JZ loc_4D4290
loc_4D4119:
    MOV eax, 7
    CMP r9, 7
    MOV edi, offset aDelete
    MOV rcx, rax
    MOV rsi, r14
    CMOVLE rcx, r9
    CMP rcx, rcx
    REPE 
    JNZ loc_4D41FE
loc_4D413C:
    TEST ebp, ebp
    JS loc_4D4347
loc_4D4144:
    MOV ecx, 1
    MOV edx, 1
    MOV rsi, r13
    MOV rdi, rbx
    CALL sub_4D3920
loc_4D4159:
    MOV [r12+10h], rax
    CALL sub_4D1690
    NOP dword ptr [rax+rax+00h]
loc_4D4168:
    MOV rdi, [r12+10h]
    CALL sub_4D3E40
    MOV [r12+10h], rax
loc_4D4177:
    MOV rax, [rsp+1F8h+var_40]
    XOR rax, fs:28h
    JNZ loc_4D4D7D
loc_4D418E:
    ADD rsp, 1C8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4D41A0:
    TEST ebp, ebp
    JS loc_4D4168
loc_4D41A4:
    CMP ebp, 1
    MOV rax, [r12]
    JLE loc_4D4159
loc_4D41AD:
    NOP dword ptr [rax]
loc_4D41B0:
    MOV rdi, rax
    SUB ebp, 1
    CALL sub_4D25A0
    CMP ebp, 1
    JNZ loc_4D41B0
loc_4D41C0:
    MOV [r12+10h], rax
    CALL sub_4D1690
    JMP loc_4D4168
loc_4D41D0:
    MOV rsi, r13
    MOV rdi, rbx
    MOV [rsp+1F8h+var_1D4], 1
    LEA r15, [rbp+1]
    CALL sub_4D25F0
    MOV [rsp+1F8h+var_1D0], eax
    JMP loc_4D3FB4
loc_4D41F0:
    MOVZX r14d, byte ptr [rdi+1]
    ADD rbp, 1
    JMP loc_4D3ED5
loc_4D41FE:
    MOV edx, 5
    CMP r9, 5
    MOV edi, offset aEdit
    MOV rcx, rdx
    MOV rsi, r14
    CMOVLE rcx, r9
    CMP rcx, rcx
    REPE 
    JNZ loc_4D42B6
loc_4D4221:
    MOV esi, [r12+20h]
    TEST esi, esi
    JZ loc_4D4246
loc_4D422A:
    MOV ecx, dword ptr [rsp+1F8h+var_1F0]
    TEST ecx, ecx
    JNZ loc_4D4246
loc_4D4232:
    MOV rsi, r14
    MOV edi, offset aNoWriteSinceLa
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4246:
    CMP [rsp+1F8h+name], 0
    JNZ loc_4D4367
loc_4D4254:
    MOV rax, [r12+50h]
    TEST rax, rax
    JZ loc_4D4267
loc_4D425E:
    CMP byte ptr [rax], 0
    JNZ loc_4D4373
loc_4D4267:
    MOV edi, offset aNoCurrentFilen
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4280:
    MOV dword ptr [rsp+1F8h+var_1F0], 0
    JMP loc_4D404A
loc_4D4290:
    CMP [rsp+1F8h+var_1C7], 0
    JNZ loc_4D4119
loc_4D429B:
    TEST ebp, ebp
    MOV esi, ebp
    JS loc_4D461E
loc_4D42A5:
    MOV edi, (offset aOckoptSD+0Bh)
    XOR eax, eax
    CALL sub_4D1E30
    JMP loc_4D4168
loc_4D42B6:
    CMP r9, 5
    MOV rcx, rdx
    MOV edi, 513E01h
    CMOVLE rcx, r9
    MOV rsi, r14
    CMP rcx, rcx
    REPE 
    JNZ loc_4D440B
loc_4D42D4:
    CMP dword ptr [rsp+1F8h+n], 0FFFFFFFFh
    JNZ loc_4D42E4
loc_4D42DB:
    CMP ebp, 0FFFFFFFFh
    JZ loc_4D463B
loc_4D42E4:
    MOV edi, offset aNoAddressAllow
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D42F5:
    LEA rbx, [r12+350h]
    CALL sub_4D32B0
    CALL sub_40B100
    MOV rdi, rbx
    CALL sub_40A9C0
    LEA rdi, [r15+1]
    CALL _system
    TEST eax, eax
    JNZ loc_4D43F3
loc_4D4320:
    MOV edx, 2
    MOV rsi, rbx
    XOR edi, edi
    CALL sub_40AAA0
    MOVZX eax, byte ptr [r12+363h]
    MOV [r12+74h], al
loc_4D433D:
    CALL sub_4D3580
    JMP loc_4D4168
loc_4D4347:
    MOV rbp, [r12+10h]
    MOV rdi, rbp
    CALL sub_4D26D0
    MOV rdi, rbp
    MOV rbx, rax
    CALL sub_4D2560
    MOV r13, rax
    JMP loc_4D4144
loc_4D4367:
    LEA rax, [rsp+1F8h+name]
    MOV [rsp+1F8h+var_1F8], rax
loc_4D4373:
    MOV rdi, [rsp+1F8h+var_1F8]
    CALL sub_4D3D50
    MOV ebp, eax
    MOVSXD rax, dword ptr [r12+0B4h]
    CMP eax, 1Bh
    JBE loc_4D45F8
loc_4D438F:
    MOVSXD rax, dword ptr [r12+0B0h]
    CMP eax, 1Bh
    JBE loc_4D45D2
loc_4D43A0:
    MOV r13, [r12+8]
    MOV rbx, [r12]
    LEA rsi, [r13-1]
    MOV rdi, rbx
    CALL sub_4D25F0
    CMP byte ptr [r12+1Dh], 0
    MOV edx, offset buf
    MOV ecx, offset aReadonly_0
    MOV rsi, [r12+50h]
    MOV r8d, eax
    MOV r9d, r13d
    MOV eax, offset aNewFile
    MOV edi, offset aSSSDlDc
    CMOVZ rcx, rdx
    TEST ebp, ebp
    CMOVS rdx, rax
    SUB r9d, ebx
    XOR eax, eax
    CALL sub_4D1E30
    JMP loc_4D4168
loc_4D43F3:
    MOV edx, eax
    MOV esi, offset aShellReturnedI
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4D4320
loc_4D440B:
    CMP r9, 9
    MOV ecx, 9
    MOV edi, 50F597h
    CMOVLE rcx, r9
    MOV rsi, r14
    CMP rcx, rcx
    REPE 
    JNZ loc_4D4460
loc_4D4427:
    LEA rbx, [r12+350h]
    CALL sub_4D32B0
    CALL sub_40B100
    MOV rdi, rbx
    CALL sub_40A9C0
    MOV edi, offset aTheseFeaturesA
    CALL _puts
    JMP loc_4D4320
loc_4D4450:
    LEA r14, [rsp+1F8h+s1]
    MOV rsi, r15
    MOV rdx, r14
    JMP loc_4D3FFA
loc_4D4460:
    CMP r9, 5
    MOV rcx, rdx
    MOV edi, 513C68h
    CMOVLE rcx, r9
    MOV rsi, r14
    CMP rcx, rcx
    REPE 
    JZ loc_4D44F4
loc_4D447A:
    CMP r9, 5
    MOV rcx, rdx
    MOV edi, offset aQuit_0
    CMOVLE rcx, r9
    MOV rsi, r14
    CMP rcx, rcx
    REPE 
    JZ loc_4D44CC
loc_4D4494:
    CMP r9, 5
    MOV rcx, rdx
    MOV edi, offset aNext
    CMOVLE rcx, r9
    MOV rsi, r14
    CMP rcx, rcx
    REPE 
    JZ loc_4D44CC
loc_4D44AE:
    CMP r9, 5
    MOV rcx, rdx
    MOV edi, offset aPrev
    CMOVLE rcx, r9
    MOV rsi, r14
    CMP rcx, rcx
    REPE 
    JNZ loc_4D46E4
loc_4D44CC:
    MOV edx, dword ptr [rsp+1F8h+var_1F0]
    TEST edx, edx
    JZ loc_4D4653
loc_4D44D8:
    CMP r10b, 71h
    JNZ loc_4D44E9
loc_4D44DE:
    MOV eax, [r12+28h]
    MOV cs:optind, eax
loc_4D44E9:
    MOV byte ptr [r12+1Eh], 0
    JMP loc_4D4168
loc_4D44F4:
    TEST ebp, ebp
    JS loc_4D46A3
loc_4D44FC:
    CALL sub_4D32B0
    MOV edi, (offset asc_516126+3)
    CALL _puts
    CMP rbx, r13
    JBE loc_4D452E
loc_4D4510:
    JMP loc_4D433D
loc_4D4518:
    MOVSX edi, bpl
    CALL sub_40B110
loc_4D4521:
    ADD rbx, 1
    CMP r13, rbx
    JB loc_4D433D
loc_4D452E:
    MOVZX ebp, byte ptr [rbx]
    TEST bpl, bpl
    JS loc_4D458D
loc_4D4536:
    CMP bpl, 0Ah
    JZ loc_4D4566
loc_4D453C:
    LEA eax, [rbp-20h]
    CMP al, 5Eh
    JBE loc_4D4518
loc_4D4543:
    MOV edi, 5Eh
    CALL sub_40B110
    CMP bpl, 7Fh
    MOV edi, 3Fh
    JZ loc_4D455F
loc_4D4558:
    ADD ebp, 40h
    MOVSX edi, bpl
loc_4D455F:
    CALL sub_40B110
    JMP loc_4D4521
loc_4D4566:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_51A47F
    CALL _fwrite_unlocked
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_4D4521
loc_4D458D:
    MOV rcx, cs:stdout
    MOV edx, 4
    MOV esi, 1
    MOV edi, offset a7m
    CALL _fwrite_unlocked
    MOV edi, 2Eh
    CALL sub_40B110
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset a7mSFileIOfIM+16h)
    CALL _fwrite_unlocked
    JMP loc_4D4521
loc_4D45D2:
    MOV rdi, [r12+rax*8+0B8h]
    CALL _free
    MOVSXD rax, dword ptr [r12+0B0h]
    MOV qword ptr [r12+rax*8+0B8h], 0
    JMP loc_4D43A0
loc_4D45F8:
    MOV rdi, [r12+rax*8+0B8h]
    CALL _free
    MOVSXD rax, dword ptr [r12+0B4h]
    MOV qword ptr [r12+rax*8+0B8h], 0
    JMP loc_4D438F
loc_4D461E:
    MOV rdi, [r12]
    MOV rsi, [r12+10h]
    CALL sub_4D25F0
    MOV esi, eax
    MOV [rsp+1F8h+var_1D0], eax
    MOV [rsp+1F8h+var_1D4], eax
    JMP loc_4D42A5
loc_4D463B:
    CMP [rsp+1F8h+name], 0
    JNZ loc_4D46C3
loc_4D4645:
    MOV dword ptr [r12+4Ch], 0
    JMP loc_4D4168
loc_4D4653:
    MOV eax, [r12+20h]
    TEST eax, eax
    JNZ loc_4D4232
loc_4D4660:
    MOV eax, cs:optind
    MOV esi, eax
    NOT esi
    ADD esi, [r12+28h]
    CMP r10b, 71h
    JZ loc_4D4828
loc_4D4679:
    CMP r10b, 6Eh
    JZ loc_4D4808
loc_4D4683:
    CMP r10b, 70h
    JNZ loc_4D44E9
loc_4D468D:
    TEST eax, eax
    JLE loc_4D4D6C
loc_4D4695:
    SUB eax, 2
    MOV cs:optind, eax
    JMP loc_4D44E9
loc_4D46A3:
    MOV rbp, [r12+10h]
    MOV rdi, rbp
    CALL sub_4D26D0
    MOV rdi, rbp
    MOV rbx, rax
    CALL sub_4D2560
    MOV r13, rax
    JMP loc_4D44FC
loc_4D46C3:
    MOV rdi, [r12+50h]
    CALL _free
    LEA rdi, [rsp+1F8h+name]
    CALL sub_40AD40
    MOV [r12+50h], rax
    JMP loc_4D4168
loc_4D46E4:
    CMP r9, 5
    MOV rcx, rdx
    MOV edi, offset aRead_0
    CMOVLE rcx, r9
    MOV rsi, r14
    CMP rcx, rcx
    REPE 
    JNZ loc_4D47C0
loc_4D4702:
    CMP [rsp+1F8h+name], 0
    JZ loc_4D4D5B
loc_4D4710:
    TEST ebp, ebp
    JS loc_4D4D49
loc_4D4718:
    JZ loc_4D4735
loc_4D471A:
    MOV rdi, rbx
    CALL sub_4D25A0
    MOV rbx, rax
    MOV rax, [r12+8]
    LEA rdx, [rax-1]
    CMP rbx, rdx
    CMOVZ rbx, rax
loc_4D4735:
    LEA rdi, [rsp+1F8h+name]
    XOR edx, edx
    MOV rsi, rbx
    MOV rbp, [r12]
    CALL sub_4D2020
    TEST eax, eax
    MOV r13d, eax
    JS loc_4D4168
loc_4D4756:
    SUB rbx, rbp
    ADD rbx, [r12]
    MOVSXD rbp, eax
    LEA rsi, [rbx+rbp-1]
    MOV rdi, rbx
    CALL sub_4D25F0
    CMP byte ptr [r12+1Dh], 0
    MOV ecx, offset aReadonly_0
    MOV edx, offset buf
    LEA rsi, [rsp+1F8h+name]
    MOV r8d, r13d
    MOV edi, offset aSSDlDc
    CMOVNZ rdx, rcx
    MOV ecx, eax
    XOR eax, eax
    CALL sub_4D1E30
    TEST r13d, r13d
    JZ loc_4D4168
loc_4D47A3:
    MOV rax, [r12+10h]
    CMP rbx, rax
    JA loc_4D4168
loc_4D47B1:
    ADD rbp, rax
    MOV [r12+10h], rbp
    JMP loc_4D4168
loc_4D47C0:
    CMP r9, 7
    MOV edi, offset aRewind_0
    MOV rsi, r14
    CMOVLE rax, r9
    MOV rcx, rax
    CMP rax, rax
    REPE 
    JNZ loc_4D4841
loc_4D47DA:
    CMP dword ptr [r12+20h], 0
    JZ loc_4D47ED
loc_4D47E2:
    CMP dword ptr [rsp+1F8h+var_1F0], 0
    JZ loc_4D4232
loc_4D47ED:
    MOV cs:optind, 0FFFFFFFFh
    MOV byte ptr [r12+1Eh], 0
    JMP loc_4D4168
loc_4D4808:
    TEST esi, esi
    JG loc_4D44E9
loc_4D4810:
    MOV edi, offset aNoMoreFilesToE
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4828:
    TEST esi, esi
    JLE loc_4D44E9
loc_4D4830:
    MOV edi, offset unk_51A487
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4841:
    CMP r9, 4
    MOV edx, 4
    MOV esi, offset aSet
    CMOVLE rdx, r9
    MOV rdi, r14
    MOV byte ptr [rsp+1F8h+var_1E0], r10b
    MOV [rsp+1F8h+n], r9
    CALL _strncmp
    TEST eax, eax
    MOV r9, [rsp+1F8h+n]
    MOVZX r10d, byte ptr [rsp+1F8h+var_1E0]
    JNZ loc_4D48E7
loc_4D4874:
    CMP [rsp+1F8h+name], 0
    JZ loc_4D4898
loc_4D487E:
    LEA rdi, [rsp+1F8h+name]
    MOV esi, (offset a11sAll+7)
    CALL _strcasecmp
    TEST eax, eax
    JNZ loc_4D4D82
loc_4D4898:
    MOVZX edi, byte ptr [r12+1Ch]
    MOV esi, offset buf
    MOV eax, (offset aNo+1)
    MOV r8, rsi
    MOV rcx, rsi
    MOV rdx, rsi
    MOV r9d, [r12+6Ch]
    TEST dil, 2
    CMOVZ r8, rax
    TEST dil, 4
    CMOVZ rcx, rax
    TEST dil, 8
    CMOVZ rdx, rax
    AND dil, 1
    MOV edi, offset aSautoindentSfl
    CMOVZ rsi, rax
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D48E7:
    CMP r10b, 73h
    JZ loc_4D4C04
loc_4D48F1:
    CMP r9, 8
    MOV edx, 8
    MOV esi, offset aVersion
    CMOVLE rdx, r9
    MOV rdi, r14
    MOV byte ptr [rsp+1F8h+var_1E0], r10b
    MOV [rsp+1F8h+n], r9
    CALL _strncmp
    TEST eax, eax
    MOV r9, [rsp+1F8h+n]
    MOVZX r10d, byte ptr [rsp+1F8h+var_1E0]
    JZ loc_4D4BF5
loc_4D4928:
    CMP r9, 6
    MOV edx, 6
    MOV esi, (offset aSmbusQuickWrit+0Ch)
    CMOVLE rdx, r9
    MOV rdi, r14
    MOV byte ptr [rsp+1F8h+var_1E0], r10b
    MOV [rsp+1F8h+n], r9
    CALL _strncmp
    TEST eax, eax
    MOVZX r10d, byte ptr [rsp+1F8h+var_1E0]
    JNZ loc_4D4A1C
loc_4D495A:
    CMP [rsp+1F8h+name], 0
    LEA rax, [rsp+1F8h+name]
    CMOVZ rax, [rsp+1F8h+var_1F8]
    CMP byte ptr [r12+1Dh], 0
    MOV [rsp+1F8h+var_1F8], rax
    JZ loc_4D4986
loc_4D497B:
    CMP dword ptr [rsp+1F8h+var_1F0], 0
    JZ loc_4D4E84
loc_4D4986:
    CMP dword ptr [r12+20h], 0
    JNZ loc_4D4998
loc_4D498E:
    CMP r10b, 78h
    JZ loc_4D4B8A
loc_4D4998:
    MOV rdi, [rsp+1F8h+var_1F8]
    MOV r14, r13
    MOV rdx, r13
    SUB r14, rbx
    MOV rsi, rbx
    ADD r14d, 1
    CALL sub_4D24D0
    TEST eax, eax
    MOV r13d, eax
    JS loc_4D4BD6
loc_4D49BC:
    MOVSXD rbp, eax
    MOV rdi, rbx
    LEA rsi, [rbx+rbp-1]
    CALL sub_4D25F0
    MOV rsi, [rsp+1F8h+var_1F8]
    MOV edx, eax
    MOV ecx, r13d
    XOR eax, eax
    MOV edi, offset aSDlDc
    CALL sub_4D1E30
    CMP r14d, r13d
    JNZ loc_4D4168
loc_4D49EA:
    CMP rbx, [r12]
    JZ loc_4D4BB1
loc_4D49F4:
    CMP [rsp+1F8h+s1], 78h
    JZ loc_4D44E9
loc_4D49FF:
    MOVZX eax, [rsp+1F8h+var_1C7]
    AND eax, 0FFFFFFDFh
    CMP al, 51h
    JZ loc_4D44E9
loc_4D4A0F:
    CMP al, 4Eh
    JNZ loc_4D4168
loc_4D4A17:
    JMP loc_4D44E9
loc_4D4A1C:
    MOV r9, [rsp+1F8h+n]
    MOV r15d, 3
    MOV esi, (offset aNeaapwq+6)
    MOV rdx, r15
    MOV rdi, r14
    MOV byte ptr [rsp+1F8h+var_1E0], r10b
    CMP r9, 3
    CMOVLE rdx, r9
    CALL _strncmp
    TEST eax, eax
    MOVZX r10d, byte ptr [rsp+1F8h+var_1E0]
    JZ loc_4D495A
loc_4D4A52:
    MOV r9, [rsp+1F8h+n]
    MOV rdx, r15
    MOV esi, (offset aDown_0+2)
    MOV rdi, r14
    MOV byte ptr [rsp+1F8h+var_1E0], r10b
    CMP r9, 3
    CMOVLE rdx, r9
    CALL _strncmp
    TEST eax, eax
    MOVZX r10d, byte ptr [rsp+1F8h+var_1E0]
    JZ loc_4D495A
loc_4D4A82:
    CMP r10b, 78h
    MOV r9, [rsp+1F8h+n]
    JZ loc_4D4B7A
loc_4D4A91:
    CMP r9, 5
    MOV edx, 5
    MOV esi, offset aYank
    CMOVLE rdx, r9
    MOV rdi, r14
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4D4B49
loc_4D4AB3:
    TEST ebp, ebp
    JNS loc_4D4AD2
loc_4D4AB7:
    MOV rbp, [r12+10h]
    MOV rdi, rbp
    CALL sub_4D26D0
    MOV rdi, rbp
    MOV rbx, rax
    CALL sub_4D2560
    MOV r13, rax
loc_4D4AD2:
    MOV edx, [r12+0B0h]
    MOV rsi, r13
    MOV rdi, rbx
    CALL sub_4D1700
    MOV rsi, r13
    MOV rdi, rbx
    CALL sub_4D25F0
    MOVSXD rdx, dword ptr [r12+0B0h]
    MOV esi, eax
    CMP edx, 19h
    LEA r8d, [rdx+61h]
    JBE loc_4D4B1A
loc_4D4B03:
    CMP edx, 1Ah
    JZ loc_4D4B72
loc_4D4B08:
    CMP edx, 1Bh
    MOV r8d, 44h
    MOV eax, 55h
    CMOVZ r8d, eax
loc_4D4B1A:
    MOV rdi, [r12+rdx*8+0B8h]
    XOR eax, eax
    OR rcx, 0FFFFFFFFFFFFFFFFh
    REPNE 
    MOV edi, offset aYankDLinesDCha
    MOV rax, rcx
    MOVSX ecx, r8b
    NOT rax
    LEA rdx, [rax-1]
    XOR eax, eax
    CALL sub_4D1E30
loc_4D4B44:
    JMP loc_4D4168
loc_4D4B49:
    LEA rdi, [rsp+1F8h+var_C8]
    MOV rsi, r14
    CALL sub_4D1D80
    LEA rsi, [rsp+1F8h+var_C8]
    MOV edi, offset aSIsNotImplemen
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4B72:
    MOV r8d, 44h
    JMP loc_4D4B1A
loc_4D4B7A:
    CMP [rsp+1F8h+var_1C7], 0
    JNZ loc_4D4A91
loc_4D4B85:
    JMP loc_4D495A
loc_4D4B8A:
    LEA rsi, [rbx-1]
    MOV rdi, rbx
    XOR ebp, ebp
    CALL sub_4D25F0
    MOV rsi, [rsp+1F8h+var_1F8]
    MOV edx, eax
    XOR ecx, ecx
    MOV edi, offset aSDlDc
    XOR eax, eax
    CALL sub_4D1E30
    JMP loc_4D49EA
loc_4D4BB1:
    ADD rbx, rbp
    CMP [r12+8], rbx
    JNZ loc_4D49F4
loc_4D4BBF:
    MOV dword ptr [r12+20h], 0
    MOV dword ptr [r12+24h], 0FFFFFFFFh
    JMP loc_4D49F4
loc_4D4BD6:
    ADD r13d, 1
    JNZ loc_4D4168
loc_4D4BE0:
    MOV rsi, [rsp+1F8h+var_1F8]
    MOV edi, offset aSM
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4BF5:
    MOV edi, 518761h
    CALL sub_4D1E30
    JMP loc_4D4168
loc_4D4C04:
    LEA rax, [r15+2]
    MOVSX r15d, byte ptr [r15+1]
    MOV rdi, rax
    MOV r14, rax
    MOV [rsp+1F8h+var_1F8], rax
    MOV esi, r15d
    CALL _strchr
    TEST rax, rax
    JZ loc_4D4E98
loc_4D4C28:
    MOV rbp, rax
    MOV byte ptr [rax], 0
    MOV esi, r15d
    SUB rbp, r14
    LEA r14, [rax+1]
    MOV rdi, r14
    CALL _strchr
    TEST rax, rax
    JZ loc_4D4E98
loc_4D4C49:
    MOV rcx, rax
    MOV byte ptr [rax], 0
    MOVZX eax, byte ptr [rax+1]
    SUB rcx, r14
    MOV rdi, rbx
    MOV [rsp+1F8h+var_1F0], rcx
    MOV byte ptr [rsp+1F8h+n], al
    CALL sub_4D26D0
    CMP [rsp+1F8h+var_1D4], 0
    MOV r13, rax
    JNS loc_4D4C8E
loc_4D4C71:
    MOV rdi, [r12+10h]
    CALL sub_4D26D0
    MOV rdi, [r12]
    MOV rsi, rax
    MOV r13, rax
    CALL sub_4D25F0
    MOV [rsp+1F8h+var_1D4], eax
loc_4D4C8E:
    MOV eax, [rsp+1F8h+var_1D0]
    MOV ebx, [rsp+1F8h+var_1D4]
    TEST eax, eax
    JS loc_4D4D40
loc_4D4C9E:
    CMP eax, ebx
    JL loc_4D4168
loc_4D4CA6:
    LEA rax, [rbp-1]
    MOV r15d, 1
    MOV [rsp+1F8h+var_1E0], rax
loc_4D4CB5:
    MOV rbp, r13
    JMP loc_4D4D08
loc_4D4CBA:
    MOV rax, [rsp+1F8h+var_1E0]
    MOV edx, r15d
    MOV rdi, r13
    LEA rsi, [r13+rax+0]
    CALL sub_4D1BC0
    MOV edx, 2
    MOV rsi, r14
    MOV rdi, r13
    CALL sub_4D2240
    ADD rbp, rax
    CMP byte ptr [rsp+1F8h+n], 67h
    JNZ loc_4D4EA9
loc_4D4CED:
    ADD rax, [rsp+1F8h+var_1F0]
    MOV rdi, rbp
    MOV r15d, 2
    ADD r13, rax
    CALL sub_4D2560
    CMP r13, rax
    JNB loc_4D4D23
loc_4D4D08:
    MOV rsi, [rsp+1F8h+var_1F8]
    XOR ecx, ecx
    MOV rdi, r13
    MOV edx, 1
    CALL sub_4D2740
    TEST rax, rax
    MOV r13, rax
    JNZ loc_4D4CBA
loc_4D4D23:
    MOV rdi, rbp
    ADD ebx, 1
    CALL sub_4D25A0
    CMP [rsp+1F8h+var_1D0], ebx
    MOV r13, rax
    JGE loc_4D4CB5
loc_4D4D3B:
    JMP loc_4D4168
loc_4D4D40:
    MOV [rsp+1F8h+var_1D0], ebx
    JMP loc_4D4CA6
loc_4D4D49:
    MOV rdi, [r12+10h]
    CALL sub_4D26D0
    MOV rbx, rax
    JMP loc_4D471A
loc_4D4D5B:
    MOV edi, offset aNoFilenameGive
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4D6C:
    MOV edi, offset aNoPreviousFile_0
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4D7D:
    CALL ___stack_chk_fail
loc_4D4D82:
    LEA rbx, [rsp+1F8h+name]
    XOR ebp, ebp
    MOV r15d, (offset aNo+1)
    MOV r14d, offset aTabstop
    MOV r13d, 2
    JMP loc_4D4DBC
loc_4D4DA0:
    MOV rdi, rbx
    CALL sub_409EC0
    MOV rdi, rax
    CALL sub_409E90
    CMP byte ptr [rax], 0
    MOV rbx, rax
    JZ loc_4D4168
loc_4D4DBC:
    MOV ecx, 2
    MOV rsi, rbx
    MOV rdi, r15
    REPE 
    MOV r8d, 1
    MOV ecx, offset aAi
    MOV esi, offset aAutoindent
    CMOVZ ebp, r13d
    MOV rdi, rbx
    MOV edx, ebp
    CALL sub_408B66
    MOV r8d, 8
    MOV ecx, offset aFl
    MOV edx, ebp
    MOV esi, offset aFlash
    MOV rdi, rbx
    CALL sub_408B66
    MOV r8d, 4
    MOV ecx, 511D80h
    MOV edx, ebp
    MOV esi, offset unk_51A511
    MOV rdi, rbx
    CALL sub_408B66
    MOV ecx, offset aSm
    MOV esi, offset aShowmatch
    MOV rdi, rbx
    MOV r8d, 2
    MOV edx, ebp
    CALL sub_408B66
    MOVSXD rax, ebp
    MOV ecx, 8
    MOV rdi, r14
    LEA rsi, [rbx+rax]
    REPE 
    JNZ loc_4D4DA0
loc_4D4E4C:
    LEA rdi, [rbx+rax+8]
    LEA rdx, [rsp+1F8h+var_1CC]
    XOR eax, eax
    MOV esi, (offset aU_5+2)
    MOV [rsp+1F8h+var_1CC], 0
    CALL _sscanf
    MOV eax, [rsp+1F8h+var_1CC]
    LEA edx, [rax-1]
    CMP edx, 1Fh
    JA loc_4D4DA0
loc_4D4E7A:
    MOV [r12+6Ch], eax
    JMP loc_4D4DA0
loc_4D4E84:
    MOV rsi, rax
    MOV edi, offset aSIsReadOnly_0
    XOR eax, eax
    CALL sub_4D1F10
    JMP loc_4D4168
loc_4D4E98:
    MOV edi, offset aSExpressionMis
    XOR eax, eax
    CALL sub_4D1E30
    JMP loc_4D4177
loc_4D4EA9:
    MOV r15d, 2
    JMP loc_4D4D23
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6D401C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'JumpTable'}

##### T 110 - colon
```assembly
loc_518840:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 1E8h
    MOVZX r14d, byte ptr [rdi]
    MOV rax, fs:28h
    MOV [rsp+218h+var_40], rax
    XOR eax, eax
    TEST r14b, r14b
    JZ loc_518FC0
loc_518871:
    CMP r14b, 3Ah
    MOV r15, rdi
    JZ loc_518FA8
loc_51887E:
    MOV rax, cs:qword_78D1F0
    MOV [rsp+218h+var_1D0], 0FFFFFFFFh
    MOV [rsp+218h+var_1D4], 0FFFFFFFFh
    MOV r13, [rax+8]
    MOV r12, [rax]
    MOV [rsp+218h+var_208], rax
    LEA rbx, [r13-1]
    CMP r12, rbx
    JA loc_519284
loc_5188AE:
    MOV rdi, r12
    MOV rbp, rbx
    JMP loc_5188C5
loc_5188C0:
    CMP rbx, rdi
    JB loc_5188F1
loc_5188C5:
    CMP rbx, rdi
    JBE loc_5188E8
loc_5188CA:
    MOV rdx, r13
    MOV esi, 0Ah
    SUB rdx, rdi
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, rbx
    MOV rdi, rax
loc_5188E8:
    ADD rdi, 1
    CMP rbp, rdi
    JNB loc_5188C0
loc_5188F1:
    MOV rax, cs:qword_78D1F0
    CMP r14b, 20h
    MOV rax, [rax+50h]
    MOV [rsp+218h+var_1F0], rax
    JNZ loc_51891E
loc_518907:
    NOP word ptr [rax+rax+00000000h]
loc_518910:
    ADD r15, 1
    MOVZX r14d, byte ptr [r15]
    CMP r14b, 20h
    JZ loc_518910
loc_51891E:
    CMP r14b, 9
    JZ loc_518910
loc_518924:
    CMP r14b, 25h
    JZ loc_518EF0
loc_51892E:
    LEA rsi, [rsp+218h+var_1D4]
    MOV rdi, r15
    CALL sub_515E10
    MOV rbp, rax
    MOVZX eax, byte ptr [rax]
    CMP al, 20h
    JNZ loc_518954
loc_518945:
    NOP dword ptr [rax]
loc_518948:
    ADD rbp, 1
    MOVZX eax, byte ptr [rbp+0]
    CMP al, 20h
    JZ loc_518948
loc_518954:
    CMP al, 9
    JZ loc_518948
loc_518958:
    CMP al, 2Ch
    JZ loc_519000
loc_518960:
    TEST al, 0DFh
    JZ loc_51951A
loc_518968:
    LEA edx, [rax-9]
    MOV rsi, rbp
    CMP dl, 4
    JBE loc_51952F
loc_518977:
    LEA rcx, [rsp+218h+var_1C8]
    MOV [rsp+218h+s1], rcx
    MOV rdx, rcx
    JMP loc_518998
loc_518990:
    LEA ecx, [rax-9]
    CMP cl, 4
    JBE loc_5189AA
loc_518998:
    ADD rdx, 1
    ADD rsi, 1
    MOV [rdx-1], al
    MOVZX eax, byte ptr [rsi]
    TEST al, 0DFh
    JNZ loc_518990
loc_5189AA:
    MOV byte ptr [rdx], 0
    MOVZX eax, byte ptr [rsi]
    CMP al, 20h
    JNZ loc_5189C3
loc_5189B4:
    NOP dword ptr [rax+00h]
loc_5189B8:
    ADD rsi, 1
    MOVZX eax, byte ptr [rsi]
    CMP al, 20h
    JZ loc_5189B8
loc_5189C3:
    CMP al, 9
    JZ loc_5189B8
loc_5189C7:
    LEA rdi, [rsp+218h+name]
    MOV edx, 80h
    CALL ___strcpy_chk
    MOV rdi, [rsp+218h+s1]
    MOV esi, 21h
    CALL sub_40A4C0
    TEST rax, rax
    JZ loc_519100
loc_5189F1:
    MOV byte ptr [rax], 0
    MOV [rsp+218h+var_1E4], 1
loc_5189FC:
    MOV r13d, [rsp+218h+var_1D4]
    TEST r13d, r13d
    JS loc_518A96
loc_518A0A:
    MOV rax, cs:qword_78D1F0
    CMP r13d, 1
    MOV r14, [rax+8]
    MOV r12, [rax]
    LEA r15, [r14-1]
    JLE loc_518A70
loc_518A22:
    MOV ebx, r13d
    MOV rax, r12
    NOP dword ptr [rax+rax+00000000h]
loc_518A30:
    CMP rax, r15
    JNB loc_518A65
loc_518A35:
    MOV rdx, r14
    MOV esi, 0Ah
    MOV rdi, rax
    SUB rdx, rax
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    JZ loc_518E30
loc_518A55:
    CMP rax, r15
    JNB loc_518A65
loc_518A5A:
    XOR edx, edx
    CMP byte ptr [rax], 0Ah
    SETZ dl
    ADD rax, rdx
loc_518A65:
    SUB ebx, 1
    CMP ebx, 1
    JNZ loc_518A30
loc_518A6D:
    MOV r12, rax
loc_518A70:
    CMP r12, r15
    MOV rbx, r12
    JNB loc_518A96
loc_518A78:
    SUB r14, r12
    MOV esi, 0Ah
    MOV rdi, r12
    LEA rdx, [r14-1]
    CALL _memchr
    MOV rbx, rax
    TEST rax, rax
    CMOVZ rbx, r15
loc_518A96:
    MOV eax, [rsp+218h+var_1D0]
    TEST eax, eax
    MOV dword ptr [rsp+218h+var_200], eax
    JS loc_518B42
loc_518AA6:
    MOV rcx, cs:qword_78D1F0
    CMP eax, 1
    MOV rbx, [rcx]
    MOV rax, [rcx+8]
    JLE loc_519276
loc_518ABD:
    MOV r14d, dword ptr [rsp+218h+var_200]
    MOV rcx, rax
    MOV [rsp+218h+var_1F8], rax
    LEA r15, [rax-1]
    MOV rax, rbx
    MOV rbx, rcx
    NOP dword ptr [rax+00h]
loc_518AD8:
    CMP rax, r15
    JNB loc_518B0D
loc_518ADD:
    MOV rdx, rbx
    MOV esi, 0Ah
    MOV rdi, rax
    SUB rdx, rax
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    JZ loc_518E20
loc_518AFD:
    CMP rax, r15
    JNB loc_518B0D
loc_518B02:
    XOR edx, edx
    CMP byte ptr [rax], 0Ah
    SETZ dl
    ADD rax, rdx
loc_518B0D:
    SUB r14d, 1
    CMP r14d, 1
    JNZ loc_518AD8
loc_518B17:
    MOV rbx, rax
loc_518B1A:
    CMP rbx, r15
    JNB loc_518B42
loc_518B1F:
    MOV r14, [rsp+218h+var_1F8]
    MOV rdi, rbx
    MOV esi, 0Ah
    SUB r14, rbx
    LEA rdx, [r14-1]
    CALL _memchr
    MOV rbx, rax
    TEST rax, rax
    CMOVZ rbx, r15
loc_518B42:
    MOV rdx, [rsp+218h+s1]
loc_518B47:
    MOV ecx, [rdx]
    ADD rdx, 4
    LEA eax, [rcx-1010101h]
    NOT ecx
    AND eax, ecx
    AND eax, 80808080h
    JZ loc_518B47
loc_518B5E:
    MOV ecx, eax
    SHR ecx, 10h
    TEST eax, 8080h
    CMOVZ eax, ecx
    LEA rcx, [rdx+2]
    CMOVZ rdx, rcx
    MOV ecx, eax
    ADD cl, al
    SBB rdx, 3
    SUB rdx, [rsp+218h+s1]
    TEST edx, edx
    MOVSXD r14, edx
    JNZ loc_518CD8
loc_518B8B:
    TEST r13d, r13d
    MOV rax, cs:qword_78D1F0
    JS loc_518EE0
loc_518B9B:
    MOV rcx, cs:qword_78D1F0
    CMP r13d, 1
    MOV rax, [rax]
    MOV r14, [rcx+8]
    JLE loc_518BF7
loc_518BAF:
    LEA rbx, [r14-1]
    NOP dword ptr [rax+rax+00h]
loc_518BB8:
    CMP rax, rbx
    JNB loc_518BED
loc_518BBD:
    MOV rdx, r14
    MOV esi, 0Ah
    MOV rdi, rax
    SUB rdx, rax
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    JZ loc_518FE0
loc_518BDD:
    CMP rax, rbx
    JNB loc_518BED
loc_518BE2:
    XOR edx, edx
    CMP byte ptr [rax], 0Ah
    SETZ dl
    ADD rax, rdx
loc_518BED:
    SUB r13d, 1
    CMP r13d, 1
    JNZ loc_518BB8
loc_518BF7:
    MOV rcx, cs:qword_78D1F0
    MOV [rcx+10h], rax
    MOVZX edx, byte ptr [rax]
    LEA ecx, [rdx-9]
    CMP cl, 17h
    SETZ sil
    CMP cl, 4
    SETBE cl
    OR sil, cl
    JZ loc_518FF0
loc_518C1E:
    CMP dl, 0Ah
    JZ loc_518FF0
loc_518C27:
    LEA rdx, [r14-1]
    CMP rax, rdx
    JNB loc_518FF0
loc_518C34:
    ADD rax, 1
    NOP dword ptr [rax+rax+00000000h]
loc_518C40:
    MOV rcx, cs:qword_78D1F0
    MOV rbx, rax
    MOV [rcx+10h], rax
    MOVZX ecx, byte ptr [rax]
    LEA edx, [rcx-9]
    CMP dl, 17h
    SETZ sil
    CMP dl, 4
    SETBE dl
    OR sil, dl
    JZ loc_518FF0
loc_518C6A:
    CMP cl, 0Ah
    JZ loc_518FF0
loc_518C73:
    ADD rax, 1
    CMP rax, r14
    JNZ loc_518C40
loc_518C7C:
    NOP dword ptr [rax+00h]
loc_518C80:
    MOV rax, [rsp+218h+var_208]
    CMP r14, rbx
    MOV rbp, [rax]
    JA loc_518C96
loc_518C8D:
    CMP rbp, r14
    JB loc_5190E0
loc_518C96:
    CMP rbx, rbp
    JNB loc_518CA3
loc_518C9B:
    MOV rbx, rbp
    CALL sub_5170E0
loc_518CA3:
    MOV rax, [rsp+218h+var_208]
    MOV [rax+10h], rbx
loc_518CAC:
    MOV rax, [rsp+218h+var_40]
    XOR rax, fs:28h
    JNZ loc_51A202
loc_518CC3:
    ADD rsp, 1E8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_518CD8:
    MOVZX r8d, [rsp+218h+var_1C8]
    CMP r8b, 21h
    JZ loc_519188
loc_518CE8:
    CMP r8b, 3Dh
    JZ loc_519110
loc_518CF2:
    MOV eax, 7
    CMP r14, 7
    MOV rsi, [rsp+218h+s1]
    MOV rcx, rax
    MOV edi, offset aDelete
    CMOVLE rcx, r14
    CMP rcx, rcx
    REPE 
    JNZ loc_519034
loc_518D17:
    TEST r13d, r13d
    JS loc_5192A0
loc_518D20:
    MOV r13, rbx
    MOV rbp, r12
loc_518D26:
    CMP r12, rbx
    JBE loc_519173
loc_518D2F:
    SUB ebp, r13d
loc_518D32:
    MOV rax, cs:qword_78D1F0
    TEST ebp, ebp
    MOV r14, rbx
    MOVSXD rax, dword ptr [rax+0B0h]
    JNS loc_518D4C
loc_518D47:
    NEG ebp
    MOV r14, r12
loc_518D4C:
    MOV rcx, cs:qword_78D1F0
    LEA r13, [rcx+rax*8]
    MOV rdi, [r13+0B8h]
    CALL _free
    LEA esi, [rbp+1]
    MOV rdi, r14
    CALL sub_40C2C0
    MOV edx, 1
    MOV rsi, r12
    MOV [r13+0B8h], rax
    MOV rdi, rbx
    CALL sub_517F40
    MOV rcx, cs:qword_78D1F0
    MOV [rcx+10h], rax
    MOVZX edx, byte ptr [rax]
    LEA ecx, [rdx-9]
    CMP cl, 17h
    SETZ sil
    CMP cl, 4
    SETBE cl
    OR sil, cl
    MOV rcx, cs:qword_78D1F0
    MOV r14, [rcx+8]
    JZ loc_518FF0
loc_518DB7:
    CMP dl, 0Ah
    JZ loc_518FF0
loc_518DC0:
    LEA rdx, [r14-1]
    CMP rax, rdx
    JNB loc_518FF0
loc_518DCD:
    ADD rax, 1
    NOP dword ptr [rax+00000000h]
loc_518DD8:
    MOV rcx, cs:qword_78D1F0
    MOV rbx, rax
    MOV [rcx+10h], rax
    MOVZX ecx, byte ptr [rax]
    LEA edx, [rcx-9]
    CMP dl, 17h
    SETZ sil
    CMP dl, 4
    SETBE dl
    OR sil, dl
    JZ loc_518FF0
loc_518E02:
    CMP cl, 0Ah
    JZ loc_518FF0
loc_518E0B:
    ADD rax, 1
    CMP r14, rax
    JNZ loc_518DD8
loc_518E14:
    JMP loc_518C80
loc_518E20:
    MOV rax, r15
    JMP loc_518B0D
loc_518E30:
    MOV rax, r15
    JMP loc_518A65
loc_518E38:
    CMP r14, 5
    MOV rcx, rdx
    MOV rsi, [rsp+218h+s1]
    CMOVLE rcx, r14
    MOV edi, 561D18h
    CMP rcx, rcx
    REPE 
    JZ loc_519568
loc_518E58:
    CMP r14, 5
    MOV rcx, rdx
    MOV rsi, [rsp+218h+s1]
    CMOVLE rcx, r14
    MOV edi, offset aQuit_0
    CMP rcx, rcx
    REPE 
    JZ loc_518EB0
loc_518E74:
    CMP r14, 5
    MOV rcx, rdx
    MOV rsi, [rsp+218h+s1]
    CMOVLE rcx, r14
    MOV edi, offset aNext
    CMP rcx, rcx
    REPE 
    JZ loc_518EB0
loc_518E90:
    CMP r14, 5
    MOV rcx, rdx
    MOV rsi, [rsp+218h+s1]
    CMOVLE rcx, r14
    MOV edi, offset aPrev
    CMP rcx, rcx
    REPE 
    JNZ loc_51996C
loc_518EB0:
    MOV ecx, [rsp+218h+var_1E4]
    TEST ecx, ecx
    JZ loc_519815
loc_518EBC:
    CMP r8b, 71h
    JNZ loc_518ED2
loc_518EC2:
    MOV rax, cs:qword_78D1F0
    MOV eax, [rax+28h]
    MOV cs:optind, eax
loc_518ED2:
    MOV rax, cs:qword_78D1F0
    MOV byte ptr [rax+1Eh], 0
    NOP dword ptr [rax]
loc_518EE0:
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_518EF0:
    CMP r12, rbx
    LEA rbp, [r15+1]
    MOV [rsp+218h+var_1D4], 1
    JA loc_51928F
loc_518F05:
    MOV rdi, r12
    MOV rax, rbx
loc_518F0B:
    XOR r14d, r14d
    MOV [rsp+218h+s1], rbp
    MOV ebp, r14d
    MOV r14, rbx
    MOV rbx, r13
    MOV r13, rax
    JMP loc_518F2D
loc_518F28:
    CMP r13, rdi
    JB loc_518F63
loc_518F2D:
    CMP r14, rdi
    JBE loc_518F50
loc_518F32:
    MOV rdx, rbx
    MOV esi, 0Ah
    SUB rdx, rdi
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, r14
    MOV rdi, rax
loc_518F50:
    XOR eax, eax
    CMP byte ptr [rdi], 0Ah
    SETZ al
    ADD rdi, 1
    ADD ebp, eax
    CMP r14, rdi
    JNB loc_518F28
loc_518F63:
    MOVZX eax, byte ptr [r15+1]
    MOV rbx, r14
    MOV r14d, ebp
    MOV rbp, [rsp+218h+s1]
    MOV [rsp+218h+var_1D0], r14d
loc_518F78:
    CMP al, 9
    SETZ cl
    CMP al, 20h
    SETZ dl
    OR edx, ecx
    TEST dl, dl
    JZ loc_518960
loc_518F8C:
    NOP dword ptr [rax+00h]
loc_518F90:
    ADD rbp, 1
    MOVZX eax, byte ptr [rbp+0]
    CMP al, 20h
    JZ loc_518F90
loc_518F9C:
    CMP al, 9
    JZ loc_518F90
loc_518FA0:
    JMP loc_518960
loc_518FA8:
    MOVZX r14d, byte ptr [rdi+1]
    ADD r15, 1
    JMP loc_51887E
loc_518FC0:
    MOV rax, cs:qword_78D1F0
    MOV [rsp+218h+var_208], rax
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_518FE0:
    MOV rax, rbx
    JMP loc_518BED
loc_518FF0:
    MOV rbx, rax
    JMP loc_518C80
loc_519000:
    MOVZX eax, byte ptr [rbp+1]
    LEA rdi, [rbp+1]
    CMP al, 20h
    JNZ loc_51901B
loc_51900C:
    NOP dword ptr [rax+00h]
loc_519010:
    ADD rdi, 1
    MOVZX eax, byte ptr [rdi]
    CMP al, 20h
    JZ loc_519010
loc_51901B:
    CMP al, 9
    JZ loc_519010
loc_51901F:
    LEA rsi, [rsp+218h+var_1D0]
    CALL sub_515E10
    MOV rbp, rax
    MOVZX eax, byte ptr [rax]
    JMP loc_518F78
loc_519034:
    MOV edx, 5
    CMP r14, 5
    MOV rsi, [rsp+218h+s1]
    MOV rcx, rdx
    MOV edi, offset aEdit
    CMOVLE rcx, r14
    CMP rcx, rcx
    REPE 
    JNZ loc_519138
loc_519059:
    MOV rax, cs:qword_78D1F0
    MOV r9d, [rax+20h]
    TEST r9d, r9d
    JZ loc_519090
loc_519069:
    MOV r8d, [rsp+218h+var_1E4]
    TEST r8d, r8d
    JNZ loc_519090
loc_519073:
    MOV rsi, [rsp+218h+s1]
    MOV edi, offset aNoWriteSinceLa
loc_51907D:
    XOR eax, eax
    CALL sub_5149B0
loc_519084:
    MOV rax, cs:qword_78D1F0
    JMP loc_518EE0
loc_519090:
    CMP [rsp+218h+name], 0
    JNZ loc_51931C
loc_51909E:
    MOV rax, cs:qword_78D1F0
    MOV rax, [rax+50h]
    TEST rax, rax
    JZ loc_5190B7
loc_5190AE:
    CMP byte ptr [rax], 0
    JNZ loc_519329
loc_5190B7:
    MOV edi, offset aNoCurrentFilen
loc_5190BC:
    XOR eax, eax
    CALL sub_5149B0
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_5190E0:
    CALL sub_5170E0
    MOV rax, [rsp+218h+var_208]
    LEA rbx, [r14-1]
    MOV rbp, [rax]
    JMP loc_518C96
loc_519100:
    MOV [rsp+218h+var_1E4], 0
    JMP loc_5189FC
loc_519110:
    CMP [rsp+218h+var_1C7], 0
    JNZ loc_518CF2
loc_51911B:
    TEST r13d, r13d
    MOV esi, r13d
    JS loc_519764
loc_519127:
    MOV edi, (offset aOckoptSD+0Bh)
    XOR eax, eax
    CALL sub_5148D0
    JMP loc_519084
loc_519138:
    CMP r14, 5
    MOV rcx, rdx
    MOV rsi, [rsp+218h+s1]
    CMOVLE rcx, r14
    MOV edi, 561E83h
    CMP rcx, rcx
    REPE 
    JNZ loc_519445
loc_519158:
    CMP r13d, 0FFFFFFFFh
    JNZ loc_519169
loc_51915E:
    CMP dword ptr [rsp+218h+var_200], 0FFFFFFFFh
    JZ loc_519870
loc_519169:
    MOV edi, offset aNoAddressAllow
    JMP loc_5190BC
loc_519173:
    MOV eax, r13d
    SUB eax, ebp
    MOV ebp, eax
    MOV rax, rbx
    MOV rbx, r12
    MOV r12, rax
    JMP loc_518D32
loc_519188:
    MOV rax, cs:qword_78D1F0
    MOV edx, 0
    LEA rdi, [rsp+218h+s]
    MOV esi, 1
    MOV ecx, [rax+30h]
    MOV eax, ecx
    SUB eax, 1
    CMOVNS edx, eax
    CMP ecx, edx
    MOV rcx, cs:qword_78D1F0
    CMOVA eax, edx
    XOR r9d, r9d
    MOV edx, 21h
    LEA r8d, [rax+1]
    MOV r10d, [rcx+34h]
    MOV ecx, offset aUUh
    TEST r10d, r10d
    SETNZ r9b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    LEA rdi, [rsp+218h+s]
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset aU0hK+7)
    CALL _fwrite_unlocked
    CALL sub_40C7D0
    MOV rax, cs:qword_78D1F0
    LEA rbx, [rax+350h]
    MOV rdi, rbx
    CALL sub_40BE60
    LEA rdi, [rbp+1]
    CALL _system
    TEST eax, eax
    JNZ loc_51942D
loc_519236:
    MOV edx, 2
    MOV rsi, rbx
    XOR edi, edi
    CALL sub_40BF40
    MOV rax, cs:qword_78D1F0
    MOV rcx, cs:qword_78D1F0
    MOVZX eax, byte ptr [rax+363h]
    MOV [rcx+74h], al
loc_51925D:
    CALL sub_516700
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519276:
    MOV [rsp+218h+var_1F8], rax
    LEA r15, [rax-1]
    JMP loc_518B1A
loc_519284:
    MOV rdi, rbx
    MOV rbp, r12
    JMP loc_5188C5
loc_51928F:
    MOV rdi, rbx
    MOV rax, r12
    JMP loc_518F0B
loc_5192A0:
    MOV rax, cs:qword_78D1F0
    MOV rbx, [rax+10h]
    MOV r12, [rax]
    CMP rbx, r12
    JBE loc_51954C
loc_5192B7:
    MOV rdx, rbx
    MOV esi, 0Ah
    MOV rdi, r12
    SUB rdx, r12
    MOV r13, rbx
    MOV rbp, r12
    CALL _memrchr
    TEST rax, rax
    JZ loc_5192DC
loc_5192D5:
    LEA r12, [rax+1]
    MOV rbp, r12
loc_5192DC:
    MOV rax, cs:qword_78D1F0
    MOV rax, [rax+8]
    LEA r14, [rax-1]
    CMP rbx, r14
    JNB loc_518D26
loc_5192F4:
    SUB rax, rbx
    MOV rdi, rbx
    MOV esi, 0Ah
    LEA rdx, [rax-1]
    CALL _memchr
    TEST rax, rax
    MOV rbx, rax
    JZ loc_519909
loc_519314:
    MOV r13, rbx
    JMP loc_518D26
loc_51931C:
    LEA rax, [rsp+218h+name]
    MOV [rsp+218h+var_1F0], rax
loc_519329:
    MOV rdi, [rsp+218h+var_1F0]
    CALL sub_518670
    MOV r14d, eax
    MOV rax, cs:qword_78D1F0
    MOVSXD rax, dword ptr [rax+0B4h]
    CMP eax, 1Bh
    JBE loc_51970F
loc_51934D:
    MOV rax, cs:qword_78D1F0
    MOVSXD rax, dword ptr [rax+0B0h]
    CMP eax, 1Bh
    JBE loc_5196D5
loc_519364:
    MOV rax, cs:qword_78D1F0
    MOV rbp, [rax+8]
    MOV r13, [rax]
    LEA r12, [rbp-1]
    CMP r12, r13
    JNB loc_519541
loc_51937F:
    MOV rdi, r12
    MOV rbx, r13
loc_519385:
    XOR r15d, r15d
    CMP r12, rdi
    JB loc_5193D4
loc_51938D:
    CMP rbx, rdi
    JNB loc_51939D
loc_519392:
    JMP loc_5193D4
loc_519398:
    CMP r12, rdi
    JB loc_5193D4
loc_51939D:
    CMP r12, rdi
    JBE loc_5193C0
loc_5193A2:
    MOV rdx, rbp
    MOV esi, 0Ah
    SUB rdx, rdi
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, r12
    MOV rdi, rax
loc_5193C0:
    XOR eax, eax
    CMP byte ptr [rdi], 0Ah
    SETZ al
    ADD rdi, 1
    ADD r15d, eax
    CMP rdi, rbx
    JBE loc_519398
loc_5193D4:
    MOV rcx, cs:qword_78D1F0
    MOV eax, offset data
    MOV edx, offset aNewFile
    MOV r9d, ebp
    MOV r8d, r15d
    MOV edi, offset aSSSDlDc
    CMP byte ptr [rcx+1Dh], 0
    MOV ecx, offset aReadonly_0
    CMOVZ rcx, rax
    TEST r14d, r14d
    CMOVNS rdx, rax
    MOV rax, cs:qword_78D1F0
    SUB r9d, r13d
    MOV rsi, [rax+50h]
    XOR eax, eax
    CALL sub_5148D0
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_51942D:
    MOV edx, eax
    MOV esi, offset aShellReturnedI
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_519236
loc_519445:
    CMP r14, 9
    MOV rsi, [rsp+218h+s1]
    MOV ecx, 9
    CMOVLE rcx, r14
    MOV edi, 55D64Fh
    CMP rcx, rcx
    REPE 
    SETNBE cl
    SETB sil
    SUB ecx, esi
    MOVSX ecx, cl
    TEST ecx, ecx
    JNZ loc_518E38
loc_519475:
    MOV rax, cs:qword_78D1F0
    MOV esi, 1
    MOV edx, [rax+30h]
    MOV eax, edx
    SUB eax, 1
    CMOVNS ecx, eax
    CMP edx, ecx
    MOV edx, 21h
    CMOVA eax, ecx
    MOV rcx, cs:qword_78D1F0
    XOR r9d, r9d
    LEA r8d, [rax+1]
    MOV edi, [rcx+34h]
    MOV ecx, offset aUUh
    TEST edi, edi
    LEA rdi, [rsp+218h+s]
    SETNZ r9b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    LEA rdi, [rsp+218h+s]
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset aU0hK+7)
    CALL _fwrite_unlocked
    CALL sub_40C7D0
    MOV rax, cs:qword_78D1F0
    LEA rbx, [rax+350h]
    MOV rdi, rbx
    CALL sub_40BE60
    MOV edi, offset aTheseFeaturesA
    CALL _puts
    JMP loc_519236
loc_51951A:
    LEA rax, [rsp+218h+var_1C8]
    MOV rsi, rbp
    MOV [rsp+218h+s1], rax
    MOV rdx, rax
    JMP loc_5189AA
loc_51952F:
    LEA rax, [rsp+218h+var_1C8]
    MOV [rsp+218h+s1], rax
    MOV rdx, rax
    JMP loc_5189AA
loc_519541:
    MOV rdi, r13
    MOV rbx, r12
    JMP loc_519385
loc_51954C:
    MOV rax, [rax+8]
    LEA r14, [rax-1]
    CMP rbx, r14
    JNB loc_519749
loc_51955D:
    MOV rbp, rbx
    MOV r12, rbx
    JMP loc_5192F4
loc_519568:
    TEST r13d, r13d
    JS loc_519899
loc_519571:
    MOV rax, cs:qword_78D1F0
    MOV edx, 0
    LEA rdi, [rsp+218h+s]
    MOV ecx, [rax+30h]
    MOV eax, ecx
    SUB eax, 1
    CMOVNS edx, eax
    CMP ecx, edx
    MOV rcx, cs:qword_78D1F0
    CMOVA eax, edx
    XOR r9d, r9d
    MOV edx, 21h
    LEA r8d, [rax+1]
    MOV esi, [rcx+34h]
    MOV ecx, offset aUUh
    TEST esi, esi
    MOV esi, 1
    SETNZ r9b
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rsi, cs:stdout
    LEA rdi, [rsp+218h+s]
    CALL _fputs_unlocked
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset aU0hK+7)
    CALL _fwrite_unlocked
    MOV edi, (offset asc_5641AC+3)
    CALL _puts
    CMP r12, rbx
    JBE loc_51961E
loc_519600:
    JMP loc_51925D
loc_519608:
    MOVSX edi, bpl
    CALL sub_40C7E0
loc_519611:
    ADD r12, 1
    CMP rbx, r12
    JB loc_5196C4
loc_51961E:
    MOVZX ebp, byte ptr [r12]
    TEST bpl, bpl
    JS loc_51967F
loc_519628:
    CMP bpl, 0Ah
    JZ loc_519658
loc_51962E:
    LEA eax, [rbp-20h]
    CMP al, 5Eh
    JBE loc_519608
loc_519635:
    MOV edi, 5Eh
    CALL sub_40C7E0
    CMP bpl, 7Fh
    MOV edi, 3Fh
    JZ loc_519651
loc_51964A:
    ADD ebp, 40h
    MOVSX edi, bpl
loc_519651:
    CALL sub_40C7E0
    JMP loc_519611
loc_519658:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_56843B
    CALL _fwrite_unlocked
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_519611
loc_51967F:
    MOV rcx, cs:stdout
    MOV edx, 4
    MOV esi, 1
    MOV edi, offset a7m
    CALL _fwrite_unlocked
    MOV edi, 2Eh
    CALL sub_40C7E0
    MOV rcx, cs:stdout
    MOV edx, 3
    MOV esi, 1
    MOV edi, (offset a7mSFileIOfIM+16h)
    CALL _fwrite_unlocked
    JMP loc_519611
loc_5196C4:
    MOV rax, cs:qword_78D1F0
    MOV [rsp+218h+var_208], rax
    JMP loc_51925D
loc_5196D5:
    MOV rcx, cs:qword_78D1F0
    MOV rdi, [rcx+rax*8+0B8h]
    CALL _free
    MOV rax, cs:qword_78D1F0
    MOV rcx, cs:qword_78D1F0
    MOVSXD rax, dword ptr [rax+0B0h]
    MOV qword ptr [rcx+rax*8+0B8h], 0
    JMP loc_519364
loc_51970F:
    MOV rcx, cs:qword_78D1F0
    MOV rdi, [rcx+rax*8+0B8h]
    CALL _free
    MOV rax, cs:qword_78D1F0
    MOV rcx, cs:qword_78D1F0
    MOVSXD rax, dword ptr [rax+0B4h]
    MOV qword ptr [rcx+rax*8+0B8h], 0
    JMP loc_51934D
loc_519749:
    MOV rax, cs:qword_78D1F0
    MOV r12, rbx
    MOV r14, rbx
    XOR ebp, ebp
    MOVSXD rax, dword ptr [rax+0B0h]
    JMP loc_518D4C
loc_519764:
    MOV rax, cs:qword_78D1F0
    MOV rbx, [rax+10h]
    MOV r15, [rax]
    CMP rbx, r15
    JB loc_519787
loc_519777:
    MOV rax, rbx
    MOV rbx, r15
    MOV r15, rax
    MOV rax, cs:qword_78D1F0
loc_519787:
    MOV rbp, [rax+8]
    LEA r14, [rbp-1]
    CMP r15, r14
    JNB loc_5197B5
loc_519794:
    MOV rdx, rbp
    MOV rdi, r15
    MOV esi, 0Ah
    SUB rdx, r15
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, r14
    MOV r15, rax
loc_5197B5:
    XOR r13d, r13d
    CMP rbx, r14
    JA loc_519803
loc_5197BD:
    CMP rbx, r15
    JA loc_519803
loc_5197C2:
    MOV rdi, rbx
    JMP loc_5197CC
loc_5197C7:
    CMP rdi, r14
    JA loc_519803
loc_5197CC:
    CMP r14, rdi
    JBE loc_5197EF
loc_5197D1:
    MOV rdx, rbp
    MOV esi, 0Ah
    SUB rdx, rdi
    SUB rdx, 1
    CALL _memchr
    TEST rax, rax
    CMOVZ rax, r14
    MOV rdi, rax
loc_5197EF:
    XOR eax, eax
    CMP byte ptr [rdi], 0Ah
    SETZ al
    ADD rdi, 1
    ADD r13d, eax
    CMP rdi, r15
    JBE loc_5197C7
loc_519803:
    MOV [rsp+218h+var_1D0], r13d
    MOV [rsp+218h+var_1D4], r13d
    MOV esi, r13d
    JMP loc_519127
loc_519815:
    MOV rax, cs:qword_78D1F0
    MOV edx, [rax+20h]
    TEST edx, edx
    JNZ loc_519911
loc_519827:
    MOV rcx, rax
    MOV eax, cs:optind
    MOV esi, eax
    NOT esi
    ADD esi, [rcx+28h]
    CMP r8b, 71h
    JZ loc_519AE0
loc_519841:
    CMP r8b, 6Eh
    JZ loc_519AC8
loc_51984B:
    CMP r8b, 70h
    JNZ loc_518ED2
loc_519855:
    TEST eax, eax
    MOV edi, offset aNoPreviousFile_0
    JLE loc_5190BC
loc_519862:
    SUB eax, 2
    MOV cs:optind, eax
    JMP loc_518ED2
loc_519870:
    CMP [rsp+218h+name], 0
    MOV rax, cs:qword_78D1F0
    JNZ loc_519936
loc_519885:
    MOV dword ptr [rax+4Ch], 0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519899:
    MOV rax, cs:qword_78D1F0
    MOV rbx, [rax+10h]
    MOV r12, [rax]
    CMP rbx, r12
    JBE loc_519964
loc_5198B0:
    MOV rdx, rbx
    MOV rdi, r12
    MOV esi, 0Ah
    SUB rdx, r12
    CALL _memrchr
    LEA rdx, [rax+1]
    TEST rax, rax
    MOV rax, cs:qword_78D1F0
    CMOVNZ r12, rdx
loc_5198D5:
    MOV rax, [rax+8]
    LEA rbp, [rax-1]
    CMP rbx, rbp
    JNB loc_519571
loc_5198E6:
    SUB rax, rbx
    MOV rdi, rbx
    MOV esi, 0Ah
    LEA rdx, [rax-1]
    CALL _memchr
    MOV rbx, rax
    TEST rax, rax
    CMOVZ rbx, rbp
    JMP loc_519571
loc_519909:
    MOV rbx, r14
    JMP loc_519314
loc_519911:
    MOV rsi, [rsp+218h+s1]
    MOV edi, offset aNoWriteSinceLa
loc_51991B:
    XOR eax, eax
    CALL sub_5149B0
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519936:
    MOV rdi, [rax+50h]
    CALL _free
    LEA rdi, [rsp+218h+name]
    CALL sub_40C290
    MOV rcx, cs:qword_78D1F0
    MOV [rcx+50h], rax
    MOV r14, [rcx+8]
    MOV rbx, [rcx+10h]
    JMP loc_518C80
loc_519964:
    MOV r12, rbx
    JMP loc_5198D5
loc_51996C:
    CMP r14, 5
    MOV rcx, rdx
    MOV rsi, [rsp+218h+s1]
    CMOVLE rcx, r14
    MOV edi, offset aRead_0
    CMP rcx, rcx
    REPE 
    JNZ loc_519A80
loc_51998C:
    CMP [rsp+218h+name], 0
    MOV edi, offset aNoFilenameGive
    JZ loc_5190BC
loc_51999F:
    TEST r13d, r13d
    JS loc_51A21A
loc_5199A8:
    JZ loc_5199CB
loc_5199AA:
    MOV rdi, r12
    CALL sub_514DD0
    MOV r12, rax
    MOV rax, cs:qword_78D1F0
    MOV rax, [rax+8]
    LEA rdx, [rax-1]
    CMP r12, rdx
    CMOVZ r12, rax
loc_5199CB:
    MOV rax, cs:qword_78D1F0
    LEA rdi, [rsp+218h+name]
    XOR edx, edx
    MOV rsi, r12
    MOV rbp, [rax]
    CALL sub_515AE0
    TEST eax, eax
    MOV ebx, eax
    JS loc_519084
loc_5199F1:
    MOV rax, cs:qword_78D1F0
    MOV r10, r12
    SUB r10, rbp
    MOVSXD rbp, ebx
    ADD r10, [rax]
    LEA rsi, [r10+rbp-1]
    MOV rdi, r10
    MOV r13, r10
    CALL sub_514F10
    MOV rcx, cs:qword_78D1F0
    MOV edx, offset data
    LEA rsi, [rsp+218h+name]
    MOV r8d, ebx
    MOV edi, offset aSSDlDc
    CMP byte ptr [rcx+1Dh], 0
    MOV ecx, offset aReadonly_0
    CMOVNZ rdx, rcx
    MOV ecx, eax
    XOR eax, eax
    CALL sub_5148D0
    TEST ebx, ebx
    MOV rax, cs:qword_78D1F0
    JZ loc_518EE0
loc_519A55:
    MOV rax, [rax+10h]
    CMP r13, rax
    JA loc_51A207
loc_519A62:
    MOV rcx, cs:qword_78D1F0
    ADD rax, rbp
    MOV rbx, rax
    MOV [rcx+10h], rax
    MOV r14, [rcx+8]
    JMP loc_518C80
loc_519A80:
    CMP r14, 7
    MOV rsi, [rsp+218h+s1]
    MOV edi, offset aRewind_0
    CMOVLE rax, r14
    MOV rcx, rax
    CMP rax, rax
    REPE 
    JNZ loc_519B08
loc_519A9C:
    MOV rax, cs:qword_78D1F0
    CMP dword ptr [rax+20h], 0
    JZ loc_519AB4
loc_519AA9:
    CMP [rsp+218h+var_1E4], 0
    JZ loc_519911
loc_519AB4:
    MOV cs:optind, 0FFFFFFFFh
    JMP loc_518ED2
loc_519AC8:
    TEST esi, esi
    JG loc_518ED2
loc_519AD0:
    MOV edi, offset aNoMoreFilesToE
    JMP loc_5190BC
loc_519AE0:
    TEST esi, esi
    JLE loc_518ED2
loc_519AE8:
    XOR eax, eax
    MOV edi, offset unk_568443
    CALL sub_5149B0
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519B08:
    MOV rdi, [rsp+218h+s1]
    CMP r14, 4
    MOV edx, 4
    CMOVLE rdx, r14
    MOV esi, offset aSet
    MOV byte ptr [rsp+218h+var_200], r8b
    CALL _strncmp
    TEST eax, eax
    MOVZX r8d, byte ptr [rsp+218h+var_200]
    JNZ loc_519BC4
loc_519B37:
    CMP [rsp+218h+name], 0
    JZ loc_519B5B
loc_519B41:
    LEA rdi, [rsp+218h+name]
    MOV esi, (offset a11sAll+7)
    CALL _strcasecmp
    TEST eax, eax
    JNZ loc_51A232
loc_519B5B:
    MOV rax, cs:qword_78D1F0
    MOV esi, offset data
    MOV r8, rsi
    MOV rcx, rsi
    MOV rdx, rsi
    MOVZX edi, byte ptr [rax+1Ch]
    MOV eax, (offset aNo+1)
    TEST dil, 2
    CMOVZ r8, rax
    TEST dil, 4
    CMOVZ rcx, rax
    TEST dil, 8
    CMOVZ rdx, rax
    AND dil, 1
    MOV edi, offset aSautoindentSfl
    CMOVZ rsi, rax
    MOV rax, cs:qword_78D1F0
    MOV r9d, [rax+6Ch]
    XOR eax, eax
    CALL sub_5149B0
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519BC4:
    CMP r8b, 73h
    JZ loc_519F41
loc_519BCE:
    MOV rdi, [rsp+218h+s1]
    CMP r14, 8
    MOV edx, 8
    CMOVLE rdx, r14
    MOV esi, offset aVersion
    MOV byte ptr [rsp+218h+var_200], r8b
    CALL _strncmp
    TEST eax, eax
    MOVZX r8d, byte ptr [rsp+218h+var_200]
    JZ loc_519F23
loc_519BFD:
    MOV rdi, [rsp+218h+s1]
    CMP r14, 6
    MOV edx, 6
    CMOVLE rdx, r14
    MOV esi, (offset aSmbusQuickWrit+0Ch)
    MOV byte ptr [rsp+218h+var_200], r8b
    CALL _strncmp
    TEST eax, eax
    MOVZX r8d, byte ptr [rsp+218h+var_200]
    JNZ loc_519D69
loc_519C2C:
    MOV rcx, cs:qword_78D1F0
    CMP [rsp+218h+name], 0
    LEA rax, [rsp+218h+name]
    CMOVZ rax, [rsp+218h+var_1F0]
    CMP byte ptr [rcx+1Dh], 0
    MOV [rsp+218h+var_1F0], rax
    JZ loc_519C5F
loc_519C54:
    CMP [rsp+218h+var_1E4], 0
    JZ loc_51A1F5
loc_519C5F:
    MOV rax, cs:qword_78D1F0
    CMP dword ptr [rax+20h], 0
    JNZ loc_519C76
loc_519C6C:
    CMP r8b, 78h
    JZ loc_519D40
loc_519C76:
    MOV rdi, [rsp+218h+var_1F0]
    MOV rbp, rbx
    MOV rdx, rbx
    SUB rbp, r12
    MOV rsi, r12
    ADD ebp, 1
    CALL sub_514AC0
    TEST eax, eax
    MOV r13d, eax
    JS loc_519D27
loc_519C9A:
    MOVSXD rbx, eax
    MOV rdi, r12
    LEA rsi, [r12+rbx-1]
    CALL sub_514F10
    MOV rsi, [rsp+218h+var_1F0]
    MOV edx, eax
    MOV ecx, r13d
    XOR eax, eax
    MOV edi, offset aSDlDc
    CALL sub_5148D0
    CMP ebp, r13d
    JNZ loc_519084
loc_519CC9:
    MOV rax, cs:qword_78D1F0
    CMP r12, [rax]
    JZ loc_519D0D
loc_519CD5:
    CMP [rsp+218h+var_1C8], 78h
    JZ loc_519CF0
loc_519CDC:
    MOVZX eax, [rsp+218h+var_1C7]
    AND eax, 0FFFFFFDFh
    CMP al, 51h
    JZ loc_519CF0
loc_519CE8:
    CMP al, 4Eh
    JNZ loc_518FC0
loc_519CF0:
    MOV rax, cs:qword_78D1F0
    MOV byte ptr [rax+1Eh], 0
    MOV [rsp+218h+var_208], rax
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519D0D:
    LEA r10, [r12+rbx]
    CMP [rax+8], r10
    JNZ loc_519CD5
loc_519D17:
    MOV dword ptr [rax+20h], 0
    MOV dword ptr [rax+24h], 0FFFFFFFFh
    JMP loc_519CD5
loc_519D27:
    ADD r13d, 1
    JNZ loc_519084
loc_519D31:
    MOV rsi, [rsp+218h+var_1F0]
    MOV edi, offset aSM
    JMP loc_51991B
loc_519D40:
    LEA rsi, [r12-1]
    MOV rdi, r12
    XOR ebx, ebx
    CALL sub_514F10
    MOV rsi, [rsp+218h+var_1F0]
    MOV edx, eax
    XOR ecx, ecx
    MOV edi, offset aSDlDc
    XOR eax, eax
    CALL sub_5148D0
    JMP loc_519CC9
loc_519D69:
    MOV ebp, 3
    MOV rdi, [rsp+218h+s1]
    CMP r14, 3
    MOV rdx, rbp
    MOV esi, (offset aNeaapwq+6)
    MOV byte ptr [rsp+218h+var_200], r8b
    CMOVLE rdx, r14
    CALL _strncmp
    TEST eax, eax
    MOVZX r8d, byte ptr [rsp+218h+var_200]
    JZ loc_519C2C
loc_519D9B:
    MOV rdi, [rsp+218h+s1]
    CMP r14, 3
    MOV rdx, rbp
    CMOVLE rdx, r14
    MOV esi, (offset aIpLinkSetIface_0+16h)
    MOV byte ptr [rsp+218h+var_200], r8b
    CALL _strncmp
    TEST eax, eax
    MOVZX r8d, byte ptr [rsp+218h+var_200]
    JZ loc_519C2C
loc_519DC8:
    CMP r8b, 78h
    JZ loc_519F13
loc_519DD2:
    MOV rdi, [rsp+218h+s1]
    CMP r14, 5
    MOV edx, 5
    CMOVLE rdx, r14
    MOV esi, offset aYank
    CALL _strncmp
    TEST eax, eax
    JNZ loc_519EE7
loc_519DF6:
    TEST r13d, r13d
    JNS loc_519E1C
loc_519DFB:
    MOV rax, cs:qword_78D1F0
    MOV rbx, [rax+10h]
    MOV rdi, rbx
    CALL sub_514B90
    MOV rdi, rbx
    MOV r12, rax
    CALL sub_514B50
    MOV rbx, rax
loc_519E1C:
    MOV rax, cs:qword_78D1F0
    MOV rdx, rbx
    MOV r14, r12
    SUB rdx, r12
    TEST edx, edx
    MOV ebp, edx
    MOVSXD rax, dword ptr [rax+0B0h]
    JNS loc_519E3E
loc_519E39:
    NEG ebp
    MOV r14, rbx
loc_519E3E:
    MOV rcx, cs:qword_78D1F0
    LEA r13, [rcx+rax*8]
    MOV rdi, [r13+0B8h]
    CALL _free
    LEA esi, [rbp+1]
    MOV rdi, r14
    CALL sub_40C2C0
    MOV rsi, rbx
    MOV [r13+0B8h], rax
    MOV rdi, r12
    CALL sub_514F10
    MOV esi, eax
    MOV rax, cs:qword_78D1F0
    MOVSXD rax, dword ptr [rax+0B0h]
    CMP eax, 19h
    LEA r8d, [rax+61h]
    JBE loc_519EA2
loc_519E8B:
    CMP eax, 1Ah
    JZ loc_519F0B
loc_519E90:
    CMP eax, 1Bh
    MOV edx, 44h
    MOV r8d, 55h
    CMOVNZ r8d, edx
loc_519EA2:
    MOV rcx, cs:qword_78D1F0
    MOV rdi, [rcx+rax*8+0B8h]
    XOR eax, eax
    OR rcx, 0FFFFFFFFFFFFFFFFh
    REPNE 
    MOV edi, offset aYankDLinesDCha
    MOV rax, rcx
    MOVSX ecx, r8b
    NOT rax
    LEA rdx, [rax-1]
    XOR eax, eax
    CALL sub_5148D0
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519EE7:
    MOV rsi, [rsp+218h+s1]
    LEA rdi, [rsp+218h+s]
    CALL sub_514820
    LEA rsi, [rsp+218h+s]
    MOV edi, offset aSIsNotImplemen
    JMP loc_51907D
loc_519F0B:
    MOV r8d, 44h
    JMP loc_519EA2
loc_519F13:
    CMP [rsp+218h+var_1C7], 0
    JNZ loc_519DD2
loc_519F1E:
    JMP loc_519C2C
loc_519F23:
    MOV edi, 56671Dh
    CALL sub_5148D0
    MOV rax, cs:qword_78D1F0
    MOV r14, [rax+8]
    MOV rbx, [rax+10h]
    JMP loc_518C80
loc_519F41:
    MOVSX ebx, byte ptr [rbp+1]
    LEA r15, [rbp+2]
    MOV rdi, r15
    MOV esi, ebx
    CALL _strchr
    TEST rax, rax
    MOV [rsp+218h+var_1F8], rax
    JZ loc_51A1E4
loc_519F61:
    LEA rcx, [rax+1]
    MOV rbp, rax
    MOV esi, ebx
    MOV byte ptr [rax], 0
    SUB rbp, r15
    MOV rdi, rcx
    MOV [rsp+218h+var_200], rcx
    MOV rbx, rcx
    CALL _strchr
    TEST rax, rax
    JZ loc_51A1E4
loc_519F89:
    MOV rsi, rax
    MOV byte ptr [rax], 0
    MOVZX eax, byte ptr [rax+1]
    SUB rsi, rbx
    MOV rdi, r12
    MOV [rsp+218h+var_1F0], rsi
    MOV byte ptr [rsp+218h+var_1E4], al
    CALL sub_514B90
    CMP [rsp+218h+var_1D4], 0
    MOV rbx, rax
    JNS loc_519FDA
loc_519FB1:
    MOV rax, cs:qword_78D1F0
    MOV rdi, [rax+10h]
    CALL sub_514B90
    MOV rsi, rax
    MOV rbx, rax
    MOV rax, cs:qword_78D1F0
    MOV rdi, [rax]
    CALL sub_514F10
    MOV [rsp+218h+var_1D4], eax
loc_519FDA:
    MOV eax, [rsp+218h+var_1D0]
    MOV r12d, [rsp+218h+var_1D4]
    TEST eax, eax
    JS loc_51A1CD
loc_519FEB:
    CMP eax, r12d
    JL loc_519084
loc_519FF4:
    LEA rax, [rbp-1]
    MOV dword ptr [rsp+218h+s1], 1
    MOV [rsp+218h+var_1E0], rax
loc_51A005:
    MOV rbp, rbx
loc_51A008:
    MOV rdi, r15
    CALL _strlen
    MOV rdi, rbx
    MOV r13, rax
    CALL sub_514DD0
    CMP rbx, rax
    MOV r14, rax
    JNB loc_51A161
loc_51A027:
    MOV rax, cs:qword_78D1F0
    MOVSXD r13, r13d
    TEST byte ptr [rax+1Ch], 4
    JZ loc_51A04D
loc_51A037:
    JMP loc_51A189
loc_51A040:
    ADD rbx, 1
    CMP r14, rbx
    JZ loc_51A161
loc_51A04D:
    MOV rdx, r13
    MOV rsi, r15
    MOV rdi, rbx
    CALL _strncmp
    TEST eax, eax
    JNZ loc_51A040
loc_51A05F:
    MOV rax, [rsp+218h+var_1E0]
    MOV edx, dword ptr [rsp+218h+s1]
    MOV rdi, rbx
    LEA rsi, [rbx+rax]
    CALL sub_517F40
    MOV rdi, [rsp+218h+var_200]
    CALL _strlen
    MOV edx, 2
    MOV r14, rax
    MOV esi, eax
    MOV rdi, rbx
    CALL sub_517430
    MOV esi, r14d
    MOV rdi, rbx
    CALL sub_514730
    MOV rsi, [rsp+218h+var_200]
    LEA rdi, [rbx+rax]
    MOVSXD rdx, r14d
    MOV r13, rax
    CALL _memcpy
    MOV rax, [rsp+218h+var_1F8]
    MOVZX eax, byte ptr [rax+1]
    TEST al, al
    JZ loc_51A1C6
loc_51A0C0:
    MOV rdx, [rsp+218h+var_200]
    XOR esi, esi
loc_51A0C7:
    CMP al, 0Ah
    SETZ al
    ADD rdx, 1
    MOVZX eax, al
    ADD esi, eax
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JNZ loc_51A0C7
loc_51A0DC:
    MOV rax, cs:qword_78D1F0
    MOV eax, [rax+0B0h]
    CMP eax, 19h
    LEA ecx, [rax+61h]
    JA loc_51A1A0
loc_51A0F5:
    MOVSX ecx, cl
loc_51A0F8:
    XOR eax, eax
    MOV edx, r14d
    MOV edi, offset aPutDLinesDChar
    CALL sub_5148D0
    ADD rbp, r13
    CMP byte ptr [rsp+218h+var_1E4], 67h
    JNZ loc_51A1D7
loc_51A115:
    MOV rax, cs:qword_78D1F0
    ADD r13, [rsp+218h+var_1F0]
    MOV rax, [rax+8]
    ADD rbx, r13
    LEA r13, [rax-1]
    CMP rbp, r13
    JNB loc_51A1C1
loc_51A135:
    SUB rax, rbp
    MOV esi, 0Ah
    MOV rdi, rbp
    LEA rdx, [rax-1]
    CALL _memchr
    TEST rax, rax
    CMOVNZ r13, rax
loc_51A150:
    CMP rbx, r13
    MOV dword ptr [rsp+218h+s1], 2
    JB loc_51A008
loc_51A161:
    MOV rdi, rbp
    ADD r12d, 1
    CALL sub_514DD0
    CMP [rsp+218h+var_1D0], r12d
    MOV rbx, rax
    JGE loc_51A005
loc_51A17B:
    JMP loc_519084
loc_51A180:
    ADD rbx, 1
    CMP r14, rbx
    JZ loc_51A161
loc_51A189:
    MOV rdx, r13
    MOV rsi, r15
    MOV rdi, rbx
    CALL _strncasecmp
    TEST eax, eax
    JNZ loc_51A180
loc_51A19B:
    JMP loc_51A05F
loc_51A1A0:
    CMP eax, 1Ah
    MOV ecx, 44h
    JZ loc_51A0F8
loc_51A1AE:
    CMP eax, 1Bh
    JNZ loc_51A0F5
loc_51A1B7:
    MOV ecx, 55h
    JMP loc_51A0F8
loc_51A1C1:
    MOV r13, rbp
    JMP loc_51A150
loc_51A1C6:
    XOR esi, esi
    JMP loc_51A0DC
loc_51A1CD:
    MOV [rsp+218h+var_1D0], r12d
    JMP loc_519FF4
loc_51A1D7:
    MOV dword ptr [rsp+218h+s1], 2
    JMP loc_51A161
loc_51A1E4:
    MOV edi, offset aSExpressionMis
    XOR eax, eax
    CALL sub_5148D0
    JMP loc_518CAC
loc_51A1F5:
    MOV rsi, rax
    MOV edi, offset aSIsReadOnly_0
    JMP loc_51991B
loc_51A202:
    CALL ___stack_chk_fail
loc_51A207:
    MOV rcx, cs:qword_78D1F0
    MOV rbx, rax
    MOV r14, [rcx+8]
    JMP loc_518C80
loc_51A21A:
    MOV rax, cs:qword_78D1F0
    MOV rdi, [rax+10h]
    CALL sub_514B90
    MOV r12, rax
    JMP loc_5199AA
loc_51A232:
    LEA rbx, [rsp+218h+name]
    XOR ebp, ebp
    MOV r14d, (offset aNo+1)
    MOV r15d, offset aTabstop
    MOV r13d, 2
    JMP loc_51A26C
loc_51A250:
    MOV rdi, rbx
    CALL sub_40A8D0
    MOV rdi, rax
    CALL sub_40A8A0
    CMP byte ptr [rax], 0
    MOV rbx, rax
    JZ loc_519084
loc_51A26C:
    MOV ecx, 2
    MOV rsi, rbx
    MOV rdi, r14
    REPE 
    MOV r8d, 1
    MOV ecx, offset aAi
    MOV esi, offset aAutoindent
    CMOVZ ebp, r13d
    MOV rdi, rbx
    MOV edx, ebp
    CALL sub_409282
    MOV r8d, 8
    MOV ecx, offset aFl
    MOV edx, ebp
    MOV esi, offset aFlash
    MOV rdi, rbx
    CALL sub_409282
    MOV r8d, 4
    MOV ecx, 55FE30h
    MOV edx, ebp
    MOV esi, offset unk_5684CD
    MOV rdi, rbx
    CALL sub_409282
    MOV ecx, offset aSm
    MOV esi, offset aShowmatch
    MOV rdi, rbx
    MOV r8d, 2
    MOV edx, ebp
    CALL sub_409282
    MOVSXD rax, ebp
    MOV ecx, 8
    MOV rdi, r15
    LEA rsi, [rbx+rax]
    REPE 
    JNZ loc_51A250
loc_51A2FC:
    LEA rdi, [rbx+rax+8]
    LEA rdx, [rsp+218h+var_1CC]
    XOR eax, eax
    MOV esi, (offset aU_5+2)
    MOV [rsp+218h+var_1CC], 0
    CALL _sscanf
    MOV eax, [rsp+218h+var_1CC]
    LEA edx, [rax-1]
    CMP edx, 1Fh
    JA loc_51A250
loc_51A32A:
    MOV rcx, cs:qword_78D1F0
    MOV [rcx+6Ch], eax
    JMP loc_51A250
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x73629C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Function Prologue'}

##### Q 111 - do_ipneigh
```assembly
loc_44B070:
    MOV rsi, [rdi]
    TEST rsi, rsi
    JZ loc_44B099
loc_44A740:

loc_44B078:
    PUSH rbx
    MOV rbx, rdi
    MOV edi, offset aShow
    CALL sub_409910
    TEST eax, eax
    JZ loc_44B0B0
loc_44B08A:
    CMP eax, 1
    JNZ loc_44B0A0
loc_44B08F:
    LEA rdi, [rbx+8]
    MOV esi, 1
    POP rbx
loc_44B099:
    JMP sub_44A740
loc_44B0A0:
    MOV rsi, cs:ident
    MOV rdi, [rbx]
    CALL sub_450870
loc_44B0B0:
    LEA rdi, [rbx+8]
    XOR esi, esi
    POP rbx
    JMP sub_44A740
```
{'input_parameter_count': 2, 'input_parameter_types': ['Void Pointer', 'Void Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 16, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0', '1', '2', '5', '10', '20', '0xFFFFFFDF', '0x5B', '0x5D', '0x4Ah', '0x41h', '0x45h', '0x23h', '0xDCh', '0xFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 43, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Error Handling and String Parsing', 'inferred_category': 'String/Character Manipulation'}

##### T 111 - do_ipneigh
```assembly
loc_45DF40:
    MOV rsi, [rdi]
    TEST rsi, rsi
    JZ sub_45DF85
loc_45D870:

loc_45DF48:
    PUSH rbx
    MOV rbx, rdi
    MOV edi, offset aShow
    CALL sub_40A2C0
    TEST eax, eax
    JZ loc_45DF80
loc_45DF5A:
    CMP eax, 1
    JNZ loc_45DF70
loc_45DF5F:
    LEA rdi, [rbx+8]
    MOV esi, 1
    POP rbx
    JMP sub_45D870
loc_45DF70:
    MOV rsi, cs:ident
    MOV rdi, [rbx]
    CALL sub_464220
loc_45DF80:
    LEA rdi, [rbx+8]
    POP rbx
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x1', '0x20', '0x40', '0x5B', '0xDCh', '0x19A', '0x4DF', '0x18F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### Q 112 - get_header_tar_gz
```assembly
loc_4ADCC0:
    PUSH rbx
    MOV rbx, rdi
    MOV qword ptr [rdi+40h], offset sub_4AF4E0
    MOV edi, [rdi+4]
    MOV edx, offset sub_4A9BB0
    XOR esi, esi
    CALL sub_4AF200
    MOV qword ptr [rbx+48h], 0
loc_4ADCE3:
    MOV rdi, rbx
    CALL sub_4AD480
    TEST al, al
    JZ loc_4ADCE3
loc_4ADCEF:
    MOV eax, 1
    POP rbx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x50', '0x2'], 'presence_of_notable_floating_point_constants': ['cs:qword_6E6898', 'cs:dword_6D2440', 'cs:dword_6D2448', 'cs:qword_6D2458'], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallel Processing', 'inferred_category': 'High-Level Function'}

##### T 112 - get_header_tar_gz
```assembly
loc_4E39E0:
    PUSH rbx
    MOV rbx, rdi
    MOV qword ptr [rdi+40h], offset sub_4E6E00
    MOV edi, [rdi+4]
    MOV edx, offset sub_4DD800
    XOR esi, esi
    CALL sub_4E6680
    MOV qword ptr [rbx+48h], 0
loc_4E3A03:
    MOV rdi, rbx
    CALL sub_4E2630
    TEST al, al
    JZ loc_4E3A03
loc_4E3A0F:
    MOV eax, 1
    POP rbx
    RETN 
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': ['qword_748CD8', 'qword_7346D0', 'qword_7346D8', 'qword_7346E8'], 'count_of_distinct_immediate_values': 30, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Mathematics/FPU Operations'}

##### Q 113 - newline_and_flush
```assembly
loc_467B03:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
loc_467B0E:
    MOV rdi, rbp
    CALL _fflush
    SUB dword ptr [rbx+38h], 1
    JNZ loc_467B24
loc_467B1C:
    MOVZX eax, byte ptr [rbx+3Ch]
    TEST al, al
    JNZ loc_467B3C
loc_467B24:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_467B30:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_467B0E
loc_467B3C:
    CALL sub_466B40
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ControlFlow'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 14, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xA', '0xB', '0xC', '0xD', '0xE', '0xF'], 'presence_of_notable_floating_point_constants': ['0xABACADAB'], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Image Processing / Distortion Correction', 'inferred_category': 'Utility'}

##### T 113 - newline_and_flush
```assembly
loc_47FE10:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOV rbx, cs:qword_78D208
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_47FE60
loc_47FE33:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
loc_47FE3E:
    MOV rdi, rbp
    CALL _fflush
    SUB dword ptr [rbx+38h], 1
    JNZ loc_47FE54
loc_47FE4C:
    MOVZX eax, byte ptr [rbx+3Ch]
    TEST al, al
    JNZ loc_47FE6C
loc_47FE54:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_47FE60:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_47FE3E
loc_47FE6C:
    CALL sub_47EAB0
```
None

##### Q 114 - identify
```assembly
loc_416810:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 0Ah
    SUB rsp, 38h
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    MOV [rsp+68h+var_41], 0
    CALL sub_40B110
    MOVZX esi, word ptr [rbx]
    TEST si, si
    JS loc_416A80
loc_41684C:
    MOV esi, offset aAtaDeviceWith
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR r14d, r14d
    MOV [rsp+68h+var_62], 0FFFFh
    MOV ebp, 1
loc_41686C:
    TEST byte ptr [rbx], 80h
    MOV eax, offset buf
    MOV edx, offset aNon
    MOV esi, offset aSremovableMedi
    MOV edi, 1
    CMOVNZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+4]
    CMP ax, 37C8h
    JZ loc_416A40
loc_41689C:
    CMP ax, 738Ch
    JZ loc_416A40
loc_4168A6:
    CMP ax, 0C837h
    JZ loc_416A4E
loc_4168B0:
    CMP ax, 8C73h
    JZ loc_416A4E
loc_4168BA:
    MOV ecx, 14h
    MOV edx, offset aModelNumber
    MOV esi, 1Bh
    MOV rdi, rbx
    CALL sub_416730
    MOV ecx, 0Ah
    MOV edx, offset aSerialNumber
    MOV esi, 0Ah
    MOV rdi, rbx
    CALL sub_416730
    MOV ecx, 4
    MOV edx, offset aFirmwareRevisi
    MOV esi, 17h
    MOV rdi, rbx
    CALL sub_416730
    MOV ecx, 14h
    MOV edx, offset aMediaSerialNum
    MOV esi, 0B0h
    MOV rdi, rbx
    CALL sub_416730
    MOV ecx, 0Ah
    MOV edx, offset aMediaManufactu
    MOV esi, 0C4h
    MOV rdi, rbx
    CALL sub_416730
    XOR eax, eax
    MOV esi, offset aStandards
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+68h+var_62], 5
    JZ loc_416AD3
loc_41694A:
    MOVZX esi, word ptr [rbx+0A2h]
    LEA eax, [rsi-1]
    CMP ax, 21h
    JA loc_41697A
loc_41695A:
    CMP bp, 2
    MOV eax, 3
    CMOVBE ebp, eax
    MOVSXD rax, esi
    MOVSX cx, ds:byte_4F7F25[rax]
    TEST cx, cx
    JNZ loc_417B60
loc_41697A:
    MOVZX eax, word ptr [rbx+0A0h]
    XOR ecx, ecx
    OR r12d, 0FFFFFFFFh
    SUB eax, 1
    CMP ax, 0FFFDh
    JBE loc_417411
loc_416994:
    MOVZX eax, word ptr [rbx+0A6h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_417A68
loc_4169AD:
    MOVZX eax, word ptr [rbx+0A8h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_417B28
loc_4169C6:
    CMP cx, 4
    JZ loc_4178AD
loc_4169D0:
    TEST cx, cx
    JNZ loc_4175D9
loc_4169D9:
    CMP bp, 4
    JA loc_4175D9
loc_4169E3:
    CMP byte ptr [rbx+1FEh], 0A5h
    JZ loc_417B35
loc_4169F0:
    MOVZX eax, word ptr [rbx+0BAh]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_417B35
loc_416A05:
    MOVZX eax, word ptr [rbx+0A6h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_417DD6
loc_416A1E:
    CMP cx, 3
    JZ loc_417E00
loc_416A28:
    TEST cx, cx
    JNZ loc_4177D2
loc_416A31:
    CMP bp, 3
    JBE loc_41760B
loc_416A3B:
    JMP loc_4177D2
loc_416A40:
    MOV edi, offset aPowersUpInStan
    CALL _puts
    MOVZX eax, word ptr [rbx+4]
loc_416A4E:
    CMP ax, 37C8h
    JZ loc_416A63
loc_416A54:
    CMP ax, 8C73h
    MOV ebp, 5
    JNZ loc_4168BA
loc_416A63:
    TEST byte ptr [rbx], 4
    MOV ebp, 5
    JZ loc_4168BA
loc_416A71:
    MOV edi, offset aWarningIdRespo
    CALL _puts
    JMP loc_4168BA
loc_416A80:
    CMP si, 848Ah
    JZ loc_417C8E
loc_416A8B:
    TEST si, 4000h
    JNZ loc_4179FF
loc_416A96:
    AND esi, 1F00h
    MOV edx, offset aUnknown_0
    SAR esi, 8
    CMP esi, 0Fh
    MOV [rsp+68h+var_62], si
    JLE loc_417C0D
loc_416AB2:
    MOV esi, offset aAtapiSWith
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r14d, 1
    MOV ebp, 3
    JMP loc_41686C
loc_416AD3:
    CMP word ptr [rbx+94h], 9
    JZ loc_4176E3
loc_416AE1:
    MOVZX eax, word ptr [rbx+92h]
    MOV edi, offset aLikelyUsedCdRo
    SUB eax, 1
    CMP ax, 0FFFDh
    JBE loc_417708
loc_416AFA:
    CALL _puts
    MOV edi, offset aConfiguration
    MOV ebp, 2
    XOR r13d, r13d
    CALL _puts
    MOV r12d, 1
    MOV byte ptr [rsp+68h+var_58], 0
loc_416B1C:
    CMP r14w, 1
    JZ loc_41730C
loc_416B27:
    MOV eax, [rbx+78h]
    CMP eax, 0FBFC10h
    MOV dword ptr [rsp+68h+var_60], eax
    JBE loc_416B40
loc_416B35:
    CMP word ptr [rbx+2], 0
    JZ loc_417B3F
loc_416B40:
    MOVZX r15d, word ptr [rbx+6Ah]
    AND r15w, 1
    JZ loc_41723A
loc_416B50:
    MOVZX eax, word ptr [rbx+70h]
    MOVZX ecx, word ptr [rbx+6Ch]
    MOV esi, offset aLogicalMaxCurr
    MOVZX edx, word ptr [rbx+2]
    MOVZX r9d, word ptr [rbx+6Eh]
    MOV edi, 1
    MOVZX r8d, word ptr [rbx+6]
    PUSH rax
    MOVZX eax, word ptr [rbx+0Ch]
    PUSH rax
    XOR eax, eax
    CALL ___printf_chk
    CMP r12w, 1
    POP rcx
    POP rsi
    JNZ loc_416BB8
loc_416B86:
    MOVZX eax, word ptr [rbx+8]
    TEST ax, ax
    JNZ loc_416B96
loc_416B8F:
    CMP word ptr [rbx+0Ah], 0
    JZ loc_416BAE
loc_416B96:
    MOVZX ecx, word ptr [rbx+0Ah]
    MOVZX edx, ax
    MOV esi, offset aBytesTrackUByt
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_416BAE:
    TEST r15w, r15w
    JZ loc_41726D
loc_416BB8:
    CMP bp, 2
    MOVZX esi, word ptr [rbx+74h]
    MOV r15d, [rbx+72h]
    JBE loc_41757A
loc_416BCA:
    MOV edx, r15d
    MOV esi, offset aChsCurrentAddr
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_416BDE:
    MOV edx, dword ptr [rsp+68h+var_60]
    XOR eax, eax
    MOV esi, offset aLbaUserAddress
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C400h
    CMP ax, 4400h
    JZ loc_417BDA
loc_416C08:
    MOV esi, dword ptr [rsp+68h+var_60]
    MOV ecx, r15d
    MOV eax, esi
    CMP r15d, esi
    CMOVB rcx, rax
loc_416C18:
    MOV rdx, rcx
    MOV esi, offset aDeviceSizeWith
    MOV edi, 1
    SHR rdx, 0Bh
    XOR eax, eax
    MOV [rsp+68h+var_60], rcx
    CALL ___printf_chk
    MOV rcx, [rsp+68h+var_60]
    XOR edx, edx
    MOV esi, offset aDeviceSizeWith_0
    MOV edi, 1
    SHL rcx, 9
    MOV rax, rcx
    MOV ecx, 0F4240h
    MOV [rsp+68h+var_60], rax
    DIV rcx
    MOV r15, rax
    MOV rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    CMP r15, 3E8h
    JBE loc_41722B
loc_416C74:
    MOV rax, [rsp+68h+var_60]
    MOV ecx, 3B9ACA00h
    XOR edx, edx
    MOV esi, offset aLuGb
    MOV edi, 1
    DIV rcx
    MOV rdx, rax
    XOR eax, eax
    CALL ___printf_chk
loc_416C97:
    MOV esi, offset aCapabilities
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+62h]
loc_416CAC:
    TEST ah, 2
    JNZ loc_4172A7
loc_416CB5:
    CMP bp, 1
    JZ loc_4172BD
loc_416CBF:
    MOVZX edx, word ptr [rbx+62h]
    MOV eax, offset buf
    MOV ecx, offset aNot
    MOV esi, offset aIordySCanSBeDi
    MOV edi, 1
    TEST dh, 4
    CMOVNZ rcx, rax
    AND dh, 8
    MOV edx, offset aMayBe
    CMOVNZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
loc_416CF1:
    CMP r12w, 1
    JZ loc_416EE6
loc_416CFC:
    CMP r12w, 3
    JBE loc_416F1B
loc_416D07:
    CMP bp, 3
    SETNBE r15b
    AND r15b, r13b
    MOV byte ptr [rsp+68h+var_60], r15b
    JNZ loc_417284
loc_416D1D:
    TEST r14w, r14w
    JNZ loc_416E7F
loc_416D27:
    CMP byte ptr [rsp+68h+var_58], 0
    JNZ loc_4178D2
loc_416D32:
    TEST byte ptr [rbx+63h], 20h
    MOV eax, offset aVendor
    MOV edx, offset aStandard
    MOV esi, offset aStandbyTimerVa
    MOV edi, 1
    CMOVZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    CMP bp, 3
    JBE loc_416D71
loc_416D5B:
    MOVZX eax, word ptr [rbx+64h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_417766
loc_416D71:
    MOV edi, 0Ah
    CALL sub_40B110
loc_416D7B:
    XOR eax, eax
    MOV esi, offset aRWMultipleSect
    MOV edi, 1
    CALL ___printf_chk
    CMP bp, 2
    JA loc_4175B9
loc_416D96:
    MOVZX edx, word ptr [rbx+5Eh]
    TEST dl, dl
    JZ loc_417BCB
loc_416DA2:
    MOVZX edx, dl
    XOR eax, eax
    MOV esi, offset aMaxUCurrent
    MOV edi, 1
    CALL ___printf_chk
    MOVZX edx, word ptr [rbx+76h]
    TEST dh, 1
    JNZ loc_417531
loc_416DC3:
    MOV edi, (offset asc_5157D0+7)
    CALL _puts
loc_416DCD:
    CMP bp, 3
    JBE loc_416E10
loc_416DD3:
    TEST byte ptr [rbx+0A6h], 8
    JNZ loc_417CB3
loc_416DE0:
    CMP bp, 5
    JBE loc_416E10
loc_416DE6:
    MOVZX eax, word ptr [rbx+0BCh]
    TEST ax, ax
    JZ loc_416E10
loc_416DF2:
    MOVZX ecx, al
    MOVZX edx, ah
    MOV esi, offset aRecommendedAco
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP dword ptr [rax+00000000h]
loc_416E10:
    XOR eax, eax
    MOV esi, offset aDma
    MOV edi, 1
    CALL ___printf_chk
    TEST byte ptr [rbx+63h], 1
    JZ loc_417275
loc_416E2B:
    MOVZX edx, word ptr [rbx+68h]
    TEST dx, dx
    JZ loc_416F50
loc_416E38:
    MOVZX eax, word ptr [rbx+7Ch]
    TEST ax, ax
    JNZ loc_41754A
loc_416E45:
    CMP word ptr [rbx+7Eh], 0
    JZ loc_416F3E
loc_416E50:
    MOVZX eax, word ptr [rbx+7Eh]
    XOR r8d, r8d
loc_416E57:
    LEA rcx, [rsp+68h+var_41]
    MOVZX esi, ah
    MOVZX edi, ax
    MOV edx, 6Dh
    MOV byte ptr [rsp+68h+var_58], r8b
    CALL sub_416690
    MOVZX r8d, byte ptr [rsp+68h+var_58]
    ADD r8d, eax
    JMP loc_416F6D
loc_416E7F:
    TEST r13b, r13b
    JZ loc_416E8E
loc_416E84:
    TEST byte ptr [rbx+63h], 10h
    JNZ loc_417B51
loc_416E8E:
    CMP word ptr [rbx+8Eh], 0
    JNZ loc_416EA6
loc_416E98:
    CMP word ptr [rbx+90h], 0
    JZ loc_416E10
loc_416EA6:
    XOR eax, eax
    MOV esi, offset aOverlapSupport
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+8Eh]
    TEST ax, ax
    JNZ loc_417C6A
loc_416EC7:
    MOVZX eax, word ptr [rbx+90h]
    TEST ax, ax
    JNZ loc_417C38
loc_416ED7:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_416E10
loc_416EE6:
    MOVZX eax, word ptr [rbx+2Ah]
    LEA edx, [rax-1]
    CMP dx, 0FFFDh
    JA loc_416F1B
loc_416EF3:
    PXOR xmm0, xmm0
    MOV esi, offset aBufferSize1fkb
    MOV edi, 1
    CVTSI2SS xmm0, eax
    MOV eax, 1
    MULSS xmm0, cs:dword_50D8D8
    CVTSS2SD xmm0, xmm0
    CALL ___printf_chk
loc_416F1B:
    MOVZX edx, word ptr [rbx+2Ch]
    TEST dx, dx
    JZ loc_416D07
loc_416F28:
    MOV esi, offset aBytesAvailOnRW
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416D07
loc_416F3E:
    MOVZX edx, dh
    MOV esi, offset aSdmaU
    MOV edi, 1
    CALL ___printf_chk
loc_416F50:
    MOVZX eax, word ptr [rbx+7Ch]
    XOR r8d, r8d
    TEST ax, ax
    JNZ loc_41754A
loc_416F60:
    MOVZX eax, word ptr [rbx+7Eh]
    TEST ax, ax
    JNZ loc_416E57
loc_416F6D:
    TEST byte ptr [rbx+6Ah], 4
    JZ loc_416F83
loc_416F73:
    MOVZX eax, word ptr [rbx+0B0h]
    TEST ax, ax
    JNZ loc_417BA3
loc_416F83:
    TEST r8b, r8b
    JNZ loc_416F8F
loc_416F88:
    CMP [rsp+68h+var_41], 0
    JNZ loc_416FA0
loc_416F8F:
    MOV esi, offset asc_50EE0D
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_416FA0:
    MOV edi, 0Ah
    CALL sub_40B110
    TEST r14w, r14w
    JZ loc_416FC0
loc_416FB0:
    TEST r13b, r13b
    JZ loc_416FC0
loc_416FB5:
    CMP word ptr [rbx+62h], 0
    JS loc_417DF1
loc_416FC0:
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_416FE0
loc_416FC6:
    CMP word ptr [rbx+82h], 0
    JNZ loc_417046
loc_416FD0:
    CMP word ptr [rbx+84h], 0
    JNZ loc_417046
loc_416FDA:
    NOP word ptr [rax+rax+00h]
loc_416FE0:
    XOR eax, eax
    MOV esi, offset aPio
    MOV edi, 1
    CALL ___printf_chk
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_417086
loc_416FFB:
    MOVZX eax, byte ptr [rbx+80h]
    TEST ax, ax
    JZ loc_417086
loc_417007:
    LEA r12d, ds:7[rax*8]
    XOR r14d, r14d
    JMP loc_41702A
loc_417018:
    ADD r14d, 1
    SHR r12w, 1
    CMP r14d, 9
    JZ loc_4170D3
loc_41702A:
    TEST r12b, 1
    JZ loc_417018
loc_417030:
    MOV edx, r14d
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417018
loc_417046:
    XOR eax, eax
    MOV esi, offset aCycleTime
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+82h]
    TEST ax, ax
    JNZ loc_4177A5
loc_417067:
    MOVZX eax, word ptr [rbx+84h]
    TEST ax, ax
    JNZ loc_41778C
loc_417077:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_416FE0
loc_417086:
    CMP r12w, 4
    JBE loc_417099
loc_41708D:
    CMP [rsp+68h+var_62], 5
    JNZ loc_41721C
loc_417099:
    TEST word ptr [rbx+66h], 0FF00h
    JZ loc_41721C
loc_4170A5:
    XOR r12d, r12d
    NOP dword ptr [rax+rax+00000000h]
loc_4170B0:
    MOVZX edx, r12w
    XOR eax, eax
    MOV esi, offset aPioD
    MOV edi, 1
    ADD r12d, 1
    CALL ___printf_chk
    MOVZX eax, byte ptr [rbx+67h]
    CMP ax, r12w
    JNB loc_4170B0
loc_4170D3:
    MOV edi, 0Ah
    CALL sub_40B110
loc_4170DD:
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_417100
loc_4170E3:
    CMP word ptr [rbx+86h], 0
    JNZ loc_4171DC
loc_4170F1:
    CMP word ptr [rbx+88h], 0
    JNZ loc_4171DC
loc_4170FF:
    NOP 
loc_417100:
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_41790C
loc_417115:
    MOVZX eax, word ptr [rbx+0FEh]
    AND eax, 3
    CMP ax, 1
    JZ loc_4179D7
loc_417129:
    CMP byte ptr [rsp+68h+var_60], 0
    JZ loc_417194
loc_417130:
    CMP word ptr [rbx+100h], 0
    JNZ loc_417148
loc_41713A:
    CMP word ptr [rbx+0B2h], 0
    JZ loc_417567
loc_417148:
    MOV edi, offset aSecurity
    CALL _puts
    MOVZX eax, word ptr [rbx+0B8h]
    LEA edx, [rax-1]
    CMP dx, 0FFFDh
    JBE loc_417A89
loc_417166:
    MOVZX r14d, word ptr [rbx+100h]
    TEST r14w, r14w
    JNZ loc_4174B5
loc_417178:
    MOVZX eax, word ptr [rbx+0B2h]
    MOVZX r12d, word ptr [rbx+0B4h]
    MOV edx, eax
    OR edx, r12d
    TEST dl, dl
    JNZ loc_417AA2
loc_417194:
    MOVZX eax, word ptr [rbx+0BAh]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_4173B5
loc_4171AD:
    CMP bp, 4
    JBE loc_4171D5
loc_4171B3:
    TEST r13b, r13b
    JZ loc_4171D5
loc_4171B8:
    MOVZX eax, word ptr [rbx+140h]
    TEST ax, ax
    JS loc_417A0B
loc_4171C8:
    CMP byte ptr [rbx+1FEh], 0A5h
    JZ loc_417D0D
loc_4171D5:
    XOR edi, edi
    CALL _exit
loc_4171DC:
    XOR eax, eax
    MOV esi, offset aCycleTime
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+86h]
    TEST ax, ax
    JNZ loc_417C51
loc_4171FD:
    MOVZX eax, word ptr [rbx+88h]
    TEST ax, ax
    JNZ loc_417C1F
loc_41720D:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_417100
loc_41721C:
    MOV edi, offset aUnknown_0
    CALL _puts
    JMP loc_4170DD
loc_41722B:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_416C97
loc_41723A:
    MOVZX eax, word ptr [rbx+0Ch]
    MOVZX edx, word ptr [rbx+2]
    XOR r9d, r9d
    MOVZX r8d, word ptr [rbx+6]
    PUSH 0
    XOR ecx, ecx
    MOV esi, offset aLogicalMaxCurr
    MOV edi, 1
    PUSH rax
    XOR eax, eax
    CALL ___printf_chk
    CMP r12w, 1
    POP rax
    POP rdx
    JZ loc_416B86
loc_41726D:
    XOR r15d, r15d
    JMP loc_416BDE
loc_417275:
    MOV edi, (offset aEncodingSNotSu+0Eh)
    CALL _puts
    JMP loc_416FE0
loc_417284:
    MOVZX edx, word ptr [rbx+96h]
    MOV esi, offset aQueueDepthU
    MOV edi, 1
    XOR eax, eax
    AND edx, 1Fh
    ADD edx, 1
    CALL ___printf_chk
    JMP loc_416D1D
loc_4172A7:
    MOV esi, offset aLba
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416CB5
loc_4172BD:
    MOV edi, offset aNoIordy
    CALL _puts
    MOVZX edx, word ptr [rbx+28h]
    TEST dx, dx
    JZ loc_416CF1
loc_4172D4:
    CMP dx, 2
    JA loc_417CF3
loc_4172DE:
    CMP dx, 1
    MOV ecx, offset aSinglePortSing
    MOV eax, offset aDualPortMultiS
    MOV r8d, offset buf
    CMOVNZ rcx, rax
loc_4172F6:
    MOV esi, offset aBufferType04xS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416CF1
loc_41730C:
    MOVZX eax, word ptr [rbx]
    MOV edx, offset a3ms
    AND ax, 60h
    JZ loc_417336
loc_41731A:
    CMP ax, 20h
    JZ loc_417E1C
loc_417324:
    CMP ax, 40h
    MOV edx, offset a50us
    MOV eax, offset aUnknown_0
    CMOVNZ rdx, rax
loc_417336:
    MOV edi, 1
    XOR eax, eax
    MOV esi, offset aDrqResponseSPa
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx]
    MOV edi, offset a12Bytes
    AND ax, 3
    JNZ loc_4175C2
loc_417359:
    CALL _puts
    XOR eax, eax
    MOV esi, offset aCapabilities
    MOV edi, 1
    CALL ___printf_chk
    TEST r13b, r13b
    MOVZX eax, word ptr [rbx+62h]
    JZ loc_417392
loc_417378:
    TEST ah, 40h
    JZ loc_417392
loc_41737D:
    MOV esi, offset aCmdQueuing
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+62h]
loc_417392:
    TEST ah, 20h
    JZ loc_416CAC
loc_41739B:
    MOV esi, offset aCmdOverlap
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+62h]
    JMP loc_416CAC
loc_4173B5:
    MOV edx, eax
    MOV ecx, eax
    SHR dx, 8
    AND cx, 1
    CMOVNZ edx, eax
    AND edx, 6
    CMP dx, 2
    JZ loc_41775B
loc_4173D1:
    CMP dx, 4
    MOV r8d, offset aDeterminedByCs
    MOV edx, offset buf
    CMOVNZ r8, rdx
loc_4173E4:
    XOR ecx, 1
    MOV edx, offset aAbove
    TEST ah, 20h
    MOV eax, offset aBelow
    MOVZX ecx, cx
    MOV esi, offset aHwResetResults
    CMOVZ rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4171AD
loc_417411:
    XOR eax, eax
    MOV esi, offset aSupported
    MOV edi, 1
    MOV dword ptr [rsp+68h+var_60], ecx
    MOV r13d, 0Eh
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0A0h]
    MOV ecx, dword ptr [rsp+68h+var_60]
    XOR r8d, r8d
    CMP bp, 5
    MOV [rsp+68h+var_58], rbx
    SETZ r8b
    OR r12d, 0FFFFFFFFh
    MOV word ptr [rsp+68h+var_60], cx
    MOV ebx, r8d
    LEA r15d, [rax+rax]
    JMP loc_417478
loc_417460:
    ADD r15d, r15d
    SUB r13w, 1
    JZ loc_41786F
loc_41746E:
    CMP bx, r13w
    JNB loc_41786F
loc_417478:
    TEST r15w, r15w
    JNS loc_417460
loc_41747E:
    XOR eax, eax
    MOVZX edx, r13w
    MOV esi, (offset aMtuU+4)
    MOV edi, 1
    CALL ___printf_chk
    CMP r13w, bp
    JBE loc_4174AB
loc_417499:
    CMP r13w, 4
    JBE loc_417D03
loc_4174A4:
    LEA ebx, [r13-4]
    MOV ebp, r13d
loc_4174AB:
    CMP r12w, r13w
    CMOVA r12d, r13d
    JMP loc_417460
loc_4174B5:
    XOR r12d, r12d
    MOV r15d, offset buf
    XCHG ax, ax
loc_4174C0:
    MOV esi, r12d
    MOV edi, offset aSupported_0
    CALL sub_4099B0
    TEST r14b, 1
    MOV edx, offset aNot
    MOV rcx, rax
    CMOVNZ rdx, r15
    MOV esi, offset aSS_4
    XOR eax, eax
    MOV edi, 1
    ADD r12d, 1
    SHR r14w, 1
    CALL ___printf_chk
    CMP r12d, 6
    JNZ loc_4174C0
loc_4174FC:
    MOVZX eax, word ptr [rbx+100h]
    TEST al, 2
    JZ loc_417178
loc_41750B:
    TEST al, 10h
    MOV edx, offset aMaximum
    MOV eax, offset aHigh
    CMOVZ rdx, rax
    MOV esi, offset aSecurityLevelS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417178
loc_417531:
    MOVZX edx, dl
    MOV esi, (offset aTotalU+0Bh)
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416DCD
loc_41754A:
    LEA rcx, [rsp+68h+var_41]
    MOVZX esi, ah
    MOVZX edi, ax
    MOV edx, 73h
    CALL sub_416690
    MOV r8d, eax
    JMP loc_416F60
loc_417567:
    CMP word ptr [rbx+0B4h], 0
    JZ loc_417194
loc_417575:
    JMP loc_417148
loc_41757A:
    MOVZX edx, word ptr [rbx+6Eh]
    MOVZX ecx, word ptr [rbx+6Ch]
    MOVZX eax, word ptr [rbx+70h]
    IMUL ecx, edx
    IMUL ecx, eax
    MOVZX eax, word ptr [rbx+72h]
    SHL eax, 10h
    OR esi, eax
    MOV eax, r15d
    SUB eax, ecx
    CDQ 
    XOR eax, edx
    SUB eax, edx
    MOV edx, eax
    MOV eax, esi
    SUB eax, ecx
    MOV ecx, eax
    SAR ecx, 1Fh
    XOR eax, ecx
    SUB eax, ecx
    CMP edx, eax
    CMOVG r15d, esi
    JMP loc_416BCA
loc_4175B9:
    MOVZX edx, word ptr [rbx+5Eh]
    JMP loc_416DA2
loc_4175C2:
    SUB ax, 1
    MOV edi, offset a16Bytes
    MOV eax, offset aUnknown_0
    CMOVNZ rdi, rax
    JMP loc_417359
loc_4175D9:
    CMP cx, 3
    JZ loc_4175F2
loc_4175DF:
    TEST cx, cx
    JNZ loc_4177D2
loc_4175E8:
    CMP bp, 3
    JA loc_4177D2
loc_4175F2:
    MOVZX eax, word ptr [rbx+0A6h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_417D45
loc_41760B:
    MOVZX eax, word ptr [rbx+64h]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_417631
loc_417619:
    TEST byte ptr [rbx+6Ah], 4
    JZ loc_4177BE
loc_417623:
    CMP word ptr [rbx+0B0h], 0
    JZ loc_4177BE
loc_417631:
    MOV ebp, 4
loc_417636:
    TEST cx, cx
    JZ loc_417820
loc_41763F:
    CMP cx, bp
    JB loc_417856
loc_417648:
    MOV edi, 0Ah
    CALL sub_40B110
loc_417652:
    CMP r12w, 0FFFFh
    JZ loc_417E30
loc_41765D:
    MOV edi, offset aConfiguration
    CALL _puts
    CMP bp, 1
    SETZ byte ptr [rsp+68h+var_58]
    JNZ loc_417C83
loc_417676:
    MOVZX r15d, word ptr [rbx]
    MOV r13d, 1
    SHR r15w, 1
    JMP loc_41769E
loc_417690:
    ADD r13d, 1
    SHR r15w, 1
    CMP r13d, 0Fh
    JZ loc_4176D3
loc_41769E:
    TEST r15b, 1
    JZ loc_417690
loc_4176A4:
    MOV esi, r13d
    MOV edi, offset aReserved
    ADD r13d, 1
    CALL sub_4099B0
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    SHR r15w, 1
    CALL ___printf_chk
    CMP r13d, 0Fh
    JNZ loc_41769E
loc_4176D3:
    MOV byte ptr [rsp+68h+var_58], 1
    MOV r13d, 1
    JMP loc_416B1C
loc_4176E3:
    XOR eax, eax
    MOV esi, offset aUsedAtapiForCd
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+92h]
    SUB eax, 1
    CMP ax, 0FFFDh
    JA loc_417B1E
loc_417708:
    MOV esi, offset aSupportedCdRom
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX r12d, word ptr [rbx+92h]
    MOV ebp, 1
    SHR r12w, 1
    JMP loc_417740
loc_417730:
    ADD ebp, 1
    SHR r12w, 1
    CMP ebp, 0Fh
    JZ loc_417B1E
loc_417740:
    TEST r12b, 1
    JZ loc_417730
loc_417746:
    MOV edx, ebp
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417730
loc_41775B:
    MOV r8d, offset aDeterminedByTh
    JMP loc_4173E4
loc_417766:
    TEST al, 1
    MOV edx, offset aWith
    MOV eax, (offset aNo+1)
    CMOVZ rdx, rax
    MOV esi, offset aSDeviceSpecifi
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416D7B
loc_41778C:
    MOVZX edx, ax
    MOV esi, offset aRecommendedUns
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417077
loc_4177A5:
    MOVZX edx, ax
    MOV esi, offset aMinUns
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417067
loc_4177BE:
    MOVZX eax, word ptr [rbx+0FEh]
    AND eax, 3
    SUB ax, 1
    JZ loc_417631
loc_4177D2:
    CMP cx, 2
    JZ loc_417D69
loc_4177DC:
    TEST cx, cx
    JNZ loc_417839
loc_4177E1:
    CMP bp, 2
    JA loc_417839
loc_4177E7:
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_417D9D
loc_4177FC:
    TEST cx, cx
    JNZ loc_417636
loc_417805:
    CMP bp, 1
    JA loc_417636
loc_41780F:
    TEST word ptr [rbx+62h], 0C00h
    MOV ebp, 2
    JZ loc_417D88
loc_417820:
    MOVZX edx, bp
    MOV esi, offset aLikelyUsedU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417652
loc_417839:
    CMP cx, 1
    JNZ loc_4177FC
loc_41783F:
    TEST word ptr [rbx+62h], 0C00h
    JNZ loc_417851
loc_417847:
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_41763F
loc_417851:
    MOV ebp, 2
loc_417856:
    MOVZX edx, bp
    MOV esi, offset aSomeOfU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417652
loc_41786F:
    MOVZX ecx, word ptr [rsp+68h+var_60]
    MOV rbx, [rsp+68h+var_58]
    CMP bp, 2
    MOV eax, 3
    CMOVBE ebp, eax
loc_417885:
    CMP bp, cx
    CMOVB ebp, ecx
    CMP cx, 5
    JZ loc_416994
loc_417895:
    TEST cx, cx
    JNZ loc_4169C6
loc_41789E:
    CMP bp, 5
    JA loc_4169C6
loc_4178A8:
    JMP loc_416994
loc_4178AD:
    CMP byte ptr [rbx+1FEh], 0A5h
    JZ loc_4178CB
loc_4178B6:
    MOVZX eax, word ptr [rbx+0BAh]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_416A05
loc_4178CB:
    MOV ebp, 5
    JMP loc_417856
loc_4178D2:
    CMP word ptr [rbx+60h], 0
    MOV eax, offset buf
    MOV edx, offset aNot
    MOV esi, offset aCanSPerformDou
    MOV edi, 1
    CMOVNZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    MOV esi, offset aRWMultipleSect
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416D96
loc_41790C:
    MOV edi, offset aCommandsFeatur
    XOR r14d, r14d
    CALL _puts
    MOVZX r15d, word ptr [rbx+0A4h]
    MOVZX r12d, word ptr [rbx+0AAh]
    NOP dword ptr [rax+00000000h]
loc_417930:
    MOVZX esi, r14w
    MOV edi, offset byte_4F7BD9
    CALL sub_4099B0
    TEST r15w, r15w
    JS loc_4179A7
loc_417944:
    MOV eax, r14d
    AND eax, 0Fh
    CMP ax, 0Fh
    JZ loc_41796D
loc_417950:
    ADD r15d, r15d
    ADD r12d, r12d
loc_417956:
    CMP r14w, 1Fh
    JZ loc_41798A
loc_41795D:
    ADD r14d, 1
    CMP r14w, 30h
    JNZ loc_417930
loc_417968:
    JMP loc_417115
loc_41796D:
    MOV eax, r14d
    SHR ax, 4
    ADD rax, 53h
    AND eax, 1FFFh
    MOVZX r15d, word ptr [rbx+rax*2]
    MOVZX r12d, word ptr [rbx+rax*2+6]
    JMP loc_417956
loc_41798A:
    MOVZX eax, word ptr [rbx+0A8h]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_417115
loc_41799F:
    MOV r14d, 20h
    JMP loc_417930
loc_4179A7:
    CMP byte ptr [rax], 0
    JZ loc_417944
loc_4179AC:
    TEST r12w, r12w
    MOV ecx, offset buf
    MOV edx, offset asc_50EB23
    CMOVNS rdx, rcx
    MOV esi, offset aSS_4
    MOV rcx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417944
loc_4179D7:
    MOV esi, 1Bh
    MOV edi, offset byte_4F7BD9
    CALL sub_4099B0
    MOV esi, offset aSSupported
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417129
loc_4179FF:
    MOV edi, offset aUnknownDeviceT
    XOR eax, eax
    CALL sub_40A1E0
loc_417A0B:
    TEST ah, 20h
    MOV edx, offset buf
    MOV ecx, offset aAndRequiredByS
    CMOVZ rcx, rdx
    TEST ah, 10h
    MOV edx, 50DDD1h
    MOV eax, offset aEnabled
    MOV esi, offset aCfaPowerMode1S
    MOV edi, 1
    CMOVZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+140h]
    AND ax, 0FFFh
    JZ loc_4171C8
loc_417A4F:
    MOVZX edx, ax
    MOV esi, offset aMaximumCurrent
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4171C8
loc_417A68:
    AND ax, 3FFFh
    CMP ax, 0FFh
    JBE loc_4169AD
loc_417A76:
    TEST cx, cx
    MOV ebp, 6
    JNZ loc_417856
loc_417A84:
    JMP loc_417820
loc_417A89:
    MOVZX edx, ax
    MOV esi, offset aMasterPassword
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_417166
loc_417AA2:
    MOVZX r14d, al
    MOV edi, 9
    CALL sub_40B110
    TEST r14w, r14w
    JZ loc_417ADF
loc_417AB6:
    CMP r14w, 0FFh
    JZ loc_417DC2
loc_417AC2:
    MOVZX eax, r14w
    LEA edx, [rax+rax]
loc_417AC9:
    MOV ecx, offset buf
    MOV esi, offset aUminForSsecuri
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_417ADF:
    MOVZX r12d, r12b
    TEST r12w, r12w
    JZ loc_417B0F
loc_417AE9:
    CMP r12w, 0FFh
    JZ loc_417DCC
loc_417AF5:
    LEA edx, [r12+r12]
loc_417AF9:
    MOV ecx, offset aEnhanced
    MOV esi, offset aUminForSsecuri
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_417B0F:
    MOV edi, 0Ah
    CALL sub_40B110
    JMP loc_417194
loc_417B1E:
    MOV edi, offset buf
    JMP loc_416AFA
loc_417B28:
    TEST al, 2Fh
    JNZ loc_417A76
loc_417B30:
    JMP loc_4169C6
loc_417B35:
    MOV ebp, 5
    JMP loc_417820
loc_417B3F:
    MOV edi, offset aChsAddressingN
    XOR r15d, r15d
    CALL _puts
    JMP loc_416BDE
loc_417B51:
    MOV edi, offset aAtaSwResetRequ
    CALL _puts
    JMP loc_416E8E
loc_417B60:
    MOV edi, offset aUnspecified
    MOV dword ptr [rsp+68h+var_60], ecx
    CALL sub_4099B0
    MOV esi, offset aUsedS
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0A0h]
    MOV ecx, dword ptr [rsp+68h+var_60]
    SUB eax, 1
    CMP ax, 0FFFDh
    JBE loc_417411
loc_417B9A:
    OR r12d, 0FFFFFFFFh
    JMP loc_417885
loc_417BA3:
    LEA rcx, [rsp+68h+var_41]
    MOVZX esi, ah
    MOVZX edi, ax
    MOV edx, 75h
    MOV byte ptr [rsp+68h+var_58], r8b
    CALL sub_416690
    MOVZX r8d, byte ptr [rsp+68h+var_58]
    ADD r8d, eax
    JMP loc_416F83
loc_417BCB:
    MOV edi, (offset aEncodingSNotSu+0Eh)
    CALL _puts
    JMP loc_416E10
loc_417BDA:
    MOV rcx, [rbx+0C8h]
    XOR eax, eax
    MOV esi, offset aLba48UserAddre
    MOV edi, 1
    MOV rdx, rcx
    MOV [rsp+68h+var_50], rcx
    CALL ___printf_chk
    MOV rcx, [rsp+68h+var_50]
    TEST rcx, rcx
    JNZ loc_416C18
loc_417C08:
    JMP loc_416C08
loc_417C0D:
    MOV edi, offset aDirectAccessDe
    CALL sub_4099B0
    MOV rdx, rax
    JMP loc_416AB2
loc_417C1F:
    MOVZX edx, ax
    MOV esi, offset aIordyFlowContr
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41720D
loc_417C38:
    MOVZX edx, ax
    MOV esi, offset aUusToClearBsyA
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416ED7
loc_417C51:
    MOVZX edx, ax
    MOV esi, offset aNoFlowControlU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4171FD
loc_417C6A:
    MOVZX edx, ax
    MOV esi, offset aUusToReleaseBu
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416EC7
loc_417C83:
    MOV r13d, 1
    JMP loc_416B1C
loc_417C8E:
    MOV esi, offset aCompactflashAt
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR r14d, r14d
    MOV [rsp+68h+var_62], 0FFFFh
    MOV ebp, 4
    JMP loc_41686C
loc_417CB3:
    XOR eax, eax
    MOV esi, offset aAdvancedpmLeve
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0B6h]
    MOV edx, eax
    XOR dl, dl
    CMP dx, 4000h
    JZ loc_417DA7
loc_417CDA:
    MOVZX edx, ax
    MOV esi, offset aUnknownSetting
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416DE0
loc_417CF3:
    MOV r8d, offset aWithReadCachin
    MOV ecx, offset aDualPortMultiS
    JMP loc_4172F6
loc_417D03:
    MOV ebp, r13d
    XOR ebx, ebx
    JMP loc_4174AB
loc_417D0D:
    MOV edx, offset buf
    MOV esi, offset aChecksumScorre
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4171D5
loc_417D28:
    CMP cx, 3
    JZ loc_417E26
loc_417D32:
    TEST cx, cx
    JNZ loc_4177D2
loc_417D3B:
    CMP bp, 3
    JA loc_4177D2
loc_417D45:
    TEST ax, 3FFFh
    JNZ loc_417631
loc_417D4F:
    MOVZX eax, word ptr [rbx+0A4h]
    AND ax, 77FFh
    CMP ax, 0Fh
    JA loc_417631
loc_417D64:
    JMP loc_41760B
loc_417D69:
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_4177FC
loc_417D7E:
    MOV ebp, 3
    JMP loc_417856
loc_417D88:
    MOVZX eax, word ptr [rbx+6Ah]
    AND eax, 2
    CMP ax, 1
    SBB ebp, ebp
    ADD ebp, 2
    JMP loc_417820
loc_417D9D:
    MOV ebp, 3
    JMP loc_417820
loc_417DA7:
    MOVZX edx, al
    MOV esi, offset aU0xX
    MOV edi, 1
    MOV ecx, edx
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_416DE0
loc_417DC2:
    MOV edx, 1FCh
    JMP loc_417AC9
loc_417DCC:
    MOV edx, 1FCh
    JMP loc_417AF9
loc_417DD6:
    MOV edx, eax
    AND dx, 3FFFh
    CMP dx, 1Fh
    JBE loc_417D28
loc_417DE7:
    MOV ebp, 5
    JMP loc_417636
loc_417DF1:
    MOV edi, offset aInterleavedDma
    CALL _puts
    JMP loc_416FC0
loc_417E00:
    MOVZX eax, word ptr [rbx+64h]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_417619
loc_417E12:
    MOV ebp, 4
    JMP loc_417856
loc_417E1C:
    MOV edx, offset a10msWithIntrq
    JMP loc_417336
loc_417E26:
    TEST dx, dx
    JNZ loc_417E12
loc_417E2B:
    JMP loc_417D4F
loc_417E30:
    CMP bp, 4
    JBE loc_417E58
loc_417E36:
    MOV edi, offset aConfiguration
    LEA r12d, [rbp-3]
    MOV r13d, 1
    CALL _puts
    CMP bp, 1
    SETZ byte ptr [rsp+68h+var_58]
    JMP loc_416B1C
loc_417E58:
    MOV r12d, 1
    JMP loc_41765D
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'ConditionalBranching', 'ErrorHandling'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x3AF', '0x3B0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Assertion', 'inferred_category': 'Utility/ErrorChecking'}

##### T 114 - identify
```assembly
loc_41B420:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 0Ah
    SUB rsp, 38h
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    MOV [rsp+68h+var_41], 0
    CALL sub_40C7E0
    MOVZX esi, word ptr [rbx]
    TEST si, si
    JS loc_41B690
loc_41B45C:
    MOV esi, offset aAtaDeviceWith
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR r14d, r14d
    MOV [rsp+68h+var_62], 0FFFFh
    MOV ebp, 1
loc_41B47C:
    TEST byte ptr [rbx], 80h
    MOV eax, offset data
    MOV edx, offset aNon
    MOV esi, offset aSremovableMedi
    MOV edi, 1
    CMOVNZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+4]
    CMP ax, 37C8h
    JZ loc_41B650
loc_41B4AC:
    CMP ax, 738Ch
    JZ loc_41B650
loc_41B4B6:
    CMP ax, 0C837h
    JZ loc_41B65E
loc_41B4C0:
    CMP ax, 8C73h
    JZ loc_41B65E
loc_41B4CA:
    MOV ecx, 14h
    MOV edx, offset aModelNumber
    MOV esi, 1Bh
    MOV rdi, rbx
    CALL sub_41B380
    MOV ecx, 0Ah
    MOV edx, offset aSerialNumber
    MOV esi, 0Ah
    MOV rdi, rbx
    CALL sub_41B380
    MOV ecx, 4
    MOV edx, offset aFirmwareRevisi
    MOV esi, 17h
    MOV rdi, rbx
    CALL sub_41B380
    MOV ecx, 14h
    MOV edx, offset aMediaSerialNum
    MOV esi, 0B0h
    MOV rdi, rbx
    CALL sub_41B380
    MOV ecx, 0Ah
    MOV edx, offset aMediaManufactu
    MOV esi, 0C4h
    MOV rdi, rbx
    CALL sub_41B380
    XOR eax, eax
    MOV esi, offset aStandards
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+68h+var_62], 5
    JZ loc_41B6E3
loc_41B55A:
    MOVZX esi, word ptr [rbx+0A2h]
    LEA eax, [rsi-1]
    CMP ax, 21h
    JA loc_41B58A
loc_41B56A:
    CMP bp, 2
    MOV eax, 3
    CMOVBE ebp, eax
    MOVSXD rax, esi
    MOVSX cx, ds:byte_545A85[rax]
    TEST cx, cx
    JNZ loc_41CB9A
loc_41B58A:
    MOVZX eax, word ptr [rbx+0A0h]
    XOR ecx, ecx
    OR r12d, 0FFFFFFFFh
    SUB eax, 1
    CMP ax, 0FFFDh
    JBE loc_41C07D
loc_41B5A4:
    MOVZX eax, word ptr [rbx+0A6h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_41CAC8
loc_41B5BD:
    MOVZX eax, word ptr [rbx+0A8h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_41CB7E
loc_41B5D6:
    CMP cx, 4
    JZ loc_41C6DE
loc_41B5E0:
    TEST cx, cx
    JNZ loc_41C249
loc_41B5E9:
    CMP bp, 4
    JA loc_41C249
loc_41B5F3:
    CMP byte ptr [rbx+1FEh], 0A5h
    JZ loc_41CBEF
loc_41B600:
    MOVZX eax, word ptr [rbx+0BAh]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_41CBEF
loc_41B615:
    MOVZX eax, word ptr [rbx+0A6h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_41CE2C
loc_41B62E:
    CMP cx, 3
    JZ loc_41CE56
loc_41B638:
    CMP bp, 3
    JA loc_41C603
loc_41B642:
    TEST cx, cx
    JZ loc_41C27B
loc_41B64B:
    JMP loc_41C603
loc_41B650:
    MOV edi, offset aPowersUpInStan
    CALL _puts
    MOVZX eax, word ptr [rbx+4]
loc_41B65E:
    CMP ax, 37C8h
    JZ loc_41B673
loc_41B664:
    CMP ax, 8C73h
    MOV ebp, 5
    JNZ loc_41B4CA
loc_41B673:
    TEST byte ptr [rbx], 4
    MOV ebp, 5
    JZ loc_41B4CA
loc_41B681:
    MOV edi, offset aWarningIdRespo
    CALL _puts
    JMP loc_41B4CA
loc_41B690:
    CMP si, 848Ah
    JZ loc_41CCE4
loc_41B69B:
    TEST si, 4000h
    JNZ loc_41CA5F
loc_41B6A6:
    AND esi, 1F00h
    MOV edx, offset aUnknown_0
    SAR esi, 8
    CMP esi, 0Fh
    MOV [rsp+68h+var_62], si
    JLE loc_41CC63
loc_41B6C2:
    MOV esi, offset aAtapiSWith
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r14d, 1
    MOV ebp, 3
    JMP loc_41B47C
loc_41B6E3:
    CMP word ptr [rbx+94h], 9
    JZ loc_41C3BA
loc_41B6F1:
    MOVZX eax, word ptr [rbx+92h]
    MOV edi, offset aLikelyUsedCdRo
    SUB eax, 1
    CMP ax, 0FFFDh
    JBE loc_41C3DF
loc_41B70A:
    CALL _puts
    MOV edi, offset aConfiguration
    MOV ebp, 2
    XOR r13d, r13d
    CALL _puts
    MOV r12d, 1
    MOV byte ptr [rsp+68h+var_58], 0
loc_41B72C:
    CMP r14w, 1
    JZ loc_41BF78
loc_41B737:
    MOV eax, [rbx+78h]
    CMP eax, 0FBFC10h
    MOV dword ptr [rsp+68h+var_60], eax
    JBE loc_41B750
loc_41B745:
    CMP word ptr [rbx+2], 0
    JZ loc_41CBDD
loc_41B750:
    MOVZX r15d, word ptr [rbx+6Ah]
    AND r15w, 1
    JZ loc_41BEA6
loc_41B760:
    MOVZX eax, word ptr [rbx+70h]
    MOVZX ecx, word ptr [rbx+6Ch]
    MOV esi, offset aLogicalMaxCurr
    MOVZX edx, word ptr [rbx+2]
    MOVZX r9d, word ptr [rbx+6Eh]
    MOV edi, 1
    MOVZX r8d, word ptr [rbx+6]
    PUSH rax
    MOVZX eax, word ptr [rbx+0Ch]
    PUSH rax
    XOR eax, eax
    CALL ___printf_chk
    CMP r12w, 1
    POP rcx
    POP rsi
    JNZ loc_41B7C8
loc_41B796:
    MOVZX eax, word ptr [rbx+8]
    TEST ax, ax
    JNZ loc_41B7A6
loc_41B79F:
    CMP word ptr [rbx+0Ah], 0
    JZ loc_41B7BE
loc_41B7A6:
    MOVZX ecx, word ptr [rbx+0Ah]
    MOVZX edx, ax
    MOV esi, offset aBytesTrackUByt
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_41B7BE:
    TEST r15w, r15w
    JZ loc_41BED9
loc_41B7C8:
    CMP bp, 2
    MOVZX esi, word ptr [rbx+74h]
    MOV r15d, [rbx+72h]
    JBE loc_41C1EA
loc_41B7DA:
    MOV edx, r15d
    MOV esi, offset aChsCurrentAddr
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_41B7EE:
    MOV edx, dword ptr [rsp+68h+var_60]
    XOR eax, eax
    MOV esi, offset aLbaUserAddress
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C400h
    CMP ax, 4400h
    JZ loc_41CC30
loc_41B818:
    MOV esi, dword ptr [rsp+68h+var_60]
    MOV ecx, r15d
    MOV eax, esi
    CMP r15d, esi
    CMOVB rcx, rax
loc_41B828:
    MOV rdx, rcx
    MOV esi, offset aDeviceSizeWith
    MOV edi, 1
    SHR rdx, 0Bh
    XOR eax, eax
    MOV [rsp+68h+var_60], rcx
    CALL ___printf_chk
    MOV rcx, [rsp+68h+var_60]
    XOR edx, edx
    MOV esi, offset aDeviceSizeWith_0
    MOV edi, 1
    SHL rcx, 9
    MOV rax, rcx
    MOV ecx, 0F4240h
    MOV [rsp+68h+var_60], rax
    DIV rcx
    MOV r15, rax
    MOV rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    CMP r15, 3E8h
    JBE loc_41BE97
loc_41B884:
    MOV rax, [rsp+68h+var_60]
    MOV ecx, 3B9ACA00h
    XOR edx, edx
    MOV esi, offset aLuGb
    MOV edi, 1
    DIV rcx
    MOV rdx, rax
    XOR eax, eax
    CALL ___printf_chk
loc_41B8A7:
    MOV esi, offset aCapabilities
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+62h]
loc_41B8BC:
    TEST ah, 2
    JNZ loc_41BF13
loc_41B8C5:
    CMP bp, 1
    JZ loc_41BF29
loc_41B8CF:
    MOVZX edx, word ptr [rbx+62h]
    MOV eax, offset data
    MOV ecx, offset aNot
    MOV esi, offset aIordySCanSBeDi
    MOV edi, 1
    TEST dh, 4
    CMOVNZ rcx, rax
    AND dh, 8
    MOV edx, offset aMayBe
    CMOVNZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
loc_41B901:
    CMP r12w, 1
    JZ loc_41BAF6
loc_41B90C:
    CMP r12w, 3
    JBE loc_41BB2B
loc_41B917:
    CMP bp, 3
    SETNBE r15b
    AND r15b, r13b
    MOV byte ptr [rsp+68h+var_60], r15b
    JNZ loc_41BEF0
loc_41B92D:
    TEST r14w, r14w
    JNZ loc_41BA8F
loc_41B937:
    CMP byte ptr [rsp+68h+var_58], 0
    JNZ loc_41C933
loc_41B942:
    TEST byte ptr [rbx+63h], 20h
    MOV eax, offset aVendor
    MOV edx, offset aStandard
    MOV esi, offset aStandbyTimerVa
    MOV edi, 1
    CMOVZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    CMP bp, 3
    JBE loc_41B981
loc_41B96B:
    MOVZX eax, word ptr [rbx+64h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_41C597
loc_41B981:
    MOV edi, 0Ah
    CALL sub_40C7E0
loc_41B98B:
    XOR eax, eax
    MOV esi, offset aRWMultipleSect
    MOV edi, 1
    CALL ___printf_chk
    CMP bp, 2
    JA loc_41C229
loc_41B9A6:
    MOVZX edx, word ptr [rbx+5Eh]
    TEST dl, dl
    JZ loc_41CC21
loc_41B9B2:
    MOVZX edx, dl
    XOR eax, eax
    MOV esi, offset aMaxUCurrent
    MOV edi, 1
    CALL ___printf_chk
    MOVZX edx, word ptr [rbx+76h]
    TEST dh, 1
    JNZ loc_41C1A1
loc_41B9D3:
    MOV edi, (offset asc_563847+7)
    CALL _puts
loc_41B9DD:
    CMP bp, 3
    JBE loc_41BA20
loc_41B9E3:
    TEST byte ptr [rbx+0A6h], 8
    JNZ loc_41CD09
loc_41B9F0:
    CMP bp, 5
    JBE loc_41BA20
loc_41B9F6:
    MOVZX eax, word ptr [rbx+0BCh]
    TEST ax, ax
    JZ loc_41BA20
loc_41BA02:
    MOVZX ecx, al
    MOVZX edx, ah
    MOV esi, offset aRecommendedAco
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP dword ptr [rax+00000000h]
loc_41BA20:
    XOR eax, eax
    MOV esi, offset aDma
    MOV edi, 1
    CALL ___printf_chk
    TEST byte ptr [rbx+63h], 1
    JZ loc_41BEE1
loc_41BA3B:
    MOVZX edx, word ptr [rbx+68h]
    TEST dx, dx
    JZ loc_41BB60
loc_41BA48:
    MOVZX eax, word ptr [rbx+7Ch]
    TEST ax, ax
    JNZ loc_41C1BA
loc_41BA55:
    CMP word ptr [rbx+7Eh], 0
    JZ loc_41BB4E
loc_41BA60:
    MOVZX eax, word ptr [rbx+7Eh]
    XOR r8d, r8d
loc_41BA67:
    LEA rcx, [rsp+68h+var_41]
    MOVZX esi, ah
    MOVZX edi, ax
    MOV edx, 6Dh
    MOV byte ptr [rsp+68h+var_58], r8b
    CALL sub_41B040
    MOVZX r8d, byte ptr [rsp+68h+var_58]
    ADD r8d, eax
    JMP loc_41BB7D
loc_41BA8F:
    TEST r13b, r13b
    JZ loc_41BA9E
loc_41BA94:
    TEST byte ptr [rbx+63h], 10h
    JNZ loc_41CB8B
loc_41BA9E:
    CMP word ptr [rbx+8Eh], 0
    JNZ loc_41BAB6
loc_41BAA8:
    CMP word ptr [rbx+90h], 0
    JZ loc_41BA20
loc_41BAB6:
    XOR eax, eax
    MOV esi, offset aOverlapSupport
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+8Eh]
    TEST ax, ax
    JNZ loc_41CCA7
loc_41BAD7:
    MOVZX eax, word ptr [rbx+90h]
    TEST ax, ax
    JNZ loc_41CC8E
loc_41BAE7:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_41BA20
loc_41BAF6:
    MOVZX eax, word ptr [rbx+2Ah]
    LEA edx, [rax-1]
    CMP dx, 0FFFDh
    JA loc_41BB2B
loc_41BB03:
    PXOR xmm0, xmm0
    MOV esi, offset aBufferSize1fkb
    MOV edi, 1
    CVTSI2SS xmm0, eax
    MOV eax, 1
    MULSS xmm0, cs:dword_55B990
    CVTSS2SD xmm0, xmm0
    CALL ___printf_chk
loc_41BB2B:
    MOVZX edx, word ptr [rbx+2Ch]
    TEST dx, dx
    JZ loc_41B917
loc_41BB38:
    MOV esi, offset aBytesAvailOnRW
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B917
loc_41BB4E:
    MOVZX edx, dh
    MOV esi, offset aSdmaU
    MOV edi, 1
    CALL ___printf_chk
loc_41BB60:
    MOVZX eax, word ptr [rbx+7Ch]
    XOR r8d, r8d
    TEST ax, ax
    JNZ loc_41C1BA
loc_41BB70:
    MOVZX eax, word ptr [rbx+7Eh]
    TEST ax, ax
    JNZ loc_41BA67
loc_41BB7D:
    TEST byte ptr [rbx+6Ah], 4
    JZ loc_41BB93
loc_41BB83:
    MOVZX eax, word ptr [rbx+0B0h]
    TEST ax, ax
    JNZ loc_41CBF9
loc_41BB93:
    TEST r8b, r8b
    JNZ loc_41BB9F
loc_41BB98:
    CMP [rsp+68h+var_41], 0
    JNZ loc_41BBB0
loc_41BB9F:
    MOV esi, offset asc_55CEAD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_41BBB0:
    MOV edi, 0Ah
    CALL sub_40C7E0
    TEST r14w, r14w
    JZ loc_41BBD0
loc_41BBC0:
    TEST r13b, r13b
    JZ loc_41BBD0
loc_41BBC5:
    CMP word ptr [rbx+62h], 0
    JS loc_41CE47
loc_41BBD0:
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_41BBF8
loc_41BBD6:
    CMP word ptr [rbx+82h], 0
    JNZ loc_41BDFC
loc_41BBE4:
    CMP word ptr [rbx+84h], 0
    JNZ loc_41BDFC
loc_41BBF2:
    NOP word ptr [rax+rax+00h]
loc_41BBF8:
    XOR eax, eax
    MOV esi, offset aPio
    MOV edi, 1
    CALL ___printf_chk
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_41BE3C
loc_41BC13:
    MOVZX eax, byte ptr [rbx+80h]
    TEST ax, ax
    JZ loc_41BE3C
loc_41BC23:
    LEA r12d, ds:7[rax*8]
    XOR edx, edx
    XOR eax, eax
    MOV esi, offset aPioD
    MOV edi, 1
    SHR r12w, 1
    CALL ___printf_chk
    TEST r12b, 1
    JNZ loc_41C561
loc_41BC4C:
    SHR r12w, 1
    TEST r12b, 1
    JNZ loc_41C546
loc_41BC5A:
    SHR r12w, 1
    TEST r12b, 1
    JNZ loc_41C52B
loc_41BC68:
    SHR r12w, 1
    TEST r12b, 1
    JNZ loc_41C510
loc_41BC76:
    SHR r12w, 1
    TEST r12b, 1
    JNZ loc_41C4F5
loc_41BC84:
    SHR r12w, 1
    TEST r12b, 1
    JNZ loc_41C4DA
loc_41BC92:
    SHR r12w, 1
    TEST r12b, 1
    JNZ loc_41C4BF
loc_41BCA0:
    AND r12b, 2
    JNZ loc_41C57C
loc_41BCAA:
    MOV edi, 0Ah
    CALL sub_40C7E0
loc_41BCB4:
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_41BCE0
loc_41BCBA:
    CMP word ptr [rbx+86h], 0
    JNZ loc_41BDBC
loc_41BCC8:
    CMP word ptr [rbx+88h], 0
    JNZ loc_41BDBC
loc_41BCD6:
    NOP word ptr [rax+rax+00000000h]
loc_41BCE0:
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_41C96D
loc_41BCF5:
    MOVZX eax, word ptr [rbx+0FEh]
    AND eax, 3
    CMP ax, 1
    JZ loc_41CA37
loc_41BD09:
    CMP byte ptr [rsp+68h+var_60], 0
    JZ loc_41BD74
loc_41BD10:
    CMP word ptr [rbx+100h], 0
    JNZ loc_41BD28
loc_41BD1A:
    CMP word ptr [rbx+0B2h], 0
    JZ loc_41C1D7
loc_41BD28:
    MOV edi, offset aSecurity
    CALL _puts
    MOVZX eax, word ptr [rbx+0B8h]
    LEA edx, [rax-1]
    CMP dx, 0FFFDh
    JBE loc_41CB65
loc_41BD46:
    MOVZX r14d, word ptr [rbx+100h]
    TEST r14w, r14w
    JNZ loc_41C11D
loc_41BD58:
    MOVZX eax, word ptr [rbx+0B2h]
    MOVZX r12d, word ptr [rbx+0B4h]
    MOV edx, eax
    OR edx, r12d
    TEST dl, dl
    JNZ loc_41CAE9
loc_41BD74:
    MOVZX eax, word ptr [rbx+0BAh]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_41C021
loc_41BD8D:
    CMP bp, 4
    JBE loc_41BDB5
loc_41BD93:
    TEST r13b, r13b
    JZ loc_41BDB5
loc_41BD98:
    MOVZX eax, word ptr [rbx+140h]
    TEST ax, ax
    JS loc_41CA6B
loc_41BDA8:
    CMP byte ptr [rbx+1FEh], 0A5h
    JZ loc_41CD63
loc_41BDB5:
    XOR edi, edi
    CALL _exit
loc_41BDBC:
    XOR eax, eax
    MOV esi, offset aCycleTime
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+86h]
    TEST ax, ax
    JNZ loc_41CCC0
loc_41BDDD:
    MOVZX eax, word ptr [rbx+88h]
    TEST ax, ax
    JNZ loc_41CC75
loc_41BDED:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_41BCE0
loc_41BDFC:
    XOR eax, eax
    MOV esi, offset aCycleTime
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+82h]
    TEST ax, ax
    JNZ loc_41C5D6
loc_41BE1D:
    MOVZX eax, word ptr [rbx+84h]
    TEST ax, ax
    JNZ loc_41C5BD
loc_41BE2D:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_41BBF8
loc_41BE3C:
    CMP r12w, 4
    JBE loc_41BE4B
loc_41BE43:
    CMP [rsp+68h+var_62], 5
    JNZ loc_41BE88
loc_41BE4B:
    TEST word ptr [rbx+66h], 0FF00h
    JZ loc_41BE88
loc_41BE53:
    XOR r12d, r12d
    NOP word ptr [rax+rax+00000000h]
loc_41BE60:
    MOVZX edx, r12w
    XOR eax, eax
    MOV esi, offset aPioD
    MOV edi, 1
    ADD r12d, 1
    CALL ___printf_chk
    MOVZX eax, byte ptr [rbx+67h]
    CMP ax, r12w
    JNB loc_41BE60
loc_41BE83:
    JMP loc_41BCAA
loc_41BE88:
    MOV edi, offset aUnknown_0
    CALL _puts
    JMP loc_41BCB4
loc_41BE97:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_41B8A7
loc_41BEA6:
    MOVZX eax, word ptr [rbx+0Ch]
    MOVZX edx, word ptr [rbx+2]
    XOR r9d, r9d
    MOVZX r8d, word ptr [rbx+6]
    PUSH 0
    XOR ecx, ecx
    MOV esi, offset aLogicalMaxCurr
    MOV edi, 1
    PUSH rax
    XOR eax, eax
    CALL ___printf_chk
    CMP r12w, 1
    POP rax
    POP rdx
    JZ loc_41B796
loc_41BED9:
    XOR r15d, r15d
    JMP loc_41B7EE
loc_41BEE1:
    MOV edi, (offset aEncodingSNotSu+0Eh)
    CALL _puts
    JMP loc_41BBF8
loc_41BEF0:
    MOVZX edx, word ptr [rbx+96h]
    MOV esi, offset aQueueDepthU
    MOV edi, 1
    XOR eax, eax
    AND edx, 1Fh
    ADD edx, 1
    CALL ___printf_chk
    JMP loc_41B92D
loc_41BF13:
    MOV esi, offset aLba
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B8C5
loc_41BF29:
    MOV edi, offset aNoIordy
    CALL _puts
    MOVZX edx, word ptr [rbx+28h]
    TEST dx, dx
    JZ loc_41B901
loc_41BF40:
    CMP dx, 2
    JA loc_41CD49
loc_41BF4A:
    CMP dx, 1
    MOV ecx, offset aSinglePortSing
    MOV eax, offset aDualPortMultiS
    MOV r8d, offset data
    CMOVNZ rcx, rax
loc_41BF62:
    MOV esi, offset aBufferType04xS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B901
loc_41BF78:
    MOVZX eax, word ptr [rbx]
    MOV edx, offset a3ms
    AND ax, 60h
    JZ loc_41BFA2
loc_41BF86:
    CMP ax, 20h
    JZ loc_41CE72
loc_41BF90:
    CMP ax, 40h
    MOV edx, offset a50us
    MOV eax, offset aUnknown_0
    CMOVNZ rdx, rax
loc_41BFA2:
    MOV edi, 1
    XOR eax, eax
    MOV esi, offset aDrqResponseSPa
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx]
    MOV edi, offset a12Bytes
    AND ax, 3
    JNZ loc_41C232
loc_41BFC5:
    CALL _puts
    XOR eax, eax
    MOV esi, offset aCapabilities
    MOV edi, 1
    CALL ___printf_chk
    TEST r13b, r13b
    MOVZX eax, word ptr [rbx+62h]
    JZ loc_41BFFE
loc_41BFE4:
    TEST ah, 40h
    JZ loc_41BFFE
loc_41BFE9:
    MOV esi, offset aCmdQueuing
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+62h]
loc_41BFFE:
    TEST ah, 20h
    JZ loc_41B8BC
loc_41C007:
    MOV esi, offset aCmdOverlap
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+62h]
    JMP loc_41B8BC
loc_41C021:
    MOV edx, eax
    MOV ecx, eax
    SHR dx, 8
    AND cx, 1
    CMOVNZ edx, eax
    AND edx, 6
    CMP dx, 2
    JZ loc_41C4B4
loc_41C03D:
    CMP dx, 4
    MOV r8d, offset aDeterminedByCs
    MOV edx, offset data
    CMOVNZ r8, rdx
loc_41C050:
    XOR ecx, 1
    MOV edx, offset aAbove
    TEST ah, 20h
    MOV eax, offset aBelow
    MOVZX ecx, cx
    MOV esi, offset aHwResetResults
    CMOVZ rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BD8D
loc_41C07D:
    XOR eax, eax
    MOV esi, offset aSupported
    MOV edi, 1
    MOV dword ptr [rsp+68h+var_60], ecx
    MOV r13d, 0Eh
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0A0h]
    MOV ecx, dword ptr [rsp+68h+var_60]
    XOR r8d, r8d
    CMP bp, 5
    MOV [rsp+68h+var_58], rbx
    SETZ r8b
    OR r12d, 0FFFFFFFFh
    MOV word ptr [rsp+68h+var_60], cx
    MOV ebx, r8d
    LEA r15d, [rax+rax]
    JMP loc_41C0E0
loc_41C0C8:
    ADD r15d, r15d
    SUB r13w, 1
    JZ loc_41C6A0
loc_41C0D6:
    CMP bx, r13w
    JNB loc_41C6A0
loc_41C0E0:
    TEST r15w, r15w
    JNS loc_41C0C8
loc_41C0E6:
    XOR eax, eax
    MOVZX edx, r13w
    MOV esi, (offset aMtuU+4)
    MOV edi, 1
    CALL ___printf_chk
    CMP r13w, bp
    JBE loc_41C113
loc_41C101:
    CMP r13w, 4
    JBE loc_41CD59
loc_41C10C:
    LEA ebx, [r13-4]
    MOV ebp, r13d
loc_41C113:
    CMP r12w, r13w
    CMOVA r12d, r13d
    JMP loc_41C0C8
loc_41C11D:
    XOR r12d, r12d
    MOV r15d, offset data
    NOP word ptr [rax+rax+00000000h]
loc_41C130:
    MOV esi, r12d
    MOV edi, offset aSupported_0
    CALL sub_40A360
    TEST r14b, 1
    MOV edx, offset aNot
    MOV rcx, rax
    CMOVNZ rdx, r15
    MOV esi, offset aSS_4
    XOR eax, eax
    MOV edi, 1
    ADD r12d, 1
    SHR r14w, 1
    CALL ___printf_chk
    CMP r12d, 6
    JNZ loc_41C130
loc_41C16C:
    MOVZX eax, word ptr [rbx+100h]
    TEST al, 2
    JZ loc_41BD58
loc_41C17B:
    TEST al, 10h
    MOV edx, offset aMaximum
    MOV eax, offset aHigh
    CMOVZ rdx, rax
    MOV esi, offset aSecurityLevelS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BD58
loc_41C1A1:
    MOVZX edx, dl
    MOV esi, (offset aTotalU+0Bh)
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B9DD
loc_41C1BA:
    LEA rcx, [rsp+68h+var_41]
    MOVZX esi, ah
    MOVZX edi, ax
    MOV edx, 73h
    CALL sub_41B040
    MOV r8d, eax
    JMP loc_41BB70
loc_41C1D7:
    CMP word ptr [rbx+0B4h], 0
    JZ loc_41BD74
loc_41C1E5:
    JMP loc_41BD28
loc_41C1EA:
    MOVZX edx, word ptr [rbx+6Eh]
    MOVZX ecx, word ptr [rbx+6Ch]
    MOVZX eax, word ptr [rbx+70h]
    IMUL ecx, edx
    IMUL ecx, eax
    MOVZX eax, word ptr [rbx+72h]
    SHL eax, 10h
    OR esi, eax
    MOV eax, r15d
    SUB eax, ecx
    CDQ 
    XOR eax, edx
    SUB eax, edx
    MOV edx, eax
    MOV eax, esi
    SUB eax, ecx
    MOV ecx, eax
    SAR ecx, 1Fh
    XOR eax, ecx
    SUB eax, ecx
    CMP edx, eax
    CMOVG r15d, esi
    JMP loc_41B7DA
loc_41C229:
    MOVZX edx, word ptr [rbx+5Eh]
    JMP loc_41B9B2
loc_41C232:
    SUB ax, 1
    MOV edi, offset a16Bytes
    MOV eax, offset aUnknown_0
    CMOVNZ rdi, rax
    JMP loc_41BFC5
loc_41C249:
    CMP cx, 3
    JZ loc_41C262
loc_41C24F:
    TEST cx, cx
    JNZ loc_41C603
loc_41C258:
    CMP bp, 3
    JA loc_41C603
loc_41C262:
    MOVZX eax, word ptr [rbx+0A6h]
    MOV edx, eax
    AND dx, 0C000h
    CMP dx, 4000h
    JZ loc_41CD9B
loc_41C27B:
    MOVZX eax, word ptr [rbx+64h]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_41C2A1
loc_41C289:
    TEST byte ptr [rbx+6Ah], 4
    JZ loc_41C5EF
loc_41C293:
    CMP word ptr [rbx+0B0h], 0
    JZ loc_41C5EF
loc_41C2A1:
    MOV ebp, 4
loc_41C2A6:
    TEST cx, cx
    JZ loc_41C651
loc_41C2AF:
    CMP cx, bp
    JB loc_41C687
loc_41C2B8:
    MOV edi, 0Ah
    CALL sub_40C7E0
loc_41C2C2:
    CMP r12w, 0FFFFh
    JZ loc_41D004
loc_41C2CD:
    MOV edi, offset aConfiguration
    CALL _puts
    CMP bp, 1
    SETZ byte ptr [rsp+68h+var_58]
    JNZ loc_41CCD9
loc_41C2E6:
    MOVZX r13d, word ptr [rbx]
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C72B
loc_41C2F8:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C7CB
loc_41C306:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C7A3
loc_41C314:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C77B
loc_41C322:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C753
loc_41C330:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C90B
loc_41C33E:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C8E3
loc_41C34C:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C8BB
loc_41C35A:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C893
loc_41C368:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C86B
loc_41C376:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C843
loc_41C384:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C81B
loc_41C392:
    SHR r13w, 1
    TEST r13b, 1
    JNZ loc_41C7F3
loc_41C3A0:
    AND r13b, 2
    JNZ loc_41C703
loc_41C3AA:
    MOV byte ptr [rsp+68h+var_58], 1
    MOV r13d, 1
    JMP loc_41B72C
loc_41C3BA:
    XOR eax, eax
    MOV esi, offset aUsedAtapiForCd
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+92h]
    SUB eax, 1
    CMP ax, 0FFFDh
    JA loc_41C4AA
loc_41C3DF:
    XOR eax, eax
    MOV esi, offset aSupportedCdRom
    MOV edi, 1
    CALL ___printf_chk
    MOVZX ebp, word ptr [rbx+92h]
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CFDB
loc_41C404:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CFC0
loc_41C411:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CFA5
loc_41C41E:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CF8A
loc_41C42B:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CF6F
loc_41C438:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CF54
loc_41C445:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CF39
loc_41C452:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CF1E
loc_41C45F:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CF03
loc_41C46C:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CEE8
loc_41C479:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CECD
loc_41C486:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CEB2
loc_41C493:
    SHR bp, 1
    TEST bpl, 1
    JNZ loc_41CE97
loc_41C4A0:
    AND bpl, 2
    JNZ loc_41CE7C
loc_41C4AA:
    MOV edi, offset data
    JMP loc_41B70A
loc_41C4B4:
    MOV r8d, offset aDeterminedByTh
    JMP loc_41C050
loc_41C4BF:
    MOV edx, 7
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BCA0
loc_41C4DA:
    MOV edx, 6
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BC92
loc_41C4F5:
    MOV edx, 5
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BC84
loc_41C510:
    MOV edx, 4
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BC76
loc_41C52B:
    MOV edx, 3
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BC68
loc_41C546:
    MOV edx, 2
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BC5A
loc_41C561:
    MOV edx, 1
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BC4C
loc_41C57C:
    MOV edx, 8
    MOV esi, offset aPioD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BCAA
loc_41C597:
    TEST al, 1
    MOV edx, offset aWith
    MOV eax, (offset aNo+1)
    CMOVZ rdx, rax
    MOV esi, offset aSDeviceSpecifi
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B98B
loc_41C5BD:
    MOVZX edx, ax
    MOV esi, offset aRecommendedUns
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BE2D
loc_41C5D6:
    MOVZX edx, ax
    MOV esi, offset aMinUns
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BE1D
loc_41C5EF:
    MOVZX eax, word ptr [rbx+0FEh]
    AND eax, 3
    SUB ax, 1
    JZ loc_41C2A1
loc_41C603:
    CMP cx, 2
    JZ loc_41CDBF
loc_41C60D:
    TEST cx, cx
    JNZ loc_41C66A
loc_41C612:
    CMP bp, 2
    JA loc_41C66A
loc_41C618:
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C000h
    CMP ax, 4000h
    JZ loc_41CDF3
loc_41C62D:
    TEST cx, cx
    JNZ loc_41C2A6
loc_41C636:
    CMP bp, 1
    JA loc_41C2A6
loc_41C640:
    TEST word ptr [rbx+62h], 0C00h
    MOV ebp, 2
    JZ loc_41CDDE
loc_41C651:
    MOVZX edx, bp
    MOV esi, offset aLikelyUsedU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C2C2
loc_41C66A:
    CMP cx, 1
    JNZ loc_41C62D
loc_41C670:
    TEST word ptr [rbx+62h], 0C00h
    JNZ loc_41C682
loc_41C678:
    TEST byte ptr [rbx+6Ah], 2
    JZ loc_41C2AF
loc_41C682:
    MOV ebp, 2
loc_41C687:
    MOVZX edx, bp
    MOV esi, offset aSomeOfU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C2C2
loc_41C6A0:
    MOVZX ecx, word ptr [rsp+68h+var_60]
    MOV rbx, [rsp+68h+var_58]
    CMP bp, 2
    MOV eax, 3
    CMOVBE ebp, eax
loc_41C6B6:
    CMP bp, cx
    CMOVB ebp, ecx
    CMP cx, 5
    JZ loc_41B5A4
loc_41C6C6:
    TEST cx, cx
    JNZ loc_41B5D6
loc_41C6CF:
    CMP bp, 5
    JA loc_41B5D6
loc_41C6D9:
    JMP loc_41B5A4
loc_41C6DE:
    CMP byte ptr [rbx+1FEh], 0A5h
    JZ loc_41C6FC
loc_41C6E7:
    MOVZX eax, word ptr [rbx+0BAh]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_41B615
loc_41C6FC:
    MOV ebp, 5
    JMP loc_41C687
loc_41C703:
    MOV esi, 0Eh
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C3AA
loc_41C72B:
    MOV esi, 1
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C2F8
loc_41C753:
    MOV esi, 5
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C330
loc_41C77B:
    MOV esi, 4
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C322
loc_41C7A3:
    MOV esi, 3
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C314
loc_41C7CB:
    MOV esi, 2
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C306
loc_41C7F3:
    MOV esi, 0Dh
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C3A0
loc_41C81B:
    MOV esi, 0Ch
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C392
loc_41C843:
    MOV esi, 0Bh
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C384
loc_41C86B:
    MOV esi, 0Ah
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C376
loc_41C893:
    MOV esi, 9
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C368
loc_41C8BB:
    MOV esi, 8
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C35A
loc_41C8E3:
    MOV esi, 7
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C34C
loc_41C90B:
    MOV esi, 6
    MOV edi, offset aReserved
    CALL sub_40A360
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C33E
loc_41C933:
    CMP word ptr [rbx+60h], 0
    MOV eax, offset data
    MOV edx, offset aNot
    MOV esi, offset aCanSPerformDou
    MOV edi, 1
    CMOVNZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    MOV esi, offset aRWMultipleSect
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B9A6
loc_41C96D:
    MOV edi, offset aCommandsFeatur
    XOR r14d, r14d
    CALL _puts
    MOVZX r15d, word ptr [rbx+0A4h]
    MOVZX r12d, word ptr [rbx+0AAh]
    NOP word ptr [rax+rax+00h]
loc_41C990:
    MOVZX esi, r14w
    MOV edi, offset byte_545739
    CALL sub_40A360
    TEST r15w, r15w
    JS loc_41CA07
loc_41C9A4:
    MOV eax, r14d
    AND eax, 0Fh
    CMP ax, 0Fh
    JZ loc_41C9CD
loc_41C9B0:
    ADD r15d, r15d
    ADD r12d, r12d
loc_41C9B6:
    CMP r14w, 1Fh
    JZ loc_41C9EA
loc_41C9BD:
    ADD r14d, 1
    CMP r14w, 30h
    JNZ loc_41C990
loc_41C9C8:
    JMP loc_41BCF5
loc_41C9CD:
    MOV eax, r14d
    SHR ax, 4
    ADD rax, 53h
    AND eax, 1FFFh
    MOVZX r15d, word ptr [rbx+rax*2]
    MOVZX r12d, word ptr [rbx+rax*2+6]
    JMP loc_41C9B6
loc_41C9EA:
    MOVZX eax, word ptr [rbx+0A8h]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_41BCF5
loc_41C9FF:
    MOV r14d, 20h
    JMP loc_41C990
loc_41CA07:
    CMP byte ptr [rax], 0
    JZ loc_41C9A4
loc_41CA0C:
    TEST r12w, r12w
    MOV ecx, offset data
    MOV edx, offset asc_55CBC3
    CMOVNS rdx, rcx
    MOV esi, offset aSS_4
    MOV rcx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C9A4
loc_41CA37:
    MOV esi, 1Bh
    MOV edi, offset byte_545739
    CALL sub_40A360
    MOV esi, offset aSSupported
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BD09
loc_41CA5F:
    MOV edi, offset aUnknownDeviceT
    XOR eax, eax
    CALL sub_40ABE0
loc_41CA6B:
    TEST ah, 20h
    MOV edx, offset data
    MOV ecx, offset aAndRequiredByS
    CMOVZ rcx, rdx
    TEST ah, 10h
    MOV edx, 55BE89h
    MOV eax, offset aEnabled
    MOV esi, offset aCfaPowerMode1S
    MOV edi, 1
    CMOVZ rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+140h]
    AND ax, 0FFFh
    JZ loc_41BDA8
loc_41CAAF:
    MOVZX edx, ax
    MOV esi, offset aMaximumCurrent
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BDA8
loc_41CAC8:
    AND ax, 3FFFh
    CMP ax, 0FFh
    JBE loc_41B5BD
loc_41CAD6:
    TEST cx, cx
    MOV ebp, 6
    JNZ loc_41C687
loc_41CAE4:
    JMP loc_41C651
loc_41CAE9:
    MOVZX r14d, al
    MOV edi, 9
    CALL sub_40C7E0
    TEST r14w, r14w
    JZ loc_41CB26
loc_41CAFD:
    CMP r14w, 0FFh
    JZ loc_41CE18
loc_41CB09:
    MOVZX eax, r14w
    LEA edx, [rax+rax]
loc_41CB10:
    MOV ecx, offset data
    MOV esi, offset aUminForSsecuri
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_41CB26:
    MOVZX r12d, r12b
    TEST r12w, r12w
    JZ loc_41CB56
loc_41CB30:
    CMP r12w, 0FFh
    JZ loc_41CE22
loc_41CB3C:
    LEA edx, [r12+r12]
loc_41CB40:
    MOV ecx, offset aEnhanced
    MOV esi, offset aUminForSsecuri
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_41CB56:
    MOV edi, 0Ah
    CALL sub_40C7E0
    JMP loc_41BD74
loc_41CB65:
    MOVZX edx, ax
    MOV esi, offset aMasterPassword
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BD46
loc_41CB7E:
    TEST al, 2Fh
    JNZ loc_41CAD6
loc_41CB86:
    JMP loc_41B5D6
loc_41CB8B:
    MOV edi, offset aAtaSwResetRequ
    CALL _puts
    JMP loc_41BA9E
loc_41CB9A:
    MOV edi, offset aUnspecified
    MOV dword ptr [rsp+68h+var_60], ecx
    CALL sub_40A360
    MOV esi, offset aUsedS
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0A0h]
    MOV ecx, dword ptr [rsp+68h+var_60]
    SUB eax, 1
    CMP ax, 0FFFDh
    JBE loc_41C07D
loc_41CBD4:
    OR r12d, 0FFFFFFFFh
    JMP loc_41C6B6
loc_41CBDD:
    MOV edi, offset aChsAddressingN
    XOR r15d, r15d
    CALL _puts
    JMP loc_41B7EE
loc_41CBEF:
    MOV ebp, 5
    JMP loc_41C651
loc_41CBF9:
    LEA rcx, [rsp+68h+var_41]
    MOVZX esi, ah
    MOVZX edi, ax
    MOV edx, 75h
    MOV byte ptr [rsp+68h+var_58], r8b
    CALL sub_41B040
    MOVZX r8d, byte ptr [rsp+68h+var_58]
    ADD r8d, eax
    JMP loc_41BB93
loc_41CC21:
    MOV edi, (offset aEncodingSNotSu+0Eh)
    CALL _puts
    JMP loc_41BA20
loc_41CC30:
    MOV rcx, [rbx+0C8h]
    XOR eax, eax
    MOV esi, offset aLba48UserAddre
    MOV edi, 1
    MOV rdx, rcx
    MOV [rsp+68h+var_50], rcx
    CALL ___printf_chk
    MOV rcx, [rsp+68h+var_50]
    TEST rcx, rcx
    JNZ loc_41B828
loc_41CC5E:
    JMP loc_41B818
loc_41CC63:
    MOV edi, offset aDirectAccessDe
    CALL sub_40A360
    MOV rdx, rax
    JMP loc_41B6C2
loc_41CC75:
    MOVZX edx, ax
    MOV esi, offset aIordyFlowContr
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BDED
loc_41CC8E:
    MOVZX edx, ax
    MOV esi, offset aUusToClearBsyA
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BAE7
loc_41CCA7:
    MOVZX edx, ax
    MOV esi, offset aUusToReleaseBu
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BAD7
loc_41CCC0:
    MOVZX edx, ax
    MOV esi, offset aNoFlowControlU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BDDD
loc_41CCD9:
    MOV r13d, 1
    JMP loc_41B72C
loc_41CCE4:
    MOV esi, offset aCompactflashAt
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR r14d, r14d
    MOV [rsp+68h+var_62], 0FFFFh
    MOV ebp, 4
    JMP loc_41B47C
loc_41CD09:
    XOR eax, eax
    MOV esi, offset aAdvancedpmLeve
    MOV edi, 1
    CALL ___printf_chk
    MOVZX eax, word ptr [rbx+0B6h]
    MOV edx, eax
    XOR dl, dl
    CMP dx, 4000h
    JZ loc_41CDFD
loc_41CD30:
    MOVZX edx, ax
    MOV esi, offset aUnknownSetting
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B9F0
loc_41CD49:
    MOV r8d, offset aWithReadCachin
    MOV ecx, offset aDualPortMultiS
    JMP loc_41BF62
loc_41CD59:
    MOV ebp, r13d
    XOR ebx, ebx
    JMP loc_41C113
loc_41CD63:
    MOV edx, offset data
    MOV esi, offset aChecksumScorre
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41BDB5
loc_41CD7E:
    CMP cx, 3
    JZ loc_41CFF6
loc_41CD88:
    CMP bp, 3
    JA loc_41C603
loc_41CD92:
    TEST cx, cx
    JNZ loc_41C603
loc_41CD9B:
    TEST ax, 3FFFh
    JNZ loc_41C2A1
loc_41CDA5:
    MOVZX eax, word ptr [rbx+0A4h]
    AND ax, 77FFh
    CMP ax, 0Fh
    JA loc_41C2A1
loc_41CDBA:
    JMP loc_41C27B
loc_41CDBF:
    MOVZX eax, word ptr [rbx+0A6h]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_41C62D
loc_41CDD4:
    MOV ebp, 3
    JMP loc_41C687
loc_41CDDE:
    MOVZX eax, word ptr [rbx+6Ah]
    AND eax, 2
    CMP ax, 1
    SBB ebp, ebp
    ADD ebp, 2
    JMP loc_41C651
loc_41CDF3:
    MOV ebp, 3
    JMP loc_41C651
loc_41CDFD:
    MOVZX edx, al
    MOV esi, offset aU0xX
    MOV edi, 1
    MOV ecx, edx
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B9F0
loc_41CE18:
    MOV edx, 1FCh
    JMP loc_41CB10
loc_41CE22:
    MOV edx, 1FCh
    JMP loc_41CB40
loc_41CE2C:
    MOV edx, eax
    AND dx, 3FFFh
    CMP dx, 1Fh
    JBE loc_41CD7E
loc_41CE3D:
    MOV ebp, 5
    JMP loc_41C2A6
loc_41CE47:
    MOV edi, offset aInterleavedDma
    CALL _puts
    JMP loc_41BBD0
loc_41CE56:
    MOVZX eax, word ptr [rbx+64h]
    AND ax, 0C000h
    CMP ax, 4000h
    JNZ loc_41C289
loc_41CE68:
    MOV ebp, 4
    JMP loc_41C687
loc_41CE72:
    MOV edx, offset a10msWithIntrq
    JMP loc_41BFA2
loc_41CE7C:
    MOV edx, 0Eh
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C4AA
loc_41CE97:
    MOV edx, 0Dh
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C4A0
loc_41CEB2:
    MOV edx, 0Ch
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C493
loc_41CECD:
    MOV edx, 0Bh
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C486
loc_41CEE8:
    MOV edx, 0Ah
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C479
loc_41CF03:
    MOV edx, 9
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C46C
loc_41CF1E:
    MOV edx, 8
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C45F
loc_41CF39:
    MOV edx, 7
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C452
loc_41CF54:
    MOV edx, 6
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C445
loc_41CF6F:
    MOV edx, 5
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C438
loc_41CF8A:
    MOV edx, 4
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C42B
loc_41CFA5:
    MOV edx, 3
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C41E
loc_41CFC0:
    MOV edx, 2
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C411
loc_41CFDB:
    MOV edx, 1
    MOV esi, offset aU
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41C404
loc_41CFF6:
    TEST dx, dx
    JNZ loc_41CE68
loc_41CFFF:
    JMP loc_41CDA5
loc_41D004:
    CMP bp, 4
    JBE loc_41D02C
loc_41D00A:
    MOV edi, offset aConfiguration
    LEA r12d, [rbp-3]
    MOV r13d, 1
    CALL _puts
    CMP bp, 1
    SETZ byte ptr [rsp+68h+var_58]
    JMP loc_41B72C
loc_41D02C:
    MOV r12d, 1
    JMP loc_41C2CD
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'ConditionalBranching', 'FunctionCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x3AF', '0x3B0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Assertion', 'inferred_category': 'ErrorHandling'}

##### Q 115 - hwclock_main
```assembly
loc_48BFB0:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 70h
    MOV rax, fs:28h
    MOV [rsp+88h+var_20], rax
    XOR eax, eax
    MOV [rsp+88h+var_70], 0
    CALL _tzset
    LEA rcx, [rsp+88h+var_70]
    MOV rdi, rbx
    XOR eax, eax
    MOV edx, offset aLocaltime_0
    MOV esi, offset aLurswtf
    CALL sub_4DFE30
    TEST al, 3
    MOV ebx, eax
    JZ loc_48C128
loc_48BFFC:
    MOV ebp, eax
    AND ebp, 2
    TEST bl, 8
    JNZ loc_48C138
loc_48C00A:
    TEST bl, 10h
    JNZ loc_48C1B8
loc_48C013:
    AND ebx, 20h
    JNZ loc_48C090
loc_48C018:
    LEA rdi, [rsp+88h+var_70]
    XOR esi, esi
    CALL sub_4EA450
    LEA rdi, [rsp+88h+timer]
    MOV esi, eax
    CALL sub_4EA510
    LEA rdi, [rsp+88h+timer]
    MOV esi, ebp
    CALL sub_4EA560
    LEA rdi, [rsp+88h+timer]
    MOV [rsp+88h+timer], rax
    CALL _ctime
    MOV rbx, rax
    MOV rdi, rax
    CALL sub_4DC590
    MOV rdx, rbx
    MOV esi, offset aS0000000Second
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48C06A:
    XOR eax, eax
    MOV rdi, [rsp+88h+var_20]
    XOR rdi, fs:28h
    JNZ loc_48C217
loc_48C080:
    ADD rsp, 70h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_48C090:
    LEA rbx, [rsp+88h+timer]
    XOR esi, esi
    MOV rdi, rbx
    CALL _gettimeofday
    MOV rdi, rbx
    CALL _localtime
    MOV rcx, cs:timezone
    MOV rsi, rax
    MOV rdx, 8888888888888889h
    MOV rax, rcx
    IMUL rdx
    MOV eax, [rsi+20h]
    ADD rdx, rcx
    SAR rcx, 3Fh
    SAR rdx, 5
    SUB rdx, rcx
    TEST eax, eax
    MOV [rsp+88h+var_78], edx
    JLE loc_48C0E1
loc_48C0DA:
    SUB edx, 3Ch
    MOV [rsp+88h+var_78], edx
loc_48C0E1:
    XOR esi, esi
    MOV rdi, rbx
    MOV [rsp+88h+var_74], 0
    CALL _gettimeofday
    TEST ebp, ebp
    JNZ loc_48C103
loc_48C0F7:
    IMUL eax, [rsp+88h+var_78], 3Ch
    CDQE 
    ADD [rsp+88h+timer], rax
loc_48C103:
    LEA rsi, [rsp+88h+var_78]
    MOV rdi, rbx
    CALL _settimeofday
    TEST eax, eax
    JZ loc_48C06A
loc_48C118:
    MOV edi, offset aSettimeofday_0
    XOR eax, eax
    CALL sub_409DA0
loc_48C128:
    CALL sub_4EA3B0
    TEST bl, 8
    MOV ebp, eax
    JZ loc_48C00A
loc_48C138:
    MOV rcx, cs:timezone
    MOV rdx, 8888888888888889h
    LEA rdi, [rsp+88h+var_70]
    XOR esi, esi
    MOV [rsp+88h+var_84], 0
    MOV rax, rcx
    IMUL rdx
    ADD rdx, rcx
    SAR rcx, 3Fh
    SAR rdx, 5
    SUB rdx, rcx
    MOV [rsp+88h+var_88], edx
    CALL sub_4EA450
    LEA rdi, [rsp+88h+timer]
    MOV esi, eax
    CALL sub_4EA510
    LEA rdi, [rsp+88h+timer]
    MOV esi, ebp
    CALL sub_4EA560
    LEA rdi, [rsp+88h+tv]
    MOV rsi, rsp
    MOV [rsp+88h+tv.tv_sec], rax
    MOV [rsp+88h+tv.tv_usec], 0
    CALL _settimeofday
    TEST eax, eax
    JZ loc_48C06A
loc_48C1AF:
    JMP loc_48C118
loc_48C1B8:
    LEA rdi, [rsp+88h+var_70]
    MOV esi, 1
    LEA rbx, [rsp+88h+timer]
    CALL sub_4EA450
    LEA rdi, [rsp+88h+tv]
    XOR esi, esi
    MOV r12d, eax
    CALL _gettimeofday
    TEST ebp, ebp
    MOV rsi, rbx
    LEA rdi, [rsp+88h+tv]
    JNZ loc_48C210
loc_48C1E7:
    CALL _localtime_r
loc_48C1EC:
    MOV ecx, offset aRtcSetTime
    MOV rdx, rbx
    MOV esi, 4024700Ah
    MOV edi, r12d
    MOV [rsp+88h+var_38], 0
    CALL sub_40B810
    JMP loc_48C06A
loc_48C210:
    CALL _gmtime_r
    JMP loc_48C1EC
loc_48C217:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 4, 'input_parameter_types': ['Pointer', 'Unknown', 'Unknown', 'Unknown'], 'return_value_type': 'Unknown', 'dominant_operation_categories': ['ConditionalBranching', 'DataMovement', 'MathematicalOperation', 'StringHandling'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['400', '1', '4E0h', '4DFh', '0ABACADABh', '4F1h', '20', '0D0h'], 'presence_of_notable_floating_point_constants': ['qword_7DCF10', 'qword_6D2458'], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Filtering/Resampling', 'inferred_category': 'Data Manipulation'}

##### T 115 - hwclock_main
```assembly
loc_4B0BD0:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 70h
    MOV rax, fs:28h
    MOV [rsp+88h+var_20], rax
    XOR eax, eax
    MOV [rsp+88h+var_70], 0
    CALL _tzset
    LEA rcx, [rsp+88h+var_70]
    MOV rdi, rbx
    XOR eax, eax
    MOV edx, offset aLocaltime_0
    MOV esi, offset aLurswtf
    CALL sub_529270
    TEST al, 3
    MOV ebx, eax
    JZ loc_4B0D48
loc_4B0C1C:
    MOV ebp, eax
    AND ebp, 2
    TEST bl, 8
    JNZ loc_4B0D58
loc_4B0C2A:
    TEST bl, 10h
    JNZ loc_4B0DD8
loc_4B0C33:
    AND ebx, 20h
    JNZ loc_4B0CB0
loc_4B0C38:
    LEA rdi, [rsp+88h+var_70]
    XOR esi, esi
    CALL sub_536690
    LEA rdi, [rsp+88h+timer]
    MOV esi, eax
    CALL sub_536750
    LEA rdi, [rsp+88h+timer]
    MOV esi, ebp
    CALL sub_5367A0
    LEA rdi, [rsp+88h+timer]
    MOV [rsp+88h+timer], rax
    CALL _ctime
    MOV rbx, rax
    MOV rdi, rax
    CALL sub_524A00
    MOV rdx, rbx
    MOV esi, offset aS0000000Second
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B0C8A:
    XOR eax, eax
    MOV rdi, [rsp+88h+var_20]
    XOR rdi, fs:28h
    JNZ loc_4B0E37
loc_4B0CA0:
    ADD rsp, 70h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4B0CB0:
    LEA rbx, [rsp+88h+timer]
    XOR esi, esi
    MOV rdi, rbx
    CALL _gettimeofday
    MOV rdi, rbx
    CALL _localtime
    MOV rcx, cs:timezone
    MOV rsi, rax
    MOV rdx, 8888888888888889h
    MOV rax, rcx
    IMUL rdx
    MOV eax, [rsi+20h]
    ADD rdx, rcx
    SAR rcx, 3Fh
    SAR rdx, 5
    SUB rdx, rcx
    TEST eax, eax
    MOV [rsp+88h+var_78], edx
    JLE loc_4B0D01
loc_4B0CFA:
    SUB edx, 3Ch
    MOV [rsp+88h+var_78], edx
loc_4B0D01:
    XOR esi, esi
    MOV rdi, rbx
    MOV [rsp+88h+var_74], 0
    CALL _gettimeofday
    TEST ebp, ebp
    JNZ loc_4B0D23
loc_4B0D17:
    IMUL eax, [rsp+88h+var_78], 3Ch
    CDQE 
    ADD [rsp+88h+timer], rax
loc_4B0D23:
    LEA rsi, [rsp+88h+var_78]
    MOV rdi, rbx
    CALL _settimeofday
    TEST eax, eax
    JZ loc_4B0C8A
loc_4B0D38:
    MOV edi, offset aSettimeofday_0
    XOR eax, eax
    CALL sub_40A7B0
loc_4B0D48:
    CALL sub_5365F0
    TEST bl, 8
    MOV ebp, eax
    JZ loc_4B0C2A
loc_4B0D58:
    MOV rcx, cs:timezone
    MOV rdx, 8888888888888889h
    LEA rdi, [rsp+88h+var_70]
    XOR esi, esi
    MOV [rsp+88h+var_84], 0
    MOV rax, rcx
    IMUL rdx
    ADD rdx, rcx
    SAR rcx, 3Fh
    SAR rdx, 5
    SUB rdx, rcx
    MOV [rsp+88h+var_88], edx
    CALL sub_536690
    LEA rdi, [rsp+88h+timer]
    MOV esi, eax
    CALL sub_536750
    LEA rdi, [rsp+88h+timer]
    MOV esi, ebp
    CALL sub_5367A0
    LEA rdi, [rsp+88h+tv]
    MOV rsi, rsp
    MOV [rsp+88h+tv.tv_sec], rax
    MOV [rsp+88h+tv.tv_usec], 0
    CALL _settimeofday
    TEST eax, eax
    JZ loc_4B0C8A
loc_4B0DCF:
    JMP loc_4B0D38
loc_4B0DD8:
    LEA rdi, [rsp+88h+var_70]
    MOV esi, 1
    LEA rbx, [rsp+88h+timer]
    CALL sub_536690
    LEA rdi, [rsp+88h+tv]
    XOR esi, esi
    MOV r12d, eax
    CALL _gettimeofday
    TEST ebp, ebp
    MOV rsi, rbx
    LEA rdi, [rsp+88h+tv]
    JNZ loc_4B0E30
loc_4B0E07:
    CALL _localtime_r
loc_4B0E0C:
    MOV ecx, offset aRtcSetTime
    MOV rdx, rbx
    MOV esi, 4024700Ah
    MOV edi, r12d
    MOV [rsp+88h+var_38], 0
    CALL sub_40D030
    JMP loc_4B0C8A
loc_4B0E30:
    CALL _gmtime_r
    JMP loc_4B0E0C
loc_4B0E37:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 4, 'input_parameter_types': ['Pointer', 'Word', 'Double', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xABACADAB', '400h'], 'presence_of_notable_floating_point_constants': ['0.0078125', '0.0', '1.0', '2.0', '400.0', '1024.0', '3072.0', '6144.0'], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Signal Processing / Audio Resampling', 'inferred_category': 'Scientific/Mathematical'}

##### Q 116 - forkshell
```assembly
loc_46CE50:
    PUSH r13
    PUSH r12
    MOV r13d, edx
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV rbx, rdi
    SUB rsp, 8
    CALL _fork
    TEST eax, eax
    JS loc_46D010
loc_46CE70:
    MOV r12d, eax
    JZ loc_46CF40
loc_46CE79:
    TEST rbx, rbx
    JZ loc_46CF10
loc_46CE82:
    CMP r13d, 2
    JZ loc_46CE9C
loc_46CE88:
    TEST byte ptr [rbx+21h], 2
    JNZ loc_46CF70
loc_46CE92:
    CMP r13d, 1
    JZ loc_46CF91
loc_46CE9C:
    MOV rcx, cs:qword_743208
loc_46CEA3:
    MOV eax, [rbx+1Ch]
    MOV rdx, [rbx+10h]
    ADD rcx, 40h
    LEA esi, [rax+1]
    SHL rax, 4
    CMP cs:byte_742FB4, 0
    MOV [rbx+1Ch], esi
    LEA rbx, [rdx+rax]
    MOV [rbx], r12d
    MOV dword ptr [rbx+4], 0FFFFFFFFh
    MOV [rbx+8], rcx
    JZ loc_46CEFF
loc_46CED3:
    TEST rbp, rbp
    JZ loc_46CEFF
loc_46CED8:
    MOV r13, cs:qword_743218
    MOV rdi, rbp
    MOV rax, [r13+8]
    MOV cs:qword_742F88, rax
    CALL sub_46CA80
    MOV rdi, [r13+8]
    CALL sub_40AD40
    MOV [rbx+8], rax
loc_46CEFF:
    ADD rsp, 8
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_46CF10:
    MOV eax, cs:dword_742F90
    TEST eax, eax
    JZ loc_46CF2D
loc_46CF1A:
    XOR esi, esi
    XOR edi, edi
    CALL sub_46AEB0
    TEST eax, eax
    JG loc_46CF10
loc_46CF27:
    MOV eax, cs:dword_742F90
loc_46CF2D:
    ADD eax, 1
    MOV cs:dword_742F90, eax
    JMP loc_46CEFF
loc_46CF40:
    MOV rax, cs:qword_743208
    MOV edx, r13d
    MOV rsi, rbp
    MOV rdi, rbx
    MOV dword ptr [rax+2E8h], 0
    CALL sub_46B930
    ADD rsp, 8
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_46CF70:
    MOV esi, eax
    MOV eax, [rbx+1Ch]
    TEST eax, eax
    JZ loc_46CF7F
loc_46CF79:
    MOV rax, [rbx+10h]
    MOV esi, [rax]
loc_46CF7F:
    MOV edi, r12d
    CALL _setpgid
    CMP r13d, 1
    JNZ loc_46CE9C
loc_46CF91:
    MOV rdx, cs:qword_742F98
    MOV rcx, cs:qword_743208
    CMP rbx, rdx
    MOV [rcx+2F8h], r12d
    JNZ loc_46CFB3
loc_46CFAB:
    JMP loc_46CFFF
loc_46CFB0:
    MOV rdx, rax
loc_46CFB3:
    MOV rax, [rdx+28h]
    CMP rbx, rax
    JNZ loc_46CFB0
loc_46CFBC:
    ADD rdx, 28h
loc_46CFC0:
    MOV rax, [rax+28h]
    MOV [rdx], rax
    MOV rax, cs:qword_742F98
    TEST rax, rax
    JZ loc_46D009
loc_46CFD3:
    CMP byte ptr [rax+20h], 1
    JZ loc_46CFE6
loc_46CFD9:
    JMP loc_46D009
loc_46CFE0:
    CMP byte ptr [rax+20h], 1
    JNZ loc_46CFF3
loc_46CFE6:
    LEA rdx, [rax+28h]
    MOV rax, [rax+28h]
    TEST rax, rax
    JNZ loc_46CFE0
loc_46CFF3:
    MOV [rbx+28h], rax
    MOV [rdx], rbx
    JMP loc_46CEA3
loc_46CFFF:
    MOV rax, rbx
    MOV edx, offset qword_742F98
    JMP loc_46CFC0
loc_46D009:
    MOV edx, offset qword_742F98
    JMP loc_46CFF3
loc_46D010:
    TEST rbx, rbx
    JZ loc_46D01D
loc_46D015:
    MOV rdi, rbx
    CALL sub_4695D0
loc_46D01D:
    MOV edi, offset aCanTForkM
    XOR eax, eax
    CALL sub_467C20
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 8, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x30', '0x28', '0x20'], 'presence_of_notable_floating_point_constants': ['0x52F', '0x52E', '0x52D'], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Color Conversion (RGB to LCH)', 'inferred_category': 'Graphics/Image Processing'}

##### T 116 - forkshell
```assembly
loc_485C20:
    PUSH r13
    PUSH r12
    MOV r13d, edx
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV rbx, rdi
    SUB rsp, 8
    CALL _fork
    TEST eax, eax
    JS loc_485DE0
loc_485C40:
    MOV r12d, eax
    JZ loc_485D10
loc_485C49:
    TEST rbx, rbx
    JZ loc_485CE0
loc_485C52:
    CMP r13d, 2
    JZ loc_485C6C
loc_485C58:
    TEST byte ptr [rbx+21h], 2
    JNZ loc_485D40
loc_485C62:
    CMP r13d, 1
    JZ loc_485D61
loc_485C6C:
    MOV rcx, cs:qword_78D208
loc_485C73:
    MOV eax, [rbx+1Ch]
    MOV rdx, [rbx+10h]
    ADD rcx, 40h
    LEA esi, [rax+1]
    SHL rax, 4
    CMP cs:byte_78CFB4, 0
    MOV [rbx+1Ch], esi
    LEA rbx, [rdx+rax]
    MOV [rbx], r12d
    MOV dword ptr [rbx+4], 0FFFFFFFFh
    MOV [rbx+8], rcx
    JZ loc_485CCF
loc_485CA3:
    TEST rbp, rbp
    JZ loc_485CCF
loc_485CA8:
    MOV r13, cs:qword_78D218
    MOV rdi, rbp
    MOV rax, [r13+8]
    MOV cs:qword_78CF88, rax
    CALL sub_485850
    MOV rdi, [r13+8]
    CALL sub_40C290
    MOV [rbx+8], rax
loc_485CCF:
    ADD rsp, 8
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_485CE0:
    MOV eax, cs:dword_78CF90
    TEST eax, eax
    JZ loc_485CFD
loc_485CEA:
    XOR esi, esi
    XOR edi, edi
    CALL sub_47FB60
    TEST eax, eax
    JG loc_485CE0
loc_485CF7:
    MOV eax, cs:dword_78CF90
loc_485CFD:
    ADD eax, 1
    MOV cs:dword_78CF90, eax
    JMP loc_485CCF
loc_485D10:
    MOV rax, cs:qword_78D208
    MOV edx, r13d
    MOV rsi, rbp
    MOV rdi, rbx
    MOV dword ptr [rax+2E8h], 0
    CALL sub_482C20
    ADD rsp, 8
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_485D40:
    MOV esi, eax
    MOV eax, [rbx+1Ch]
    TEST eax, eax
    JZ loc_485D4F
loc_485D49:
    MOV rax, [rbx+10h]
    MOV esi, [rax]
loc_485D4F:
    MOV edi, r12d
    CALL _setpgid
    CMP r13d, 1
    JNZ loc_485C6C
loc_485D61:
    MOV rdx, cs:qword_78CF98
    MOV rcx, cs:qword_78D208
    CMP rbx, rdx
    MOV [rcx+2F8h], r12d
    JNZ loc_485D83
loc_485D7B:
    JMP loc_485DCF
loc_485D80:
    MOV rdx, rax
loc_485D83:
    MOV rax, [rdx+28h]
    CMP rbx, rax
    JNZ loc_485D80
loc_485D8C:
    ADD rdx, 28h
loc_485D90:
    MOV rax, [rax+28h]
    MOV [rdx], rax
    MOV rax, cs:qword_78CF98
    TEST rax, rax
    JZ loc_485DD9
loc_485DA3:
    CMP byte ptr [rax+20h], 1
    JZ loc_485DB6
loc_485DA9:
    JMP loc_485DD9
loc_485DB0:
    CMP byte ptr [rax+20h], 1
    JNZ loc_485DC3
loc_485DB6:
    LEA rdx, [rax+28h]
    MOV rax, [rax+28h]
    TEST rax, rax
    JNZ loc_485DB0
loc_485DC3:
    MOV [rbx+28h], rax
    MOV [rdx], rbx
    JMP loc_485C73
loc_485DCF:
    MOV rax, rbx
    MOV edx, offset qword_78CF98
    JMP loc_485D90
loc_485DD9:
    MOV edx, offset qword_78CF98
    JMP loc_485DC3
loc_485DE0:
    TEST rbx, rbx
    JZ loc_485DED
loc_485DE5:
    MOV rdi, rbx
    CALL sub_4805F0
loc_485DED:
    MOV edi, offset aCanTForkM
    XOR eax, eax
    CALL sub_4813A0
```
None

##### Q 117 - collect_fd
```assembly
loc_45AE70:
    PUSH rbx
    SUB rsp, 20h
    MOV rbx, cs:qword_7431F0
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    LEA rdi, [rbx+78h]
    CALL sub_45A780
    MOV ecx, 6
    MOV rdx, rsp
    MOV esi, offset buf
    MOV rdi, rax
    CALL sub_45A670
    TEST eax, eax
    JZ loc_45AEF0
loc_45AEAE:
    MOV eax, 4
loc_45AEB3:
    MOV rdx, [rbx+8]
    CMP rdx, offset qword_743628
    JNB loc_45AECB
loc_45AEC0:
    LEA rcx, [rdx+1]
    MOV [rbx+8], rcx
    MOV byte ptr [rdx], 3Fh
loc_45AECB:
    SUB eax, 1
    JNZ loc_45AEB3
loc_45AED0:
    MOV rax, [rsp+28h+var_10]
    XOR rax, fs:28h
    JNZ loc_45AF00
loc_45AEE0:
    ADD rsp, 20h
    POP rbx
    RETN 
loc_45AEF0:
    MOV rdi, [rsp+28h+var_28]
    SUB rdi, [rsp+28h+var_20]
    CALL sub_45A880
    JMP loc_45AED0
loc_45AF00:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Logic'}

##### T 117 - collect_fd
```assembly
loc_46F8D0:
    PUSH rbx
    SUB rsp, 20h
    MOV rbx, cs:qword_78D1F0
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    LEA rdi, [rbx+78h]
    CALL sub_46E9F0
    MOV ecx, 6
    MOV rdx, rsp
    MOV esi, offset data
    MOV rdi, rax
    CALL sub_46E8E0
    TEST eax, eax
    JZ loc_46F980
loc_46F90E:
    MOV rax, [rbx+8]
    CMP rax, offset qword_78D628
    JNB loc_46F940
loc_46F91A:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOV byte ptr [rax], 3Fh
    MOV rax, [rbx+8]
    CMP rax, offset qword_78D628
    JNB loc_46F957
loc_46F931:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOV byte ptr [rax], 3Fh
    MOV rax, [rbx+8]
loc_46F940:
    CMP rax, offset qword_78D628
    JNB loc_46F96A
loc_46F948:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOV byte ptr [rax], 3Fh
    MOV rax, [rbx+8]
loc_46F957:
    CMP rax, offset qword_78D628
    JNB loc_46F96A
loc_46F95F:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOV byte ptr [rax], 3Fh
loc_46F96A:
    MOV rax, [rsp+28h+var_10]
    XOR rax, fs:28h
    JNZ loc_46F9E5
loc_46F97A:
    ADD rsp, 20h
    POP rbx
    RETN 
loc_46F980:
    MOV rdi, [rsp+28h+var_28]
    SUB rdi, [rsp+28h+var_20]
    LEA rsi, [rsp+28h+var_18]
    MOV edx, offset aKmgtpezy
    CALL sub_52BA50
    MOV byte ptr [rax], 0
    MOVZX ecx, [rsp+28h+var_18]
    MOV eax, offset qword_78D628
    MOV rdx, [rbx+8]
    SUB rax, rdx
    TEST cl, cl
    JZ loc_46F9DF
loc_46F9B0:
    TEST eax, eax
    JLE loc_46F9DF
loc_46F9B4:
    SUB eax, 1
    LEA rsi, [rsp+rax+28h+var_17]
    LEA rax, [rsp+28h+var_18]
    JMP loc_46F9CD
loc_46F9C8:
    CMP rax, rsi
    JZ loc_46F9DF
loc_46F9CD:
    ADD rdx, 1
    ADD rax, 1
    MOV [rdx-1], cl
    MOVZX ecx, byte ptr [rax]
    TEST cl, cl
    JNZ loc_46F9C8
loc_46F9DF:
    MOV [rbx+8], rdx
    JMP loc_46F96A
loc_46F9E5:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x33C', '0x80', '0x3C000'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 118 - ulimitcmd
```assembly
loc_466F70:
    MOV rdi, rsi
    JMP loc_480910
loc_480910:
    PUSH r15
    PUSH r14
    MOV r14d, 66h
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    XOR ebp, ebp
    SUB rsp, 28h
    MOV cs:optind, 0
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    CALL sub_408D80
    MOV r13d, eax
    NOP dword ptr [rax+rax+00h]
loc_480950:
    MOV edx, offset aHsafTDSCMLPNVW
    MOV rsi, r12
    MOV edi, r13d
    CALL _getopt
    CMP eax, 0FFFFFFFFh
    JZ loc_4809A9
loc_480965:
    CMP eax, 48h
    JZ loc_4809D0
loc_48096A:
    CMP eax, 53h
    JZ loc_4809E0
loc_48096F:
    CMP eax, 61h
    JZ loc_4809F0
loc_480974:
    CMP eax, 1
    MOV edx, 66h
    MOV ebx, offset unk_4FC680
    CMOVZ eax, r14d
    JMP loc_480994
loc_480990:
    MOVSX edx, byte ptr [rbx+2]
loc_480994:
    CMP eax, edx
    JZ loc_480A48
loc_48099C:
    ADD rbx, 10h
    CMP rbx, offset aOptind1
    JNZ loc_480990
loc_4809A9:
    XOR eax, eax
loc_4809AB:
    MOV rcx, [rsp+58h+var_40]
    XOR rcx, fs:28h
    JNZ loc_480B56
loc_4809BF:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4809D0:
    OR ebp, 1
    JMP loc_480950
loc_4809E0:
    OR ebp, 2
    JMP loc_480950
loc_4809F0:
    MOV ebx, offset unk_4FC681
    MOV edi, 1
    JMP loc_480A04
loc_480A00:
    MOVZX edi, byte ptr [rbx-1]
loc_480A04:
    MOV rsi, rsp
    CALL _getrlimit64
    MOVSX edx, byte ptr [rbx+1]
    MOV rcx, [rbx+7]
    MOV esi, offset aC30s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rdx, rbx
    MOV rsi, rsp
    MOV edi, ebp
    ADD rbx, 10h
    CALL sub_4800A0
    CMP rbx, 4FC751h
    JNZ loc_480A00
loc_480A3F:
    JMP loc_480950
loc_480A48:
    MOVZX edi, byte ptr [rbx]
    MOV rsi, rsp
    CALL _getrlimit64
    MOV r15, cs:optarg
    TEST r15, r15
    JZ loc_480B08
loc_480A63:
    MOV ecx, 0Ah
    MOV edi, offset aUnlimited
    MOV rsi, r15
    REPE 
    MOV rax, 0FFFFFFFFFFFFFFFFh
    SETNBE cl
    SETB dl
    CMP cl, dl
    JNZ loc_480AE0
loc_480A83:
    TEST ebp, ebp
    JZ loc_480AC8
loc_480A87:
    MOV edx, ebp
    AND edx, 2
    TEST bpl, 1
    JNZ loc_480AD2
loc_480A92:
    TEST edx, edx
    JZ loc_480A9A
loc_480A96:
    MOV [rsp+58h+var_58], rax
loc_480A9A:
    MOVZX edi, byte ptr [rbx]
    MOV rsi, rsp
    CALL _setrlimit64
    TEST eax, eax
    JNS loc_480950
loc_480AAD:
    MOV edi, offset aErrorSettingLi
    XOR eax, eax
    CALL sub_409CC0
loc_480AB9:
    MOV eax, 1
    JMP loc_4809AB
loc_480AC8:
    MOV edx, 2
    MOV ebp, 3
loc_480AD2:
    MOV [rsp+58h+var_50], rax
    JMP loc_480A92
loc_480AE0:
    MOV edx, 0Ah
    XOR esi, esi
    MOV rdi, r15
    CALL sub_40CB00
    MOV rcx, cs:qword_7431E8
    MOV edx, [rcx]
    TEST edx, edx
    JNZ loc_480B42
loc_480AFC:
    MOVZX ecx, byte ptr [rbx+1]
    SHL rax, cl
    JMP loc_480A83
loc_480B08:
    MOVSXD rdx, cs:optind
    MOV r15, [r12+rdx*8]
    MOV rax, rdx
    TEST r15, r15
    JZ loc_480B2F
loc_480B1B:
    CMP byte ptr [r15], 2Dh
    JZ loc_480B2F
loc_480B21:
    ADD eax, 1
    MOV cs:optind, eax
    JMP loc_480A63
loc_480B2F:
    LEA rdx, [rbx+1]
    MOV rsi, rsp
    MOV edi, ebp
    CALL sub_4800A0
    JMP loc_480950
loc_480B42:
    MOV rsi, r15
    MOV edi, offset aInvalidNumberS
    XOR eax, eax
    CALL sub_40A280
    JMP loc_480AB9
loc_480B56:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 118 - ulimitcmd
```assembly
loc_47EC90:
    MOV rdi, rsi
    JMP sub_4A12F0
```
{'input_parameter_count': 1, 'input_parameter_types': ['String'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### Q 119 - gotsig
```assembly
loc_4924E0:
    SUB rsp, 8
    MOV edi, 0Ah
    CALL sub_40A770
    MOV edi, cs:dest.c_iflag
    MOV edx, offset dest.c_lflag
    XOR esi, esi
    CALL _tcsetattr
    MOV edi, 1
    CALL __exit
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Jump'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 119 - gotsig
```assembly
loc_4B7990:
    SUB rsp, 8
    MOV edi, 0Ah
    CALL sub_40BB50
    MOV edi, cs:buf.c_iflag
    MOV edx, offset buf.c_lflag
    XOR esi, esi
    CALL _tcsetattr
    MOV edi, 1
    CALL __exit
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['Jump', 'DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['offset aStegano'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ControlFlow'}

##### Q 120 - complete_cmd_dir_file
```assembly
loc_4E2E80:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    SUB rsp, 0E8h
    MOV [rsp+118h+var_114], esi
    MOV esi, 2Fh
    MOV [rsp+118h+var_E8], 517613h
    MOV rax, fs:28h
    MOV [rsp+118h+var_40], rax
    XOR eax, eax
    CALL _strrchr
    TEST rax, rax
    JZ loc_4E30D6
loc_4E2EC7:
    LEA r12, [rax+1]
    MOV rdi, r13
    MOV rsi, r12
    SUB rsi, r13
    CALL sub_40AD70
    CMP byte ptr [rax], 7Eh
    MOV [rsp+118h+name], rax
    JZ loc_4E3108
loc_4E2EE7:
    MOV rax, [rsp+118h+name]
    MOV ebx, 1
    MOV [rsp+118h+var_E8], rax
    MOV rbp, rax
    LEA rax, [rsp+118h+var_E8]
    MOV [rsp+118h+var_F8], rax
    MOV [rsp+118h+ptr], rax
loc_4E2F08:
    MOV rdi, r12
    CALL _strlen
    MOV rcx, [rsp+118h+ptr]
    MOV [rsp+118h+var_F0], rax
    LEA eax, [rbx-1]
    LEA rax, [rcx+rax*8+8]
    MOV r14, rcx
    MOV [rsp+118h+var_110], rax
    NOP word ptr [rax+rax+00h]
loc_4E2F30:
    MOV rdi, rbp
    CALL _opendir
    TEST rax, rax
    MOV r13, rax
    JZ loc_4E2FD1
loc_4E2F44:
    NOP dword ptr [rax+00h]
loc_4E2F48:
    MOV rdi, r13
    CALL _readdir64
    TEST rax, rax
    JZ loc_4E2FC9
loc_4E2F55:
    CMP byte ptr [r12], 0
    LEA rbp, [rax+13h]
    JNZ loc_4E2F6A
loc_4E2F60:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_4E3040
loc_4E2F6A:
    MOV rsi, r12
    MOV rdi, rbp
    CALL sub_4097D0
    TEST rax, rax
    JZ loc_4E2F48
loc_4E2F7A:
    MOV rdi, [r14]
    MOV rsi, rbp
    CALL sub_4099E0
    LEA rdx, [rsp+118h+stat_buf]
    MOV rsi, rax
    MOV edi, 1
    MOV rbx, rax
    CALL ___xstat64
    TEST eax, eax
    JZ loc_4E2FF0
loc_4E2F9E:
    LEA rdx, [rsp+118h+stat_buf]
    MOV rsi, rbx
    MOV edi, 1
    CALL ___lxstat64
    TEST eax, eax
    JZ loc_4E2FF0
loc_4E2FB4:
    MOV rdi, rbx
    CALL _free
    MOV rdi, r13
    CALL _readdir64
    TEST rax, rax
    JNZ loc_4E2F55
loc_4E2FC9:
    MOV rdi, r13
    CALL _closedir
loc_4E2FD1:
    ADD r14, 8
    CMP [rsp+118h+var_110], r14
    JZ loc_4E3080
loc_4E2FE0:
    MOV rbp, [r14]
    JMP loc_4E2F30
loc_4E2FF0:
    MOV rdi, rbp
    CALL _strlen
    LEA esi, [rax+2]
    MOV rdi, rbx
    MOV r15, rax
    CALL sub_40ACF0
    MOV rsi, rbp
    MOV rdi, rax
    MOV rbx, rax
    CALL _strcpy
    MOV eax, [rsp+118h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 4000h
    JZ loc_4E3068
loc_4E3024:
    CMP [rsp+118h+var_114], 1
    JZ loc_4E2FB4
loc_4E302B:
    MOV rdi, rbx
    CALL sub_4E2DD0
    JMP loc_4E2F48
loc_4E3040:
    MOVZX edx, byte ptr [rax+14h]
    TEST dl, dl
    JZ loc_4E2F48
loc_4E304C:
    CMP dl, 2Eh
    JNZ loc_4E2F6A
loc_4E3055:
    CMP byte ptr [rax+15h], 0
    JZ loc_4E2F48
loc_4E305F:
    JMP loc_4E2F6A
loc_4E3068:
    MOV eax, r15d
    MOV byte ptr [rbx+rax], 2Fh
    LEA eax, [r15+1]
    MOV byte ptr [rbx+rax], 0
    JMP loc_4E302B
loc_4E3080:
    MOV rbx, [rsp+118h+ptr]
    MOV rcx, [rsp+118h+var_F8]
    CMP rbx, rcx
    JZ loc_4E309F
loc_4E308F:
    MOV rdi, [rbx]
    CALL _free
    MOV rdi, rbx
    CALL _free
loc_4E309F:
    MOV rdi, [rsp+118h+name]
    CALL _free
    MOV rcx, [rsp+118h+var_40]
    XOR rcx, fs:28h
    MOV eax, dword ptr [rsp+118h+var_F0]
    JNZ loc_4E3270
loc_4E30C4:
    ADD rsp, 0E8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E30D6:
    MOV eax, [rsp+118h+var_114]
    TEST eax, eax
    JZ loc_4E3149
loc_4E30DE:
    LEA rax, [rsp+118h+var_E8]
    MOV r12, r13
    MOV ebp, 517613h
    MOV [rsp+118h+name], 0
    MOV ebx, 1
    MOV [rsp+118h+var_F8], rax
    MOV [rsp+118h+ptr], rax
    JMP loc_4E2F08
loc_4E3108:
    CMP byte ptr [rax+1], 2Fh
    LEA rbx, [rax+1]
    JNZ loc_4E322A
loc_4E3116:
    MOV rax, cs:qword_743630
    MOV rdi, [rax+48h]
loc_4E3121:
    TEST rdi, rdi
    JZ loc_4E2EE7
loc_4E312A:
    MOV rsi, rbx
    CALL sub_4099E0
    MOV rdi, [rsp+118h+name]
    MOV rbx, rax
    CALL _free
    MOV [rsp+118h+name], rbx
    JMP loc_4E2EE7
loc_4E3149:
    MOV rax, cs:qword_743630
    MOV rax, [rax]
    TEST byte ptr [rax], 10h
    JZ loc_4E325E
loc_4E315C:
    MOV rbp, [rax+8]
loc_4E3160:
    TEST rbp, rbp
    JZ loc_4E30DE
loc_4E3169:
    MOVZX eax, byte ptr [rbp+0]
    TEST al, al
    JZ loc_4E30DE
loc_4E3175:
    CMP al, 3Ah
    MOV rdi, rbp
    MOV ebx, 1
    JNZ loc_4E319D
loc_4E3181:
    CMP byte ptr [rbp+1], 0
    JNZ loc_4E319D
loc_4E3187:
    JMP loc_4E30DE
loc_4E3190:
    CMP byte ptr [rax+1], 0
    LEA rdi, [rax+1]
    JZ loc_4E31AC
loc_4E319A:
    ADD ebx, 1
loc_4E319D:
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JNZ loc_4E3190
loc_4E31AC:
    MOVSXD rdi, ebx
    SHL rdi, 3
    CALL sub_40ACD0
    MOV rdi, rbp
    MOV rbx, rax
    MOV [rsp+118h+ptr], rax
    CALL sub_40AD40
    MOV rdi, rax
    LEA rbp, [rbx+8]
    MOV [rbx], rdi
    MOV ebx, 1
    JMP loc_4E31F8
loc_4E31E0:
    CMP byte ptr [rax+1], 0
    LEA rdi, [rax+1]
    MOV byte ptr [rax], 0
    JZ loc_4E3207
loc_4E31ED:
    MOV [rbp+0], rdi
    ADD ebx, 1
    ADD rbp, 8
loc_4E31F8:
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JNZ loc_4E31E0
loc_4E3207:
    MOV rax, [rsp+118h+ptr]
    MOV r12, r13
    MOV [rsp+118h+name], 0
    MOV rbp, [rax]
    LEA rax, [rsp+118h+var_E8]
    MOV [rsp+118h+var_F8], rax
    JMP loc_4E2F08
loc_4E322A:
    MOV esi, 2Fh
    MOV rdi, rbx
    CALL _strchr
    MOV rdi, rbx
    MOV byte ptr [rax], 0
    MOV rbp, rax
    CALL sub_40D6B0
    TEST rax, rax
    MOV byte ptr [rbp+0], 2Fh
    JZ loc_4E2EE7
loc_4E3252:
    MOV rdi, [rax+20h]
    MOV rbx, rbp
    JMP loc_4E3121
loc_4E325E:
    MOV edi, offset aPath
    CALL _getenv
    MOV rbp, rax
    JMP loc_4E3160
loc_4E3270:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x3450', '0x3418', '0x30', '0x28', '0x20', '0x320', '0x7D85CE', '0x623', '0x8000', '0x624', '0x625', '0x621', '0x620'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 27, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Image Processing', 'inferred_category': 'Graphics/Video'}

##### T 120 - complete_cmd_dir_file
```assembly
loc_52D290:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 0F8h
    MOV [rsp+128h+var_114], esi
    MOV esi, 2Fh
    MOV [rsp+128h+var_E8], 565699h
    MOV rax, fs:28h
    MOV [rsp+128h+var_40], rax
    XOR eax, eax
    CALL _strrchr
    TEST rax, rax
    JZ loc_52D4FF
loc_52D2D7:
    LEA r12, [rax+1]
    MOV rdi, rbp
    MOV rsi, r12
    SUB rsi, rbp
    CALL sub_40C2C0
    CMP byte ptr [rax], 7Eh
    MOV [rsp+128h+var_108], rax
    JZ loc_52D52C
loc_52D2F7:
    MOV rax, [rsp+128h+var_108]
    MOV ebx, 1
    MOV [rsp+128h+var_E8], rax
    LEA rax, [rsp+128h+var_E8]
    MOV [rsp+128h+var_F8], rax
    MOV [rsp+128h+ptr], rax
loc_52D315:
    MOV rdi, r12
    CALL _strlen
    MOV rcx, [rsp+128h+ptr]
    MOV [rsp+128h+var_F0], rax
    LEA eax, [rbx-1]
    MOV r13, cs:qword_78D630
    LEA rax, [rcx+rax*8+8]
    MOV r15, rcx
    MOV [rsp+128h+var_110], rax
    XCHG ax, ax
loc_52D340:
    MOV rdi, [r15]
    CALL _opendir
    TEST rax, rax
    MOV r14, rax
    JZ loc_52D3E9
loc_52D354:
    NOP dword ptr [rax+00h]
loc_52D358:
    MOV rdi, r14
    CALL _readdir64
    TEST rax, rax
    JZ loc_52D3E1
loc_52D365:
    CMP byte ptr [r12], 0
    LEA rbp, [rax+13h]
    JNZ loc_52D37A
loc_52D370:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_52D4C8
loc_52D37A:
    MOV rsi, r12
    MOV rdi, rbp
    CALL sub_40A180
    TEST rax, rax
    JZ loc_52D358
loc_52D38A:
    MOV rdi, [r15]
    MOV rsi, rbp
    CALL sub_40A390
    LEA rdx, [rsp+128h+stat_buf]
    MOV rsi, rax
    MOV edi, 1
    MOV rbx, rax
    CALL ___xstat64
    TEST eax, eax
    JZ loc_52D450
loc_52D3B2:
    LEA rdx, [rsp+128h+stat_buf]
    MOV rsi, rbx
    MOV edi, 1
    CALL ___lxstat64
    TEST eax, eax
    JZ loc_52D450
loc_52D3CC:
    MOV rdi, rbx
    CALL _free
    MOV rdi, r14
    CALL _readdir64
    TEST rax, rax
    JNZ loc_52D365
loc_52D3E1:
    MOV rdi, r14
    CALL _closedir
loc_52D3E9:
    ADD r15, 8
    CMP [rsp+128h+var_110], r15
    JNZ loc_52D340
loc_52D3F8:
    MOV rbx, [rsp+128h+ptr]
    MOV rcx, [rsp+128h+var_F8]
    CMP rbx, rcx
    JZ loc_52D417
loc_52D407:
    MOV rdi, [rbx]
    CALL _free
    MOV rdi, rbx
    CALL _free
loc_52D417:
    MOV rdi, [rsp+128h+var_108]
    CALL _free
    MOV rcx, [rsp+128h+var_40]
    XOR rcx, fs:28h
    MOV eax, dword ptr [rsp+128h+var_F0]
    JNZ loc_52D690
loc_52D43C:
    ADD rsp, 0F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_52D450:
    MOV rdi, rbp
    CALL _strlen
    LEA esi, [rax+2]
    MOV rdi, rbx
    MOV [rsp+128h+var_120], rax
    CALL sub_40C240
    MOV rsi, rbp
    MOV rdi, rax
    MOV rbx, rax
    CALL _strcpy
    MOV eax, [rsp+128h+stat_buf.st_mode]
    MOV rdx, [rsp+128h+var_120]
    AND eax, 0F000h
    CMP eax, 4000h
    JZ loc_52D4F0
loc_52D48B:
    CMP [rsp+128h+var_114], 1
    JZ loc_52D3CC
loc_52D496:
    MOV edx, [r13+58h]
    MOV rdi, [r13+50h]
    MOV esi, 804h
    CALL sub_53B960
    MOV ecx, [r13+58h]
    MOV [r13+50h], rax
    MOV rdx, rcx
    MOV [rax+rcx*8], rbx
    ADD edx, 1
    MOV [r13+58h], edx
    JMP loc_52D358
loc_52D4C8:
    MOVZX edx, byte ptr [rax+14h]
    TEST dl, dl
    JZ loc_52D358
loc_52D4D4:
    CMP dl, 2Eh
    JNZ loc_52D37A
loc_52D4DD:
    CMP byte ptr [rax+15h], 0
    JZ loc_52D358
loc_52D4E7:
    JMP loc_52D37A
loc_52D4F0:
    MOV eax, edx
    MOV byte ptr [rbx+rax], 2Fh
    LEA eax, [rdx+1]
    MOV byte ptr [rbx+rax], 0
    JMP loc_52D496
loc_52D4FF:
    MOV eax, [rsp+128h+var_114]
    TEST eax, eax
    JZ loc_52D56D
loc_52D507:
    LEA rax, [rsp+128h+var_E8]
    MOV r12, rbp
    MOV [rsp+128h+var_108], 0
    MOV ebx, 1
    MOV [rsp+128h+var_F8], rax
    MOV [rsp+128h+ptr], rax
    JMP loc_52D315
loc_52D52C:
    CMP byte ptr [rax+1], 2Fh
    LEA rbx, [rax+1]
    JNZ loc_52D64A
loc_52D53A:
    MOV rax, cs:qword_78D630
    MOV rdi, [rax+48h]
loc_52D545:
    TEST rdi, rdi
    JZ loc_52D2F7
loc_52D54E:
    MOV rsi, rbx
    CALL sub_40A390
    MOV rdi, [rsp+128h+var_108]
    MOV rbx, rax
    CALL _free
    MOV [rsp+128h+var_108], rbx
    JMP loc_52D2F7
loc_52D56D:
    MOV rax, cs:qword_78D630
    MOV rax, [rax]
    TEST byte ptr [rax], 10h
    JZ loc_52D67E
loc_52D580:
    MOV r12, [rax+8]
loc_52D584:
    TEST r12, r12
    JZ loc_52D507
loc_52D58D:
    MOVZX eax, byte ptr [r12]
    TEST al, al
    JZ loc_52D507
loc_52D59A:
    CMP al, 3Ah
    MOV rdi, r12
    MOV ebx, 1
    JNZ loc_52D5C5
loc_52D5A6:
    CMP byte ptr [r12+1], 0
    JNZ loc_52D5C5
loc_52D5AE:
    JMP loc_52D507
loc_52D5B8:
    CMP byte ptr [rax+1], 0
    LEA rdi, [rax+1]
    JZ loc_52D5D4
loc_52D5C2:
    ADD ebx, 1
loc_52D5C5:
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JNZ loc_52D5B8
loc_52D5D4:
    MOVSXD rdi, ebx
    SHL rdi, 3
    CALL sub_40C220
    MOV rdi, r12
    MOV rbx, rax
    MOV [rsp+128h+ptr], rax
    CALL sub_40C290
    MOV rdi, rax
    LEA r12, [rbx+8]
    MOV [rbx], rdi
    MOV ebx, 1
    JMP loc_52D620
loc_52D608:
    CMP byte ptr [rax+1], 0
    LEA rdi, [rax+1]
    MOV byte ptr [rax], 0
    JZ loc_52D62F
loc_52D615:
    MOV [r12], rdi
    ADD ebx, 1
    ADD r12, 8
loc_52D620:
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JNZ loc_52D608
loc_52D62F:
    LEA rax, [rsp+128h+var_E8]
    MOV r12, rbp
    MOV [rsp+128h+var_108], 0
    MOV [rsp+128h+var_F8], rax
    JMP loc_52D315
loc_52D64A:
    MOV esi, 2Fh
    MOV rdi, rbx
    CALL _strchr
    MOV rdi, rbx
    MOV byte ptr [rax], 0
    MOV rbp, rax
    CALL sub_40FE80
    TEST rax, rax
    MOV byte ptr [rbp+0], 2Fh
    JZ loc_52D2F7
loc_52D672:
    MOV rdi, [rax+20h]
    MOV rbx, rbp
    JMP loc_52D545
loc_52D67E:
    MOV edi, offset aPath
    CALL _getenv
    MOV r12, rax
    JMP loc_52D584
loc_52D690:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x3450', '0x3418', '0x28', '0x20', '0x320', '0x2F8', '0x83B44E', '0x623', '0x8000', '0x624', '0x625', '0x621', '0x620'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Image Processing'}

##### Q 121 - do_iplink
```assembly
loc_44A050:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 98h
    MOV rsi, [rdi]
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_40], rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_44A0F0
loc_44A07F:
    MOV edi, offset aAdd_2
    CALL sub_409910
    TEST eax, eax
    JS loc_44A66D
loc_44A091:
    CMP eax, 1
    LEA r15, [rbx+8]
    JLE loc_44A0E0
loc_44A09A:
    CMP eax, 2
    JZ loc_44A0F8
loc_44A09F:
    XOR esi, esi
    MOV rdi, r15
    MOV cs:byte_7431D5, 11h
    CALL sub_4492F0
loc_44A0B0:
    MOV rcx, [rsp+0C8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_44A65B
loc_44A0C7:
    ADD rsp, 98h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_44A0E0:
    SBB esi, esi
    MOV rdi, r15
    ADD esi, 11h
    CALL sub_449A70
    JMP loc_44A0B0
loc_44A0F0:
    MOV r15, rdi
    JMP loc_44A09F
loc_44A0F8:
    MOV rsi, [rbx+8]
    TEST rsi, rsi
    JZ loc_44A64A
loc_44A105:
    MOV r13d, 0FFFFFFFFh
    MOV [rsp+0C8h+s2], 0
    MOV [rsp+0C8h+var_B0], 0
    XOR r12d, r12d
    MOV [rsp+0C8h+var_C0], r13d
    XOR ebx, ebx
    XOR ebp, ebp
    JMP loc_44A14A
loc_44A130:
    OR ebp, 1
    OR ebx, 1
    MOV r14, r15
loc_44A139:
    MOV rsi, [r14+8]
    LEA r15, [r14+8]
    TEST rsi, rsi
    JZ loc_44A2B0
loc_44A14A:
    MOV edi, offset aUp_2
    CALL sub_409910
    TEST al, al
    JZ loc_44A130
loc_44A158:
    CMP al, 1
    JZ loc_44A1A0
loc_44A15C:
    CMP al, 2
    JZ loc_44A210
loc_44A164:
    CMP al, 3
    JZ loc_44A230
loc_44A16C:
    CMP al, 4
    JZ loc_44A260
loc_44A174:
    CMP al, 8
    JZ loc_44A290
loc_44A17C:
    JBE loc_44A1B0
loc_44A17E:
    CMP al, 9
    JZ loc_44A590
loc_44A186:
    TEST r12, r12
    JNZ loc_44A660
loc_44A18F:
    MOV r12, [r15]
    MOV r14, r15
    JMP loc_44A139
loc_44A1A0:
    OR ebp, 1
    AND ebx, 0FFFFFFFEh
    MOV r14, r15
    JMP loc_44A139
loc_44A1B0:
    MOV rdi, r15
    MOV [rsp+0C8h+var_BC], eax
    CALL sub_450850
    MOV rsi, [rax]
    MOV edi, offset aOn_1
    MOV r14, rax
    CALL sub_4098B0
    MOV edx, [rsp+0C8h+var_BC]
    CMP dl, 5
    JZ loc_44A610
loc_44A1D9:
    CMP dl, 6
    JZ loc_44A630
loc_44A1E2:
    CMP dl, 7
    JNZ loc_44A139
loc_44A1EB:
    TEST eax, eax
    JS loc_44A68D
loc_44A1F3:
    MOV edx, ebx
    OR ebp, 100h
    AND bh, 0FEh
    OR dh, 1
    TEST eax, eax
    CMOVZ ebx, edx
    JMP loc_44A139
loc_44A210:
    MOV rdi, r15
    CALL sub_450850
    MOV r14, rax
    MOV rax, [rax]
    MOV [rsp+0C8h+s2], rax
    JMP loc_44A139
loc_44A230:
    MOV rdi, r15
    CALL sub_450850
    CMP [rsp+0C8h+var_C0], 0FFFFFFFFh
    MOV r14, rax
    JNZ loc_44A6BC
loc_44A246:
    MOV rdi, [rax]
    MOV esi, offset aMtu
    CALL sub_450900
    MOV [rsp+0C8h+var_C0], eax
    JMP loc_44A139
loc_44A260:
    MOV rdi, r15
    CALL sub_450850
    CMP r13d, 0FFFFFFFFh
    MOV r14, rax
    JNZ loc_44A6AF
loc_44A275:
    MOV rdi, [rax]
    MOV esi, offset aQlen
    CALL sub_450900
    MOV r13d, eax
    JMP loc_44A139
loc_44A290:
    MOV rdi, r15
    CALL sub_450850
    MOV r14, rax
    MOV rax, [rax]
    MOV [rsp+0C8h+var_B0], rax
    JMP loc_44A139
loc_44A2B0:
    TEST r12, r12
    JZ loc_44A64A
loc_44A2B9:
    CMP [rsp+0C8h+var_B0], 0
    JZ loc_44A438
loc_44A2C5:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 11h
    CALL sub_40B520
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV r15d, eax
    MOV [rsp+0C8h+var_68], 0
    MOV [rsp+0C8h+var_60], 0
    MOV [rsp+0C8h+var_58], 0
    MOV [rsp+0C8h+var_50], 0
    MOV [rsp+0C8h+var_48], 0
    CALL sub_40A550
    LEA rdi, [rsp+0C8h+var_68]
    MOV ecx, offset aSiocgifindex
    MOV esi, 8933h
    MOV rdx, rdi
    MOV edi, r15d
    CALL sub_40B810
    MOV eax, 11h
    MOV edx, 6000h
    LEA rsi, [rsp+0C8h+addr]
    MOV [rsp+0C8h+addr.sa_family], ax
    MOV eax, dword ptr [rsp+0C8h+var_58]
    MOV edi, r15d
    MOV word ptr [rsp+0C8h+addr.sa_data], dx
    MOV edx, 14h
    MOV qword ptr [rsp+0C8h+addr.sa_data+6], 0
    MOV dword ptr [rsp+0C8h+var_88], 0
    MOV dword ptr [rsp+0C8h+addr.sa_data+2], eax
    CALL sub_40B540
    LEA rcx, [rsp+0C8h+len]
    LEA rsi, [rsp+0C8h+addr]
    MOV edi, r15d
    MOV [rsp+0C8h+len], 14h
    MOV rdx, rcx
    CALL _getsockname
    MOV edi, r15d
    CALL _close
    MOVZX r15d, word ptr [rsp+0C8h+addr.sa_data+6]
    LEA rdi, [rsp+0C8h+addr]
    MOV rsi, r12
    MOVZX r14d, [rsp+0C8h+addr.sa_data+9]
    MOV qword ptr [rsp+0C8h+addr.sa_family], 0
    MOV qword ptr [rsp+0C8h+addr.sa_data+6], 0
    MOV [rsp+0C8h+var_88], 0
    MOV [rsp+0C8h+var_80], 0
    MOV [rsp+0C8h+var_78], 0
    CALL sub_40A550
    XOR esi, esi
    CMP r15w, 1
    MOV rdx, [rsp+0C8h+var_B0]
    SETNZ sil
    LEA rdi, [rsp+0C8h+var_88+2]
    MOV word ptr [rsp+0C8h+var_88], r15w
    LEA esi, [rsi+rsi*4+0Eh]
    CALL sub_44F4F0
    TEST eax, eax
    JS loc_44A6DA
loc_44A406:
    MOVZX edx, r14b
    CMP edx, eax
    JNZ loc_44A6C9
loc_44A412:
    CALL sub_449A20
    LEA rdx, [rsp+0C8h+addr]
    MOV r15d, eax
    MOV edi, eax
    MOV ecx, offset aSiocsifhwaddr
    MOV esi, 8924h
    CALL sub_40B810
    MOV edi, r15d
    CALL _close
loc_44A438:
    MOV rax, [rsp+0C8h+s2]
    TEST rax, rax
    JZ loc_44A499
loc_44A442:
    MOV rsi, rax
    MOV rdi, r12
    CALL _strcmp
    TEST eax, eax
    JZ loc_44A499
loc_44A451:
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    CALL sub_40A550
    MOV r15, [rsp+0C8h+s2]
    LEA rdi, [rsp+0C8h+var_58]
    MOV rsi, r15
    CALL sub_40A550
    CALL sub_449A20
    LEA rdx, [rsp+0C8h+var_68]
    MOV r12d, eax
    MOV ecx, offset aSiocsifname
    MOV esi, 8923h
    MOV edi, eax
    CALL sub_40B810
    MOV edi, r12d
    MOV r12, r15
    CALL _close
loc_44A499:
    CMP r13d, 0FFFFFFFFh
    JZ loc_44A508
loc_44A49F:
    CALL sub_449A20
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV r15d, eax
    MOV [rsp+0C8h+var_68], 0
    MOV [rsp+0C8h+var_60], 0
    MOV [rsp+0C8h+var_58], 0
    MOV [rsp+0C8h+var_50], 0
    MOV [rsp+0C8h+var_48], 0
    CALL sub_40A550
    LEA rdx, [rsp+0C8h+var_68]
    MOV edi, r15d
    MOV ecx, offset aSiocsiftxqlen
    MOV esi, 8943h
    MOV dword ptr [rsp+0C8h+var_58], r13d
    CALL sub_40B810
    MOV edi, r15d
    CALL _close
loc_44A508:
    MOV r15d, [rsp+0C8h+var_C0]
    CMP r15d, 0FFFFFFFFh
    JZ loc_44A57C
loc_44A513:
    CALL sub_449A20
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV r13d, eax
    MOV [rsp+0C8h+var_68], 0
    MOV [rsp+0C8h+var_60], 0
    MOV [rsp+0C8h+var_58], 0
    MOV [rsp+0C8h+var_50], 0
    MOV [rsp+0C8h+var_48], 0
    CALL sub_40A550
    LEA rdx, [rsp+0C8h+var_68]
    MOV edi, r13d
    MOV ecx, offset aSiocsifmtu
    MOV esi, 8922h
    MOV dword ptr [rsp+0C8h+var_58], r15d
    CALL sub_40B810
    MOV edi, r13d
    CALL _close
loc_44A57C:
    TEST ebp, ebp
    JNZ loc_44A5A0
loc_44A580:
    XOR eax, eax
    JMP loc_44A0B0
loc_44A590:
    MOV rdi, r15
    CALL sub_450850
    MOV r15, rax
    JMP loc_44A186
loc_44A5A0:
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    CALL sub_40A550
    CALL sub_449A20
    LEA rdx, [rsp+0C8h+var_68]
    MOV ecx, offset aSiocgifflags
    MOV esi, 8913h
    MOV edi, eax
    MOV r12d, eax
    CALL sub_40B810
    MOVSX eax, word ptr [rsp+0C8h+var_58]
    MOV edx, eax
    XOR eax, ebx
    TEST eax, ebp
    JZ loc_44A5FA
loc_44A5D8:
    XOR ebx, edx
    MOV ecx, offset aSiocsifflags
    MOV esi, 8914h
    AND ebx, ebp
    MOV edi, r12d
    XOR ebx, edx
    LEA rdx, [rsp+0C8h+var_68]
    MOV word ptr [rsp+0C8h+var_58], bx
    CALL sub_40B810
loc_44A5FA:
    MOV edi, r12d
    CALL _close
    XOR eax, eax
    JMP loc_44A0B0
loc_44A610:
    TEST eax, eax
    JS loc_44A69E
loc_44A618:
    MOV edx, ebx
    OR ebp, 1000h
    AND bh, 0EFh
    OR dh, 10h
    TEST eax, eax
    CMOVZ ebx, edx
    JMP loc_44A139
loc_44A630:
    TEST eax, eax
    JS loc_44A67C
loc_44A634:
    MOV edx, ebx
    OR bpl, 80h
    OR bl, 80h
    AND dl, 7Fh
    TEST eax, eax
    CMOVZ ebx, edx
    JMP loc_44A139
loc_44A64A:
    MOV esi, offset aDev_1
    MOV edi, offset aSRequiresAnArg
    XOR eax, eax
    CALL sub_40A1E0
loc_44A65B:
    CALL ___stack_chk_fail
loc_44A660:
    MOV rsi, [r15]
    MOV edi, 50F6FBh
    CALL sub_4509A0
loc_44A66D:
    MOV rsi, cs:ident
    MOV rdi, [rbx]
    CALL sub_450870
loc_44A67C:
    MOV esi, 51023Ah
    MOV edi, offset aArgumentOfSMus
    XOR eax, eax
    CALL sub_40A1E0
loc_44A68D:
    MOV esi, offset aPromisc
    MOV edi, offset aArgumentOfSMus
    XOR eax, eax
    CALL sub_40A1E0
loc_44A69E:
    MOV esi, offset aMulticast
    MOV edi, offset aArgumentOfSMus
    XOR eax, eax
    CALL sub_40A1E0
loc_44A6AF:
    MOV rsi, [rax]
    MOV edi, offset aQlen
    CALL sub_450980
loc_44A6BC:
    MOV rsi, [rax]
    MOV edi, offset aMtu
    CALL sub_450980
loc_44A6C9:
    MOV rsi, [rsp+0C8h+var_B0]
    MOV edi, offset aWrongAddressSL
    XOR eax, eax
    CALL sub_40A1E0
loc_44A6DA:
    MOV edi, 1
    CALL _exit
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Loop', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xFFFFFFFD', '0xFFFFFFFC'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallel Processing', 'inferred_category': 'Parallel Computing'}

##### T 121 - do_iplink
```assembly
loc_45CB10:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 98h
    MOV rsi, [rdi]
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_40], rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_45CBB0
loc_45CB3F:
    MOV edi, offset aAdd_2
    CALL sub_40A2C0
    TEST eax, eax
    JS loc_45D28D
loc_45CB51:
    CMP eax, 1
    LEA r15, [rbx+8]
    JLE loc_45CBA0
loc_45CB5A:
    CMP eax, 2
    JZ loc_45CBB8
loc_45CB5F:
    XOR esi, esi
    MOV rdi, r15
    MOV cs:byte_78D1D5, 11h
    CALL sub_45BDE0
loc_45CB70:
    MOV rcx, [rsp+0C8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_45D288
loc_45CB87:
    ADD rsp, 98h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45CBA0:
    SBB esi, esi
    MOV rdi, r15
    ADD esi, 11h
    CALL sub_45C530
    JMP loc_45CB70
loc_45CBB0:
    MOV r15, rdi
    JMP loc_45CB5F
loc_45CBB8:
    MOV rsi, [rbx+8]
    TEST rsi, rsi
    JZ loc_45D277
loc_45CBC5:
    MOV r13d, 0FFFFFFFFh
    MOV [rsp+0C8h+s2], 0
    MOV [rsp+0C8h+var_B0], 0
    XOR r12d, r12d
    MOV [rsp+0C8h+var_C0], r13d
    XOR ebx, ebx
    XOR ebp, ebp
    JMP loc_45CC0A
loc_45CBF0:
    OR ebp, 1
    OR ebx, 1
    MOV r14, r15
loc_45CBF9:
    MOV rsi, [r14+8]
    LEA r15, [r14+8]
    TEST rsi, rsi
    JZ loc_45CD70
loc_45CC0A:
    MOV edi, offset aUp_2
    CALL sub_40A2C0
    TEST al, al
    JZ loc_45CBF0
loc_45CC18:
    CMP al, 1
    JZ loc_45CC60
loc_45CC1C:
    CMP al, 2
    JZ loc_45CCD0
loc_45CC24:
    CMP al, 3
    JZ loc_45CCF0
loc_45CC2C:
    CMP al, 4
    JZ loc_45CD20
loc_45CC34:
    CMP al, 8
    JZ loc_45CD50
loc_45CC3C:
    JBE loc_45CC70
loc_45CC3E:
    CMP al, 9
    JZ loc_45D0A0
loc_45CC46:
    TEST r12, r12
    JNZ loc_45D29C
loc_45CC4F:
    MOV r12, [r15]
    MOV r14, r15
    JMP loc_45CBF9
loc_45CC60:
    OR ebp, 1
    AND ebx, 0FFFFFFFEh
    MOV r14, r15
    JMP loc_45CBF9
loc_45CC70:
    MOV rdi, r15
    MOV [rsp+0C8h+var_BC], eax
    CALL sub_464200
    MOV rsi, [rax]
    MOV edi, offset aOn_1
    MOV r14, rax
    CALL sub_40A260
    MOV edx, [rsp+0C8h+var_BC]
    CMP dl, 5
    JZ loc_45D130
loc_45CC99:
    CMP dl, 6
    JZ loc_45D150
loc_45CCA2:
    CMP dl, 7
    JNZ loc_45CBF9
loc_45CCAB:
    TEST eax, eax
    JS loc_45D2D4
loc_45CCB3:
    MOV edx, ebx
    OR ebp, 100h
    AND bh, 0FEh
    OR dh, 1
    TEST eax, eax
    CMOVZ ebx, edx
    JMP loc_45CBF9
loc_45CCD0:
    MOV rdi, r15
    CALL sub_464200
    MOV r14, rax
    MOV rax, [rax]
    MOV [rsp+0C8h+s2], rax
    JMP loc_45CBF9
loc_45CCF0:
    MOV rdi, r15
    CALL sub_464200
    CMP [rsp+0C8h+var_C0], 0FFFFFFFFh
    MOV r14, rax
    JNZ loc_45D2C7
loc_45CD06:
    MOV rdi, [rax]
    MOV esi, offset aMtu
    CALL sub_464320
    MOV [rsp+0C8h+var_C0], eax
    JMP loc_45CBF9
loc_45CD20:
    MOV rdi, r15
    CALL sub_464200
    CMP r13d, 0FFFFFFFFh
    MOV r14, rax
    JNZ loc_45D2BA
loc_45CD35:
    MOV rdi, [rax]
    MOV esi, offset aQlen
    CALL sub_464320
    MOV r13d, eax
    JMP loc_45CBF9
loc_45CD50:
    MOV rdi, r15
    CALL sub_464200
    MOV r14, rax
    MOV rax, [rax]
    MOV [rsp+0C8h+var_B0], rax
    JMP loc_45CBF9
loc_45CD70:
    TEST r12, r12
    JZ loc_45D277
loc_45CD79:
    CMP [rsp+0C8h+var_B0], 0
    JZ loc_45CF0D
loc_45CD85:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 11h
    CALL sub_40CD40
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV r15d, eax
    MOV [rsp+0C8h+var_68], 0
    MOV [rsp+0C8h+var_60], 0
    MOV [rsp+0C8h+var_58], 0
    MOV [rsp+0C8h+var_50], 0
    MOV [rsp+0C8h+var_48], 0
    CALL sub_40AEE0
    LEA rdi, [rsp+0C8h+var_68]
    MOV ecx, offset aSiocgifindex
    MOV esi, 8933h
    MOV rdx, rdi
    MOV edi, r15d
    CALL sub_40D030
    MOV eax, 11h
    MOV edx, 6000h
    LEA rsi, [rsp+0C8h+addr]
    MOV [rsp+0C8h+addr.sa_family], ax
    MOV eax, dword ptr [rsp+0C8h+var_58]
    MOV edi, r15d
    MOV word ptr [rsp+0C8h+addr.sa_data], dx
    MOV edx, 14h
    MOV qword ptr [rsp+0C8h+addr.sa_data+6], 0
    MOV dword ptr [rsp+0C8h+var_88], 0
    MOV dword ptr [rsp+0C8h+addr.sa_data+2], eax
    CALL sub_40CD60
    LEA rcx, [rsp+0C8h+len]
    LEA rsi, [rsp+0C8h+addr]
    MOV edi, r15d
    MOV [rsp+0C8h+len], 14h
    MOV rdx, rcx
    CALL _getsockname
    MOV edi, r15d
    CALL _close
    MOVZX r15d, word ptr [rsp+0C8h+addr.sa_data+6]
    LEA rdi, [rsp+0C8h+addr]
    MOV rsi, r12
    MOVZX r14d, [rsp+0C8h+addr.sa_data+9]
    MOV qword ptr [rsp+0C8h+addr.sa_family], 0
    MOV qword ptr [rsp+0C8h+addr.sa_data+6], 0
    MOV [rsp+0C8h+var_88], 0
    MOV [rsp+0C8h+var_80], 0
    MOV [rsp+0C8h+var_78], 0
    CALL sub_40AEE0
    XOR esi, esi
    CMP r15w, 1
    MOV rdx, [rsp+0C8h+var_B0]
    SETNZ sil
    LEA rdi, [rsp+0C8h+var_88+2]
    MOV word ptr [rsp+0C8h+var_88], r15w
    LEA esi, [rsi+rsi*4+0Eh]
    CALL sub_462440
    TEST eax, eax
    JS loc_45D307
loc_45CEC6:
    MOVZX edx, r14b
    CMP edx, eax
    JNZ loc_45D2F6
loc_45CED2:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL _socket
    TEST eax, eax
    MOV r15d, eax
    JS loc_45D1D8
loc_45CEEE:
    LEA rdx, [rsp+0C8h+addr]
    MOV edi, r15d
    MOV ecx, offset aSiocsifhwaddr
    MOV esi, 8924h
    CALL sub_40D030
    MOV edi, r15d
    CALL _close
loc_45CF0D:
    MOV rax, [rsp+0C8h+s2]
    TEST rax, rax
    JZ loc_45CF82
loc_45CF17:
    MOV rsi, rax
    MOV rdi, r12
    CALL _strcmp
    TEST eax, eax
    JZ loc_45CF82
loc_45CF26:
    LEA r15, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV rdi, r15
    CALL sub_40AEE0
    MOV rsi, [rsp+0C8h+s2]
    LEA rdi, [r15+10h]
    CALL sub_40AEE0
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL _socket
    TEST eax, eax
    MOV r12d, eax
    JS loc_45D242
loc_45CF60:
    MOV edi, r12d
    MOV ecx, offset aSiocsifname
    MOV rdx, r15
    MOV esi, 8923h
    CALL sub_40D030
    MOV edi, r12d
    CALL _close
    MOV r12, [rsp+0C8h+s2]
loc_45CF82:
    CMP r13d, 0FFFFFFFFh
    JZ loc_45D005
loc_45CF88:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL _socket
    TEST eax, eax
    MOV r15d, eax
    JS loc_45D1A3
loc_45CFA4:
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV [rsp+0C8h+var_68], 0
    MOV [rsp+0C8h+var_60], 0
    MOV [rsp+0C8h+var_58], 0
    MOV [rsp+0C8h+var_50], 0
    MOV [rsp+0C8h+var_48], 0
    CALL sub_40AEE0
    LEA rdx, [rsp+0C8h+var_68]
    MOV edi, r15d
    MOV ecx, offset aSiocsiftxqlen
    MOV esi, 8943h
    MOV dword ptr [rsp+0C8h+var_58], r13d
    CALL sub_40D030
    MOV edi, r15d
    CALL _close
loc_45D005:
    CMP [rsp+0C8h+var_C0], 0FFFFFFFFh
    JZ loc_45D090
loc_45D010:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL _socket
    TEST eax, eax
    MOV r13d, eax
    JS loc_45D16E
loc_45D02C:
    LEA rdi, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV [rsp+0C8h+var_68], 0
    MOV [rsp+0C8h+var_60], 0
    MOV [rsp+0C8h+var_58], 0
    MOV [rsp+0C8h+var_50], 0
    MOV [rsp+0C8h+var_48], 0
    CALL sub_40AEE0
    MOV eax, [rsp+0C8h+var_C0]
    LEA rdx, [rsp+0C8h+var_68]
    MOV edi, r13d
    MOV ecx, offset aSiocsifmtu
    MOV esi, 8922h
    MOV dword ptr [rsp+0C8h+var_58], eax
    CALL sub_40D030
    MOV edi, r13d
    CALL _close
loc_45D090:
    TEST ebp, ebp
    JNZ loc_45D0B0
loc_45D094:
    XOR eax, eax
    JMP loc_45CB70
loc_45D0A0:
    MOV rdi, r15
    CALL sub_464200
    MOV r15, rax
    JMP loc_45CC46
loc_45D0B0:
    LEA r15, [rsp+0C8h+var_68]
    MOV rsi, r12
    MOV rdi, r15
    CALL sub_40AEE0
    XOR edx, edx
    MOV esi, 2
    MOV edi, 2
    CALL _socket
    TEST eax, eax
    MOV r12d, eax
    JS loc_45D20D
loc_45D0DC:
    MOV rdx, r15
    MOV ecx, offset aSiocgifflags
    MOV esi, 8913h
    MOV edi, r12d
    CALL sub_40D030
    MOVSX eax, word ptr [rsp+0C8h+var_58]
    MOV edx, eax
    XOR eax, ebx
    TEST eax, ebp
    JZ loc_45D11E
loc_45D0FE:
    XOR ebx, edx
    MOV ecx, offset aSiocsifflags
    MOV esi, 8914h
    AND ebx, ebp
    MOV edi, r12d
    XOR ebx, edx
    MOV rdx, r15
    MOV word ptr [rsp+0C8h+var_58], bx
    CALL sub_40D030
loc_45D11E:
    MOV edi, r12d
    CALL _close
    XOR eax, eax
    JMP loc_45CB70
loc_45D130:
    TEST eax, eax
    JS loc_45D2A9
loc_45D138:
    MOV edx, ebx
    OR ebp, 1000h
    AND bh, 0EFh
    OR dh, 10h
    TEST eax, eax
    CMOVZ ebx, edx
    JMP loc_45CBF9
loc_45D150:
    TEST eax, eax
    JS loc_45D2E5
loc_45D158:
    MOV edx, ebx
    OR bpl, 80h
    OR bl, 80h
    AND dl, 7Fh
    TEST eax, eax
    CMOVZ ebx, edx
    JMP loc_45CBF9
loc_45D16E:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 11h
    CALL _socket
    TEST eax, eax
    MOV r13d, eax
    JNS loc_45D02C
loc_45D18A:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40CD40
    MOV r13d, eax
    JMP loc_45D02C
loc_45D1A3:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 11h
    CALL _socket
    TEST eax, eax
    MOV r15d, eax
    JNS loc_45CFA4
loc_45D1BF:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40CD40
    MOV r15d, eax
    JMP loc_45CFA4
loc_45D1D8:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 11h
    CALL _socket
    TEST eax, eax
    MOV r15d, eax
    JNS loc_45CEEE
loc_45D1F4:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40CD40
    MOV r15d, eax
    JMP loc_45CEEE
loc_45D20D:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 11h
    CALL _socket
    TEST eax, eax
    MOV r12d, eax
    JNS loc_45D0DC
loc_45D229:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40CD40
    MOV r12d, eax
    JMP loc_45D0DC
loc_45D242:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 11h
    CALL _socket
    TEST eax, eax
    MOV r12d, eax
    JNS loc_45CF60
loc_45D25E:
    XOR edx, edx
    MOV esi, 2
    MOV edi, 0Ah
    CALL sub_40CD40
    MOV r12d, eax
    JMP loc_45CF60
loc_45D277:
    MOV esi, offset aDev_1
    MOV edi, offset aSRequiresAnArg
    XOR eax, eax
    CALL sub_40ABE0
loc_45D288:
    CALL ___stack_chk_fail
loc_45D28D:
    MOV rsi, cs:ident
    MOV rdi, [rbx]
    CALL sub_464220
loc_45D29C:
    MOV rsi, [r15]
    MOV edi, 55D778h
    CALL sub_4643B0
loc_45D2A9:
    MOV esi, offset aMulticast
    MOV edi, offset aArgumentOfSMus
    XOR eax, eax
    CALL sub_40ABE0
loc_45D2BA:
    MOV rsi, [rax]
    MOV edi, offset aQlen
    CALL sub_464390
loc_45D2C7:
    MOV rsi, [rax]
    MOV edi, offset aMtu
    CALL sub_464390
loc_45D2D4:
    MOV esi, offset aPromisc
    MOV edi, offset aArgumentOfSMus
    XOR eax, eax
    CALL sub_40ABE0
loc_45D2E5:
    MOV esi, 55E2EAh
    MOV edi, offset aArgumentOfSMus
    XOR eax, eax
    CALL sub_40ABE0
loc_45D2F6:
    MOV rsi, [rsp+0C8h+var_B0]
    MOV edi, offset aWrongAddressSL
    XOR eax, eax
    CALL sub_40ABE0
loc_45D307:
    MOV edi, 1
    CALL _exit
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFCh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallel Processing', 'inferred_category': 'Parallel Computing'}

##### Q 122 - gethdr
```assembly
loc_4453D0:
    PUSH r12
    PUSH rbp
    MOV esi, offset aS_13
    PUSH rbx
    MOV rbp, rdi
    CALL sub_445080
    MOV r10, cs:qword_7431F0
    MOVZX edx, byte ptr [r10+90h]
    TEST dl, dl
    JZ loc_445496
loc_4453F8:
    LEA rsi, [r10+90h]
    MOV ebx, eax
    MOV r9, 4000000001FFBh
    MOV rdi, rsi
    JMP loc_445419
loc_445410:
    MOV [rdi], cl
    ADD rdi, 1
    MOVZX edx, byte ptr [rdi]
loc_445419:
    LEA ecx, [rdx-2Dh]
    MOV eax, 1
    CMP cl, 32h
    JA loc_445436
loc_445426:
    MOV rax, r9
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    AND eax, 1
loc_445436:
    MOV ecx, edx
    OR ecx, 20h
    LEA r8d, [rcx-61h]
    CMP r8b, 19h
    SETBE r8b
    CMP r8b, al
    JNB loc_445410
loc_44544C:
    CMP dl, 3Ah
    JNZ loc_44549D
loc_445451:
    MOV byte ptr [rdi], 0
    ADD rdi, 1
    CALL sub_409E90
    CMP bl, 0Ah
    MOV r12, rax
    JZ loc_445484
loc_445465:
    MOV rdx, [rbp+8]
    CMP rdx, [rbp+10h]
    JNB loc_44548C
loc_44546F:
    LEA rax, [rdx+1]
    MOV [rbp+8], rax
    MOVZX eax, byte ptr [rdx]
loc_44547A:
    CMP eax, 0FFFFFFFFh
    JZ loc_445484
loc_44547F:
    CMP eax, 0Ah
    JNZ loc_445465
loc_445484:
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_44548C:
    MOV rdi, rbp
    CALL ___uflow
    JMP loc_44547A
loc_445496:
    POP rbx
    XOR eax, eax
    POP rbp
    POP r12
    RETN 
loc_44549D:
    CMP byte ptr [r10+90h], 1Fh
    MOV rax, rsi
    JBE loc_4454B3
loc_4454AA:
    ADD rax, 1
    CMP byte ptr [rax], 1Fh
    JA loc_4454AA
loc_4454B3:
    MOV byte ptr [rax], 0
    MOV edi, offset aBadHeaderLineS
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'ConditionalBranching', 'FunctionCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x70', '0x28', '0x628', '0x629'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Validation', 'inferred_category': 'ErrorHandling'}

##### T 122 - gethdr
```assembly
loc_4577B0:
    PUSH r12
    PUSH rbp
    MOV esi, offset aS_13
    PUSH rbx
    MOV rbp, rdi
    CALL sub_457490
    MOV r10, cs:qword_78D1F0
    CMP byte ptr [r10+90h], 0
    JZ loc_457876
loc_4577D6:
    LEA rsi, [r10+90h]
    MOV ebx, eax
    MOV r9, 4000000001FFBh
    MOV rdi, rsi
    JMP loc_4577F6
loc_4577F0:
    MOV [rdi], cl
    ADD rdi, 1
loc_4577F6:
    MOVZX edx, byte ptr [rdi]
    MOV eax, 1
    LEA ecx, [rdx-2Dh]
    CMP cl, 32h
    JA loc_457816
loc_457806:
    MOV rax, r9
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    AND eax, 1
loc_457816:
    MOV ecx, edx
    OR ecx, 20h
    LEA r8d, [rcx-61h]
    CMP r8b, 19h
    SETBE r8b
    CMP r8b, al
    JNB loc_4577F0
loc_45782C:
    CMP dl, 3Ah
    JNZ loc_45787D
loc_457831:
    MOV byte ptr [rdi], 0
    ADD rdi, 1
    CALL sub_40A8A0
    CMP bl, 0Ah
    MOV r12, rax
    JZ loc_457864
loc_457845:
    MOV rdx, [rbp+8]
    CMP rdx, [rbp+10h]
    JNB loc_45786C
loc_45784F:
    LEA rax, [rdx+1]
    MOV [rbp+8], rax
    MOVZX eax, byte ptr [rdx]
loc_45785A:
    CMP eax, 0FFFFFFFFh
    JZ loc_457864
loc_45785F:
    CMP eax, 0Ah
    JNZ loc_457845
loc_457864:
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_45786C:
    MOV rdi, rbp
    CALL ___uflow
    JMP loc_45785A
loc_457876:
    POP rbx
    XOR eax, eax
    POP rbp
    POP r12
    RETN 
loc_45787D:
    CMP byte ptr [r10+90h], 1Fh
    MOV rax, rsi
    JBE loc_457893
loc_45788A:
    ADD rax, 1
    CMP byte ptr [rax], 1Fh
    JA loc_45788A
loc_457893:
    MOV byte ptr [rax], 0
    MOV edi, offset aBadHeaderLineS
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'ErrorHandling'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x70', '0x28', '0x628', '0x629'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Assertion', 'inferred_category': 'Utility/Helper'}

##### Q 123 - svstatus_print
```assembly
loc_463040:
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV esi, offset aDown_0
    MOV edi, 1
    XOR ebp, ebp
    SUB rsp, 0A8h
    MOV rdx, rsp
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    CALL ___xstat64
    CMP eax, 0FFFFFFFFh
    JZ loc_4631A0
loc_463080:
    MOVZX eax, byte ptr cs:dest.c_ospeed+3
    MOV rbx, qword ptr cs:dest.c_cc+17h
    MOV r12d, cs:dest.c_ispeed
    BSWAP rbx
    CMP al, 1
    JZ loc_4631F8
loc_4630A0:
    JB loc_463160
loc_4630A6:
    CMP al, 2
    JNZ loc_4630BB
loc_4630AA:
    MOV esi, offset aFinish_1
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4630BB:
    XOR eax, eax
    MOV rdx, r13
    MOV esi, 50F065h
    MOV edi, 1
    CALL ___printf_chk
    CMP byte ptr cs:dest.c_ospeed+3, 0
    JNZ loc_4631D8
loc_4630DC:
    MOV edx, dword ptr cs:dest.c_cc+0Fh
    MOV eax, 0
    MOV esi, offset aUs
    MOV edi, 1
    SUB edx, ebx
    CMOVS edx, eax
    CALL ___printf_chk
    TEST r12d, r12d
    JZ loc_463180
loc_463104:
    TEST ebp, ebp
    JZ loc_463270
loc_46310C:
    CMP byte ptr cs:dest.c_ospeed, 0
    JNZ loc_463250
loc_463119:
    CMP byte ptr cs:dest.c_ospeed+1, 64h
    JZ loc_463290
loc_463126:
    CMP byte ptr cs:dest.c_ospeed+2, 0
    JNZ loc_463230
loc_463133:
    MOV eax, 1
loc_463138:
    MOV rcx, [rsp+0C8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_4632C6
loc_46314F:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_463160:
    MOV esi, offset aDown_1
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4630BB
loc_463180:
    TEST ebp, ebp
    JNZ loc_463210
loc_463188:
    CMP byte ptr cs:dest.c_ospeed+1, 75h
    JZ loc_4632B0
loc_463195:
    MOV eax, 2
    JMP loc_463138
loc_4631A0:
    MOV rax, cs:qword_7431E8
    MOV ebp, 1
    CMP dword ptr [rax], 2
    JZ loc_463080
loc_4631B5:
    MOV rax, qword ptr cs:dest.c_cflag
    MOV edi, offset aWarningCanTSta
    MOV rsi, [rax]
    XOR eax, eax
    CALL sub_409CC0
    XOR eax, eax
    JMP loc_463138
loc_4631D8:
    MOV edx, r12d
    MOV esi, offset aPidD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4630DC
loc_4631F8:
    MOV esi, offset aRun_1
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4630BB
loc_463210:
    MOV esi, offset aNormallyUp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_463188
loc_463230:
    MOV esi, offset unk_5148EE
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_463133
loc_463250:
    MOV esi, offset unk_5148D9
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_463119
loc_463270:
    MOV esi, offset aNormallyDown
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_46310C
loc_463290:
    MOV esi, offset aWantDown
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_463126
loc_4632B0:
    MOV esi, offset aWantUp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_463195
loc_4632C6:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'FunctionCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x7D85CE', '0x1D0F', '0x40000', '0x1D0D', '0x1D0C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Validation', 'inferred_category': 'ErrorHandling'}

##### T 123 - svstatus_print
```assembly
loc_47ACB0:
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV esi, (offset aIpLinkSetIface_0+14h)
    MOV edi, 1
    XOR ebp, ebp
    SUB rsp, 0A8h
    MOV rdx, rsp
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    CALL ___xstat64
    CMP eax, 0FFFFFFFFh
    JZ loc_47AE10
loc_47ACF0:
    MOVZX eax, byte ptr cs:buf.c_ospeed+3
    MOV rbx, qword ptr cs:buf.c_cc+17h
    MOV r12d, cs:buf.c_ispeed
    BSWAP rbx
    CMP al, 1
    JZ loc_47AE68
loc_47AD10:
    JB loc_47ADD0
loc_47AD16:
    CMP al, 2
    JNZ loc_47AD2B
loc_47AD1A:
    MOV esi, offset aFinish_1
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_47AD2B:
    XOR eax, eax
    MOV rdx, r13
    MOV esi, 55D105h
    MOV edi, 1
    CALL ___printf_chk
    CMP byte ptr cs:buf.c_ospeed+3, 0
    JNZ loc_47AE48
loc_47AD4C:
    MOV edx, dword ptr cs:buf.c_cc+0Fh
    MOV eax, 0
    MOV esi, offset aUs
    MOV edi, 1
    SUB edx, ebx
    CMOVS edx, eax
    CALL ___printf_chk
    TEST r12d, r12d
    JZ loc_47ADF0
loc_47AD74:
    TEST ebp, ebp
    JZ loc_47AEE0
loc_47AD7C:
    CMP byte ptr cs:buf.c_ospeed, 0
    JNZ loc_47AEC0
loc_47AD89:
    CMP byte ptr cs:buf.c_ospeed+1, 64h
    JZ loc_47AF00
loc_47AD96:
    CMP byte ptr cs:buf.c_ospeed+2, 0
    JNZ loc_47AEA0
loc_47ADA3:
    MOV eax, 1
loc_47ADA8:
    MOV rcx, [rsp+0C8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_47AF36
loc_47ADBF:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_47ADD0:
    MOV esi, offset aDown_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47AD2B
loc_47ADF0:
    TEST ebp, ebp
    JNZ loc_47AE80
loc_47ADF8:
    CMP byte ptr cs:buf.c_ospeed+1, 75h
    JZ loc_47AF20
loc_47AE05:
    MOV eax, 2
    JMP loc_47ADA8
loc_47AE10:
    MOV rax, cs:qword_78D1E8
    MOV ebp, 1
    CMP dword ptr [rax], 2
    JZ loc_47ACF0
loc_47AE25:
    MOV rax, qword ptr cs:buf.c_cflag
    MOV edi, offset aWarningCanTSta
    MOV rsi, [rax]
    XOR eax, eax
    CALL sub_40A6D0
    XOR eax, eax
    JMP loc_47ADA8
loc_47AE48:
    MOV edx, r12d
    MOV esi, offset aPidD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47AD4C
loc_47AE68:
    MOV esi, offset aRun_1
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47AD2B
loc_47AE80:
    MOV esi, offset aNormallyUp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47ADF8
loc_47AEA0:
    MOV esi, offset unk_562993
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47ADA3
loc_47AEC0:
    MOV esi, offset unk_56297E
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47AD89
loc_47AEE0:
    MOV esi, offset aNormallyDown
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47AD7C
loc_47AF00:
    MOV esi, offset aWantDown
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47AD96
loc_47AF20:
    MOV esi, offset aWantUp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47AE05
loc_47AF36:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1030', '0x1028', '0x1008', '0x1018', '0x83B44E', '0x1D0F', '0x40000', '0x1D0D', '0x1D0C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Validation/Check', 'inferred_category': 'ErrorHandling'}

##### Q 124 - raise_interrupt
```assembly
loc_466B40:
    PUSH rbx
    MOV rbx, cs:qword_743208
    MOV edi, 1
    MOV byte ptr [rbx+3Ch], 0
    CALL sub_40BFC0
    MOV eax, [rbx+8]
    TEST eax, eax
    JNZ loc_466B63
loc_466B5D:
    CMP byte ptr [rbx+44h], 0
    JNZ loc_466B79
loc_466B63:
    MOV edi, 2
    XOR esi, esi
    CALL _signal
    MOV edi, 2
    CALL _raise
loc_466B79:
    MOV byte ptr [rbx], 82h
    XOR edi, edi
    CALL sub_466910
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Comparison'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x120', '0x140', '0x180', '0x1A0', '0x1D0', '0x4', '0x2270', '0x7D85CE', '0x148', '0x168', '0x170'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Validation of structure contents', 'inferred_category': 'Data Validation and Initialization'}

##### T 124 - raise_interrupt
```assembly
loc_47EAB0:
    PUSH rbx
    MOV rbx, cs:qword_78D208
    MOV edi, 1
    MOV byte ptr [rbx+3Ch], 0
    CALL sub_40DA20
    MOV eax, [rbx+8]
    TEST eax, eax
    JNZ loc_47EAD3
loc_47EACD:
    CMP byte ptr [rbx+44h], 0
    JNZ loc_47EAE9
loc_47EAD3:
    MOV edi, 2
    XOR esi, esi
    CALL _signal
    MOV edi, 2
    CALL _raise
loc_47EAE9:
    MOV byte ptr [rbx], 82h
    XOR edi, edi
    CALL sub_47E880
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Unknown', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'ControlTransfer'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x3278', '0x3270', '0x1268', '0x0DCC', '0x08000', '0x164C6D534208', '0x803B44E0DC'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Data Structure Manipulation', 'inferred_category': 'Utility Function'}

##### Q 125 - get_console_fd_or_die
```assembly
loc_4DEFB0:
    PUSH r13
    PUSH r12
    MOV r13d, offset off_500A10
    PUSH rbp
    PUSH rbx
    MOV r12d, offset file
    MOV ebp, 2
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
loc_4DEFDB:
    XOR eax, eax
    MOV esi, 2
    MOV rdi, r12
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JS loc_4DF080
loc_4DEFF4:
    LEA rdx, [rsp+38h+var_31]
    XOR eax, eax
    MOV esi, 4B33h
    MOV edi, ebx
    MOV [rsp+38h+var_31], 0
    CALL _ioctl
    TEST eax, eax
    JZ loc_4DF0E3
loc_4DF014:
    MOV edi, ebx
    CALL _close
loc_4DF01B:
    LEA rdx, [rsp+38h+var_31]
    XOR eax, eax
    MOV esi, 4B33h
    MOV edi, ebp
    MOV [rsp+38h+var_31], 0
    CALL _ioctl
    TEST eax, eax
    JNZ loc_4DF060
loc_4DF037:
    MOV rcx, [rsp+38h+var_30]
    XOR rcx, fs:28h
    MOV eax, ebp
    JNZ loc_4DF0DE
loc_4DF04D:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4DF060:
    SUB ebp, 1
    SUB r13, 8
    CMP ebp, 0FFFFFFFFh
    JNZ loc_4DF0A0
loc_4DF06C:
    MOV edi, offset unk_51ADBF
    XOR eax, eax
    CALL sub_40A1E0
loc_4DF080:
    MOV rax, cs:qword_7431E8
    CMP dword ptr [rax], 0Dh
    JZ loc_4DF0A9
loc_4DF08C:
    TEST ebx, ebx
    JNS loc_4DEFF4
loc_4DF094:
    JMP loc_4DF01B
loc_4DF0A0:
    MOV r12, [r13+10h]
    JMP loc_4DEFDB
loc_4DF0A9:
    XOR esi, esi
    XOR eax, eax
    MOV rdi, r12
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JNS loc_4DEFF4
loc_4DF0BF:
    MOV rax, cs:qword_7431E8
    CMP dword ptr [rax], 0Dh
    JNZ loc_4DF08C
loc_4DF0CB:
    MOV esi, 1
    MOV rdi, r12
    XOR eax, eax
    CALL _open64
    MOV ebx, eax
    JMP loc_4DF08C
loc_4DF0DE:
    CALL ___stack_chk_fail
loc_4DF0E3:
    MOV ebp, ebx
    JMP loc_4DF037
```
{'input_parameter_count': 1, 'input_parameter_types': ['Unknown'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Arithmetic', 'ControlFlow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 14, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x8', '0xA', '0xD', '0x3', '0x1B', '0x1C', '0x21', '0xF', '0x3F'], 'presence_of_notable_floating_point_constants': ['0.25', '0.75', '0.9375'], 'count_of_distinct_immediate_values': 50, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Error Handling or Validation', 'inferred_category': 'Utility/Library'}

##### T 125 - get_console_fd_or_die
```assembly
loc_527C50:
    PUSH r13
    PUSH r12
    MOV r12d, offset off_54EC20
    PUSH rbp
    PUSH rbx
    MOV ebp, 2
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
loc_527C75:
    MOV r13, [r12+10h]
    XOR eax, eax
    MOV esi, 2
    MOV rdi, r13
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JS loc_527D18
loc_527C93:
    LEA rdx, [rsp+38h+var_31]
    XOR eax, eax
    MOV esi, 4B33h
    MOV edi, ebx
    MOV [rsp+38h+var_31], 0
    CALL _ioctl
    TEST eax, eax
    JZ loc_527D6A
loc_527CB3:
    MOV edi, ebx
    CALL _close
loc_527CBA:
    LEA rdx, [rsp+38h+var_31]
    XOR eax, eax
    MOV esi, 4B33h
    MOV edi, ebp
    MOV [rsp+38h+var_31], 0
    CALL _ioctl
    TEST eax, eax
    JNZ loc_527CF8
loc_527CD6:
    MOV rcx, [rsp+38h+var_30]
    XOR rcx, fs:28h
    MOV eax, ebp
    JNZ loc_527D65
loc_527CE8:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_527CF8:
    SUB ebp, 1
    SUB r12, 8
    CMP ebp, 0FFFFFFFFh
    JNZ loc_527C75
loc_527D08:
    MOV edi, offset unk_568D7B
    XOR eax, eax
    CALL sub_40ABE0
loc_527D18:
    MOV rax, cs:qword_78D1E8
    CMP dword ptr [rax], 0Dh
    JZ loc_527D30
loc_527D24:
    TEST ebx, ebx
    JNS loc_527C93
loc_527D2C:
    JMP loc_527CBA
loc_527D30:
    XOR esi, esi
    XOR eax, eax
    MOV rdi, r13
    CALL _open64
    TEST eax, eax
    MOV ebx, eax
    JNS loc_527C93
loc_527D46:
    MOV rax, cs:qword_78D1E8
    CMP dword ptr [rax], 0Dh
    JNZ loc_527D24
loc_527D52:
    MOV esi, 1
    MOV rdi, r13
    XOR eax, eax
    CALL _open64
    MOV ebx, eax
    JMP loc_527D24
loc_527D65:
    CALL ___stack_chk_fail
loc_527D6A:
    MOV ebp, ebx
    JMP loc_527CD6
```
None

##### Q 126 - fallocate_main
```assembly
loc_483DF0:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aLO
    MOV rdi, rbx
    SUB rsp, 20h
    MOV rax, fs:28h
    MOV [rsp+38h+var_20], rax
    XOR eax, eax
    LEA rcx, [rsp+38h+var_28]
    LEA rdx, [rsp+38h+var_30]
    MOV [rsp+38h+var_28], 515824h
    CALL sub_4DFD70
    TEST al, 1
    JZ loc_483EA5
loc_483E2F:
    MOV rdi, [rsp+38h+var_28]
    MOV esi, offset byte_500040
    CALL sub_4ECC00
    MOV rdi, [rsp+38h+var_30]
    MOV esi, offset byte_500040
    MOV rbp, rax
    CALL sub_4ECC00
    MOV r12, rax
    MOVSXD rax, cs:optind
    MOV edx, 1B6h
    MOV esi, 42h
    LEA rbx, [rbx+rax*8]
    MOV rdi, [rbx]
    CALL sub_40AE30
    MOV rdx, r12
    MOV rsi, rbp
    MOV edi, eax
    CALL _posix_fallocate64
    MOV rdx, cs:qword_7431E8
    TEST eax, eax
    MOV [rdx], eax
    JNZ loc_483EAF
loc_483E8A:
    XOR eax, eax
    MOV rcx, [rsp+38h+var_20]
    XOR rcx, fs:28h
    JNZ loc_483EAA
loc_483E9C:
    ADD rsp, 20h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_483EA5:
    CALL sub_408E80
loc_483EAA:
    CALL ___stack_chk_fail
loc_483EAF:
    MOV rsi, [rbx]
    MOV edi, offset aFallocateS
    XOR eax, eax
    CALL sub_409DA0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'ErrorHandling'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'File Manipulation'}

##### T 126 - fallocate_main
```assembly
loc_4A5650:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aLO
    MOV rdi, rbx
    SUB rsp, 20h
    MOV rax, fs:28h
    MOV [rsp+38h+var_20], rax
    XOR eax, eax
    LEA rcx, [rsp+38h+var_28]
    LEA rdx, [rsp+38h+var_30]
    MOV [rsp+38h+var_28], 563918h
    CALL sub_5291B0
    TEST al, 1
    JZ loc_4A5705
loc_4A568F:
    MOV rdi, [rsp+38h+var_28]
    MOV esi, offset byte_54DAE0
    CALL sub_539430
    MOV rdi, [rsp+38h+var_30]
    MOV esi, offset byte_54DAE0
    MOV rbp, rax
    CALL sub_539430
    MOV r12, rax
    MOVSXD rax, cs:optind
    MOV edx, 1B6h
    MOV esi, 42h
    LEA rbx, [rbx+rax*8]
    MOV rdi, [rbx]
    CALL sub_40C3C0
    MOV rdx, r12
    MOV rsi, rbp
    MOV edi, eax
    CALL _posix_fallocate64
    MOV rdx, cs:qword_78D1E8
    TEST eax, eax
    MOV [rdx], eax
    JNZ loc_4A570F
loc_4A56EA:
    XOR eax, eax
    MOV rcx, [rsp+38h+var_20]
    XOR rcx, fs:28h
    JNZ loc_4A570A
loc_4A56FC:
    ADD rsp, 20h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4A5705:
    CALL sub_409830
loc_4A570A:
    CALL ___stack_chk_fail
loc_4A570F:
    MOV rsi, [rbx]
    MOV edi, offset aFallocateS
    XOR eax, eax
    CALL sub_40A7B0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x3450', '0x3418', '0x3448', '0x3440', '0x3F8', '0x2', '0x379', '0x58', '0x375', '0x376', '0x37C', '0x377', '0x56', '0x5E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Manipulation'}

##### Q 127 - init_if
```assembly
loc_45B720:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 48h
    SUB rsp, 8
    CALL sub_40AD10
    TEST rbx, rbx
    JZ loc_45B769
loc_45B738:
    CMP byte ptr [rbx], 0
    JZ loc_45B769
loc_45B73D:
    MOV rbp, rax
    MOV [rax+38h], rbx
    MOV qword ptr [rax+8], offset sub_45B190
    MOV rsi, rbx
    MOV edi, 50E85Ch
    XOR eax, eax
    CALL sub_40B190
    MOV [rbp+40h], rax
    ADD rsp, 8
    MOV rax, rbp
    POP rbx
    POP rbp
    RETN 
loc_45B769:
    CALL sub_408E80
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'JumpTable'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility'}

##### T 127 - init_if
```assembly
loc_46F0C0:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV edi, 48h
    SUB rsp, 8
    CALL sub_40C260
    TEST rbx, rbx
    JZ loc_46F109
loc_46F0D8:
    CMP byte ptr [rbx], 0
    JZ loc_46F109
loc_46F0DD:
    MOV rbp, rax
    MOV [rax+38h], rbx
    MOV qword ptr [rax+8], offset sub_46F600
    MOV rsi, rbx
    MOV edi, 55C804h
    XOR eax, eax
    CALL sub_40C860
    MOV [rbp+40h], rax
    ADD rsp, 8
    MOV rax, rbp
    POP rbx
    POP rbp
    RETN 
loc_46F109:
    CALL sub_409830
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'JumpTable'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0x2C', '0x4D'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility Function'}

##### Q 128 - add_cmd
```assembly
loc_4CF920:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 20h
    MOV rsi, qword ptr cs:preg._bf_38
    MOV rax, fs:28h
    MOV [rsp+48h+var_30], rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_4CF96E
loc_4CF94B:
    MOV rdx, rdi
    MOV edi, offset aSS_33
    CALL sub_40B190
    MOV rdi, qword ptr cs:preg._bf_38
    MOV rbx, rax
    CALL _free
    MOV qword ptr cs:preg._bf_38, rbx
loc_4CF96E:
    MOV rdi, rbx
    CALL _strlen
    TEST eax, eax
    JZ loc_4CF9E0
loc_4CF97A:
    LEA ebp, [rax-1]
    CMP byte ptr [rbx+rbp], 5Ch
    MOV rdx, rbp
    JZ loc_4CF99B
loc_4CF986:
    JMP loc_4CF9E0
loc_4CF990:
    LEA esi, [rdx-1]
    CMP byte ptr [rbx+rsi], 5Ch
    JNZ loc_4CF99F
loc_4CF999:
    MOV edx, esi
loc_4CF99B:
    TEST edx, edx
    JNZ loc_4CF990
loc_4CF99F:
    SUB eax, edx
    TEST al, 1
    JZ loc_4CF9E0
loc_4CF9A5:
    MOV rax, qword ptr cs:preg._bf_38
    TEST rax, rax
    JZ loc_4CFE3F
loc_4CF9B5:
    MOV byte ptr [rax+rbp], 0
loc_4CF9B9:
    MOV rax, [rsp+48h+var_30]
    XOR rax, fs:28h
    JNZ loc_4CFFB5
loc_4CF9CD:
    ADD rsp, 20h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4CF9E0:
    MOV ebp, 0FFFFFFFEh
    NOP dword ptr [rax]
loc_4CF9E8:
    CMP byte ptr [rbx], 0
    JZ loc_4CFA2D
loc_4CF9ED:
    MOV rdi, rbx
    MOV esi, offset asc_50C0A0
    CALL _strspn
    ADD rbx, rax
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_4CFA2D
loc_4CFA04:
    CMP al, 23h
    JNZ loc_4CFA50
loc_4CFA08:
    CMP byte ptr [rbx+1], 6Eh
    JNZ loc_4CFA22
loc_4CFA0E:
    JMP loc_4CFC98
loc_4CFA18:
    CMP eax, 0Dh
    JZ loc_4CF9E8
loc_4CFA1D:
    CMP eax, 0Ah
    JZ loc_4CF9E8
loc_4CFA22:
    ADD rbx, 1
    MOVSX eax, byte ptr [rbx]
    TEST al, al
    JNZ loc_4CFA18
loc_4CFA2D:
    MOV rdi, qword ptr cs:preg._bf_38
    CALL _free
    MOV qword ptr cs:preg._bf_38, 0
    JMP loc_4CF9B9
loc_4CFA50:
    MOV edi, 48h
    CALL sub_40AD10
    LEA rdx, [rax+8]
    LEA rsi, [rax+20h]
    MOV r12, rax
    MOV rdi, rbx
    CALL sub_4CF660
    MOVSXD rdi, eax
    MOV eax, [r12+20h]
    ADD rdi, rbx
    MOV [r12+24h], eax
    CMP byte ptr [rdi], 2Ch
    JNZ loc_4CFABD
loc_4CFA82:
    CMP byte ptr [rdi+1], 2Bh
    LEA rbx, [rdi+1]
    JZ loc_4CFC00
loc_4CFA90:
    LEA rdx, [r12+10h]
    LEA rsi, [r12+28h]
    MOV rdi, rbx
    CALL sub_4CF660
    MOVSXD rdi, eax
    LEA edx, [rax-1]
    ADD rdi, rbx
loc_4CFAAB:
    TEST edx, edx
    JS loc_4CFFBA
loc_4CFAB3:
    MOV eax, [r12+28h]
    MOV [r12+2Ch], eax
loc_4CFABD:
    CALL sub_409E90
    MOVZX esi, byte ptr [rax]
    MOV r14, rax
    CMP sil, 21h
    JZ loc_4CFE18
loc_4CFAD2:
    TEST sil, sil
    JZ loc_4CFFA9
loc_4CFADB:
    MOVSX r13d, sil
    MOV [r12+46h], sil
    MOV edi, offset aSaicrwBttyddgg
    MOV esi, r13d
    LEA rbx, [r14+1]
    CALL _strchrnul
    SUB rax, offset aSaicrwBttyddgg
    TEST eax, eax
    JZ loc_4CFCC8
loc_4CFB03:
    CMP eax, 3
    JA loc_4CFBA0
loc_4CFB0C:
    JNZ loc_4CFC70
loc_4CFB12:
    MOVZX eax, byte ptr [r14+1]
    CMP al, 5Ch
    JZ loc_4CFDA8
loc_4CFB1F:
    CMP al, 0Ah
    JNZ loc_4CFB47
loc_4CFB23:
    JMP loc_4CFDA8
loc_4CFB30:
    ADD rbx, 1
    MOVZX eax, byte ptr [rbx]
    CMP al, 0Ah
    JZ loc_4CFDA8
loc_4CFB3F:
    CMP al, 5Ch
    JZ loc_4CFDA8
loc_4CFB47:
    SUB eax, 9
    CMP al, 17h
    JZ loc_4CFB30
loc_4CFB4E:
    CMP al, 4
    JBE loc_4CFB30
loc_4CFB52:
    MOV rdi, rbx
    CALL _strlen
    MOV rdi, rbx
    MOV r13, rax
    MOV esi, eax
    CALL sub_4CF600
    MOV r13d, r13d
    XOR r8d, r8d
    XOR ecx, ecx
    MOV edx, 0FFFFFFFFh
    MOV rsi, rax
    MOV rdi, rax
    MOV [r12+38h], rax
    ADD rbx, r13
    CALL sub_4CF520
loc_4CFB87:
    MOV rax, cs:preg.translate
    MOV [rax], r12
    MOV cs:preg.translate, r12
    JMP loc_4CF9E8
loc_4CFBA0:
    CMP eax, 5
    JA loc_4CFC40
loc_4CFBA9:
    CMP eax, 4
    JNZ loc_4CFBC7
loc_4CFBAE:
    MOV eax, [r12+28h]
    TEST eax, eax
    JNZ loc_4CFC85
loc_4CFBBB:
    CMP qword ptr [r12+10h], 0
    JNZ loc_4CFC85
loc_4CFBC7:
    LEA rsi, [r12+38h]
    MOV rdi, rbx
    CALL sub_4CF850
    CDQE 
    ADD rbx, rax
    CMP byte ptr [r12+46h], 77h
    JNZ loc_4CFB87
loc_4CFBE1:
    MOV rdi, [r12+38h]
    CALL sub_40A3F0
    MOV byte ptr [r12+45h], 0Ah
    MOV [r12+30h], rax
    JMP loc_4CFB87
loc_4CFC00:
    MOVZX eax, byte ptr [rdi+2]
    SUB eax, 30h
    CMP al, 9
    JA loc_4CFA90
loc_4CFC0F:
    LEA rsi, [rsp+48h+endptr]
    ADD rdi, 2
    MOV edx, 0Ah
    CALL _strtol
    MOV ecx, ebp
    MOV edx, eax
    MOV rdi, [rsp+48h+endptr]
    SUB ecx, eax
    MOV [r12+28h], ecx
    JMP loc_4CFAAB
loc_4CFC40:
    CMP eax, 9
    JBE loc_4CFE5F
loc_4CFC49:
    CMP eax, 0Ah
    JZ loc_4CFECF
loc_4CFC52:
    CMP eax, 1Ah
    JBE loc_4CFB87
loc_4CFC5B:
    MOV esi, r13d
    MOV edi, offset aUnsupportedCom
    XOR eax, eax
    CALL sub_40A1E0
loc_4CFC70:
    MOV edx, [r12+28h]
    TEST edx, edx
    JNZ loc_4CFC85
loc_4CFC79:
    CMP qword ptr [r12+10h], 0
    JZ loc_4CFB12
loc_4CFC85:
    MOV esi, r13d
    MOV edi, offset aCommandCUsesOn
    XOR eax, eax
    CALL sub_40A1E0
loc_4CFC98:
    ADD cs:dest.c_iflag, 1
    MOVSX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_4CFA2D
loc_4CFCAA:
    CMP eax, 0Ah
    JZ loc_4CF9E8
loc_4CFCB3:
    CMP eax, 0Dh
    JNZ loc_4CFA22
loc_4CFCBC:
    JMP loc_4CF9E8
loc_4CFCC8:
    LEA rdx, [r12+38h]
    LEA rsi, [rsp+48h+ptr]
    MOV rdi, rbx
    MOV r14d, cs:dest.c_oflag
    CALL sub_4CF7C0
    MOV dword ptr [r12+40h], 1
    MOV r13d, eax
    NOP dword ptr [rax]
loc_4CFCF0:
    ADD r13d, 1
    MOVSXD rdx, r13d
    LEA rdi, [rbx+rdx]
    MOVZX eax, byte ptr [rdi]
    TEST al, al
    JZ loc_4CFE57
loc_4CFD06:
    LEA ecx, [rax-30h]
    CMP cl, 9
    JA loc_4CFD40
loc_4CFD0E:
    MOV rax, [rsp+48h+ptr]
    CMP byte ptr [rax], 5Eh
    JZ loc_4CFCF0
loc_4CFD18:
    LEA rsi, [rsp+48h+endptr]
    MOV edx, 0Ah
    MOV r13d, ebx
    MOV [rsp+48h+endptr], rdi
    NOT r13d
    CALL _strtol
    ADD r13d, dword ptr [rsp+48h+endptr]
    MOV [r12+40h], eax
    JMP loc_4CFCF0
loc_4CFD40:
    LEA ecx, [rax-9]
    CMP cl, 17h
    JZ loc_4CFCF0
loc_4CFD48:
    CMP cl, 4
    JBE loc_4CFCF0
loc_4CFD4D:
    CMP al, 67h
    JZ loc_4CFEB3
loc_4CFD55:
    JLE loc_4CFDB8
loc_4CFD57:
    CMP al, 70h
    JZ loc_4CFEA8
loc_4CFD5F:
    JLE loc_4CFE32
loc_4CFD65:
    CMP al, 77h
    JNZ loc_4CFE53
loc_4CFD6D:
    LEA rdi, [rbx+rdx+1]
    LEA rsi, [rsp+48h+endptr]
    CALL sub_4CF850
    MOV rdi, [rsp+48h+endptr]
    ADD r13d, eax
    CALL sub_40A3F0
    MOV rdi, [rsp+48h+endptr]
    MOV [r12+30h], rax
    MOV byte ptr [r12+45h], 0Ah
    CALL _free
    JMP loc_4CFCF0
loc_4CFDA8:
    ADD rbx, 1
    JMP loc_4CFB52
loc_4CFDB8:
    CMP al, 3Bh
    JZ loc_4CFE57
loc_4CFDC0:
    CMP al, 49h
    JZ loc_4CFE36
loc_4CFDC4:
    CMP al, 23h
    JNZ loc_4CFE9C
loc_4CFDCC:
    CALL _strlen
    ADD eax, r13d
    CDQE 
    ADD rbx, rax
loc_4CFDD9:
    MOV rdi, [rsp+48h+ptr]
    CMP byte ptr [rdi], 0
    JZ loc_4CFE07
loc_4CFDE3:
    MOV edi, 40h
    CALL sub_40AD10
    MOV rsi, [rsp+48h+ptr]
    MOV rdi, rax
    MOV edx, r14d
    MOV [r12+18h], rax
    CALL sub_4EDF10
    MOV rdi, [rsp+48h+ptr]
loc_4CFE07:
    CALL _free
    JMP loc_4CFB87
loc_4CFE18:
    LEA rdi, [rax+1]
    OR byte ptr [r12+44h], 1
    CALL sub_409E90
    MOV r14, rax
    MOVZX esi, byte ptr [rax]
    JMP loc_4CFAD2
loc_4CFE32:
    CMP al, 69h
    JNZ loc_4CFE9C
loc_4CFE36:
    OR r14d, 2
    JMP loc_4CFCF0
loc_4CFE3F:
    MOV rdi, rbx
    CALL sub_40AD40
    MOV qword ptr cs:preg._bf_38, rax
    JMP loc_4CF9B5
loc_4CFE53:
    CMP al, 7Dh
    JNZ loc_4CFE9C
loc_4CFE57:
    MOV rbx, rdi
    JMP loc_4CFDD9
loc_4CFE5F:
    MOV rdi, rbx
    CALL sub_409E90
    MOV esi, offset asc_50C0A0
    MOV rdi, rax
    MOV rbx, rax
    CALL _strcspn
    TEST eax, eax
    MOV r13, rax
    JZ loc_4CFB87
loc_4CFE82:
    MOV rdi, rbx
    MOV esi, eax
    MOVSXD r13, r13d
    CALL sub_40AD70
    ADD rbx, r13
    MOV [r12+38h], rax
    JMP loc_4CFB87
loc_4CFE9C:
    MOV edi, offset aBadOptionInSub
    XOR eax, eax
    CALL sub_40A1E0
loc_4CFEA8:
    OR byte ptr [r12+44h], 4
    JMP loc_4CFCF0
loc_4CFEB3:
    MOV rax, [rsp+48h+ptr]
    CMP byte ptr [rax], 5Eh
    JZ loc_4CFCF0
loc_4CFEC1:
    MOV dword ptr [r12+40h], 0
    JMP loc_4CFCF0
loc_4CFECF:
    LEA rdx, [rsp+48h+endptr]
    LEA rsi, [rsp+48h+ptr]
    MOVSX r13d, byte ptr [r14+1]
    MOV rdi, rbx
    CALL sub_4CF7C0
    MOV rdi, [rsp+48h+ptr]
    ADD eax, 1
    MOV edx, 0FFFFFFFFh
    CDQE 
    MOV r8d, r13d
    MOV ecx, r13d
    ADD rbx, rax
    MOV rsi, rdi
    CALL sub_4CF520
    MOV rdi, [rsp+48h+endptr]
    MOV edx, 0FFFFFFFFh
    MOV r8d, r13d
    MOV ecx, r13d
    MOV rsi, rdi
    CALL sub_4CF520
    MOV rdi, [rsp+48h+ptr]
    CALL _strlen
    LEA rdi, [rax+rax+2]
    CALL sub_40AD10
    MOV rdi, [rsp+48h+ptr]
    MOV [r12+38h], rax
    MOVZX edx, byte ptr [rdi]
    TEST dl, dl
    JZ loc_4CFF9A
loc_4CFF43:
    MOV rcx, [rsp+48h+endptr]
    CMP byte ptr [rcx], 0
    JZ loc_4CFF9A
loc_4CFF4D:
    MOV rsi, rax
    MOV ecx, 1
    XOR eax, eax
    JMP loc_4CFF74
loc_4CFF60:
    MOV rsi, [rsp+48h+endptr]
    ADD rcx, 2
    CMP byte ptr [rsi+rax], 0
    JZ loc_4CFF9A
loc_4CFF6F:
    MOV rsi, [r12+38h]
loc_4CFF74:
    MOV [rsi+rax*2], dl
    MOV rdx, [rsp+48h+endptr]
    MOVZX esi, byte ptr [rdx+rax]
    MOV rdx, [r12+38h]
    ADD rax, 1
    MOV [rdx+rcx], sil
    MOV rdi, [rsp+48h+ptr]
    MOVZX edx, byte ptr [rdi+rax]
    TEST dl, dl
    JNZ loc_4CFF60
loc_4CFF9A:
    CALL _free
    MOV rdi, [rsp+48h+endptr]
    JMP loc_4CFE07
loc_4CFFA9:
    MOV edi, offset aMissingCommand
    XOR eax, eax
    CALL sub_40A1E0
loc_4CFFB5:
    CALL ___stack_chk_fail
loc_4CFFBA:
    MOV edi, offset aNoAddressAfter
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFCh'], 'presence_of_notable_floating_point_constants': ['cs:qword_6E6898', 'cs:qword_6D2450'], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallel Processing', 'inferred_category': 'High-Level Language Code'}

##### T 128 - add_cmd
```assembly
loc_5138A0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 38h
    MOV rbp, qword ptr cs:preg._bf_38
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    TEST rbp, rbp
    JZ loc_5138F6
loc_5138CD:
    MOV rdx, rdi
    MOV rsi, rbp
    MOV edi, offset aSS_33
    CALL sub_40C860
    MOV rdi, qword ptr cs:preg._bf_38
    MOV rbx, rax
    MOV rbp, rbx
    CALL _free
    MOV qword ptr cs:preg._bf_38, rbx
loc_5138F6:
    MOV rdi, rbx
    CALL _strlen
    TEST eax, eax
    JZ loc_513960
loc_513902:
    LEA r12d, [rax-1]
    CMP byte ptr [rbx+r12], 5Ch
    MOV rdx, r12
    JZ loc_513923
loc_513910:
    JMP loc_513960
loc_513918:
    LEA edi, [rdx-1]
    CMP byte ptr [rbx+rdi], 5Ch
    JNZ loc_513927
loc_513921:
    MOV edx, edi
loc_513923:
    TEST edx, edx
    JNZ loc_513918
loc_513927:
    SUB eax, edx
    TEST al, 1
    JZ loc_513960
loc_51392D:
    TEST rbp, rbp
    JZ loc_513F24
loc_513936:
    MOV byte ptr [rbp+r12+0], 0
loc_51393C:
    MOV rax, [rsp+68h+var_40]
    XOR rax, fs:28h
    JNZ loc_514260
loc_513950:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_513960:
    MOV ebp, 0FFFFFFFEh
    NOP dword ptr [rax]
loc_513968:
    CMP byte ptr [rbx], 0
    JZ loc_5139AD
loc_51396D:
    MOV rdi, rbx
    MOV esi, offset asc_55A158
    CALL _strspn
    ADD rbx, rax
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_5139AD
loc_513984:
    CMP al, 23h
    JNZ loc_5139D0
loc_513988:
    CMP byte ptr [rbx+1], 6Eh
    JNZ loc_5139A2
loc_51398E:
    JMP loc_513CE8
loc_513998:
    CMP eax, 0Dh
    JZ loc_513968
loc_51399D:
    CMP eax, 0Ah
    JZ loc_513968
loc_5139A2:
    ADD rbx, 1
    MOVSX eax, byte ptr [rbx]
    TEST al, al
    JNZ loc_513998
loc_5139AD:
    MOV rdi, qword ptr cs:preg._bf_38
    CALL _free
    MOV qword ptr cs:preg._bf_38, 0
    JMP loc_51393C
loc_5139D0:
    MOV edi, 48h
    CALL sub_40C260
    LEA rdx, [rax+8]
    LEA rsi, [rax+20h]
    MOV r12, rax
    MOV rdi, rbx
    CALL sub_511C40
    MOVSXD rdi, eax
    MOV eax, [r12+20h]
    ADD rdi, rbx
    MOV [r12+24h], eax
    CMP byte ptr [rdi], 2Ch
    JNZ loc_513A3D
loc_513A02:
    CMP byte ptr [rdi+1], 2Bh
    LEA rbx, [rdi+1]
    JZ loc_513C58
loc_513A10:
    LEA rdx, [r12+10h]
    LEA rsi, [r12+28h]
    MOV rdi, rbx
    CALL sub_511C40
    MOVSXD rdi, eax
    LEA edx, [rax-1]
    ADD rdi, rbx
loc_513A2B:
    TEST edx, edx
    JS loc_514254
loc_513A33:
    MOV eax, [r12+28h]
    MOV [r12+2Ch], eax
loc_513A3D:
    CALL sub_40A8A0
    MOVSX r13d, byte ptr [rax]
    MOV r14, rax
    CMP r13b, 21h
    JZ loc_513EF0
loc_513A53:
    TEST r13b, r13b
    JZ loc_514248
loc_513A5C:
    MOV [r12+46h], r13b
    MOV esi, r13d
    MOV edi, offset aSaicrwBttyddgg
    CALL _strchrnul
    SUB rax, offset aSaicrwBttyddgg
    LEA rbx, [r14+1]
    TEST eax, eax
    JZ loc_513D18
loc_513A80:
    CMP eax, 3
    JA loc_513B70
loc_513A89:
    JNZ loc_513CC0
loc_513A8F:
    MOVZX eax, byte ptr [r14+1]
    CMP al, 0Ah
    JZ loc_513E80
loc_513A9C:
    CMP al, 5Ch
    JZ loc_513E80
loc_513AA4:
    SUB eax, 9
    CMP al, 4
    JBE loc_513AB0
loc_513AAB:
    CMP al, 17h
    JNZ loc_513AD2
loc_513AAF:
    NOP 
loc_513AB0:
    ADD rbx, 1
    MOVZX eax, byte ptr [rbx]
    CMP al, 0Ah
    JZ loc_513E80
loc_513ABF:
    CMP al, 5Ch
    JZ loc_513E80
loc_513AC7:
    SUB eax, 9
    CMP al, 17h
    JZ loc_513AB0
loc_513ACE:
    CMP al, 4
    JBE loc_513AB0
loc_513AD2:
    MOV rdi, rbx
    CALL _strlen
    MOV rdi, rbx
    MOV r14, rax
    MOV esi, eax
    CALL sub_511B20
    MOV r14d, r14d
    MOV rdi, rax
    MOV [r12+38h], rax
    MOV r13, rax
    ADD rbx, r14
    CALL _strlen
    TEST eax, eax
    MOV edi, eax
    JLE loc_514182
loc_513B07:
    LEA rax, [r13+1]
    XOR edx, edx
    JMP loc_513B25
loc_513B10:
    ADD edx, 1
    TEST cl, cl
    MOV rsi, rax
    MOV [rax-1], cl
    JZ loc_513B58
loc_513B1D:
    ADD rax, 1
    CMP edi, edx
    JLE loc_513B4E
loc_513B25:
    MOVSXD rsi, edx
    MOVZX ecx, byte ptr [r13+rsi+0]
    CMP cl, 5Ch
    JNZ loc_513B10
loc_513B33:
    MOVZX ecx, byte ptr [r13+rsi+1]
    MOV rsi, rax
    TEST cl, cl
    MOV [rax-1], cl
    JZ loc_513B58
loc_513B43:
    ADD edx, 2
    ADD rax, 1
    CMP edi, edx
    JG loc_513B25
loc_513B4E:
    MOV byte ptr [rsi], 0
    NOP dword ptr [rax+00000000h]
loc_513B58:
    MOV rax, cs:preg.translate
    MOV [rax], r12
    MOV cs:preg.translate, r12
    JMP loc_513968
loc_513B70:
    CMP eax, 5
    JA loc_513C90
loc_513B79:
    CMP eax, 4
    JNZ loc_513B97
loc_513B7E:
    MOV eax, [r12+28h]
    TEST eax, eax
    JNZ loc_513CD5
loc_513B8B:
    CMP qword ptr [r12+10h], 0
    JNZ loc_513CD5
loc_513B97:
    MOVZX ecx, byte ptr [r14+1]
    LEA eax, [rcx-9]
    CMP al, 17h
    JZ loc_513BAC
loc_513BA3:
    XOR esi, esi
    CMP al, 4
    MOV rdi, rbx
    JA loc_513BD2
loc_513BAC:
    LEA rax, [r14+2]
    XOR esi, esi
    NOP word ptr [rax+rax+00h]
loc_513BB8:
    MOVZX ecx, byte ptr [rax]
    ADD esi, 1
    MOV rdi, rax
    ADD rax, 1
    LEA edx, [rcx-9]
    CMP dl, 17h
    JZ loc_513BB8
loc_513BCD:
    CMP dl, 4
    JBE loc_513BB8
loc_513BD2:
    CMP cl, 0Ah
    JZ loc_513F0B
loc_513BDB:
    TEST cl, cl
    JZ loc_513F0B
loc_513BE3:
    MOVSXD rax, esi
    MOV ecx, esi
    LEA rdx, [r14+rax+2]
    NOT r14
    JMP loc_513BFC
loc_513BF8:
    CMP al, 0Ah
    JZ loc_513C11
loc_513BFC:
    MOVZX eax, byte ptr [rdx]
    ADD ecx, 1
    LEA r13, [r14+rdx]
    MOV rbx, rdx
    ADD rdx, 1
    TEST al, al
    JNZ loc_513BF8
loc_513C11:
    CMP al, 0Ah
    JZ loc_513FB7
loc_513C19:
    CMP ecx, esi
    JZ loc_513F0B
loc_513C21:
    SUB ecx, esi
    LEA esi, [rcx+1]
    CALL sub_40C2C0
    MOV [r12+38h], rax
loc_513C30:
    CMP byte ptr [r12+46h], 77h
    JNZ loc_513B58
loc_513C3C:
    MOV rdi, rax
    CALL sub_40ADB0
    MOV byte ptr [r12+45h], 0Ah
    MOV [r12+30h], rax
    JMP loc_513B58
loc_513C58:
    MOVZX eax, byte ptr [rdi+2]
    SUB eax, 30h
    CMP al, 9
    JA loc_513A10
loc_513C67:
    LEA rsi, [rsp+68h+endptr]
    ADD rdi, 2
    MOV edx, 0Ah
    CALL _strtol
    MOV esi, ebp
    MOV edx, eax
    MOV rdi, [rsp+68h+endptr]
    SUB esi, eax
    MOV [r12+28h], esi
    JMP loc_513A2B
loc_513C90:
    CMP eax, 9
    JBE loc_513F47
loc_513C99:
    CMP eax, 0Ah
    JZ loc_513FE2
loc_513CA2:
    CMP eax, 1Ah
    JBE loc_513B58
loc_513CAB:
    MOV esi, r13d
    MOV edi, offset aUnsupportedCom
    XOR eax, eax
    CALL sub_40ABE0
loc_513CC0:
    MOV edx, [r12+28h]
    TEST edx, edx
    JNZ loc_513CD5
loc_513CC9:
    CMP qword ptr [r12+10h], 0
    JZ loc_513A8F
loc_513CD5:
    MOV esi, r13d
    MOV edi, offset aCommandCUsesOn
    XOR eax, eax
    CALL sub_40ABE0
loc_513CE8:
    ADD cs:buf.c_iflag, 1
    MOVSX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_5139AD
loc_513CFA:
    CMP eax, 0Ah
    JZ loc_513968
loc_513D03:
    CMP eax, 0Dh
    JNZ loc_5139A2
loc_513D0C:
    JMP loc_513968
loc_513D18:
    LEA rdx, [r12+38h]
    LEA rsi, [rsp+68h+s]
    MOV rdi, rbx
    MOV r14d, cs:buf.c_oflag
    CALL sub_512090
    MOV dword ptr [r12+40h], 1
    MOV r13d, eax
    NOP dword ptr [rax]
loc_513D40:
    ADD r13d, 1
    MOVSXD rdx, r13d
    LEA rdi, [rbx+rdx]
    MOVZX eax, byte ptr [rdi]
    TEST al, al
    JZ loc_513F3F
loc_513D56:
    LEA ecx, [rax-30h]
    CMP cl, 9
    JA loc_513D90
loc_513D5E:
    MOV rax, [rsp+68h+s]
    CMP byte ptr [rax], 5Eh
    JZ loc_513D40
loc_513D68:
    LEA rsi, [rsp+68h+endptr]
    MOV edx, 0Ah
    MOV r13d, ebx
    MOV [rsp+68h+endptr], rdi
    NOT r13d
    CALL _strtol
    ADD r13d, dword ptr [rsp+68h+endptr]
    MOV [r12+40h], eax
    JMP loc_513D40
loc_513D90:
    LEA ecx, [rax-9]
    CMP cl, 17h
    JZ loc_513D40
loc_513D98:
    CMP cl, 4
    JBE loc_513D40
loc_513D9D:
    CMP al, 67h
    JZ loc_513F90
loc_513DA5:
    JLE loc_513E90
loc_513DAB:
    CMP al, 70h
    JZ loc_513FAC
loc_513DB3:
    JLE loc_513F17
loc_513DB9:
    CMP al, 77h
    JNZ loc_513F3B
loc_513DC1:
    LEA r8, [rbx+rdx+1]
    MOVZX esi, byte ptr [r8]
    LEA eax, [rsi-9]
    CMP al, 4
    JBE loc_513DD9
loc_513DD1:
    CMP al, 17h
    JNZ loc_513FD8
loc_513DD9:
    LEA rax, [r8+1]
    XOR ecx, ecx
    NOP 
loc_513DE0:
    MOVZX esi, byte ptr [rax]
    ADD ecx, 1
    MOV rdi, rax
    ADD rax, 1
    LEA edx, [rsi-9]
    CMP dl, 17h
    JZ loc_513DE0
loc_513DF5:
    CMP dl, 4
    JBE loc_513DE0
loc_513DFA:
    TEST sil, sil
    JZ loc_513F0B
loc_513E03:
    MOVSXD r15, ecx
    MOV edx, ecx
    ADD r15, 1
    JMP loc_513E17
loc_513E10:
    CMP al, 0Ah
    JZ loc_513E27
loc_513E14:
    MOV r15, rsi
loc_513E17:
    MOVZX eax, byte ptr [r8+r15]
    ADD edx, 1
    LEA rsi, [r15+1]
    TEST al, al
    JNZ loc_513E10
loc_513E27:
    CMP al, 0Ah
    JZ loc_514159
loc_513E2F:
    CMP ecx, edx
    JZ loc_513F0B
loc_513E37:
    MOV esi, edx
    MOV dword ptr [rsp+68h+ptr], edx
    SUB esi, ecx
    ADD esi, 1
    CALL sub_40C2C0
    MOV edx, dword ptr [rsp+68h+ptr]
    MOV rcx, rax
loc_513E4E:
    MOV rdi, rcx
    MOV [rsp+68h+ptr], rcx
    ADD r13d, edx
    CALL sub_40ADB0
    MOV rcx, [rsp+68h+ptr]
    MOV [r12+30h], rax
    MOV byte ptr [r12+45h], 0Ah
    MOV rdi, rcx
    CALL _free
    JMP loc_513D40
loc_513E80:
    ADD rbx, 1
    JMP loc_513AD2
loc_513E90:
    CMP al, 3Bh
    JZ loc_513F3F
loc_513E98:
    CMP al, 49h
    JZ loc_513F1B
loc_513E9C:
    CMP al, 23h
    JNZ loc_513F84
loc_513EA4:
    CALL _strlen
    ADD eax, r13d
    CDQE 
    ADD rbx, rax
loc_513EB1:
    MOV rdi, [rsp+68h+s]
    CMP byte ptr [rdi], 0
    JZ loc_513EDF
loc_513EBB:
    MOV edi, 40h
    CALL sub_40C260
    MOV rsi, [rsp+68h+s]
    MOV rdi, rax
    MOV [r12+18h], rax
    MOV edx, r14d
    CALL sub_53BA20
    MOV rdi, [rsp+68h+s]
loc_513EDF:
    CALL _free
    JMP loc_513B58
loc_513EF0:
    OR byte ptr [r12+44h], 1
    LEA rdi, [rax+1]
    CALL sub_40A8A0
    MOV r14, rax
    MOVSX r13d, byte ptr [rax]
    JMP loc_513A53
loc_513F0B:
    MOV edi, offset aEmptyFilename
    XOR eax, eax
    CALL sub_40ABE0
loc_513F17:
    CMP al, 69h
    JNZ loc_513F84
loc_513F1B:
    OR r14d, 2
    JMP loc_513D40
loc_513F24:
    MOV rdi, rbx
    CALL sub_40C290
    MOV rbp, rax
    MOV qword ptr cs:preg._bf_38, rax
    JMP loc_513936
loc_513F3B:
    CMP al, 7Dh
    JNZ loc_513F84
loc_513F3F:
    MOV rbx, rdi
    JMP loc_513EB1
loc_513F47:
    MOV rdi, rbx
    CALL sub_40A8A0
    MOV esi, offset asc_55A158
    MOV rdi, rax
    MOV rbx, rax
    CALL _strcspn
    TEST eax, eax
    MOV r13, rax
    JZ loc_513B58
loc_513F6A:
    MOV rdi, rbx
    MOV esi, eax
    MOVSXD r13, r13d
    CALL sub_40C2C0
    ADD rbx, r13
    MOV [r12+38h], rax
    JMP loc_513B58
loc_513F84:
    MOV edi, offset aBadOptionInSub
    XOR eax, eax
    CALL sub_40ABE0
loc_513F90:
    MOV rax, [rsp+68h+s]
    CMP byte ptr [rax], 5Eh
    JZ loc_513D40
loc_513F9E:
    MOV dword ptr [r12+40h], 0
    JMP loc_513D40
loc_513FAC:
    OR byte ptr [r12+44h], 4
    JMP loc_513D40
loc_513FB7:
    CMP ecx, esi
    JZ loc_513F0B
loc_513FBF:
    SUB ecx, esi
    LEA esi, [rcx+2]
    CALL sub_40C2C0
    MOV [r12+38h], rax
    MOV byte ptr [rax+r13], 5Ch
    JMP loc_513C30
loc_513FD8:
    MOV rdi, r8
    XOR ecx, ecx
    JMP loc_513DFA
loc_513FE2:
    LEA rdx, [rsp+68h+endptr]
    LEA rsi, [rsp+68h+s]
    MOV rdi, rbx
    MOVZX r13d, byte ptr [r14+1]
    CALL sub_512090
    MOV r14, [rsp+68h+s]
    ADD eax, 1
    CDQE 
    ADD rbx, rax
    MOV rdi, r14
    CALL _strlen
    TEST eax, eax
    MOV edi, eax
    JLE loc_514061
loc_514014:
    TEST r13b, r13b
    JZ loc_5141DA
loc_51401D:
    MOV rax, r14
    XOR edx, edx
    JMP loc_514035
loc_514024:
    ADD edx, 1
    TEST cl, cl
    MOV [rax], cl
    JZ loc_514067
loc_51402D:
    ADD rax, 1
loc_514031:
    CMP edi, edx
    JLE loc_514064
loc_514035:
    MOVSXD rsi, edx
    MOVZX ecx, byte ptr [r14+rsi]
    CMP cl, 5Ch
    JNZ loc_514024
loc_514042:
    CMP r13b, [r14+rsi+1]
    JZ loc_51422A
loc_51404D:
    ADD edx, 1
    MOV byte ptr [rax], 5Ch
    ADD rax, 1
    MOVSXD rcx, edx
    MOVZX ecx, byte ptr [r14+rcx]
    JMP loc_514024
loc_514061:
    MOV rax, r14
loc_514064:
    MOV byte ptr [rax], 0
loc_514067:
    MOV r14, [rsp+68h+endptr]
    MOV rdi, r14
    CALL _strlen
    TEST eax, eax
    MOV edi, eax
    JLE loc_5140C7
loc_51407A:
    TEST r13b, r13b
    JZ loc_51418A
loc_514083:
    MOV rax, r14
    XOR edx, edx
    JMP loc_51409B
loc_51408A:
    ADD edx, 1
    TEST cl, cl
    MOV [rax], cl
    JZ loc_5140CD
loc_514093:
    ADD rax, 1
loc_514097:
    CMP edi, edx
    JLE loc_5140CA
loc_51409B:
    MOVSXD rsi, edx
    MOVZX ecx, byte ptr [r14+rsi]
    CMP cl, 5Ch
    JNZ loc_51408A
loc_5140A8:
    CMP r13b, [r14+rsi+1]
    JZ loc_514239
loc_5140B3:
    ADD edx, 1
    MOV byte ptr [rax], 5Ch
    ADD rax, 1
    MOVSXD rcx, edx
    MOVZX ecx, byte ptr [r14+rcx]
    JMP loc_51408A
loc_5140C7:
    MOV rax, r14
loc_5140CA:
    MOV byte ptr [rax], 0
loc_5140CD:
    MOV rdi, [rsp+68h+s]
    CALL _strlen
    LEA rdi, [rax+rax+2]
    CALL sub_40C260
    MOV rdi, [rsp+68h+s]
    MOV [r12+38h], rax
    MOVZX edx, byte ptr [rdi]
    TEST dl, dl
    JZ loc_51414A
loc_5140F2:
    MOV rcx, [rsp+68h+endptr]
    CMP byte ptr [rcx], 0
    JZ loc_51414A
loc_5140FC:
    MOV rsi, rax
    MOV ecx, 1
    XOR eax, eax
    JMP loc_514124
loc_514110:
    MOV rsi, [rsp+68h+endptr]
    ADD rcx, 2
    CMP byte ptr [rsi+rax], 0
    JZ loc_51414A
loc_51411F:
    MOV rsi, [r12+38h]
loc_514124:
    MOV [rsi+rax*2], dl
    MOV rdx, [rsp+68h+endptr]
    MOVZX esi, byte ptr [rdx+rax]
    MOV rdx, [r12+38h]
    ADD rax, 1
    MOV [rdx+rcx], sil
    MOV rdi, [rsp+68h+s]
    MOVZX edx, byte ptr [rdi+rax]
    TEST dl, dl
    JNZ loc_514110
loc_51414A:
    CALL _free
    MOV rdi, [rsp+68h+endptr]
    JMP loc_513EDF
loc_514159:
    CMP ecx, edx
    JZ loc_513F0B
loc_514161:
    MOV esi, edx
    MOV dword ptr [rsp+68h+ptr], edx
    SUB esi, ecx
    ADD esi, 2
    CALL sub_40C2C0
    MOV edx, dword ptr [rsp+68h+ptr]
    MOV rcx, rax
    MOV byte ptr [rax+r15], 5Ch
    JMP loc_513E4E
loc_514182:
    MOV rsi, r13
    JMP loc_513B4E
loc_51418A:
    LEA rcx, [r14+1]
    XOR edx, edx
    JMP loc_5141B1
loc_514192:
    ADD edx, 1
    TEST sil, sil
    MOV rax, rcx
    MOV [rcx-1], sil
    JZ loc_5140CD
loc_5141A5:
    ADD rcx, 1
    CMP edx, edi
    JGE loc_5140CA
loc_5141B1:
    MOVSXD rax, edx
    MOVZX esi, byte ptr [r14+rax]
    CMP sil, 5Ch
    JNZ loc_514192
loc_5141BF:
    MOVZX esi, byte ptr [r14+rax+1]
    MOV rax, rcx
    TEST sil, sil
    MOV [rcx-1], sil
    JZ loc_5140CD
loc_5141D5:
    ADD edx, 2
    JMP loc_5141A5
loc_5141DA:
    LEA rcx, [r14+1]
    XOR edx, edx
    JMP loc_514201
loc_5141E2:
    ADD edx, 1
    TEST sil, sil
    MOV rax, rcx
    MOV [rcx-1], sil
    JZ loc_514067
loc_5141F5:
    ADD rcx, 1
    CMP edi, edx
    JLE loc_514064
loc_514201:
    MOVSXD rax, edx
    MOVZX esi, byte ptr [r14+rax]
    CMP sil, 5Ch
    JNZ loc_5141E2
loc_51420F:
    MOVZX esi, byte ptr [r14+rax+1]
    MOV rax, rcx
    TEST sil, sil
    MOV [rcx-1], sil
    JZ loc_514067
loc_514225:
    ADD edx, 2
    JMP loc_5141F5
loc_51422A:
    MOV [rax], r13b
    ADD edx, 2
    ADD rax, 1
    JMP loc_514031
loc_514239:
    MOV [rax], r13b
    ADD edx, 2
    ADD rax, 1
    JMP loc_514097
loc_514248:
    MOV edi, offset aMissingCommand
    XOR eax, eax
    CALL sub_40ABE0
loc_514254:
    MOV edi, offset aNoAddressAfter
    XOR eax, eax
    CALL sub_40ABE0
loc_514260:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ControlFlow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFCh'], 'presence_of_notable_floating_point_constants': ['cs:qword_748CD8', 'cs:qword_7346E0'], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallel Processing', 'inferred_category': 'High-Level Algorithm'}

##### Q 129 - do_shm
```assembly
loc_48CD30:
    PUSH r15
    PUSH r14
    XOR edi, edi
    PUSH r13
    PUSH r12
    MOV esi, 0Eh
    PUSH rbp
    PUSH rbx
    SUB rsp, 0C8h
    LEA rdx, [rsp+0F8h+buf]
    MOV rax, fs:28h
    MOV [rsp+0F8h+var_40], rax
    XOR eax, eax
    CALL _shmctl
    TEST eax, eax
    JS loc_48D200
loc_48CD6D:
    CMP cs:byte_7431D8, 5
    MOV ebp, eax
    JA def_48CD83
loc_48CD7C:
    MOVZX eax, cs:byte_7431D8
    JMP ds:jpt_48CD83[rax*8]
loc_48CD8A:
    MOV edx, offset aCreatorLastOp
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r9d, offset aLpid
    MOV r8d, offset aCpid
    MOV ecx, offset aOwner
    MOV edx, offset aShmid
    MOV esi, offset unk_516FCD
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48CDC7:
    LEA rax, [rsp+0F8h+buf.shm_segsz]
    XOR ebx, ebx
    LEA r15, [rsp+0F8h+timer]
    LEA r14, [rax+40h]
    ADD rax, 38h
    MOV [rsp+0F8h+var_F0], rax
    JMP loc_48CE5B
loc_48CDE8:
    MOV edi, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    CALL sub_40D6D0
    MOV r13, rax
    MOVZX eax, cs:byte_7431D8
    CMP al, 4
    JZ loc_48D050
loc_48CE03:
    CMP al, 5
    JNZ loc_48D0E8
loc_48CE0B:
    TEST r13, r13
    JZ loc_48D1E3
loc_48CE14:
    MOV rcx, [r13+0]
    MOV edx, r12d
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48CE2C:
    MOV ecx, [rsp+0F8h+var_64]
    MOV edx, [rsp+0F8h+var_68]
    MOV esi, offset unk_5170F7
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP dword ptr [rax+rax+00h]
loc_48CE50:
    ADD ebx, 1
    CMP ebp, ebx
    JL loc_48CEE8
loc_48CE5B:
    LEA rdx, [rsp+0F8h+buf.shm_segsz]
    MOV esi, 0Dh
    MOV edi, ebx
    CALL _shmctl
    TEST eax, eax
    MOV r12d, eax
    JS loc_48CE50
loc_48CE73:
    CMP cs:byte_7431D8, 3
    JNZ loc_48CDE8
loc_48CE80:
    LEA rsi, [rsp+0F8h+buf.shm_segsz]
    MOV edi, eax
    CALL sub_48C760
    JMP loc_48CE50
loc_48CE8E:
    MOV edx, 516F3Bh
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    LEA rdx, [rsp+0F8h+buf.shm_segsz]
    XOR edi, edi
    MOV esi, 3
    CALL _shmctl
    TEST eax, eax
    JS loc_48CEE8
loc_48CEB9:
    MOV rcx, [rsp+0F8h+buf.shm_segsz]
    MOV r9, [rsp+0F8h+buf.shm_atime]
    MOV esi, offset aMaxNumberOfSeg
    MOV r8, qword ptr [rsp+0F8h+buf.shm_cpid]
    MOV rdx, [rsp+0F8h+buf.shm_dtime]
    MOV edi, 1
    XOR eax, eax
    SHR rcx, 0Ah
    CALL ___printf_chk
    NOP word ptr [rax+rax+00h]
loc_48CEE8:
    MOV rax, [rsp+0F8h+var_40]
    XOR rax, fs:28h
    JNZ loc_48D21B
loc_48CEFF:
    ADD rsp, 0C8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_48CF11:
    MOV edx, 516F60h
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH [rsp+0F8h+buf.shm_perm.__unused2]
    PUSH [rsp+100h+buf.shm_perm.__unused1]
    MOV esi, offset aSegmentsAlloca
    MOV r9, qword ptr [rsp+108h+buf.shm_perm.__seq]
    MOV r8, qword ptr [rsp+108h+buf.shm_perm.cgid]
    MOV edi, 1
    MOV rcx, qword ptr [rsp+108h+buf.shm_perm.gid]
    MOV edx, [rsp+108h+buf.shm_perm.__key]
    XOR eax, eax
    CALL ___printf_chk
    POP r11
    POP rbx
    JMP loc_48CEE8
loc_48CF58:
    MOV edx, offset aSegmentCreator
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH 50DF61h
    PUSH 516F86h
    MOV r9d, offset aCgid
    MOV r8d, offset aCuid
    MOV ecx, offset aPerms
    MOV edx, offset aShmid
    MOV esi, offset a10s10s10s10s10
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    POP r9
    POP r10
    JMP loc_48CDC7
loc_48CFA8:
    MOV esi, offset aSharedMemoryS
    MOV edx, offset aAttachDetachCh
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH rsi
    PUSH 50E07Dh
    MOV r8d, offset aAttached
    MOV edi, 1
    MOV r9d, offset aDetached
    MOV ecx, offset aOwner
    MOV edx, offset aShmid
    MOV esi, offset a10s10s20s20s20
    XOR eax, eax
    CALL ___printf_chk
    POP rdi
    POP r8
    JMP loc_48CDC7
loc_48CFF3:
    MOV edx, offset aSegments
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH rcx
    PUSH 510FC7h
    MOV r9d, offset aPerms
    PUSH offset aNattch
    PUSH 50EAA4h
    MOV r8d, offset aOwner
    MOV ecx, offset aShmid
    MOV edx, 512451h
    MOV esi, offset a10s10s10s10s10_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD rsp, 20h
    JMP loc_48CDC7
loc_48D050:
    TEST r13, r13
    JZ loc_48D1A9
loc_48D059:
    MOV rcx, [r13+0]
    MOV edx, r12d
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48D071:
    CMP [rsp+0F8h+buf.__unused5], 0
    MOV edx, offset aNotSet
    JNZ loc_48D185
loc_48D082:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+0F8h+var_78], 0
    MOV edx, offset aNotSet
    JNZ loc_48D198
loc_48D0A7:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+0F8h+timer], 0
    MOV edx, offset aNotSet
    JNZ loc_48D174
loc_48D0CC:
    MOV esi, offset a2016s_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48CE50
loc_48D0E8:
    MOV edx, dword ptr [rsp+0F8h+buf.shm_segsz]
    XOR eax, eax
    MOV esi, offset a0x08x
    MOV edi, 1
    CALL ___printf_chk
    TEST r13, r13
    JZ loc_48D1C6
loc_48D106:
    MOV rcx, [r13+0]
    MOV edx, r12d
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48D11E:
    MOVZX edx, word ptr [rsp+0F8h+buf.shm_dtime+4]
    MOV r9d, 5115C7h
    MOV ecx, 511F46h
    MOV eax, offset aDest
    MOV esi, offset a10o10lu10ld6s6
    MOV edi, 1
    TEST dh, 4
    CMOVZ rcx, r9
    TEST dh, 2
    CMOVNZ r9, rax
    SUB rsp, 8
    AND edx, 1FFh
    PUSH rcx
    MOV r8, [rsp+108h+var_60]
    XOR eax, eax
    MOV rcx, [rsp+108h+buf.__unused4]
    CALL ___printf_chk
    POP rax
    POP rdx
    JMP loc_48CE50
loc_48D174:
    MOV rdi, r15
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_48D0CC
loc_48D185:
    MOV rdi, [rsp+0F8h+var_F0]
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_48D082
loc_48D198:
    MOV rdi, r14
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_48D0A7
loc_48D1A9:
    MOV ecx, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    MOV edx, r12d
    MOV esi, offset unk_51704D
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48D071
loc_48D1C6:
    MOV ecx, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    MOV edx, r12d
    MOV esi, offset unk_51704D
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48D11E
loc_48D1E3:
    MOV ecx, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    MOV edx, r12d
    MOV esi, offset unk_51704D
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48CE2C
loc_48D200:
    MOV edx, offset aSharedMemory
    MOV esi, offset aKernelNotConfi
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48CEE8
loc_48D21B:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x8', '0x28', '0x10', '0x20', '0x18', '0x2', '0x1', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'List Manipulation', 'inferred_category': 'Utility/Helper'}

##### T 129 - do_shm
```assembly
loc_4B1A10:
    PUSH r15
    PUSH r14
    XOR edi, edi
    PUSH r13
    PUSH r12
    MOV esi, 0Eh
    PUSH rbp
    PUSH rbx
    SUB rsp, 0C8h
    LEA rdx, [rsp+0F8h+buf]
    MOV rax, fs:28h
    MOV [rsp+0F8h+var_40], rax
    XOR eax, eax
    CALL _shmctl
    TEST eax, eax
    JS loc_4B1EE0
loc_4B1A4D:
    CMP cs:byte_78D1D8, 5
    MOV ebp, eax
    JA def_4B1A63
loc_4B1A5C:
    MOVZX eax, cs:byte_78D1D8
    JMP ds:jpt_4B1A63[rax*8]
loc_4B1A6A:
    MOV edx, offset aCreatorLastOp
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV r9d, offset aLpid
    MOV r8d, offset aCpid
    MOV ecx, offset aOwner
    MOV edx, offset aShmid
    MOV esi, offset unk_565053
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1AA7:
    LEA rax, [rsp+0F8h+buf.shm_segsz]
    XOR ebx, ebx
    LEA r15, [rsp+0F8h+timer]
    LEA r14, [rax+40h]
    ADD rax, 38h
    MOV [rsp+0F8h+var_F0], rax
    JMP loc_4B1B3B
loc_4B1AC8:
    MOV edi, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    CALL sub_410130
    MOV r13, rax
    MOVZX eax, cs:byte_78D1D8
    CMP al, 4
    JZ loc_4B1D30
loc_4B1AE3:
    CMP al, 5
    JNZ loc_4B1DC8
loc_4B1AEB:
    TEST r13, r13
    JZ loc_4B1EC3
loc_4B1AF4:
    MOV rcx, [r13+0]
    MOV edx, r12d
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1B0C:
    MOV ecx, [rsp+0F8h+var_64]
    MOV edx, [rsp+0F8h+var_68]
    MOV esi, offset unk_56517D
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    NOP dword ptr [rax+rax+00h]
loc_4B1B30:
    ADD ebx, 1
    CMP ebp, ebx
    JL loc_4B1BC8
loc_4B1B3B:
    LEA rdx, [rsp+0F8h+buf.shm_segsz]
    MOV esi, 0Dh
    MOV edi, ebx
    CALL _shmctl
    TEST eax, eax
    MOV r12d, eax
    JS loc_4B1B30
loc_4B1B53:
    CMP cs:byte_78D1D8, 3
    JNZ loc_4B1AC8
loc_4B1B60:
    LEA rsi, [rsp+0F8h+buf.shm_segsz]
    MOV edi, eax
    CALL sub_4B1440
    JMP loc_4B1B30
loc_4B1B6E:
    MOV edx, 564FC1h
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    LEA rdx, [rsp+0F8h+buf.shm_segsz]
    XOR edi, edi
    MOV esi, 3
    CALL _shmctl
    TEST eax, eax
    JS loc_4B1BC8
loc_4B1B99:
    MOV rcx, [rsp+0F8h+buf.shm_segsz]
    MOV r9, [rsp+0F8h+buf.shm_atime]
    MOV esi, offset aMaxNumberOfSeg
    MOV r8, qword ptr [rsp+0F8h+buf.shm_cpid]
    MOV rdx, [rsp+0F8h+buf.shm_dtime]
    MOV edi, 1
    XOR eax, eax
    SHR rcx, 0Ah
    CALL ___printf_chk
    NOP word ptr [rax+rax+00h]
loc_4B1BC8:
    MOV rax, [rsp+0F8h+var_40]
    XOR rax, fs:28h
    JNZ loc_4B1EFB
loc_4B1BDF:
    ADD rsp, 0C8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B1BF1:
    MOV edx, 564FE6h
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH [rsp+0F8h+buf.shm_perm.__unused2]
    PUSH [rsp+100h+buf.shm_perm.__unused1]
    MOV esi, offset aSegmentsAlloca
    MOV r9, qword ptr [rsp+108h+buf.shm_perm.__seq]
    MOV r8, qword ptr [rsp+108h+buf.shm_perm.cgid]
    MOV edi, 1
    MOV rcx, qword ptr [rsp+108h+buf.shm_perm.gid]
    MOV edx, [rsp+108h+buf.shm_perm.__key]
    XOR eax, eax
    CALL ___printf_chk
    POP r11
    POP rbx
    JMP loc_4B1BC8
loc_4B1C38:
    MOV edx, offset aSegmentCreator
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH 55C075h
    PUSH 56500Ch
    MOV r9d, offset aCgid
    MOV r8d, offset aCuid
    MOV ecx, offset aPerms
    MOV edx, offset aShmid
    MOV esi, offset a10s10s10s10s10
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    POP r9
    POP r10
    JMP loc_4B1AA7
loc_4B1C88:
    MOV esi, offset aSharedMemoryS
    MOV edx, offset aAttachDetachCh
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH rsi
    PUSH 55C135h
    MOV r8d, offset aAttached
    MOV edi, 1
    MOV r9d, offset aDetached
    MOV ecx, offset aOwner
    MOV edx, offset aShmid
    MOV esi, offset a10s10s20s20s20
    XOR eax, eax
    CALL ___printf_chk
    POP rdi
    POP r8
    JMP loc_4B1AA7
loc_4B1CD3:
    MOV edx, offset aSegments
    MOV esi, offset aSharedMemoryS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    PUSH rcx
    PUSH 55F0C5h
    MOV r9d, offset aPerms
    PUSH offset aNattch
    PUSH 55CB44h
    MOV r8d, offset aOwner
    MOV ecx, offset aShmid
    MOV edx, 560501h
    MOV esi, offset a10s10s10s10s10_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    ADD rsp, 20h
    JMP loc_4B1AA7
loc_4B1D30:
    TEST r13, r13
    JZ loc_4B1E89
loc_4B1D39:
    MOV rcx, [r13+0]
    MOV edx, r12d
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1D51:
    CMP [rsp+0F8h+buf.__unused5], 0
    MOV edx, offset aNotSet
    JNZ loc_4B1E65
loc_4B1D62:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+0F8h+var_78], 0
    MOV edx, offset aNotSet
    JNZ loc_4B1E78
loc_4B1D87:
    XOR eax, eax
    MOV esi, offset a2016s
    MOV edi, 1
    CALL ___printf_chk
    CMP [rsp+0F8h+timer], 0
    MOV edx, offset aNotSet
    JNZ loc_4B1E54
loc_4B1DAC:
    MOV esi, offset a2016s_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1B30
loc_4B1DC8:
    MOV edx, dword ptr [rsp+0F8h+buf.shm_segsz]
    XOR eax, eax
    MOV esi, offset a0x08x
    MOV edi, 1
    CALL ___printf_chk
    TEST r13, r13
    JZ loc_4B1EA6
loc_4B1DE6:
    MOV rcx, [r13+0]
    MOV edx, r12d
    MOV esi, offset a10d1010s
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4B1DFE:
    MOVZX edx, word ptr [rsp+0F8h+buf.shm_dtime+4]
    MOV r9d, 55F649h
    MOV ecx, 55FFF6h
    MOV eax, offset aDest
    MOV esi, offset a10o10lu10ld6s6
    MOV edi, 1
    TEST dh, 4
    CMOVZ rcx, r9
    TEST dh, 2
    CMOVNZ r9, rax
    SUB rsp, 8
    AND edx, 1FFh
    PUSH rcx
    MOV r8, [rsp+108h+var_60]
    XOR eax, eax
    MOV rcx, [rsp+108h+buf.__unused4]
    CALL ___printf_chk
    POP rax
    POP rdx
    JMP loc_4B1B30
loc_4B1E54:
    MOV rdi, r15
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_4B1DAC
loc_4B1E65:
    MOV rdi, [rsp+0F8h+var_F0]
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_4B1D62
loc_4B1E78:
    MOV rdi, r14
    CALL _ctime
    LEA rdx, [rax+4]
    JMP loc_4B1D87
loc_4B1E89:
    MOV ecx, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    MOV edx, r12d
    MOV esi, offset unk_5650D3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1D51
loc_4B1EA6:
    MOV ecx, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    MOV edx, r12d
    MOV esi, offset unk_5650D3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1DFE
loc_4B1EC3:
    MOV ecx, dword ptr [rsp+0F8h+buf.shm_segsz+4]
    MOV edx, r12d
    MOV esi, offset unk_5650D3
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1B0C
loc_4B1EE0:
    MOV edx, offset aSharedMemory
    MOV esi, offset aKernelNotConfi
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4B1BC8
loc_4B1EFB:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x2FB'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'List Manipulation', 'inferred_category': 'Utility/Helper'}

##### Q 130 - svc_main
```assembly
loc_463FB0:
    PUSH r12
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV esi, offset aUdopchaitkx
    MOV rdi, rbp
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CALL sub_4DFD70
    MOV ebx, eax
    MOVSXD rax, cs:optind
    MOV rdx, rax
    LEA rax, [rbp+rax*8+0]
    CMP qword ptr [rax], 0
    JZ loc_464083
loc_463FF3:
    TEST ebx, ebx
    JZ loc_464083
loc_463FFB:
    CMP edx, 2
    LEA r12, [rax-10h]
    JLE loc_464010
loc_464004:
    LEA r12, [rax-18h]
    MOV qword ptr [rax-8], (offset asc_516C14+1)
loc_464010:
    MOV qword ptr [r12], 5102C6h
    MOV [r12+8], rsp
    MOV ebp, offset aUdopchaitkx
    MOV [rsp+28h+var_27], 0
    JMP loc_464038
loc_464030:
    ADD rbp, 1
    SHR ebx, 1
    JZ loc_464068
loc_464038:
    TEST bl, 1
    JZ loc_464030
loc_46403D:
    MOVZX eax, byte ptr [rbp+0]
    MOV rdi, r12
    MOV cs:optind, 0
    MOV [rsp+28h+var_28], al
    CALL sub_463930
    TEST eax, eax
    JZ loc_464030
loc_46405A:
    MOV eax, 1
    JMP loc_46406A
loc_464068:
    XOR eax, eax
loc_46406A:
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_464088
loc_46407A:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_464083:
    CALL sub_408E80
loc_464088:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1030', '0x1028', '0x1008', '0x1018', '0x7D85CE', '0x0DC5', '0x40000', '0x0DC2', '0x0DC3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ErrorHandling/Validation'}

##### T 130 - svc_main
```assembly
loc_47BF30:
    PUSH r12
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV esi, offset aUdopchaitkx
    MOV rdi, rbp
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    CALL sub_5291B0
    MOV ebx, eax
    MOVSXD rax, cs:optind
    MOV rdx, rax
    LEA rax, [rbp+rax*8+0]
    CMP qword ptr [rax], 0
    JZ loc_47C003
loc_47BF73:
    TEST ebx, ebx
    JZ loc_47C003
loc_47BF7B:
    CMP edx, 2
    LEA r12, [rax-10h]
    JLE loc_47BF90
loc_47BF84:
    LEA r12, [rax-18h]
    MOV qword ptr [rax-8], (offset asc_564C9A+1)
loc_47BF90:
    MOV qword ptr [r12], 55E376h
    MOV [r12+8], rsp
    MOV ebp, offset aUdopchaitkx
    MOV [rsp+28h+var_27], 0
    JMP loc_47BFB8
loc_47BFB0:
    ADD rbp, 1
    SHR ebx, 1
    JZ loc_47BFE8
loc_47BFB8:
    TEST bl, 1
    JZ loc_47BFB0
loc_47BFBD:
    MOVZX eax, byte ptr [rbp+0]
    MOV rdi, r12
    MOV cs:optind, 0
    MOV [rsp+28h+var_28], al
    CALL sub_47B7B0
    TEST eax, eax
    JZ loc_47BFB0
loc_47BFDA:
    MOV eax, 1
    JMP loc_47BFEA
loc_47BFE8:
    XOR eax, eax
loc_47BFEA:
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_47C008
loc_47BFFA:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_47C003:
    CALL sub_409830
loc_47C008:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1030', '0x1028', '0x1008', '0x1018', '0x83B44E', '0xDC5', '0x40000', '0x8', '0xDC2', '0xDC3', '0x0', '0x41B3E0', '0x6FC690'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Error Handling'}

##### Q 131 - add_proc
```assembly
loc_45DD70:
    PUSH r15
    PUSH r14
    MOV r14d, ecx
    PUSH r13
    PUSH r12
    MOV r12d, esi
    PUSH rbp
    PUSH rbx
    MOV ebp, edx
    SUB rsp, 8
    MOV r13, cs:qword_7431F0
    MOV rbx, [r13+20h]
    TEST rbx, rbx
    JNZ loc_45DDAD
loc_45DD96:
    JMP loc_45DE80
loc_45DDA0:
    MOV rbx, [rbx+30h]
    TEST rbx, rbx
    JZ loc_45DE80
loc_45DDAD:
    CMP r12d, [rbx+14h]
    JNZ loc_45DDA0
loc_45DDB3:
    MOV rsi, rdi
    MOV edx, 13h
    MOV rdi, rbx
    CALL ___strcpy_chk
    MOV [rbx+18h], r14d
loc_45DDC7:
    CMP r12d, ebp
    MOV r12, [r13+20h]
    MOV eax, 0
    CMOVZ ebp, eax
    TEST r12, r12
    JNZ loc_45DDEA
loc_45DDDB:
    JMP loc_45DE60
loc_45DDE0:
    MOV r12, [r12+30h]
    TEST r12, r12
    JZ loc_45DE60
loc_45DDEA:
    CMP ebp, [r12+14h]
    JNZ loc_45DDE0
loc_45DDF1:
    MOV edi, 10h
    LEA r14, [r12+20h]
    CALL sub_40ACD0
    MOV [rax], rbx
    MOV rbp, [r12+20h]
    MOV r15, rax
    TEST rbp, rbp
    JNZ loc_45DE30
loc_45DE10:
    JMP loc_45DE44
loc_45DE18:
    JNZ loc_45DE23
loc_45DE1A:
    MOV eax, [rbx+18h]
    CMP [r13+18h], eax
    JA loc_45DE44
loc_45DE23:
    LEA r14, [rbp+8]
    MOV rbp, [rbp+8]
    TEST rbp, rbp
    JZ loc_45DE44
loc_45DE30:
    MOV r13, [rbp+0]
    MOV rsi, rbx
    MOV rdi, r13
    CALL _strcmp
    CMP eax, 0
    JLE loc_45DE18
loc_45DE44:
    MOV [r15+8], rbp
    MOV [r14], r15
    MOV [rbx+28h], r12
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45DE60:
    XOR edx, edx
    MOV esi, ebp
    MOV edi, (offset asc_5157D0+7)
    CALL sub_45DD10
    MOV r12, rax
    JMP loc_45DDF1
loc_45DE80:
    MOV edx, r14d
    MOV esi, r12d
    CALL sub_45DD10
    MOV rbx, rax
    JMP loc_45DDC7
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x63', '0xA35678'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Mutex Locking/Unlocking', 'inferred_category': 'Thread Synchronization'}

##### T 131 - add_proc
```assembly
loc_473680:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    MOV r13d, esi
    PUSH rbp
    PUSH rbx
    MOV ebp, edx
    MOV r12d, ecx
    SUB rsp, 8
    MOV r14, cs:qword_78D1F0
    MOV rbx, [r14+20h]
    TEST rbx, rbx
    JNZ loc_4736BD
loc_4736A9:
    JMP loc_4737B0
loc_4736B0:
    MOV rbx, [rbx+30h]
    TEST rbx, rbx
    JZ loc_4737B0
loc_4736BD:
    CMP r13d, [rbx+14h]
    JNZ loc_4736B0
loc_4736C3:
    MOV edx, 13h
    MOV rsi, r15
    MOV rdi, rbx
    CALL ___strcpy_chk
    MOV [rbx+18h], r12d
    MOV r12, [r14+20h]
loc_4736DB:
    CMP r13d, ebp
    MOV eax, 0
    CMOVZ ebp, eax
    TEST r12, r12
    JNZ loc_4736FA
loc_4736EB:
    JMP loc_473770
loc_4736F0:
    MOV r12, [r12+30h]
    TEST r12, r12
    JZ loc_473770
loc_4736FA:
    CMP ebp, [r12+14h]
    JNZ loc_4736F0
loc_473701:
    MOV edi, 10h
    LEA r14, [r12+20h]
    CALL sub_40C220
    MOV [rax], rbx
    MOV rbp, [r12+20h]
    MOV r15, rax
    TEST rbp, rbp
    JNZ loc_473740
loc_473720:
    JMP loc_473754
loc_473728:
    JNZ loc_473733
loc_47372A:
    MOV eax, [rbx+18h]
    CMP [r13+18h], eax
    JA loc_473754
loc_473733:
    LEA r14, [rbp+8]
    MOV rbp, [rbp+8]
    TEST rbp, rbp
    JZ loc_473754
loc_473740:
    MOV r13, [rbp+0]
    MOV rsi, rbx
    MOV rdi, r13
    CALL _strcmp
    CMP eax, 0
    JLE loc_473728
loc_473754:
    MOV [r15+8], rbp
    MOV [r14], r15
    MOV [rbx+28h], r12
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_473770:
    MOV edi, 38h
    CALL sub_40C260
    MOV r12, rax
    MOV eax, 3Fh
    MOV [r12], ax
    MOV rax, [r14+20h]
    MOV [r12+14h], ebp
    MOV dword ptr [r12+18h], 0
    MOV [r12+30h], rax
    MOV [r14+20h], r12
    JMP loc_473701
loc_4737B0:
    MOV edi, 38h
    CALL sub_40C260
    MOV edx, 13h
    MOV rsi, r15
    MOV rdi, rax
    MOV rbx, rax
    CALL ___strcpy_chk
    MOV rax, [r14+20h]
    MOV [rbx+18h], r12d
    MOV r12, rbx
    MOV [rbx+14h], r13d
    MOV [rbx+30h], rax
    MOV [r14+20h], rbx
    JMP loc_4736DB
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x63'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ErrorHandling/Synchronization'}

##### Q 132 - writeheader
```assembly
loc_45E8A0:
    PUSH r12
    PUSH rbp
    MOV r8, rdi
    PUSH rbx
    MOV ecx, 40h
    MOV rbp, rsi
    MOV r12d, edx
    MOV rsi, r8
    MOV edx, 64h
    SUB rsp, 210h
    MOV rax, fs:28h
    MOV [rsp+228h+var_20], rax
    XOR eax, eax
    MOV rdi, rsp
    MOV rbx, rsp
    REP 
    MOV rdi, rsp
    CALL ___strcpy_chk
    MOV r8d, [rbp+18h]
    LEA rdi, [rsp+228h+var_1C4]
    MOV ecx, offset aO
    MOV edx, 8
    MOV esi, 1
    XOR eax, eax
    AND r8d, 1FFh
    CALL ___sprintf_chk
    MOV r8d, [rbp+1Ch]
    LEA rdi, [rsp+228h+var_1BC]
    MOV ecx, offset aO
    MOV edx, 8
    MOV esi, 1
    XOR eax, eax
    AND r8d, 1FFFFFh
    CALL ___sprintf_chk
    MOV r8d, [rbp+20h]
    LEA rdi, [rsp+228h+var_1B4]
    MOV ecx, offset aO
    MOV edx, 8
    MOV esi, 1
    XOR eax, eax
    AND r8d, 1FFFFFh
    CALL ___sprintf_chk
    MOV r8d, [rbp+30h]
    LEA rdi, [rsp+228h+var_1AC]
    MOV ecx, offset aO
    MOV edx, 0Ch
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV r8, 1FFFFFFFFh
    AND r8, [rbp+58h]
    LEA rdi, [rsp+228h+var_1A0]
    MOV ecx, offset aLlo_0
    MOV edx, 0Ch
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV rax, 20207261747375h
    LEA rcx, [rsp+228h+var_28]
    MOV [rsp+228h+var_18C], r12b
    MOV [rsp+228h+var_127], rax
    MOV [rsp+228h+var_18D], 20h
    MOV rax, rsp
    MOV r8d, 0E0h
    NOP dword ptr [rax]
loc_45E9D8:
    MOVZX edx, byte ptr [rax]
    ADD rax, 1
    ADD r8d, edx
    CMP rax, rcx
    JNZ loc_45E9D8
loc_45E9E7:
    LEA rdi, [rbx+94h]
    MOV ecx, offset a06o
    MOV edx, 8
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV edx, 200h
    MOV rsi, rbx
    MOV edi, 1
    CALL sub_40AFA0
    MOV rax, [rsp+228h+var_20]
    XOR rax, fs:28h
    JNZ loc_45EA35
loc_45EA29:
    ADD rsp, 210h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_45EA35:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'ControlTransfer', 'ComparisonAndJump', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1068', '0x1070', '0x1078', '0x68', '0x88', '0x90', '0x98', '0xA0', '0xAA', '0x64', '0xA8', '0xB0', '0x00000000'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 41, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Graphics/Drawing', 'inferred_category': 'Utility Function'}

##### T 132 - writeheader
```assembly
loc_475860:
    PUSH r12
    PUSH rbp
    MOV r8, rdi
    PUSH rbx
    MOV ecx, 40h
    MOV rbp, rsi
    MOV r12d, edx
    MOV rsi, r8
    MOV edx, 64h
    SUB rsp, 210h
    MOV rax, fs:28h
    MOV [rsp+228h+var_20], rax
    XOR eax, eax
    MOV rdi, rsp
    MOV rbx, rsp
    REP 
    MOV rdi, rsp
    CALL ___strcpy_chk
    MOV r8d, [rbp+18h]
    LEA rdi, [rsp+228h+var_1C4]
    MOV ecx, offset aO
    MOV edx, 8
    MOV esi, 1
    XOR eax, eax
    AND r8d, 1FFh
    CALL ___sprintf_chk
    MOV r8d, [rbp+1Ch]
    LEA rdi, [rsp+228h+var_1BC]
    MOV ecx, offset aO
    MOV edx, 8
    MOV esi, 1
    XOR eax, eax
    AND r8d, 1FFFFFh
    CALL ___sprintf_chk
    MOV r8d, [rbp+20h]
    LEA rdi, [rsp+228h+var_1B4]
    MOV ecx, offset aO
    MOV edx, 8
    MOV esi, 1
    XOR eax, eax
    AND r8d, 1FFFFFh
    CALL ___sprintf_chk
    MOV r8d, [rbp+30h]
    LEA rdi, [rsp+228h+var_1AC]
    MOV ecx, offset aO
    MOV edx, 0Ch
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV r8, 1FFFFFFFFh
    AND r8, [rbp+58h]
    LEA rdi, [rsp+228h+var_1A0]
    MOV edx, 0Ch
    MOV ecx, offset aLlo_0
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    PXOR xmm2, xmm2
    MOV rax, 20207261747375h
    PXOR xmm5, xmm5
    LEA rdx, [rsp+228h+var_28]
    PXOR xmm3, xmm3
    MOV [rsp+228h+var_127], rax
    MOV [rsp+228h+var_18C], r12b
    MOV [rsp+228h+var_18D], 20h
    MOV rax, rsp
    NOP dword ptr [rax+rax+00h]
loc_4759A0:
    MOVDQA xmm0, xmmword ptr [rax]
    ADD rax, 10h
    CMP rdx, rax
    MOVDQA xmm1, xmm0
    PUNPCKHBW xmm0, xmm5
    PUNPCKLBW xmm1, xmm5
    MOVDQA xmm4, xmm1
    PUNPCKHWD xmm1, xmm3
    PUNPCKLWD xmm4, xmm3
    PADDD xmm2, xmm4
    PADDD xmm1, xmm2
    MOVDQA xmm2, xmm0
    PUNPCKHWD xmm0, xmm3
    PUNPCKLWD xmm2, xmm3
    PADDD xmm1, xmm2
    MOVDQA xmm2, xmm1
    PADDD xmm2, xmm0
    JNZ loc_4759A0
loc_4759E5:
    MOVDQA xmm0, xmm2
    LEA rdi, [rbx+94h]
    MOV ecx, offset a06o
    MOV edx, 8
    MOV esi, 1
    PSRLDQ xmm0, 8
    PADDD xmm2, xmm0
    MOVDQA xmm3, xmm2
    PSRLDQ xmm3, 4
    PADDD xmm2, xmm3
    MOVD eax, xmm2
    LEA r8d, [rax+0E0h]
    XOR eax, eax
    CALL ___sprintf_chk
    MOV edx, 200h
    MOV rsi, rbx
    MOV edi, 1
    CALL sub_40C670
    MOV rax, [rsp+228h+var_20]
    XOR rax, fs:28h
    JNZ loc_475A58
loc_475A4C:
    ADD rsp, 210h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_475A58:
    CALL ___stack_chk_fail
```
None

##### Q 133 - get_addr
```assembly
loc_4505B0:
    CMP edx, 11h
    PUSH rbx
    MOV rbx, rsi
    JZ loc_4505C6
loc_4505B9:
    CALL sub_450440
    TEST eax, eax
    JNZ loc_4505D7
loc_4505C2:
    XOR eax, eax
    POP rbx
    RETN 
loc_4505C6:
    MOV edx, 51032Dh
    MOV edi, offset aSMayBeInetSBut
    XOR eax, eax
    CALL sub_40A1E0
loc_4505D7:
    MOV rcx, rbx
    MOV edx, 51032Dh
    MOV esi, offset aInet
    MOV edi, offset aAnSSIsExpected
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'MemoryAccess'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1030', '0x1028', '0x1008', '0x1A8', '0x7D85CE', '0x12DA', '0x40000', '0x1D6', '0x12DD', '0x12D8', '0x12D7'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Image Processing', 'inferred_category': 'Utility/Helper'}

##### T 133 - get_addr
```assembly
loc_463D40:
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 18h
    CMP edx, 11h
    JZ loc_463EC0
loc_463D52:
    MOV qword ptr [rdi], 0
    MOV qword ptr [rdi+8], 0
    MOV rbx, rdi
    MOV dword ptr [rdi+10h], 0
    MOV ecx, 8
    MOV edi, offset aDefault
    REPE 
    JNZ loc_463DA0
loc_463D79:
    CMP edx, 0Ah
    MOV [rbx], dl
    MOV eax, 4
    MOV edx, 10h
    MOV ecx, 0FFFFFFFFh
    CMOVZ eax, edx
    MOV [rbx+2], cx
    MOV [rbx+1], al
loc_463D97:
    ADD rsp, 18h
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_463DA0:
    CMP byte ptr [rbp+0], 61h
    JZ loc_463E00
loc_463DA6:
    MOV esi, 3Ah
    MOV rdi, rbp
    MOV [rsp+28h+var_1C], edx
    CALL _strchr
    TEST rax, rax
    MOV edx, [rsp+28h+var_1C]
    JZ loc_463E30
loc_463DC0:
    TEST edx, edx
    MOV byte ptr [rbx], 0Ah
    JZ loc_463DD0
loc_463DC7:
    CMP edx, 0Ah
    JNZ loc_463E90
loc_463DD0:
    LEA rdx, [rbx+4]
    MOV rsi, rbp
    MOV edi, 0Ah
    CALL _inet_pton
    TEST eax, eax
    JLE loc_463E90
loc_463DE9:
    MOV edx, 0FFFFFFFFh
    MOV byte ptr [rbx+1], 10h
    MOV [rbx+2], dx
    JMP loc_463D97
loc_463E00:
    MOVZX eax, byte ptr [rbp+1]
    CMP al, 6Ch
    JNZ loc_463E20
loc_463E08:
    CMP byte ptr [rbp+2], 6Ch
    JNZ loc_463DA6
loc_463E0E:
    CMP byte ptr [rbp+3], 0
    JZ loc_463D79
loc_463E18:
    JMP loc_463DA6
loc_463E20:
    CMP al, 6Eh
    JNZ loc_463DA6
loc_463E24:
    CMP byte ptr [rbp+2], 79h
    JNZ loc_463DA6
loc_463E2E:
    JMP loc_463E0E
loc_463E30:
    AND edx, 0FFFFFFFDh
    JNZ loc_463E90
loc_463E35:
    LEA rcx, [rbp-1]
    MOV byte ptr [rbx], 2
    XOR esi, esi
    XOR edi, edi
loc_463E40:
    ADD rcx, 1
    MOVZX eax, byte ptr [rcx]
    TEST al, al
    JZ loc_463E76
loc_463E4B:
    LEA edx, [rax-30h]
    CMP dl, 9
    JA loc_463EB0
loc_463E53:
    LEA eax, [rsi+rsi*4]
    MOVZX edx, dl
    LEA esi, [rdx+rax*2]
    CMP esi, 0FFh
    JA loc_463E90
loc_463E64:
    MOV eax, edi
    ADD rcx, 1
    MOV [rbx+rax+4], sil
    MOVZX eax, byte ptr [rcx]
    TEST al, al
    JNZ loc_463E4B
loc_463E76:
    MOV eax, 0FFFFFFFFh
    MOV byte ptr [rbx+1], 4
    MOV [rbx+2], ax
    JMP loc_463D97
loc_463E90:
    MOV rcx, rbp
    MOV edx, 55E3DDh
    MOV esi, offset aInet
    MOV edi, offset aAnSSIsExpected
    XOR eax, eax
    CALL sub_40ABE0
loc_463EB0:
    CMP al, 2Eh
    JNZ loc_463E90
loc_463EB4:
    ADD edi, 1
    CMP edi, 3
    JA loc_463E90
loc_463EBC:
    XOR esi, esi
    JMP loc_463E40
loc_463EC0:
    MOV edx, 55E3DDh
    MOV edi, offset aSMayBeInetSBut
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1030', '0x1028', '0x1008', '0x1A8', '0x83B44E', '0x12DA', '0x40000', '0x1D6', '0x12DD', '0x12D8', '0x12D7'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Image Processing', 'inferred_category': 'Utility/Helper'}

##### Q 134 - swap_on_off_main
```assembly
loc_4960F0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aAe
    MOV rdi, rbx
    SUB rsp, 28h
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    MOV rax, cs:ident
    MOV [rsp+58h+var_48], 0
    LEA rcx, [rsp+58h+var_50]
    LEA rdx, [rsp+58h+var_48]
    CMP byte ptr [rax+5], 66h
    MOV eax, offset aAedP
    CMOVNZ rsi, rax
    XOR eax, eax
    CALL sub_4DFD70
    MOVSXD rax, cs:optind
    LEA rbp, [rbx+rax*8]
    MOV eax, cs:dword_74363C
    TEST al, 4
    JNZ loc_4962D8
loc_496160:
    TEST al, 8
    JNZ loc_4962C0
loc_496168:
    TEST al, 1
    JZ loc_496220
loc_496170:
    MOV rax, cs:ident
    XOR r14d, r14d
    CMP byte ptr [rax+5], 66h
    JZ loc_4962ED
loc_496184:
    MOV edi, offset aEtcFstab
    XOR r12d, r12d
    CALL sub_40A3D0
    MOV r13, rax
    JMP loc_4961B6
loc_4961A0:
    MOV rsi, [rbx+10h]
    MOV edi, offset aSwap_0
    MOV ecx, 5
    REPE 
    JZ loc_496240
loc_4961B6:
    MOV rdi, r13
    CALL _getmntent
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4961A0
loc_4961C6:
    MOV rdi, [rbp+0]
    OR r12d, r14d
    AND cs:dword_74363C, 0FFFFFFFEh
    TEST rdi, rdi
    JZ loc_4961F5
loc_4961D9:
    NOP dword ptr [rax+00000000h]
loc_4961E0:
    ADD rbp, 8
    CALL sub_495EF0
    MOV rdi, [rbp+0]
    OR r12d, eax
    TEST rdi, rdi
    JNZ loc_4961E0
loc_4961F5:
    MOV rdx, [rsp+58h+var_40]
    XOR rdx, fs:28h
    MOV eax, r12d
    JNZ loc_49634B
loc_49620C:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_496220:
    MOV rdi, [rbp+0]
    TEST rdi, rdi
    JZ loc_496346
loc_49622D:
    AND eax, 0FFFFFFFEh
    XOR r12d, r12d
    MOV cs:dword_74363C, eax
    JMP loc_4961E0
loc_496240:
    MOV rax, cs:ident
    CMP byte ptr [rax+5], 66h
    JZ loc_496263
loc_49624D:
    MOV esi, offset opt
    MOV rdi, rbx
    CALL _hasmntopt
    TEST rax, rax
    JNZ loc_4961B6
loc_496263:
    MOV esi, offset aDiscard
    MOV rdi, rbx
    MOV r15d, cs:dest.c_iflag
    CALL _hasmntopt
    TEST rax, rax
    JZ loc_496285
loc_49627C:
    LEA rdi, [rax+7]
    CALL sub_496070
loc_496285:
    MOV esi, offset aPri
    MOV rdi, rbx
    CALL _hasmntopt
    TEST rax, rax
    JZ loc_4962A0
loc_496297:
    LEA rdi, [rax+4]
    CALL sub_495EA0
loc_4962A0:
    MOV rdi, [rbx]
    CALL sub_495EF0
    MOV cs:dest.c_iflag, r15d
    OR r12d, eax
    JMP loc_4961B6
loc_4962C0:
    MOV rdi, [rsp+58h+var_50]
    CALL sub_495EA0
    MOV eax, cs:dword_74363C
    JMP loc_496168
loc_4962D8:
    MOV rdi, [rsp+58h+var_48]
    CALL sub_496070
    MOV eax, cs:dword_74363C
    JMP loc_496160
loc_4962ED:
    MOV edi, offset aProcSwaps
    CALL sub_40A3C0
    TEST rax, rax
    MOV r12, rax
    JNZ loc_496310
loc_4962FF:
    JMP loc_496184
loc_496308:
    MOV rdi, rbx
    CALL _free
loc_496310:
    MOV rdi, r12
    CALL sub_4DF330
    TEST rax, rax
    MOV rbx, rax
    JZ loc_496184
loc_496324:
    CMP byte ptr [rbx], 2Fh
    JNZ loc_496308
loc_496329:
    MOV esi, 20h
    MOV rdi, rbx
    CALL _strchrnul
    MOV rdi, rbx
    MOV byte ptr [rax], 0
    CALL sub_495EF0
    OR r14d, eax
    JMP loc_496308
loc_496346:
    CALL sub_408E80
loc_49634B:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x100', '0x340', '0x360'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Sorting', 'inferred_category': 'Utility/Helper'}

##### T 134 - swap_on_off_main
```assembly
loc_4BC000:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV esi, offset aAe
    MOV rdi, rbx
    SUB rsp, 0D8h
    MOV rax, fs:28h
    MOV [rsp+108h+var_40], rax
    XOR eax, eax
    MOV rax, cs:ident
    MOV [rsp+108h+var_E8], 0
    LEA rdx, [rsp+108h+var_E8]
    LEA rcx, [rsp+108h+s]
    CMP byte ptr [rax+5], 66h
    MOV eax, offset aAedP
    CMOVNZ rsi, rax
    XOR eax, eax
    CALL sub_5291B0
    MOVSXD rax, cs:optind
    MOV edx, cs:dword_78D63C
    TEST dl, 4
    LEA rbp, [rbx+rax*8]
    JNZ loc_4BC420
loc_4BC077:
    TEST dl, 8
    JNZ loc_4BC3C0
loc_4BC080:
    TEST dl, 1
    JZ loc_4BC240
loc_4BC089:
    MOV rax, cs:ident
    XOR r14d, r14d
    CMP byte ptr [rax+5], 66h
    JZ loc_4BC4A0
loc_4BC09D:
    MOV edi, offset aEtcFstab
    XOR r12d, r12d
    CALL sub_40AD90
    MOV r13, rax
    JMP loc_4BC0C6
loc_4BC0B0:
    MOV rsi, [rbx+10h]
    MOV edi, offset aSwap_0
    MOV ecx, 5
    REPE 
    JZ loc_4BC260
loc_4BC0C6:
    MOV rdi, r13
    CALL _getmntent
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4BC0B0
loc_4BC0D6:
    MOV rax, [rbp+0]
    OR r12d, r14d
    AND cs:dword_78D63C, 0FFFFFFFEh
    TEST rax, rax
    JZ loc_4BC163
loc_4BC0E9:
    MOV rbx, cs:qword_78D1E8
    MOV r13, rbx
    MOV r14, rbx
    NOP word ptr [rax+rax+00000000h]
loc_4BC100:
    LEA rdi, [rsp+108h+filename]
    MOV [rsp+108h+filename], rax
    ADD rbp, 8
    CALL sub_4BDE00
    MOV rax, cs:ident
    CMP byte ptr [rax+5], 66h
    JZ loc_4BC208
loc_4BC124:
    MOV rsi, [rsp+108h+filename]
    LEA rdx, [rsp+108h+stat_buf]
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JZ loc_4BC1A8
loc_4BC13C:
    MOV ecx, cs:dword_78D63C
    MOV edx, 1
loc_4BC147:
    AND ecx, 2
    JZ loc_4BC151
loc_4BC14C:
    CMP dword ptr [rbx], 2
    JZ loc_4BC155
loc_4BC151:
    TEST dl, dl
    JNZ loc_4BC190
loc_4BC155:
    XOR eax, eax
loc_4BC157:
    OR r12d, eax
    MOV rax, [rbp+0]
    TEST rax, rax
    JNZ loc_4BC100
loc_4BC163:
    MOV rcx, [rsp+108h+var_40]
    XOR rcx, fs:28h
    MOV eax, r12d
    JNZ loc_4BC503
loc_4BC17D:
    ADD rsp, 0D8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4BC190:
    MOV rdi, [rsp+108h+filename]
    CALL sub_40A870
    MOV eax, 1
    JMP loc_4BC157
loc_4BC1A8:
    MOV eax, [rsp+108h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 8000h
    JNZ loc_4BC1CC
loc_4BC1B8:
    MOV rax, [rsp+108h+stat_buf.st_blocks]
    SHL rax, 9
    CMP rax, [rsp+108h+stat_buf.st_size]
    JL loc_4BC3A0
loc_4BC1CC:
    MOV esi, cs:buf.c_iflag
    MOV rdi, [rsp+108h+filename]
    CALL _swapon
    MOV ecx, cs:dword_78D63C
    MOV edx, 1
    TEST cl, 1
    JZ loc_4BC1F4
loc_4BC1EC:
    CMP dword ptr [r13+0], 10h
    SETNZ dl
loc_4BC1F4:
    TEST eax, eax
    JZ loc_4BC155
loc_4BC1FC:
    JMP loc_4BC147
loc_4BC208:
    MOV rdi, [rsp+108h+filename]
    CALL _swapoff
    TEST byte ptr cs:dword_78D63C, 1
    JZ loc_4BC230
loc_4BC21B:
    MOV edx, [r14]
    CMP edx, 16h
    JZ loc_4BC155
loc_4BC227:
    CMP edx, 2
    JZ loc_4BC155
loc_4BC230:
    TEST eax, eax
    SETNZ dl
    JMP loc_4BC151
loc_4BC240:
    MOV rax, [rbp+0]
    TEST rax, rax
    JZ loc_4BC4FE
loc_4BC24D:
    AND edx, 0FFFFFFFEh
    XOR r12d, r12d
    MOV cs:dword_78D63C, edx
    JMP loc_4BC0E9
loc_4BC260:
    MOV rax, cs:ident
    CMP byte ptr [rax+5], 66h
    JZ loc_4BC283
loc_4BC26D:
    MOV esi, offset opt
    MOV rdi, rbx
    CALL _hasmntopt
    TEST rax, rax
    JNZ loc_4BC0C6
loc_4BC283:
    MOV esi, offset aDiscard
    MOV rdi, rbx
    MOV r15d, cs:buf.c_iflag
    CALL _hasmntopt
    TEST rax, rax
    JZ loc_4BC319
loc_4BC29C:
    MOV edx, cs:buf.c_iflag
    AND edx, 0FFF8FFFFh
    OR edx, 10000h
    MOV cs:buf.c_iflag, edx
    MOV rdx, rax
    ADD rdx, 7
    JZ loc_4BC319
loc_4BC2BD:
    CMP byte ptr [rax+7], 3Dh
    LEA rcx, [rax+8]
    MOV esi, 2Ch
    CMOVZ rdx, rcx
    MOV rdi, rdx
    MOV [rsp+108h+var_100], rdx
    CALL _strchrnul
    MOV rdx, [rsp+108h+var_100]
    MOV byte ptr [rax], 0
    MOV edi, offset aOnce
    MOV ecx, 5
    MOV rsi, rdx
    REPE 
    JNZ loc_4BC2FE
loc_4BC2F4:
    OR cs:buf.c_iflag, 20000h
loc_4BC2FE:
    MOV edi, offset aPages
    MOV ecx, 6
    MOV rsi, rdx
    REPE 
    JNZ loc_4BC319
loc_4BC30F:
    OR cs:buf.c_iflag, 40000h
loc_4BC319:
    MOV esi, offset aPri
    MOV rdi, rbx
    CALL _hasmntopt
    TEST rax, rax
    JZ loc_4BC386
loc_4BC32B:
    LEA rcx, [rax+4]
    MOV esi, 2Ch
    MOV rdi, rcx
    MOV [rsp+108h+var_100], rcx
    CALL _strchrnul
    MOV rcx, [rsp+108h+var_100]
    MOV edx, 0Ah
    XOR esi, esi
    MOV byte ptr [rax], 0
    MOV rdi, rcx
    CALL sub_40E6F0
    MOV rcx, cs:qword_78D1E8
    MOV edx, [rcx]
    TEST edx, edx
    JNZ loc_4BC386
loc_4BC365:
    MOV edx, cs:buf.c_iflag
    MOV ecx, 7FFFh
    XOR dx, dx
    OR dh, 80h
    CMP eax, 7FFFh
    CMOVA eax, ecx
    OR eax, edx
    MOV cs:buf.c_iflag, eax
loc_4BC386:
    MOV rdi, [rbx]
    CALL sub_4BBE80
    MOV cs:buf.c_iflag, r15d
    OR r12d, eax
    JMP loc_4BC0C6
loc_4BC3A0:
    MOV rsi, [rsp+108h+filename]
    XOR eax, eax
    MOV edi, offset aSFileHasHoles
    CALL sub_40AC80
    MOV eax, 1
    JMP loc_4BC157
loc_4BC3C0:
    MOV rbx, [rsp+108h+s]
    MOV esi, 2Ch
    MOV rdi, rbx
    CALL _strchrnul
    MOV edx, 0Ah
    XOR esi, esi
    MOV byte ptr [rax], 0
    MOV rdi, rbx
    CALL sub_40E6F0
    MOV rdx, cs:qword_78D1E8
    MOV ecx, [rdx]
    TEST ecx, ecx
    JNZ loc_4BC412
loc_4BC3F1:
    MOV edx, cs:buf.c_iflag
    MOV ecx, 7FFFh
    XOR dx, dx
    OR dh, 80h
    CMP eax, 7FFFh
    CMOVA eax, ecx
    OR eax, edx
    MOV cs:buf.c_iflag, eax
loc_4BC412:
    MOV edx, cs:dword_78D63C
    JMP loc_4BC080
loc_4BC420:
    MOV eax, cs:buf.c_iflag
    MOV rbx, [rsp+108h+var_E8]
    AND eax, 0FFF8FFFFh
    OR eax, 10000h
    TEST rbx, rbx
    MOV cs:buf.c_iflag, eax
    JZ loc_4BC077
loc_4BC444:
    XOR eax, eax
    CMP byte ptr [rbx], 3Dh
    MOV esi, 2Ch
    SETZ al
    ADD rbx, rax
    MOV rdi, rbx
    CALL _strchrnul
    MOV edi, offset aOnce
    MOV byte ptr [rax], 0
    MOV ecx, 5
    MOV rsi, rbx
    REPE 
    JNZ loc_4BC47A
loc_4BC470:
    OR cs:buf.c_iflag, 20000h
loc_4BC47A:
    MOV edi, offset aPages
    MOV ecx, 6
    MOV rsi, rbx
    REPE 
    JNZ loc_4BC495
loc_4BC48B:
    OR cs:buf.c_iflag, 40000h
loc_4BC495:
    MOV edx, cs:dword_78D63C
    JMP loc_4BC077
loc_4BC4A0:
    MOV edi, offset aProcSwaps
    CALL sub_40AD80
    TEST rax, rax
    MOV r12, rax
    JNZ loc_4BC4C8
loc_4BC4B2:
    JMP loc_4BC09D
loc_4BC4C0:
    MOV rdi, rbx
    CALL _free
loc_4BC4C8:
    MOV rdi, r12
    CALL sub_528030
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4BC09D
loc_4BC4DC:
    CMP byte ptr [rbx], 2Fh
    JNZ loc_4BC4C0
loc_4BC4E1:
    MOV esi, 20h
    MOV rdi, rbx
    CALL _strchrnul
    MOV rdi, rbx
    MOV byte ptr [rax], 0
    CALL sub_4BBE80
    OR r14d, eax
    JMP loc_4BC4C0
loc_4BC4FE:
    CALL sub_409830
loc_4BC503:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'ControlFlow', 'Arithmetic', 'FunctionCall', 'StringManipulation', 'TypeConversion'], 'loop_indicators': [{'label': 'loc_453A80', 'exit_label': 'loc_453B11', 'counter': 'rbx', 'condition_label': 'loc_453AFA', 'increment_expression': 'ADD rbx, 1'}, {'label': 'loc_453BA1', 'exit_label': 'loc_453BC2', 'counter': 'rax', 'condition_label': 'loc_453BEF', 'increment_expression': 'CMP rax, 1; JZ loc_453C0A; ADD rax, 1'}], 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': ['MOVSD'], 'presence_of_notable_integer_constants': ['0x18', '0x100', '0x4'], 'presence_of_notable_floating_point_constants': ['0.0'], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Sorting Algorithm', 'inferred_category': 'High-Level Function'}

##### Q 135 - cat_main
```assembly
loc_4B1010:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset aEtvanbu
    SUB rsp, 68h
    MOV rax, fs:28h
    MOV [rsp+98h+var_40], rax
    XOR eax, eax
    CALL sub_4DFD70
    MOV r14d, eax
    MOVSXD rax, cs:optind
    LEA r15, [rbx+rax*8]
    CMP qword ptr [r15], 0
    JZ loc_4B1098
loc_4B1052:
    TEST r14b, 7
    JNZ loc_4B10A6
loc_4B1058:
    MOV edx, r14d
    SHR edx, 4
    TEST dl, 3
    JNZ loc_4B11CE
loc_4B1067:
    MOV rdi, r15
    CALL sub_4DBFE0
    MOV rcx, [rsp+98h+var_40]
    XOR rcx, fs:28h
    JNZ loc_4B11C9
loc_4B1083:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B1098:
    MOV qword ptr [r15-8], (offset asc_51A2BA+3)
    SUB r15, 8
    JMP loc_4B1052
loc_4B10A6:
    MOV eax, r14d
    MOV rdi, [r15]
    MOV ebx, 1
    AND eax, 30h
    MOV [rsp+98h+var_8C], 0
    MOV [rsp+98h+var_7C], 0
    CMP eax, 1
    MOV eax, r14d
    SBB r12d, r12d
    AND eax, 20h
    AND r12d, 0F6h
    ADD r12d, 0Ah
    CMP eax, 1
    SBB eax, eax
    AND eax, 0F6h
    ADD eax, 0Ah
    MOV [rsp+98h+var_84], eax
loc_4B10EC:
    CALL sub_4EC9C0
    TEST eax, eax
    MOV [rsp+98h+fd], eax
    JS loc_4B11A8
loc_4B10FD:
    NOP dword ptr [rax]
loc_4B1100:
    MOV edi, [rsp+98h+fd]
    MOV edx, 400h
    MOV esi, offset dest
    CALL _read
    TEST eax, eax
    JS loc_4B11A8
loc_4B111B:
    JZ loc_4B11B0
loc_4B1121:
    LEA ebp, [rax-1]
    MOV r13d, offset dest
    ADD rbp, 743229h
    NOP dword ptr [rax+00000000h]
loc_4B1138:
    TEST bl, bl
    MOVZX r9d, byte ptr [r13+0]
    JZ loc_4B116E
loc_4B1141:
    CMP r9d, [rsp+98h+var_84]
    JZ loc_4B116E
loc_4B1148:
    ADD [rsp+98h+var_8C], 1
    MOV esi, offset a6u_0
    MOV edi, 1
    MOV eax, [rsp+98h+var_8C]
    MOV [rsp+98h+var_88], r9d
    MOV edx, eax
    XOR eax, eax
    CALL ___printf_chk
    MOV r9d, [rsp+98h+var_88]
loc_4B116E:
    LEA rsi, [rsp+98h+s]
    CMP r12d, r9d
    MOV edi, r9d
    MOV edx, r14d
    SETZ bl
    ADD r13, 1
    CALL sub_4E65D0
    MOV rsi, cs:stdout
    LEA rdi, [rsp+98h+s]
    CALL _fputs_unlocked
    CMP rbp, r13
    JNZ loc_4B1138
loc_4B119E:
    JMP loc_4B1100
loc_4B11A8:
    MOV [rsp+98h+var_7C], 1
loc_4B11B0:
    ADD r15, 8
    MOV rdi, [r15]
    TEST rdi, rdi
    JNZ loc_4B10EC
loc_4B11C0:
    MOV edi, [rsp+98h+var_7C]
    CALL sub_4DE820
loc_4B11C9:
    CALL ___stack_chk_fail
loc_4B11CE:
    MOV eax, r14d
    MOV rsi, [r15]
    AND edx, 2
    SHR eax, 5
    MOV [rsp+98h+var_78], 6
    MOV [rsp+98h+var_74], 1
    XOR eax, 1
    MOV [rsp+98h+var_70], 1
    MOV [rsp+98h+var_68], 5104E7h
    AND eax, 1
    MOV [rsp+98h+var_60], 50E4F5h
    MOV [rsp+98h+var_57], dl
    MOV [rsp+98h+var_58], al
loc_4B1212:
    LEA rdi, [rsp+98h+var_78]
    ADD r15, 8
    CALL sub_4E6460
    MOV rsi, [r15]
    TEST rsi, rsi
    JNZ loc_4B1212
loc_4B1228:
    XOR edi, edi
    CALL sub_4DE820
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x58'], 'presence_of_notable_floating_point_constants': ['0x6E6A20', '0x6EC5F0', '0x6EC5F8', '0x6EC5F8'], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Parallel Processing'}

##### T 135 - cat_main
```assembly
loc_4E8CE0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset aEtvanbu
    SUB rsp, 68h
    MOV rax, fs:28h
    MOV [rsp+98h+var_40], rax
    XOR eax, eax
    CALL sub_5291B0
    MOV r14d, eax
    MOVSXD rax, cs:optind
    LEA r15, [rbx+rax*8]
    CMP qword ptr [r15], 0
    JZ loc_4E8D68
loc_4E8D22:
    TEST r14b, 7
    JNZ loc_4E8D76
loc_4E8D28:
    MOV edx, r14d
    SHR edx, 4
    TEST dl, 3
    JNZ loc_4E8E9C
loc_4E8D37:
    MOV rdi, r15
    CALL sub_524490
    MOV rcx, [rsp+98h+var_40]
    XOR rcx, fs:28h
    JNZ loc_4E8E97
loc_4E8D53:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E8D68:
    MOV qword ptr [r15-8], (offset asc_568276+3)
    SUB r15, 8
    JMP loc_4E8D22
loc_4E8D76:
    MOV eax, r14d
    MOV ebx, 1
    MOV [rsp+98h+var_8C], 0
    AND eax, 30h
    MOV [rsp+98h+var_7C], 0
    CMP eax, 1
    MOV eax, r14d
    SBB r12d, r12d
    AND eax, 20h
    AND r12d, 0F6h
    ADD r12d, 0Ah
    CMP eax, 1
    SBB eax, eax
    AND eax, 0F6h
    ADD eax, 0Ah
    MOV [rsp+98h+var_84], eax
loc_4E8DB9:
    MOV rdi, [r15]
    CALL sub_538FF0
    TEST eax, eax
    MOV [rsp+98h+fd], eax
    JS loc_4E8E78
loc_4E8DCD:
    NOP dword ptr [rax]
loc_4E8DD0:
    MOV edi, [rsp+98h+fd]
    MOV edx, 400h
    MOV esi, offset buf
    CALL _read
    TEST eax, eax
    JS loc_4E8E78
loc_4E8DEB:
    JZ loc_4E8E80
loc_4E8DF1:
    LEA ebp, [rax-1]
    MOV r13d, offset buf
    ADD rbp, 78D229h
    NOP dword ptr [rax+00000000h]
loc_4E8E08:
    TEST bl, bl
    MOVZX r9d, byte ptr [r13+0]
    JZ loc_4E8E3E
loc_4E8E11:
    CMP r9d, [rsp+98h+var_84]
    JZ loc_4E8E3E
loc_4E8E18:
    ADD [rsp+98h+var_8C], 1
    MOV esi, offset a6u_0
    MOV edi, 1
    MOV eax, [rsp+98h+var_8C]
    MOV [rsp+98h+var_88], r9d
    MOV edx, eax
    XOR eax, eax
    CALL ___printf_chk
    MOV r9d, [rsp+98h+var_88]
loc_4E8E3E:
    LEA rsi, [rsp+98h+s]
    CMP r12d, r9d
    MOV edi, r9d
    MOV edx, r14d
    SETZ bl
    ADD r13, 1
    CALL sub_531390
    MOV rsi, cs:stdout
    LEA rdi, [rsp+98h+s]
    CALL _fputs_unlocked
    CMP r13, rbp
    JNZ loc_4E8E08
loc_4E8E6E:
    JMP loc_4E8DD0
loc_4E8E78:
    MOV [rsp+98h+var_7C], 1
loc_4E8E80:
    ADD r15, 8
    CMP qword ptr [r15], 0
    JNZ loc_4E8DB9
loc_4E8E8E:
    MOV edi, [rsp+98h+var_7C]
    CALL sub_527470
loc_4E8E97:
    CALL ___stack_chk_fail
loc_4E8E9C:
    MOV eax, r14d
    AND edx, 2
    MOV [rsp+98h+var_78], 6
    SHR eax, 5
    MOV [rsp+98h+var_74], 1
    MOV [rsp+98h+var_70], 1
    XOR eax, 1
    MOV [rsp+98h+var_68], 55E597h
    MOV [rsp+98h+var_60], 55C5BDh
    AND eax, 1
    MOV [rsp+98h+var_57], dl
    MOV [rsp+98h+var_58], al
loc_4E8EDD:
    MOV rsi, [r15]
    LEA rdi, [rsp+98h+var_78]
    ADD r15, 8
    CALL sub_531220
    CMP qword ptr [r15], 0
    JNZ loc_4E8EDD
loc_4E8EF4:
    XOR edi, edi
    CALL sub_527470
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': ['0.0', '1.0'], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Matrix Multiplication or Similar', 'inferred_category': 'Mathematical Computation'}

##### Q 136 - get_jiffy_counts
```assembly
loc_45F400:
    PUSH r13
    PUSH r12
    MOV edi, 513ECEh
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    CALL sub_40A3D0
    MOV rbx, cs:qword_7431F0
    MOV rbp, rax
    MOV rdi, rbp
    MOV rax, [rbx+80h]
    LEA rsi, [rbx+80h]
    MOV [rbx+0D0h], rax
    MOV rax, [rbx+88h]
    MOV [rbx+0D8h], rax
    MOV rax, [rbx+90h]
    MOV [rbx+0E0h], rax
    MOV rax, [rbx+98h]
    MOV [rbx+0E8h], rax
    MOV rax, [rbx+0A0h]
    MOV [rbx+0F0h], rax
    MOV rax, [rbx+0A8h]
    MOV [rbx+0F8h], rax
    MOV rax, [rbx+0B0h]
    MOV [rbx+100h], rax
    MOV rax, [rbx+0B8h]
    MOV [rbx+108h], rax
    MOV rax, [rbx+0C0h]
    MOV [rbx+110h], rax
    MOV rax, [rbx+0C8h]
    MOV [rbx+118h], rax
    CALL sub_45F340
    CMP eax, 3
    JLE loc_45F5B0
loc_45F4C2:
    CMP byte ptr [rbx+0Eh], 0
    JZ loc_45F523
loc_45F4C8:
    MOV edx, [rbx+138h]
    CMP edx, 0
    JZ loc_45F547
loc_45F4D3:
    MOV rsi, [rbx+130h]
    MOV rax, [rbx+128h]
    MOV [rbx+128h], rsi
    MOV [rbx+130h], rax
    JLE loc_45F523
loc_45F4F1:
    XOR r13d, r13d
    XOR r12d, r12d
    JMP loc_45F507
loc_45F500:
    MOV rsi, [rbx+128h]
loc_45F507:
    ADD rsi, r13
    MOV rdi, rbp
    ADD r12d, 1
    CALL sub_45F340
    ADD r13, 50h
    CMP [rbx+138h], r12d
    JG loc_45F500
loc_45F523:
    ADD rsp, 8
    MOV rdi, rbp
    POP rbx
    POP rbp
    POP r12
    POP r13
    JMP _fclose
loc_45F538:
    MOV eax, [rbx+138h]
    LEA edx, [rax+1]
    MOV [rbx+138h], edx
loc_45F547:
    MOV rdi, [rbx+128h]
    MOV esi, 5001h
    CALL sub_4EDE50
    MOVSXD rdx, dword ptr [rbx+138h]
    MOV [rbx+128h], rax
    MOV rdi, rbp
    LEA rsi, [rdx+rdx*4]
    SHL rsi, 4
    ADD rsi, rax
    CALL sub_45F340
    CMP eax, 4
    JG loc_45F538
loc_45F57E:
    MOVSXD rax, dword ptr [rbx+138h]
    TEST eax, eax
    JNZ loc_45F58D
loc_45F589:
    MOV byte ptr [rbx+0Eh], 0
loc_45F58D:
    LEA rdi, [rax+rax*4]
    SHL rdi, 4
    CALL sub_40AD10
    MOV edi, 0C350h
    MOV [rbx+130h], rax
    CALL _usleep
    JMP loc_45F523
loc_45F5B0:
    MOV esi, offset aProcStat
    MOV edi, offset aCanTReadS
    XOR eax, eax
    CALL sub_40A1E0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'ErrorHandling'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1018', '0x1010', '0x445', '0x446'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Assertion', 'inferred_category': 'Error Handling'}

##### T 136 - get_jiffy_counts
```assembly
loc_476870:
    PUSH r13
    PUSH r12
    MOV edi, 561F7Eh
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    CALL sub_40AD90
    MOV rbx, cs:qword_78D1F0
    MOV rbp, rax
    MOV rdi, rbp
    MOV rax, [rbx+80h]
    LEA rsi, [rbx+80h]
    MOV [rbx+0D0h], rax
    MOV rax, [rbx+88h]
    MOV [rbx+0D8h], rax
    MOV rax, [rbx+90h]
    MOV [rbx+0E0h], rax
    MOV rax, [rbx+98h]
    MOV [rbx+0E8h], rax
    MOV rax, [rbx+0A0h]
    MOV [rbx+0F0h], rax
    MOV rax, [rbx+0A8h]
    MOV [rbx+0F8h], rax
    MOV rax, [rbx+0B0h]
    MOV [rbx+100h], rax
    MOV rax, [rbx+0B8h]
    MOV [rbx+108h], rax
    MOV rax, [rbx+0C0h]
    MOV [rbx+110h], rax
    MOV rax, [rbx+0C8h]
    MOV [rbx+118h], rax
    CALL sub_4767B0
    CMP eax, 3
    JLE loc_476A20
loc_476932:
    CMP byte ptr [rbx+0Eh], 0
    JZ loc_476993
loc_476938:
    MOV edx, [rbx+138h]
    CMP edx, 0
    JZ loc_4769B7
loc_476943:
    MOV rsi, [rbx+130h]
    MOV rax, [rbx+128h]
    MOV [rbx+128h], rsi
    MOV [rbx+130h], rax
    JLE loc_476993
loc_476961:
    XOR r13d, r13d
    XOR r12d, r12d
    JMP loc_476977
loc_476970:
    MOV rsi, [rbx+128h]
loc_476977:
    ADD rsi, r13
    MOV rdi, rbp
    ADD r12d, 1
    CALL sub_4767B0
    ADD r13, 50h
    CMP [rbx+138h], r12d
    JG loc_476970
loc_476993:
    ADD rsp, 8
    MOV rdi, rbp
    POP rbx
    POP rbp
    POP r12
    POP r13
    JMP _fclose
loc_4769A8:
    MOV eax, [rbx+138h]
    LEA edx, [rax+1]
    MOV [rbx+138h], edx
loc_4769B7:
    MOV rdi, [rbx+128h]
    MOV esi, 5001h
    CALL sub_53B960
    MOVSXD rdx, dword ptr [rbx+138h]
    MOV [rbx+128h], rax
    MOV rdi, rbp
    LEA rsi, [rdx+rdx*4]
    SHL rsi, 4
    ADD rsi, rax
    CALL sub_4767B0
    CMP eax, 4
    JG loc_4769A8
loc_4769EE:
    MOVSXD rax, dword ptr [rbx+138h]
    TEST eax, eax
    JNZ loc_4769FD
loc_4769F9:
    MOV byte ptr [rbx+0Eh], 0
loc_4769FD:
    LEA rdi, [rax+rax*4]
    SHL rdi, 4
    CALL sub_40C260
    MOV edi, 0C350h
    MOV [rbx+130h], rax
    CALL _usleep
    JMP loc_476993
loc_476A20:
    MOV esi, offset aProcStat
    MOV edi, offset aCanTReadS
    XOR eax, eax
    CALL sub_40ABE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'ConditionalBranching', 'ErrorHandling'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1018', '0x1010', '0x445', '0x446'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Assertion', 'inferred_category': 'Debugging/Error Handling'}

##### Q 137 - bb_strtoull
```assembly
loc_40CB00:
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    TEST rsi, rsi
    CMOVZ rbx, rsp
    MOV [rbx], rdi
    MOVZX eax, byte ptr [rdi]
    LEA ecx, [rax-30h]
    CMP cl, 9
    JA loc_40CB70
loc_40CB2D:
    MOV rax, cs:qword_7431E8
    MOV rsi, rbx
    MOV dword ptr [rax], 0
    CALL _strtoull
    MOV rsi, [rbx]
    MOV rdi, rax
    CALL sub_40CAB0
    NOP dword ptr [rax]
loc_40CB50:
    MOV rsi, [rsp+18h+var_10]
    XOR rsi, fs:28h
    JNZ loc_40CB90
loc_40CB60:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_40CB70:
    OR eax, 20h
    SUB eax, 61h
    CMP al, 19h
    JBE loc_40CB2D
loc_40CB7A:
    MOV rax, cs:qword_7431E8
    MOV dword ptr [rax], 22h
    MOV rax, 0FFFFFFFFFFFFFFFFh
    JMP loc_40CB50
loc_40CB90:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6EED40'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### T 137 - bb_strtoull
```assembly
loc_40E530:
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    TEST rsi, rsi
    CMOVZ rbx, rsp
    MOV [rbx], rdi
    MOVZX eax, byte ptr [rdi]
    LEA ecx, [rax-30h]
    CMP cl, 9
    JA loc_40E5C0
loc_40E55E:
    MOV rbp, cs:qword_78D1E8
    MOV rsi, rbx
    MOV dword ptr [rbp+0], 0
    CALL _strtoull
    MOV rdx, [rbx]
    MOVZX edx, byte ptr [rdx]
    TEST dl, dl
    JZ loc_40E5A0
loc_40E57E:
    LEA ecx, [rdx-30h]
    CMP cl, 9
    JBE loc_40E5E0
loc_40E586:
    OR edx, 20h
    SUB edx, 61h
    CMP dl, 19h
    JBE loc_40E5E0
loc_40E591:
    MOV edx, [rbp+0]
    TEST edx, edx
    JNZ loc_40E5E0
loc_40E598:
    MOV dword ptr [rbp+0], 16h
    NOP 
loc_40E5A0:
    MOV rsi, [rsp+28h+var_20]
    XOR rsi, fs:28h
    JNZ loc_40E5F0
loc_40E5B0:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_40E5C0:
    OR eax, 20h
    SUB eax, 61h
    CMP al, 19h
    JBE loc_40E55E
loc_40E5CA:
    MOV rax, cs:qword_78D1E8
    MOV dword ptr [rax], 22h
    MOV rax, 0FFFFFFFFFFFFFFFFh
    JMP loc_40E5A0
loc_40E5E0:
    MOV dword ptr [rbp+0], 22h
    MOV rax, 0FFFFFFFFFFFFFFFFh
    JMP loc_40E5A0
loc_40E5F0:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['String'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x751770'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 138 - iterate_on_dir
```assembly
loc_4C3C10:
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV r12, rdx
    SUB rsp, 8
    CALL _opendir
    TEST rax, rax
    JZ loc_4C3C66
loc_4C3C2D:
    MOV rbx, rax
    JMP loc_4C3C44
loc_4C3C38:
    MOV rdx, r12
    MOV rsi, rax
    MOV rdi, rbp
    CALL r13
loc_4C3C44:
    MOV rdi, rbx
    CALL _readdir64
    TEST rax, rax
    JNZ loc_4C3C38
loc_4C3C51:
    MOV rdi, rbx
    CALL _closedir
    XOR eax, eax
loc_4C3C5B:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4C3C66:
    MOV eax, 0FFFFFFFFh
    JMP loc_4C3C5B
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x340', '0x360', '0x74', '0x78'], 'presence_of_notable_floating_point_constants': ['cs:qword_6D2460', 'cs:dword_6D2440'], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallel Processing', 'inferred_category': 'Parallel Computing'}

##### T 138 - iterate_on_dir
```assembly
loc_4FF8F0:
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV r12, rdx
    SUB rsp, 8
    CALL _opendir
    TEST rax, rax
    JZ loc_4FF946
loc_4FF90D:
    MOV rbx, rax
    JMP loc_4FF924
loc_4FF918:
    MOV rdx, r12
    MOV rsi, rax
    MOV rdi, rbp
    CALL r13
loc_4FF924:
    MOV rdi, rbx
    CALL _readdir64
    TEST rax, rax
    JNZ loc_4FF918
loc_4FF931:
    MOV rdi, rbx
    CALL _closedir
    XOR eax, eax
loc_4FF93B:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4FF946:
    MOV eax, 0FFFFFFFFh
    JMP loc_4FF93B
```
{'input_parameter_count': 5, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x7346F0', '0x7346D0', '0x340', '0x360', '0x74'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parallel For Loop with Reduction', 'inferred_category': 'Parallel Processing'}

##### Q 139 - rm_main
```assembly
loc_4BB800:
    PUSH r13
    PUSH r12
    XOR eax, eax
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset aFirrv
    SUB rsp, 8
    CALL sub_4DFD70
    MOVSXD rdx, cs:optind
    MOV ebp, eax
    AND ebp, 1
    NEG ebp
    AND ebp, 8
    LEA rbx, [rbx+rdx*8]
    MOV edx, ebp
    OR edx, 10h
    TEST al, 2
    CMOVNZ ebp, edx
    MOV rdi, [rbx]
    MOV edx, ebp
    OR edx, 4
    TEST al, 0Ch
    CMOVNZ ebp, edx
    MOV edx, ebp
    OR dh, 10h
    TEST al, 10h
    CMOVNZ ebp, edx
    TEST rdi, rdi
    JZ loc_4BB8E0
loc_4BB85B:
    XOR r12d, r12d
    MOV r13d, 1
    JMP loc_4BB891
loc_4BB870:
    CMP dl, 2Eh
    JZ loc_4BB8D0
loc_4BB875:
    MOV rdi, [rbx]
    MOV esi, ebp
    CALL sub_4E9F60
    TEST eax, eax
    CMOVS r12d, r13d
    ADD rbx, 8
    MOV rdi, [rbx]
    TEST rdi, rdi
    JZ loc_4BB8C1
loc_4BB891:
    CALL sub_409AB0
    CMP byte ptr [rax], 2Eh
    JNZ loc_4BB875
loc_4BB89B:
    MOVZX edx, byte ptr [rax+1]
    TEST dl, dl
    JNZ loc_4BB870
loc_4BB8A3:
    MOV edi, offset aCanTRemoveOr
    XOR eax, eax
    ADD rbx, 8
    CALL sub_40A280
    MOV rdi, [rbx]
    MOV r12d, 1
    TEST rdi, rdi
    JNZ loc_4BB891
loc_4BB8C1:
    ADD rsp, 8
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4BB8D0:
    CMP byte ptr [rax+2], 0
    JNZ loc_4BB875
loc_4BB8D6:
    JMP loc_4BB8A3
loc_4BB8E0:
    AND ebp, 8
    JZ loc_4BB8F6
loc_4BB8E5:
    ADD rsp, 8
    XOR r12d, r12d
    POP rbx
    MOV eax, r12d
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4BB8F6:
    CALL sub_408E80
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x800', '0x4F8', '0x10101', '0xB', '0x108', '0x132', '0x22', '0x21', '0x23', '0x24', '0x2D', '0x6', '0x1', '0x100', '0x10', '0x33', '0x24', '0x1B', '0x90', '0x9C', '0x2A', '0xD10', '0xDA9', '0xDDE', '0xA91', '0xED2', '0x21F0', '0x1A5B0', '0x1A1F0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Image Processing/Image Manipulation'}

##### T 139 - rm_main
```assembly
loc_4F4E80:
    PUSH r13
    PUSH r12
    XOR eax, eax
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV rdi, rbx
    MOV esi, offset aFirrv
    SUB rsp, 8
    CALL sub_5291B0
    MOVSXD rdx, cs:optind
    LEA rbx, [rbx+rdx*8]
    MOV edx, eax
    AND edx, 1
    CMP edx, 1
    SBB r12d, r12d
    AND r12d, 0FFFFFFF8h
    ADD r12d, 1008h
    CMP edx, 1
    SBB edi, edi
    AND edi, 0FFFFFFF8h
    ADD edi, 100Ch
    CMP edx, 1
    SBB esi, esi
    AND esi, 0FFFFFFF8h
    ADD esi, 0Ch
    CMP edx, 1
    SBB r10d, r10d
    AND r10d, 0FFFFFFF8h
    ADD r10d, 1018h
    CMP edx, 1
    SBB r9d, r9d
    AND r9d, 0FFFFFFF8h
    ADD r9d, 101Ch
    CMP edx, 1
    SBB r8d, r8d
    AND r8d, 0FFFFFFF8h
    ADD r8d, 1Ch
    CMP edx, 1
    SBB ecx, ecx
    NEG edx
    AND ecx, 0FFFFFFF8h
    AND edx, 8
    ADD ecx, 18h
    TEST al, 2
    JZ loc_4F4FC0
loc_4F4F1E:
    MOV r12d, r10d
    MOV edi, r9d
    MOV esi, r8d
loc_4F4F27:
    MOV r8d, eax
    AND r8d, 0Ch
    CMOVNZ r12d, edi
    CMOVNZ ecx, esi
    TEST al, 10h
    CMOVZ r12d, ecx
    CMP qword ptr [rbx], 0
    JZ loc_4F4FD0
loc_4F4F45:
    XOR ebp, ebp
    MOV r13d, 1
    JMP loc_4F4F70
loc_4F4F50:
    CMP dl, 2Eh
    JZ loc_4F4FB0
loc_4F4F55:
    MOV rdi, [rbx]
    MOV esi, r12d
    CALL sub_5361A0
    TEST eax, eax
    CMOVS ebp, r13d
    ADD rbx, 8
    CMP qword ptr [rbx], 0
    JZ loc_4F4FA0
loc_4F4F70:
    MOV rdi, [rbx]
    CALL sub_40A460
    CMP byte ptr [rax], 2Eh
    JNZ loc_4F4F55
loc_4F4F7D:
    MOVZX edx, byte ptr [rax+1]
    TEST dl, dl
    JNZ loc_4F4F50
loc_4F4F85:
    XOR eax, eax
    MOV edi, offset aCanTRemoveOr
    ADD rbx, 8
    CALL sub_40AC80
    CMP qword ptr [rbx], 0
    MOV ebp, 1
    JNZ loc_4F4F70
loc_4F4FA0:
    ADD rsp, 8
    MOV eax, ebp
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4F4FB0:
    CMP byte ptr [rax+2], 0
    JNZ loc_4F4F55
loc_4F4FB6:
    JMP loc_4F4F85
loc_4F4FC0:
    MOV ecx, edx
    JMP loc_4F4F27
loc_4F4FD0:
    TEST edx, edx
    JZ loc_4F4FE3
loc_4F4FD4:
    ADD rsp, 8
    XOR ebp, ebp
    POP rbx
    MOV eax, ebp
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4F4FE3:
    CALL sub_409830
```
{'input_parameter_count': 3, 'input_parameter_types': ['Byte', 'Word', 'Pointer'], 'return_value_type': 'Byte', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['800', '132'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex'}

##### Q 140 - getopt32
```assembly
loc_4DFD70:
    SUB rsp, 0D8h
    TEST al, al
    MOV [rsp+0D8h+var_A8], rdx
    MOV [rsp+0D8h+var_A0], rcx
    MOV [rsp+0D8h+var_98], r8
    MOV [rsp+0D8h+var_90], r9
    JZ loc_4DFDC6
loc_4DFD8F:
    MOVAPS [rsp+0D8h+var_88], xmm0
    MOVAPS [rsp+0D8h+var_78], xmm1
    MOVAPS [rsp+0D8h+var_68], xmm2
    MOVAPS [rsp+0D8h+var_58], xmm3
    MOVAPS [rsp+0D8h+var_48], xmm4
    MOVAPS [rsp+0D8h+var_38], xmm5
    MOVAPS [rsp+0D8h+var_28], xmm6
    MOVAPS [rsp+0D8h+var_18], xmm7
loc_4DFDC6:
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_C0], rax
    XOR eax, eax
    LEA rax, [rsp+0D8h+arg_0]
    XOR edx, edx
    MOV rcx, rsp
    MOV [rsp+0D8h+var_D0], rax
    LEA rax, [rsp+0D8h+var_B8]
    MOV [rsp+0D8h+var_D8], 10h
    MOV [rsp+0D8h+var_D4], 30h
    MOV [rsp+0D8h+var_C8], rax
    CALL sub_4DF4C0
    MOV rdx, [rsp+0D8h+var_C0]
    XOR rdx, fs:28h
    JNZ loc_4DFE1E
loc_4DFE16:
    ADD rsp, 0D8h
    RETN 
loc_4DFE1E:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1000', '0x23F8', '0x3F8', '0x1C', '0x2018', '0x18', '0x795', '0x793', '0x796', '0x8000', '0x1', '0x8000h', '0x795h', '0x793h', '0x796h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ErrorHandling/MemoryManagement'}

##### T 140 - getopt32
```assembly
loc_5291B0:
    SUB rsp, 0D8h
    TEST al, al
    MOV [rsp+0D8h+var_A8], rdx
    MOV [rsp+0D8h+var_A0], rcx
    MOV [rsp+0D8h+var_98], r8
    MOV [rsp+0D8h+var_90], r9
    JZ loc_529206
loc_5291CF:
    MOVAPS [rsp+0D8h+var_88], xmm0
    MOVAPS [rsp+0D8h+var_78], xmm1
    MOVAPS [rsp+0D8h+var_68], xmm2
    MOVAPS [rsp+0D8h+var_58], xmm3
    MOVAPS [rsp+0D8h+var_48], xmm4
    MOVAPS [rsp+0D8h+var_38], xmm5
    MOVAPS [rsp+0D8h+var_28], xmm6
    MOVAPS [rsp+0D8h+var_18], xmm7
loc_529206:
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_C0], rax
    XOR eax, eax
    LEA rax, [rsp+0D8h+arg_0]
    MOV rdx, rsp
    MOV [rsp+0D8h+var_D0], rax
    LEA rax, [rsp+0D8h+var_B8]
    MOV [rsp+0D8h+var_D8], 10h
    MOV [rsp+0D8h+var_D4], 30h
    MOV [rsp+0D8h+var_C8], rax
    CALL sub_528AE0
    MOV rcx, [rsp+0D8h+var_C0]
    XOR rcx, fs:28h
    JNZ loc_52925C
loc_529254:
    ADD rsp, 0D8h
    RETN 
loc_52925C:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xABACADAB', '0x1000', '0x23F8', '0x3F8', '0x1C', '0x2028', '0x1028', '0x18', '0x795', '0x793', '0x796', '0x8000', '0x1', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy with Validation', 'inferred_category': 'Utility/Helper Function'}

##### Q 141 - crypt_make_salt
```assembly
loc_4E8FC0:
    PUSH r12
    PUSH rbp
    MOV ebp, esi
    PUSH rbx
    MOV rbx, rdi
    CALL _getpid
    MOV r12d, eax
    CALL sub_40C990
    LEA edx, [rbp-1]
    ADD eax, r12d
    MOV r8, rbx
    LEA r9, [rbx+rdx*2+2]
    MOV rsi, rdx
    NOP word ptr [rax+rax+00000000h]
loc_4E8FF0:
    IMUL eax, 19660Dh
    MOV ecx, 2Eh
    ADD eax, 3C6EF35Fh
    MOV edx, eax
    SHR edx, 10h
    AND edx, 3Fh
    JZ loc_4E9030
loc_4E900A:
    CMP edx, 1
    MOV ecx, 2Fh
    JZ loc_4E9030
loc_4E9014:
    CMP edx, 0Bh
    LEA ecx, [rdx+2Eh]
    JLE loc_4E9030
loc_4E901C:
    LEA edi, [rdx+35h]
    LEA ecx, [rdx+3Bh]
    CMP edx, 25h
    CMOVLE ecx, edi
    NOP dword ptr [rax+rax+00000000h]
loc_4E9030:
    MOV edx, eax
    MOV [r8], cl
    ADD r8, 2
    SHR edx, 16h
    MOV ecx, 2Eh
    AND edx, 3Fh
    JZ loc_4E9068
loc_4E9046:
    CMP edx, 1
    MOV ecx, 2Fh
    JZ loc_4E9068
loc_4E9050:
    CMP edx, 0Bh
    LEA ecx, [rdx+2Eh]
    JLE loc_4E9068
loc_4E9058:
    LEA edi, [rdx+35h]
    LEA ecx, [rdx+3Bh]
    CMP edx, 25h
    CMOVLE ecx, edi
    NOP dword ptr [rax+00h]
loc_4E9068:
    CMP r8, r9
    MOV [r8-1], cl
    JNZ loc_4E8FF0
loc_4E9075:
    MOV byte ptr [rbx+rsi*2+2], 0
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3C8', '0x3F8', '0x3D0', '0x1000', '0x1028', '0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Management'}

##### T 141 - crypt_make_salt
```assembly
loc_5347C0:
    PUSH r12
    PUSH rbp
    MOV ebp, esi
    PUSH rbx
    MOV rbx, rdi
    CALL _getpid
    MOV r12d, eax
    CALL sub_40E3D0
    LEA edx, [rbp-1]
    ADD eax, r12d
    MOV r8, rbx
    LEA r9, [rbx+rdx*2+2]
    MOV rsi, rdx
    NOP word ptr [rax+rax+00000000h]
loc_5347F0:
    IMUL eax, 19660Dh
    MOV ecx, 2Eh
    ADD eax, 3C6EF35Fh
    MOV edx, eax
    SHR edx, 10h
    AND edx, 3Fh
    JZ loc_534830
loc_53480A:
    CMP edx, 1
    MOV ecx, 2Fh
    JZ loc_534830
loc_534814:
    CMP edx, 0Bh
    LEA ecx, [rdx+2Eh]
    JLE loc_534830
loc_53481C:
    LEA edi, [rdx+35h]
    LEA ecx, [rdx+3Bh]
    CMP edx, 25h
    CMOVLE ecx, edi
    NOP dword ptr [rax+rax+00000000h]
loc_534830:
    MOV edx, eax
    MOV [r8], cl
    ADD r8, 2
    SHR edx, 16h
    MOV ecx, 2Eh
    AND edx, 3Fh
    JZ loc_534868
loc_534846:
    CMP edx, 1
    MOV ecx, 2Fh
    JZ loc_534868
loc_534850:
    CMP edx, 0Bh
    LEA ecx, [rdx+2Eh]
    JLE loc_534868
loc_534858:
    LEA edi, [rdx+35h]
    LEA ecx, [rdx+3Bh]
    CMP edx, 25h
    CMOVLE ecx, edi
    NOP dword ptr [rax+00h]
loc_534868:
    CMP r8, r9
    MOV [r8-1], cl
    JNZ loc_5347F0
loc_534875:
    MOV byte ptr [rbx+rsi*2+2], 0
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3C8', '0x3F8', '0x3D0', '0x1000', '0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 142 - get_quoting_style
```assembly
loc_4B4CF0:
    TEST rdi, rdi
    MOV eax, offset qword_7356E0
    CMOVZ rdi, rax
    MOV eax, [rdi]
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Comparison and Branching Loop', 'inferred_category': 'Control Flow'}

##### T 142 - get_quoting_style
```assembly
loc_4D20D0:
    TEST rdi, rdi
    MOV eax, offset qword_7586A0
    CMOVZ rdi, rax
    MOV eax, [rdi]
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Comparison', 'Jump'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Difference Calculation and Conditional Jump', 'inferred_category': 'Utility/Helper Function'}

##### Q 143 - ignorable_failure
```assembly
loc_468FB0:
    CMP cs:byte_730521, 0
    PUSH r12
    PUSH rbp
    PUSH rbx
    JZ loc_469060
loc_468FC1:
    CMP edi, 11h
    SETZ bl
    CMP edi, 27h
    SETZ al
    OR bl, al
    JNZ loc_469062
loc_468FD5:
    CMP edi, 1Eh
    JA loc_469060
loc_468FDE:
    MOV eax, 1
    MOV ecx, edi
    SHL rax, cl
    TEST eax, 40032002h
    JZ loc_469060
loc_468FEF:
    XOR eax, eax
    MOV edx, 30900h
    MOV edi, 0FFFFFF9Ch
    CALL _openat
    TEST eax, eax
    MOV ebx, eax
    JS loc_469060
loc_469006:
    MOV edi, ebx
    CALL _fdopendir
    TEST rax, rax
    MOV rbp, rax
    JZ loc_469083
loc_469015:
    CALL ___errno_location
    MOV r12, rax
    MOV dword ptr [rax], 0
    JMP loc_469044
loc_469028:
    XOR edx, edx
    CMP byte ptr [rax+14h], 2Eh
    SETZ dl
    MOVZX eax, byte ptr [rax+rdx+14h]
    TEST al, al
    SETZ bl
    CMP al, 2Fh
    SETZ al
    OR bl, al
    JZ loc_46908E
loc_469044:
    MOV rdi, rbp
    CALL _readdir
    TEST rax, rax
    JZ loc_469070
loc_469051:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_469028
loc_469057:
    MOV rdi, rbp
    CALL _closedir
    NOP 
loc_469060:
    XOR ebx, ebx
loc_469062:
    MOV eax, ebx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_469070:
    MOV ebx, [r12]
    MOV rdi, rbp
    CALL _closedir
    TEST ebx, ebx
    SETZ bl
    JMP loc_469062
loc_469083:
    MOV edi, ebx
    XOR ebx, ebx
    CALL _close
    JMP loc_469062
loc_46908E:
    MOV rdi, rbp
    CALL _closedir
    JMP loc_469062
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### T 143 - ignorable_failure
```assembly
loc_473D80:
    CMP cs:byte_753501, 0
    PUSH r12
    PUSH rbp
    PUSH rbx
    JZ loc_473E30
loc_473D91:
    CMP edi, 11h
    SETZ bl
    CMP edi, 27h
    SETZ al
    OR bl, al
    JNZ loc_473E32
loc_473DA5:
    CMP edi, 1Eh
    JA loc_473E30
loc_473DAE:
    MOV eax, 1
    MOV ecx, edi
    SHL rax, cl
    TEST eax, 40032002h
    JZ loc_473E30
loc_473DBF:
    XOR eax, eax
    MOV edx, 30900h
    MOV edi, 0FFFFFF9Ch
    CALL _openat
    TEST eax, eax
    MOV ebx, eax
    JS loc_473E30
loc_473DD6:
    MOV edi, ebx
    CALL _fdopendir
    TEST rax, rax
    MOV rbp, rax
    JZ loc_473E53
loc_473DE5:
    CALL ___errno_location
    MOV r12, rax
    MOV dword ptr [rax], 0
    JMP loc_473E14
loc_473DF8:
    XOR edx, edx
    CMP byte ptr [rax+14h], 2Eh
    SETZ dl
    MOVZX eax, byte ptr [rax+rdx+14h]
    TEST al, al
    SETZ bl
    CMP al, 2Fh
    SETZ al
    OR bl, al
    JZ loc_473E5E
loc_473E14:
    MOV rdi, rbp
    CALL _readdir
    TEST rax, rax
    JZ loc_473E40
loc_473E21:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_473DF8
loc_473E27:
    MOV rdi, rbp
    CALL _closedir
    NOP 
loc_473E30:
    XOR ebx, ebx
loc_473E32:
    MOV eax, ebx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_473E40:
    MOV ebx, [r12]
    MOV rdi, rbp
    CALL _closedir
    TEST ebx, ebx
    SETZ bl
    JMP loc_473E32
loc_473E53:
    MOV edi, ebx
    XOR ebx, ebx
    CALL _close
    JMP loc_473E32
loc_473E5E:
    MOV rdi, rbp
    CALL _closedir
    JMP loc_473E32
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ControlFlow'}

##### Q 144 - mbschr
```assembly
loc_4058E0:

loc_4AAAC0:
    PUSH r12
    PUSH rbp
    MOV r12, rdi
    PUSH rbx
    MOV ebx, esi
    SUB rsp, 50h
    MOV rax, fs:28h
    MOV [rsp+68h+var_20], rax
    XOR eax, eax
    CALL ___ctype_get_mb_cur_max
    CMP rax, 1
    JBE loc_4AAAF0
loc_4AAAE8:
    MOVZX ebp, bl
    CMP ebp, 2Fh
    JG loc_4AAB20
loc_4AAAF0:
    MOV rax, [rsp+68h+var_20]
    XOR rax, fs:28h
    JNZ loc_4AACEA
loc_4AAB04:
    ADD rsp, 50h
    MOV esi, ebx
    MOV rdi, r12
    POP rbx
    POP rbp
    POP r12
    JMP _strchr
loc_4AAB20:
    MOV [rsp+68h+s], r12
    MOV [rsp+68h+var_68], 0
    LEA r12, [rsp+68h+ps]
    MOV qword ptr [rsp+68h+ps.__count], 0
    MOV [rsp+68h+var_5C], 0
    JMP loc_4AABAA
loc_4AAB40:
    MOV rbx, [rsp+68h+s]
    MOVZX eax, byte ptr [rbx]
    MOV edx, eax
    AND eax, 1Fh
    SHR dl, 5
    AND edx, 7
    MOV edx, ds:dword_505620[rdx*4]
    BT edx, eax
    JNB loc_4AAC80
loc_4AAB63:
    MOV [rsp+68h+var_50], 1
    MOVSX eax, byte ptr [rbx]
    MOV [rsp+68h+var_48], 1
    MOV [rsp+68h+var_44], eax
loc_4AAB78:
    MOV eax, [rsp+68h+var_44]
    MOV [rsp+68h+var_5C], 1
    TEST eax, eax
    JZ loc_4AAC47
loc_4AAB89:
    MOV rbx, [rsp+68h+s]
loc_4AAB8E:
    MOV rax, [rsp+68h+var_50]
    CMP rax, 1
    JZ loc_4AAC70
loc_4AAB9D:
    ADD rax, rbx
    MOV [rsp+68h+var_5C], 0
    MOV [rsp+68h+s], rax
loc_4AABAA:
    CMP [rsp+68h+var_68], 0
    JZ loc_4AAB40
loc_4AABB0:
    CALL ___ctype_get_mb_cur_max
    MOV rbx, [rsp+68h+s]
    MOV rsi, rax
    MOV rdi, rbx
    CALL sub_4B7FC0
    LEA rcx, [rsp+68h+ps]
    LEA rdi, [rsp+68h+var_44]
    MOV rdx, rax
    MOV rsi, rbx
    CALL sub_4C09A0
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV [rsp+68h+var_50], rax
    JZ loc_4AAC98
loc_4AABE9:
    CMP rax, 0FFFFFFFFFFFFFFFEh
    JZ loc_4AACB8
loc_4AABF3:
    TEST rax, rax
    JNZ loc_4AAC1B
loc_4AABF8:
    MOV rbx, [rsp+68h+s]
    MOV [rsp+68h+var_50], 1
    CMP byte ptr [rbx], 0
    JNZ loc_4AACEF
loc_4AAC0F:
    MOV edx, [rsp+68h+var_44]
    TEST edx, edx
    JNZ loc_4AAD08
loc_4AAC1B:
    LEA rdi, [rsp+68h+ps]
    MOV [rsp+68h+var_48], 1
    CALL _mbsinit
    TEST eax, eax
    JZ loc_4AAB78
loc_4AAC32:
    MOV eax, [rsp+68h+var_44]
    MOV [rsp+68h+var_68], 0
    MOV [rsp+68h+var_5C], 1
    TEST eax, eax
    JNZ loc_4AAB89
loc_4AAC47:
    XOR eax, eax
loc_4AAC49:
    MOV rsi, [rsp+68h+var_20]
    XOR rsi, fs:28h
    JNZ loc_4AACEA
loc_4AAC5D:
    ADD rsp, 50h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4AAC70:
    MOVZX edx, byte ptr [rbx]
    CMP ebp, edx
    JNZ loc_4AAB9D
loc_4AAC7B:
    MOV rax, rbx
    JMP loc_4AAC49
loc_4AAC80:
    MOV rdi, r12
    CALL _mbsinit
    TEST eax, eax
    JZ loc_4AACD1
loc_4AAC8C:
    MOV [rsp+68h+var_68], 1
    JMP loc_4AABB0
loc_4AAC98:
    MOV rbx, [rsp+68h+s]
    MOV [rsp+68h+var_50], 1
    MOV [rsp+68h+var_48], 0
loc_4AACAB:
    MOV [rsp+68h+var_5C], 1
    JMP loc_4AAB8E
loc_4AACB8:
    MOV rbx, [rsp+68h+s]
    MOV rdi, rbx
    CALL _strlen
    MOV [rsp+68h+var_48], 0
    MOV [rsp+68h+var_50], rax
    JMP loc_4AACAB
loc_4AACD1:
    MOV ecx, offset aMbuiterMultiNe_2
    MOV edx, 96h
    MOV esi, (offset aLibMbuiterH+2)
    MOV edi, offset aMbsinitIterSta
    CALL ___assert_fail
loc_4AACEA:
    CALL ___stack_chk_fail
loc_4AACEF:
    MOV ecx, offset aMbuiterMultiNe_2
    MOV edx, 0B2h
    MOV esi, (offset aLibMbuiterH+2)
    MOV edi, offset aIterCurPtr0
    CALL ___assert_fail
loc_4AAD08:
    MOV ecx, offset aMbuiterMultiNe_2
    MOV edx, 0B3h
    MOV esi, (offset aLibMbuiterH+2)
    MOV edi, offset aIterCurWc0
    CALL ___assert_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7E', '0xFFFFFF80', '0x1', '0x6', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation', 'inferred_category': 'Utility Function'}

##### T 144 - mbschr
```assembly
loc_4058E0:

loc_4C6F10:
    PUSH r12
    PUSH rbp
    MOV r12d, esi
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 50h
    MOV rax, fs:28h
    MOV [rsp+68h+var_20], rax
    XOR eax, eax
    CALL ___ctype_get_mb_cur_max
    CMP rax, 1
    JBE loc_4C6F42
loc_4C6F39:
    MOVZX ebp, r12b
    CMP ebp, 2Fh
    JG loc_4C6F70
loc_4C6F42:
    MOV rax, [rsp+68h+var_20]
    XOR rax, fs:28h
    JNZ loc_4C713A
loc_4C6F56:
    ADD rsp, 50h
    MOV esi, r12d
    MOV rdi, rbx
    POP rbx
    POP rbp
    POP r12
    JMP _strchr
loc_4C6F70:
    MOV [rsp+68h+s], rbx
    MOV [rsp+68h+var_68], 0
    MOV rdi, rbx
    MOV qword ptr [rsp+68h+ps.__count], 0
    MOV [rsp+68h+var_5C], 0
    LEA r12, [rsp+68h+ps]
    JMP loc_4C6FFD
loc_4C6F98:
    MOVZX eax, byte ptr [rdi]
    MOV edx, eax
    AND eax, 1Fh
    SHR dl, 5
    AND edx, 7
    MOV edx, ds:dword_529CE0[rdx*4]
    BT edx, eax
    JNB loc_4C70D0
loc_4C6FB6:
    MOV [rsp+68h+var_50], 1
    MOVSX eax, byte ptr [rdi]
    MOV [rsp+68h+var_48], 1
    MOV [rsp+68h+var_44], eax
loc_4C6FCB:
    MOV eax, [rsp+68h+var_44]
    MOV [rsp+68h+var_5C], 1
    TEST eax, eax
    JZ loc_4C709A
loc_4C6FDC:
    MOV rbx, [rsp+68h+s]
loc_4C6FE1:
    MOV rdi, [rsp+68h+var_50]
    CMP rdi, 1
    JZ loc_4C70C0
loc_4C6FF0:
    ADD rdi, rbx
    MOV [rsp+68h+var_5C], 0
    MOV [rsp+68h+s], rdi
loc_4C6FFD:
    CMP [rsp+68h+var_68], 0
    JZ loc_4C6F98
loc_4C7003:
    CALL ___ctype_get_mb_cur_max
    MOV rbx, [rsp+68h+s]
    MOV rsi, rax
    MOV rdi, rbx
    CALL sub_4D7DB0
    LEA rcx, [rsp+68h+ps]
    LEA rdi, [rsp+68h+var_44]
    MOV rdx, rax
    MOV rsi, rbx
    CALL sub_4E33F0
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV [rsp+68h+var_50], rax
    JZ loc_4C70E8
loc_4C703C:
    CMP rax, 0FFFFFFFFFFFFFFFEh
    JZ loc_4C7108
loc_4C7046:
    TEST rax, rax
    JNZ loc_4C706E
loc_4C704B:
    MOV rbx, [rsp+68h+s]
    MOV [rsp+68h+var_50], 1
    CMP byte ptr [rbx], 0
    JNZ loc_4C713F
loc_4C7062:
    MOV edx, [rsp+68h+var_44]
    TEST edx, edx
    JNZ loc_4C7158
loc_4C706E:
    LEA rdi, [rsp+68h+ps]
    MOV [rsp+68h+var_48], 1
    CALL _mbsinit
    TEST eax, eax
    JZ loc_4C6FCB
loc_4C7085:
    MOV eax, [rsp+68h+var_44]
    MOV [rsp+68h+var_68], 0
    MOV [rsp+68h+var_5C], 1
    TEST eax, eax
    JNZ loc_4C6FDC
loc_4C709A:
    XOR eax, eax
loc_4C709C:
    MOV rsi, [rsp+68h+var_20]
    XOR rsi, fs:28h
    JNZ loc_4C713A
loc_4C70B0:
    ADD rsp, 50h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4C70C0:
    MOVZX eax, byte ptr [rbx]
    CMP ebp, eax
    JNZ loc_4C6FF0
loc_4C70CB:
    MOV rax, rbx
    JMP loc_4C709C
loc_4C70D0:
    MOV rdi, r12
    CALL _mbsinit
    TEST eax, eax
    JZ loc_4C7121
loc_4C70DC:
    MOV [rsp+68h+var_68], 1
    JMP loc_4C7003
loc_4C70E8:
    MOV rbx, [rsp+68h+s]
    MOV [rsp+68h+var_50], 1
    MOV [rsp+68h+var_48], 0
loc_4C70FB:
    MOV [rsp+68h+var_5C], 1
    JMP loc_4C6FE1
loc_4C7108:
    MOV rbx, [rsp+68h+s]
    MOV rdi, rbx
    CALL _strlen
    MOV [rsp+68h+var_48], 0
    MOV [rsp+68h+var_50], rax
    JMP loc_4C70FB
loc_4C7121:
    MOV ecx, offset aMbuiterMultiNe_2
    MOV edx, 96h
    MOV esi, (offset aLibMbuiterH+2)
    MOV edi, offset aMbsinitIterSta
    CALL ___assert_fail
loc_4C713A:
    CALL ___stack_chk_fail
loc_4C713F:
    MOV ecx, offset aMbuiterMultiNe_2
    MOV edx, 0B2h
    MOV esi, (offset aLibMbuiterH+2)
    MOV edi, offset aIterCurPtr0
    CALL ___assert_fail
loc_4C7158:
    MOV ecx, offset aMbuiterMultiNe_2
    MOV edx, 0B3h
    MOV esi, (offset aLibMbuiterH+2)
    MOV edi, offset aIterCurWc0
    CALL ___assert_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20', '0x40', '0xFFFFFF80'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bitwise Manipulation and Data Conversion', 'inferred_category': 'Utility/Helper'}

##### Q 145 - fopen_safer
```assembly
loc_4A4990:
    PUSH r12
    PUSH rbp
    MOV r12, rsi
    PUSH rbx
    XOR ebx, ebx
    CALL _fopen
    TEST rax, rax
    JZ loc_4A49B6
loc_4A49A3:
    MOV rdi, rax
    MOV rbp, rax
    CALL _fileno
    CMP eax, 2
    MOV rbx, rbp
    JBE loc_4A49C0
loc_4A49B6:
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4A49C0:
    MOV edi, eax
    CALL sub_4B93C0
    TEST eax, eax
    MOV ebp, eax
    JS loc_4A4A18
loc_4A49CD:
    MOV rdi, rbx
    CALL sub_4BE090
    TEST eax, eax
    JNZ loc_4A49F8
loc_4A49D9:
    MOV rsi, r12
    MOV edi, ebp
    CALL _fdopen
    TEST rax, rax
    JZ loc_4A49F8
loc_4A49E8:
    MOV rbx, rax
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4A49F8:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbx, rax
    MOV edi, ebp
    CALL _close
    MOV [rbx], r12d
    XOR ebx, ebx
    JMP loc_4A49B6
loc_4A4A18:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbp, rax
    MOV rdi, rbx
    CALL sub_4BE090
    XOR ebx, ebx
    MOV [rbp+0], r12d
    JMP loc_4A49B6
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['Comparison', 'LogicalOperation', 'Return'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 145 - fopen_safer
```assembly
loc_4BFFB0:
    PUSH r12
    PUSH rbp
    MOV r12, rsi
    PUSH rbx
    XOR ebx, ebx
    CALL _fopen
    TEST rax, rax
    JZ loc_4BFFD6
loc_4BFFC3:
    MOV rdi, rax
    MOV rbp, rax
    CALL _fileno
    CMP eax, 2
    MOV rbx, rbp
    JBE loc_4BFFE0
loc_4BFFD6:
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4BFFE0:
    MOV edi, eax
    CALL sub_4D95C0
    TEST eax, eax
    MOV ebp, eax
    JS loc_4C0038
loc_4BFFED:
    MOV rdi, rbx
    CALL sub_4E0210
    TEST eax, eax
    JNZ loc_4C0018
loc_4BFFF9:
    MOV rsi, r12
    MOV edi, ebp
    CALL _fdopen
    TEST rax, rax
    JZ loc_4C0018
loc_4C0008:
    MOV rbx, rax
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4C0018:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbx, rax
    MOV edi, ebp
    CALL _close
    MOV [rbx], r12d
    XOR ebx, ebx
    JMP loc_4BFFD6
loc_4C0038:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbp, rax
    MOV rdi, rbx
    CALL sub_4E0210
    XOR ebx, ebx
    MOV [rbp+0], r12d
    JMP loc_4BFFD6
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['Comparison', 'LogicalOperation', 'Return'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Boolean Check', 'inferred_category': 'Utility/Helper'}

##### Q 146 - sparse_copy
```assembly
loc_4243E0:

loc_4244A0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 78h
    MOV rax, [rsp+0A8h+arg_0]
    MOV [rsp+0A8h+var_48], rax
    MOV rax, [rsp+0A8h+arg_8]
    MOV [rsp+0A8h+var_98], rax
    MOV rax, [rsp+0A8h+arg_10]
    MOV rbx, rax
    MOV [rsp+0A8h+var_78], rax
    MOV rax, [rsp+0A8h+arg_18]
    TEST rbx, rbx
    MOV r11, rax
    MOV [rsp+0A8h+var_60], rax
    MOV rax, [rsp+0A8h+arg_20]
    MOV byte ptr [rax], 0
    MOV [rsp+0A8h+var_50], rax
    MOV qword ptr [r11], 0
    JZ loc_4248A6
loc_424508:
    TEST r8, r8
    MOV [rsp+0A8h+fd], edi
    MOV rdi, r8
    CMOVZ rdi, rcx
    MOVZX eax, r9b
    MOV [rsp+0A8h+var_3C], r9d
    MOV [rsp+0A8h+var_58], r8
    MOV [rsp+0A8h+nbytes], rcx
    XOR r12d, r12d
    MOV [rsp+0A8h+buf], rdx
    MOV [rsp+0A8h+var_90], esi
    XOR r15d, r15d
    MOV [rsp+0A8h+var_68], rdi
    MOV [rsp+0A8h+var_8C], eax
loc_424541:
    MOV rdi, [rsp+0A8h+nbytes]
    MOV rax, [rsp+0A8h+var_78]
    MOV rsi, [rsp+0A8h+buf]
    CMP rdi, rax
    MOV rdx, rax
    CMOVBE rdx, rdi
    MOV edi, [rsp+0A8h+fd]
    CALL _read
    TEST rax, rax
    MOV [rsp+0A8h+var_80], rax
    JS loc_424778
loc_424571:
    JZ loc_42487D
loc_424577:
    MOV rdi, [rsp+0A8h+var_60]
    MOV rax, [rsp+0A8h+var_80]
    MOV ecx, r15d
    MOV r13, [rsp+0A8h+buf]
    MOV rbx, [rsp+0A8h+var_68]
    ADD [rdi], rax
    CMP [rsp+0A8h+var_58], 0
    MOV rbp, rax
    MOV r8, r13
    MOV r14, r13
    SETNZ [rsp+0A8h+var_A5]
    JMP loc_424661
loc_4245B0:
    MOV rsi, r14
    MOV rdx, rbx
loc_4245B6:
    CMP byte ptr [rsi], 0
    JNZ loc_424818
loc_4245BF:
    ADD rsi, 1
    SUB rdx, 1
    JZ loc_4246C8
loc_4245CD:
    TEST dl, 0Fh
    JNZ loc_4245B6
loc_4245D2:
    MOV rdi, r14
    MOV [rsp+0A8h+var_A0], r8
    MOV byte ptr [rsp+0A8h+var_A4], cl
    CALL _memcmp
    MOVZX ecx, byte ptr [rsp+0A8h+var_A4]
    TEST eax, eax
    MOV r8, [rsp+0A8h+var_A0]
    SETZ r13b
    MOV r10d, r13d
    XOR r10d, ecx
    TEST r12, r12
    SETNZ al
    MOV r15d, r10d
    AND r15d, eax
loc_424605:
    CMP rbp, rbx
    SETZ al
    CMP r13b, al
    JNB loc_4246E1
loc_424614:
    XOR r13d, r13d
    TEST r15b, r15b
    MOV [rsp+0A8h+var_A4], 1
    JZ loc_424689
loc_424624:
    TEST cl, cl
    JNZ loc_42469B
loc_424628:
    MOV edi, [rsp+0A8h+var_90]
    MOV rdx, r12
    MOV rsi, r8
    CALL sub_4A69C0
    CMP r12, rax
    JNZ loc_42482D
loc_424640:
    MOV eax, [rsp+0A8h+var_A4]
    MOV r12, rbx
    TEST eax, eax
    JNZ loc_424710
loc_42464F:
    MOV ecx, r13d
    MOV r8, r14
loc_424655:
    ADD r14, rbx
    SUB rbp, rbx
    JZ loc_424715
loc_424661:
    CMP rbx, rbp
    CMOVA rbx, rbp
    TEST rbx, rbx
    SETNZ al
    TEST [rsp+0A8h+var_A5], al
    JNZ loc_4245B0
loc_424678:
    CMP rbp, rbx
    SETZ al
    XOR r13d, r13d
    CMP al, cl
    JBE loc_424740
loc_424689:
    ADD r12, rbx
    XOR r15d, r15d
    TEST cl, cl
    MOV [rsp+0A8h+var_A4], 1
    JZ loc_424628
loc_42469B:
    MOV edx, [rsp+0A8h+var_8C]
    MOV rsi, [rsp+0A8h+var_98]
    MOV rcx, r12
    MOV edi, [rsp+0A8h+var_90]
    CALL sub_4243E0
    TEST al, al
    JNZ loc_424640
loc_4246B4:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4246C8:
    MOV r10d, ecx
    MOV r13d, 1
    XOR r10d, 1
    TEST r12, r12
    SETNZ al
    AND r10d, eax
    MOV r15d, r10d
loc_4246E1:
    TEST r15b, r15b
    JNZ loc_4248B0
loc_4246EA:
    MOV rax, 7FFFFFFFFFFFFFFFh
    SUB rax, rbx
    CMP rax, r12
    JB loc_4247D0
loc_424700:
    ADD r12, rbx
    MOV ecx, r13d
    JMP loc_424655
loc_424710:
    TEST rbx, rbx
    JNZ loc_424750
loc_424715:
    MOV rdi, [rsp+0A8h+var_80]
    SUB [rsp+0A8h+var_78], rdi
    MOV r14d, r13d
    MOV rax, [rsp+0A8h+var_50]
    MOV [rax], r13b
    JZ loc_42487A
loc_424730:
    MOV r15d, r14d
    JMP loc_424541
loc_424740:
    TEST rbx, rbx
    MOV r13d, ecx
    JZ loc_424689
loc_42474C:
    JMP loc_4246EA
loc_424750:
    TEST r15b, r15b
    MOV r12d, 0
    MOV eax, 0
    CMOVNZ r12, rbx
    MOV ecx, r13d
    MOV r8, r14
    CMOVNZ rbx, rax
    JMP loc_424655
loc_424778:
    CALL ___errno_location
    CMP dword ptr [rax], 4
    JNZ loc_424787
loc_424782:
    MOV r14d, r15d
    JMP loc_424730
loc_424787:
    MOV rsi, [rsp+0A8h+var_48]
    MOV edi, 4
    MOV rbx, rax
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aErrorReadingS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rcx, rbp
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    ADD rsp, 78h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4247D0:
    MOV rsi, [rsp+0A8h+var_48]
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aOverflowReadin
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    XOR edi, edi
    CALL _error
    ADD rsp, 78h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_424818:
    TEST r12, r12
    SETNZ r10b
    XOR r13d, r13d
    MOV r15d, r10d
    AND r15d, ecx
    JMP loc_424605
loc_42482D:
    MOV rsi, [rsp+0A8h+var_98]
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aErrorWritingS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    XOR eax, eax
    XOR edi, edi
    CALL _error
    ADD rsp, 78h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42487A:
    MOV r15d, r13d
loc_42487D:
    TEST r15b, r15b
    JZ loc_4248A6
loc_424882:
    MOVZX edx, byte ptr [rsp+0A8h+var_3C]
    MOV rsi, [rsp+0A8h+var_98]
    MOV rcx, r12
    MOV edi, [rsp+0A8h+var_90]
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    JMP sub_4243E0
loc_4248A6:
    MOV eax, 1
    JMP loc_4246B4
loc_4248B0:
    MOV [rsp+0A8h+var_A4], 0
    JMP loc_424624
```
{'input_parameter_count': 4, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 146 - sparse_copy
```assembly
loc_426810:

loc_426910:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 78h
    MOV rax, [rsp+0A8h+arg_0]
    MOV [rsp+0A8h+var_48], rax
    MOV rax, [rsp+0A8h+arg_8]
    MOV [rsp+0A8h+var_98], rax
    MOV rax, [rsp+0A8h+arg_10]
    MOV rbx, rax
    MOV [rsp+0A8h+var_78], rax
    MOV rax, [rsp+0A8h+arg_18]
    TEST rbx, rbx
    MOV r11, rax
    MOV [rsp+0A8h+var_60], rax
    MOV rax, [rsp+0A8h+arg_20]
    MOV byte ptr [rax], 0
    MOV [rsp+0A8h+var_50], rax
    MOV qword ptr [r11], 0
    JZ loc_426D16
loc_426978:
    TEST r8, r8
    MOV [rsp+0A8h+fd], edi
    MOV rdi, r8
    CMOVZ rdi, rcx
    MOVZX eax, r9b
    MOV [rsp+0A8h+var_90], esi
    MOV [rsp+0A8h+var_68], rdi
    MOV [rsp+0A8h+var_8C], eax
    XOR r12d, r12d
    MOV [rsp+0A8h+var_3C], r9d
    MOV [rsp+0A8h+var_58], r8
    XOR r15d, r15d
    MOV [rsp+0A8h+var_70], rcx
    MOV [rsp+0A8h+s1], rdx
    MOV rdi, rcx
    MOV rax, rbx
    MOV rsi, rdx
loc_4269BA:
    CMP rdi, rax
    MOV rdx, rax
    CMOVBE rdx, rdi
    MOV edi, [rsp+0A8h+fd]
    CALL _read
    TEST rax, rax
    MOV [rsp+0A8h+var_80], rax
    JS loc_426BE8
loc_4269DB:
    JZ loc_426CED
loc_4269E1:
    MOV rdi, [rsp+0A8h+var_60]
    MOV r13, [rsp+0A8h+s1]
    MOV rbp, rax
    MOV rbx, [rsp+0A8h+var_68]
    MOV ecx, r15d
    ADD [rdi], rax
    CMP [rsp+0A8h+var_58], 0
    MOV r8, r13
    MOV r14, r13
    SETNZ [rsp+0A8h+var_A5]
    JMP loc_426AC1
loc_426A10:
    MOV rsi, r14
    MOV rdx, rbx
loc_426A16:
    CMP byte ptr [rsi], 0
    JNZ loc_426C88
loc_426A1F:
    ADD rsi, 1
    SUB rdx, 1
    JZ loc_426B28
loc_426A2D:
    TEST dl, 0Fh
    JNZ loc_426A16
loc_426A32:
    MOV rdi, r14
    MOV [rsp+0A8h+buf], r8
    MOV byte ptr [rsp+0A8h+var_A4], cl
    CALL _memcmp
    MOVZX ecx, byte ptr [rsp+0A8h+var_A4]
    TEST eax, eax
    MOV r8, [rsp+0A8h+buf]
    SETZ r13b
    MOV r10d, r13d
    XOR r10d, ecx
    TEST r12, r12
    SETNZ al
    MOV r15d, r10d
    AND r15d, eax
loc_426A65:
    CMP rbp, rbx
    SETZ al
    CMP r13b, al
    JNB loc_426B41
loc_426A74:
    XOR r13d, r13d
    TEST r15b, r15b
    MOV [rsp+0A8h+var_A4], 1
    JZ loc_426AE9
loc_426A84:
    TEST cl, cl
    JNZ loc_426AFB
loc_426A88:
    MOV edi, [rsp+0A8h+var_90]
    MOV rdx, r12
    MOV rsi, r8
    CALL sub_4C2110
    CMP r12, rax
    JNZ loc_426C9D
loc_426AA0:
    MOV eax, [rsp+0A8h+var_A4]
    MOV r12, rbx
    TEST eax, eax
    JNZ loc_426B70
loc_426AAF:
    MOV ecx, r13d
    MOV r8, r14
loc_426AB5:
    ADD r14, rbx
    SUB rbp, rbx
    JZ loc_426B75
loc_426AC1:
    CMP rbx, rbp
    CMOVA rbx, rbp
    TEST rbx, rbx
    SETNZ al
    TEST [rsp+0A8h+var_A5], al
    JNZ loc_426A10
loc_426AD8:
    CMP rbp, rbx
    SETZ al
    XOR r13d, r13d
    CMP cl, al
    JNB loc_426BB0
loc_426AE9:
    ADD r12, rbx
    XOR r15d, r15d
    TEST cl, cl
    MOV [rsp+0A8h+var_A4], 1
    JZ loc_426A88
loc_426AFB:
    MOV edx, [rsp+0A8h+var_8C]
    MOV rsi, [rsp+0A8h+var_98]
    MOV rcx, r12
    MOV edi, [rsp+0A8h+var_90]
    CALL sub_426810
    TEST al, al
    JNZ loc_426AA0
loc_426B14:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_426B28:
    MOV r10d, ecx
    MOV r13d, 1
    XOR r10d, 1
    TEST r12, r12
    SETNZ al
    AND r10d, eax
    MOV r15d, r10d
loc_426B41:
    TEST r15b, r15b
    JNZ loc_426D20
loc_426B4A:
    MOV rax, 7FFFFFFFFFFFFFFFh
    SUB rax, rbx
    CMP rax, r12
    JB loc_426C40
loc_426B60:
    ADD r12, rbx
    MOV ecx, r13d
    JMP loc_426AB5
loc_426B70:
    TEST rbx, rbx
    JNZ loc_426BC0
loc_426B75:
    MOV rdi, [rsp+0A8h+var_80]
    SUB [rsp+0A8h+var_78], rdi
    MOV r14d, r13d
    MOV rax, [rsp+0A8h+var_50]
    MOV [rax], r13b
    JZ loc_426CEA
loc_426B90:
    MOV r15d, r14d
    MOV rdi, [rsp+0A8h+var_70]
    MOV rax, [rsp+0A8h+var_78]
    MOV rsi, [rsp+0A8h+s1]
    JMP loc_4269BA
loc_426BB0:
    TEST rbx, rbx
    MOV r13d, ecx
    JZ loc_426AE9
loc_426BBC:
    JMP loc_426B4A
loc_426BC0:
    TEST r15b, r15b
    MOV r12d, 0
    MOV eax, 0
    CMOVNZ r12, rbx
    MOV ecx, r13d
    MOV r8, r14
    CMOVNZ rbx, rax
    JMP loc_426AB5
loc_426BE8:
    CALL ___errno_location
    CMP dword ptr [rax], 4
    JNZ loc_426BF7
loc_426BF2:
    MOV r14d, r15d
    JMP loc_426B90
loc_426BF7:
    MOV rsi, [rsp+0A8h+var_48]
    MOV edi, 4
    MOV rbx, rax
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aErrorReadingS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rcx, rbp
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    ADD rsp, 78h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_426C40:
    MOV rsi, [rsp+0A8h+var_48]
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aOverflowReadin
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    XOR edi, edi
    CALL _error
    ADD rsp, 78h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_426C88:
    TEST r12, r12
    SETNZ r10b
    XOR r13d, r13d
    MOV r15d, r10d
    AND r15d, ecx
    JMP loc_426A65
loc_426C9D:
    MOV rsi, [rsp+0A8h+var_98]
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aErrorWritingS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    XOR eax, eax
    XOR edi, edi
    CALL _error
    ADD rsp, 78h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_426CEA:
    MOV r15d, r13d
loc_426CED:
    TEST r15b, r15b
    JZ loc_426D16
loc_426CF2:
    MOVZX edx, byte ptr [rsp+0A8h+var_3C]
    MOV rsi, [rsp+0A8h+var_98]
    MOV rcx, r12
    MOV edi, [rsp+0A8h+var_90]
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    JMP sub_426810
loc_426D16:
    MOV eax, 1
    JMP loc_426B14
loc_426D20:
    MOV [rsp+0A8h+var_A4], 0
    JMP loc_426A84
```
{'input_parameter_count': 4, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Function Call Wrapper'}

##### Q 147 - skip_read
```assembly
loc_45F010:
    PUSH r14
    PUSH r13
    MOV r13, rdi
    PUSH r12
    PUSH rbp
    MOV ebp, esi
    PUSH rbx
    MOV rbx, [rdi]
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_45F1D1
loc_45F02E:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX r14d, byte ptr [rax]
loc_45F03A:
    CMP r14d, 0Ch
    JZ loc_45F088
loc_45F040:
    MOV byte ptr [r13+39h], 0
loc_45F045:
    XOR r12d, r12d
    CMP cs:byte_72FC70, 0
    JNZ loc_45F0D2
loc_45F055:
    CMP r14d, 0Ah
    JNZ loc_45F0E3
loc_45F05F:
    NOP 
loc_45F060:
    CMP cs:byte_71FF90, 0
    JZ loc_45F07B
loc_45F069:
    CMP ebp, 1
    SETZ al
    CMP cs:byte_72FD2F, al
    JBE loc_45F128
loc_45F07B:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_45F088:
    CMP byte ptr [r13+39h], 0
    JZ loc_45F0BF
loc_45F08F:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_45F20E
loc_45F09D:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX eax, byte ptr [rax]
loc_45F0A8:
    CMP eax, 0Ah
    JZ loc_45F1E8
loc_45F0B1:
    CMP eax, 0Ch
    MOV byte ptr [r13+39h], 0
    JNZ loc_45F228
loc_45F0BF:
    CMP cs:byte_72FC70, 0
    MOV r12d, 1
    JZ loc_45F19D
loc_45F0D2:
    CMP r14d, 0Ah
    MOV byte ptr [r13+39h], 1
    JZ loc_45F060
loc_45F0DD:
    CMP r14d, 0Ch
    JZ loc_45F158
loc_45F0E3:
    CMP r14d, 0FFFFFFFFh
    JNZ loc_45F10E
loc_45F0E9:
    JMP loc_45F148
loc_45F0F0:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX eax, byte ptr [rax]
loc_45F0FB:
    CMP eax, 0Ah
    JZ loc_45F060
loc_45F104:
    CMP eax, 0Ch
    JZ loc_45F158
loc_45F109:
    CMP eax, 0FFFFFFFFh
    JZ loc_45F148
loc_45F10E:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JB loc_45F0F0
loc_45F118:
    MOV rdi, rbx
    CALL ___uflow
    JMP loc_45F0FB
loc_45F128:
    TEST r12b, r12b
    JNZ loc_45F07B
loc_45F131:
    POP rbx
    ADD cs:dword_71FF94, 1
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_45F148:
    MOV rdi, r13
    CALL sub_45E4D0
    JMP loc_45F060
loc_45F158:
    MOVZX eax, cs:byte_72FC70
    TEST al, al
    JZ loc_45F19D
loc_45F163:
    CMP cs:byte_72FD2F, 0
    JNZ loc_45F1E1
loc_45F16C:
    MOV edx, cs:dword_71FFA8
    MOV rax, cs:qword_72FD58
    TEST edx, edx
    JZ loc_45F19D
loc_45F17D:
    SUB edx, 1
    ADD rdx, 1
    SHL rdx, 6
    ADD rdx, rax
    NOP dword ptr [rax+rax+00h]
loc_45F190:
    MOV byte ptr [rax+39h], 0
    ADD rax, 40h
    CMP rdx, rax
    JNZ loc_45F190
loc_45F19D:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_45F202
loc_45F1A7:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX edi, byte ptr [rax]
loc_45F1B2:
    CMP edi, 0Ah
    JZ loc_45F1BF
loc_45F1B7:
    MOV rsi, rbx
    CALL _ungetc
loc_45F1BF:
    LEA rsi, [r13+30h]
    LEA rdi, [r13+10h]
    CALL sub_45EFA0
    JMP loc_45F060
loc_45F1D1:
    MOV rdi, rbx
    CALL ___uflow
    MOV r14d, eax
    JMP loc_45F03A
loc_45F1E1:
    MOV byte ptr [r13+39h], 0
    JMP loc_45F19D
loc_45F1E8:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_45F21B
loc_45F1F2:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX eax, byte ptr [rax]
    JMP loc_45F0B1
loc_45F202:
    MOV rdi, rbx
    CALL ___uflow
    MOV edi, eax
    JMP loc_45F1B2
loc_45F20E:
    MOV rdi, rbx
    CALL ___uflow
    JMP loc_45F0A8
loc_45F21B:
    MOV rdi, rbx
    CALL ___uflow
    JMP loc_45F0B1
loc_45F228:
    MOV r14d, eax
    JMP loc_45F045
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 147 - skip_read
```assembly
loc_468450:
    PUSH r14
    PUSH r13
    MOV r13, rdi
    PUSH r12
    PUSH rbp
    MOV ebp, esi
    PUSH rbx
    MOV rbx, [rdi]
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_46866C
loc_46846E:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX r14d, byte ptr [rax]
loc_46847A:
    CMP r14d, 0Ch
    JZ loc_4684C8
loc_468480:
    MOV byte ptr [r13+39h], 0
loc_468485:
    XOR r12d, r12d
    CMP cs:byte_752C50, 0
    JNZ loc_468512
loc_468495:
    CMP r14d, 0Ah
    JNZ loc_468523
loc_46849F:
    NOP 
loc_4684A0:
    CMP cs:byte_742F90, 0
    JZ loc_4684BB
loc_4684A9:
    CMP ebp, 1
    SETZ al
    CMP cs:byte_752D0F, al
    JBE loc_468568
loc_4684BB:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4684C8:
    CMP byte ptr [r13+39h], 0
    JZ loc_4684FF
loc_4684CF:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_4686AF
loc_4684DD:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX eax, byte ptr [rax]
loc_4684E8:
    CMP eax, 0Ah
    JZ loc_468686
loc_4684F1:
    CMP eax, 0Ch
    MOV byte ptr [r13+39h], 0
    JNZ loc_4686C9
loc_4684FF:
    CMP cs:byte_752C50, 0
    MOV r12d, 1
    JZ loc_4685DD
loc_468512:
    CMP r14d, 0Ah
    MOV byte ptr [r13+39h], 1
    JZ loc_4684A0
loc_46851D:
    CMP r14d, 0Ch
    JZ loc_468598
loc_468523:
    CMP r14d, 0FFFFFFFFh
    JNZ loc_46854E
loc_468529:
    JMP loc_468588
loc_468530:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX eax, byte ptr [rax]
loc_46853B:
    CMP eax, 0Ah
    JZ loc_4684A0
loc_468544:
    CMP eax, 0Ch
    JZ loc_468598
loc_468549:
    CMP eax, 0FFFFFFFFh
    JZ loc_468588
loc_46854E:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JB loc_468530
loc_468558:
    MOV rdi, rbx
    CALL ___uflow
    JMP loc_46853B
loc_468568:
    TEST r12b, r12b
    JNZ loc_4684BB
loc_468571:
    POP rbx
    ADD cs:dword_742F94, 1
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_468588:
    MOV rdi, r13
    CALL sub_467940
    JMP loc_4684A0
loc_468598:
    MOVZX eax, cs:byte_752C50
    TEST al, al
    JZ loc_4685DD
loc_4685A3:
    CMP cs:byte_752D0F, 0
    JNZ loc_46867C
loc_4685B0:
    MOV edx, cs:dword_742FA8
    MOV rax, cs:qword_752D38
    TEST edx, edx
    JZ loc_4685DD
loc_4685C1:
    SUB edx, 1
    ADD rdx, 1
    SHL rdx, 6
    ADD rdx, rax
    NOP 
loc_4685D0:
    MOV byte ptr [rax+39h], 0
    ADD rax, 40h
    CMP rax, rdx
    JNZ loc_4685D0
loc_4685DD:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_4686A0
loc_4685EB:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX edi, byte ptr [rax]
loc_4685F6:
    CMP edi, 0Ah
    JZ loc_468603
loc_4685FB:
    MOV rsi, rbx
    CALL _ungetc
loc_468603:
    CMP cs:byte_752D0F, 0
    JNZ loc_468650
loc_46860C:
    MOV edx, cs:dword_742FA8
    MOV rax, cs:qword_752D38
    TEST edx, edx
    JZ loc_468658
loc_46861D:
    CMP cs:byte_742FC4, 1
    SBB ecx, ecx
    SUB edx, 1
    ADD rdx, 1
    NOT ecx
    SHL rdx, 6
    ADD ecx, 2
    ADD rdx, rax
    NOP dword ptr [rax+00000000h]
loc_468640:
    MOV [rax+10h], ecx
    ADD rax, 40h
    CMP rdx, rax
    JNZ loc_468640
loc_46864C:
    JMP loc_468658
loc_468650:
    MOV dword ptr [r13+10h], 2
loc_468658:
    MOV dword ptr [r13+30h], 0
    SUB cs:dword_752CD0, 1
    JMP loc_4684A0
loc_46866C:
    MOV rdi, rbx
    CALL ___uflow
    MOV r14d, eax
    JMP loc_46847A
loc_46867C:
    MOV byte ptr [r13+39h], 0
    JMP loc_4685DD
loc_468686:
    MOV rax, [rbx+8]
    CMP rax, [rbx+10h]
    JNB loc_4686BC
loc_468690:
    LEA rdx, [rax+1]
    MOV [rbx+8], rdx
    MOVZX eax, byte ptr [rax]
    JMP loc_4684F1
loc_4686A0:
    MOV rdi, rbx
    CALL ___uflow
    MOV edi, eax
    JMP loc_4685F6
loc_4686AF:
    MOV rdi, rbx
    CALL ___uflow
    JMP loc_4684E8
loc_4686BC:
    MOV rdi, rbx
    CALL ___uflow
    JMP loc_4684F1
loc_4686C9:
    MOV r14d, eax
    JMP loc_468485
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6E', '0x41', '0x6B', '0x0D', '0x50', '0x2', '0x78', '0x7D', '0x82', '0x8E', '0x9B', '0xBE', '0xC6', '0x82', '0x8E', '0x9B', '0xBE'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic'}

##### Q 148 - blake2b_update
```assembly
loc_419AE0:
    TEST rdx, rdx
    JZ loc_419AF8
loc_419AE5:
    SUB rsp, 8
    CALL sub_419690
    XOR eax, eax
    ADD rsp, 8
    RETN 
loc_419AF8:
    XOR eax, eax
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x80', '0x68', '0x233', '0x82', '0x7A', '0x6', '0x2', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 9, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Encryption/Cryptography'}

##### T 148 - blake2b_update
```assembly
loc_41B6C0:
    TEST rdx, rdx
    JZ loc_41B720
loc_41B6C5:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV ebp, 80h
    MOV r12, rdx
    LEA r14, [rbx+60h]
    SUB rsp, 8
    MOV rdi, [rdi+0E0h]
    SUB rbp, rdi
    CMP rdx, rbp
    JA loc_41B728
loc_41B6F4:
    ADD rdi, r14
    MOV rdx, r12
    MOV rsi, r13
    CALL _memcpy
    ADD [rbx+0E0h], r12
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41B720:
    XOR eax, eax
    RETN 
loc_41B728:
    LEA r14, [rbx+60h]
    MOV rdx, rbp
    MOV qword ptr [rbx+0E0h], 0
    ADD rdi, r14
    CALL _memcpy
    MOV rax, [rbx+40h]
    MOV rsi, r14
    MOV rdi, rbx
    SUB rax, 0FFFFFFFFFFFFFF80h
    CMP rax, 7Fh
    MOV [rbx+40h], rax
    SETBE al
    SUB r12, rbp
    ADD r13, rbp
    MOVZX eax, al
    ADD [rbx+48h], rax
    MOV r15, r12
    MOV rbp, r13
    CALL sub_419950
    CMP r12, 80h
    JBE loc_41B7D9
loc_41B77C:
    NOP dword ptr [rax+00h]
loc_41B780:
    MOV rax, [rbx+40h]
    MOV rsi, rbp
    MOV rdi, rbx
    SUB rax, 0FFFFFFFFFFFFFF80h
    CMP rax, 7Fh
    MOV [rbx+40h], rax
    SETBE al
    ADD r15, 0FFFFFFFFFFFFFF80h
    SUB rbp, 0FFFFFFFFFFFFFF80h
    MOVZX eax, al
    ADD [rbx+48h], rax
    CALL sub_419950
    CMP r15, 80h
    JA loc_41B780
loc_41B7B6:
    LEA rax, [r12-81h]
    SHR rax, 7
    LEA rdx, [rax+1]
    NEG rax
    SHL rax, 7
    SHL rdx, 7
    LEA r12, [r12+rax-80h]
    ADD r13, rdx
loc_41B7D9:
    MOV rdi, [rbx+0E0h]
    JMP loc_41B6F4
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x80', '0x68', '0x233', '0x82', '0x7A', '0x6', '0x250', '0x7C', '0x85', '0x249', '0x84', '0x7C', '0xFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic'}

##### Q 149 - next_file
```assembly
loc_436720:
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    TEST rdi, rdi
    JZ loc_4367BD
loc_43672F:
    MOV rdx, cs:qword_721260
    TEST rdx, rdx
    JZ loc_436875
loc_43673F:
    TEST byte ptr [rdi], 20h
    MOV rbx, rdi
    JNZ loc_436838
loc_43674B:
    CMP byte ptr [rdx], 2Dh
    MOV rdi, rbx
    JNZ loc_436820
loc_436757:
    CMP byte ptr [rdx+1], 0
    JNZ loc_436820
loc_436761:
    CALL _clearerr_unlocked
    JMP loc_4367BD
loc_436770:
    MOV rdi, rdx
    MOV esi, offset modes
    MOV [rsp+28h+var_20], rdx
    CALL _fopen
    TEST rax, rax
    MOV rdx, [rsp+28h+var_20]
    JNZ loc_4367F7
loc_43678C:
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_721248, 1
loc_4367BD:
    MOV rax, cs:qword_721270
    LEA rdx, [rax+8]
    MOV cs:qword_721270, rdx
    MOV rdx, [rax]
    XOR eax, eax
    TEST rdx, rdx
    JZ loc_436815
loc_4367D9:
    CMP byte ptr [rdx], 2Dh
    JNZ loc_436770
loc_4367DE:
    CMP byte ptr [rdx+1], 0
    JNZ loc_436770
loc_4367E4:
    MOV rax, cs:stdin
    MOV cs:byte_721268, 1
    TEST rax, rax
    JZ loc_43678C
loc_4367F7:
    MOV rdi, rax
    MOV esi, 2
    MOV [rsp+28h+var_20], rax
    MOV cs:qword_721260, rdx
    CALL sub_4A3F30
    MOV rax, [rsp+28h+var_20]
loc_436815:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_436820:
    CALL sub_4BE090
    TEST eax, eax
    JZ loc_4367BD
loc_436829:
    MOV rdx, cs:qword_721260
    JMP loc_43678C
loc_436838:
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_721248, 1
    MOV rdx, cs:qword_721260
    JMP loc_43674B
loc_436875:
    MOV ecx, offset aNextFile
    MOV edx, 155h
    MOV esi, offset aSrcExpandCommo
    MOV edi, offset aPrevFile
    CALL ___assert_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x18', '0x28', '0x18', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### T 149 - next_file
```assembly
loc_439C60:
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    TEST rdi, rdi
    JZ loc_439CFD
loc_439C6F:
    MOV rdx, cs:qword_744240
    TEST rdx, rdx
    JZ loc_439DB5
loc_439C7F:
    TEST byte ptr [rdi], 20h
    MOV rbx, rdi
    JNZ loc_439D78
loc_439C8B:
    CMP byte ptr [rdx], 2Dh
    MOV rdi, rbx
    JNZ loc_439D60
loc_439C97:
    CMP byte ptr [rdx+1], 0
    JNZ loc_439D60
loc_439CA1:
    CALL _clearerr_unlocked
    JMP loc_439CFD
loc_439CB0:
    MOV rdi, rdx
    MOV esi, offset modes
    MOV [rsp+28h+var_20], rdx
    CALL _fopen
    TEST rax, rax
    MOV rdx, [rsp+28h+var_20]
    JNZ loc_439D37
loc_439CCC:
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_744228, 1
loc_439CFD:
    MOV rax, cs:qword_744250
    LEA rdx, [rax+8]
    MOV cs:qword_744250, rdx
    MOV rdx, [rax]
    XOR eax, eax
    TEST rdx, rdx
    JZ loc_439D55
loc_439D19:
    CMP byte ptr [rdx], 2Dh
    JNZ loc_439CB0
loc_439D1E:
    CMP byte ptr [rdx+1], 0
    JNZ loc_439CB0
loc_439D24:
    MOV rax, cs:stdin
    MOV cs:byte_744248, 1
    TEST rax, rax
    JZ loc_439CCC
loc_439D37:
    MOV rdi, rax
    MOV esi, 2
    MOV [rsp+28h+var_20], rax
    MOV cs:qword_744240, rdx
    CALL sub_4BF2F0
    MOV rax, [rsp+28h+var_20]
loc_439D55:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_439D60:
    CALL sub_4E0210
    TEST eax, eax
    JZ loc_439CFD
loc_439D69:
    MOV rdx, cs:qword_744240
    JMP loc_439CCC
loc_439D78:
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_744228, 1
    MOV rdx, cs:qword_744240
    JMP loc_439C8B
loc_439DB5:
    MOV ecx, offset aNextFile
    MOV edx, 155h
    MOV esi, offset aSrcExpandCommo
    MOV edi, offset aPrevFile
    CALL ___assert_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x9C1998', '0x9C19D8', '0x9B82B0', '0x9B82C0', '0x38', '0x8', '0x10', '0x18', '0x28', '0x10', '0x316', '0x3B8', '0x9C1310', '0x8', '0x18', '0x28', '0x10', '0x3B8', '0x9C1950', '0x9B82D0', '0x9B8298', '0x8', '0x9B8290'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 23, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### Q 150 - src_to_dest_compare
```assembly
loc_428C10:
    XOR eax, eax
    MOV rdx, [rsi]
    CMP [rdi], rdx
    JZ loc_428C20
loc_428C1A:
    REP 
loc_428C20:
    MOV rax, [rsi+8]
    CMP [rdi+8], rax
    SETZ al
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x58', '0x7C4', '0x768', '0x772', '0x777', '0x77B', '0x76D', '0x786', '0x81', '0x6E', '0x80', '0x82', '0x83'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic/Security'}

##### T 150 - src_to_dest_compare
```assembly
loc_42B300:
    XOR eax, eax
    MOV rdx, [rsi]
    CMP [rdi], rdx
    JZ loc_42B310
loc_42B30A:
    REP 
loc_42B310:
    MOV rax, [rsi+8]
    CMP [rdi+8], rax
    SETZ al
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x58', '0x302', '0x7A', '0x768', '0x772', '0x777', '0x77B', '0x76D', '0x786'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic'}

##### Q 151 - utimecmp
```assembly
loc_4B9940:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 118h
    MOV r13, [rdx+60h]
    MOV r12, [rsi+58h]
    MOV rax, fs:28h
    MOV [rsp+148h+var_40], rax
    XOR eax, eax
    AND ecx, 1
    MOV rbp, [rdx+58h]
    MOV r14, [rsi+60h]
    MOV r15d, r13d
    JZ loc_4B9A60
loc_4B9980:
    CMP r12, rbp
    SETZ byte ptr [rsp+148h+var_148]
    MOVZX eax, byte ptr [rsp+148h+var_148]
    CMP r14d, r13d
    SETZ r11b
    XOR ecx, ecx
    AND r11b, al
    MOV byte ptr [rsp+148h+filename], r11b
    JNZ loc_4B9A80
loc_4B99A2:
    LEA rax, [rbp-1]
    MOV ecx, 0FFFFFFFFh
    CMP r12, rax
    JL loc_4B9A80
loc_4B99B4:
    LEA rax, [r12-1]
    MOV ecx, 1
    CMP rbp, rax
    JL loc_4B9A80
loc_4B99C7:
    MOV rdx, cs:qword_735730
    MOV r9, rdi
    MOV rbx, rsi
    TEST rdx, rdx
    JZ loc_4B9F44
loc_4B99DD:
    MOV rsi, cs:qword_735728
    TEST rsi, rsi
    JZ loc_4B9EE0
loc_4B99ED:
    MOV rax, [rbx]
    MOV rdi, rdx
    MOV [rsp+148h+var_138], r9
    MOV [rsi], rax
    CALL sub_4A7F20
    TEST rax, rax
    MOV r11, rax
    MOV r9, [rsp+148h+var_138]
    JZ loc_4B9AB0
loc_4B9A11:
    CMP rax, cs:qword_735728
    JZ loc_4B9F28
loc_4B9A1E:
    MOV eax, [r11+8]
    MOV dword ptr [rsp+148h+var_138], eax
    MOVZX eax, byte ptr [r11+0Ch]
loc_4B9A2B:
    TEST al, al
    JZ loc_4B9B10
loc_4B9A33:
    MOV esi, dword ptr [rsp+148h+var_138]
    XOR ecx, ecx
    MOV eax, r15d
    CMP esi, 77359400h
    SETZ cl
    CDQ 
    IDIV esi
    NOT ecx
    MOVSXD rcx, ecx
loc_4B9A4D:
    MOV r15d, r13d
    AND rbp, rcx
    SUB r15d, edx
    NOP word ptr [rax+rax+00000000h]
loc_4B9A60:
    CMP rbp, r12
    JG loc_4B9ED0
loc_4B9A69:
    MOV ecx, 1
    JL loc_4B9A80
loc_4B9A70:
    XOR ecx, ecx
    CMP r15d, r14d
    MOV eax, 0FFFFFFFFh
    SETL cl
    CMOVG ecx, eax
loc_4B9A80:
    MOV rdi, [rsp+148h+var_40]
    XOR rdi, fs:28h
    MOV eax, ecx
    JNZ loc_4BA0E5
loc_4B9A99:
    ADD rsp, 118h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B9AB0:
    MOV rdi, cs:qword_735730
    TEST rdi, rdi
    JZ loc_4B9F7D
loc_4B9AC0:
    LEA rdx, [rsp+148h+var_108]
    MOV rax, [rbx]
    MOV [rsp+148h+var_130], r9
    MOV rsi, rdx
    MOV [rsp+148h+var_138], rdx
    MOV [rsp+148h+var_108], rax
    CALL sub_4A74C0
    TEST rax, rax
    MOV r11, rax
    MOV rdx, [rsp+148h+var_138]
    MOV r9, [rsp+148h+var_130]
    JNZ loc_4B9A1E
loc_4B9AF5:
    MOV [rsp+148h+var_100], 77359400h
    MOV [rsp+148h+var_FC], 0
    MOV r11, rdx
    MOV dword ptr [rsp+148h+var_138], 77359400h
    NOP dword ptr [rax]
loc_4B9B10:
    MOV rax, [rbx+50h]
    MOV r10d, 66666667h
    MOV rcx, [rbx+70h]
    MOV rdi, rax
    MOV [rsp+148h+var_130], rax
    IMUL r10d
    MOV eax, edi
    MOV r8d, edi
    SAR eax, 1Fh
    MOV esi, edx
    SAR esi, 2
    SUB esi, eax
    LEA eax, [rsi+rsi*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, ecx
    IMUL r10d
    MOV eax, ecx
    SAR eax, 1Fh
    MOV edi, edx
    SAR edi, 2
    SUB edi, eax
    LEA eax, [rdi+rdi*4]
    ADD eax, eax
    SUB ecx, eax
    MOV eax, r14d
    IMUL r10d
    OR r8d, ecx
    MOV eax, r14d
    SAR eax, 1Fh
    MOV ecx, edx
    MOV edx, r14d
    SAR ecx, 2
    SUB ecx, eax
    LEA eax, [rcx+rcx*4]
    ADD eax, eax
    SUB edx, eax
    OR r8d, edx
    JNZ loc_4B9EB0
loc_4B9B81:
    CMP dword ptr [rsp+148h+var_138], 0Ah
    MOV rax, [rbx+48h]
    MOV [rsp+148h+var_110], rax
    JLE loc_4B9FC7
loc_4B9B95:
    MOV eax, edi
    MOV r8d, edi
    MOV dword ptr [rsp+148h+var_120], 8
    IMUL r10d
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, esi
    IMUL r10d
    MOV eax, esi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    MOV edx, esi
    ADD eax, eax
    SUB edx, eax
    MOV eax, ecx
    OR r8d, edx
    IMUL r10d
    MOV eax, ecx
    MOV [rsp+148h+var_124], r8d
    SAR eax, 1Fh
    MOV r10d, ecx
    MOV r8d, 0Ah
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    MOV edx, [rsp+148h+var_124]
    ADD eax, eax
    SUB r10d, eax
    MOV eax, r10d
    MOV r10d, 66666667h
    OR edx, eax
    JNZ loc_4B9FC7
loc_4B9C0C:
    MOV [rsp+148h+var_118], r9
    MOV r9d, dword ptr [rsp+148h+var_138]
    MOV [rsp+148h+var_124], r15d
    MOV [rsp+148h+filename], rbp
    MOV r15d, 8
    MOV [rsp+148h+var_120], r11
    NOP dword ptr [rax+rax+00h]
loc_4B9C30:
    MOV eax, esi
    SAR esi, 1Fh
    LEA r11d, [r8+r8*4]
    IMUL r10d
    MOV eax, edi
    SAR edi, 1Fh
    ADD r11d, r11d
    MOV r8d, r11d
    SAR edx, 2
    SUB edx, esi
    MOV esi, edx
    IMUL r10d
    MOV eax, ecx
    SAR ecx, 1Fh
    SAR edx, 2
    SUB edx, edi
    MOV edi, edx
    IMUL r10d
    SAR edx, 2
    SUB edx, ecx
    CMP r11d, r9d
    MOV ecx, edx
    JGE loc_4B9F87
loc_4B9C70:
    MOV eax, esi
    MOV ebp, esi
    IMUL r10d
    MOV eax, esi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB ebp, eax
    MOV eax, edi
    IMUL r10d
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    MOV edx, edi
    ADD eax, eax
    SUB edx, eax
    MOV eax, ecx
    OR ebp, edx
    IMUL r10d
    MOV eax, ecx
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    MOV edx, ecx
    ADD eax, eax
    SUB edx, eax
    OR ebp, edx
    JNZ loc_4B9F87
loc_4B9CC2:
    SUB r15d, 1
    JNZ loc_4B9C30
loc_4B9CCC:
    MOV rax, [rsp+148h+var_110]
    MOV r11, [rsp+148h+var_120]
    MOV r15d, [rsp+148h+var_124]
    MOV r9, [rsp+148h+var_118]
    MOV rbp, [rsp+148h+filename]
    OR rax, r12
    OR rax, [rbx+68h]
    AND eax, 1
    CMP rax, 1
    SBB rdx, rdx
    SUB rdx, 1
    CMP rax, 1
    SBB r8d, r8d
    AND r8d, 3B9ACA00h
    ADD r8d, 3B9ACA00h
    TEST rax, rax
    SETZ byte ptr [rsp+148h+filename]
    MOV [r11+8], r8d
loc_4B9D1B:
    CMP r12, rbp
    MOV ecx, 1
    JG loc_4B9A80
loc_4B9D29:
    CMP r14d, r13d
    JL loc_4B9D38
loc_4B9D2E:
    CMP byte ptr [rsp+148h+var_148], 0
    JNZ loc_4B9A80
loc_4B9D38:
    AND rdx, rbp
    MOV ecx, 0FFFFFFFFh
    CMP r12, rdx
    JL loc_4B9A80
loc_4B9D49:
    JZ loc_4B9FE1
loc_4B9D4F:
    MOV rax, [rsp+148h+var_110]
    MOV edx, 38E38E39h
    MOV [rsp+148h+var_138], r11
    MOV rdi, r9
    MOV [rsp+148h+var_F8], rax
    MOVSXD rax, dword ptr [rsp+148h+var_130]
    MOV dword ptr [rsp+148h+var_130], r8d
    MOV [rsp+148h+var_F0], rax
    MOVZX eax, byte ptr [rsp+148h+filename]
    MOV [rsp+148h+filename], r9
    OR rax, r12
    MOV [rsp+148h+var_E8], rax
    MOV eax, r8d
    IMUL edx
    MOV eax, edx
    MOV edx, r8d
    SAR eax, 1
    SAR edx, 1Fh
    SUB eax, edx
    ADD eax, r14d
    CDQE 
    MOV [rsp+148h+var_E0], rax
    MOV eax, [rbx+18h]
    AND eax, 0F000h
    CMP eax, 0A000h
    LEA rax, [rsp+148h+var_F8]
    MOV [rsp+148h+var_148], rax
    MOV rsi, rax
    JZ loc_4B9FFB
loc_4B9DC1:
    CALL sub_4BA750
    MOV r8d, dword ptr [rsp+148h+var_130]
    MOV r11, [rsp+148h+var_138]
    TEST eax, eax
    MOV r9, [rsp+148h+filename]
    SETNZ al
loc_4B9DDA:
    TEST al, al
    JNZ loc_4B9EA6
loc_4B9DE2:
    MOV eax, [rbx+18h]
    MOV dword ptr [rsp+148h+var_130], r8d
    LEA rdx, [rsp+148h+stat_buf]
    MOV [rsp+148h+var_138], r11
    MOV rsi, r9
    MOV [rsp+148h+filename], r9
    MOV edi, 1
    AND eax, 0F000h
    CMP eax, 0A000h
    JZ loc_4BA0C9
loc_4B9E11:
    CALL ___xstat
    MOV r8d, dword ptr [rsp+148h+var_130]
    MOV r11, [rsp+148h+var_138]
    MOV r10d, eax
    MOV r9, [rsp+148h+filename]
loc_4B9E28:
    MOV rcx, [rsp+148h+stat_buf.st_mtim.tv_nsec]
    MOV rax, [rsp+148h+stat_buf.st_mtim.tv_sec]
    MOVSXD rsi, r14d
    MOV rdi, r12
    MOV rdx, rcx
    XOR rdi, rax
    XOR rdx, rsi
    OR rdx, rdi
    MOVSXD rdi, r10d
    OR rdx, rdi
    JZ loc_4BA029
loc_4B9E56:
    MOV eax, [rbx+18h]
    MOV [rsp+148h+var_E0], rsi
    MOV rdi, r9
    MOV [rsp+148h+var_E8], r12
    MOV dword ptr [rsp+148h+var_130], r8d
    MOV dword ptr [rsp+148h+var_138], r10d
    MOV [rsp+148h+filename], r11
    AND eax, 0F000h
    MOV rsi, [rsp+148h+var_148]
    CMP eax, 0A000h
    JZ loc_4BA0EA
loc_4B9E89:
    CALL sub_4BA750
    MOV r8d, dword ptr [rsp+148h+var_130]
    MOV r10d, dword ptr [rsp+148h+var_138]
    MOV r11, [rsp+148h+filename]
loc_4B9E9D:
    TEST r10d, r10d
    JZ loc_4BA019
loc_4B9EA6:
    MOV ecx, 0FFFFFFFEh
    JMP loc_4B9A80
loc_4B9EB0:
    XOR edx, edx
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV r8d, 1
loc_4B9EBF:
    MOV [r11+8], r8d
    MOV byte ptr [r11+0Ch], 1
    JMP loc_4B9A4D
loc_4B9ED0:
    MOV ecx, 0FFFFFFFFh
    JMP loc_4B9A80
loc_4B9EE0:
    MOV edi, 10h
    MOV [rsp+148h+var_138], r9
    MOV [rsp+148h+var_130], rdx
    CALL _malloc
    TEST rax, rax
    MOV cs:qword_735728, rax
    MOV r9, [rsp+148h+var_138]
    JZ loc_4B9FBB
loc_4B9F09:
    MOV dword ptr [rax+8], 77359400h
    MOV byte ptr [rax+0Ch], 0
    MOV rsi, rax
    MOV rdx, [rsp+148h+var_130]
    JMP loc_4B99ED
loc_4B9F28:
    MOV eax, [rax+8]
    MOV cs:qword_735728, 0
    MOV dword ptr [rsp+148h+var_138], eax
    MOVZX eax, byte ptr [r11+0Ch]
    JMP loc_4B9A2B
loc_4B9F44:
    MOV [rsp+148h+var_138], rdi
    MOV edx, offset sub_4B9920
    XOR esi, esi
    MOV r8d, offset _free
    MOV ecx, offset sub_4B9930
    MOV edi, 10h
    CALL sub_4A7720
    TEST rax, rax
    MOV rdx, rax
    MOV cs:qword_735730, rax
    MOV r9, [rsp+148h+var_138]
    JNZ loc_4B99DD
loc_4B9F7D:
    LEA rdx, [rsp+148h+var_108]
    JMP loc_4B9AF5
loc_4B9F87:
    MOV eax, r11d
    MOV rbp, [rsp+148h+filename]
    MOV r11, [rsp+148h+var_120]
    CMP eax, 77359400h
    MOV r15d, [rsp+148h+var_124]
    MOV r9, [rsp+148h+var_118]
    SETZ byte ptr [rsp+148h+filename]
    MOVZX edx, byte ptr [rsp+148h+filename]
    MOV [r11+8], r8d
    NOT edx
    MOVSXD rdx, edx
    JMP loc_4B9D1B
loc_4B9FBB:
    MOV rdi, cs:qword_735730
    JMP loc_4B9AC0
loc_4B9FC7:
    MOV dword ptr [r11+8], 0Ah
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV r8d, 0Ah
    JMP loc_4B9D1B
loc_4B9FE1:
    MOV eax, r15d
    CDQ 
    IDIV r8d
    MOV eax, r13d
    SUB eax, edx
    CMP r14d, eax
    JL loc_4B9A80
loc_4B9FF6:
    JMP loc_4B9D4F
loc_4B9FFB:
    CALL sub_4BA760
    TEST eax, eax
    MOV r9, [rsp+148h+filename]
    MOV r11, [rsp+148h+var_138]
    SETNZ al
    MOV r8d, dword ptr [rsp+148h+var_130]
    JMP loc_4B9DDA
loc_4BA019:
    MOV rax, [rsp+148h+stat_buf.st_mtim.tv_sec]
    MOV rcx, [rsp+148h+stat_buf.st_mtim.tv_nsec]
loc_4BA029:
    AND eax, 1
    MOV edx, 66666667h
    IMUL eax, 3B9ACA00h
    ADD ecx, eax
    MOV eax, ecx
    IMUL edx
    MOV eax, edx
    MOV edx, ecx
    SAR eax, 2
    SAR edx, 1Fh
    SUB eax, edx
    LEA eax, [rax+rax*4]
    ADD eax, eax
    CMP ecx, eax
    JNZ loc_4BA108
loc_4BA056:
    CMP r8d, 0Ah
    JZ loc_4BA0AC
loc_4BA05C:
    MOV edi, 9
    MOV esi, 0Ah
    MOV r9d, 66666667h
    JMP loc_4BA078
loc_4BA06E:
    LEA esi, [rsi+rsi*4]
    ADD esi, esi
    CMP esi, r8d
    JZ loc_4BA0AC
loc_4BA078:
    MOV eax, ecx
    SAR ecx, 1Fh
    IMUL r9d
    SAR edx, 2
    SUB edx, ecx
    MOV eax, edx
    MOV ecx, edx
    IMUL r9d
    MOV eax, edx
    MOV edx, ecx
    SAR eax, 2
    SAR edx, 1Fh
    SUB eax, edx
    LEA eax, [rax+rax*4]
    ADD eax, eax
    CMP ecx, eax
    JNZ loc_4BA103
loc_4BA0A1:
    SUB edi, 1
    JNZ loc_4BA06E
loc_4BA0A6:
    MOV r8d, 77359400h
loc_4BA0AC:
    XOR ecx, ecx
    CMP r8d, 77359400h
    MOV eax, r15d
    SETZ cl
    CDQ 
    NOT ecx
    MOVSXD rcx, ecx
    IDIV r8d
    JMP loc_4B9EBF
loc_4BA0C9:
    CALL ___lxstat
    MOV r9, [rsp+148h+filename]
    MOV r10d, eax
    MOV r11, [rsp+148h+var_138]
    MOV r8d, dword ptr [rsp+148h+var_130]
    JMP loc_4B9E28
loc_4BA0E5:
    CALL ___stack_chk_fail
loc_4BA0EA:
    CALL sub_4BA760
    MOV r11, [rsp+148h+filename]
    MOV r10d, dword ptr [rsp+148h+var_138]
    MOV r8d, dword ptr [rsp+148h+var_130]
    JMP loc_4B9E9D
loc_4BA103:
    MOV r8d, esi
    JMP loc_4BA0AC
loc_4BA108:
    MOV r8d, 1
    JMP loc_4BA0AC
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x168', '0x158', '0x148', '0x138', '0x188', '0x180', '0x160', '0x140', '0x120', '0x100', '0x28', '0xF8', '0x48', '0x40', '0x58', '0x50', '0xD0', '0xB0', '0x98', '0x88', '0xD8', '0xC8', '0x78', '0x68', '0x50', '0x40'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 45, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Iterative Data Processing with Multiple Checks', 'inferred_category': 'Complex Function'}

##### T 151 - utimecmp
```assembly
loc_4D9DF0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 118h
    MOV r13, [rdx+60h]
    MOV r12, [rsi+58h]
    MOV rax, fs:28h
    MOV [rsp+148h+var_40], rax
    XOR eax, eax
    AND ecx, 1
    MOV rbp, [rdx+58h]
    MOV r14, [rsi+60h]
    MOV r9d, r13d
    JZ loc_4D9F10
loc_4D9E30:
    CMP r12, rbp
    MOV rbx, rsi
    SETZ r15b
    CMP r14d, r13d
    SETZ al
    XOR esi, esi
    AND al, r15b
    MOV byte ptr [rsp+148h+filename], al
    JNZ loc_4D9F31
loc_4D9E4F:
    LEA rax, [rbp-1]
    MOV esi, 0FFFFFFFFh
    CMP r12, rax
    JL loc_4D9F31
loc_4D9E61:
    LEA rax, [r12-1]
    MOV esi, 1
    CMP rbp, rax
    JL loc_4D9F31
loc_4D9E74:
    MOV rcx, cs:qword_7586F0
    MOV r10, rdi
    TEST rcx, rcx
    JZ loc_4DA79C
loc_4D9E87:
    MOV rsi, cs:qword_7586E8
    TEST rsi, rsi
    JZ loc_4DA730
loc_4D9E97:
    MOV rax, [rbx]
    MOV rdi, rcx
    MOV [rsp+148h+var_130], r10
    MOV dword ptr [rsp+148h+var_138], r9d
    MOV [rsi], rax
    CALL sub_4C3760
    TEST rax, rax
    MOV r11, rax
    MOV r9d, dword ptr [rsp+148h+var_138]
    MOV r10, [rsp+148h+var_130]
    JZ loc_4D9F60
loc_4D9EC5:
    CMP rax, cs:qword_7586E8
    JZ loc_4DA780
loc_4D9ED2:
    MOV eax, [r11+8]
    MOV dword ptr [rsp+148h+var_138], eax
    MOVZX eax, byte ptr [r11+0Ch]
loc_4D9EDF:
    TEST al, al
    JZ loc_4D9FD0
loc_4D9EE7:
    MOV ebx, dword ptr [rsp+148h+var_138]
    XOR esi, esi
    MOV eax, r9d
    CMP ebx, 77359400h
    SETZ sil
    CDQ 
    IDIV ebx
    NOT esi
    MOVSXD rsi, esi
loc_4D9F02:
    MOV r9d, r13d
    AND rbp, rsi
    SUB r9d, edx
    NOP dword ptr [rax+rax+00h]
loc_4D9F10:
    CMP rbp, r12
    JG loc_4DA720
loc_4D9F19:
    MOV esi, 1
    JL loc_4D9F31
loc_4D9F20:
    XOR esi, esi
    CMP r9d, r14d
    MOV eax, 0FFFFFFFFh
    SETL sil
    CMOVG esi, eax
loc_4D9F31:
    MOV rdi, [rsp+148h+var_40]
    XOR rdi, fs:28h
    MOV eax, esi
    JNZ loc_4DAA33
loc_4D9F4A:
    ADD rsp, 118h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4D9F60:
    MOV rcx, cs:qword_7586F0
    TEST rcx, rcx
    JZ loc_4DA7DF
loc_4D9F70:
    LEA rdx, [rsp+148h+var_108]
    MOV rax, [rbx]
    MOV rdi, rcx
    MOV [rsp+148h+var_128], r10
    MOV dword ptr [rsp+148h+var_130], r9d
    MOV rsi, rdx
    MOV [rsp+148h+var_138], rdx
    MOV [rsp+148h+var_108], rax
    CALL sub_4C2B00
    TEST rax, rax
    MOV r11, rax
    MOV rdx, [rsp+148h+var_138]
    MOV r9d, dword ptr [rsp+148h+var_130]
    MOV r10, [rsp+148h+var_128]
    JNZ loc_4D9ED2
loc_4D9FB2:
    MOV [rsp+148h+var_100], 77359400h
    MOV [rsp+148h+var_FC], 0
    MOV r11, rdx
    MOV dword ptr [rsp+148h+var_138], 77359400h
    NOP word ptr [rax+rax+00h]
loc_4D9FD0:
    MOV rax, [rbx+50h]
    MOV ecx, 66666667h
    MOV rdi, rax
    MOV [rsp+148h+var_128], rax
    MOV rax, [rbx+70h]
    MOV r8, rax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    MOV [rsp+148h+var_130], r8
    SAR eax, 1Fh
    MOV [rsp+148h+var_11C], eax
    SAR edx, 2
    MOV esi, edx
    SUB esi, eax
    LEA eax, [rsi+rsi*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    MOV [rsp+148h+var_118], eax
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    MOV r8d, edx
    MOV edx, dword ptr [rsp+148h+var_130]
    ADD eax, eax
    SUB edx, eax
    MOV eax, r14d
    OR edi, edx
    IMUL ecx
    MOV eax, r14d
    MOV dword ptr [rsp+148h+var_110], edi
    SAR eax, 1Fh
    MOV [rsp+148h+var_114], eax
    SAR edx, 2
    MOV edi, edx
    MOV edx, r14d
    SUB edi, eax
    LEA eax, [rdi+rdi*4]
    ADD eax, eax
    SUB edx, eax
    MOV eax, edx
    MOV edx, dword ptr [rsp+148h+var_110]
    OR edx, eax
    JNZ loc_4DA700
loc_4DA05E:
    CMP dword ptr [rsp+148h+var_138], 0Ah
    MOV rax, [rbx+48h]
    MOV [rsp+148h+var_110], rax
    JLE loc_4DA7E9
loc_4DA072:
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, esi
    IMUL ecx
    MOV eax, esi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB esi, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    OR r8d, esi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    OR r8d, edi
    JNZ loc_4DA7E9
loc_4DA0C0:
    MOV eax, dword ptr [rsp+148h+var_128]
    MOV esi, 51EB851Fh
    IMUL esi
    MOV eax, dword ptr [rsp+148h+var_130]
    SAR edx, 5
    SUB edx, [rsp+148h+var_11C]
    MOV edi, edx
    IMUL esi
    MOV eax, r14d
    SAR edx, 5
    SUB edx, [rsp+148h+var_118]
    MOV r8d, edx
    IMUL esi
    MOV esi, edx
    SAR esi, 5
    SUB esi, [rsp+148h+var_114]
    CMP dword ptr [rsp+148h+var_138], 64h
    JLE loc_4DA802
loc_4DA0FD:
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, esi
    IMUL ecx
    OR r8d, edi
    MOV edi, esi
    SAR edi, 1Fh
    SAR edx, 2
    SUB edx, edi
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB esi, eax
    OR r8d, esi
    JNZ loc_4DA802
loc_4DA14B:
    MOV eax, dword ptr [rsp+148h+var_128]
    MOV esi, 10624DD3h
    IMUL esi
    MOV eax, dword ptr [rsp+148h+var_130]
    SAR edx, 6
    MOV edi, edx
    SUB edi, [rsp+148h+var_11C]
    IMUL esi
    MOV eax, r14d
    SAR edx, 6
    MOV r8d, edx
    SUB r8d, [rsp+148h+var_118]
    IMUL esi
    MOV esi, edx
    SAR esi, 6
    SUB esi, [rsp+148h+var_114]
    CMP dword ptr [rsp+148h+var_138], 3E8h
    JLE loc_4DA820
loc_4DA18C:
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, esi
    IMUL ecx
    OR r8d, edi
    MOV edi, esi
    SAR edi, 1Fh
    SAR edx, 2
    SUB edx, edi
    MOV edi, r8d
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB esi, eax
    OR edi, esi
    JNZ loc_4DA820
loc_4DA1DC:
    MOV eax, dword ptr [rsp+148h+var_128]
    MOV esi, 68DB8BADh
    IMUL esi
    MOV eax, dword ptr [rsp+148h+var_130]
    SAR edx, 0Ch
    MOV edi, edx
    SUB edi, [rsp+148h+var_11C]
    IMUL esi
    MOV eax, r14d
    SAR edx, 0Ch
    MOV r8d, edx
    SUB r8d, [rsp+148h+var_118]
    IMUL esi
    MOV esi, edx
    SAR esi, 0Ch
    SUB esi, [rsp+148h+var_114]
    CMP dword ptr [rsp+148h+var_138], 2710h
    JLE loc_4DA847
loc_4DA21D:
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, esi
    IMUL ecx
    OR r8d, edi
    MOV edi, esi
    SAR edi, 1Fh
    SAR edx, 2
    SUB edx, edi
    MOV edi, r8d
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB esi, eax
    OR edi, esi
    JNZ loc_4DA847
loc_4DA26D:
    MOV eax, dword ptr [rsp+148h+var_128]
    MOV esi, 14F8B589h
    IMUL esi
    MOV eax, dword ptr [rsp+148h+var_130]
    SAR edx, 0Dh
    MOV edi, edx
    SUB edi, [rsp+148h+var_11C]
    IMUL esi
    MOV eax, r14d
    SAR edx, 0Dh
    MOV r8d, edx
    SUB r8d, [rsp+148h+var_118]
    IMUL esi
    MOV esi, edx
    SAR esi, 0Dh
    SUB esi, [rsp+148h+var_114]
    CMP dword ptr [rsp+148h+var_138], 186A0h
    JLE loc_4DA840
loc_4DA2AE:
    MOV ecx, 66666667h
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, esi
    IMUL ecx
    OR r8d, edi
    MOV edi, esi
    SAR edi, 1Fh
    SAR edx, 2
    SUB edx, edi
    LEA eax, [rdx+rdx*4]
    MOV edx, r8d
    ADD eax, eax
    SUB esi, eax
    OR edx, esi
    JNZ loc_4DA840
loc_4DA303:
    MOV rdi, [rsp+148h+var_128]
    MOV esi, 431BDE83h
    MOV eax, edi
    SAR edi, 1Fh
    IMUL esi
    MOV [rsp+148h+var_11C], edi
    SAR edx, 12h
    MOV r8d, edx
    SUB r8d, edi
    MOV edi, r8d
    MOV r8, [rsp+148h+var_130]
    MOV eax, r8d
    SAR r8d, 1Fh
    IMUL esi
    MOV eax, r14d
    MOV [rsp+148h+var_118], r8d
    SAR edx, 12h
    SUB edx, r8d
    MOV r8d, edx
    IMUL esi
    MOV esi, edx
    MOV edx, r14d
    SAR edx, 1Fh
    SAR esi, 12h
    SUB esi, edx
    CMP dword ptr [rsp+148h+var_138], 0F4240h
    MOV [rsp+148h+var_114], edx
    JLE loc_4DA877
loc_4DA364:
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, esi
    IMUL ecx
    MOV eax, esi
    OR r8d, edi
    SAR eax, 1Fh
    MOV edi, r8d
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB esi, eax
    OR edi, esi
    JNZ loc_4DA877
loc_4DA3B4:
    MOV eax, dword ptr [rsp+148h+var_128]
    MOV esi, 6B5FCA6Bh
    IMUL esi
    MOV eax, dword ptr [rsp+148h+var_130]
    SAR edx, 16h
    MOV edi, edx
    SUB edi, [rsp+148h+var_11C]
    IMUL esi
    SAR edx, 16h
    MOV eax, edx
    SUB eax, [rsp+148h+var_118]
    MOV r8d, eax
    MOV eax, r14d
    IMUL esi
    MOV esi, edx
    SAR esi, 16h
    SUB esi, [rsp+148h+var_114]
    CMP dword ptr [rsp+148h+var_138], 989680h
    JLE loc_4DA870
loc_4DA3F6:
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, esi
    IMUL ecx
    OR r8d, edi
    MOV edi, esi
    SAR edi, 1Fh
    SAR edx, 2
    SUB edx, edi
    MOV edi, r8d
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB esi, eax
    OR edi, esi
    JNZ loc_4DA870
loc_4DA446:
    MOV eax, dword ptr [rsp+148h+var_128]
    MOV esi, 55E63B89h
    IMUL esi
    MOV eax, dword ptr [rsp+148h+var_130]
    SAR edx, 19h
    MOV edi, edx
    SUB edi, [rsp+148h+var_11C]
    IMUL esi
    SAR edx, 19h
    MOV eax, edx
    SUB eax, [rsp+148h+var_118]
    MOV r8d, eax
    MOV eax, r14d
    IMUL esi
    MOV esi, edx
    SAR esi, 19h
    SUB esi, [rsp+148h+var_114]
    CMP dword ptr [rsp+148h+var_138], 5F5E100h
    JLE loc_4DA87E
loc_4DA488:
    MOV eax, r8d
    IMUL ecx
    MOV eax, r8d
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB r8d, eax
    MOV eax, edi
    IMUL ecx
    MOV eax, edi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB edi, eax
    MOV eax, esi
    IMUL ecx
    MOV ecx, esi
    OR r8d, edi
    SAR ecx, 1Fh
    SAR edx, 2
    SUB edx, ecx
    MOV ecx, r8d
    LEA eax, [rdx+rdx*4]
    ADD eax, eax
    SUB esi, eax
    OR ecx, esi
    JNZ loc_4DA87E
loc_4DA4D8:
    MOV eax, dword ptr [rsp+148h+var_128]
    MOV esi, 44B82FA1h
    IMUL esi
    MOV eax, dword ptr [rsp+148h+var_130]
    SAR edx, 1Ch
    MOV edi, edx
    SUB edi, [rsp+148h+var_11C]
    IMUL esi
    MOV eax, r14d
    SAR edx, 1Ch
    MOV ecx, edx
    SUB ecx, [rsp+148h+var_118]
    IMUL esi
    MOV esi, edx
    SAR esi, 1Ch
    SUB esi, [rsp+148h+var_114]
    CMP dword ptr [rsp+148h+var_138], 3B9ACA00h
    JLE loc_4DAA08
loc_4DA517:
    OR ecx, edi
    OR ecx, esi
    JNZ loc_4DAA08
loc_4DA521:
    MOV rax, [rsp+148h+var_110]
    OR rax, r12
    OR rax, [rbx+68h]
    AND eax, 1
    CMP rax, 1
    SBB rdx, rdx
    SUB rdx, 1
    CMP rax, 1
    SBB ecx, ecx
    AND ecx, 3B9ACA00h
    ADD ecx, 3B9ACA00h
    TEST rax, rax
    SETZ byte ptr [rsp+148h+filename]
    MOV [r11+8], ecx
loc_4DA559:
    CMP r12, rbp
    MOV esi, 1
    JG loc_4D9F31
loc_4DA567:
    CMP r14d, r13d
    JL loc_4DA575
loc_4DA56C:
    TEST r15b, r15b
    JNZ loc_4D9F31
loc_4DA575:
    AND rdx, rbp
    MOV esi, 0FFFFFFFFh
    CMP r12, rdx
    JL loc_4D9F31
loc_4DA586:
    JZ loc_4DA827
loc_4DA58C:
    MOV rax, [rsp+148h+var_110]
    MOV edx, 38E38E39h
    LEA r15, [rsp+148h+var_F8]
    MOV [rsp+148h+var_130], r11
    MOV dword ptr [rsp+148h+var_138], r9d
    MOV rdi, r10
    MOV rsi, r15
    MOV [rsp+148h+var_F8], rax
    MOVSXD rax, dword ptr [rsp+148h+var_128]
    MOV dword ptr [rsp+148h+var_128], ecx
    MOV [rsp+148h+var_F0], rax
    MOVZX eax, byte ptr [rsp+148h+filename]
    MOV [rsp+148h+filename], r10
    OR rax, r12
    MOV [rsp+148h+var_E8], rax
    MOV eax, ecx
    IMUL edx
    MOV eax, edx
    MOV edx, ecx
    SAR eax, 1
    SAR edx, 1Fh
    SUB eax, edx
    ADD eax, r14d
    CDQE 
    MOV [rsp+148h+var_E0], rax
    MOV eax, [rbx+18h]
    AND eax, 0F000h
    CMP eax, 0A000h
    JZ loc_4DA84E
loc_4DA5FC:
    CALL sub_4DB0A0
    MOV ecx, dword ptr [rsp+148h+var_128]
    MOV r11, [rsp+148h+var_130]
    TEST eax, eax
    MOV r9d, dword ptr [rsp+148h+var_138]
    MOV r10, [rsp+148h+filename]
    SETNZ al
loc_4DA619:
    TEST al, al
    JNZ loc_4DA6F0
loc_4DA621:
    MOV eax, [rbx+18h]
    MOV [rsp+148h+var_11C], ecx
    LEA rdx, [rsp+148h+stat_buf]
    MOV [rsp+148h+var_128], r11
    MOV dword ptr [rsp+148h+var_130], r9d
    MOV rsi, r10
    MOV [rsp+148h+var_138], r10
    MOV edi, 1
    AND eax, 0F000h
    CMP eax, 0A000h
    JZ loc_4DAA12
loc_4DA654:
    CALL ___xstat
    MOV ecx, [rsp+148h+var_11C]
    MOV r11, [rsp+148h+var_128]
    MOV r9d, dword ptr [rsp+148h+var_130]
    MOV r10, [rsp+148h+var_138]
    MOV dword ptr [rsp+148h+filename], eax
loc_4DA670:
    MOV rsi, [rsp+148h+stat_buf.st_mtim.tv_nsec]
    MOV rax, [rsp+148h+stat_buf.st_mtim.tv_sec]
    MOVSXD rdi, r14d
    MOV r8, r12
    MOV rdx, rsi
    XOR r8, rax
    XOR rdx, rdi
    OR rdx, r8
    MOVSXD r8, dword ptr [rsp+148h+filename]
    OR rdx, r8
    JZ loc_4DA895
loc_4DA6A0:
    MOV eax, [rbx+18h]
    MOV [rsp+148h+var_E0], rdi
    MOV rsi, r15
    MOV [rsp+148h+var_E8], r12
    MOV dword ptr [rsp+148h+var_128], ecx
    MOV rdi, r10
    MOV [rsp+148h+var_130], r11
    MOV dword ptr [rsp+148h+var_138], r9d
    AND eax, 0F000h
    CMP eax, 0A000h
    JZ loc_4DAA38
loc_4DA6D1:
    CALL sub_4DB0A0
    MOV ecx, dword ptr [rsp+148h+var_128]
    MOV r11, [rsp+148h+var_130]
    MOV r9d, dword ptr [rsp+148h+var_138]
loc_4DA6E4:
    MOV eax, dword ptr [rsp+148h+filename]
    TEST eax, eax
    JZ loc_4DA885
loc_4DA6F0:
    MOV esi, 0FFFFFFFEh
    JMP loc_4D9F31
loc_4DA700:
    XOR edx, edx
    MOV rsi, 0FFFFFFFFFFFFFFFFh
    MOV ecx, 1
loc_4DA70E:
    MOV [r11+8], ecx
    MOV byte ptr [r11+0Ch], 1
    JMP loc_4D9F02
loc_4DA720:
    MOV esi, 0FFFFFFFFh
    JMP loc_4D9F31
loc_4DA730:
    MOV edi, 10h
    MOV [rsp+148h+var_128], r10
    MOV [rsp+148h+var_130], rcx
    MOV dword ptr [rsp+148h+var_138], r9d
    CALL _malloc
    TEST rax, rax
    MOV cs:qword_7586E8, rax
    MOV r9d, dword ptr [rsp+148h+var_138]
    MOV rcx, [rsp+148h+var_130]
    MOV r10, [rsp+148h+var_128]
    JZ loc_4D9F70
loc_4DA768:
    MOV dword ptr [rax+8], 77359400h
    MOV byte ptr [rax+0Ch], 0
    MOV rsi, rax
    JMP loc_4D9E97
loc_4DA780:
    MOV eax, [rax+8]
    MOV cs:qword_7586E8, 0
    MOV dword ptr [rsp+148h+var_138], eax
    MOVZX eax, byte ptr [r11+0Ch]
    JMP loc_4D9EDF
loc_4DA79C:
    MOV [rsp+148h+var_130], rdi
    MOV ecx, offset sub_4D9DE0
    XOR esi, esi
    MOV r8d, offset _free
    MOV edx, offset sub_4D9DD0
    MOV edi, 10h
    MOV dword ptr [rsp+148h+var_138], r13d
    CALL sub_4C2D80
    TEST rax, rax
    MOV rcx, rax
    MOV cs:qword_7586F0, rax
    MOV r9d, dword ptr [rsp+148h+var_138]
    MOV r10, [rsp+148h+var_130]
    JNZ loc_4D9E87
loc_4DA7DF:
    LEA rdx, [rsp+148h+var_108]
    JMP loc_4D9FB2
loc_4DA7E9:
    MOV dword ptr [r11+8], 0Ah
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV ecx, 0Ah
    JMP loc_4DA559
loc_4DA802:
    MOV ecx, 64h
    NOP word ptr [rax+rax+00000000h]
loc_4DA810:
    MOV [r11+8], ecx
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    JMP loc_4DA559
loc_4DA820:
    MOV ecx, 3E8h
    JMP loc_4DA810
loc_4DA827:
    MOV eax, r9d
    CDQ 
    IDIV ecx
    MOV eax, r13d
    SUB eax, edx
    CMP r14d, eax
    JL loc_4D9F31
loc_4DA83B:
    JMP loc_4DA58C
loc_4DA840:
    MOV ecx, 186A0h
    JMP loc_4DA810
loc_4DA847:
    MOV ecx, 2710h
    JMP loc_4DA810
loc_4DA84E:
    CALL sub_4DB4C0
    TEST eax, eax
    MOV r10, [rsp+148h+filename]
    MOV r9d, dword ptr [rsp+148h+var_138]
    SETNZ al
    MOV r11, [rsp+148h+var_130]
    MOV ecx, dword ptr [rsp+148h+var_128]
    JMP loc_4DA619
loc_4DA870:
    MOV ecx, 989680h
    JMP loc_4DA810
loc_4DA877:
    MOV ecx, 0F4240h
    JMP loc_4DA810
loc_4DA87E:
    MOV ecx, 5F5E100h
    JMP loc_4DA810
loc_4DA885:
    MOV rax, [rsp+148h+stat_buf.st_mtim.tv_sec]
    MOV rsi, [rsp+148h+stat_buf.st_mtim.tv_nsec]
loc_4DA895:
    AND eax, 1
    MOV edx, 66666667h
    IMUL eax, 3B9ACA00h
    ADD esi, eax
    MOV eax, esi
    IMUL edx
    MOV eax, edx
    MOV edx, esi
    SAR eax, 2
    SAR edx, 1Fh
    SUB eax, edx
    LEA eax, [rax+rax*4]
    ADD eax, eax
    CMP esi, eax
    JNZ loc_4DAA50
loc_4DA8C2:
    CMP ecx, 0Ah
    JZ loc_4DA9EC
loc_4DA8CB:
    MOV eax, esi
    MOV edi, 0Ah
    CDQ 
    IDIV edi
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA94
loc_4DA8E0:
    CMP ecx, 64h
    JZ loc_4DA9EC
loc_4DA8E9:
    MOV eax, esi
    MOV r8d, 64h
    CDQ 
    IDIV r8d
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA8A
loc_4DA900:
    CMP ecx, 3E8h
    JZ loc_4DA9EC
loc_4DA90C:
    MOV eax, esi
    MOV r8d, 3E8h
    CDQ 
    IDIV r8d
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA80
loc_4DA923:
    CMP ecx, 2710h
    JZ loc_4DA9EC
loc_4DA92F:
    MOV eax, esi
    MOV r8d, 2710h
    CDQ 
    IDIV r8d
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA76
loc_4DA946:
    CMP ecx, 186A0h
    JZ loc_4DA9EC
loc_4DA952:
    MOV eax, esi
    MOV edi, 186A0h
    CDQ 
    IDIV edi
    MOV edi, 0Ah
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA6C
loc_4DA96C:
    CMP ecx, 0F4240h
    JZ loc_4DA9EC
loc_4DA974:
    MOV eax, esi
    MOV r8d, 0F4240h
    CDQ 
    IDIV r8d
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA65
loc_4DA98B:
    CMP ecx, 989680h
    JZ loc_4DA9EC
loc_4DA993:
    MOV eax, esi
    MOV r8d, 989680h
    CDQ 
    IDIV r8d
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA5E
loc_4DA9AA:
    CMP ecx, 5F5E100h
    JZ loc_4DA9EC
loc_4DA9B2:
    MOV eax, esi
    MOV r8d, 5F5E100h
    CDQ 
    IDIV r8d
    CDQ 
    IDIV edi
    TEST edx, edx
    JNZ loc_4DAA57
loc_4DA9C9:
    CMP ecx, 3B9ACA00h
    JZ loc_4DA9EC
loc_4DA9D1:
    MOV eax, esi
    MOV ecx, 3B9ACA00h
    CDQ 
    IDIV ecx
    CMP eax, 1
    SBB ecx, ecx
    AND ecx, 3B9ACA00h
    ADD ecx, 3B9ACA00h
loc_4DA9EC:
    XOR esi, esi
    CMP ecx, 77359400h
    MOV eax, r9d
    SETZ sil
    CDQ 
    NOT esi
    MOVSXD rsi, esi
    IDIV ecx
    JMP loc_4DA70E
loc_4DAA08:
    MOV ecx, 3B9ACA00h
    JMP loc_4DA810
loc_4DAA12:
    CALL ___lxstat
    MOV r10, [rsp+148h+var_138]
    MOV dword ptr [rsp+148h+filename], eax
    MOV r9d, dword ptr [rsp+148h+var_130]
    MOV r11, [rsp+148h+var_128]
    MOV ecx, [rsp+148h+var_11C]
    JMP loc_4DA670
loc_4DAA33:
    CALL ___stack_chk_fail
loc_4DAA38:
    CALL sub_4DB4C0
    MOV r9d, dword ptr [rsp+148h+var_138]
    MOV r11, [rsp+148h+var_130]
    MOV ecx, dword ptr [rsp+148h+var_128]
    JMP loc_4DA6E4
loc_4DAA50:
    MOV ecx, 1
    JMP loc_4DA9EC
loc_4DAA57:
    MOV ecx, 5F5E100h
    JMP loc_4DA9EC
loc_4DAA5E:
    MOV ecx, 989680h
    JMP loc_4DA9EC
loc_4DAA65:
    MOV ecx, 0F4240h
    JMP loc_4DA9EC
loc_4DAA6C:
    MOV ecx, 186A0h
    JMP loc_4DA9EC
loc_4DAA76:
    MOV ecx, 2710h
    JMP loc_4DA9EC
loc_4DAA80:
    MOV ecx, 3E8h
    JMP loc_4DA9EC
loc_4DAA8A:
    MOV ecx, 64h
    JMP loc_4DA9EC
loc_4DAA94:
    MOV ecx, 0Ah
    JMP loc_4DA9EC
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x258', '0x138', '0x128', '0x118', '0x108', '0x98', '0x88', '0x78', '0x68', '0x58', '0x48', '0x38', '0x28', '0x18', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 152 - get_spec_stats
```assembly
loc_48CEA0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV r12, rdi
    SUB rsp, 8
    MOV rax, [rdi]
    MOV qword ptr [rdi+20h], 0
    MOV byte ptr [rdi+30h], 0
    MOV byte ptr [rdi+32h], 0
    MOV byte ptr [rdi+31h], 0
    MOV rbp, [rax+8]
    TEST rbp, rbp
    JZ loc_48CF14
loc_48CED4:
    NOP dword ptr [rax+00h]
loc_48CED8:
    CMP dword ptr [rbp+0], 4
    JA def_48CEE5
loc_48CEE2:
    MOV eax, [rbp+0]
    JMP ds:jpt_48CEE5[rax*8]
loc_48CEF0:
    MOV ebx, 1
loc_48CEF5:
    ADD rbx, r13
    JB loc_48D00E
loc_48CEFE:
    CMP rbx, 0FFFFFFFFFFFFFFFFh
    JZ loc_48D00E
loc_48CF08:
    MOV r13, rbx
loc_48CF0B:
    MOV rbp, [rbp+8]
    TEST rbp, rbp
    JNZ loc_48CED8
loc_48CF14:
    MOV [r12+18h], r13
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_48CF30:
    MOV rbx, [rbp+18h]
    TEST rbx, rbx
    JNZ loc_48CEF5
loc_48CF39:
    MOV [r12+28h], rbp
    ADD qword ptr [r12+20h], 1
    JMP loc_48CF0B
loc_48CF50:
    MOVZX ecx, byte ptr [rbp+10h]
    XOR eax, eax
    XOR ebx, ebx
    NOP dword ptr [rax+rax+00000000h]
loc_48CF60:
    XOR edx, edx
    CMP cl, al
    SETZ dl
    ADD eax, 1
    ADD rbx, rdx
    CMP eax, 100h
    JNZ loc_48CF60
loc_48CF74:
    MOV byte ptr [r12+30h], 1
    JMP loc_48CEF5
loc_48CF80:
    MOV byte ptr [r12+31h], 1
    MOV r15d, [rbp+10h]
    XOR r14d, r14d
    XOR ebx, ebx
    NOP 
loc_48CF90:
    MOV esi, r14d
    MOV edi, r15d
    CALL sub_48CD10
    CMP al, 1
    SBB rbx, 0FFFFFFFFFFFFFFFFh
    ADD r14d, 1
    CMP r14d, 100h
    JNZ loc_48CF90
loc_48CFAE:
    CMP r15d, 6
    JZ loc_48CEF5
loc_48CFB8:
    CMP r15d, 0Ah
    JZ loc_48CEF5
loc_48CFC2:
    MOV byte ptr [r12+32h], 1
    JMP loc_48CEF5
loc_48CFD0:
    MOVZX eax, byte ptr [rbp+11h]
    MOVZX edx, byte ptr [rbp+10h]
    CMP al, dl
    JB loc_48CFF5
loc_48CFDC:
    SUB eax, edx
    ADD eax, 1
    MOVSXD rbx, eax
    JMP loc_48CEF5
loc_48CFF0:
    CALL _abort
loc_48CFF5:
    MOV ecx, offset aGetSpecStats
    MOV edx, 4EEh
    MOV esi, offset file
    MOV edi, offset aPURangeLastCha
    CALL ___assert_fail
loc_48D00E:
    MOV edx, 5
    MOV esi, offset aTooManyCharact
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['ConditionalBranching', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4AE850', '0x4AE830'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Dispatch Table'}

##### T 152 - get_spec_stats
```assembly
loc_4A3440:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    XOR ebp, ebp
    SUB rsp, 18h
    MOV rax, [rdi]
    MOV qword ptr [rdi+20h], 0
    MOV byte ptr [rdi+30h], 0
    MOV byte ptr [rdi+32h], 0
    MOV byte ptr [rdi+31h], 0
    MOV r15, [rax+8]
    TEST r15, r15
    JZ loc_4A34AC
loc_4A3473:
    CMP dword ptr [r15], 4
    JA def_4A347C
loc_4A3479:
    MOV eax, [r15]
    JMP ds:jpt_4A347C[rax*8]
loc_4A3488:
    MOV ebx, 1
loc_4A348D:
    ADD rbx, rbp
    JB loc_4A3839
loc_4A3496:
    CMP rbx, 0FFFFFFFFFFFFFFFFh
    JZ loc_4A3839
loc_4A34A0:
    MOV rbp, rbx
loc_4A34A3:
    MOV r15, [r15+8]
    TEST r15, r15
    JNZ loc_4A3473
loc_4A34AC:
    MOV [r13+18h], rbp
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4A34C0:
    CALL _abort
loc_4A34C8:
    MOVZX eax, byte ptr [r15+10h]
    PXOR xmm4, xmm4
    PXOR xmm8, xmm8
    PXOR xmm6, xmm6
    MOVDQA xmm7, cs:xmmword_525A90
    MOV [rsp+48h+var_3C], eax
    XOR eax, eax
    MOVD xmm0, [rsp+48h+var_3C]
    PUNPCKLBW xmm0, xmm0
    PUNPCKLWD xmm0, xmm0
    PSHUFD xmm9, xmm0, 0
    NOP dword ptr [rax+00h]
loc_4A3500:
    MOVDQA xmm5, xmm7
    MOVDQA xmm0, cs:xmmword_525AB0
    MOVDQA xmm1, xmm7
    ADD eax, 1
    PADDD xmm0, xmm7
    PUNPCKLWD xmm5, xmm0
    CMP eax, 10h
    PUNPCKHWD xmm1, xmm0
    MOVDQA xmm3, cs:xmmword_525AD0
    MOVDQA xmm0, xmm5
    MOVDQA xmm2, xmm5
    PADDD xmm3, xmm7
    PXOR xmm5, xmm5
    PUNPCKHWD xmm2, xmm1
    PUNPCKLWD xmm0, xmm1
    MOVDQA xmm1, cs:xmmword_525AC0
    PADDD xmm1, xmm7
    PADDD xmm7, cs:xmmword_525AA0
    PUNPCKLWD xmm0, xmm2
    MOVDQA xmm2, xmm1
    PUNPCKLWD xmm1, xmm3
    PUNPCKHWD xmm2, xmm3
    MOVDQA xmm3, xmm1
    PAND xmm0, cs:xmmword_518B00
    PUNPCKHWD xmm3, xmm2
    PUNPCKLWD xmm1, xmm2
    PUNPCKLWD xmm1, xmm3
    PAND xmm1, cs:xmmword_518B00
    PACKUSWB xmm0, xmm1
    PCMPEQB xmm0, xmm9
    PAND xmm0, cs:xmmword_518B10
    MOVDQA xmm1, xmm0
    PUNPCKHBW xmm0, xmm5
    PUNPCKLBW xmm1, xmm5
    MOVDQA xmm2, xmm0
    MOVDQA xmm3, xmm1
    PUNPCKHWD xmm1, xmm8
    PUNPCKLWD xmm2, xmm8
    PUNPCKLWD xmm3, xmm8
    PUNPCKHWD xmm0, xmm8
    MOVDQA xmm5, xmm3
    PUNPCKHDQ xmm3, xmm6
    PUNPCKLDQ xmm5, xmm6
    PADDQ xmm4, xmm5
    PADDQ xmm4, xmm3
    MOVDQA xmm3, xmm1
    PUNPCKHDQ xmm1, xmm6
    PUNPCKLDQ xmm3, xmm6
    PADDQ xmm4, xmm3
    PADDQ xmm1, xmm4
    MOVDQA xmm4, xmm2
    PUNPCKHDQ xmm2, xmm6
    PUNPCKLDQ xmm4, xmm6
    PADDQ xmm1, xmm4
    MOVDQA xmm4, xmm0
    PADDQ xmm1, xmm2
    PUNPCKHDQ xmm0, xmm6
    PUNPCKLDQ xmm4, xmm6
    PADDQ xmm1, xmm4
    MOVDQA xmm4, xmm1
    PADDQ xmm4, xmm0
    JNZ loc_4A3500
loc_4A3619:
    MOVDQA xmm0, xmm4
    MOV byte ptr [r13+30h], 1
    PSRLDQ xmm0, 8
    PADDQ xmm4, xmm0
    MOVQ rbx, xmm4
    JMP loc_4A348D
loc_4A3638:
    MOV byte ptr [r13+31h], 1
    MOV r12d, [r15+10h]
    XOR r14d, r14d
    XOR ebx, ebx
    NOP word ptr [rax+rax+00000000h]
loc_4A3650:
    CMP r12d, 0Bh
    JA def_4A347C
loc_4A365A:
    MOV eax, r12d
    JMP ds:jpt_4A365D[rax*8]
loc_4A3668:
    MOVZX eax, byte ptr [r15+11h]
    MOVZX edx, byte ptr [r15+10h]
    CMP al, dl
    JB loc_4A385B
loc_4A367A:
    MOVZX ebx, al
    MOV eax, ebx
    SUB eax, edx
    LEA ebx, [rax+1]
    MOVSXD rbx, ebx
    JMP loc_4A348D
loc_4A3690:
    MOV rbx, [r15+18h]
    TEST rbx, rbx
    JNZ loc_4A348D
loc_4A369D:
    MOV [r13+28h], r15
    ADD qword ptr [r13+20h], 1
    JMP loc_4A34A3
loc_4A36B0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 100h
    MOVZX eax, ax
    NOP dword ptr [rax+00h]
loc_4A36C8:
    CMP eax, 1
    SBB rbx, 0FFFFFFFFFFFFFFFFh
    ADD r14, 2
    CMP r14, 200h
    JNZ loc_4A3650
loc_4A36E0:
    CMP r12d, 6
    JZ loc_4A348D
loc_4A36EA:
    CMP r12d, 0Ah
    JZ loc_4A348D
loc_4A36F4:
    MOV byte ptr [r13+32h], 1
    JMP loc_4A348D
loc_4A3700:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 2000h
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3720:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND eax, 4
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3738:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 4000h
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3758:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 200h
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3778:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 8000h
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3798:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 800h
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A37B8:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND eax, 2
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A37D0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND eax, 1
    JMP loc_4A36C8
loc_4A37E8:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 400h
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3808:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND eax, 8
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3820:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+r14]
    AND ax, 1000h
    MOVZX eax, ax
    JMP loc_4A36C8
loc_4A3839:
    MOV edx, 5
    MOV esi, offset aTooManyCharact
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4A385B:
    MOV ecx, offset aGetSpecStats
    MOV edx, 4EEh
    MOV esi, offset aSrcTrC
    MOV edi, offset aPURangeLastCha
    CALL ___assert_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x0', '0x4D52A0', '0x537430', '0x4D5280', '0x537210'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### Q 153 - single_binary_main_groups
```assembly
loc_43F9A0:
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rdi, [rsi]
    MOV rbx, rsi
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    XOR r8d, r8d
    MOV ecx, offset stru_4E4A60
    MOV edx, (offset a8+6)
    MOV rsi, rbx
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_43FA60
loc_43FA05:
    CMP eax, 0FFFFFF7Dh
    JZ loc_43FA20
loc_43FA0C:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_43FB58
loc_43FA17:
    XOR edi, edi
    CALL sub_43F6A0
loc_43FA20:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    PUSH 0
    MOV r9d, offset aJamesYoungman
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aGroups
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_43FA60:
    MOV eax, cs:optind
    CMP r12d, eax
    JZ loc_43FB90
loc_43FA6F:
    MOV ebp, 1
    JG loc_43FB07
loc_43FA7A:
    JMP loc_43FC2E
loc_43FA80:
    MOV r13d, [rax+14h]
    MOV r14d, [rax+10h]
    MOV esi, offset aS_5
    MOVSXD rax, cs:optind
    MOV edi, 1
    MOV rdx, [rbx+rax*8]
    XOR eax, eax
    CALL ___printf_chk
    MOVSXD rax, cs:optind
    MOV r9d, 20h
    MOV r8d, 1
    MOV ecx, r13d
    MOV edx, r13d
    MOV esi, r14d
    MOV rdi, [rbx+rax*8]
    CALL sub_43FD40
    MOV rdi, cs:stdout
    TEST al, al
    MOV eax, 0
    CMOVZ ebp, eax
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_43FB80
loc_43FAE8:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
loc_43FAF3:
    MOV eax, cs:optind
    ADD eax, 1
    CMP r12d, eax
    MOV cs:optind, eax
    JLE loc_43FB68
loc_43FB07:
    CDQE 
    MOV rdi, [rbx+rax*8]
    CALL _getpwnam
    TEST rax, rax
    JNZ loc_43FA80
loc_43FB1B:
    MOVSXD rax, cs:optind
    MOV rdi, [rbx+rax*8]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbp, rax
    MOV esi, offset aSNoSuchUser
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    XOR ebp, ebp
    CALL _error
    JMP loc_43FAF3
loc_43FB58:
    MOV edi, 1
    CALL sub_43F6A0
loc_43FB68:
    XOR ebp, 1
    MOVZX eax, bpl
loc_43FB6F:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_43FB80:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_43FAF3
loc_43FB90:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _getuid
    CMP eax, 0FFFFFFFFh
    MOV ebp, eax
    JNZ loc_43FBB4
loc_43FBAA:
    MOV esi, [rbx]
    TEST esi, esi
    JNZ loc_43FC4C
loc_43FBB4:
    MOV dword ptr [rbx], 0
    CALL _getegid
    CMP eax, 0FFFFFFFFh
    MOV r12d, eax
    JNZ loc_43FBD1
loc_43FBC7:
    MOV ecx, [rbx]
    TEST ecx, ecx
    JNZ loc_43FC6E
loc_43FBD1:
    MOV dword ptr [rbx], 0
    CALL _getgid
    CMP eax, 0FFFFFFFFh
    JNZ loc_43FBEB
loc_43FBE1:
    MOV edx, [rbx]
    TEST edx, edx
    JNZ loc_43FC90
loc_43FBEB:
    XOR edi, edi
    MOV r9d, 20h
    MOV r8d, 1
    MOV ecx, r12d
    MOV edx, eax
    MOV esi, ebp
    CALL sub_43FD40
    MOV rdi, cs:stdout
    MOV ebx, eax
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_43FC35
loc_43FC18:
    LEA rdx, [rax+1]
    XOR ebx, 1
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    MOVZX eax, bl
    JMP loc_43FB6F
loc_43FC2E:
    XOR eax, eax
    JMP loc_43FB6F
loc_43FC35:
    MOV esi, 0Ah
    CALL ___overflow
    MOV eax, ebx
    XOR eax, 1
    MOVZX eax, al
    JMP loc_43FB6F
loc_43FC4C:
    MOV edx, 5
    MOV esi, offset aCannotGetRealU
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_43FC6E:
    MOV edx, 5
    MOV esi, offset aCannotGetEffec
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_43FC90:
    MOV edx, 5
    MOV esi, offset aCannotGetRealG
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    NOP dword ptr [rax+00h]
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1000', '0x10000', '0x303', '0x697', '0x69F', '0x68D', '0x87', '0x16F', '0x14', '0x6C3', '0x41', '0x2', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Logic'}

##### T 153 - single_binary_main_groups
```assembly
loc_445300:
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rdi, [rsi]
    MOV rbx, rsi
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    XOR r8d, r8d
    MOV ecx, offset stru_5079A0
    MOV edx, (offset a8+6)
    MOV rsi, rbx
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_4453C0
loc_445365:
    CMP eax, 0FFFFFF7Dh
    JZ loc_445380
loc_44536C:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_4454B8
loc_445377:
    XOR edi, edi
    CALL sub_445000
loc_445380:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    PUSH 0
    MOV r9d, offset aJamesYoungman
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aGroups
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_4453C0:
    MOV eax, cs:optind
    CMP r12d, eax
    JZ loc_4454F0
loc_4453CF:
    MOV ebp, 1
    JG loc_445467
loc_4453DA:
    JMP loc_44558E
loc_4453E0:
    MOV r13d, [rax+14h]
    MOV r14d, [rax+10h]
    MOV esi, offset aS_6
    MOVSXD rax, cs:optind
    MOV edi, 1
    MOV rdx, [rbx+rax*8]
    XOR eax, eax
    CALL ___printf_chk
    MOVSXD rax, cs:optind
    MOV r9d, 20h
    MOV r8d, 1
    MOV ecx, r13d
    MOV edx, r13d
    MOV esi, r14d
    MOV rdi, [rbx+rax*8]
    CALL sub_445620
    MOV rdi, cs:stdout
    TEST al, al
    MOV eax, 0
    CMOVZ ebp, eax
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4454E0
loc_445448:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
loc_445453:
    MOV eax, cs:optind
    ADD eax, 1
    CMP r12d, eax
    MOV cs:optind, eax
    JLE loc_4454C8
loc_445467:
    CDQE 
    MOV rdi, [rbx+rax*8]
    CALL _getpwnam
    TEST rax, rax
    JNZ loc_4453E0
loc_44547B:
    MOVSXD rax, cs:optind
    MOV rdi, [rbx+rax*8]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbp, rax
    MOV esi, offset aSNoSuchUser
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    XOR ebp, ebp
    CALL _error
    JMP loc_445453
loc_4454B8:
    MOV edi, 1
    CALL sub_445000
loc_4454C8:
    XOR ebp, 1
    MOVZX eax, bpl
loc_4454CF:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4454E0:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_445453
loc_4454F0:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _getuid
    CMP eax, 0FFFFFFFFh
    MOV ebp, eax
    JNZ loc_445514
loc_44550A:
    MOV esi, [rbx]
    TEST esi, esi
    JNZ loc_4455AC
loc_445514:
    MOV dword ptr [rbx], 0
    CALL _getegid
    CMP eax, 0FFFFFFFFh
    MOV r12d, eax
    JNZ loc_445531
loc_445527:
    MOV ecx, [rbx]
    TEST ecx, ecx
    JNZ loc_4455CE
loc_445531:
    MOV dword ptr [rbx], 0
    CALL _getgid
    CMP eax, 0FFFFFFFFh
    JNZ loc_44554B
loc_445541:
    MOV edx, [rbx]
    TEST edx, edx
    JNZ loc_4455F0
loc_44554B:
    XOR edi, edi
    MOV r9d, 20h
    MOV r8d, 1
    MOV ecx, r12d
    MOV edx, eax
    MOV esi, ebp
    CALL sub_445620
    MOV rdi, cs:stdout
    MOV ebx, eax
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_445595
loc_445578:
    LEA rdx, [rax+1]
    XOR ebx, 1
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    MOVZX eax, bl
    JMP loc_4454CF
loc_44558E:
    XOR eax, eax
    JMP loc_4454CF
loc_445595:
    MOV esi, 0Ah
    CALL ___overflow
    MOV eax, ebx
    XOR eax, 1
    MOVZX eax, al
    JMP loc_4454CF
loc_4455AC:
    MOV edx, 5
    MOV esi, offset aCannotGetRealU
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4455CE:
    MOV edx, 5
    MOV esi, offset aCannotGetEffec
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4455F0:
    MOV edx, 5
    MOV esi, offset aCannotGetRealG
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    NOP dword ptr [rax+00h]
```
None

##### Q 154 - mkstemp_safer
```assembly
loc_4B7F80:
    SUB rsp, 8
    CALL _mkstemp
    ADD rsp, 8
    MOV edi, eax
    JMP sub_4B93D0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4000000000000000', '0xFFFFFFFFFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Computation'}

##### T 154 - mkstemp_safer
```assembly
loc_4D7D70:
    SUB rsp, 8
    CALL _mkstemp
    ADD rsp, 8
    MOV edi, eax
    JMP sub_4D95D0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x100', '0x80', '0x4000000000000000', '0xFFFFFFFFFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 155 - fts_read
```assembly
loc_4C0080:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, [rdi]
    TEST rbp, rbp
    JZ loc_4C01A8
loc_4C0094:
    MOV edx, [rdi+48h]
    TEST dh, 40h
    JNZ loc_4C01A8
loc_4C00A0:
    MOVZX eax, word ptr [rbp+74h]
    MOV ebx, 3
    MOV r12, rdi
    MOV [rbp+74h], bx
    CMP ax, 1
    JZ loc_4C0420
loc_4C00BA:
    CMP ax, 2
    JZ loc_4C01C0
loc_4C00C4:
    CMP word ptr [rbp+70h], 1
    JNZ loc_4C0108
loc_4C00CB:
    CMP ax, 4
    JNZ loc_4C01DB
loc_4C00D5:
    JMP loc_4C01F3
loc_4C00E0:
    MOV [r12], rbx
    MOV rdi, rbp
    CALL _free
    CMP qword ptr [rbx+58h], 0
    JZ loc_4C0240
loc_4C00F7:
    MOVZX eax, word ptr [rbx+74h]
    MOV rbp, rbx
    CMP ax, 4
    JNZ loc_4C0328
loc_4C0108:
    MOV rbx, [rbp+10h]
    TEST rbx, rbx
    JNZ loc_4C00E0
loc_4C0111:
    MOV r13, [rbp+8]
    CMP qword ptr [r13+18h], 0
    JNZ loc_4C0605
loc_4C0120:
    MOV [r12], r13
    MOV rdi, rbp
    CALL _free
    CMP qword ptr [r13+58h], 0FFFFFFFFFFFFFFFFh
    JZ loc_4C0504
loc_4C0137:
    CMP word ptr [r13+70h], 0Bh
    JZ loc_4C07B2
loc_4C0143:
    MOV rdx, [r12+20h]
    MOV rax, [r13+48h]
    MOV byte ptr [rdx+rax], 0
    CMP qword ptr [r13+58h], 0
    JZ loc_4C048F
loc_4C015B:
    MOVZX eax, word ptr [r13+72h]
    TEST al, 2
    JZ loc_4C0450
loc_4C0168:
    MOV eax, [r12+48h]
    TEST al, 4
    JZ loc_4C04B4
loc_4C0175:
    MOV edi, [r13+44h]
    CALL _close
loc_4C017E:
    CMP word ptr [r13+70h], 2
    JZ loc_4C019C
loc_4C0186:
    MOV ecx, [r13+40h]
    TEST ecx, ecx
    JZ loc_4C0436
loc_4C0192:
    MOV eax, 7
    MOV [r13+70h], ax
loc_4C019C:
    TEST byte ptr [r12+49h], 40h
    JZ loc_4C022E
loc_4C01A8:
    XOR r13d, r13d
    POP rbx
    MOV rax, r13
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4C01C0:
    MOVZX eax, word ptr [rbp+70h]
    LEA ecx, [rax-0Ch]
    CMP cx, 1
    JBE loc_4C04D3
loc_4C01D1:
    CMP ax, 1
    JNZ loc_4C0108
loc_4C01DB:
    TEST dl, 40h
    JZ loc_4C03A8
loc_4C01E4:
    MOV rax, [r12+18h]
    CMP [rbp+78h], rax
    JZ loc_4C03A8
loc_4C01F3:
    TEST byte ptr [rbp+72h], 2
    JNZ loc_4C05F8
loc_4C01FD:
    MOV rdi, [r12+8]
    TEST rdi, rdi
    JZ loc_4C0215
loc_4C0207:
    CALL sub_4BE950
    MOV qword ptr [r12+8], 0
loc_4C0215:
    MOV r10d, 6
    MOV rsi, rbp
    MOV rdi, r12
    MOV [rbp+70h], r10w
    MOV r13, rbp
    CALL sub_4BF0A0
loc_4C022E:
    POP rbx
    MOV rax, r13
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4C0240:
    MOV rdi, r12
    CALL sub_4BEC10
    TEST eax, eax
    JNZ loc_4C0572
loc_4C0250:
    MOV rdi, r12
    LEA r13, [rbx+108h]
    CALL sub_4BE990
    MOV rdx, [rbx+60h]
    MOV rdi, [r12+20h]
    MOV rsi, r13
    MOV [rbx+48h], rdx
    ADD rdx, 1
    CALL _memmove
    MOV esi, 2Fh
    MOV rdi, r13
    CALL _strrchr
    TEST rax, rax
    JZ loc_4C02B5
loc_4C028A:
    CMP r13, rax
    JZ loc_4C0560
loc_4C0293:
    LEA rbp, [rax+1]
    MOV rdi, rbp
    CALL _strlen
    LEA rdx, [rax+1]
    MOV r14, rax
    MOV rsi, rbp
    MOV rdi, r13
    CALL _memmove
    MOV [rbx+60h], r14
loc_4C02B5:
    MOV rax, [r12+20h]
    MOV rdi, r12
    MOV [rbx+38h], rax
    MOV [rbx+30h], rax
    CALL sub_4BECF0
    MOVZX eax, word ptr [rbx+70h]
loc_4C02CE:
    CMP ax, 0Bh
    MOV [r12], rbx
    JZ loc_4C037F
loc_4C02DC:
    CMP ax, 1
    MOV r13, rbx
    JNZ loc_4C022E
loc_4C02E9:
    CMP qword ptr [rbx+58h], 0
    JNZ loc_4C02F9
loc_4C02F0:
    MOV rax, [rbx+78h]
    MOV [r12+18h], rax
loc_4C02F9:
    MOV rsi, rbx
    MOV rdi, r12
    MOV r13, rbx
    CALL sub_4BEFF0
    TEST al, al
    JNZ loc_4C022E
loc_4C030F:
    CALL ___errno_location
    XOR r13d, r13d
    MOV dword ptr [rax], 0Ch
    JMP loc_4C022E
loc_4C0328:
    CMP ax, 2
    JZ loc_4C0638
loc_4C0332:
    MOV rsi, [rbx+8]
    MOV rcx, [r12+20h]
    MOV rdx, [rsi+48h]
    MOV rsi, [rsi+38h]
    CMP byte ptr [rsi+rdx-1], 2Fh
    LEA rax, [rdx-1]
    CMOVNZ rax, rdx
    MOV byte ptr [rcx+rax], 2Fh
    MOV rsi, [rbx+60h]
    LEA rdi, [rcx+rax+1]
    LEA rdx, [rsi+1]
    LEA rsi, [rbx+108h]
    CALL _memmove
    MOVZX eax, word ptr [rbx+70h]
    MOV [r12], rbx
    CMP ax, 0Bh
    JNZ loc_4C02DC
loc_4C037F:
    MOV rax, [rbx+0A8h]
    CMP rax, 2
    JZ loc_4C0580
loc_4C0390:
    CMP rax, 1
    JNZ loc_4C07B2
loc_4C039A:
    MOV r13, rbx
    JMP loc_4C022E
loc_4C03A8:
    MOV rdi, [r12+8]
    TEST rdi, rdi
    JZ loc_4C053D
loc_4C03B6:
    TEST dh, 20h
    JNZ loc_4C0527
loc_4C03BF:
    MOV rcx, [rbp+30h]
    MOV edx, 0FFFFFFFFh
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_4BEDA0
    TEST eax, eax
    JZ loc_4C04A1
loc_4C03DB:
    CALL ___errno_location
    MOV rbx, [r12+8]
    MOV eax, [rax]
    OR word ptr [rbp+72h], 1
    TEST rbx, rbx
    MOV [rbp+40h], eax
    JZ loc_4C04A6
loc_4C03F8:
    MOV rax, rbx
    NOP dword ptr [rax+rax+00h]
loc_4C0400:
    MOV rdx, [rax+8]
    MOV rdx, [rdx+30h]
    MOV [rax+30h], rdx
    MOV rax, [rax+10h]
    TEST rax, rax
    JNZ loc_4C0400
loc_4C0415:
    JMP loc_4C04A6
loc_4C0420:
    XOR edx, edx
    MOV rsi, rbp
    MOV r13, rbp
    CALL sub_4BE5E0
    MOV [rbp+70h], ax
    JMP loc_4C022E
loc_4C0436:
    MOV edx, 6
    MOV rsi, r13
    MOV rdi, r12
    MOV [r13+70h], dx
    CALL sub_4BF0A0
    JMP loc_4C019C
loc_4C0450:
    TEST al, 1
    JNZ loc_4C017E
loc_4C0458:
    MOV rsi, [r13+8]
    MOV ecx, 4F87DBh
    MOV edx, 0FFFFFFFFh
    MOV rdi, r12
    CALL sub_4BEDA0
    TEST eax, eax
    JZ loc_4C017E
loc_4C0476:
    CALL ___errno_location
    MOV eax, [rax]
    MOV [r13+40h], eax
    OR dword ptr [r12+48h], 4000h
    JMP loc_4C017E
loc_4C048F:
    MOV rdi, r12
    CALL sub_4BEC10
    TEST eax, eax
    JZ loc_4C017E
loc_4C049F:
    JMP loc_4C0476
loc_4C04A1:
    MOV rbx, [r12+8]
loc_4C04A6:
    MOV qword ptr [r12+8], 0
    JMP loc_4C0332
loc_4C04B4:
    TEST ah, 2
    JZ loc_4C0660
loc_4C04BD:
    MOV esi, [r13+44h]
    MOV edx, 1
    MOV rdi, r12
    CALL sub_4BEBA0
    JMP loc_4C0175
loc_4C04D3:
    MOV edx, 1
    MOV rsi, rbp
    CALL sub_4BE5E0
    CMP ax, 1
    MOV [rbp+70h], ax
    JZ loc_4C068A
loc_4C04EE:
    CMP ax, 0Bh
    MOV [r12], rbp
    JZ loc_4C06BA
loc_4C04FC:
    MOV r13, rbp
    JMP loc_4C022E
loc_4C0504:
    MOV rdi, r13
    XOR r13d, r13d
    CALL _free
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV qword ptr [r12], 0
    JMP loc_4C022E
loc_4C0527:
    AND dh, 0DFh
    MOV [r12+48h], edx
    CALL sub_4BE950
    MOV qword ptr [r12+8], 0
loc_4C053D:
    MOV esi, 3
    MOV rdi, r12
    CALL sub_4BF160
    TEST rax, rax
    MOV [r12+8], rax
    JZ loc_4C071A
loc_4C0558:
    MOV rbx, rax
    JMP loc_4C04A6
loc_4C0560:
    CMP byte ptr [rbx+109h], 0
    JNZ loc_4C0293
loc_4C056D:
    JMP loc_4C02B5
loc_4C0572:
    OR dword ptr [r12+48h], 4000h
    JMP loc_4C01A8
loc_4C0580:
    MOV rbp, [rbx+8]
    CMP qword ptr [rbp+68h], 0
    JNZ loc_4C059C
loc_4C058B:
    MOV eax, [r12+48h]
    AND eax, 18h
    CMP eax, 18h
    JZ loc_4C0700
loc_4C059C:
    XOR edx, edx
    MOV rsi, rbx
    MOV rdi, r12
    CALL sub_4BE5E0
    MOV edx, [rbx+90h]
    MOV [rbx+70h], ax
    AND edx, 0F000h
    CMP edx, 4000h
    JNZ loc_4C02DC
loc_4C05C5:
    CMP qword ptr [rbx+58h], 0
    JZ loc_4C06F1
loc_4C05D0:
    MOV rcx, [rbp+68h]
    LEA rdx, [rcx-1]
    CMP rdx, 0FFFFFFFFFFFFFFFDh
    JA loc_4C05E2
loc_4C05DE:
    MOV [rbp+68h], rdx
loc_4C05E2:
    CMP ax, 1
    JNZ loc_4C039A
loc_4C05EC:
    JMP loc_4C02F9
loc_4C05F8:
    MOV edi, [rbp+44h]
    CALL _close
    JMP loc_4C01FD
loc_4C0605:
    MOV rdx, [r12+20h]
    MOV rax, [r13+48h]
    MOV esi, 3
    MOV [r12], r13
    MOV rdi, r12
    MOV byte ptr [rdx+rax], 0
    CALL sub_4BF160
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4C06A5
loc_4C062B:
    MOV rdi, rbp
    CALL _free
    JMP loc_4C0332
loc_4C0638:
    MOV edx, 1
    MOV rsi, rbx
    MOV rdi, r12
    CALL sub_4BE5E0
    CMP ax, 1
    MOV [rbx+70h], ax
    JZ loc_4C06C2
loc_4C0652:
    MOV esi, 3
    MOV [rbx+74h], si
    JMP loc_4C0332
loc_4C0660:
    MOV edi, [r13+44h]
    CALL _fchdir
    TEST eax, eax
    JZ loc_4C0175
loc_4C0671:
    CALL ___errno_location
    MOV eax, [rax]
    MOV [r13+40h], eax
    OR dword ptr [r12+48h], 4000h
    JMP loc_4C0175
loc_4C068A:
    MOV esi, [r12+48h]
    TEST sil, 4
    JZ loc_4C0754
loc_4C0699:
    MOV [r12], rbp
    MOV rbx, rbp
    JMP loc_4C02DC
loc_4C06A5:
    TEST byte ptr [r12+49h], 40h
    JNZ loc_4C01A8
loc_4C06B1:
    MOV r13, [rbp+8]
    JMP loc_4C0120
loc_4C06BA:
    MOV rbx, rbp
    JMP loc_4C037F
loc_4C06C2:
    MOV esi, [r12+48h]
    TEST sil, 4
    JNZ loc_4C0652
loc_4C06CD:
    MOV edi, [r12+2Ch]
    MOV edx, 4C9103h
    CALL sub_4BED50
    TEST eax, eax
    MOV [rbx+44h], eax
    JS loc_4C077B
loc_4C06E7:
    OR word ptr [rbx+72h], 2
    JMP loc_4C0652
loc_4C06F1:
    CMP ax, 1
    JNZ loc_4C039A
loc_4C06FB:
    JMP loc_4C02F0
loc_4C0700:
    MOV rdi, rbp
    CALL sub_4BEB40
    CMP eax, 2
    JNZ loc_4C059C
loc_4C0711:
    MOVZX eax, word ptr [rbx+70h]
    JMP loc_4C02DC
loc_4C071A:
    TEST byte ptr [r12+49h], 40h
    JNZ loc_4C01A8
loc_4C0726:
    MOV r9d, [rbp+40h]
    TEST r9d, r9d
    JZ loc_4C0741
loc_4C072F:
    CMP word ptr [rbp+70h], 4
    JZ loc_4C0741
loc_4C0736:
    MOV r8d, 7
    MOV [rbp+70h], r8w
loc_4C0741:
    MOV rsi, rbp
    MOV rdi, r12
    MOV r13, rbp
    CALL sub_4BF0A0
    JMP loc_4C022E
loc_4C0754:
    MOV edi, [r12+2Ch]
    MOV edx, 4C9103h
    CALL sub_4BED50
    TEST eax, eax
    MOV [rbp+44h], eax
    JS loc_4C0793
loc_4C076A:
    OR word ptr [rbp+72h], 2
    MOVZX eax, word ptr [rbp+70h]
    MOV rbx, rbp
    JMP loc_4C02CE
loc_4C077B:
    CALL ___errno_location
    MOV eax, [rax]
    MOV edi, 7
    MOV [rbx+70h], di
    MOV [rbx+40h], eax
    JMP loc_4C0652
loc_4C0793:
    CALL ___errno_location
    MOV eax, [rax]
    MOV r11d, 7
    MOV [rbp+70h], r11w
    MOV [rbp+40h], eax
    MOV eax, 7
    JMP loc_4C0699
loc_4C07B2:
    CALL _abort
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 155 - fts_read
```assembly
loc_4E2660:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 60h
    MOV rbp, [rdi]
    MOV rax, fs:28h
    MOV [rsp+88h+var_30], rax
    XOR eax, eax
    TEST rbp, rbp
    JZ loc_4E28EE
loc_4E2688:
    MOV edx, [rdi+48h]
    MOV r12, rdi
    TEST dh, 40h
    JNZ loc_4E28EE
loc_4E2697:
    MOVZX eax, word ptr [rbp+74h]
    MOV ecx, 3
    MOV [rbp+74h], cx
    CMP ax, 1
    JZ loc_4E2BA0
loc_4E26AE:
    CMP ax, 2
    JZ loc_4E27F8
loc_4E26B8:
    CMP word ptr [rbp+70h], 1
    JNZ loc_4E26F8
loc_4E26BF:
    CMP ax, 4
    JNZ loc_4E2813
loc_4E26C9:
    JMP loc_4E282B
loc_4E26D0:
    MOV [r12], rbx
    MOV rdi, rbp
    CALL _free
    CMP qword ptr [rbx+58h], 0
    JZ loc_4E2900
loc_4E26E7:
    MOVZX eax, word ptr [rbx+74h]
    MOV rbp, rbx
    CMP ax, 4
    JNZ loc_4E2A80
loc_4E26F8:
    MOV rbx, [rbp+10h]
    TEST rbx, rbx
    JNZ loc_4E26D0
loc_4E2701:
    MOV r13, [rbp+8]
    CMP qword ptr [r13+18h], 0
    JNZ loc_4E2E8C
loc_4E2710:
    MOV [r12], r13
    MOV rdi, rbp
    CALL _free
    CMP qword ptr [r13+58h], 0FFFFFFFFFFFFFFFFh
    JZ loc_4E2D38
loc_4E2727:
    CMP word ptr [r13+70h], 0Bh
    JZ loc_4E30E8
loc_4E2733:
    MOV rdx, [r12+20h]
    MOV rax, [r13+48h]
    MOV byte ptr [rdx+rax], 0
    CMP qword ptr [r13+58h], 0
    JZ loc_4E2C9B
loc_4E274B:
    MOVZX eax, word ptr [r13+72h]
    TEST al, 2
    JZ loc_4E2C58
loc_4E2758:
    MOV eax, [r12+48h]
    TEST al, 4
    JNZ loc_4E279A
loc_4E2761:
    TEST ah, 2
    JZ loc_4E2EE9
loc_4E276A:
    MOV ebx, [r13+44h]
    MOV esi, [r12+2Ch]
    CMP ebx, esi
    JNZ loc_4E2780
loc_4E2777:
    CMP esi, 0FFFFFF9Ch
    JNZ loc_4E30E8
loc_4E2780:
    LEA rdi, [r12+60h]
    CALL sub_4E5530
    TEST eax, eax
    JS loc_4E2795
loc_4E278E:
    MOV edi, eax
    CALL _close
loc_4E2795:
    MOV [r12+2Ch], ebx
loc_4E279A:
    MOV edi, [r13+44h]
    CALL _close
loc_4E27A3:
    MOV eax, [r12+48h]
loc_4E27A8:
    CMP word ptr [r13+70h], 2
    JZ loc_4E27C6
loc_4E27B0:
    MOV esi, [r13+40h]
    TEST esi, esi
    JZ loc_4E2BDF
loc_4E27BC:
    MOV edx, 7
    MOV [r13+70h], dx
loc_4E27C6:
    TEST ah, 40h
    JNZ loc_4E28EE
loc_4E27CF:
    NOP 
loc_4E27D0:
    MOV rcx, [rsp+88h+var_30]
    XOR rcx, fs:28h
    MOV rax, r13
    JNZ loc_4E3152
loc_4E27E7:
    ADD rsp, 60h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4E27F8:
    MOVZX eax, word ptr [rbp+70h]
    LEA ecx, [rax-0Ch]
    CMP cx, 1
    JBE loc_4E2CBF
loc_4E2809:
    CMP ax, 1
    JNZ loc_4E26F8
loc_4E2813:
    TEST dl, 40h
    JZ loc_4E2AF8
loc_4E281C:
    MOV rax, [r12+18h]
    CMP [rbp+78h], rax
    JZ loc_4E2AF8
loc_4E282B:
    TEST byte ptr [rbp+72h], 2
    JNZ loc_4E2E50
loc_4E2835:
    MOV rbx, [r12+8]
    TEST rbx, rbx
    JZ loc_4E286B
loc_4E283F:
    NOP 
loc_4E2840:
    MOV rdi, [rbx+18h]
    MOV r13, [rbx+10h]
    TEST rdi, rdi
    JZ loc_4E2852
loc_4E284D:
    CALL _closedir
loc_4E2852:
    MOV rdi, rbx
    MOV rbx, r13
    CALL _free
    TEST r13, r13
    JNZ loc_4E2840
loc_4E2862:
    MOV qword ptr [r12+8], 0
loc_4E286B:
    TEST dword ptr [r12+48h], 102h
    MOV r13d, 6
    MOV [rbp+70h], r13w
    JNZ loc_4E2E5D
loc_4E2885:
    MOV rax, [rbp+8]
    TEST rax, rax
    JZ loc_4E2CE8
loc_4E2892:
    CMP qword ptr [rax+58h], 0
    JS loc_4E2CE8
loc_4E289D:
    MOV rdx, [r12+58h]
    CMP qword ptr [rdx+10h], 0
    JZ loc_4E30E8
loc_4E28AD:
    MOV rcx, [rbp+80h]
    CMP [rdx], rcx
    MOV r13, rbp
    JNZ loc_4E27D0
loc_4E28C0:
    MOV rcx, [rbp+78h]
    CMP [rdx+8], rcx
    JNZ loc_4E27D0
loc_4E28CE:
    MOV rcx, [rax+78h]
    MOV rax, [rax+80h]
    MOV [rdx+8], rcx
    MOV [rdx], rax
    JMP loc_4E27D0
loc_4E28E5:
    OR dword ptr [r12+48h], 4000h
loc_4E28EE:
    XOR r13d, r13d
    JMP loc_4E27D0
loc_4E2900:
    MOV rdi, r12
    CALL sub_4E0910
    TEST eax, eax
    JNZ loc_4E28E5
loc_4E290C:
    TEST dword ptr [r12+48h], 102h
    MOV rdi, [r12+58h]
    JZ loc_4E2D60
loc_4E2920:
    TEST rdi, rdi
    JZ loc_4E292A
loc_4E2925:
    CALL sub_4C30E0
loc_4E292A:
    MOV rdx, [rbx+60h]
    LEA r13, [rbx+108h]
    MOV rdi, [r12+20h]
    MOV rsi, r13
    MOV [rbx+48h], rdx
    ADD rdx, 1
    CALL _memmove
    MOV esi, 2Fh
    MOV rdi, r13
    CALL _strrchr
    TEST rax, rax
    JZ loc_4E2987
loc_4E295C:
    CMP r13, rax
    JZ loc_4E2DC6
loc_4E2965:
    LEA rbp, [rax+1]
    MOV rdi, rbp
    CALL _strlen
    LEA rdx, [rax+1]
    MOV r14, rax
    MOV rsi, rbp
    MOV rdi, r13
    CALL _memmove
    MOV [rbx+60h], r14
loc_4E2987:
    TEST dword ptr [r12+48h], 102h
    MOV rax, [r12+20h]
    MOV [rbx+38h], rax
    MOV [rbx+30h], rax
    JZ loc_4E2BB6
loc_4E29A3:
    MOV r8d, offset _free
    MOV ecx, offset sub_4E06E0
    MOV edx, offset sub_4E0700
    XOR esi, esi
    MOV edi, 1Fh
    CALL sub_4C2D80
    MOV [r12+58h], rax
    MOVZX eax, word ptr [rbx+70h]
loc_4E29C8:
    CMP ax, 0Bh
    MOV [r12], rbx
    JZ loc_4E2AD7
loc_4E29D6:
    CMP ax, 1
    MOV r13, rbx
    JNZ loc_4E27D0
loc_4E29E3:
    CMP qword ptr [rbx+58h], 0
    JNZ loc_4E29F3
loc_4E29EA:
    MOV rax, [rbx+78h]
    MOV [r12+18h], rax
loc_4E29F3:
    TEST dword ptr [r12+48h], 102h
    JZ loc_4E2B70
loc_4E2A02:
    MOV edi, 18h
    CALL _malloc
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4E2D25
loc_4E2A18:
    MOV rax, [rbx+78h]
    MOV rdi, [r12+58h]
    MOV rsi, rbp
    MOV [rbp+0], rax
    MOV rax, [rbx+80h]
    MOV [rbp+10h], rbx
    MOV [rbp+8], rax
    CALL sub_4C3760
    CMP rbp, rax
    MOV r12, rax
    JZ loc_4E2A70
loc_4E2A44:
    MOV rdi, rbp
    CALL _free
    TEST r12, r12
    JZ loc_4E2D25
loc_4E2A55:
    MOV rax, [r12+10h]
    MOV r8d, 2
    MOV [rbx+70h], r8w
    MOV [rbx], rax
    NOP dword ptr [rax+rax+00000000h]
loc_4E2A70:
    MOV r13, rbx
    JMP loc_4E27D0
loc_4E2A80:
    CMP ax, 2
    JZ loc_4E2EBF
loc_4E2A8A:
    MOV rsi, [rbx+8]
    MOV rcx, [r12+20h]
    MOV rdx, [rsi+48h]
    MOV rsi, [rsi+38h]
    CMP byte ptr [rsi+rdx-1], 2Fh
    LEA rax, [rdx-1]
    CMOVNZ rax, rdx
    MOV byte ptr [rcx+rax], 2Fh
    MOV rsi, [rbx+60h]
    LEA rdi, [rcx+rax+1]
    LEA rdx, [rsi+1]
    LEA rsi, [rbx+108h]
    CALL _memmove
loc_4E2AC5:
    MOVZX eax, word ptr [rbx+70h]
    MOV [r12], rbx
    CMP ax, 0Bh
    JNZ loc_4E29D6
loc_4E2AD7:
    MOV rax, [rbx+0A8h]
    CMP rax, 2
    JZ loc_4E2DD8
loc_4E2AE8:
    CMP rax, 1
    JZ loc_4E2A70
loc_4E2AEE:
    JMP loc_4E30E8
loc_4E2AF8:
    MOV rbx, [r12+8]
    TEST rbx, rbx
    JZ loc_4E2DA3
loc_4E2B06:
    TEST dh, 20h
    JNZ loc_4E2D6A
loc_4E2B0F:
    MOV rcx, [rbp+30h]
    MOV edx, 0FFFFFFFFh
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_4E0B60
    TEST eax, eax
    JZ loc_4E2CAC
loc_4E2B2B:
    CALL ___errno_location
    MOV rbx, [r12+8]
    MOV eax, [rax]
    OR word ptr [rbp+72h], 1
    TEST rbx, rbx
    MOV [rbp+40h], eax
    JZ loc_4E2CB1
loc_4E2B48:
    MOV rax, rbx
    NOP dword ptr [rax+rax+00h]
loc_4E2B50:
    MOV rdx, [rax+8]
    MOV rdx, [rdx+30h]
    MOV [rax+30h], rdx
    MOV rax, [rax+10h]
    TEST rax, rax
    JNZ loc_4E2B50
loc_4E2B65:
    JMP loc_4E2CB1
loc_4E2B70:
    MOV rdi, [r12+58h]
    LEA rsi, [rbx+78h]
    CALL sub_4E5260
    TEST al, al
    JZ loc_4E2A70
loc_4E2B86:
    MOV edi, 2
    MOV [rbx], rbx
    MOV [rbx+70h], di
    JMP loc_4E2A70
loc_4E2BA0:
    XOR edx, edx
    MOV rsi, rbp
    MOV r13, rbp
    CALL sub_4E0760
    MOV [rbp+70h], ax
    JMP loc_4E27D0
loc_4E2BB6:
    MOV edi, 20h
    CALL _malloc
    TEST rax, rax
    MOV [r12+58h], rax
    JZ loc_4E2AC5
loc_4E2BCE:
    MOV rdi, rax
    CALL sub_4E5250
    MOVZX eax, word ptr [rbx+70h]
    JMP loc_4E29C8
loc_4E2BDF:
    MOV ecx, 6
    TEST eax, 102h
    MOV [r13+70h], cx
    JNZ loc_4E2CF0
loc_4E2BF4:
    MOV rdx, [r13+8]
    TEST rdx, rdx
    JZ loc_4E27C6
loc_4E2C01:
    CMP qword ptr [rdx+58h], 0
    JS loc_4E27C6
loc_4E2C0C:
    MOV rcx, [r12+58h]
    CMP qword ptr [rcx+10h], 0
    JZ loc_4E30E8
loc_4E2C1C:
    MOV rsi, [r13+80h]
    CMP [rcx], rsi
    JNZ loc_4E27C6
loc_4E2C2C:
    MOV rsi, [r13+78h]
    CMP [rcx+8], rsi
    JNZ loc_4E27C6
loc_4E2C3A:
    MOV rsi, [rdx+78h]
    MOV rdx, [rdx+80h]
    MOV [rcx+8], rsi
    MOV [rcx], rdx
    JMP loc_4E27C6
loc_4E2C58:
    TEST al, 1
    JNZ loc_4E27A3
loc_4E2C60:
    MOV rsi, [r13+8]
    MOV ecx, 51B79Bh
    MOV edx, 0FFFFFFFFh
    MOV rdi, r12
    CALL sub_4E0B60
    TEST eax, eax
    JZ loc_4E27A3
loc_4E2C7E:
    CALL ___errno_location
    MOV eax, [rax]
    MOV [r13+40h], eax
    MOV eax, [r12+48h]
    OR ah, 40h
    MOV [r12+48h], eax
    JMP loc_4E27A8
loc_4E2C9B:
    MOV rdi, r12
    CALL sub_4E0910
    TEST eax, eax
    JNZ loc_4E2C7E
loc_4E2CA7:
    JMP loc_4E27A3
loc_4E2CAC:
    MOV rbx, [r12+8]
loc_4E2CB1:
    MOV qword ptr [r12+8], 0
    JMP loc_4E2A8A
loc_4E2CBF:
    MOV edx, 1
    MOV rsi, rbp
    CALL sub_4E0760
    CMP ax, 1
    MOV [rbp+70h], ax
    JZ loc_4E2F28
loc_4E2CDA:
    CMP ax, 0Bh
    MOV [r12], rbp
    JZ loc_4E2F42
loc_4E2CE8:
    MOV r13, rbp
    JMP loc_4E27D0
loc_4E2CF0:
    MOV rdi, [r12+58h]
    LEA rsi, [rsp+88h+var_48]
    MOVDQU xmm0, xmmword ptr [r13+78h]
    MOVAPS [rsp+88h+var_48], xmm0
    CALL sub_4C3A70
    TEST rax, rax
    JZ loc_4E30E8
loc_4E2D13:
    MOV rdi, rax
    CALL _free
    MOV eax, [r12+48h]
    JMP loc_4E27C6
loc_4E2D25:
    CALL ___errno_location
    XOR r13d, r13d
    MOV dword ptr [rax], 0Ch
    JMP loc_4E27D0
loc_4E2D38:
    MOV rdi, r13
    XOR r13d, r13d
    CALL _free
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV qword ptr [r12], 0
    JMP loc_4E27D0
loc_4E2D60:
    CALL _free
    JMP loc_4E292A
loc_4E2D6A:
    AND dh, 0DFh
    MOV [r12+48h], edx
    NOP word ptr [rax+rax+00h]
loc_4E2D78:
    MOV rdi, [rbx+18h]
    MOV r13, [rbx+10h]
    TEST rdi, rdi
    JZ loc_4E2D8A
loc_4E2D85:
    CALL _closedir
loc_4E2D8A:
    MOV rdi, rbx
    MOV rbx, r13
    CALL _free
    TEST r13, r13
    JNZ loc_4E2D78
loc_4E2D9A:
    MOV qword ptr [r12+8], 0
loc_4E2DA3:
    MOV esi, 3
    MOV rdi, r12
    CALL sub_4E0E80
    TEST rax, rax
    MOV [r12+8], rax
    JZ loc_4E2FD4
loc_4E2DBE:
    MOV rbx, rax
    JMP loc_4E2CB1
loc_4E2DC6:
    CMP byte ptr [rbx+109h], 0
    JNZ loc_4E2965
loc_4E2DD3:
    JMP loc_4E2987
loc_4E2DD8:
    MOV rbp, [rbx+8]
    CMP qword ptr [rbp+68h], 0
    JNZ loc_4E2DF4
loc_4E2DE3:
    MOV eax, [r12+48h]
    AND eax, 18h
    CMP eax, 18h
    JZ loc_4E2FBA
loc_4E2DF4:
    XOR edx, edx
    MOV rsi, rbx
    MOV rdi, r12
    CALL sub_4E0760
    MOV edx, [rbx+90h]
    MOV [rbx+70h], ax
    AND edx, 0F000h
    CMP edx, 4000h
    JNZ loc_4E29D6
loc_4E2E1D:
    CMP qword ptr [rbx+58h], 0
    JZ loc_4E2FAB
loc_4E2E28:
    MOV rcx, [rbp+68h]
    LEA rdx, [rcx-1]
    CMP rdx, 0FFFFFFFFFFFFFFFDh
    JA loc_4E2E3A
loc_4E2E36:
    MOV [rbp+68h], rdx
loc_4E2E3A:
    CMP ax, 1
    JNZ loc_4E2A70
loc_4E2E44:
    JMP loc_4E29F3
loc_4E2E50:
    MOV edi, [rbp+44h]
    CALL _close
    JMP loc_4E2835
loc_4E2E5D:
    MOV rdi, [r12+58h]
    MOV rsi, rsp
    MOVDQU xmm0, xmmword ptr [rbp+78h]
    MOVAPS [rsp+88h+var_88], xmm0
    CALL sub_4C3A70
    TEST rax, rax
    JZ loc_4E30E8
loc_4E2E7C:
    MOV rdi, rax
    MOV r13, rbp
    CALL _free
    JMP loc_4E27D0
loc_4E2E8C:
    MOV rdx, [r12+20h]
    MOV rax, [r13+48h]
    MOV esi, 3
    MOV [r12], r13
    MOV rdi, r12
    MOV byte ptr [rdx+rax], 0
    CALL sub_4E0E80
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4E2F13
loc_4E2EB2:
    MOV rdi, rbp
    CALL _free
    JMP loc_4E2A8A
loc_4E2EBF:
    MOV edx, 1
    MOV rsi, rbx
    MOV rdi, r12
    CALL sub_4E0760
    CMP ax, 1
    MOV [rbx+70h], ax
    JZ loc_4E2F4A
loc_4E2ED9:
    MOV r9d, 3
    MOV [rbx+74h], r9w
    JMP loc_4E2A8A
loc_4E2EE9:
    MOV edi, [r13+44h]
    CALL _fchdir
    TEST eax, eax
    JZ loc_4E279A
loc_4E2EFA:
    CALL ___errno_location
    MOV eax, [rax]
    MOV [r13+40h], eax
    OR dword ptr [r12+48h], 4000h
    JMP loc_4E279A
loc_4E2F13:
    TEST byte ptr [r12+49h], 40h
    JNZ loc_4E28EE
loc_4E2F1F:
    MOV r13, [rbp+8]
    JMP loc_4E2710
loc_4E2F28:
    MOV ecx, [r12+48h]
    TEST cl, 4
    JZ loc_4E3070
loc_4E2F36:
    MOV [r12], rbp
    MOV rbx, rbp
    JMP loc_4E29D6
loc_4E2F42:
    MOV rbx, rbp
    JMP loc_4E2AD7
loc_4E2F4A:
    MOV ecx, [r12+48h]
    TEST cl, 4
    JNZ loc_4E2ED9
loc_4E2F54:
    MOV edx, ecx
    AND edx, 10h
    CMP edx, 1
    SBB eax, eax
    AND eax, 0FFFE0000h
    ADD eax, 0F0900h
    CMP edx, 1
    SBB edx, edx
    AND edx, 0FFFE0000h
    ADD edx, 0B0900h
    TEST ch, 8
    CMOVNZ edx, eax
    AND ch, 2
    JNZ loc_4E313C
loc_4E2F88:
    MOV esi, edx
    MOV edi, 4EBDA3h
    XOR eax, eax
    CALL sub_4BF320
loc_4E2F96:
    TEST eax, eax
    MOV [rbx+44h], eax
    JS loc_4E3122
loc_4E2FA1:
    OR word ptr [rbx+72h], 2
    JMP loc_4E2ED9
loc_4E2FAB:
    CMP ax, 1
    JNZ loc_4E2A70
loc_4E2FB5:
    JMP loc_4E29EA
loc_4E2FBA:
    MOV rdi, rbp
    CALL sub_4E09B0
    CMP eax, 2
    JNZ loc_4E2DF4
loc_4E2FCB:
    MOVZX eax, word ptr [rbx+70h]
    JMP loc_4E29D6
loc_4E2FD4:
    MOV eax, [r12+48h]
    TEST ah, 40h
    JNZ loc_4E28EE
loc_4E2FE2:
    MOV ebx, [rbp+40h]
    TEST ebx, ebx
    JZ loc_4E2FFB
loc_4E2FE9:
    CMP word ptr [rbp+70h], 4
    JZ loc_4E2FFB
loc_4E2FF0:
    MOV r11d, 7
    MOV [rbp+70h], r11w
loc_4E2FFB:
    TEST eax, 102h
    JNZ loc_4E30C6
loc_4E3006:
    MOV rdx, [rbp+8]
    TEST rdx, rdx
    JZ loc_4E2CE8
loc_4E3013:
    CMP qword ptr [rdx+58h], 0
    JS loc_4E2CE8
loc_4E301E:
    MOV rax, [r12+58h]
    CMP qword ptr [rax+10h], 0
    JZ loc_4E30E8
loc_4E302E:
    MOV rcx, [rbp+80h]
    CMP [rax], rcx
    MOV r13, rbp
    JNZ loc_4E27D0
loc_4E3041:
    MOV rcx, [rbp+78h]
    CMP [rax+8], rcx
    JNZ loc_4E27D0
loc_4E304F:
    MOV rcx, [rdx+78h]
    MOV rdx, [rdx+80h]
    MOV [rax+8], rcx
    MOV [rax], rdx
    JMP loc_4E27D0
loc_4E3070:
    MOV edx, ecx
    AND edx, 10h
    CMP edx, 1
    SBB eax, eax
    AND eax, 0FFFE0000h
    ADD eax, 0F0900h
    CMP edx, 1
    SBB edx, edx
    AND edx, 0FFFE0000h
    ADD edx, 0B0900h
    TEST ch, 8
    CMOVNZ edx, eax
    AND ch, 2
    JNZ loc_4E310F
loc_4E30A0:
    MOV esi, edx
    MOV edi, 4EBDA3h
    XOR eax, eax
    CALL sub_4BF320
loc_4E30AE:
    TEST eax, eax
    MOV [rbp+44h], eax
    JS loc_4E30F0
loc_4E30B5:
    OR word ptr [rbp+72h], 2
    MOVZX eax, word ptr [rbp+70h]
    MOV rbx, rbp
    JMP loc_4E29C8
loc_4E30C6:
    MOV rdi, [r12+58h]
    LEA rsi, [rsp+88h+var_68]
    MOVDQU xmm0, xmmword ptr [rbp+78h]
    MOVAPS [rsp+88h+var_68], xmm0
    CALL sub_4C3A70
    TEST rax, rax
    JNZ loc_4E2E7C
loc_4E30E8:
    CALL _abort
loc_4E30F0:
    CALL ___errno_location
    MOV eax, [rax]
    MOV r14d, 7
    MOV [rbp+70h], r14w
    MOV [rbp+40h], eax
    MOV eax, 7
    JMP loc_4E2F36
loc_4E310F:
    MOV edi, [r12+2Ch]
    MOV esi, 4EBDA3h
    XOR eax, eax
    CALL sub_4E7DC0
    JMP loc_4E30AE
loc_4E3122:
    CALL ___errno_location
    MOV eax, [rax]
    MOV r10d, 7
    MOV [rbx+70h], r10w
    MOV [rbx+40h], eax
    JMP loc_4E2ED9
loc_4E313C:
    MOV edi, [r12+2Ch]
    MOV esi, 4EBDA3h
    XOR eax, eax
    CALL sub_4E7DC0
    JMP loc_4E2F96
loc_4E3152:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### Q 156 - copy_acl
```assembly
loc_495CE0:
    PUSH r12
    PUSH rbp
    MOV r12, rdi
    PUSH rbx
    MOV rbp, rdx
    CALL sub_4B3940
    CMP eax, 0FFFFFFFEh
    MOV ebx, eax
    JZ loc_495D40
loc_495CF6:
    CMP eax, 0FFFFFFFFh
    JNZ loc_495D30
loc_495CFB:
    MOV rdi, rbp
    CALL sub_4B5440
    MOV edx, 5
    MOV esi, offset aPreservingPerm
    XOR edi, edi
    MOV r12, rax
    CALL _dcgettext
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r12
    MOV rdx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_495D30:
    MOV eax, ebx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_495D40:
    MOV rdi, r12
    CALL sub_4B5440
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    XOR eax, eax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    CALL _error
    MOV eax, ebx
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x100', '0x2', '0xA6', '0xA3', '0x9B', '0x97', '0x9F', '0xFFFFFFFEh', '0xFFFFFFFFh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing/Checksumming', 'inferred_category': 'Cryptographic'}

##### T 156 - copy_acl
```assembly
loc_4AFA60:
    PUSH r12
    PUSH rbp
    MOV r12, rdi
    PUSH rbx
    MOV rbp, rdx
    CALL sub_4D0F70
    CMP eax, 0FFFFFFFEh
    MOV ebx, eax
    JZ loc_4AFAC0
loc_4AFA76:
    CMP eax, 0FFFFFFFFh
    JNZ loc_4AFAB0
loc_4AFA7B:
    MOV rdi, rbp
    CALL sub_4D4D30
    MOV edx, 5
    MOV esi, offset aPreservingPerm
    XOR edi, edi
    MOV r12, rax
    CALL _dcgettext
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r12
    MOV rdx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_4AFAB0:
    MOV eax, ebx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4AFAC0:
    MOV rdi, r12
    CALL sub_4D4D30
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    XOR eax, eax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    CALL _error
    MOV eax, ebx
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20', '0x98', '0x100', '0x2', '0xA6', '0xA3', '0x9B', '0x97', '0x9F', '0xFFFFFFFE', '0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic'}

##### Q 157 - single_binary_main_id
```assembly
loc_441F80:
    PUSH r15
    PUSH r14
    XOR r15d, r15d
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    XOR r12d, r12d
    XOR r14d, r14d
    SUB rsp, 28h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV [rsp+58h+var_4A], 0
loc_441FEE:
    XOR r8d, r8d
    MOV ecx, offset stru_4E55E0
    MOV edx, offset aAgnruzgz
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_442170
loc_44200E:
    CMP eax, 61h
    JZ loc_441FEE
loc_442013:
    JLE loc_442040
loc_442015:
    CMP eax, 72h
    JZ loc_442160
loc_44201E:
    JG loc_442088
loc_442020:
    CMP eax, 67h
    JZ loc_4420C0
loc_442029:
    CMP eax, 6Eh
    JNZ loc_442140
loc_442032:
    MOV cs:byte_72E3F8, 1
    JMP loc_441FEE
loc_442040:
    CMP eax, 0FFFFFF7Eh
    JZ loc_442150
loc_44204B:
    JLE loc_4420D0
loc_442051:
    CMP eax, 47h
    JZ loc_4420A0
loc_442056:
    CMP eax, 5Ah
    JNZ loc_442140
loc_44205F:
    MOV edx, 5
    MOV esi, offset aContextZWorksO
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00000000h]
loc_442088:
    CMP eax, 75h
    JZ loc_4420B0
loc_44208D:
    CMP eax, 7Ah
    JNZ loc_442140
loc_442096:
    MOV [rsp+58h+var_4A], 1
    JMP loc_441FEE
loc_4420A0:
    MOV r14d, 1
    JMP loc_441FEE
loc_4420B0:
    MOV r12d, 1
    JMP loc_441FEE
loc_4420C0:
    MOV r13d, 1
    JMP loc_441FEE
loc_4420D0:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_442140
loc_4420D7:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aArnoldRobbins
    MOV edx, offset unk_4C7B3F
    MOV esi, (offset aSInvalidProces+14h)
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_44210F:
    MOV rdi, [rbx+rsi*8+8]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    XCHG ax, ax
loc_442140:
    MOV edi, 1
    CALL sub_441C40
loc_442150:
    XOR edi, edi
    CALL sub_441C40
loc_442160:
    MOV r15d, 1
    JMP loc_441FEE
loc_442170:
    MOVSXD rsi, cs:optind
    SUB ebp, esi
    MOVSXD rbp, ebp
    CMP rbp, 1
    JA loc_44210F
loc_442182:
    MOVZX eax, r12b
    MOVZX ecx, r13b
    LEA edx, [rax+rcx]
    MOVZX eax, r14b
    ADD eax, edx
    CMP eax, 1
    JG loc_442986
loc_44219C:
    MOV edx, r13d
    XOR edx, 1
    CMP r12b, dl
    JNB loc_4422CC
loc_4421AB:
    TEST r14b, r14b
    JNZ loc_4422CC
loc_4421B4:
    TEST r15b, r15b
    JNZ loc_442964
loc_4421BD:
    CMP cs:byte_72E3F8, 0
    JNZ loc_442964
loc_4421CA:
    CMP [rsp+58h+var_4A], 0
    JNZ loc_442942
loc_4421D5:
    TEST rbp, rbp
    JNZ loc_4422D5
loc_4421DE:
    MOV edi, offset aPosixlyCorrect
    MOV [rsp+58h+var_49], dl
    CALL _getenv
    MOVZX edx, [rsp+58h+var_49]
loc_4421F1:
    TEST r12b, r12b
    JZ loc_442312
loc_4421FA:
    TEST r15b, r15b
    JZ loc_4423A4
loc_442203:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _getuid
    CMP eax, 0FFFFFFFFh
    MOV cs:uid, eax
    JZ loc_442719
loc_442225:
    TEST r12b, r12b
    JZ loc_442329
loc_44222E:
    XOR ebx, ebx
loc_442230:
    TEST r15b, r15b
    MOV edi, cs:uid
    JZ loc_4423D1
loc_44223F:
    CMP cs:byte_72E3F8, 0
    MOV ebp, edi
    JNZ loc_442653
loc_44224E:
    MOV rdi, rbp
    MOV esi, offset unk_72E3D0
    CALL sub_4A9A40
    MOV rdi, rax
loc_44225E:
    MOV rsi, cs:stdout
    CALL _fputs_unlocked
loc_44226A:
    CMP [rsp+58h+var_4A], 1
    SBB esi, esi
    AND esi, 0Ah
loc_442274:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP [rdi+30h], rax
    JBE loc_442748
loc_442289:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], sil
loc_442294:
    MOV rdi, rbx
    CALL _free
    MOVZX eax, cs:byte_71FD16
    XOR eax, 1
    MOV rcx, [rsp+58h+var_40]
    XOR rcx, fs:28h
    MOVZX eax, al
    JNZ loc_4428F8
loc_4422BD:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4422CC:
    TEST rbp, rbp
    JZ loc_4421F1
loc_4422D5:
    MOV rbx, [rbx+rsi*8]
    CMP byte ptr [rbx], 0
    JNZ loc_442752
loc_4422E2:
    MOV rdi, rbx
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSNoSuchUser
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_442312:
    MOV eax, r14d
    XOR eax, 1
    CMP r13b, al
    JB loc_4426B0
loc_442321:
    TEST dl, dl
    JNZ loc_442203
loc_442329:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbp, rax
    CALL _getegid
    CMP eax, 0FFFFFFFFh
    MOV cs:dword_72E3E8, eax
    JNZ loc_442352
loc_442347:
    MOV edx, [rbp+0]
    TEST edx, edx
    JNZ loc_4428FD
loc_442352:
    MOV dword ptr [rbp+0], 0
    XOR ebx, ebx
    CALL _getgid
    CMP eax, 0FFFFFFFFh
    MOV cs:gid, eax
    JZ loc_4427F7
loc_44236F:
    TEST r13b, r13b
    JZ loc_4423DC
loc_442374:
    TEST r15b, r15b
    MOV edi, cs:gid
    MOVZX esi, cs:byte_72E3F8
    CMOVZ edi, cs:dword_72E3E8
    CALL sub_43FCC0
    TEST al, al
    JNZ loc_44226A
loc_442398:
    MOV cs:byte_71FD16, 0
    JMP loc_44226A
loc_4423A4:
    MOV [rsp+58h+var_49], dl
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _geteuid
    CMP eax, 0FFFFFFFFh
    MOV cs:dword_72E3F0, eax
    MOVZX edx, [rsp+58h+var_49]
    JZ loc_4426DB
loc_4423CF:
    XOR ebx, ebx
loc_4423D1:
    MOV edi, cs:dword_72E3F0
    JMP loc_44223F
loc_4423DC:
    TEST r14b, r14b
    JNZ loc_442669
loc_4423E5:
    MOV edi, cs:uid
    MOV esi, offset unk_72E3D0
    CALL sub_4A9A40
    XOR edi, edi
    MOV rbp, rax
    MOV edx, 5
    MOV esi, offset aUidS
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:uid
    CALL _getpwuid
    TEST rax, rax
    MOV rbp, rax
    JZ loc_442442
loc_44242E:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_442442:
    MOV edi, cs:gid
    MOV esi, offset unk_72E3B0
    CALL sub_4A9A40
    XOR edi, edi
    MOV r12, rax
    MOV edx, 5
    MOV esi, offset aGidS
    CALL _dcgettext
    MOV rdx, r12
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:gid
    CALL _getgrgid
    TEST rax, rax
    JZ loc_44249C
loc_442488:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_44249C:
    MOV eax, cs:dword_72E3F0
    CMP eax, cs:uid
    JZ loc_442503
loc_4424AA:
    MOV edi, eax
    MOV esi, offset unk_72E3D0
    CALL sub_4A9A40
    XOR edi, edi
    MOV rbp, rax
    MOV edx, 5
    MOV esi, offset aE
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:dword_72E3F0
    CALL _getpwuid
    TEST rax, rax
    MOV rbp, rax
    JZ loc_442503
loc_4424EF:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_442503:
    MOV eax, cs:dword_72E3E8
    CMP eax, cs:gid
    JZ loc_442567
loc_442511:
    MOV edi, eax
    MOV esi, offset unk_72E3B0
    CALL sub_4A9A40
    XOR edi, edi
    MOV r12, rax
    MOV edx, 5
    MOV esi, offset aEgidS
    CALL _dcgettext
    MOV rdx, r12
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:dword_72E3E8
    CALL _getgrgid
    TEST rax, rax
    JZ loc_442567
loc_442553:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_442567:
    TEST rbx, rbx
    JZ loc_442871
loc_442570:
    TEST rbp, rbp
    MOV esi, 0FFFFFFFFh
    JZ loc_44257D
loc_44257A:
    MOV esi, [rbp+14h]
loc_44257D:
    LEA rdx, [rsp+58h+ptr]
    MOV rdi, rbx
    CALL sub_4BB640
    TEST eax, eax
    MOV r13d, eax
    JS loc_442837
loc_442595:
    TEST r13d, r13d
    JZ loc_442828
loc_44259E:
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aGroups_0
    XOR edi, edi
    XOR r12d, r12d
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    XOR ebp, ebp
    CALL _fputs_unlocked
    JMP loc_4425DF
loc_4425D0:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 2Ch
loc_4425DB:
    ADD rbp, 4
loc_4425DF:
    MOV rax, [rsp+58h+ptr]
    MOV r14, cs:stdout
    MOV esi, offset unk_72E3B0
    MOV edi, [rax+rbp]
    CALL sub_4A9A40
    MOV rsi, r14
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rax, [rsp+58h+ptr]
    MOV edi, [rax+rbp]
    CALL _getgrgid
    TEST rax, rax
    JZ loc_442629
loc_442615:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_442629:
    ADD r12d, 1
    CMP r12d, r13d
    JZ loc_442828
loc_442636:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JB loc_4425D0
loc_442647:
    MOV esi, 2Ch
    CALL ___overflow
    JMP loc_4425DB
loc_442653:
    CALL _getpwuid
    TEST rax, rax
    JZ loc_4428BA
loc_442661:
    MOV rdi, [rax]
    JMP loc_44225E
loc_442669:
    CMP [rsp+58h+var_4A], 0
    JZ loc_4427BD
loc_442674:
    MOVZX r8d, cs:byte_72E3F8
    MOV ecx, cs:dword_72E3E8
    XOR r9d, r9d
    MOV edx, cs:gid
    MOV esi, cs:uid
    MOV rdi, rbx
    CALL sub_43FD40
    TEST al, al
    JZ loc_442398
loc_4426A1:
    XOR esi, esi
    JMP loc_442274
loc_4426B0:
    MOV [rsp+58h+var_49], dl
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _geteuid
    CMP eax, 0FFFFFFFFh
    MOV cs:dword_72E3F0, eax
    MOVZX edx, [rsp+58h+var_49]
    JNZ loc_442321
loc_4426DB:
    MOV esi, [rbx]
    TEST esi, esi
    JNZ loc_442920
loc_4426E5:
    TEST r12b, r12b
    JZ loc_442321
loc_4426EE:
    TEST r15b, r15b
    JZ loc_4423CF
loc_4426F7:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _getuid
    MOV cs:uid, eax
    ADD eax, 1
    JNZ loc_44222E
loc_442719:
    MOV ecx, [rbx]
    TEST ecx, ecx
    JZ loc_442225
loc_442723:
    MOV edx, 5
    MOV esi, offset aCannotGetRealU
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
loc_442748:
    CALL ___overflow
    JMP loc_442294
loc_442752:
    XOR r8d, r8d
    XOR ecx, ecx
    XOR edx, edx
    MOV esi, offset dword_72E3F0
    MOV rdi, rbx
    CALL sub_4B9860
    TEST rax, rax
    JNZ loc_4422E2
loc_44276F:
    MOV edi, cs:dword_72E3F0
    CALL _getpwuid
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4422E2
loc_442786:
    MOV rdi, [rax]
    CALL sub_4BB2E0
    MOV rbx, rax
    MOV eax, [rbp+10h]
    TEST r12b, r12b
    MOV cs:dword_72E3F0, eax
    MOV cs:uid, eax
    MOV eax, [rbp+14h]
    MOV cs:dword_72E3E8, eax
    MOV cs:gid, eax
    JZ loc_44236F
loc_4427B8:
    JMP loc_442230
loc_4427BD:
    MOVZX r8d, cs:byte_72E3F8
    MOV ecx, cs:dword_72E3E8
    MOV r9d, 20h
    MOV edx, cs:gid
    MOV esi, cs:uid
    MOV rdi, rbx
    CALL sub_43FD40
    TEST al, al
    JZ loc_442398
loc_4427ED:
    MOV esi, 0Ah
    JMP loc_442274
loc_4427F7:
    MOV eax, [rbp+0]
    TEST eax, eax
    JZ loc_44236F
loc_442802:
    MOV edx, 5
    MOV esi, offset aCannotGetRealG
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbp+0]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
loc_442828:
    MOV rdi, [rsp+58h+ptr]
    CALL _free
    JMP loc_44226A
loc_442837:
    MOV rdi, rbx
    CALL sub_4B5440
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFailedToGetGro
    MOV r12, rax
    CALL _dcgettext
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r12
    MOV rdx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_442398
loc_442871:
    MOV esi, cs:dword_72E3E8
    LEA rdx, [rsp+58h+ptr]
    XOR edi, edi
    CALL sub_4BB640
    TEST eax, eax
    MOV r13d, eax
    JNS loc_442595
loc_44288E:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFailedToGetGro_0
    CALL _dcgettext
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_442398
loc_4428BA:
    MOV esi, offset unk_72E3D0
    MOV rdi, rbp
    CALL sub_4A9A40
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aCannotFindName_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, r12
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:byte_71FD16, 0
    JMP loc_44224E
loc_4428F8:
    CALL ___stack_chk_fail
loc_4428FD:
    MOV edx, 5
    MOV esi, offset aCannotGetEffec
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbp+0]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_442920:
    MOV edx, 5
    MOV esi, offset aCannotGetEffec_0
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_442942:
    MOV edx, 5
    MOV esi, offset aOptionZeroNotP
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_442964:
    MOV edx, 5
    MOV esi, offset aCannotPrintOnl
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_442986:
    MOV edx, 5
    MOV esi, offset aCannotPrintOnl_0
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00000000h]
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'Loop', 'BitwiseOperation'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['3', '4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy with SIMD', 'inferred_category': 'Utility'}

##### T 157 - single_binary_main_id
```assembly
loc_447D10:
    PUSH r15
    PUSH r14
    XOR r15d, r15d
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    XOR r12d, r12d
    XOR r14d, r14d
    SUB rsp, 28h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV [rsp+58h+var_4A], 0
loc_447D7E:
    XOR r8d, r8d
    MOV ecx, offset stru_508520
    MOV edx, offset aAgnruzgz
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_447F00
loc_447D9E:
    CMP eax, 61h
    JZ loc_447D7E
loc_447DA3:
    JLE loc_447DD0
loc_447DA5:
    CMP eax, 72h
    JZ loc_447EF0
loc_447DAE:
    JG loc_447E18
loc_447DB0:
    CMP eax, 67h
    JZ loc_447E50
loc_447DB9:
    CMP eax, 6Eh
    JNZ loc_447ED0
loc_447DC2:
    MOV cs:byte_7513D8, 1
    JMP loc_447D7E
loc_447DD0:
    CMP eax, 0FFFFFF7Eh
    JZ loc_447EE0
loc_447DDB:
    JLE loc_447E60
loc_447DE1:
    CMP eax, 47h
    JZ loc_447E30
loc_447DE6:
    CMP eax, 5Ah
    JNZ loc_447ED0
loc_447DEF:
    MOV edx, 5
    MOV esi, offset aContextZWorksO
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00000000h]
loc_447E18:
    CMP eax, 75h
    JZ loc_447E40
loc_447E1D:
    CMP eax, 7Ah
    JNZ loc_447ED0
loc_447E26:
    MOV [rsp+58h+var_4A], 1
    JMP loc_447D7E
loc_447E30:
    MOV r14d, 1
    JMP loc_447D7E
loc_447E40:
    MOV r12d, 1
    JMP loc_447D7E
loc_447E50:
    MOV r13d, 1
    JMP loc_447D7E
loc_447E60:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_447ED0
loc_447E67:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aArnoldRobbins
    MOV edx, offset unk_4EA7DF
    MOV esi, (offset aSInvalidProces+14h)
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_447E9F:
    MOV rdi, [rbx+rsi*8+8]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    XCHG ax, ax
loc_447ED0:
    MOV edi, 1
    CALL sub_4479D0
loc_447EE0:
    XOR edi, edi
    CALL sub_4479D0
loc_447EF0:
    MOV r15d, 1
    JMP loc_447D7E
loc_447F00:
    MOVSXD rsi, cs:optind
    SUB ebp, esi
    MOVSXD rbp, ebp
    CMP rbp, 1
    JA loc_447E9F
loc_447F12:
    MOVZX eax, r12b
    MOVZX ecx, r13b
    LEA edx, [rax+rcx]
    MOVZX eax, r14b
    ADD eax, edx
    CMP eax, 1
    JG loc_44870E
loc_447F2C:
    MOV edx, r13d
    XOR edx, 1
    CMP r12b, dl
    JNB loc_448064
loc_447F3B:
    TEST r14b, r14b
    JNZ loc_448064
loc_447F44:
    TEST r15b, r15b
    JNZ loc_4486EC
loc_447F4D:
    CMP cs:byte_7513D8, 0
    JNZ loc_4486EC
loc_447F5A:
    CMP [rsp+58h+var_4A], 0
    JNZ loc_4486CA
loc_447F65:
    TEST rbp, rbp
    JNZ loc_44806D
loc_447F6E:
    MOV edi, offset aPosixlyCorrect
    MOV [rsp+58h+var_49], dl
    CALL _getenv
    MOVZX edx, [rsp+58h+var_49]
loc_447F81:
    TEST r12b, r12b
    JZ loc_4480AA
loc_447F8A:
    TEST r15b, r15b
    JZ loc_448138
loc_447F93:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _getuid
    CMP eax, 0FFFFFFFFh
    MOV cs:uid, eax
    JZ loc_4484A1
loc_447FB5:
    TEST r12b, r12b
    JZ loc_4480C1
loc_447FBE:
    XOR ebx, ebx
loc_447FC0:
    TEST r15b, r15b
    MOV edi, cs:uid
    JZ loc_448165
loc_447FCF:
    CMP cs:byte_7513D8, 0
    MOV ebp, edi
    JNZ loc_4483E3
loc_447FDE:
    MOV rdi, rbp
    MOV esi, offset unk_7513B0
    CALL sub_4C59D0
    MOV rdi, rax
loc_447FEE:
    MOV rsi, cs:stdout
    CALL _fputs_unlocked
loc_447FFA:
    MOVZX eax, [rsp+58h+var_4A]
    CMP al, 1
    SBB edx, edx
    AND edx, 0Ah
    CMP al, 1
    SBB esi, esi
    AND esi, 0Ah
loc_44800D:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP [rdi+30h], rax
    JBE loc_4484D0
loc_448022:
    LEA rcx, [rax+1]
    MOV [rdi+28h], rcx
    MOV [rax], dl
loc_44802C:
    MOV rdi, rbx
    CALL _free
    MOVZX eax, cs:byte_742D16
    XOR eax, 1
    MOV rcx, [rsp+58h+var_40]
    XOR rcx, fs:28h
    MOVZX eax, al
    JNZ loc_448680
loc_448055:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_448064:
    TEST rbp, rbp
    JZ loc_447F81
loc_44806D:
    MOV rbx, [rbx+rsi*8]
    CMP byte ptr [rbx], 0
    JNZ loc_4484DA
loc_44807A:
    MOV rdi, rbx
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSNoSuchUser
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4480AA:
    MOV eax, r14d
    XOR eax, 1
    CMP r13b, al
    JB loc_448438
loc_4480B9:
    TEST dl, dl
    JNZ loc_447F93
loc_4480C1:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbp, rax
    CALL _getegid
    CMP eax, 0FFFFFFFFh
    MOV r12d, eax
    MOV cs:dword_7513C8, eax
    JNZ loc_4480ED
loc_4480E2:
    MOV edx, [rbp+0]
    TEST edx, edx
    JNZ loc_448685
loc_4480ED:
    MOV dword ptr [rbp+0], 0
    XOR ebx, ebx
    CALL _getgid
    CMP eax, 0FFFFFFFFh
    MOV edi, eax
    MOV cs:gid, eax
    JZ loc_448580
loc_44810C:
    TEST r13b, r13b
    JZ loc_448170
loc_448111:
    MOVZX esi, cs:byte_7513D8
    TEST r15b, r15b
    CMOVZ edi, r12d
    CALL sub_4459E0
    TEST al, al
    JNZ loc_447FFA
loc_44812C:
    MOV cs:byte_742D16, 0
    JMP loc_447FFA
loc_448138:
    MOV [rsp+58h+var_49], dl
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _geteuid
    CMP eax, 0FFFFFFFFh
    MOV cs:dword_7513D0, eax
    MOVZX edx, [rsp+58h+var_49]
    JZ loc_448463
loc_448163:
    XOR ebx, ebx
loc_448165:
    MOV edi, cs:dword_7513D0
    JMP loc_447FCF
loc_448170:
    TEST r14b, r14b
    JNZ loc_4483F9
loc_448179:
    MOV edi, cs:uid
    MOV esi, offset unk_7513B0
    CALL sub_4C59D0
    XOR edi, edi
    MOV rbp, rax
    MOV edx, 5
    MOV esi, offset aUidS
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:uid
    CALL _getpwuid
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4481D6
loc_4481C2:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4481D6:
    MOV edi, cs:gid
    MOV esi, offset unk_751390
    CALL sub_4C59D0
    XOR edi, edi
    MOV r12, rax
    MOV edx, 5
    MOV esi, offset aGidS
    CALL _dcgettext
    MOV rdx, r12
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:gid
    CALL _getgrgid
    TEST rax, rax
    JZ loc_448230
loc_44821C:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_448230:
    MOV eax, cs:dword_7513D0
    CMP eax, cs:uid
    JZ loc_448297
loc_44823E:
    MOV edi, eax
    MOV esi, offset unk_7513B0
    CALL sub_4C59D0
    XOR edi, edi
    MOV rbp, rax
    MOV edx, 5
    MOV esi, offset aE
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:dword_7513D0
    CALL _getpwuid
    TEST rax, rax
    MOV rbp, rax
    JZ loc_448297
loc_448283:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_448297:
    MOV eax, cs:dword_7513C8
    CMP eax, cs:gid
    JZ loc_4482FB
loc_4482A5:
    MOV edi, eax
    MOV esi, offset unk_751390
    CALL sub_4C59D0
    XOR edi, edi
    MOV r12, rax
    MOV edx, 5
    MOV esi, offset aEgidS
    CALL _dcgettext
    MOV rdx, r12
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, cs:dword_7513C8
    CALL _getgrgid
    TEST rax, rax
    JZ loc_4482FB
loc_4482E7:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4482FB:
    TEST rbx, rbx
    JZ loc_4485F9
loc_448304:
    TEST rbp, rbp
    MOV esi, 0FFFFFFFFh
    JZ loc_448311
loc_44830E:
    MOV esi, [rbp+14h]
loc_448311:
    LEA rdx, [rsp+58h+ptr]
    MOV rdi, rbx
    CALL sub_4DD2B0
    TEST eax, eax
    MOV r13d, eax
    JS loc_4485BF
loc_448329:
    TEST r13d, r13d
    JZ loc_4485B0
loc_448332:
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aGroups_0
    XOR edi, edi
    XOR r12d, r12d
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    XOR ebp, ebp
    CALL _fputs_unlocked
    JMP loc_44836F
loc_448360:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 2Ch
loc_44836B:
    ADD rbp, 4
loc_44836F:
    MOV rax, [rsp+58h+ptr]
    MOV r14, cs:stdout
    MOV esi, offset unk_751390
    MOV edi, [rax+rbp]
    CALL sub_4C59D0
    MOV rsi, r14
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rax, [rsp+58h+ptr]
    MOV edi, [rax+rbp]
    CALL _getgrgid
    TEST rax, rax
    JZ loc_4483B9
loc_4483A5:
    MOV rdx, [rax]
    MOV esi, offset aS_0
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4483B9:
    ADD r12d, 1
    CMP r12d, r13d
    JZ loc_4485B0
loc_4483C6:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JB loc_448360
loc_4483D7:
    MOV esi, 2Ch
    CALL ___overflow
    JMP loc_44836B
loc_4483E3:
    CALL _getpwuid
    TEST rax, rax
    JZ loc_448642
loc_4483F1:
    MOV rdi, [rax]
    JMP loc_447FEE
loc_4483F9:
    CMP [rsp+58h+var_4A], 0
    JZ loc_448548
loc_448404:
    MOVZX r8d, cs:byte_7513D8
    MOV esi, cs:uid
    XOR r9d, r9d
    MOV edx, edi
    MOV ecx, r12d
    MOV rdi, rbx
    CALL sub_445620
    TEST al, al
    JZ loc_44812C
loc_44842A:
    XOR edx, edx
    XOR esi, esi
    JMP loc_44800D
loc_448438:
    MOV [rsp+58h+var_49], dl
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _geteuid
    CMP eax, 0FFFFFFFFh
    MOV cs:dword_7513D0, eax
    MOVZX edx, [rsp+58h+var_49]
    JNZ loc_4480B9
loc_448463:
    MOV esi, [rbx]
    TEST esi, esi
    JNZ loc_4486A8
loc_44846D:
    TEST r12b, r12b
    JZ loc_4480B9
loc_448476:
    TEST r15b, r15b
    JZ loc_448163
loc_44847F:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    MOV rbx, rax
    CALL _getuid
    MOV cs:uid, eax
    ADD eax, 1
    JNZ loc_447FBE
loc_4484A1:
    MOV ecx, [rbx]
    TEST ecx, ecx
    JZ loc_447FB5
loc_4484AB:
    MOV edx, 5
    MOV esi, offset aCannotGetRealU
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
loc_4484D0:
    CALL ___overflow
    JMP loc_44802C
loc_4484DA:
    XOR r8d, r8d
    XOR ecx, ecx
    XOR edx, edx
    MOV esi, offset dword_7513D0
    MOV rdi, rbx
    CALL sub_4D96E0
    TEST rax, rax
    JNZ loc_44807A
loc_4484F7:
    MOV edi, cs:dword_7513D0
    CALL _getpwuid
    TEST rax, rax
    MOV rbp, rax
    JZ loc_44807A
loc_44850E:
    MOV rdi, [rax]
    CALL sub_4DCD60
    MOV edi, [rbp+14h]
    MOV rbx, rax
    MOV eax, [rbp+10h]
    TEST r12b, r12b
    MOV cs:dword_7513D0, eax
    MOV cs:uid, eax
    MOV cs:dword_7513C8, edi
    MOV cs:gid, edi
    JNZ loc_447FC0
loc_448540:
    MOV r12d, edi
    JMP loc_44810C
loc_448548:
    MOVZX r8d, cs:byte_7513D8
    MOV esi, cs:uid
    MOV edx, edi
    MOV r9d, 20h
    MOV ecx, r12d
    MOV rdi, rbx
    CALL sub_445620
    TEST al, al
    JZ loc_44812C
loc_448571:
    MOV edx, 0Ah
    MOV esi, 0Ah
    JMP loc_44800D
loc_448580:
    MOV eax, [rbp+0]
    TEST eax, eax
    JZ loc_44810C
loc_44858B:
    MOV edx, 5
    MOV esi, offset aCannotGetRealG
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbp+0]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    XCHG ax, ax
loc_4485B0:
    MOV rdi, [rsp+58h+ptr]
    CALL _free
    JMP loc_447FFA
loc_4485BF:
    MOV rdi, rbx
    CALL sub_4D4D30
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFailedToGetGro
    MOV r12, rax
    CALL _dcgettext
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r12
    MOV rdx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_44812C
loc_4485F9:
    MOV esi, cs:dword_7513C8
    LEA rdx, [rsp+58h+ptr]
    XOR edi, edi
    CALL sub_4DD2B0
    TEST eax, eax
    MOV r13d, eax
    JNS loc_448329
loc_448616:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFailedToGetGro_0
    CALL _dcgettext
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbp
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_44812C
loc_448642:
    MOV esi, offset unk_7513B0
    MOV rdi, rbp
    CALL sub_4C59D0
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aCannotFindName_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, r12
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:byte_742D16, 0
    JMP loc_447FDE
loc_448680:
    CALL ___stack_chk_fail
loc_448685:
    MOV edx, 5
    MOV esi, offset aCannotGetEffec
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbp+0]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4486A8:
    MOV edx, 5
    MOV esi, offset aCannotGetEffec_0
    XOR edi, edi
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4486CA:
    MOV edx, 5
    MOV esi, offset aOptionZeroNotP
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4486EC:
    MOV edx, 5
    MOV esi, offset aCannotPrintOnl
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_44870E:
    MOV edx, 5
    MOV esi, offset aCannotPrintOnl_0
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Looping', 'BitwiseOperations'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x3', '0x1', '0x4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Processing', 'inferred_category': 'Data Manipulation'}

##### Q 158 - fts_children
```assembly
loc_4C07F0:
    TEST esi, 0FFFFDFFFh
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    JNZ loc_4C0910
loc_4C0804:
    MOV rbx, rdi
    MOV rbp, [rdi]
    MOV r12d, esi
    CALL ___errno_location
    MOV dword ptr [rax], 0
    TEST byte ptr [rbx+49h], 40h
    MOV r13, rax
    JNZ loc_4C0930
loc_4C0825:
    MOVZX edx, word ptr [rbp+70h]
    CMP dx, 9
    JZ loc_4C0900
loc_4C0833:
    XOR eax, eax
    CMP dx, 1
    JNZ loc_4C0880
loc_4C083B:
    MOV rdi, [rbx+8]
    TEST rdi, rdi
    JZ loc_4C0849
loc_4C0844:
    CALL sub_4BE950
loc_4C0849:
    CMP r12d, 2000h
    MOV r14d, 1
    JZ loc_4C0890
loc_4C0858:
    CMP qword ptr [rbp+58h], 0
    JNZ loc_4C0871
loc_4C085F:
    MOV rax, [rbp+30h]
    CMP byte ptr [rax], 2Fh
    JZ loc_4C0871
loc_4C0868:
    MOV esi, [rbx+48h]
    TEST sil, 4
    JZ loc_4C08B0
loc_4C0871:
    MOV esi, r14d
    MOV rdi, rbx
    CALL sub_4BF160
    MOV [rbx+8], rax
loc_4C0880:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4C0890:
    OR dword ptr [rbx+48h], 2000h
    CMP qword ptr [rbp+58h], 0
    MOV r14d, 2
    JZ loc_4C085F
loc_4C08A4:
    JMP loc_4C0871
loc_4C08B0:
    MOV edi, [rbx+2Ch]
    MOV edx, 4C9103h
    CALL sub_4BED50
    TEST eax, eax
    MOV ebp, eax
    JS loc_4C0958
loc_4C08C7:
    MOV esi, r14d
    MOV rdi, rbx
    CALL sub_4BF160
    TEST byte ptr [rbx+49h], 2
    MOV [rbx+8], rax
    JZ loc_4C0940
loc_4C08DC:
    MOV edx, 1
    MOV esi, ebp
    MOV rdi, rbx
    CALL sub_4BEBA0
loc_4C08EB:
    MOV rax, [rbx+8]
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4C0900:
    POP rbx
    MOV rax, [rbp+10h]
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4C0910:
    CALL ___errno_location
    MOV dword ptr [rax], 16h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4C0930:
    XOR eax, eax
    JMP loc_4C0880
loc_4C0940:
    MOV edi, ebp
    CALL _fchdir
    TEST eax, eax
    JNZ loc_4C0967
loc_4C094B:
    MOV edi, ebp
    CALL _close
    JMP loc_4C08EB
loc_4C0958:
    MOV qword ptr [rbx+8], 0
    XOR eax, eax
    JMP loc_4C0880
loc_4C0967:
    MOV ebx, [r13+0]
    MOV edi, ebp
    CALL _close
    XOR eax, eax
    MOV [r13+0], ebx
    JMP loc_4C0880
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Comparison', 'inferred_category': 'Utility/Helper'}

##### T 158 - fts_children
```assembly
loc_4E3190:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST esi, 0FFFFDFFFh
    JNZ loc_4E3358
loc_4E31AA:
    MOV r12, rdi
    MOV r13, [rdi]
    MOV r14d, esi
    CALL ___errno_location
    MOV dword ptr [rax], 0
    TEST byte ptr [r12+49h], 40h
    MOV r15, rax
    JNZ loc_4E3260
loc_4E31CD:
    MOVZX eax, word ptr [r13+70h]
    CMP ax, 9
    JZ loc_4E3340
loc_4E31DC:
    CMP ax, 1
    JNZ loc_4E3260
loc_4E31E2:
    MOV rbx, [r12+8]
    TEST rbx, rbx
    JZ loc_4E3212
loc_4E31EC:
    NOP dword ptr [rax+00h]
loc_4E31F0:
    MOV rdi, [rbx+18h]
    MOV rbp, [rbx+10h]
    TEST rdi, rdi
    JZ loc_4E3202
loc_4E31FD:
    CALL _closedir
loc_4E3202:
    MOV rdi, rbx
    MOV rbx, rbp
    CALL _free
    TEST rbp, rbp
    JNZ loc_4E31F0
loc_4E3212:
    CMP r14d, 2000h
    MOV ebx, 1
    JZ loc_4E3278
loc_4E3220:
    CMP qword ptr [r13+58h], 0
    JNZ loc_4E3239
loc_4E3227:
    MOV rax, [r13+30h]
    CMP byte ptr [rax], 2Fh
    JZ loc_4E3239
loc_4E3230:
    MOV eax, [r12+48h]
    TEST al, 4
    JZ loc_4E3290
loc_4E3239:
    MOV esi, ebx
    MOV rdi, r12
    CALL sub_4E0E80
    MOV [r12+8], rax
loc_4E3248:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E3260:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E3278:
    OR dword ptr [r12+48h], 2000h
    CMP qword ptr [r13+58h], 0
    MOV ebx, 2
    JZ loc_4E3227
loc_4E328D:
    JMP loc_4E3239
loc_4E3290:
    MOV ecx, eax
    AND ecx, 10h
    CMP ecx, 1
    SBB edx, edx
    AND edx, 0FFFE0000h
    ADD edx, 0F0900h
    CMP ecx, 1
    SBB esi, esi
    AND esi, 0FFFE0000h
    ADD esi, 0B0900h
    TEST ah, 8
    CMOVNZ esi, edx
    TEST ah, 2
    JNZ loc_4E3390
loc_4E32C6:
    MOV edi, 4EBDA3h
    XOR eax, eax
    CALL sub_4BF320
    MOV ebp, eax
loc_4E32D4:
    TEST ebp, ebp
    JS loc_4E33AA
loc_4E32DC:
    MOV esi, ebx
    MOV rdi, r12
    CALL sub_4E0E80
    TEST byte ptr [r12+49h], 2
    MOV [r12+8], rax
    JZ loc_4E3378
loc_4E32F7:
    MOV esi, [r12+2Ch]
    CMP esi, ebp
    JNZ loc_4E3310
loc_4E3300:
    CMP esi, 0FFFFFF9Ch
    JZ loc_4E3310
loc_4E3305:
    CALL _abort
loc_4E3310:
    LEA rdi, [r12+60h]
    CALL sub_4E5530
    TEST eax, eax
    JS loc_4E3325
loc_4E331E:
    MOV edi, eax
    CALL _close
loc_4E3325:
    MOV [r12+2Ch], ebp
loc_4E332A:
    MOV rax, [r12+8]
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E3340:
    MOV rax, [r13+10h]
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E3358:
    CALL ___errno_location
    MOV dword ptr [rax], 16h
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E3378:
    MOV edi, ebp
    CALL _fchdir
    TEST eax, eax
    JNZ loc_4E33BA
loc_4E3383:
    MOV edi, ebp
    CALL _close
    JMP loc_4E332A
loc_4E3390:
    MOV edi, [r12+2Ch]
    MOV edx, esi
    XOR eax, eax
    MOV esi, 4EBDA3h
    CALL sub_4E7DC0
    MOV ebp, eax
    JMP loc_4E32D4
loc_4E33AA:
    MOV qword ptr [r12+8], 0
    XOR eax, eax
    JMP loc_4E3248
loc_4E33BA:
    MOV ebx, [r15]
    MOV edi, ebp
    CALL _close
    XOR eax, eax
    MOV [r15], ebx
    JMP loc_4E3248
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Comparison', 'inferred_category': 'Utility/Helper'}

##### Q 159 - num_processors
```assembly
loc_4AC1E0:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    CMP edi, 2
    JZ loc_4AC220
loc_4AC1EB:
    CMP edi, 1
    JZ loc_4AC2E0
loc_4AC1F4:
    MOV edi, 53h
    CALL _sysconf
    CMP rax, 1
    JZ loc_4AC2C0
loc_4AC208:
    TEST rax, rax
    MOV edx, 1
    CMOVLE rax, rdx
loc_4AC214:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4AC220:
    MOV edi, offset aOmpNumThreads
    CALL _getenv
    MOV rdi, rax
    CALL sub_4AC060
    MOV edi, offset aOmpThreadLimit
    MOV rbx, rax
    CALL _getenv
    MOV rdi, rax
    CALL sub_4AC060
    TEST rax, rax
    MOV rbp, rax
    MOV rax, 0FFFFFFFFFFFFFFFFh
    CMOVZ rbp, rax
    TEST rbx, rbx
    JNZ loc_4AC278
loc_4AC25D:
    CALL sub_4AC170
    TEST rax, rax
    JZ loc_4AC290
loc_4AC267:
    CMP rax, rbp
    CMOVA rax, rbp
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4AC278:
    CMP rbp, rbx
    MOV rax, rbx
    CMOVBE rax, rbp
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4AC290:
    MOV edi, 54h
    CALL _sysconf
    MOV rdx, rax
    MOV eax, 1
    TEST rdx, rdx
    JLE loc_4AC214
loc_4AC2AB:
    CMP rdx, rbp
    MOV rax, rbp
    CMOVBE rax, rdx
    JMP loc_4AC214
loc_4AC2C0:
    CALL sub_4AC170
    MOV rdx, rax
    MOV eax, 1
    TEST rdx, rdx
    JZ loc_4AC214
loc_4AC2D6:
    MOV rax, rdx
    JMP loc_4AC208
loc_4AC2E0:
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    JMP loc_4AC25D
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x368', '0x184', '0x21F', '0x14', '0x363', '0x43', '0x21F', '0x14', '0x370', '0x37F', '0x184', '0x21F', '0x14', '0x36C', '0x44', '0x21F', '0x14', '0x372', '0x41', '0x21F', '0x14'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic/RSA'}

##### T 159 - num_processors
```assembly
loc_4C8740:
    PUSH rbp
    PUSH rbx
    SUB rsp, 98h
    MOV rax, fs:28h
    MOV [rsp+0A8h+var_20], rax
    XOR eax, eax
    CMP edi, 2
    JZ loc_4C87B0
loc_4C8761:
    CMP edi, 1
    JZ loc_4C8880
loc_4C876A:
    MOV edi, 53h
    CALL _sysconf
    CMP rax, 1
    JZ loc_4C8860
loc_4C877E:
    TEST rax, rax
    MOV edx, 1
    CMOVLE rax, rdx
loc_4C878A:
    MOV rcx, [rsp+0A8h+var_20]
    XOR rcx, fs:28h
    JNZ loc_4C88A8
loc_4C87A1:
    ADD rsp, 98h
    POP rbx
    POP rbp
    RETN 
loc_4C87B0:
    MOV edi, offset aOmpNumThreads
    CALL _getenv
    MOV rdi, rax
    CALL sub_4C8630
    MOV edi, offset aOmpThreadLimit
    MOV rbx, rax
    CALL _getenv
    MOV rdi, rax
    CALL sub_4C8630
    TEST rax, rax
    MOV rbp, rax
    MOV rax, 0FFFFFFFFFFFFFFFFh
    CMOVZ rbp, rax
    TEST rbx, rbx
    JNZ loc_4C8830
loc_4C87ED:
    XOR edi, edi
    MOV rdx, rsp
    MOV esi, 80h
    CALL _sched_getaffinity
    TEST eax, eax
    JZ loc_4C8840
loc_4C8800:
    MOV edi, 54h
    CALL _sysconf
    MOV rdx, rax
    MOV eax, 1
    TEST rdx, rdx
    JLE loc_4C878A
loc_4C881B:
    CMP rdx, rbp
    MOV rax, rbp
    CMOVBE rax, rdx
    JMP loc_4C878A
loc_4C8830:
    CMP rbp, rbx
    MOV rax, rbx
    CMOVBE rax, rbp
    JMP loc_4C878A
loc_4C8840:
    MOV rsi, rsp
    MOV edi, 80h
    CALL ___sched_cpucount
    CDQE 
    TEST rax, rax
    JZ loc_4C8800
loc_4C8854:
    CMP rbp, rax
    CMOVBE rax, rbp
    JMP loc_4C878A
loc_4C8860:
    XOR edi, edi
    MOV rdx, rsp
    MOV esi, 80h
    CALL _sched_getaffinity
    TEST eax, eax
    JZ loc_4C8890
loc_4C8873:
    MOV eax, 1
    JMP loc_4C878A
loc_4C8880:
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    JMP loc_4C87ED
loc_4C8890:
    MOV rsi, rsp
    MOV edi, 80h
    CALL ___sched_cpucount
    TEST eax, eax
    JZ loc_4C8873
loc_4C88A1:
    CDQE 
    JMP loc_4C877E
loc_4C88A8:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x368', '0x184', '0x21F', '0x14', '0x363', '0x43'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'RSA Encryption', 'inferred_category': 'Cryptographic'}

##### Q 160 - quote
```assembly
loc_4B4B00:

loc_4B5440:
    MOV rsi, rdi
    MOV ecx, offset unk_720160
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    XOR edi, edi
    JMP sub_4B4B00
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['Arithmetic', 'DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Difference Calculation', 'inferred_category': 'Utility Function'}

##### T 160 - quote
```assembly
loc_4D4D30:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    CALL ___errno_location
    MOV rbp, rax
    MOV r13d, [rax]
    MOV eax, cs:dword_7431B0
    MOV rbx, cs:off_743198
    TEST eax, eax
    JG loc_4D4DAE
loc_4D4D5D:
    CMP rbx, offset qword_7431A0
    JZ loc_4D4E90
loc_4D4D6A:
    MOV rdi, rbx
    MOV esi, 10h
    CALL sub_4DCC30
    MOV rbx, rax
    MOV cs:off_743198, rax
loc_4D4D81:
    MOVSXD rdi, cs:dword_7431B0
    MOV edx, 1
    XOR esi, esi
    SUB edx, edi
    SHL rdi, 4
    MOVSXD rdx, edx
    ADD rdi, rbx
    SHL rdx, 4
    CALL _memset
    MOV cs:dword_7431B0, 1
loc_4D4DAE:
    MOV eax, cs:dword_743164
    MOV r15, [rbx]
    SUB rsp, 8
    MOV r14, [rbx+8]
    MOV r8d, cs:dword_743160
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV rdx, r12
    OR eax, 1
    MOV rsi, r15
    MOV [rsp+50h+var_44], eax
    PUSH cs:qword_743190
    MOV r9d, eax
    PUSH cs:qword_743188
    PUSH offset unk_743168
    MOV rdi, r14
    CALL sub_4D10E0
    ADD rsp, 20h
    CMP r15, rax
    JA loc_4D4E71
loc_4D4DFF:
    LEA rsi, [rax+1]
    CMP r14, offset unk_7585A0
    MOV [rbx], rsi
    JZ loc_4D4E21
loc_4D4E0F:
    MOV rdi, r14
    MOV [rsp+48h+var_40], rsi
    CALL _free
    MOV rsi, [rsp+48h+var_40]
loc_4D4E21:
    MOV rdi, rsi
    MOV [rsp+48h+var_40], rsi
    CALL sub_4DCC10
    SUB rsp, 8
    MOV [rbx+8], rax
    MOV r8d, cs:dword_743160
    PUSH cs:qword_743190
    PUSH cs:qword_743188
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    PUSH offset unk_743168
    MOV r9d, [rsp+68h+var_44]
    MOV rdx, r12
    MOV rsi, [rsp+68h+var_40]
    MOV rdi, rax
    MOV r14, rax
    CALL sub_4D10E0
    ADD rsp, 20h
loc_4D4E71:
    MOV [rbp+0], r13d
    ADD rsp, 18h
    MOV rax, r14
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4D4E90:
    MOV esi, 10h
    XOR edi, edi
    CALL sub_4DCC30
    MOV rdx, cs:off_7431A8
    MOV rbx, rax
    MOV cs:off_743198, rax
    MOV rax, cs:qword_7431A0
    MOV [rbx+8], rdx
    MOV [rbx], rax
    JMP loc_4D4D81
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['Arithmetic', 'DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Difference Calculation', 'inferred_category': 'Utility Function'}

##### Q 161 - _usage_split
```assembly
loc_47E6B0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_47E706
loc_47E6DA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_47E6FF:
    MOV edi, ebx
    CALL _exit
loc_47E706:
    MOV esi, offset aUsageSOptionFi_11
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aOutputPiecesOf_0
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aWithNoFileOrWh
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aMandatoryArgum
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aASuffixLengthN
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stdout
    MOV ecx, 2
    MOV rdx, rax
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVerbosePrintAD
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheSizeArgumen
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aChunksMayBeNSp
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], 4E9CF3h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 4E9CF3h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, 4C7ACDh
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_47E90C
loc_47E900:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_47E918
loc_47E90C:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_47E900
loc_47E918:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_47E9E2
loc_47E931:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_47E97A
loc_47E960:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_47EA66
loc_47E97A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, 4C7ACDh
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 4E9B80h
    CALL ___printf_chk
    CMP rbp, 4C7ACDh
    JZ loc_47EA51
loc_47E9B7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47E6FF
loc_47E9E2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_47EA27
loc_47EA11:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_47EA61
loc_47EA27:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, 4C7ACDh
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_47EA51:
    MOV ebp, 4C7ACDh
    MOV r12d, 4C7B0Dh
    JMP loc_47E9B7
loc_47EA61:
    MOV ebp, 4C7ACDh
loc_47EA66:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, 4C7ACDh
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_47E97A
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Manipulation', 'inferred_category': 'Utility/Helper'}

##### T 161 - _usage_split
```assembly
loc_492BA0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_492BF6
loc_492BCA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_492BEF:
    MOV edi, ebx
    CALL _exit
loc_492BF6:
    MOV esi, offset aUsageSOptionFi_11
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aOutputPiecesOf_0
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aWithNoFileOrWh
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aMandatoryArgum
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aASuffixLengthN
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stdout
    MOV ecx, 2
    MOV rdx, rax
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVerbosePrintAD
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheSizeArgumen
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aChunksMayBeNSp
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], 50CC20h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 50CC20h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, 4EA76Dh
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_492DFC
loc_492DF0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_492E08
loc_492DFC:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_492DF0
loc_492E08:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_492ED2
loc_492E21:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_492E6A
loc_492E50:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_492F56
loc_492E6A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, 4EA76Dh
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 50CABAh
    CALL ___printf_chk
    CMP rbp, 4EA76Dh
    JZ loc_492F41
loc_492EA7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_492BEF
loc_492ED2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_492F17
loc_492F01:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_492F51
loc_492F17:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, 4EA76Dh
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_492F41:
    MOV ebp, 4EA76Dh
    MOV r12d, 4EA7ADh
    JMP loc_492EA7
loc_492F51:
    MOV ebp, 4EA76Dh
loc_492F56:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, 4EA76Dh
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_492E6A
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Manipulation', 'inferred_category': 'Utility Function'}

##### Q 162 - single_binary_main_unlink
```assembly
loc_4938E0:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV r8, cs:off_720148
    PUSH 0
    XOR eax, eax
    PUSH offset aMichaelStone
    MOV r9d, offset sub_4935E0
    MOV ecx, offset unk_4C7B3F
    MOV edx, offset aUnlink_0
    MOV rsi, rbx
    MOV edi, ebp
    CALL sub_4A9D20
    XOR ecx, ecx
    XOR r8d, r8d
    MOV edx, (offset a8+6)
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    POP rdx
    POP rcx
    JNZ loc_4939B5
loc_49396A:
    MOVSXD rax, cs:optind
    CMP ebp, eax
    JLE loc_493996
loc_493975:
    LEA edx, [rax+1]
    CMP ebp, edx
    JG loc_493A04
loc_493980:
    MOV rdi, [rbx+rax*8]
    CALL _unlink
    TEST eax, eax
    JNZ loc_4939BF
loc_49398D:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_493996:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_4939B5:
    MOV edi, 1
    CALL sub_4935E0
loc_4939BF:
    MOVSXD rax, cs:optind
    MOV edi, 4
    MOV rsi, [rbx+rax*8]
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aCannotUnlinkS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_493A04:
    MOV rdi, [rbx+rax*8+8]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    XOR edi, edi
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    XOR eax, eax
    CALL _error
    MOV edi, 1
    CALL sub_4935E0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1', '0x603', '0x60A', '0x60E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing', 'inferred_category': 'Cryptographic'}

##### T 162 - single_binary_main_unlink
```assembly
loc_4AD3B0:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV r8, cs:off_743148
    PUSH 0
    XOR eax, eax
    PUSH offset aMichaelStone
    MOV r9d, offset sub_4AD0B0
    MOV ecx, offset unk_4EA7DF
    MOV edx, offset aUnlink_0
    MOV rsi, rbx
    MOV edi, ebp
    CALL sub_4C5DA0
    XOR ecx, ecx
    XOR r8d, r8d
    MOV edx, (offset a8+6)
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    POP rdx
    POP rcx
    JNZ loc_4AD485
loc_4AD43A:
    MOVSXD rax, cs:optind
    CMP ebp, eax
    JLE loc_4AD466
loc_4AD445:
    LEA edx, [rax+1]
    CMP ebp, edx
    JG loc_4AD4D4
loc_4AD450:
    MOV rdi, [rbx+rax*8]
    CALL _unlink
    TEST eax, eax
    JNZ loc_4AD48F
loc_4AD45D:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_4AD466:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_4AD485:
    MOV edi, 1
    CALL sub_4AD0B0
loc_4AD48F:
    MOVSXD rax, cs:optind
    MOV edi, 4
    MOV rsi, [rbx+rax*8]
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aCannotUnlinkS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4AD4D4:
    MOV rdi, [rbx+rax*8+8]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    XOR edi, edi
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    XOR eax, eax
    CALL _error
    MOV edi, 1
    CALL sub_4AD0B0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x603', '0x60A', '0x60E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing/Checksum', 'inferred_category': 'Cryptographic'}

##### Q 163 - single_binary_main_false
```assembly
loc_43B790:
    CMP edi, 2
    JZ loc_43B7A0
loc_43B795:
    MOV eax, 1
    RETN 
loc_43B7A0:
    PUSH rbx
    MOV rdi, [rsi]
    MOV rbx, rsi
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV rax, [rbx+8]
    MOV edi, offset aHelp
    MOV ecx, 7
    MOV rsi, rax
    REPE 
    JZ loc_43B833
loc_43B7F3:
    MOV edi, offset aVersion
    MOV ecx, 0Ah
    MOV rsi, rax
    REPE 
    JNZ loc_43B82C
loc_43B804:
    MOV rcx, cs:off_720148
    MOV rdi, cs:stdout
    XOR r9d, r9d
    MOV r8d, offset aJimMeyering
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aFalse
    XOR eax, eax
    CALL sub_4BAF40
loc_43B82C:
    MOV eax, 1
    POP rbx
    RETN 
loc_43B833:
    MOV edi, 1
    CALL sub_43B4A0
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xF06E000', '0x6C7200'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Error Handling'}

##### T 163 - single_binary_main_false
```assembly
loc_440DD0:
    CMP edi, 2
    JZ loc_440DE0
loc_440DD5:
    MOV eax, 1
    RETN 
loc_440DE0:
    PUSH rbx
    MOV rdi, [rsi]
    MOV rbx, rsi
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV rax, [rbx+8]
    MOV edi, offset aHelp
    MOV ecx, 7
    MOV rsi, rax
    REPE 
    JZ loc_440E73
loc_440E33:
    MOV edi, offset aVersion
    MOV ecx, 0Ah
    MOV rsi, rax
    REPE 
    JNZ loc_440E6C
loc_440E44:
    MOV rcx, cs:off_743148
    MOV rdi, cs:stdout
    XOR r9d, r9d
    MOV r8d, offset aJimMeyering
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aFalse
    XOR eax, eax
    CALL sub_4DC840
loc_440E6C:
    MOV eax, 1
    POP rbx
    RETN 
loc_440E73:
    MOV edi, 1
    CALL sub_440AE0
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xF06E000', '0x72F760'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Initialization/Cleanup'}

##### Q 164 - single_binary_main_base64
```assembly
loc_41A660:
    PUSH r15
    PUSH r14
    MOV r14d, 4Ch
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    XOR r12d, r12d
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
loc_41A6B9:
    XOR r8d, r8d
    MOV ecx, offset stru_4D09A0
    MOV edx, offset aDiw
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_41A7E0
loc_41A6D9:
    CMP eax, 64h
    JZ loc_41A7D0
loc_41A6E2:
    JG loc_41A700
loc_41A6E4:
    CMP eax, 0FFFFFF7Dh
    JZ loc_41A750
loc_41A6EB:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_41A7C0
loc_41A6F6:
    XOR edi, edi
    CALL sub_41A2F0
loc_41A700:
    CMP eax, 69h
    JZ loc_41A780
loc_41A705:
    CMP eax, 77h
    JNZ loc_41A7C0
loc_41A70E:
    MOV edx, 5
    MOV esi, offset aInvalidWrapSiz
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, (offset a8+6)
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    XOR esi, esi
    CALL sub_4BB560
    MOV r14, rax
    JMP loc_41A6B9
loc_41A750:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    XOR r9d, r9d
    MOV r8d, offset aSimonJosefsson
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aBase64
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_41A780:
    MOV r12d, 1
    JMP loc_41A6B9
loc_41A78B:
    MOV rdi, [rbx+rax*8]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00000000h]
loc_41A7C0:
    MOV edi, 1
    CALL sub_41A2F0
loc_41A7D0:
    MOV r13d, 1
    JMP loc_41A6B9
loc_41A7E0:
    MOVSXD rax, cs:optind
    MOV edx, ebp
    SUB edx, eax
    CMP edx, 1
    JG loc_41A78B
loc_41A7F0:
    CMP ebp, eax
    MOV r15d, (offset asc_50610E+3)
    JLE loc_41A7FE
loc_41A7FA:
    MOV r15, [rbx+rax*8]
loc_41A7FE:
    CMP byte ptr [r15], 2Dh
    JZ loc_41A860
loc_41A804:
    MOV esi, offset aRb
    MOV rdi, r15
    CALL _fopen
    TEST rax, rax
    MOV rbx, rax
    JZ loc_41A8E8
loc_41A81D:
    MOV esi, 2
    MOV rdi, rbx
    CALL sub_4A3F30
    TEST r13b, r13b
    JZ loc_41A870
loc_41A82F:
    MOV rsi, cs:stdout
    MOVZX edx, r12b
    MOV rdi, rbx
    CALL sub_419D80
loc_41A842:
    MOV rdi, rbx
    CALL sub_4BE090
    CMP eax, 0FFFFFFFFh
    JZ loc_41A884
loc_41A84F:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41A860:
    CMP byte ptr [r15+1], 0
    JNZ loc_41A804
loc_41A867:
    MOV rbx, cs:stdin
    JMP loc_41A81D
loc_41A870:
    MOV rsi, cs:stdout
    MOV rdx, r14
    MOV rdi, rbx
    CALL sub_419FD0
    JMP loc_41A842
loc_41A884:
    CMP byte ptr [r15], 2Dh
    JNZ loc_41A8BB
loc_41A88A:
    CMP byte ptr [r15+1], 0
    JNZ loc_41A8BB
loc_41A891:
    MOV edx, 5
    MOV esi, offset aClosing
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41A8BB:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41A8E8:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    NOP 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Boolean', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x38'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 164 - single_binary_main_base64
```assembly
loc_41C8B0:
    PUSH r15
    PUSH r14
    MOV r14d, 4Ch
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    XOR r12d, r12d
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
loc_41C909:
    XOR r8d, r8d
    MOV ecx, offset stru_4F36C0
    MOV edx, offset aDiw
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_41CA30
loc_41C929:
    CMP eax, 64h
    JZ loc_41CA20
loc_41C932:
    JG loc_41C950
loc_41C934:
    CMP eax, 0FFFFFF7Dh
    JZ loc_41C9A0
loc_41C93B:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_41CA10
loc_41C946:
    XOR edi, edi
    CALL sub_41C540
loc_41C950:
    CMP eax, 69h
    JZ loc_41C9D0
loc_41C955:
    CMP eax, 77h
    JNZ loc_41CA10
loc_41C95E:
    MOV edx, 5
    MOV esi, offset aInvalidWrapSiz
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, (offset a8+6)
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    XOR esi, esi
    CALL sub_4DD0F0
    MOV r14, rax
    JMP loc_41C909
loc_41C9A0:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    XOR r9d, r9d
    MOV r8d, offset aSimonJosefsson
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aBase64
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_41C9D0:
    MOV r12d, 1
    JMP loc_41C909
loc_41C9DB:
    MOV rdi, [rbx+rax*8]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00000000h]
loc_41CA10:
    MOV edi, 1
    CALL sub_41C540
loc_41CA20:
    MOV r13d, 1
    JMP loc_41C909
loc_41CA30:
    MOVSXD rax, cs:optind
    MOV edx, ebp
    SUB edx, eax
    CMP edx, 1
    JG loc_41C9DB
loc_41CA40:
    CMP ebp, eax
    MOV r15d, (offset asc_52A7CE+3)
    JLE loc_41CA4E
loc_41CA4A:
    MOV r15, [rbx+rax*8]
loc_41CA4E:
    CMP byte ptr [r15], 2Dh
    JZ loc_41CAB0
loc_41CA54:
    MOV esi, offset aRb
    MOV rdi, r15
    CALL _fopen
    TEST rax, rax
    MOV rbx, rax
    JZ loc_41CB38
loc_41CA6D:
    MOV esi, 2
    MOV rdi, rbx
    CALL sub_4BF2F0
    TEST r13b, r13b
    JZ loc_41CAC0
loc_41CA7F:
    MOV rsi, cs:stdout
    MOVZX edx, r12b
    MOV rdi, rbx
    CALL sub_41BFB0
loc_41CA92:
    MOV rdi, rbx
    CALL sub_4E0210
    CMP eax, 0FFFFFFFFh
    JZ loc_41CAD4
loc_41CA9F:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41CAB0:
    CMP byte ptr [r15+1], 0
    JNZ loc_41CA54
loc_41CAB7:
    MOV rbx, cs:stdin
    JMP loc_41CA6D
loc_41CAC0:
    MOV rsi, cs:stdout
    MOV rdx, r14
    MOV rdi, rbx
    CALL sub_41C200
    JMP loc_41CA92
loc_41CAD4:
    CMP byte ptr [r15], 2Dh
    JNZ loc_41CB0B
loc_41CADA:
    CMP byte ptr [r15+1], 0
    JNZ loc_41CB0B
loc_41CAE1:
    MOV edx, 5
    MOV esi, offset aClosing
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41CB0B:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41CB38:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    NOP 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Boolean', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x38'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 165 - single_binary_main_nl
```assembly
loc_455070:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, 1
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV cs:byte_72F648, 0
    NOP word ptr [rax+rax+00h]
loc_4550D0:
    XOR r8d, r8d
    MOV ecx, offset stru_4EE120
    MOV edx, offset aHBFVIPlSWND
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_455468
loc_4550F0:
    CMP eax, 69h
    JZ loc_4553F8
loc_4550F9:
    JG loc_455130
loc_4550FB:
    CMP eax, 62h
    JZ loc_4553A0
loc_455104:
    JLE loc_455168
loc_455106:
    CMP eax, 66h
    JZ loc_455360
loc_45510F:
    CMP eax, 68h
    JZ loc_4551F8
loc_455118:
    CMP eax, 64h
    JZ loc_4551E0
loc_455121:
    XOR r12d, r12d
    JMP loc_4550D0
loc_455130:
    CMP eax, 70h
    JZ loc_455280
loc_455139:
    JLE loc_455188
loc_45513B:
    CMP eax, 76h
    JZ loc_455310
loc_455144:
    CMP eax, 77h
    JZ loc_4552D0
loc_45514D:
    CMP eax, 73h
    JNZ loc_455121
loc_455152:
    MOV rax, cs:optarg
    MOV cs:off_71FF30, rax
    JMP loc_4550D0
loc_455168:
    CMP eax, 0FFFFFF7Dh
    JZ loc_455290
loc_455173:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_455121
loc_45517A:
    XOR edi, edi
    CALL sub_454C80
loc_455188:
    CMP eax, 6Ch
    JZ loc_455238
loc_455191:
    CMP eax, 6Eh
    JNZ loc_455121
loc_455196:
    MOV rdi, cs:optarg
    MOVZX eax, byte ptr [rdi]
    CMP eax, 6Ch
    JZ loc_455440
loc_4551A9:
    CMP eax, 72h
    JNZ loc_455610
loc_4551B2:
    MOVZX eax, byte ptr [rdi+1]
    CMP al, 6Eh
    JNZ loc_4555F1
loc_4551BE:
    CMP byte ptr [rdi+2], 0
    JNZ loc_455610
loc_4551C8:
    MOV cs:off_71FEF8, offset aLdS
    JMP loc_4550D0
loc_4551E0:
    MOV rax, cs:optarg
    MOV cs:off_71FF28, rax
    JMP loc_4550D0
loc_4551F8:
    MOV edx, offset unk_72F7C0
    MOV esi, offset unk_72FA00
    MOV edi, offset off_71FF40
    CALL sub_454720
    TEST al, al
    JNZ loc_4550D0
loc_455214:
    MOV rdi, cs:optarg
    CALL sub_4B5440
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidHeaderN
    JMP loc_4553D5
loc_455238:
    MOV edx, 5
    MOV esi, offset aInvalidLineNum
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 4E9B80h
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    CALL sub_4BB420
    MOV cs:qword_71FF08, rax
    JMP loc_4550D0
loc_455280:
    MOV cs:byte_71FF10, 0
    JMP loc_4550D0
loc_455290:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aScottBartram
    MOV edx, offset unk_4C7B3F
    MOV esi, (offset aEchonl+4)
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_4552D0:
    MOV edx, 5
    MOV esi, offset aInvalidLineNum_0
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 4E9B80h
    MOV edx, 7FFFFFFFh
    MOV esi, 1
    CALL sub_4BB420
    MOV cs:dword_71FF00, eax
    JMP loc_4550D0
loc_455310:
    MOV edx, 5
    MOV esi, offset aInvalidStartin
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 4E9B80h
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV rsi, 8000000000000000h
    CALL sub_4BB420
    MOV cs:qword_71FF20, rax
    JMP loc_4550D0
loc_455360:
    MOV edx, offset unk_72F6C0
    MOV esi, offset unk_72F9C0
    MOV edi, offset off_71FF38
    CALL sub_454720
    TEST al, al
    JNZ loc_4550D0
loc_45537C:
    MOV rdi, cs:optarg
    CALL sub_4B5440
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidFooterN
    JMP loc_4553D5
loc_4553A0:
    MOV edx, offset unk_72F8C0
    MOV esi, offset unk_72FA40
    MOV edi, offset off_71FF48
    CALL sub_454720
    TEST al, al
    JNZ loc_4550D0
loc_4553BC:
    MOV rdi, cs:optarg
    CALL sub_4B5440
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidBodyNum
loc_4553D5:
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, r12
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    XOR r12d, r12d
    CALL _error
    JMP loc_4550D0
loc_4553F8:
    MOV edx, 5
    MOV esi, offset aInvalidLineNum_1
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 4E9B80h
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    CALL sub_4BB420
    MOV cs:qword_71FF18, rax
    JMP loc_4550D0
loc_455440:
    CMP byte ptr [rdi+1], 6Eh
    JNZ loc_455610
loc_45544A:
    CMP byte ptr [rdi+2], 0
    JNZ loc_455610
loc_455454:
    MOV cs:off_71FEF8, offset aLdS_0
    JMP loc_4550D0
loc_455468:
    TEST r12b, r12b
    JZ loc_45565F
loc_455471:
    MOV rdi, cs:off_71FF28
    CALL _strlen
    LEA r14, [rax+rax]
    MOV r13, rax
    LEA rdi, [r14+rax]
    MOV cs:qword_72F698, rdi
    ADD rdi, 1
    CALL sub_4BB0B0
    MOV r15, cs:off_71FF28
    MOV rdi, rax
    MOV cs:qword_72F6A0, rax
    MOV rsi, r15
    CALL _stpcpy
    MOV rsi, r15
    MOV rdi, rax
    CALL _stpcpy
    MOV rsi, r15
    MOV rdi, rax
    CALL _strcpy
    LEA rdi, [r14+1]
    MOV cs:qword_72F688, r14
    CALL sub_4BB0B0
    MOV r14, cs:off_71FF28
    MOV rdi, rax
    MOV cs:qword_72F690, rax
    MOV rsi, r14
    CALL _stpcpy
    MOV rsi, r14
    MOV rdi, rax
    CALL _strcpy
    LEA rdi, [r13+1]
    MOV cs:qword_72F678, r13
    CALL sub_4BB0B0
    MOV rsi, cs:off_71FF28
    MOV rdi, rax
    MOV cs:qword_72F680, rax
    CALL _strcpy
    MOV edi, offset unk_72F660
    CALL sub_4A9BE0
    MOV rdi, cs:off_71FF30
    CALL _strlen
    MOV r13, rax
    MOVSXD rax, cs:dword_71FF00
    LEA rdi, [r13+rax+1]
    CALL sub_4BB0B0
    MOV rcx, rax
    MOV cs:qword_72F658, rax
    MOVSXD rax, cs:dword_71FF00
    MOV esi, 20h
    MOV rdi, rcx
    ADD r13, rax
    MOV rdx, r13
    CALL _memset
    MOV byte ptr [rax+r13], 0
    MOV rax, cs:qword_71FF20
    MOV cs:buffer, offset unk_72FA40
    MOV cs:qword_72F650, rax
    MOV rax, cs:off_71FF48
    MOV cs:qword_72FA80, rax
    MOV eax, cs:optind
    CMP ebp, eax
    JZ loc_455627
loc_4555A9:
    JLE loc_4555D1
loc_4555AB:
    NOP dword ptr [rax+rax+00h]
loc_4555B0:
    CDQE 
    MOV rdi, [rbx+rax*8]
    CALL sub_454850
    AND r12d, eax
    MOV eax, cs:optind
    ADD eax, 1
    CMP ebp, eax
    MOV cs:optind, eax
    JG loc_4555B0
loc_4555D1:
    CMP cs:byte_72F648, 0
    JNZ loc_455636
loc_4555DA:
    ADD rsp, 8
    XOR r12d, 1
    POP rbx
    MOVZX eax, r12b
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4555F1:
    CMP al, 7Ah
    JNZ loc_455610
loc_4555F5:
    CMP byte ptr [rdi+2], 0
    JNZ loc_455610
loc_4555FB:
    MOV cs:off_71FEF8, offset a0LdS
    JMP loc_4550D0
loc_455610:
    CALL sub_4B5440
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidLineNum_2
    JMP loc_4553D5
loc_455627:
    MOV edi, (offset asc_50610E+3)
    CALL sub_454850
    MOV r12d, eax
    JMP loc_4555D1
loc_455636:
    MOV rdi, cs:stdin
    CALL sub_4BE090
    CMP eax, 0FFFFFFFFh
    JNZ loc_4555DA
loc_455647:
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset asc_50610E+3)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_45565F:
    MOV edi, 1
    CALL sub_454C80
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x59', '0x5D', '0x6475ACh', '0x53'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Logic/Algorithm'}

##### T 165 - single_binary_main_nl
```assembly
loc_45DAB0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, 1
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV cs:byte_752628, 0
    NOP word ptr [rax+rax+00h]
loc_45DB10:
    XOR r8d, r8d
    MOV ecx, offset stru_511080
    MOV edx, offset aHBFVIPlSWND
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_45E068
loc_45DB30:
    CMP eax, 69h
    JZ loc_45DF40
loc_45DB39:
    JG loc_45DB70
loc_45DB3B:
    CMP eax, 62h
    JZ loc_45DEA0
loc_45DB44:
    JLE loc_45DBA8
loc_45DB46:
    CMP eax, 66h
    JZ loc_45DE00
loc_45DB4F:
    CMP eax, 68h
    JZ loc_45DC38
loc_45DB58:
    CMP eax, 64h
    JZ loc_45DC20
loc_45DB61:
    XOR r12d, r12d
    JMP loc_45DB10
loc_45DB70:
    CMP eax, 70h
    JZ loc_45DD28
loc_45DB79:
    JLE loc_45DBC8
loc_45DB7B:
    CMP eax, 76h
    JZ loc_45DDB0
loc_45DB84:
    CMP eax, 77h
    JZ loc_45DD70
loc_45DB8D:
    CMP eax, 73h
    JNZ loc_45DB61
loc_45DB92:
    MOV rax, cs:optarg
    MOV cs:off_742F30, rax
    JMP loc_45DB10
loc_45DBA8:
    CMP eax, 0FFFFFF7Dh
    JZ loc_45DD38
loc_45DBB3:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_45DB61
loc_45DBBA:
    XOR edi, edi
    CALL sub_45D6B0
loc_45DBC8:
    CMP eax, 6Ch
    JZ loc_45DCE0
loc_45DBD1:
    CMP eax, 6Eh
    JNZ loc_45DB61
loc_45DBD6:
    MOV rdi, cs:optarg
    MOVZX eax, byte ptr [rdi]
    CMP eax, 6Ch
    JZ loc_45DF88
loc_45DBE9:
    CMP eax, 72h
    JNZ loc_45E210
loc_45DBF2:
    MOVZX eax, byte ptr [rdi+1]
    CMP al, 6Eh
    JNZ loc_45E1F1
loc_45DBFE:
    CMP byte ptr [rdi+2], 0
    JNZ loc_45E210
loc_45DC08:
    MOV cs:off_742EF8, offset aLdS
    JMP loc_45DB10
loc_45DC20:
    MOV rax, cs:optarg
    MOV cs:off_742F28, rax
    JMP loc_45DB10
loc_45DC38:
    MOV rdi, cs:optarg
    MOVZX eax, byte ptr [rdi]
    CMP al, 6Eh
    JZ loc_45E058
loc_45DC4A:
    JLE loc_45E050
loc_45DC50:
    CMP al, 70h
    JNZ loc_45DFB0
loc_45DC58:
    LEA r13, [rdi+1]
    MOV cs:off_742F40, rdi
    MOV cs:stru_7529E0.buffer, 0
    MOV cs:stru_7529E0.allocated, 0
    MOV cs:stru_7529E0.fastmap, offset unk_7527A0
    MOV rdi, r13
    MOV cs:optarg, r13
    MOV cs:stru_7529E0.translate, 0
    MOV cs:re_syntax_options, 2C6h
    CALL _strlen
    MOV edx, offset stru_7529E0
    MOV rsi, rax
    MOV rdi, r13
    CALL _re_compile_pattern
    TEST rax, rax
    JZ loc_45DB10
loc_45DCC2:
    MOV rcx, rax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00000000h]
loc_45DCE0:
    MOV edx, 5
    MOV esi, offset aInvalidLineNum
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 50CABAh
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    CALL sub_4DCEC0
    MOV cs:qword_742F08, rax
    JMP loc_45DB10
loc_45DD28:
    MOV cs:byte_742F10, 0
    JMP loc_45DB10
loc_45DD38:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aScottBartram
    MOV edx, offset unk_4EA7DF
    MOV esi, (offset aEchonl+4)
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_45DD70:
    MOV edx, 5
    MOV esi, offset aInvalidLineNum_0
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 50CABAh
    MOV edx, 7FFFFFFFh
    MOV esi, 1
    CALL sub_4DCEC0
    MOV cs:dword_742F00, eax
    JMP loc_45DB10
loc_45DDB0:
    MOV edx, 5
    MOV esi, offset aInvalidStartin
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 50CABAh
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV rsi, 8000000000000000h
    CALL sub_4DCEC0
    MOV cs:qword_742F20, rax
    JMP loc_45DB10
loc_45DE00:
    MOV rdi, cs:optarg
    MOVZX eax, byte ptr [rdi]
    CMP al, 6Eh
    JZ loc_45E034
loc_45DE12:
    JLE loc_45E030
loc_45DE18:
    CMP al, 70h
    JNZ loc_45DFF0
loc_45DE20:
    LEA r13, [rdi+1]
    MOV cs:off_742F38, rdi
    MOV cs:stru_7529A0.buffer, 0
    MOV cs:stru_7529A0.allocated, 0
    MOV cs:stru_7529A0.fastmap, offset unk_7526A0
    MOV rdi, r13
    MOV cs:optarg, r13
    MOV cs:stru_7529A0.translate, 0
    MOV cs:re_syntax_options, 2C6h
    CALL _strlen
    MOV edx, offset stru_7529A0
    MOV rsi, rax
    MOV rdi, r13
    CALL _re_compile_pattern
    TEST rax, rax
    JZ loc_45DB10
loc_45DE8A:
    MOV rcx, rax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_45DEA0:
    MOV rdi, cs:optarg
    MOVZX eax, byte ptr [rdi]
    CMP al, 6Eh
    JZ loc_45E044
loc_45DEB2:
    JLE loc_45E040
loc_45DEB8:
    CMP al, 70h
    JNZ loc_45E010
loc_45DEC0:
    LEA r13, [rdi+1]
    MOV cs:off_742F48, rdi
    MOV cs:stru_752A20.buffer, 0
    MOV cs:stru_752A20.allocated, 0
    MOV cs:stru_752A20.fastmap, offset unk_7528A0
    MOV rdi, r13
    MOV cs:optarg, r13
    MOV cs:stru_752A20.translate, 0
    MOV cs:re_syntax_options, 2C6h
    CALL _strlen
    MOV edx, offset stru_752A20
    MOV rsi, rax
    MOV rdi, r13
    CALL _re_compile_pattern
    TEST rax, rax
    JZ loc_45DB10
loc_45DF2A:
    MOV rcx, rax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_45DF40:
    MOV edx, 5
    MOV esi, offset aInvalidLineNum_1
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 50CABAh
    MOV rdx, 7FFFFFFFFFFFFFFFh
    MOV esi, 1
    CALL sub_4DCEC0
    MOV cs:qword_742F18, rax
    JMP loc_45DB10
loc_45DF88:
    CMP byte ptr [rdi+1], 6Eh
    JNZ loc_45E210
loc_45DF92:
    CMP byte ptr [rdi+2], 0
    JNZ loc_45E210
loc_45DF9C:
    MOV cs:off_742EF8, offset aLdS_0
    JMP loc_45DB10
loc_45DFB0:
    CMP al, 74h
    JZ loc_45E058
loc_45DFB8:
    CALL sub_4D4D30
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidHeaderN
loc_45DFCA:
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, r12
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    XOR r12d, r12d
    CALL _error
    JMP loc_45DB10
loc_45DFF0:
    CMP al, 74h
    JZ loc_45E034
loc_45DFF4:
    CALL sub_4D4D30
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidFooterN
    JMP loc_45DFCA
loc_45E010:
    CMP al, 74h
    JZ loc_45E044
loc_45E014:
    CALL sub_4D4D30
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidBodyNum
    JMP loc_45DFCA
loc_45E030:
    CMP al, 61h
    JNZ loc_45DFF4
loc_45E034:
    MOV cs:off_742F38, rdi
    JMP loc_45DB10
loc_45E040:
    CMP al, 61h
    JNZ loc_45E014
loc_45E044:
    MOV cs:off_742F48, rdi
    JMP loc_45DB10
loc_45E050:
    CMP al, 61h
    JNZ loc_45DFB8
loc_45E058:
    MOV cs:off_742F40, rdi
    JMP loc_45DB10
loc_45E068:
    TEST r12b, r12b
    JZ loc_45E25F
loc_45E071:
    MOV rdi, cs:off_742F28
    CALL _strlen
    LEA r14, [rax+rax]
    MOV r13, rax
    LEA rdi, [r14+rax]
    MOV cs:qword_752678, rdi
    ADD rdi, 1
    CALL sub_4DCC10
    MOV r15, cs:off_742F28
    MOV rdi, rax
    MOV cs:qword_752680, rax
    MOV rsi, r15
    CALL _stpcpy
    MOV rsi, r15
    MOV rdi, rax
    CALL _stpcpy
    MOV rsi, r15
    MOV rdi, rax
    CALL _strcpy
    LEA rdi, [r14+1]
    MOV cs:qword_752668, r14
    CALL sub_4DCC10
    MOV r14, cs:off_742F28
    MOV rdi, rax
    MOV cs:qword_752670, rax
    MOV rsi, r14
    CALL _stpcpy
    MOV rsi, r14
    MOV rdi, rax
    CALL _strcpy
    LEA rdi, [r13+1]
    MOV cs:qword_752658, r13
    CALL sub_4DCC10
    MOV rsi, cs:off_742F28
    MOV rdi, rax
    MOV cs:qword_752660, rax
    CALL _strcpy
    MOV edi, offset unk_752640
    CALL sub_4C5B70
    MOV rdi, cs:off_742F30
    CALL _strlen
    MOV r13, rax
    MOVSXD rax, cs:dword_742F00
    LEA rdi, [r13+rax+1]
    CALL sub_4DCC10
    MOV rcx, rax
    MOV cs:qword_752638, rax
    MOVSXD rax, cs:dword_742F00
    MOV esi, 20h
    MOV rdi, rcx
    ADD r13, rax
    MOV rdx, r13
    CALL _memset
    MOV byte ptr [rax+r13], 0
    MOV rax, cs:qword_742F20
    MOV cs:buffer, offset stru_752A20
    MOV cs:qword_752630, rax
    MOV rax, cs:off_742F48
    MOV cs:qword_752A60, rax
    MOV eax, cs:optind
    CMP ebp, eax
    JZ loc_45E227
loc_45E1A9:
    JLE loc_45E1D1
loc_45E1AB:
    NOP dword ptr [rax+rax+00h]
loc_45E1B0:
    CDQE 
    MOV rdi, [rbx+rax*8]
    CALL sub_45D1D0
    AND r12d, eax
    MOV eax, cs:optind
    ADD eax, 1
    CMP ebp, eax
    MOV cs:optind, eax
    JG loc_45E1B0
loc_45E1D1:
    CMP cs:byte_752628, 0
    JNZ loc_45E236
loc_45E1DA:
    ADD rsp, 8
    XOR r12d, 1
    POP rbx
    MOVZX eax, r12b
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45E1F1:
    CMP al, 7Ah
    JNZ loc_45E210
loc_45E1F5:
    CMP byte ptr [rdi+2], 0
    JNZ loc_45E210
loc_45E1FB:
    MOV cs:off_742EF8, offset a0LdS
    JMP loc_45DB10
loc_45E210:
    CALL sub_4D4D30
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aInvalidLineNum_2
    JMP loc_45DFCA
loc_45E227:
    MOV edi, (offset asc_52A7CE+3)
    CALL sub_45D1D0
    MOV r12d, eax
    JMP loc_45E1D1
loc_45E236:
    MOV rdi, cs:stdin
    CALL sub_4E0210
    CMP eax, 0FFFFFFFFh
    JNZ loc_45E1DA
loc_45E247:
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset asc_52A7CE+3)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_45E25F:
    MOV edi, 1
    CALL sub_45D6B0
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2', '0x59', '0x5D', '0x6AF0EC', '0x53'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 166 - two_arguments
```assembly
loc_414DD0:

loc_415886:
    CMP byte ptr [rsi+1], 0
    JNZ loc_4158CB
loc_41588C:
    ADD eax, 2
    MOV cs:dword_72072C, eax
    MOV rax, [rcx+rdi+8]
    POP rbx
    CMP byte ptr [rax], 0
    SETZ al
    RETN 
loc_4158A8:
    CMP dl, 2Dh
    JNZ loc_4158CB
loc_4158AD:
    CMP byte ptr [rsi+1], 0
    JZ loc_4158CB
loc_4158B3:
    CMP byte ptr [rsi+2], 0
    JNZ loc_4158CB
loc_4158B9:
    MOV rdi, rsi
    CALL sub_415830
    TEST al, al
    JZ loc_4158D0
loc_4158C5:
    POP rbx
    JMP sub_414DD0
loc_4158CB:
    CALL sub_414D60
loc_4158D0:
    MOV rdi, rsi
    CALL sub_4B5440
    MOV esi, offset aSUnaryOperator
    MOV rbx, rax
    XOR edi, edi
    MOV edx, 5
    CALL _dcgettext
    MOV rsi, rbx
    MOV rdi, rax
    XOR eax, eax
    CALL sub_414BD0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x66', '0xA', '0x30'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### T 166 - two_arguments
```assembly
loc_416640:

loc_416D56:
    CMP byte ptr [rdi+1], 0
    JNZ loc_416DD6
loc_416D5C:
    ADD eax, 2
    MOV cs:dword_74371C, eax
    MOV rax, [rcx+rsi+8]
    POP rbx
    CMP byte ptr [rax], 0
    SETZ al
    RETN 
loc_416D78:
    CMP dl, 2Dh
    JNZ loc_416DD6
loc_416D7D:
    MOVZX eax, byte ptr [rdi+1]
    TEST al, al
    JZ loc_416DD6
loc_416D85:
    CMP byte ptr [rdi+2], 0
    JNZ loc_416DD6
loc_416D8B:
    SUB eax, 47h
    CMP al, 33h
    JA loc_416DA2
loc_416D92:
    MOV rdx, 0B7B93FC0011A1h
    BT rdx, rax
    JB loc_416DD0
loc_416DA2:
    CALL sub_4D4D30
    MOV esi, offset aSUnaryOperator
    MOV rbx, rax
    XOR edi, edi
    MOV edx, 5
    CALL _dcgettext
    MOV rsi, rbx
    MOV rdi, rax
    XOR eax, eax
    CALL sub_415EE0
loc_416DD0:
    POP rbx
    JMP sub_416640
loc_416DD6:
    CALL sub_416070
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x66', '0xA', '0x30', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Array Manipulation'}

##### Q 167 - get_next
```assembly
loc_48D030:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV rax, [rdi+10h]
loc_48D03F:
    TEST rsi, rsi
    JZ loc_48D04A
loc_48D044:
    MOV dword ptr [rsi], 2
loc_48D04A:
    CMP rax, 0FFFFFFFFFFFFFFFEh
    JZ loc_48D0A0
loc_48D050:
    MOV r14, [rbp+8]
loc_48D054:
    TEST r14, r14
    JZ loc_48D238
loc_48D05D:
    CMP dword ptr [r14], 4
    JA def_48D06A
loc_48D067:
    MOV eax, [r14]
    JMP ds:jpt_48D06A[rax*8]
loc_48D078:
    MOVZX r13d, byte ptr [r14+10h]
    MOV rax, [r14+8]
    MOV qword ptr [rbp+10h], 0FFFFFFFFFFFFFFFFh
    MOV [rbp+8], rax
    MOV eax, r13d
loc_48D090:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_48D0A0:
    MOV rax, [rbp+0]
    MOV r14, [rax+8]
    MOV qword ptr [rbp+10h], 0FFFFFFFFFFFFFFFFh
    MOV [rbp+8], r14
    JMP loc_48D054
loc_48D0C0:
    CMP qword ptr [r14+18h], 0
    JNZ loc_48D25B
loc_48D0CB:
    MOV rax, [r14+8]
    MOV qword ptr [rbp+10h], 0FFFFFFFFFFFFFFFFh
    MOV [rbp+8], rax
    MOV rax, 0FFFFFFFFFFFFFFFFh
    JMP loc_48D03F
loc_48D0F0:
    MOV rdx, [rbp+10h]
    CMP rdx, 0FFFFFFFFFFFFFFFFh
    JZ loc_48D1F0
loc_48D0FE:
    ADD rdx, 1
    MOV [rbp+10h], rdx
loc_48D106:
    MOVZX ecx, byte ptr [r14+11h]
    MOV eax, edx
    CMP rcx, rdx
    JNZ loc_48D090
loc_48D116:
    MOV rdx, [r14+8]
    MOV qword ptr [rbp+10h], 0FFFFFFFFFFFFFFFFh
    MOV [rbp+8], rdx
    JMP loc_48D090
loc_48D130:
    TEST rsi, rsi
    MOV r12d, [r14+10h]
    JZ loc_48D153
loc_48D139:
    CMP r12d, 6
    JZ loc_48D1E0
loc_48D143:
    CMP r12d, 0Ah
    JNZ loc_48D153
loc_48D149:
    MOV dword ptr [rsi], 1
    MOV r12d, [r14+10h]
loc_48D153:
    MOV rbx, [rbp+10h]
    CMP rbx, 0FFFFFFFFFFFFFFFFh
    JZ loc_48D200
loc_48D161:
    MOVZX esi, bl
    MOV edi, r12d
    CALL sub_48CD10
    TEST al, al
    JZ loc_48D288
loc_48D174:
    MOV r13d, ebx
    ADD ebx, 1
    CMP ebx, 0FFh
    JLE loc_48D193
loc_48D182:
    JMP loc_48D1C0
loc_48D188:
    ADD ebx, 1
    CMP ebx, 100h
    JZ loc_48D1C0
loc_48D193:
    MOVZX esi, bl
    MOV edi, r12d
    CALL sub_48CD10
    TEST al, al
    JZ loc_48D188
loc_48D1A2:
    MOVSXD rbx, ebx
    MOV eax, r13d
    MOV [rbp+10h], rbx
    JMP loc_48D090
loc_48D1B8:
    CALL _abort
loc_48D1C0:
    MOV rax, [r14+8]
    MOV qword ptr [rbp+10h], 0FFFFFFFFFFFFFFFFh
    MOV [rbp+8], rax
    MOV eax, r13d
    JMP loc_48D090
loc_48D1E0:
    MOV dword ptr [rsi], 0
    MOV r12d, [r14+10h]
    JMP loc_48D153
loc_48D1F0:
    MOVZX edx, byte ptr [r14+10h]
    MOV [rbp+10h], rdx
    JMP loc_48D106
loc_48D200:
    XOR ebx, ebx
    JMP loc_48D213
loc_48D208:
    ADD ebx, 1
    CMP ebx, 100h
    JZ loc_48D242
loc_48D213:
    MOV esi, ebx
    MOV edi, r12d
    CALL sub_48CD10
    TEST al, al
    JZ loc_48D208
loc_48D221:
    MOVSXD rbx, ebx
    MOV [rbp+10h], rbx
    MOV r12d, [r14+10h]
    JMP loc_48D161
loc_48D238:
    MOV eax, 0FFFFFFFFh
    JMP loc_48D090
loc_48D242:
    MOV ecx, offset aGetNext
    MOV edx, 434h
    MOV esi, offset file
    MOV edi, offset aINChars
    CALL ___assert_fail
loc_48D25B:
    MOV rdx, [rbp+10h]
    LEA rax, [rdx+1]
    CMP rdx, 0FFFFFFFFFFFFFFFFh
    MOV edx, 1
    CMOVNZ rdx, rax
    MOV [rbp+10h], rdx
    CMP [r14+18h], rdx
    MOVZX eax, byte ptr [r14+10h]
    JNZ loc_48D090
loc_48D283:
    JMP loc_48D116
loc_48D288:
    MOV ecx, offset aGetNext
    MOV edx, 437h
    MOV esi, offset file
    MOV edi, offset aIsCharClassMem
    CALL ___assert_fail
```
{'input_parameter_count': 5, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x75', '0x22', '0x212', '0x7C', '0xFF', '0x1FF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### T 167 - get_next
```assembly
loc_4A3CA0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST rsi, rsi
    MOV rbx, [rdi+10h]
    JZ loc_4A3FA0
loc_4A3CBE:
    CMP rbx, 0FFFFFFFFFFFFFFFEh
    MOV dword ptr [rsi], 2
    JZ loc_4A3D28
loc_4A3CCA:
    MOV rbp, [r12+8]
loc_4A3CCF:
    TEST rbp, rbp
    JZ loc_4A4240
loc_4A3CD8:
    CMP dword ptr [rbp+0], 4
    JA def_4A3CE1
loc_4A3CDE:
    MOV eax, [rbp+0]
    JMP ds:jpt_4A3CE1[rax*8]
loc_4A3CF0:
    MOVZX r14d, byte ptr [rbp+10h]
    MOV rax, [rbp+8]
    MOV qword ptr [r12+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r12+8], rax
    MOV eax, r14d
loc_4A3D0A:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4A3D20:
    CALL _abort
loc_4A3D28:
    MOV rax, [r12]
    MOV rbx, 0FFFFFFFFFFFFFFFFh
    MOV rbp, [rax+8]
    MOV qword ptr [r12+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r12+8], rbp
    JMP loc_4A3CCF
loc_4A3D50:
    CMP rbx, 0FFFFFFFFFFFFFFFFh
    LEA rdx, [rbx+1]
    JZ loc_4A4008
loc_4A3D5E:
    MOV [r12+10h], rdx
    MOVZX ecx, byte ptr [rbp+11h]
    MOV eax, edx
    CMP rdx, rcx
    JNZ loc_4A3D0A
loc_4A3D6E:
    MOV rdx, [rbp+8]
    MOV qword ptr [r12+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r12+8], rdx
    JMP loc_4A3D0A
loc_4A3D88:
    MOV r13d, [rbp+10h]
    CMP r13d, 6
    JZ loc_4A3FD0
loc_4A3D96:
    CMP r13d, 0Ah
    JNZ loc_4A3DA6
loc_4A3D9C:
    MOV dword ptr [rsi], 1
loc_4A3DA2:
    MOV r13d, [rbp+10h]
loc_4A3DA6:
    CMP rbx, 0FFFFFFFFFFFFFFFFh
    JZ loc_4A3FE0
loc_4A3DB0:
    MOVZX esi, bl
    MOV edi, r13d
    CALL sub_4A2530
    TEST al, al
    JZ loc_4A4287
loc_4A3DC3:
    MOV r14d, ebx
    ADD ebx, 1
    CMP ebx, 0FFh
    JG loc_4A3E4B
loc_4A3DD1:
    NOP dword ptr [rax+00000000h]
loc_4A3DD8:
    CMP r13d, 0Bh
    MOVZX r15d, bl
    JA def_4A3CE1
loc_4A3DE6:
    MOV eax, r13d
    JMP ds:jpt_4A3DE9[rax*8]
loc_4A3DF0:
    CMP qword ptr [rbp+18h], 0
    JNZ loc_4A425E
loc_4A3DFB:
    MOV rax, [rbp+8]
    MOV rbx, 0FFFFFFFFFFFFFFFFh
    MOV qword ptr [r12+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r12+8], rax
    JMP loc_4A3CBE
loc_4A3E20:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 100h
    MOVZX edx, dx
    NOP dword ptr [rax]
loc_4A3E38:
    TEST edx, edx
    JNZ loc_4A4228
loc_4A3E40:
    ADD ebx, 1
    CMP ebx, 100h
    JNZ loc_4A3DD8
loc_4A3E4B:
    MOV rax, [rbp+8]
    MOV qword ptr [r12+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r12+8], rax
    MOV eax, r14d
    JMP loc_4A3D0A
loc_4A3E68:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 2000h
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3E80:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND edx, 4
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3E98:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 4000h
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3EB0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 200h
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3ED0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 8000h
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3EF0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 800h
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3F10:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND edx, 2
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3F30:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND edx, 1
    JMP loc_4A3E38
loc_4A3F48:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 400h
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3F68:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND edx, 8
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3F80:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX edx, word ptr [rax+r15*2]
    AND dx, 1000h
    MOVZX edx, dx
    JMP loc_4A3E38
loc_4A3FA0:
    CMP rbx, 0FFFFFFFFFFFFFFFEh
    JZ loc_4A4018
loc_4A3FA6:
    MOV rbp, [r12+8]
loc_4A3FAB:
    TEST rbp, rbp
    JZ loc_4A4240
loc_4A3FB4:
    CMP dword ptr [rbp+0], 4
    JA def_4A3CE1
loc_4A3FBE:
    MOV eax, [rbp+0]
    JMP ds:jpt_4A3FC1[rax*8]
loc_4A3FD0:
    MOV dword ptr [rsi], 0
    MOV r13d, [rbp+10h]
    JMP loc_4A3DA6
loc_4A3FE0:
    XOR r15d, r15d
    XOR r14d, r14d
    NOP word ptr [rax+rax+00000000h]
loc_4A3FF0:
    CMP r13d, 0Bh
    JA def_4A3CE1
loc_4A3FFA:
    MOV eax, r13d
    JMP ds:jpt_4A3FFD[rax*8]
loc_4A4008:
    MOVZX edx, byte ptr [rbp+10h]
    JMP loc_4A3D5E
loc_4A4018:
    MOV rax, [rdi]
    MOV rbx, 0FFFFFFFFFFFFFFFFh
    MOV rbp, [rax+8]
    MOV qword ptr [rdi+10h], 0FFFFFFFFFFFFFFFFh
    MOV [rdi+8], rbp
    JMP loc_4A3FAB
loc_4A4040:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 100h
    MOVZX eax, ax
    NOP word ptr [rax+rax+00000000h]
loc_4A4060:
    TEST eax, eax
    JNZ loc_4A4250
loc_4A4068:
    ADD r14, 1
    ADD r15, 2
    CMP r14, 100h
    JNZ loc_4A3FF0
loc_4A407D:
    MOV ecx, offset aGetNext
    MOV edx, 434h
    MOV esi, offset aSrcTrC
    MOV edi, offset aINChars
    CALL ___assert_fail
loc_4A40A0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 2000h
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A40C0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND eax, 2
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A40E0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND eax, 1
    JMP loc_4A4060
loc_4A4100:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 400h
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A4120:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND eax, 8
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A4140:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 1000h
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A4160:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 4000h
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A4180:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 200h
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A41A0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 8000h
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A41C0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND ax, 800h
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A41E0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOV rbx, r14
    MOVZX eax, word ptr [rax+r15]
    AND eax, 4
    MOVZX eax, ax
    JMP loc_4A4060
loc_4A4200:
    CMP qword ptr [rbp+18h], 0
    JNZ loc_4A425E
loc_4A4207:
    MOV rax, [rbp+8]
    MOV rbx, 0FFFFFFFFFFFFFFFFh
    MOV qword ptr [r12+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r12+8], rax
    JMP loc_4A3FA6
loc_4A4228:
    MOVSXD rbx, ebx
    MOV eax, r14d
    MOV [r12+10h], rbx
    JMP loc_4A3D0A
loc_4A4240:
    MOV eax, 0FFFFFFFFh
    JMP loc_4A3D0A
loc_4A4250:
    MOV [r12+10h], r14
    MOV r13d, [rbp+10h]
    JMP loc_4A3DB0
loc_4A425E:
    LEA rax, [rbx+1]
    CMP rbx, 0FFFFFFFFFFFFFFFFh
    MOV edx, 1
    CMOVNZ rdx, rax
    MOV [r12+10h], rdx
    CMP [rbp+18h], rdx
    MOVZX eax, byte ptr [rbp+10h]
    JNZ loc_4A3D0A
loc_4A4282:
    JMP loc_4A3D6E
loc_4A4287:
    MOV ecx, offset aGetNext
    MOV edx, 437h
    MOV esi, offset aSrcTrC
    MOV edi, offset aIsCharClassMem
    CALL ___assert_fail
```
None

##### Q 168 - single_binary_main_wc
```assembly
loc_4948E0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13d, edi
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    XOR ebp, ebp
    SUB rsp, 1F8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+228h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    CALL _getpagesize
    MOV rdi, cs:stdout
    CDQE 
    XOR ecx, ecx
    MOV edx, 1
    XOR esi, esi
    MOV cs:qword_7354F8, rax
    CALL _setvbuf
    MOV cs:byte_735509, 0
    MOV cs:byte_73550A, 0
    MOV cs:byte_73550B, 0
    MOV cs:byte_73550C, 0
    MOV cs:byte_735508, 0
    MOV cs:qword_735510, 0
    MOV cs:qword_735518, 0
    MOV cs:qword_735520, 0
    MOV cs:qword_735528, 0
    MOV cs:qword_735530, 0
loc_4949C3:
    XOR r8d, r8d
    MOV ecx, offset stru_503C40
    MOV edx, offset aCllmw
    MOV rsi, rbx
    MOV edi, r13d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_494AD0
loc_4949E4:
    CMP eax, 63h
    JZ loc_494AC0
loc_4949ED:
    JLE loc_494A10
loc_4949EF:
    CMP eax, 6Dh
    JZ loc_494A68
loc_4949F4:
    JLE loc_494A50
loc_4949F6:
    CMP eax, 77h
    JZ loc_494A40
loc_4949FB:
    ADD eax, 0FFFFFF80h
    JNZ loc_494A23
loc_494A00:
    MOV rbp, cs:optarg
    JMP loc_4949C3
loc_494A10:
    CMP eax, 0FFFFFF7Eh
    JZ loc_494A78
loc_494A17:
    CMP eax, 4Ch
    JZ loc_494A30
loc_494A1C:
    CMP eax, 0FFFFFF7Dh
    JZ loc_494A80
loc_494A23:
    MOV edi, 1
    CALL sub_494570
loc_494A30:
    MOV cs:byte_735508, 1
    JMP loc_4949C3
loc_494A40:
    MOV cs:byte_73550B, 1
    JMP loc_4949C3
loc_494A50:
    CMP eax, 6Ch
    JNZ loc_494A23
loc_494A55:
    MOV cs:byte_73550C, 1
    JMP loc_4949C3
loc_494A68:
    MOV cs:byte_73550A, 1
    JMP loc_4949C3
loc_494A78:
    XOR edi, edi
    CALL sub_494570
loc_494A80:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aPaulRubin
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aWc
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_494AC0:
    MOV cs:byte_735509, 1
    JMP loc_4949C3
loc_494AD0:
    CMP cs:byte_73550C, 0
    JNZ loc_494B18
loc_494AD9:
    CMP cs:byte_73550B, 0
    JNZ loc_494B18
loc_494AE2:
    CMP cs:byte_73550A, 0
    JNZ loc_494B18
loc_494AEB:
    CMP cs:byte_735509, 0
    JNZ loc_494B18
loc_494AF4:
    CMP cs:byte_735508, 0
    JNZ loc_494B18
loc_494AFD:
    MOV cs:byte_735509, 1
    MOV cs:byte_73550B, 1
    MOV cs:byte_73550C, 1
    NOP word ptr [rax+rax+00h]
loc_494B18:
    TEST rbp, rbp
    JZ loc_495126
loc_494B21:
    MOVSXD rax, cs:optind
    CMP r13d, eax
    JG loc_4952AF
loc_494B31:
    CMP byte ptr [rbp+0], 2Dh
    JNZ loc_494C69
loc_494B3B:
    CMP byte ptr [rbp+1], 0
    JNZ loc_494C69
loc_494B45:
    MOV rbx, cs:stdin
loc_494B4C:
    MOV rdi, rbx
    CALL _fileno
    LEA rdx, [rsp+228h+stat_buf]
    MOV esi, eax
    MOV edi, 1
    CALL ___fxstat
    TEST eax, eax
    JNZ loc_494B83
loc_494B6C:
    MOV eax, [rsp+228h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 8000h
    JZ loc_4951A0
loc_494B83:
    MOV rdi, rbx
    XOR ebx, ebx
    CALL sub_4962A0
    MOV [rsp+228h+var_209], 0
    MOV r14, rax
    MOV [rsp+228h+var_218], 0
loc_494B9E:
    TEST r14, r14
    JZ loc_495066
loc_494BA7:
    TEST rbx, rbx
    JZ loc_494F40
loc_494BB0:
    MOV edx, 98h
    XOR ecx, ecx
    MOV rax, rdx
    MUL rbx
    JO loc_495322
loc_494BC3:
    TEST rax, rax
    JS loc_495066
loc_494BCC:
    TEST rcx, rcx
    JNZ loc_495066
loc_494BD5:
    LEA rax, [rbx+rbx*8]
    LEA rdi, [rbx+rax*2]
    SHL rdi, 3
    CALL sub_4BB0B0
    CMP rbx, 1
    MOV r15, rax
    JZ loc_4950ED
loc_494BF3:
    MOV r8, r15
    LEA r12, [r15+8]
    XOR r13d, r13d
    JMP loc_494C35
loc_494C00:
    MOV rdx, r12
    MOV edi, 1
    MOV qword ptr [rsp+228h+fd], r8
    CALL ___xstat
    MOV r8, qword ptr [rsp+228h+fd]
loc_494C17:
    ADD r13, 1
    MOV [r8], eax
    ADD r12, 98h
    ADD r8, 98h
    CMP rbx, r13
    JZ loc_494CC0
loc_494C35:
    MOV rax, [rsp+228h+var_218]
    MOV rsi, [rax+r13*8]
    TEST rsi, rsi
    JZ loc_494C4E
loc_494C43:
    CMP byte ptr [rsi], 2Dh
    JNZ loc_494C00
loc_494C48:
    CMP byte ptr [rsi+1], 0
    JNZ loc_494C00
loc_494C4E:
    MOV rdx, r12
    XOR esi, esi
    MOV edi, 1
    MOV qword ptr [rsp+228h+fd], r8
    CALL ___fxstat
    MOV r8, qword ptr [rsp+228h+fd]
    JMP loc_494C17
loc_494C69:
    MOV esi, offset modes
    MOV rdi, rbp
    CALL _fopen
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_494B4C
loc_494C82:
    MOV rsi, rbp
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aCannotOpenSFor
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
loc_494CC0:
    MOV edi, [r15]
    MOV ecx, 1
    TEST edi, edi
    JLE loc_49506B
loc_494CD0:
    MOV cs:dword_735504, ecx
    XOR r12d, r12d
    MOV r13d, 1
    JMP loc_494D66
loc_494CE8:
    CMP byte ptr [rbp+1], 0
    MOVZX eax, byte ptr [rax]
    JNZ loc_494D91
loc_494CF5:
    CMP al, 2Dh
    JNZ loc_494D91
loc_494CFD:
    CMP byte ptr [r8+1], 0
    JNZ loc_494DF8
loc_494D08:
    MOV rsi, r8
    MOV edi, 4
    MOV qword ptr [rsp+228h+fd], r8
    CALL sub_4B5100
    XOR edi, edi
    MOV r13, rax
    MOV edx, 5
    MOV esi, offset aWhenReadingFil
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    MOV rcx, r13
    CALL _error
    MOV r8, qword ptr [rsp+228h+fd]
    CMP byte ptr [r8], 0
    JZ loc_494D95
loc_494D4A:
    NOP word ptr [rax+rax+00h]
loc_494D50:
    XOR r13d, r13d
loc_494D53:
    TEST rbx, rbx
    JNZ loc_494D5F
loc_494D58:
    MOV dword ptr [r15], 1
loc_494D5F:
    ADD r12, 98h
loc_494D66:
    LEA rsi, [rsp+228h+var_1FC]
    MOV rdi, r14
    CALL sub_4962E0
    TEST rax, rax
    MOV r8, rax
    JZ loc_494EA0
loc_494D7F:
    TEST rbp, rbp
    JZ loc_494DE8
loc_494D84:
    CMP byte ptr [rbp+0], 2Dh
    JZ loc_494CE8
loc_494D8E:
    MOVZX eax, byte ptr [rax]
loc_494D91:
    TEST al, al
    JNZ loc_494DF8
loc_494D95:
    MOV rdi, r14
    CALL sub_496370
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aInvalidZeroLen
    MOV r13, rax
    CALL _dcgettext
    MOV rdx, rbp
    XOR edi, edi
    MOV esi, 3
    MOV qword ptr [rsp+228h+fd], rax
    CALL sub_4B5220
    MOV r9, qword ptr [rsp+228h+fd]
    MOV rcx, rax
    MOV r8, r13
    MOV edx, offset aSLuS
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_494D50
loc_494DE8:
    CMP byte ptr [rax], 0
    JZ loc_494F10
loc_494DF1:
    MOVZX eax, byte ptr [rax]
    NOP dword ptr [rax+00h]
loc_494DF8:
    TEST rbx, rbx
    MOV edx, 0
    CMOVNZ rdx, r12
    ADD rdx, r15
    CMP al, 2Dh
    JZ loc_494E70
loc_494E0B:
    XOR esi, esi
    MOV rdi, r8
    XOR eax, eax
    MOV [rsp+228h+var_218], rdx
    MOV qword ptr [rsp+228h+fd], r8
    CALL _open
    CMP eax, 0FFFFFFFFh
    MOV r8, qword ptr [rsp+228h+fd]
    MOV rdx, [rsp+228h+var_218]
    JZ loc_494EE0
loc_494E34:
    XOR ecx, ecx
    MOV rsi, r8
    MOV edi, eax
    MOV [rsp+228h+var_218], r8
    MOV [rsp+228h+fd], eax
    CALL sub_493C60
    MOV r9d, [rsp+228h+fd]
    MOV [rsp+228h+var_20A], al
    MOV edi, r9d
    CALL _close
    TEST eax, eax
    MOV r8, [rsp+228h+var_218]
    JNZ loc_494EE0
loc_494E63:
    AND r13b, [rsp+228h+var_20A]
    JMP loc_494D53
loc_494E70:
    CMP byte ptr [r8+1], 0
    JNZ loc_494E0B
loc_494E77:
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV rsi, r8
    XOR edi, edi
    MOV cs:byte_735500, 1
    CALL sub_493C60
    AND r13d, eax
    JMP loc_494D53
loc_494EA0:
    MOV eax, [rsp+228h+var_1FC]
    CMP eax, 3
    JZ loc_495066
loc_494EAD:
    CMP eax, 4
    JZ loc_495022
loc_494EB6:
    CMP eax, 2
    JZ loc_494F5E
loc_494EBF:
    MOV ecx, offset aSingleBinaryMa_7
    MOV edx, 31Ah
    MOV esi, offset aSrcWcC
    MOV edi, offset aUnexpectedErro
    CALL ___assert_fail
loc_494EE0:
    MOV rdx, r8
    XOR edi, edi
    MOV esi, 3
    CALL sub_4B5220
    MOV r13, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r13
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_494D50
loc_494F10:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aInvalidZeroLen
    CALL _dcgettext
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_494D50
loc_494F40:
    MOV edi, 98h
    CALL sub_4BB0B0
    MOV r15, rax
loc_494F4D:
    MOV dword ptr [r15], 1
    MOV ecx, 1
    JMP loc_494CD0
loc_494F5E:
    TEST rbp, rbp
    JNZ loc_494F7F
loc_494F63:
    TEST r13b, r13b
    JZ loc_494F7F
loc_494F68:
    MOV rdi, r14
    MOV r13d, 1
    CALL sub_496370
    TEST rax, rax
    JZ loc_495241
loc_494F7F:
    CMP [rsp+228h+var_209], 0
    JNZ loc_495160
loc_494F8A:
    MOV rdi, r14
    CALL sub_496370
    CMP rax, 1
    JBE loc_494FD4
loc_494F98:
    MOV edx, 5
    MOV esi, offset aTotal
    XOR edi, edi
    CALL _dcgettext
    MOV r8, cs:qword_735510
    MOV rcx, cs:qword_735518
    MOV r9, rax
    MOV rdx, cs:qword_735520
    MOV rsi, cs:qword_735528
    MOV rdi, cs:qword_735530
    CALL sub_493A50
loc_494FD4:
    MOV rdi, r14
    CALL sub_496390
    MOV rdi, r15
    CALL _free
    CMP cs:byte_735500, 0
    JNZ loc_49516F
loc_494FF1:
    XOR r13d, 1
    MOV rcx, [rsp+228h+var_40]
    XOR rcx, fs:28h
    MOVZX eax, r13b
    JNZ loc_495275
loc_495010:
    ADD rsp, 1F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_495022:
    MOV rdx, rbp
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, 5
    MOV esi, offset aS_14
    XOR edi, edi
    MOV rbp, rax
    XOR r13d, r13d
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_494F7F
loc_495066:
    CALL sub_429BE0
loc_49506B:
    LEA rdx, [rbx+rbx*8]
    MOV rax, r15
    MOV edi, 1
    LEA rdx, [rbx+rdx*2]
    LEA rcx, [r15+rdx*8]
    XOR edx, edx
    JMP loc_495098
loc_495088:
    MOV edi, 7
loc_49508D:
    ADD rax, 98h
    CMP rcx, rax
    JZ loc_4950B5
loc_495098:
    MOV esi, [rax]
    TEST esi, esi
    JNZ loc_49508D
loc_49509E:
    MOV esi, [rax+20h]
    AND esi, 0F000h
    CMP esi, 8000h
    JNZ loc_495088
loc_4950AF:
    ADD rdx, [rax+38h]
    JMP loc_49508D
loc_4950B5:
    CMP rdx, 9
    JBE loc_495313
loc_4950BF:
    MOV ecx, 1
    MOV rsi, 0CCCCCCCCCCCCCCCDh
    XCHG ax, ax
loc_4950D0:
    MOV rax, rdx
    ADD ecx, 1
    MUL rsi
    SHR rdx, 3
    CMP rdx, 9
    JA loc_4950D0
loc_4950E3:
    CMP ecx, edi
    CMOVL ecx, edi
    JMP loc_494CD0
loc_4950ED:
    MOVZX eax, cs:byte_73550B
    MOVZX edx, cs:byte_73550C
    ADD edx, eax
    MOVZX eax, cs:byte_73550A
    ADD edx, eax
    MOVZX eax, cs:byte_735509
    ADD edx, eax
    MOVZX eax, cs:byte_735508
    ADD eax, edx
    CMP eax, 1
    JNZ loc_494BF3
loc_495121:
    JMP loc_494F4D
loc_495126:
    MOV eax, cs:optind
    CMP r13d, eax
    JLE loc_49522E
loc_495135:
    MOVSXD rdx, eax
    LEA rcx, [rbx+rdx*8]
    MOV ebx, r13d
    SUB ebx, eax
    MOV [rsp+228h+var_218], rcx
    MOVSXD rbx, ebx
loc_495149:
    MOV rdi, [rsp+228h+var_218]
    CALL sub_496270
    MOV [rsp+228h+var_209], 0
    MOV r14, rax
    JMP loc_494B9E
loc_495160:
    LEA rdi, [rsp+228h+var_1F8]
    CALL sub_4B6D20
    JMP loc_494F8A
loc_49516F:
    XOR edi, edi
    CALL _close
    TEST eax, eax
    JZ loc_494FF1
loc_49517E:
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset asc_50610E+3)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
loc_4951A0:
    PXOR xmm2, xmm2
    CVTSI2SD xmm2, [rsp+228h+stat_buf.st_size]
    MOVSD qword ptr [rsp+228h+fd], xmm2
    CALL sub_4B2450
    MOVSD xmm1, cs:qword_504080
    MULSD xmm1, xmm0
    MOVSD xmm0, cs:qword_504078
    UCOMISD xmm1, xmm0
    JBE loc_495263
loc_4951D7:
    UCOMISD xmm0, qword ptr [rsp+228h+fd]
    JB loc_494B83
loc_4951E3:
    LEA rdi, [rsp+228h+var_1F8]
    CALL sub_4B6CB0
    LEA rsi, [rsp+228h+var_1F8]
    MOV rdi, rbx
    CALL sub_4B6D50
    TEST al, al
    JZ loc_49527A
loc_4951FE:
    MOV rdi, rbx
    CALL sub_4BE090
    TEST eax, eax
    JNZ loc_49527A
loc_49520A:
    MOV rax, [rsp+228h+var_1F0]
    MOV rbx, [rsp+228h+var_1F8]
    MOV rdi, rax
    MOV [rsp+228h+var_218], rax
    CALL sub_496270
    MOV [rsp+228h+var_209], 1
    MOV r14, rax
    JMP loc_494B9E
loc_49522E:
    MOV [rsp+228h+var_218], offset unk_7354F0
    MOV ebx, 1
    JMP loc_495149
loc_495241:
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV rdx, r15
    XOR esi, esi
    XOR edi, edi
    MOV cs:byte_735500, 1
    CALL sub_493C60
    MOV r13d, eax
    JMP loc_494F7F
loc_495263:
    CALL sub_4B2450
    MULSD xmm0, cs:qword_504080
    JMP loc_4951D7
loc_495275:
    CALL ___stack_chk_fail
loc_49527A:
    MOV rsi, rbp
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aCannotReadFile
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4952AF:
    MOV rsi, [rbx+rax*8]
    MOV edi, 4
    CALL sub_4B5100
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aExtraOperandS
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFileOperandsCa_0
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, 4C7AEFh
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_494A23
loc_495313:
    TEST edi, edi
    MOV ecx, 1
    CMOVG ecx, edi
    JMP loc_494CD0
loc_495322:
    MOV ecx, 1
    JMP loc_494BC3
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'Looping', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Traversal', 'inferred_category': 'Utility'}

##### T 168 - single_binary_main_wc
```assembly
loc_4AE660:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13d, edi
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    XOR ebp, ebp
    SUB rsp, 1F8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+228h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    CALL _getpagesize
    MOV rdi, cs:stdout
    CDQE 
    XOR ecx, ecx
    MOV edx, 1
    XOR esi, esi
    MOV cs:qword_7584B8, rax
    CALL _setvbuf
    MOV cs:byte_7584C9, 0
    MOV cs:byte_7584CA, 0
    MOV cs:byte_7584CB, 0
    MOV cs:byte_7584CC, 0
    MOV cs:byte_7584C8, 0
    MOV cs:qword_7584D0, 0
    MOV cs:qword_7584D8, 0
    MOV cs:qword_7584E0, 0
    MOV cs:qword_7584E8, 0
    MOV cs:qword_7584F0, 0
loc_4AE743:
    XOR r8d, r8d
    MOV ecx, offset stru_5276C0
    MOV edx, offset aCllmw
    MOV rsi, rbx
    MOV edi, r13d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_4AE850
loc_4AE764:
    CMP eax, 63h
    JZ loc_4AE840
loc_4AE76D:
    JLE loc_4AE790
loc_4AE76F:
    CMP eax, 6Dh
    JZ loc_4AE7E8
loc_4AE774:
    JLE loc_4AE7D0
loc_4AE776:
    CMP eax, 77h
    JZ loc_4AE7C0
loc_4AE77B:
    ADD eax, 0FFFFFF80h
    JNZ loc_4AE7A3
loc_4AE780:
    MOV rbp, cs:optarg
    JMP loc_4AE743
loc_4AE790:
    CMP eax, 0FFFFFF7Eh
    JZ loc_4AE7F8
loc_4AE797:
    CMP eax, 4Ch
    JZ loc_4AE7B0
loc_4AE79C:
    CMP eax, 0FFFFFF7Dh
    JZ loc_4AE800
loc_4AE7A3:
    MOV edi, 1
    CALL sub_4AE2F0
loc_4AE7B0:
    MOV cs:byte_7584C8, 1
    JMP loc_4AE743
loc_4AE7C0:
    MOV cs:byte_7584CB, 1
    JMP loc_4AE743
loc_4AE7D0:
    CMP eax, 6Ch
    JNZ loc_4AE7A3
loc_4AE7D5:
    MOV cs:byte_7584CC, 1
    JMP loc_4AE743
loc_4AE7E8:
    MOV cs:byte_7584CA, 1
    JMP loc_4AE743
loc_4AE7F8:
    XOR edi, edi
    CALL sub_4AE2F0
loc_4AE800:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aPaulRubin
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aWc
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_4AE840:
    MOV cs:byte_7584C9, 1
    JMP loc_4AE743
loc_4AE850:
    CMP cs:byte_7584CC, 0
    JNZ loc_4AE898
loc_4AE859:
    CMP cs:byte_7584CB, 0
    JNZ loc_4AE898
loc_4AE862:
    CMP cs:byte_7584CA, 0
    JNZ loc_4AE898
loc_4AE86B:
    CMP cs:byte_7584C9, 0
    JNZ loc_4AE898
loc_4AE874:
    CMP cs:byte_7584C8, 0
    JNZ loc_4AE898
loc_4AE87D:
    MOV cs:byte_7584C9, 1
    MOV cs:byte_7584CB, 1
    MOV cs:byte_7584CC, 1
    NOP word ptr [rax+rax+00h]
loc_4AE898:
    TEST rbp, rbp
    JZ loc_4AEEA6
loc_4AE8A1:
    MOVSXD rax, cs:optind
    CMP r13d, eax
    JG loc_4AF030
loc_4AE8B1:
    CMP byte ptr [rbp+0], 2Dh
    JNZ loc_4AE9E9
loc_4AE8BB:
    CMP byte ptr [rbp+1], 0
    JNZ loc_4AE9E9
loc_4AE8C5:
    MOV rbx, cs:stdin
loc_4AE8CC:
    MOV rdi, rbx
    CALL _fileno
    LEA rdx, [rsp+228h+stat_buf]
    MOV esi, eax
    MOV edi, 1
    CALL ___fxstat
    TEST eax, eax
    JNZ loc_4AE903
loc_4AE8EC:
    MOV eax, [rsp+228h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 8000h
    JZ loc_4AEF18
loc_4AE903:
    MOV rdi, rbx
    XOR ebx, ebx
    CALL sub_4B0220
    MOV [rsp+228h+var_209], 0
    MOV r14, rax
    MOV [rsp+228h+var_218], 0
loc_4AE91E:
    TEST r14, r14
    JZ loc_4AEDE6
loc_4AE927:
    TEST rbx, rbx
    JZ loc_4AECC0
loc_4AE930:
    MOV edx, 98h
    XOR ecx, ecx
    MOV rax, rdx
    MUL rbx
    JO loc_4AF0A3
loc_4AE943:
    TEST rax, rax
    JS loc_4AEDE6
loc_4AE94C:
    TEST rcx, rcx
    JNZ loc_4AEDE6
loc_4AE955:
    LEA rax, [rbx+rbx*8]
    LEA rdi, [rbx+rax*2]
    SHL rdi, 3
    CALL sub_4DCC10
    CMP rbx, 1
    MOV r15, rax
    JZ loc_4AEE6D
loc_4AE973:
    MOV r8, r15
    LEA r12, [r15+8]
    XOR r13d, r13d
    JMP loc_4AE9B5
loc_4AE980:
    MOV rdx, r12
    MOV edi, 1
    MOV qword ptr [rsp+228h+fd], r8
    CALL ___xstat
    MOV r8, qword ptr [rsp+228h+fd]
loc_4AE997:
    ADD r13, 1
    MOV [r8], eax
    ADD r12, 98h
    ADD r8, 98h
    CMP rbx, r13
    JZ loc_4AEA40
loc_4AE9B5:
    MOV rax, [rsp+228h+var_218]
    MOV rsi, [rax+r13*8]
    TEST rsi, rsi
    JZ loc_4AE9CE
loc_4AE9C3:
    CMP byte ptr [rsi], 2Dh
    JNZ loc_4AE980
loc_4AE9C8:
    CMP byte ptr [rsi+1], 0
    JNZ loc_4AE980
loc_4AE9CE:
    MOV rdx, r12
    XOR esi, esi
    MOV edi, 1
    MOV qword ptr [rsp+228h+fd], r8
    CALL ___fxstat
    MOV r8, qword ptr [rsp+228h+fd]
    JMP loc_4AE997
loc_4AE9E9:
    MOV esi, offset modes
    MOV rdi, rbp
    CALL _fopen
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4AE8CC
loc_4AEA02:
    MOV rsi, rbp
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aCannotOpenSFor
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
loc_4AEA40:
    MOV edi, [r15]
    MOV ecx, 1
    TEST edi, edi
    JLE loc_4AEDEB
loc_4AEA50:
    MOV cs:dword_7584C4, ecx
    XOR r12d, r12d
    MOV r13d, 1
    JMP loc_4AEAE6
loc_4AEA68:
    CMP byte ptr [rbp+1], 0
    MOVZX eax, byte ptr [rax]
    JNZ loc_4AEB11
loc_4AEA75:
    CMP al, 2Dh
    JNZ loc_4AEB11
loc_4AEA7D:
    CMP byte ptr [r8+1], 0
    JNZ loc_4AEB78
loc_4AEA88:
    MOV rsi, r8
    MOV edi, 4
    MOV qword ptr [rsp+228h+fd], r8
    CALL sub_4D2F70
    XOR edi, edi
    MOV r13, rax
    MOV edx, 5
    MOV esi, offset aWhenReadingFil
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    MOV rcx, r13
    CALL _error
    MOV r8, qword ptr [rsp+228h+fd]
    CMP byte ptr [r8], 0
    JZ loc_4AEB15
loc_4AEACA:
    NOP word ptr [rax+rax+00h]
loc_4AEAD0:
    XOR r13d, r13d
loc_4AEAD3:
    TEST rbx, rbx
    JNZ loc_4AEADF
loc_4AEAD8:
    MOV dword ptr [r15], 1
loc_4AEADF:
    ADD r12, 98h
loc_4AEAE6:
    LEA rsi, [rsp+228h+var_1FC]
    MOV rdi, r14
    CALL sub_4B0260
    TEST rax, rax
    MOV r8, rax
    JZ loc_4AEC20
loc_4AEAFF:
    TEST rbp, rbp
    JZ loc_4AEB68
loc_4AEB04:
    CMP byte ptr [rbp+0], 2Dh
    JZ loc_4AEA68
loc_4AEB0E:
    MOVZX eax, byte ptr [rax]
loc_4AEB11:
    TEST al, al
    JNZ loc_4AEB78
loc_4AEB15:
    MOV rdi, r14
    CALL sub_4B02F0
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aInvalidZeroLen
    MOV r13, rax
    CALL _dcgettext
    MOV rdx, rbp
    XOR edi, edi
    MOV esi, 3
    MOV qword ptr [rsp+228h+fd], rax
    CALL sub_4D3C20
    MOV r9, qword ptr [rsp+228h+fd]
    MOV rcx, rax
    MOV r8, r13
    MOV edx, offset aSLuS
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_4AEAD0
loc_4AEB68:
    CMP byte ptr [rax], 0
    JZ loc_4AEC90
loc_4AEB71:
    MOVZX eax, byte ptr [rax]
    NOP dword ptr [rax+00h]
loc_4AEB78:
    TEST rbx, rbx
    MOV edx, 0
    CMOVNZ rdx, r12
    ADD rdx, r15
    CMP al, 2Dh
    JZ loc_4AEBF0
loc_4AEB8B:
    XOR esi, esi
    MOV rdi, r8
    XOR eax, eax
    MOV [rsp+228h+var_218], rdx
    MOV qword ptr [rsp+228h+fd], r8
    CALL _open
    CMP eax, 0FFFFFFFFh
    MOV r8, qword ptr [rsp+228h+fd]
    MOV rdx, [rsp+228h+var_218]
    JZ loc_4AEC60
loc_4AEBB4:
    XOR ecx, ecx
    MOV rsi, r8
    MOV edi, eax
    MOV [rsp+228h+var_218], r8
    MOV [rsp+228h+fd], eax
    CALL sub_4AD730
    MOV r9d, [rsp+228h+fd]
    MOV [rsp+228h+var_20A], al
    MOV edi, r9d
    CALL _close
    TEST eax, eax
    MOV r8, [rsp+228h+var_218]
    JNZ loc_4AEC60
loc_4AEBE3:
    AND r13b, [rsp+228h+var_20A]
    JMP loc_4AEAD3
loc_4AEBF0:
    CMP byte ptr [r8+1], 0
    JNZ loc_4AEB8B
loc_4AEBF7:
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV rsi, r8
    XOR edi, edi
    MOV cs:byte_7584C0, 1
    CALL sub_4AD730
    AND r13d, eax
    JMP loc_4AEAD3
loc_4AEC20:
    MOV eax, [rsp+228h+var_1FC]
    CMP eax, 3
    JZ loc_4AEDE6
loc_4AEC2D:
    CMP eax, 4
    JZ loc_4AEDA2
loc_4AEC36:
    CMP eax, 2
    JZ loc_4AECDE
loc_4AEC3F:
    MOV ecx, offset aSingleBinaryMa_7
    MOV edx, 31Ah
    MOV esi, offset aSrcWcC
    MOV edi, offset aUnexpectedErro
    CALL ___assert_fail
loc_4AEC60:
    MOV rdx, r8
    XOR edi, edi
    MOV esi, 3
    CALL sub_4D3C20
    MOV r13, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r13
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_4AEAD0
loc_4AEC90:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aInvalidZeroLen
    CALL _dcgettext
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_4AEAD0
loc_4AECC0:
    MOV edi, 98h
    CALL sub_4DCC10
    MOV r15, rax
loc_4AECCD:
    MOV dword ptr [r15], 1
    MOV ecx, 1
    JMP loc_4AEA50
loc_4AECDE:
    TEST rbp, rbp
    JNZ loc_4AECFF
loc_4AECE3:
    TEST r13b, r13b
    JZ loc_4AECFF
loc_4AECE8:
    MOV rdi, r14
    MOV r13d, 1
    CALL sub_4B02F0
    TEST rax, rax
    JZ loc_4AEFC2
loc_4AECFF:
    CMP [rsp+228h+var_209], 0
    JNZ loc_4AEEDE
loc_4AED0A:
    MOV rdi, r14
    CALL sub_4B02F0
    CMP rax, 1
    JBE loc_4AED54
loc_4AED18:
    MOV edx, 5
    MOV esi, offset aTotal
    XOR edi, edi
    CALL _dcgettext
    MOV r8, cs:qword_7584D0
    MOV rcx, cs:qword_7584D8
    MOV r9, rax
    MOV rdx, cs:qword_7584E0
    MOV rsi, cs:qword_7584E8
    MOV rdi, cs:qword_7584F0
    CALL sub_4AD520
loc_4AED54:
    MOV rdi, r14
    CALL sub_4B0310
    MOV rdi, r15
    CALL _free
    CMP cs:byte_7584C0, 0
    JNZ loc_4AEEED
loc_4AED71:
    XOR r13d, 1
    MOV rcx, [rsp+228h+var_40]
    XOR rcx, fs:28h
    MOVZX eax, r13b
    JNZ loc_4AEFF6
loc_4AED90:
    ADD rsp, 1F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4AEDA2:
    MOV rdx, rbp
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV edx, 5
    MOV esi, offset aS_15
    XOR edi, edi
    MOV rbp, rax
    XOR r13d, r13d
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_4AECFF
loc_4AEDE6:
    CALL sub_42C250
loc_4AEDEB:
    LEA rdx, [rbx+rbx*8]
    MOV rax, r15
    MOV edi, 1
    LEA rdx, [rbx+rdx*2]
    LEA rcx, [r15+rdx*8]
    XOR edx, edx
    JMP loc_4AEE18
loc_4AEE08:
    MOV edi, 7
loc_4AEE0D:
    ADD rax, 98h
    CMP rcx, rax
    JZ loc_4AEE35
loc_4AEE18:
    MOV esi, [rax]
    TEST esi, esi
    JNZ loc_4AEE0D
loc_4AEE1E:
    MOV esi, [rax+20h]
    AND esi, 0F000h
    CMP esi, 8000h
    JNZ loc_4AEE08
loc_4AEE2F:
    ADD rdx, [rax+38h]
    JMP loc_4AEE0D
loc_4AEE35:
    CMP rdx, 9
    JBE loc_4AF094
loc_4AEE3F:
    MOV ecx, 1
    MOV rsi, 0CCCCCCCCCCCCCCCDh
    XCHG ax, ax
loc_4AEE50:
    MOV rax, rdx
    ADD ecx, 1
    MUL rsi
    SHR rdx, 3
    CMP rdx, 9
    JA loc_4AEE50
loc_4AEE63:
    CMP ecx, edi
    CMOVL ecx, edi
    JMP loc_4AEA50
loc_4AEE6D:
    MOVZX eax, cs:byte_7584CB
    MOVZX edx, cs:byte_7584CC
    ADD edx, eax
    MOVZX eax, cs:byte_7584CA
    ADD edx, eax
    MOVZX eax, cs:byte_7584C9
    ADD edx, eax
    MOVZX eax, cs:byte_7584C8
    ADD eax, edx
    CMP eax, 1
    JNZ loc_4AE973
loc_4AEEA1:
    JMP loc_4AECCD
loc_4AEEA6:
    MOV eax, cs:optind
    CMP r13d, eax
    JLE loc_4AEFAA
loc_4AEEB5:
    MOVSXD rdx, eax
    LEA rcx, [rbx+rdx*8]
    MOV ebx, r13d
    SUB ebx, eax
    MOV [rsp+228h+var_218], rcx
    MOVSXD rbx, ebx
    MOV rdi, rcx
loc_4AEECC:
    CALL sub_4B01F0
    MOV [rsp+228h+var_209], 0
    MOV r14, rax
    JMP loc_4AE91E
loc_4AEEDE:
    LEA rdi, [rsp+228h+var_1F8]
    CALL sub_4D6AA0
    JMP loc_4AED0A
loc_4AEEED:
    XOR edi, edi
    CALL _close
    TEST eax, eax
    JZ loc_4AED71
loc_4AEEFC:
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset asc_52A7CE+3)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00h]
loc_4AEF18:
    PXOR xmm2, xmm2
    CVTSI2SD xmm2, [rsp+228h+stat_buf.st_size]
    MOVSD qword ptr [rsp+228h+fd], xmm2
    CALL sub_4CF8B0
    MOVSD xmm1, cs:qword_527B18
    MULSD xmm1, xmm0
    MOVSD xmm0, cs:qword_527B10
    UCOMISD xmm1, xmm0
    JBE loc_4AEFE4
loc_4AEF4F:
    UCOMISD xmm0, qword ptr [rsp+228h+fd]
    JB loc_4AE903
loc_4AEF5B:
    LEA rdi, [rsp+228h+var_1F8]
    CALL sub_4D6A30
    LEA rsi, [rsp+228h+var_1F8]
    MOV rdi, rbx
    CALL sub_4D6AD0
    TEST al, al
    JZ loc_4AEFFB
loc_4AEF7A:
    MOV rdi, rbx
    CALL sub_4E0210
    TEST eax, eax
    JNZ loc_4AEFFB
loc_4AEF86:
    MOV rax, [rsp+228h+var_1F0]
    MOV rbx, [rsp+228h+var_1F8]
    MOV rdi, rax
    MOV [rsp+228h+var_218], rax
    CALL sub_4B01F0
    MOV [rsp+228h+var_209], 1
    MOV r14, rax
    JMP loc_4AE91E
loc_4AEFAA:
    MOV [rsp+228h+var_218], offset unk_7584B0
    MOV ebx, 1
    MOV rdi, [rsp+228h+var_218]
    JMP loc_4AEECC
loc_4AEFC2:
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV rdx, r15
    XOR esi, esi
    XOR edi, edi
    MOV cs:byte_7584C0, 1
    CALL sub_4AD730
    MOV r13d, eax
    JMP loc_4AECFF
loc_4AEFE4:
    CALL sub_4CF8B0
    MULSD xmm0, cs:qword_527B18
    JMP loc_4AEF4F
loc_4AEFF6:
    CALL ___stack_chk_fail
loc_4AEFFB:
    MOV rsi, rbp
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aCannotReadFile
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4AF030:
    MOV rsi, [rbx+rax*8]
    MOV edi, 4
    CALL sub_4D2F70
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aExtraOperandS
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFileOperandsCa_0
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, 4EA78Fh
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_4AE7A3
loc_4AF094:
    TEST edi, edi
    MOV ecx, 1
    CMOVG ecx, edi
    JMP loc_4AEA50
loc_4AF0A3:
    MOV ecx, 1
    JMP loc_4AE943
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'Looping', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Traversal', 'inferred_category': 'Utility/Helper'}

##### Q 169 - add_tab_stop
```assembly
loc_4360D5:
    MOV rdi, cs:qword_721288
    LEA rcx, ds:0[rdx*8]
    MOV rax, [rdi+rcx-8]
    CMP rax, rbx
    JBE loc_436119
loc_4360EE:
    MOV rsi, cs:qword_721280
    CMP rdx, rsi
    JZ loc_436150
loc_4360FA:
    ADD rdx, 1
    MOV [rdi+rcx], rbx
    MOV cs:qword_721278, rdx
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_436110:
    MOV rdi, cs:qword_721288
    XOR eax, eax
loc_436119:
    MOV rbp, rbx
    SUB rbp, rax
    CMP rdx, cs:qword_721280
    JZ loc_436198
loc_436128:
    MOV [rdi+rdx*8], rbx
    CMP cs:qword_721250, rbp
    LEA rax, [rdx+1]
    MOV cs:qword_721278, rax
    JNB loc_436147
loc_436140:
    MOV cs:qword_721250, rbp
loc_436147:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_436150:
    XOR ebp, ebp
    TEST rdi, rdi
    JZ loc_4361A9
loc_436157:
    MOV rax, 0AAAAAAAAAAAAAA9h
    CMP rdx, rax
    JA loc_4361C2
loc_436166:
    MOV rax, rdx
    SHR rax, 1
    LEA rsi, [rdx+rax+1]
loc_436171:
    MOV cs:qword_721280, rsi
    SHL rsi, 3
    CALL sub_4BB110
    MOV rdx, cs:qword_721278
    MOV cs:qword_721288, rax
    MOV rdi, rax
    JMP loc_436128
loc_436198:
    TEST rdi, rdi
    JNZ loc_436157
loc_43619D:
    TEST rdx, rdx
    MOV esi, 10h
    CMOVNZ rsi, rdx
loc_4361A9:
    MOV edx, 8
    XOR ecx, ecx
    MOV rax, rdx
    MUL rsi
    JO loc_4361C7
loc_4361B8:
    TEST rax, rax
    JS loc_4361C2
loc_4361BD:
    TEST rcx, rcx
    JZ loc_436171
loc_4361C2:
    CALL sub_429BE0
loc_4361C7:
    MOV ecx, 1
    JMP loc_4361B8
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFCh', '0x18', '0x20', '0x28', '0x30', '0x38', '0x40', '0x58', '0x60', '0x68', '0x70', '0x78', '0x80', '0x88', '0x90', '0x98', '0xA0', '0xA8', '0xB0', '0xB8', '0xC0', '0xC8', '0xD0', '0xD8', '0xE0', '0xE8', '0xF0', '0xF6', '0xFA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 41, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic'}

##### T 169 - add_tab_stop
```assembly
loc_439545:
    MOV rdi, cs:qword_744268
    LEA rcx, ds:0[rdx*8]
    MOV rax, [rdi+rcx-8]
    CMP rax, rbx
    JBE loc_439589
loc_43955E:
    MOV rsi, cs:qword_744260
    CMP rdx, rsi
    JZ loc_4395C0
loc_43956A:
    ADD rdx, 1
    MOV [rdi+rcx], rbx
    MOV cs:qword_744258, rdx
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_439580:
    MOV rdi, cs:qword_744268
    XOR eax, eax
loc_439589:
    MOV rbp, rbx
    SUB rbp, rax
    CMP rdx, cs:qword_744260
    JZ loc_439608
loc_439598:
    MOV [rdi+rdx*8], rbx
    CMP cs:qword_744230, rbp
    LEA rax, [rdx+1]
    MOV cs:qword_744258, rax
    JNB loc_4395B7
loc_4395B0:
    MOV cs:qword_744230, rbp
loc_4395B7:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4395C0:
    XOR ebp, ebp
    TEST rdi, rdi
    JZ loc_439619
loc_4395C7:
    MOV rax, 0AAAAAAAAAAAAAA9h
    CMP rdx, rax
    JA loc_439632
loc_4395D6:
    MOV rax, rdx
    SHR rax, 1
    LEA rsi, [rdx+rax+1]
loc_4395E1:
    MOV cs:qword_744260, rsi
    SHL rsi, 3
    CALL sub_4DCC30
    MOV rdx, cs:qword_744258
    MOV cs:qword_744268, rax
    MOV rdi, rax
    JMP loc_439598
loc_439608:
    TEST rdi, rdi
    JNZ loc_4395C7
loc_43960D:
    TEST rdx, rdx
    MOV esi, 10h
    CMOVNZ rsi, rdx
loc_439619:
    MOV edx, 8
    XOR ecx, ecx
    MOV rax, rdx
    MUL rsi
    JO loc_439637
loc_439628:
    TEST rax, rax
    JS loc_439632
loc_43962D:
    TEST rcx, rcx
    JZ loc_4395E1
loc_439632:
    CALL sub_42C250
loc_439637:
    MOV ecx, 1
    JMP loc_439628
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Unknown', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1F', '0x10', '0x8', '0x5F', '0xD', '0x7', '0xD0', '0xA', '0x3C', '0xF0', '0xD8', '0xF8', '0x10', '0xC'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Cryptography'}

##### Q 170 - badfieldspec
```assembly
loc_406B38:
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    PUSH rax
    CALL sub_4B5440
    MOV rsi, rbx
    MOV edx, 5
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSInvalidFieldS
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    MOV edi, 2
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'MemoryAccess'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x70'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 170 - badfieldspec
```assembly
loc_406CE4:
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    PUSH rax
    CALL sub_4D4D30
    MOV rsi, rbx
    MOV edx, 5
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSInvalidFieldS
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    MOV edi, 2
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x70'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### Q 171 - rev_xstrcoll_mtime
```assembly
loc_44C820:
    MOV rax, [rdi+70h]
    CMP [rsi+70h], rax
    MOV rdx, rsi
    JG loc_44C848
loc_44C82D:
    JL loc_44C850
loc_44C82F:
    MOV rax, [rdi+78h]
    SUB eax, [rsi+78h]
    JNZ locret_44C855
loc_44C838:
    MOV rsi, [rdi]
    MOV rdi, [rdx]
    JMP sub_447C80
loc_44C848:
    MOV eax, 0FFFFFFFFh
    RETN 
loc_44C850:
    MOV eax, 1
loc_44C855:
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFE', '0x2', '0x16D', '0xE2', '0xE6', '0xD', '0x169', '0xE1', '0x165', '0x43'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic/Encoding'}

##### T 171 - rev_xstrcoll_mtime
```assembly
loc_4504B0:
    MOV rax, [rdi+70h]
    CMP [rsi+70h], rax
    JG loc_4504F0
loc_4504BA:
    JL loc_450500
loc_4504BC:
    MOV rax, [rdi+78h]
    SUB eax, [rsi+78h]
    JNZ locret_450505
loc_4504C5:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rbp, [rdi]
    MOV rbx, [rsi]
    CALL ___errno_location
    MOV dword ptr [rax], 0
    ADD rsp, 8
    MOV rsi, rbp
    MOV rdi, rbx
    POP rbx
    POP rbp
    JMP _strcoll
loc_4504F0:
    MOV eax, 0FFFFFFFFh
    RETN 
loc_450500:
    MOV eax, 1
loc_450505:
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x2', '0xFE', '0x100', '0x8', '0x16D', '0xE2', '0xE6', '0xD', '0x169', '0xE1', '0x165', '0x43', '0x16', '0x169', '0x165', '0x43'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 20, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic/Encoding'}

##### Q 172 - single_binary_main_nproc
```assembly
loc_455990:
    PUSH r13
    PUSH r12
    MOV r13d, 2
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    XOR r12d, r12d
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
loc_4559E2:
    XOR r8d, r8d
    MOV ecx, offset stru_4EE420
    MOV edx, (offset a8+6)
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_455AF0
loc_455A02:
    CMP eax, 0FFFFFF7Eh
    JZ loc_455AE8
loc_455A0D:
    JLE loc_455A70
loc_455A0F:
    CMP eax, 80h
    JZ loc_455A60
loc_455A16:
    CMP eax, 81h
    JNZ loc_455AD8
loc_455A21:
    MOV edx, 5
    MOV esi, offset aInvalidNumber
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 4E9B80h
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    XOR esi, esi
    CALL sub_4BB560
    MOV r12, rax
    JMP loc_4559E2
loc_455A60:
    XOR r13d, r13d
    JMP loc_4559E2
loc_455A70:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_455AD8
loc_455A77:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    XOR r9d, r9d
    MOV r8d, offset aGiuseppeScriva
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aNproc
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_455AA6:
    MOV rdi, [rbx+rax*8]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00h]
loc_455AD8:
    MOV edi, 1
    CALL sub_455670
loc_455AE8:
    XOR edi, edi
    CALL sub_455670
loc_455AF0:
    MOVSXD rax, cs:optind
    CMP ebp, eax
    JNZ loc_455AA6
loc_455AFB:
    MOV edi, r13d
    CALL sub_4AC1E0
    MOV rdx, rax
    MOV esi, offset aLu
    MOV edi, 1
    SUB rdx, r12
    CMP rax, r12
    MOV eax, 1
    CMOVBE rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
{'input_parameter_count': 5, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x400', '0x93', '0x8C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Validation and Error Handling', 'inferred_category': 'Security/Validation'}

##### T 172 - single_binary_main_nproc
```assembly
loc_45E590:
    PUSH r13
    PUSH r12
    MOV r13d, 2
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    XOR r12d, r12d
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
loc_45E5E2:
    XOR r8d, r8d
    MOV ecx, offset stru_511380
    MOV edx, (offset a8+6)
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_45E6F0
loc_45E602:
    CMP eax, 0FFFFFF7Eh
    JZ loc_45E6E8
loc_45E60D:
    JLE loc_45E670
loc_45E60F:
    CMP eax, 80h
    JZ loc_45E660
loc_45E616:
    CMP eax, 81h
    JNZ loc_45E6D8
loc_45E621:
    MOV edx, 5
    MOV esi, offset aInvalidNumber
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, 50CABAh
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    XOR esi, esi
    CALL sub_4DD0F0
    MOV r12, rax
    JMP loc_45E5E2
loc_45E660:
    XOR r13d, r13d
    JMP loc_45E5E2
loc_45E670:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_45E6D8
loc_45E677:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    XOR r9d, r9d
    MOV r8d, offset aGiuseppeScriva
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aNproc
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_45E6A6:
    MOV rdi, [rbx+rax*8]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00h]
loc_45E6D8:
    MOV edi, 1
    CALL sub_45E270
loc_45E6E8:
    XOR edi, edi
    CALL sub_45E270
loc_45E6F0:
    MOVSXD rax, cs:optind
    CMP ebp, eax
    JNZ loc_45E6A6
loc_45E6FB:
    MOV edi, r13d
    CALL sub_4C8740
    MOV rdx, rax
    MOV esi, offset aLu
    MOV edi, 1
    SUB rdx, r12
    CMP rax, r12
    MOV eax, 1
    CMOVBE rdx, rax
    XOR eax, eax
    CALL ___printf_chk
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
{'input_parameter_count': 5, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 8, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x400', '0x93', '0x8C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Validation/Check'}

##### Q 173 - maybe_close_stdout
```assembly
loc_42E770:
    CMP cs:byte_71FCC8, 0
    JNZ loc_42E798
loc_42E779:
    SUB rsp, 8
    MOV rdi, cs:stderr
    CALL sub_498300
    TEST eax, eax
    JNZ loc_42E79D
loc_42E78D:
    ADD rsp, 8
    RETN 
loc_42E798:
    JMP sub_4984A0
loc_42E79D:
    MOV edi, 1
    CALL __exit
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['9', '1Ch', '0FFFF', '20h', '2118h+var_2048', '1Ah', '8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Algorithm Undetected due to Complexity', 'inferred_category': 'Complex Control Flow/Algorithmic'}

##### T 173 - maybe_close_stdout
```assembly
loc_4313E0:
    CMP cs:byte_742CC8, 0
    JNZ loc_431408
loc_4313E9:
    SUB rsp, 8
    MOV rdi, cs:stderr
    CALL sub_4B2510
    TEST eax, eax
    JNZ loc_43140D
loc_4313FD:
    ADD rsp, 8
    RETN 
loc_431408:
    JMP sub_4B26B0
loc_43140D:
    MOV edi, 1
    CALL __exit
```
None

##### Q 174 - single_binary_main_sha256sum
```assembly
loc_46E610:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV ebp, 0FFFFFFFFh
    SUB rsp, 0E8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+118h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV rdi, cs:stdout
    XOR ecx, ecx
    MOV edx, 1
    XOR esi, esi
    CALL _setvbuf
    MOV [rsp+118h+var_C0], 0
    MOV [rsp+118h+var_FD], 0
loc_46E698:
    XOR r8d, r8d
    MOV ecx, offset stru_4F8280
    MOV edx, (offset aLBctw+2)
    MOV rsi, rbx
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_46E80A
loc_46E6B9:
    CMP eax, 77h
    JZ loc_46E868
loc_46E6C2:
    JG loc_46E6F0
loc_46E6C4:
    CMP eax, 62h
    JZ loc_46E7E0
loc_46E6CD:
    JG loc_46E730
loc_46E6CF:
    CMP eax, 0FFFFFF7Dh
    JZ loc_46E7A0
loc_46E6DA:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_46E858
loc_46E6E5:
    XOR edi, edi
    CALL sub_46E230
loc_46E6F0:
    CMP eax, 82h
    JZ loc_46E7F0
loc_46E6FB:
    JG loc_46E748
loc_46E6FD:
    CMP eax, 80h
    JZ loc_46E790
loc_46E708:
    CMP eax, 81h
    JNZ loc_46E858
loc_46E713:
    MOV cs:byte_7305A4, 1
    MOV cs:byte_7305A3, 0
    MOV cs:byte_7305A1, 0
    JMP loc_46E698
loc_46E730:
    CMP eax, 63h
    JZ loc_46E770
loc_46E735:
    CMP eax, 74h
    JNZ loc_46E858
loc_46E73E:
    XOR ebp, ebp
    JMP loc_46E698
loc_46E748:
    CMP eax, 83h
    JZ loc_46E780
loc_46E74F:
    CMP eax, 84h
    JNZ loc_46E858
loc_46E75A:
    MOV [rsp+118h+var_C0], 1
    MOV ebp, 1
    JMP loc_46E698
loc_46E770:
    MOV [rsp+118h+var_FD], 1
    JMP loc_46E698
loc_46E780:
    MOV cs:byte_7305A0, 1
    JMP loc_46E698
loc_46E790:
    MOV cs:byte_7305A2, 1
    JMP loc_46E698
loc_46E7A0:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    MOV r9d, offset aScottMiller
    PUSH 0
    PUSH offset aDavidMadore
    MOV r8d, offset aUlrichDrepper
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aSha256sum
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_46E7E0:
    MOV ebp, 1
    JMP loc_46E698
loc_46E7F0:
    MOV cs:byte_7305A4, 0
    MOV cs:byte_7305A3, 0
    MOV cs:byte_7305A1, 1
    JMP loc_46E698
loc_46E80A:
    TEST ebp, ebp
    MOV cs:qword_7305B0, 42h
    MOV cs:qword_7305A8, 40h
    JZ loc_46F21D
loc_46E828:
    CMP [rsp+118h+var_FD], 0
    JZ loc_46E882
loc_46E82F:
    CMP [rsp+118h+var_C0], 0
    JZ loc_46E882
loc_46E836:
    MOV edx, 5
    MOV esi, offset aTheTagOptionIs
loc_46E840:
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
loc_46E858:
    MOV edi, 1
    CALL sub_46E230
loc_46E868:
    MOV cs:byte_7305A4, 0
    MOV cs:byte_7305A3, 1
    MOV cs:byte_7305A1, 0
    JMP loc_46E698
loc_46E882:
    MOV eax, ebp
    NOT eax
    SHR eax, 1Fh
    TEST [rsp+118h+var_FD], al
    JNZ loc_46F5C7
loc_46E893:
    MOVZX eax, [rsp+118h+var_FD]
    CMP al, cs:byte_7305A2
    JB loc_46F5B8
loc_46E8A4:
    MOVZX eax, [rsp+118h+var_FD]
    CMP al, cs:byte_7305A4
    JB loc_46F5A9
loc_46E8B5:
    MOVZX eax, [rsp+118h+var_FD]
    CMP al, cs:byte_7305A3
    JB loc_46F59A
loc_46E8C6:
    MOVZX eax, [rsp+118h+var_FD]
    CMP al, cs:byte_7305A1
    JB loc_46F58B
loc_46E8D7:
    MOVZX eax, [rsp+118h+var_FD]
    CMP al, cs:byte_7305A0
    JB loc_46F57C
loc_46E8E8:
    CMP ebp, 0FFFFFFFFh
    MOV eax, 0
    CMOVZ ebp, eax
    MOVSXD rax, r12d
    LEA rax, [rbx+rax*8]
    MOV [rsp+118h+var_E8], rax
    MOVSXD rax, cs:optind
    CMP r12d, eax
    JZ loc_46F484
loc_46E90F:
    LEA rax, [rbx+rax*8]
    CMP [rsp+118h+var_E8], rax
    MOV [rsp+118h+var_118], rax
    JBE loc_46F528
loc_46E922:
    CMP ebp, 1
    MOV [rsp+118h+var_BF], 1
    SBB eax, eax
    AND eax, 0FFFFFFF6h
    ADD eax, 2Ah
    MOV [rsp+118h+var_BC], eax
    MOV [rsp+118h+var_BD], al
    NOP word ptr [rax+rax+00h]
loc_46E940:
    MOV rax, [rsp+118h+var_118]
    CMP [rsp+118h+var_FD], 0
    MOV rax, [rax]
    MOV [rsp+118h+s], rax
    JZ loc_46EF30
loc_46E957:
    MOV rbx, rax
    MOVZX eax, byte ptr [rax]
    MOV edx, 2Dh
    SUB edx, eax
    MOV [rsp+118h+var_FC], edx
    JNZ loc_46F150
loc_46E96E:
    MOVZX eax, byte ptr [rbx+1]
    NEG eax
    MOV [rsp+118h+var_FC], eax
    JNZ loc_46F150
loc_46E97E:
    MOV edx, 5
    MOV esi, offset aStandardInput
    XOR edi, edi
    MOV cs:byte_7305B8, 1
    CALL _dcgettext
    MOV rbp, cs:stdin
    MOV [rsp+118h+s], rax
loc_46E9A2:
    XOR r12d, r12d
    MOV [rsp+118h+lineptr], 0
    MOV [rsp+118h+n], 0
    MOV [rsp+118h+var_BE], 0
    XOR r15d, r15d
    MOV [rsp+118h+var_C8], 0
    MOV [rsp+118h+var_F0], 0
    MOV [rsp+118h+var_F8], 0
    MOV ebx, 1
    MOV [rsp+118h+var_110], r12
    NOP dword ptr [rax+00h]
loc_46E9E8:
    LEA rsi, [rsp+118h+n]
    LEA rdi, [rsp+118h+lineptr]
    MOV rcx, rbp
    MOV edx, 0Ah
    CALL ___getdelim
    TEST rax, rax
    JLE loc_46F0A8
loc_46EA08:
    MOV r14, [rsp+118h+lineptr]
    MOVZX ecx, byte ptr [r14]
    CMP cl, 23h
    JZ loc_46EAA5
loc_46EA1A:
    CMP byte ptr [r14+rax-1], 0Ah
    MOV rdx, rax
    JZ loc_46ECA0
loc_46EA29:
    XOR eax, eax
    CMP cl, 9
    JZ loc_46EA38
loc_46EA30:
    CMP cl, 20h
    JNZ loc_46EA4B
loc_46EA35:
    NOP dword ptr [rax]
loc_46EA38:
    ADD rax, 1
    MOVZX ecx, byte ptr [r14+rax]
    CMP cl, 20h
    JZ loc_46EA38
loc_46EA46:
    CMP cl, 9
    JZ loc_46EA38
loc_46EA4B:
    XOR r9d, r9d
    CMP cl, 5Ch
    JZ loc_46EC90
loc_46EA57:
    LEA r12, [r14+rax]
    MOV edi, offset aSha256
    MOV ecx, 6
    MOV rsi, r12
    REPE 
    JNZ loc_46EAF8
loc_46EA70:
    MOVZX ecx, byte ptr [r14+rax+6]
    LEA rsi, [rax+6]
    CMP cl, 20h
    JZ loc_46EE50
loc_46EA83:
    CMP cl, 28h
    JZ loc_46EE63
loc_46EA8C:
    CMP cs:byte_7305A3, 0
    JNZ loc_46EE08
loc_46EA99:
    ADD [rsp+118h+var_110], 1
    ADD [rsp+118h+var_F8], 1
loc_46EAA5:
    TEST byte ptr [rbp+0], 30h
    JNZ loc_46F0A8
loc_46EAAF:
    ADD rbx, 1
    JNZ loc_46E9E8
loc_46EAB9:
    MOV rdx, [rsp+118h+s]
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSTooManyChecks
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00h]
loc_46EAF8:
    MOV rsi, rdx
    XOR ecx, ecx
    SUB rsi, rax
    CMP byte ptr [r12], 5Ch
    SETZ cl
    ADD rcx, cs:qword_7305B0
    CMP rsi, rcx
    JB loc_46EA8C
loc_46EB18:
    ADD rax, cs:qword_7305A8
    LEA rcx, [r14+rax]
    MOV rsi, rax
    MOVZX eax, byte ptr [rcx]
    CMP al, 20h
    JZ loc_46EB35
loc_46EB2D:
    CMP al, 9
    JNZ loc_46EA8C
loc_46EB35:
    MOV byte ptr [rcx], 0
    MOV rdi, r12
    MOV [rsp+118h+var_D0], rdx
    MOV [rsp+118h+var_D8], rsi
    MOV byte ptr [rsp+118h+var_E0], r9b
    CALL sub_46DF80
    TEST al, al
    JZ loc_46EA8C
loc_46EB57:
    MOV rsi, [rsp+118h+var_D8]
    MOV rdx, [rsp+118h+var_D0]
    MOVZX r9d, byte ptr [rsp+118h+var_E0]
    LEA rax, [rsi+1]
    MOV rcx, rdx
    SUB rcx, rax
    CMP rcx, 1
    JZ loc_46EB92
loc_46EB77:
    LEA rcx, [r14+rax]
    MOVZX edi, byte ptr [rcx]
    CMP dil, 20h
    JZ loc_46F1A1
loc_46EB88:
    CMP dil, 2Ah
    JZ loc_46F1A1
loc_46EB92:
    MOV ecx, cs:dword_71FFF4
    TEST ecx, ecx
    JZ loc_46EA8C
loc_46EBA0:
    LEA r13, [r14+rax]
    MOV cs:dword_71FFF4, 1
loc_46EBAE:
    TEST r9b, r9b
    JNZ loc_46F1E2
loc_46EBB7:
    MOV edx, [rsp+118h+var_FC]
    TEST edx, edx
    JNZ loc_46EBD8
loc_46EBBF:
    CMP byte ptr [r13+0], 2Dh
    JNZ loc_46EBD8
loc_46EBC6:
    CMP byte ptr [r13+1], 0
    JZ loc_46EA8C
loc_46EBD1:
    NOP dword ptr [rax+00000000h]
loc_46EBD8:
    XOR r14d, r14d
    CMP cs:byte_7305A4, 0
    JNZ loc_46EBFB
loc_46EBE4:
    MOV esi, 0Ah
    MOV rdi, r13
    XOR r14d, r14d
    CALL _strchr
    TEST rax, rax
    SETNZ r14b
loc_46EBFB:
    LEA rdx, [rsp+118h+var_A9]
    LEA rsi, [rsp+118h+var_68]
    MOV rdi, r13
    CALL sub_46E090
    TEST al, al
    JNZ loc_46ECC0
loc_46EC18:
    ADD [rsp+118h+var_F0], 1
    CMP cs:byte_7305A4, 0
    JNZ loc_46EC7C
loc_46EC27:
    TEST r14d, r14d
    JZ loc_46EC4C
loc_46EC2C:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46F500
loc_46EC41:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_46EC4C:
    MOV esi, r14d
    MOV rdi, r13
    CALL sub_46DFE0
    MOV edx, 5
    MOV esi, offset aFailedOpenOrRe
loc_46EC61:
    XOR edi, edi
    CALL _dcgettext
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_46EC7C:
    MOV r15d, 1
    JMP loc_46EAA5
loc_46EC90:
    ADD rax, 1
    MOV r9d, 1
    JMP loc_46EA57
loc_46ECA0:
    MOV byte ptr [r14+rax-1], 0
    MOV r14, [rsp+118h+lineptr]
    SUB rdx, 1
    MOVZX ecx, byte ptr [r14]
    JMP loc_46EA29
loc_46ECC0:
    CMP cs:byte_7305A2, 0
    JZ loc_46ECD0
loc_46ECC9:
    CMP [rsp+118h+var_A9], 0
    JNZ loc_46EC7C
loc_46ECD0:
    MOV rdx, cs:qword_7305A8
    SHR rdx, 1
    JZ loc_46EDB2
loc_46ECE0:
    MOV [rsp+118h+var_E0], rdx
    XOR r15d, r15d
    CALL ___ctype_tolower_loc
    MOV rdx, [rsp+118h+var_E0]
    MOV rdi, [rax]
    JMP loc_46ED22
loc_46ED00:
    MOVZX ecx, byte ptr [r12+r15*2+1]
    AND eax, 0Fh
    MOVSX eax, ds:byte_4F8260[rax]
    CMP [rdi+rcx*4], eax
    JNZ loc_46ED44
loc_46ED15:
    ADD r15, 1
    CMP rdx, r15
    JZ loc_46F1C8
loc_46ED22:
    MOVZX eax, [rsp+r15+118h+var_68]
    MOVZX esi, byte ptr [r12+r15*2]
    MOV ecx, eax
    SHR cl, 4
    AND ecx, 0Fh
    MOVSX ecx, ds:byte_4F8260[rcx]
    CMP [rdi+rsi*4], ecx
    JZ loc_46ED00
loc_46ED44:
    CMP r15, rdx
    JZ loc_46F1C8
loc_46ED4D:
    ADD [rsp+118h+var_C8], 1
    CMP cs:byte_7305A4, 0
    JNZ loc_46EC7C
loc_46ED60:
    TEST r14d, r14d
    JZ loc_46F35B
loc_46ED69:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46F50F
loc_46ED7E:
    LEA rsi, [rax+1]
    MOV [rdi+28h], rsi
    MOV byte ptr [rax], 5Ch
loc_46ED89:
    MOV esi, r14d
    MOV rdi, r13
    MOV [rsp+118h+var_E0], rdx
    CALL sub_46DFE0
    MOV rdx, [rsp+118h+var_E0]
    CMP rdx, r15
    JZ loc_46EDE8
loc_46EDA3:
    MOV edx, 5
    MOV esi, offset aFailed
    JMP loc_46EC61
loc_46EDB2:
    XOR r15d, r15d
    CMP cs:byte_7305A4, 0
    MOV [rsp+118h+var_BE], 1
    JNZ loc_46EC7C
loc_46EDC7:
    CMP cs:byte_7305A1, 0
    MOV [rsp+118h+var_BE], 1
    JNZ loc_46EC7C
loc_46EDD9:
    TEST r14d, r14d
    JNZ loc_46ED69
loc_46EDDE:
    XOR esi, esi
    MOV rdi, r13
    CALL sub_46DFE0
loc_46EDE8:
    CMP cs:byte_7305A1, 0
    JNZ loc_46EC7C
loc_46EDF5:
    MOV edx, 5
    MOV esi, offset aOk
    JMP loc_46EC61
loc_46EE08:
    MOV rdx, [rsp+118h+s]
    XOR edi, edi
    MOV esi, 3
    CALL sub_4B5220
    XOR edi, edi
    MOV r14, rax
    MOV edx, 5
    MOV esi, offset aSLuImproperlyF
    CALL _dcgettext
    MOV r9d, offset aSha256
    MOV rdx, rax
    MOV r8, rbx
    MOV rcx, r14
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_46EA99
loc_46EE50:
    MOVZX ecx, byte ptr [r14+rax+7]
    LEA rsi, [rax+7]
    CMP cl, 28h
    JNZ loc_46EA8C
loc_46EE63:
    LEA rcx, [rsi+1]
    SUB rdx, rcx
    JZ loc_46EA8C
loc_46EE70:
    SUB rdx, 1
    LEA r13, [r14+rcx]
    MOV r10, rdx
    JZ loc_46EEA3
loc_46EE7D:
    LEA r11, [r13+rdx+0]
    CMP byte ptr [r11], 29h
    JNZ loc_46EE9D
loc_46EE88:
    JMP loc_46EEB4
loc_46EE90:
    CMP byte ptr [r13+r10+0], 29h
    LEA r11, [r13+r10+0]
    JZ loc_46EEB4
loc_46EE9D:
    SUB r10, 1
    JNZ loc_46EE90
loc_46EEA3:
    CMP byte ptr [r13+0], 29h
    JNZ loc_46EA8C
loc_46EEAE:
    MOV r11, r13
    XOR r10d, r10d
loc_46EEB4:
    TEST r9b, r9b
    JNZ loc_46F4DF
loc_46EEBD:
    MOV byte ptr [r11], 0
    MOVZX edx, byte ptr [r13+r10+1]
    LEA rax, [r10+1]
    CMP dl, 9
    JZ loc_46EED8
loc_46EED0:
    CMP dl, 20h
    JNZ loc_46EEEC
loc_46EED5:
    NOP dword ptr [rax]
loc_46EED8:
    ADD rax, 1
    MOVZX edx, byte ptr [r13+rax+0]
    CMP dl, 20h
    JZ loc_46EED8
loc_46EEE7:
    CMP dl, 9
    JZ loc_46EED8
loc_46EEEC:
    CMP dl, 3Dh
    JNZ loc_46EA8C
loc_46EEF5:
    LEA r12, [r13+rax+1]
    MOVZX edx, byte ptr [r12]
    CMP dl, 9
    JZ loc_46EF09
loc_46EF04:
    CMP dl, 20h
    JNZ loc_46EF22
loc_46EF09:
    LEA rax, [r13+rax+2]
loc_46EF0E:
    MOVZX edx, byte ptr [rax]
    MOV r12, rax
    ADD rax, 1
    CMP dl, 20h
    JZ loc_46EF0E
loc_46EF1D:
    CMP dl, 9
    JZ loc_46EF0E
loc_46EF22:
    MOV rdi, r12
    CALL sub_46DF80
    JMP loc_46F1F6
loc_46EF30:
    MOV rbx, [rsp+118h+s]
    LEA rdx, [rsp+118h+n]
    LEA rsi, [rsp+118h+var_98]
    MOV rdi, rbx
    CALL sub_46E090
    TEST al, al
    JZ loc_46F146
loc_46EF52:
    MOV esi, 5Ch
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    JZ loc_46F49E
loc_46EF68:
    CMP [rsp+118h+var_C0], 0
    JNZ loc_46F3ED
loc_46EF73:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46F54F
loc_46EF88:
    LEA rdx, [rax+1]
    MOV ebx, 1
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_46EF98:
    MOV rax, cs:qword_7305A8
    SHR rax, 1
    JZ loc_46EFE3
loc_46EFA4:
    XOR ebp, ebp
    NOP word ptr [rax+rax+00000000h]
loc_46EFB0:
    MOVZX edx, [rsp+rbp+118h+var_98]
    XOR eax, eax
    MOV esi, offset a02x
    MOV edi, 1
    ADD rbp, 1
    CALL ___printf_chk
    MOV rax, cs:qword_7305A8
    SHR rax, 1
    CMP rax, rbp
    JA loc_46EFB0
loc_46EFDC:
    CMP [rsp+118h+var_C0], 0
    JNZ loc_46F033
loc_46EFE3:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46F540
loc_46EFF8:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_46F003:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46F532
loc_46F018:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOVZX edx, [rsp+118h+var_BD]
    MOV [rax], dl
loc_46F027:
    MOV rdi, [rsp+118h+s]
    MOV esi, ebx
    CALL sub_46DFE0
loc_46F033:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46F4D0
loc_46F048:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
loc_46F053:
    ADD [rsp+118h+var_118], 8
    MOV rax, [rsp+118h+var_118]
    CMP [rsp+118h+var_E8], rax
    JA loc_46E940
loc_46F067:
    CMP cs:byte_7305B8, 0
    JNZ loc_46F2DA
loc_46F074:
    MOVZX eax, [rsp+118h+var_BF]
    XOR eax, 1
    MOV rbx, [rsp+118h+var_40]
    XOR rbx, fs:28h
    MOVZX eax, al
    JNZ loc_46F577
loc_46F096:
    ADD rsp, 0E8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46F0A8:
    MOV rdi, [rsp+118h+lineptr]
    MOV r12, [rsp+118h+var_110]
    CALL _free
    TEST byte ptr [rbp+0], 20h
    JNZ loc_46F3AD
loc_46F0C1:
    MOV eax, [rsp+118h+var_FC]
    TEST eax, eax
    JNZ loc_46F208
loc_46F0CD:
    TEST r15b, r15b
    JZ loc_46F36A
loc_46F0D6:
    CMP cs:byte_7305A4, 0
    JNZ loc_46F111
loc_46F0DF:
    TEST r12, r12
    JNZ loc_46F2AA
loc_46F0E8:
    CMP [rsp+118h+var_F0], 0
    JNZ loc_46F275
loc_46F0F4:
    CMP [rsp+118h+var_C8], 0
    JNZ loc_46F240
loc_46F100:
    MOVZX eax, [rsp+118h+var_BE]
    CMP cs:byte_7305A2, al
    JA loc_46F320
loc_46F111:
    XOR eax, eax
    CMP [rsp+118h+var_BE], 0
    JZ loc_46F13D
loc_46F11A:
    MOV rbx, [rsp+118h+var_F0]
    OR rbx, [rsp+118h+var_C8]
    JNZ loc_46F13D
loc_46F126:
    CMP [rsp+118h+var_F8], 0
    MOVZX ebx, [rsp+118h+var_BF]
    SETZ dl
    CMP dl, cs:byte_7305A0
    CMOVNB eax, ebx
loc_46F13D:
    MOV [rsp+118h+var_BF], al
    JMP loc_46F053
loc_46F146:
    MOV [rsp+118h+var_BF], 0
    JMP loc_46F053
loc_46F150:
    MOV rdi, [rsp+118h+s]
    MOV esi, offset modes
    CALL sub_4A4990
    TEST rax, rax
    MOV rbp, rax
    JNZ loc_46E9A2
loc_46F16B:
    MOV rdx, [rsp+118h+s]
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV [rsp+118h+var_BF], 0
    JMP loc_46F053
loc_46F1A1:
    CMP cs:dword_71FFF4, 1
    MOV r13, rcx
    JZ loc_46EBAE
loc_46F1B1:
    LEA rax, [rsi+2]
    MOV cs:dword_71FFF4, 0
    LEA r13, [r14+rax]
    JMP loc_46EBAE
loc_46F1C8:
    CMP cs:byte_7305A4, 0
    MOV [rsp+118h+var_BE], 1
    MOV r15, rdx
    JZ loc_46EDC7
loc_46F1DD:
    JMP loc_46EC7C
loc_46F1E2:
    SUB rdx, rax
    MOV rdi, r13
    MOV rsi, rdx
    CALL sub_46DF00
    TEST rax, rax
    SETNZ al
loc_46F1F6:
    TEST al, al
    JNZ loc_46EBB7
loc_46F1FE:
    JMP loc_46EA8C
loc_46F208:
    MOV rdi, rbp
    CALL sub_4BE090
    TEST eax, eax
    JZ loc_46F0CD
loc_46F218:
    JMP loc_46F16B
loc_46F21D:
    CMP [rsp+118h+var_C0], 0
    JZ loc_46E828
loc_46F228:
    MOV edx, 5
    MOV esi, offset aTagDoesNotSupp
    JMP loc_46E840
loc_46F240:
    MOV rbx, [rsp+118h+var_C8]
    XOR edi, edi
    MOV r8d, 5
    MOV edx, offset aWarningLuCompu
    MOV esi, offset aWarningLuCompu_0
    MOV rcx, rbx
    CALL _dcngettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_46F100
loc_46F275:
    MOV rbx, [rsp+118h+var_F0]
    XOR edi, edi
    MOV r8d, 5
    MOV edx, offset aWarningLuListe
    MOV esi, offset aWarningLuListe_0
    MOV rcx, rbx
    CALL _dcngettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_46F0F4
loc_46F2AA:
    MOV rcx, r12
    XOR edi, edi
    MOV r8d, 5
    MOV edx, offset aWarningLuLines
    MOV esi, offset aWarningLuLineI
    CALL _dcngettext
    MOV rcx, r12
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_46F0E8
loc_46F2DA:
    MOV rdi, cs:stdin
    CALL sub_4BE090
    CMP eax, 0FFFFFFFFh
    JNZ loc_46F074
loc_46F2EF:
    MOV edx, 5
    MOV esi, offset aStandardInput
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00000000h]
loc_46F320:
    MOV rdx, [rsp+118h+s]
    XOR edi, edi
    MOV esi, 3
    CALL sub_4B5220
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aSNoFileWasVeri
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_46F111
loc_46F35B:
    XOR esi, esi
    MOV rdi, r13
    CALL sub_46DFE0
    JMP loc_46EDA3
loc_46F36A:
    MOV rdx, [rsp+118h+s]
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSNoProperlyFor
    XOR edi, edi
    CALL _dcgettext
    MOV r8d, offset aSha256
    MOV rdx, rax
    MOV rcx, rbx
    XOR eax, eax
    XOR esi, esi
    XOR edi, edi
    CALL _error
    XOR eax, eax
    JMP loc_46F13D
loc_46F3AD:
    MOV rdx, [rsp+118h+s]
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aS_14
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV [rsp+118h+var_BF], 0
    JMP loc_46F053
loc_46F3ED:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP [rdi+30h], rax
    JBE loc_46F563
loc_46F402:
    LEA rdx, [rax+1]
    MOV ebx, 1
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_46F412:
    MOV rcx, cs:stdout
    MOV edx, 6
    MOV esi, 1
    MOV edi, offset aSha256
    CALL _fwrite_unlocked
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_4CFBF9
    CALL _fwrite_unlocked
    MOV rdi, [rsp+118h+s]
    MOV esi, ebx
    CALL sub_46DFE0
    MOV rcx, cs:stdout
    MOV edx, 4
    MOV esi, 1
    MOV edi, offset asc_4CFBFC
    CALL _fwrite_unlocked
    MOV rax, cs:qword_7305A8
    SHR rax, 1
    JNZ loc_46EFA4
loc_46F47F:
    JMP loc_46EFDC
loc_46F484:
    MOV rdx, [rsp+118h+var_E8]
    MOV qword ptr [rdx], (offset asc_50610E+3)
    ADD rdx, 8
    MOV [rsp+118h+var_E8], rdx
    JMP loc_46E90F
loc_46F49E:
    MOV rdi, [rsp+118h+s]
    MOV esi, 0Ah
    CALL _strchr
    TEST rax, rax
    JNZ loc_46EF68
loc_46F4B6:
    XOR ebx, ebx
    CMP [rsp+118h+var_C0], 0
    JNZ loc_46F412
loc_46F4C3:
    JMP loc_46EF98
loc_46F4D0:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_46F053
loc_46F4DF:
    MOV rsi, r10
    MOV rdi, r13
    CALL sub_46DF00
    TEST rax, rax
    JNZ loc_46EEBD
loc_46F4F3:
    JMP loc_46EA8C
loc_46F500:
    MOV esi, 5Ch
    CALL ___overflow
    JMP loc_46EC4C
loc_46F50F:
    MOV esi, 5Ch
    MOV [rsp+118h+var_E0], rdx
    CALL ___overflow
    MOV rdx, [rsp+118h+var_E0]
    JMP loc_46ED89
loc_46F528:
    MOV [rsp+118h+var_BF], 1
    JMP loc_46F067
loc_46F532:
    MOV esi, [rsp+118h+var_BC]
    CALL ___overflow
    JMP loc_46F027
loc_46F540:
    MOV esi, 20h
    CALL ___overflow
    JMP loc_46F003
loc_46F54F:
    MOV esi, 5Ch
    MOV ebx, 1
    CALL ___overflow
    JMP loc_46EF98
loc_46F563:
    MOV esi, 5Ch
    MOV ebx, 1
    CALL ___overflow
    JMP loc_46F412
loc_46F577:
    CALL ___stack_chk_fail
loc_46F57C:
    MOV edx, 5
    MOV esi, offset aTheStrictOptio
    JMP loc_46E840
loc_46F58B:
    MOV edx, 5
    MOV esi, offset aTheQuietOption
    JMP loc_46E840
loc_46F59A:
    MOV edx, 5
    MOV esi, offset aTheWarnOptionI
    JMP loc_46E840
loc_46F5A9:
    MOV edx, 5
    MOV esi, offset aTheStatusOptio
    JMP loc_46E840
loc_46F5B8:
    MOV edx, 5
    MOV esi, offset aTheIgnoreMissi
    JMP loc_46E840
loc_46F5C7:
    MOV edx, 5
    MOV esi, offset aTheBinaryAndTe
    JMP loc_46E840
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Iteration over a list or array', 'inferred_category': 'DataProcessing'}

##### T 174 - single_binary_main_sha256sum
```assembly
loc_479730:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV ebx, 0FFFFFFFFh
    SUB rsp, 0E8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+118h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV rdi, cs:stdout
    XOR ecx, ecx
    MOV edx, 1
    XOR esi, esi
    CALL _setvbuf
    MOV [rsp+118h+var_F1], 0
    MOV [rsp+118h+var_F2], 0
loc_4797B8:
    XOR r8d, r8d
    MOV ecx, offset stru_51B240
    MOV edx, (offset aLBctw+2)
    MOV rsi, rbp
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_47992A
loc_4797D9:
    CMP eax, 77h
    JZ loc_479988
loc_4797E2:
    JG loc_479810
loc_4797E4:
    CMP eax, 62h
    JZ loc_479900
loc_4797ED:
    JG loc_479850
loc_4797EF:
    CMP eax, 0FFFFFF7Dh
    JZ loc_4798C0
loc_4797FA:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_479978
loc_479805:
    XOR edi, edi
    CALL sub_479350
loc_479810:
    CMP eax, 82h
    JZ loc_479910
loc_47981B:
    JG loc_479868
loc_47981D:
    CMP eax, 80h
    JZ loc_4798B0
loc_479828:
    CMP eax, 81h
    JNZ loc_479978
loc_479833:
    MOV cs:byte_753584, 1
    MOV cs:byte_753583, 0
    MOV cs:byte_753581, 0
    JMP loc_4797B8
loc_479850:
    CMP eax, 63h
    JZ loc_479890
loc_479855:
    CMP eax, 74h
    JNZ loc_479978
loc_47985E:
    XOR ebx, ebx
    JMP loc_4797B8
loc_479868:
    CMP eax, 83h
    JZ loc_4798A0
loc_47986F:
    CMP eax, 84h
    JNZ loc_479978
loc_47987A:
    MOV [rsp+118h+var_F1], 1
    MOV ebx, 1
    JMP loc_4797B8
loc_479890:
    MOV [rsp+118h+var_F2], 1
    JMP loc_4797B8
loc_4798A0:
    MOV cs:byte_753580, 1
    JMP loc_4797B8
loc_4798B0:
    MOV cs:byte_753582, 1
    JMP loc_4797B8
loc_4798C0:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    MOV r9d, offset aScottMiller
    PUSH 0
    PUSH offset aDavidMadore
    MOV r8d, offset aUlrichDrepper
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aSha256sum
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_479900:
    MOV ebx, 1
    JMP loc_4797B8
loc_479910:
    MOV cs:byte_753584, 0
    MOV cs:byte_753583, 0
    MOV cs:byte_753581, 1
    JMP loc_4797B8
loc_47992A:
    TEST ebx, ebx
    MOV cs:qword_753590, 42h
    MOV cs:qword_753588, 40h
    JZ loc_47A610
loc_479948:
    CMP [rsp+118h+var_F2], 0
    JZ loc_4799A2
loc_47994F:
    CMP [rsp+118h+var_F1], 0
    JZ loc_4799A2
loc_479956:
    MOV edx, 5
    MOV esi, offset aTheTagOptionIs
loc_479960:
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
loc_479978:
    MOV edi, 1
    CALL sub_479350
loc_479988:
    MOV cs:byte_753584, 0
    MOV cs:byte_753583, 1
    MOV cs:byte_753581, 0
    JMP loc_4797B8
loc_4799A2:
    MOV eax, ebx
    NOT eax
    SHR eax, 1Fh
    TEST [rsp+118h+var_F2], al
    JNZ loc_47AABC
loc_4799B3:
    MOVZX eax, [rsp+118h+var_F2]
    CMP al, cs:byte_753582
    JB loc_47AAAD
loc_4799C4:
    CMP al, cs:byte_753584
    JB loc_47AA9E
loc_4799D0:
    CMP al, cs:byte_753583
    JB loc_47AA8F
loc_4799DC:
    CMP al, cs:byte_753581
    JB loc_47AA73
loc_4799E8:
    CMP al, cs:byte_753580
    JB loc_47AA64
loc_4799F4:
    CMP ebx, 0FFFFFFFFh
    MOV eax, 0
    CMOVZ ebx, eax
    MOVSXD rax, r12d
    LEA rax, [rbp+rax*8+0]
    MOV [rsp+118h+var_D0], rax
    MOVSXD rax, cs:optind
    CMP r12d, eax
    JZ loc_47A901
loc_479A1C:
    LEA rax, [rbp+rax*8+0]
    CMP [rsp+118h+var_D0], rax
    MOV [rsp+118h+var_110], rax
    JBE loc_47A9FB
loc_479A31:
    CMP ebx, 1
    MOV [rsp+118h+var_BF], 1
    SBB eax, eax
    AND eax, 0FFFFFFF6h
    ADD eax, 2Ah
    CMP ebx, 1
    MOV [rsp+118h+var_BC], eax
    SBB eax, eax
    AND eax, 0FFFFFFF6h
    ADD eax, 2Ah
    MOV [rsp+118h+var_BD], al
    MOV rax, [rsp+118h+var_110]
    NOP dword ptr [rax+00000000h]
loc_479A60:
    CMP [rsp+118h+var_F2], 0
    MOV r15, [rax]
    JZ loc_47A180
loc_479A6E:
    MOVZX eax, byte ptr [r15]
    MOV edx, 2Dh
    SUB edx, eax
    MOV [rsp+118h+var_F8], edx
    JNZ loc_47A3DE
loc_479A83:
    MOVZX eax, byte ptr [r15+1]
    NEG eax
    MOV [rsp+118h+var_F8], eax
    JNZ loc_47A3DE
loc_479A94:
    MOV edx, 5
    MOV esi, offset aStandardInput
    XOR edi, edi
    MOV cs:byte_753598, 1
    CALL _dcgettext
    MOV r12, cs:stdin
    MOV r15, rax
loc_479AB6:
    MOV [rsp+118h+lineptr], 0
    MOV [rsp+118h+n], 0
    XOR r13d, r13d
    MOV [rsp+118h+var_BE], 0
    MOV byte ptr [rsp+118h+var_100], 0
    MOV ebp, 1
    MOV [rsp+118h+var_C8], 0
    MOV [rsp+118h+var_E8], 0
    MOV [rsp+118h+var_108], 0
    MOV [rsp+118h+var_F0], r15
    NOP word ptr [rax+rax+00h]
loc_479B00:
    LEA rsi, [rsp+118h+n]
    LEA rdi, [rsp+118h+lineptr]
    MOV rcx, r12
    MOV edx, 0Ah
    CALL ___getdelim
    TEST rax, rax
    JLE loc_47A2D8
loc_479B20:
    MOV r14, [rsp+118h+lineptr]
    MOVZX ecx, byte ptr [r14]
    CMP cl, 23h
    JZ loc_479BBB
loc_479B32:
    CMP byte ptr [r14+rax-1], 0Ah
    MOV rdx, rax
    JZ loc_479E60
loc_479B41:
    XOR eax, eax
    CMP cl, 9
    JZ loc_479B50
loc_479B48:
    CMP cl, 20h
    JNZ loc_479B63
loc_479B4D:
    NOP dword ptr [rax]
loc_479B50:
    ADD rax, 1
    MOVZX ecx, byte ptr [r14+rax]
    CMP cl, 20h
    JZ loc_479B50
loc_479B5E:
    CMP cl, 9
    JZ loc_479B50
loc_479B63:
    XOR r10d, r10d
    CMP cl, 5Ch
    JZ loc_479E48
loc_479B6F:
    LEA rbx, [r14+rax]
    MOV edi, offset aSha256
    MOV ecx, 6
    MOV rsi, rbx
    REPE 
    JNZ loc_479C10
loc_479B88:
    MOVZX ecx, byte ptr [r14+rax+6]
    LEA rsi, [rax+6]
    CMP cl, 20h
    JZ loc_47A060
loc_479B9B:
    CMP cl, 28h
    JZ loc_47A073
loc_479BA4:
    CMP cs:byte_753583, 0
    JNZ loc_479FF0
loc_479BB1:
    ADD [rsp+118h+var_108], 1
    ADD r13, 1
loc_479BBB:
    TEST byte ptr [r12], 30h
    JNZ loc_47A2D8
loc_479BC6:
    ADD rbp, 1
    JNZ loc_479B00
loc_479BD0:
    MOV r15, [rsp+118h+var_F0]
    MOV esi, 3
    XOR edi, edi
    MOV rdx, r15
    CALL sub_4D3C20
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSTooManyChecks
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00h]
loc_479C10:
    MOV rsi, rdx
    XOR ecx, ecx
    SUB rsi, rax
    CMP byte ptr [rbx], 5Ch
    SETZ cl
    ADD rcx, cs:qword_753590
    CMP rsi, rcx
    JB loc_479BA4
loc_479C2E:
    MOV r15, cs:qword_753588
    LEA rcx, [rax+r15]
    LEA rsi, [r14+rcx]
    MOVZX eax, byte ptr [rsi]
    CMP al, 20h
    SETNZ r8b
    CMP al, 9
    SETNZ al
    TEST r8b, al
    JNZ loc_479BA4
loc_479C54:
    TEST r15, r15
    MOV byte ptr [rsi], 0
    JZ loc_47A91B
loc_479C60:
    MOV [rsp+118h+var_D8], rdx
    MOV [rsp+118h+var_E0], rcx
    MOV [rsp+118h+var_C0], r10b
    CALL ___ctype_b_loc
    MOVZX r10d, [rsp+118h+var_C0]
    MOV rcx, [rsp+118h+var_E0]
    XOR esi, esi
    MOV rdx, [rsp+118h+var_D8]
    MOV r11, [rax]
    MOV rax, rbx
    NOP dword ptr [rax+00h]
loc_479C90:
    MOVZX edi, byte ptr [rax]
    TEST byte ptr [r11+rdi*2+1], 10h
    JZ loc_479BA4
loc_479C9F:
    LEA edi, [rsi+1]
    ADD rax, 1
    CMP r15, rdi
    MOV rsi, rdi
    JA loc_479C90
loc_479CAE:
    CMP byte ptr [rax], 0
    JNZ loc_479BA4
loc_479CB7:
    LEA rax, [rcx+1]
    MOV rsi, rdx
    SUB rsi, rax
    CMP rsi, 1
    JZ loc_479CE3
loc_479CC7:
    LEA r8, [r14+rax]
    MOVZX esi, byte ptr [r8]
    CMP sil, 20h
    JZ loc_47A469
loc_479CD9:
    CMP sil, 2Ah
    JZ loc_47A469
loc_479CE3:
    MOV edi, cs:dword_742FF4
    TEST edi, edi
    JZ loc_479BA4
loc_479CF1:
    LEA r15, [r14+rax]
    MOV cs:dword_742FF4, 1
loc_479CFF:
    TEST r10b, r10b
    JNZ loc_47A4BC
loc_479D08:
    MOV esi, [rsp+118h+var_F8]
    TEST esi, esi
    JNZ loc_479D28
loc_479D10:
    CMP byte ptr [r15], 2Dh
    JNZ loc_479D28
loc_479D16:
    CMP byte ptr [r15+1], 0
    JZ loc_479BA4
loc_479D21:
    NOP dword ptr [rax+00000000h]
loc_479D28:
    CMP cs:byte_753584, 0
    MOV dword ptr [rsp+118h+var_100], 0
    JNZ loc_479D53
loc_479D39:
    MOV esi, 0Ah
    MOV rdi, r15
    CALL _strchr
    TEST rax, rax
    SETNZ al
    MOVZX eax, al
    MOV dword ptr [rsp+118h+var_100], eax
loc_479D53:
    LEA rdx, [rsp+118h+var_A9]
    LEA rsi, [rsp+118h+var_68]
    MOV rdi, r15
    CALL sub_4791B0
    TEST al, al
    JNZ loc_479EA0
loc_479D70:
    ADD [rsp+118h+var_E8], 1
    CMP cs:byte_753584, 0
    JNZ loc_479E38
loc_479D83:
    MOV ecx, dword ptr [rsp+118h+var_100]
    TEST ecx, ecx
    JZ loc_479E04
loc_479D8B:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_47A9D3
loc_479DA0:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
    JMP loc_479DCF
loc_479DB0:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_4F28CB
    CALL _fwrite_unlocked
loc_479DCB:
    ADD r15, 1
loc_479DCF:
    MOVZX eax, byte ptr [r15]
    TEST al, al
    JZ loc_479E13
loc_479DD7:
    CMP al, 0Ah
    JZ loc_479E80
loc_479DDF:
    CMP al, 5Ch
    JZ loc_479DB0
loc_479DE3:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_47A529
loc_479DF8:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
    JMP loc_479DCB
loc_479E04:
    MOV rsi, cs:stdout
    MOV rdi, r15
    CALL _fputs_unlocked
loc_479E13:
    MOV edx, 5
    MOV esi, offset aFailedOpenOrRe
loc_479E1D:
    XOR edi, edi
    CALL _dcgettext
    MOV esi, offset aS_2
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_479E38:
    MOV byte ptr [rsp+118h+var_100], 1
    JMP loc_479BBB
loc_479E48:
    ADD rax, 1
    MOV r10d, 1
    JMP loc_479B6F
loc_479E60:
    MOV byte ptr [r14+rax-1], 0
    MOV r14, [rsp+118h+lineptr]
    SUB rdx, 1
    MOVZX ecx, byte ptr [r14]
    JMP loc_479B41
loc_479E80:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset aN_0
    CALL _fwrite_unlocked
    JMP loc_479DCB
loc_479EA0:
    CMP cs:byte_753582, 0
    JZ loc_479EB0
loc_479EA9:
    CMP [rsp+118h+var_A9], 0
    JNZ loc_479E38
loc_479EB0:
    MOV r14, cs:qword_753588
    SHR r14, 1
    JZ loc_47A9B9
loc_479EC0:
    CALL ___ctype_tolower_loc
    XOR r10d, r10d
    MOV rcx, [rax]
    JMP loc_479EF2
loc_479ED0:
    MOVZX edx, byte ptr [rbx+r10*2+1]
    AND eax, 0Fh
    MOVSX eax, ds:byte_51B220[rax]
    CMP [rcx+rdx*4], eax
    JNZ loc_479F14
loc_479EE5:
    ADD r10, 1
    CMP r14, r10
    JZ loc_47A490
loc_479EF2:
    MOVZX eax, [rsp+r10+118h+var_68]
    MOVZX esi, byte ptr [rbx+r10*2]
    MOV edx, eax
    SHR dl, 4
    AND edx, 0Fh
    MOVSX edx, ds:byte_51B220[rdx]
    CMP [rcx+rsi*4], edx
    JZ loc_479ED0
loc_479F14:
    CMP r14, r10
    JZ loc_47A490
loc_479F1D:
    ADD [rsp+118h+var_C8], 1
    CMP cs:byte_753584, 0
    JNZ loc_479E38
loc_479F30:
    MOV edx, dword ptr [rsp+118h+var_100]
    TEST edx, edx
    JZ loc_47A50B
loc_479F3C:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_47A9E2
loc_479F51:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_479F5C:
    MOVZX eax, byte ptr [r15]
    MOV rbx, r10
    TEST al, al
    JNZ loc_479F97
loc_479F67:
    JMP loc_479FD1
loc_479F70:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_4F28CB
    CALL _fwrite_unlocked
loc_479F8B:
    ADD r15, 1
    MOVZX eax, byte ptr [r15]
    TEST al, al
    JZ loc_479FCE
loc_479F97:
    CMP al, 0Ah
    JZ loc_47A038
loc_479F9F:
    CMP al, 5Ch
    JZ loc_479F70
loc_479FA3:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_47A7ED
loc_479FB8:
    LEA rcx, [rdx+1]
    ADD r15, 1
    MOV [rdi+28h], rcx
    MOV [rdx], al
    MOVZX eax, byte ptr [r15]
    TEST al, al
    JNZ loc_479F97
loc_479FCE:
    MOV r10, rbx
loc_479FD1:
    CMP r14, r10
    JZ loc_47A536
loc_479FDA:
    MOV edx, 5
    MOV esi, offset aFailed
    JMP loc_479E1D
loc_479FF0:
    MOV rdx, [rsp+118h+var_F0]
    XOR edi, edi
    MOV esi, 3
    CALL sub_4D3C20
    XOR edi, edi
    MOV r14, rax
    MOV edx, 5
    MOV esi, offset aSLuImproperlyF
    CALL _dcgettext
    MOV r9d, offset aSha256
    MOV rdx, rax
    MOV r8, rbp
    MOV rcx, r14
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_479BB1
loc_47A038:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset aN_0
    CALL _fwrite_unlocked
    JMP loc_479F8B
loc_47A060:
    MOVZX ecx, byte ptr [r14+rax+7]
    LEA rsi, [rax+7]
    CMP cl, 28h
    JNZ loc_479BA4
loc_47A073:
    ADD rsi, 1
    SUB rdx, rsi
    JZ loc_479BA4
loc_47A080:
    MOV rax, rdx
    LEA r15, [r14+rsi]
    SUB rax, 1
    JZ loc_47A0B5
loc_47A08D:
    LEA rcx, [r15+rax]
    CMP byte ptr [rcx], 29h
    JNZ loc_47A0AF
loc_47A096:
    JMP loc_47A594
loc_47A0A0:
    CMP byte ptr [r15+rax], 29h
    LEA rcx, [r15+rax]
    JZ loc_47A594
loc_47A0AF:
    SUB rax, 1
    JNZ loc_47A0A0
loc_47A0B5:
    CMP byte ptr [r15], 29h
    JNZ loc_479BA4
loc_47A0BF:
    XOR eax, eax
    TEST r10b, r10b
    MOV rcx, r15
    JZ loc_47A0D2
loc_47A0C9:
    TEST r15, r15
    JZ loc_479BA4
loc_47A0D2:
    LEA rdx, [rax+1]
    MOV byte ptr [rcx], 0
    MOVZX eax, byte ptr [r15+rax+1]
    CMP al, 20h
    JNZ loc_47A0F5
loc_47A0E3:
    NOP dword ptr [rax+rax+00h]
loc_47A0E8:
    ADD rdx, 1
    MOVZX eax, byte ptr [r15+rdx]
    CMP al, 20h
    JZ loc_47A0E8
loc_47A0F5:
    CMP al, 9
    JZ loc_47A0E8
loc_47A0F9:
    CMP al, 3Dh
    JNZ loc_479BA4
loc_47A101:
    LEA rbx, [r15+rdx+1]
    MOVZX eax, byte ptr [rbx]
    CMP al, 9
    JZ loc_47A111
loc_47A10D:
    CMP al, 20h
    JNZ loc_47A12A
loc_47A111:
    LEA rax, [r15+rdx+2]
loc_47A116:
    MOVZX edx, byte ptr [rax]
    MOV rbx, rax
    ADD rax, 1
    CMP dl, 20h
    JZ loc_47A116
loc_47A125:
    CMP dl, 9
    JZ loc_47A116
loc_47A12A:
    MOV r14, cs:qword_753588
    TEST r14, r14
    JZ loc_47AA87
loc_47A13A:
    CALL ___ctype_b_loc
    XOR edx, edx
    MOV rsi, [rax]
    MOV rax, rbx
loc_47A147:
    MOVZX ecx, byte ptr [rax]
    TEST byte ptr [rsi+rcx*2+1], 10h
    JZ loc_479BA4
loc_47A155:
    LEA ecx, [rdx+1]
    ADD rax, 1
    CMP rcx, r14
    MOV rdx, rcx
    JB loc_47A147
loc_47A164:
    CMP byte ptr [rax], 0
    SETZ al
loc_47A16A:
    TEST al, al
    JNZ loc_479D08
loc_47A172:
    JMP loc_479BA4
loc_47A180:
    LEA rdx, [rsp+118h+n]
    LEA rsi, [rsp+118h+var_98]
    MOV rdi, r15
    CALL sub_4791B0
    TEST al, al
    JZ loc_47A42B
loc_47A19D:
    MOV esi, 5Ch
    MOV rdi, r15
    CALL _strchr
    TEST rax, rax
    JZ loc_47A923
loc_47A1B3:
    CMP [rsp+118h+var_F1], 0
    JNZ loc_47A7FA
loc_47A1BE:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_47AA20
loc_47A1D3:
    LEA rdx, [rax+1]
    MOV ebx, 1
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_47A1E3:
    MOV rax, cs:qword_753588
    SHR rax, 1
    JZ loc_47A22F
loc_47A1EF:
    XOR ebp, ebp
    NOP dword ptr [rax+00000000h]
loc_47A1F8:
    MOVZX edx, [rsp+rbp+118h+var_98]
    XOR eax, eax
    MOV esi, offset a02x
    MOV edi, 1
    ADD rbp, 1
    CALL ___printf_chk
    MOV rax, cs:qword_753588
    SHR rax, 1
    CMP rax, rbp
    JA loc_47A1F8
loc_47A224:
    CMP [rsp+118h+var_F1], 0
    JNZ loc_47A444
loc_47A22F:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_47AA11
loc_47A244:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_47A24F:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_47AA34
loc_47A264:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOVZX edi, [rsp+118h+var_BD]
    MOV [rax], dil
loc_47A274:
    TEST ebx, ebx
    JNZ loc_47A29F
loc_47A278:
    JMP loc_47A435
loc_47A280:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_4F28CB
    CALL _fwrite_unlocked
loc_47A29B:
    ADD r15, 1
loc_47A29F:
    MOVZX eax, byte ptr [r15]
    TEST al, al
    JZ loc_47A444
loc_47A2AB:
    CMP al, 0Ah
    JZ loc_47A3BE
loc_47A2B3:
    CMP al, 5Ch
    JZ loc_47A280
loc_47A2B7:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_47A990
loc_47A2CC:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
    JMP loc_47A29B
loc_47A2D8:
    MOV rdi, [rsp+118h+lineptr]
    MOV r15, [rsp+118h+var_F0]
    MOV r14, r13
    CALL _free
    TEST byte ptr [r12], 20h
    JNZ loc_47A7AF
loc_47A2F5:
    MOV eax, [rsp+118h+var_F8]
    TEST eax, eax
    JNZ loc_47A57F
loc_47A301:
    CMP byte ptr [rsp+118h+var_100], 0
    JZ loc_47A76E
loc_47A30C:
    CMP cs:byte_753584, 0
    JNZ loc_47A34A
loc_47A315:
    CMP [rsp+118h+var_108], 0
    JNZ loc_47A700
loc_47A321:
    CMP [rsp+118h+var_E8], 0
    JNZ loc_47A68A
loc_47A32D:
    CMP [rsp+118h+var_C8], 0
    JNZ loc_47A655
loc_47A339:
    MOVZX eax, [rsp+118h+var_BE]
    CMP cs:byte_753582, al
    JA loc_47A735
loc_47A34A:
    XOR eax, eax
    CMP [rsp+118h+var_BE], 0
    JZ loc_47A363
loc_47A353:
    MOV rbx, [rsp+118h+var_E8]
    OR rbx, [rsp+118h+var_C8]
    JZ loc_47A630
loc_47A363:
    MOV [rsp+118h+var_BF], al
loc_47A367:
    ADD [rsp+118h+var_110], 8
    MOV rax, [rsp+118h+var_110]
    CMP [rsp+118h+var_D0], rax
    JA loc_479A60
loc_47A37D:
    CMP cs:byte_753598, 0
    JNZ loc_47A6BF
loc_47A38A:
    MOVZX eax, [rsp+118h+var_BF]
    XOR eax, 1
    MOV rbx, [rsp+118h+var_40]
    XOR rbx, fs:28h
    MOVZX eax, al
    JNZ loc_47AA82
loc_47A3AC:
    ADD rsp, 0E8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_47A3BE:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset aN_0
    CALL _fwrite_unlocked
    JMP loc_47A29B
loc_47A3DE:
    MOV esi, offset modes
    MOV rdi, r15
    CALL sub_4BFFB0
    TEST rax, rax
    MOV r12, rax
    JNZ loc_479AB6
loc_47A3F7:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV [rsp+118h+var_BF], 0
    JMP loc_47A367
loc_47A42B:
    MOV [rsp+118h+var_BF], 0
    JMP loc_47A367
loc_47A435:
    MOV rsi, cs:stdout
    MOV rdi, r15
    CALL _fputs_unlocked
loc_47A444:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_47A9AA
loc_47A459:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    JMP loc_47A367
loc_47A469:
    CMP cs:dword_742FF4, 1
    MOV r15, r8
    JZ loc_479CFF
loc_47A479:
    LEA rax, [rcx+2]
    MOV cs:dword_742FF4, 0
    LEA r15, [r14+rax]
    JMP loc_479CFF
loc_47A490:
    CMP cs:byte_753584, 0
    MOV [rsp+118h+var_BE], 1
    MOV r10, r14
    JNZ loc_479E38
loc_47A4A5:
    CMP cs:byte_753581, 0
    MOV [rsp+118h+var_BE], 1
    JNZ loc_479E38
loc_47A4B7:
    JMP loc_479F30
loc_47A4BC:
    XOR ecx, ecx
    SUB rdx, rax
    LEA rsi, [r15+1]
    JZ loc_47A574
loc_47A4CB:
    LEA r10, [rdx-1]
loc_47A4CF:
    MOVZX eax, byte ptr [r15+rcx]
    TEST al, al
    JZ loc_479BA4
loc_47A4DC:
    CMP al, 5Ch
    JNZ loc_47A552
loc_47A4E0:
    CMP r10, rcx
    JZ loc_479BA4
loc_47A4E9:
    ADD rcx, 1
    MOVZX eax, byte ptr [r15+rcx]
    CMP al, 5Ch
    JZ loc_47A649
loc_47A4FA:
    CMP al, 6Eh
    JNZ loc_479BA4
loc_47A502:
    MOV rdi, rsi
    MOV byte ptr [rsi-1], 0Ah
    JMP loc_47A558
loc_47A50B:
    MOV rsi, cs:stdout
    MOV rdi, r15
    MOV [rsp+118h+var_100], r10
    CALL _fputs_unlocked
    MOV r10, [rsp+118h+var_100]
    JMP loc_479FD1
loc_47A529:
    MOVZX esi, al
    CALL ___overflow
    JMP loc_479DCB
loc_47A536:
    CMP cs:byte_753581, 0
    JNZ loc_479E38
loc_47A543:
    MOV edx, 5
    MOV esi, offset aOk
    JMP loc_479E1D
loc_47A552:
    MOV rdi, rsi
    MOV [rsi-1], al
loc_47A558:
    ADD rcx, 1
    ADD rsi, 1
    CMP rdx, rcx
    JA loc_47A4CF
loc_47A569:
    ADD rdx, r15
    CMP rdi, rdx
    JNB loc_47A574
loc_47A571:
    MOV byte ptr [rdi], 0
loc_47A574:
    TEST r15, r15
    SETNZ al
    JMP loc_47A16A
loc_47A57F:
    MOV rdi, r12
    CALL sub_4E0210
    TEST eax, eax
    JZ loc_47A301
loc_47A58F:
    JMP loc_47A3F7
loc_47A594:
    TEST r10b, r10b
    JZ loc_47A0D2
loc_47A59D:
    LEA rsi, [r15+1]
    LEA r10, [rax-1]
    XOR edx, edx
loc_47A5A7:
    MOVZX r8d, byte ptr [r15+rdx]
    TEST r8b, r8b
    JZ loc_479BA4
loc_47A5B5:
    CMP r8b, 5Ch
    JNZ loc_47AA05
loc_47A5BF:
    CMP r10, rdx
    JZ loc_479BA4
loc_47A5C8:
    ADD rdx, 1
    MOVZX edi, byte ptr [r15+rdx]
    CMP dil, 5Ch
    JZ loc_47AA42
loc_47A5DB:
    CMP dil, 6Eh
    JNZ loc_479BA4
loc_47A5E5:
    MOV rdi, rsi
    MOV byte ptr [rsi-1], 0Ah
loc_47A5EC:
    ADD rdx, 1
    ADD rsi, 1
    CMP rdx, rax
    JB loc_47A5A7
loc_47A5F9:
    CMP rdi, rcx
    JNB loc_47A0C9
loc_47A602:
    MOV byte ptr [rdi], 0
    JMP loc_47A0C9
loc_47A610:
    CMP [rsp+118h+var_F1], 0
    JZ loc_479948
loc_47A61B:
    MOV edx, 5
    MOV esi, offset aTagDoesNotSupp
    JMP loc_479960
loc_47A630:
    TEST r14, r14
    MOVZX ebx, [rsp+118h+var_BF]
    SETZ dl
    CMP cs:byte_753580, dl
    CMOVBE eax, ebx
    JMP loc_47A363
loc_47A649:
    MOV rdi, rsi
    MOV byte ptr [rsi-1], 5Ch
    JMP loc_47A558
loc_47A655:
    MOV rbx, [rsp+118h+var_C8]
    XOR edi, edi
    MOV r8d, 5
    MOV edx, offset aWarningLuCompu
    MOV esi, offset aWarningLuCompu_0
    MOV rcx, rbx
    CALL _dcngettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_47A339
loc_47A68A:
    MOV rbx, [rsp+118h+var_E8]
    XOR edi, edi
    MOV r8d, 5
    MOV edx, offset aWarningLuListe
    MOV esi, offset aWarningLuListe_0
    MOV rcx, rbx
    CALL _dcngettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_47A32D
loc_47A6BF:
    MOV rdi, cs:stdin
    CALL sub_4E0210
    CMP eax, 0FFFFFFFFh
    JNZ loc_47A38A
loc_47A6D4:
    MOV edx, 5
    MOV esi, offset aStandardInput
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
    XCHG ax, ax
loc_47A700:
    MOV rbx, [rsp+118h+var_108]
    XOR edi, edi
    MOV r8d, 5
    MOV edx, offset aWarningLuLines
    MOV esi, offset aWarningLuLineI
    MOV rcx, rbx
    CALL _dcngettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_47A321
loc_47A735:
    MOV rdx, r15
    XOR edi, edi
    MOV esi, 3
    CALL sub_4D3C20
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aSNoFileWasVeri
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_47A34A
loc_47A76E:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSNoProperlyFor
    XOR edi, edi
    CALL _dcgettext
    MOV r8d, offset aSha256
    MOV rdx, rax
    MOV rcx, rbx
    XOR eax, eax
    XOR esi, esi
    XOR edi, edi
    CALL _error
    XOR eax, eax
    JMP loc_47A363
loc_47A7AF:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aS_15
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV [rsp+118h+var_BF], 0
    JMP loc_47A367
loc_47A7ED:
    MOVZX esi, al
    CALL ___overflow
    JMP loc_479F8B
loc_47A7FA:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP [rdi+30h], rax
    JBE loc_47AA4E
loc_47A80F:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_47A81A:
    MOV rcx, cs:stdout
    MOV edx, 6
    MOV esi, 1
    MOV edi, offset aSha256
    MOV rbx, r15
    CALL _fwrite_unlocked
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_4F2919
    CALL _fwrite_unlocked
    MOVZX eax, byte ptr [r15]
    TEST al, al
    JNZ loc_47A886
loc_47A85B:
    JMP loc_47A8CC
loc_47A860:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_4F28CB
    CALL _fwrite_unlocked
loc_47A87B:
    ADD rbx, 1
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JZ loc_47A8CC
loc_47A886:
    CMP al, 0Ah
    JZ loc_47A8AF
loc_47A88A:
    CMP al, 5Ch
    JZ loc_47A860
loc_47A88E:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_47A99D
loc_47A8A3:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
    JMP loc_47A87B
loc_47A8AF:
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset aN_0
    CALL _fwrite_unlocked
    JMP loc_47A87B
loc_47A8CC:
    MOV ebx, 1
loc_47A8D1:
    MOV rcx, cs:stdout
    MOV edx, 4
    MOV esi, 1
    MOV edi, offset asc_4F2914
    CALL _fwrite_unlocked
    MOV rax, cs:qword_753588
    SHR rax, 1
    JNZ loc_47A1EF
loc_47A8FC:
    JMP loc_47A224
loc_47A901:
    MOV rdi, [rsp+118h+var_D0]
    MOV qword ptr [rdi], (offset asc_52A7CE+3)
    ADD rdi, 8
    MOV [rsp+118h+var_D0], rdi
    JMP loc_479A1C
loc_47A91B:
    MOV rax, rbx
    JMP loc_479CAE
loc_47A923:
    MOV esi, 0Ah
    MOV rdi, r15
    CALL _strchr
    TEST rax, rax
    JNZ loc_47A1B3
loc_47A939:
    CMP [rsp+118h+var_F1], 0
    JZ loc_47AA5D
loc_47A944:
    MOV rcx, cs:stdout
    MOV edx, 6
    MOV esi, 1
    MOV edi, offset aSha256
    XOR ebx, ebx
    CALL _fwrite_unlocked
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    MOV edi, offset asc_4F2919
    CALL _fwrite_unlocked
    MOV rsi, cs:stdout
    MOV rdi, r15
    CALL _fputs_unlocked
    JMP loc_47A8D1
loc_47A990:
    MOVZX esi, al
    CALL ___overflow
    JMP loc_47A29B
loc_47A99D:
    MOVZX esi, al
    CALL ___overflow
    JMP loc_47A87B
loc_47A9AA:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_47A367
loc_47A9B9:
    CMP cs:byte_753584, 0
    MOV [rsp+118h+var_BE], 1
    JNZ loc_479E38
loc_47A9CB:
    XOR r10d, r10d
    JMP loc_47A4A5
loc_47A9D3:
    MOV esi, 5Ch
    CALL ___overflow
    JMP loc_479DCF
loc_47A9E2:
    MOV esi, 5Ch
    MOV [rsp+118h+var_100], r10
    CALL ___overflow
    MOV r10, [rsp+118h+var_100]
    JMP loc_479F5C
loc_47A9FB:
    MOV [rsp+118h+var_BF], 1
    JMP loc_47A37D
loc_47AA05:
    MOV rdi, rsi
    MOV [rsi-1], r8b
    JMP loc_47A5EC
loc_47AA11:
    MOV esi, 20h
    CALL ___overflow
    JMP loc_47A24F
loc_47AA20:
    MOV esi, 5Ch
    MOV ebx, 1
    CALL ___overflow
    JMP loc_47A1E3
loc_47AA34:
    MOV esi, [rsp+118h+var_BC]
    CALL ___overflow
    JMP loc_47A274
loc_47AA42:
    MOV rdi, rsi
    MOV byte ptr [rsi-1], 5Ch
    JMP loc_47A5EC
loc_47AA4E:
    MOV esi, 5Ch
    CALL ___overflow
    JMP loc_47A81A
loc_47AA5D:
    XOR ebx, ebx
    JMP loc_47A1E3
loc_47AA64:
    MOV edx, 5
    MOV esi, offset aTheStrictOptio
    JMP loc_479960
loc_47AA73:
    MOV edx, 5
    MOV esi, offset aTheQuietOption
    JMP loc_479960
loc_47AA82:
    CALL ___stack_chk_fail
loc_47AA87:
    MOV rax, rbx
    JMP loc_47A164
loc_47AA8F:
    MOV edx, 5
    MOV esi, offset aTheWarnOptionI
    JMP loc_479960
loc_47AA9E:
    MOV edx, 5
    MOV esi, offset aTheStatusOptio
    JMP loc_479960
loc_47AAAD:
    MOV edx, 5
    MOV esi, offset aTheIgnoreMissi
    JMP loc_479960
loc_47AABC:
    MOV edx, 5
    MOV esi, offset aTheBinaryAndTe
    JMP loc_479960
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Processing/Iteration'}

##### Q 175 - memcoll0
```assembly
loc_4C4970:

loc_4C4AE0:
    PUSH r12
    PUSH rbp
    MOV r12, rdx
    PUSH rbx
    MOV rbp, rdi
    MOV rbx, rsi
    SUB rsp, 10h
    CMP rsi, rcx
    JZ loc_4C4B10
loc_4C4AF6:
    ADD rsp, 10h
    MOV rdx, r12
    MOV rsi, rbx
    MOV rdi, rbp
    POP rbx
    POP rbp
    POP r12
    JMP sub_4C4970
loc_4C4B10:
    MOV rdx, rsi
    MOV rsi, r12
    MOV [rsp+28h+var_20], rcx
    CALL _memcmp
    TEST eax, eax
    MOV rcx, [rsp+28h+var_20]
    JNZ loc_4C4AF6
loc_4C4B29:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    ADD rsp, 10h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 14, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3', '0xFFFFFFFFFFFFFFFF', '0x2', '0x8000000', '0x1F', '0x0B0', '0x7', '0x2B0', '0x2CD', '0x16', '0x2', '0x1E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Library/Utility'}

##### T 175 - memcoll0
```assembly
loc_4E7800:
    PUSH r15
    PUSH r14
    MOV r14, rcx
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV r12, rdx
    SUB rsp, 8
    CMP rsi, rcx
    JZ loc_4E7888
loc_4E781F:
    CALL ___errno_location
    MOV r15, rax
    JMP loc_4E785B
loc_4E7830:
    MOV rdi, rbp
    CALL _strlen
    MOV rdi, r12
    LEA rbx, [rax+1]
    CALL _strlen
    ADD rax, 1
    ADD rbp, rbx
    ADD r12, rax
    SUB r14, rax
    SUB r13, rbx
    JZ loc_4E78B0
loc_4E7856:
    TEST r14, r14
    JZ loc_4E78C0
loc_4E785B:
    MOV dword ptr [r15], 0
    MOV rsi, r12
    MOV rdi, rbp
    CALL _strcoll
    TEST eax, eax
    JZ loc_4E7830
loc_4E7871:
    MOV ebx, eax
loc_4E7873:
    ADD rsp, 8
    MOV eax, ebx
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4E7888:
    MOV rdx, rsi
    MOV rsi, r12
    MOV r14, r13
    CALL _memcmp
    TEST eax, eax
    MOV ebx, eax
    JNZ loc_4E781F
loc_4E789C:
    CALL ___errno_location
    MOV dword ptr [rax], 0
    JMP loc_4E7873
loc_4E78B0:
    XOR eax, eax
    TEST r14, r14
    SETNZ al
    NEG eax
    MOV ebx, eax
    JMP loc_4E7873
loc_4E78C0:
    MOV ebx, 1
    JMP loc_4E7873
```
{'input_parameter_count': 1, 'input_parameter_types': ['Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 14, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8000000', '0x1F', '0xB0', '0x2B0', '0x2CD', '0x16'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Dynamic Library Loading and Initialization', 'inferred_category': 'Library Management'}

##### Q 176 - three_arguments_0
```assembly
loc_48ABE0:

loc_48B1F2:
    MOV rax, [r8+r10-8]
    MOVZX edx, byte ptr [rax]
    CMP edx, 21h
    JNZ loc_48B228
loc_48B1FF:
    CMP byte ptr [rax+1], 0
    JNZ loc_48B258
loc_48B205:
    ADD esi, 1
    CMP esi, cs:dword_733108
    MOV cs:dword_73310C, esi
    JGE loc_48B2B1
loc_48B21A:
    CALL sub_48B120
    POP rbx
    XOR eax, 1
    RETN 
loc_48B228:
    CMP edx, 28h
    JNZ loc_48B258
loc_48B22D:
    CMP byte ptr [rax+1], 0
    JNZ loc_48B258
loc_48B233:
    MOV rax, [r8+r10+8]
    CMP byte ptr [rax], 29h
    JNZ loc_48B258
loc_48B23D:
    CMP byte ptr [rax+1], 0
    JNZ loc_48B258
loc_48B243:
    CMP byte ptr [r9], 0
    POP rbx
    SETNZ al
    ADD esi, 3
    MOV cs:dword_73310C, esi
    RETN 
loc_48B258:
    CMP byte ptr [r9], 2Dh
    JNZ loc_48B288
loc_48B25E:
    MOVZX eax, byte ptr [r9+1]
    CMP al, 61h
    JZ loc_48B26B
loc_48B267:
    CMP al, 6Fh
    JNZ loc_48B288
loc_48B26B:
    CMP byte ptr [r9+2], 0
    JNZ loc_48B288
loc_48B272:
    CMP esi, cs:dword_733108
    JGE loc_48B2B1
loc_48B27A:
    POP rbx
    JMP loc_48B3E0
loc_48B280:
    POP rbx
    XOR edi, edi
    JMP sub_48ABE0
loc_48B288:
    MOV rdi, r9
    CALL sub_4B5440
    MOV esi, offset aSBinaryOperato
    MOV rbx, rax
    XOR edi, edi
    MOV edx, 5
    CALL _dcgettext
    MOV rsi, rbx
    MOV rdi, rax
    XOR eax, eax
    CALL sub_48A490
loc_48B2B1:
    CALL sub_48A620
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x68', '0x60'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 176 - three_arguments_0
```assembly
loc_49FC60:

loc_4A09BE:
    CMP byte ptr [rdi+1], 0
    JNZ loc_4A0A70
loc_4A09C8:
    POP rbx
    XOR edi, edi
    JMP sub_49FC60
loc_4A09D0:
    CMP edx, 21h
    JZ loc_4A0A08
loc_4A09D5:
    MOV r10d, 2Dh
    SUB r10d, edx
    JNZ loc_4A0A19
loc_4A09E0:
    MOVZX edx, byte ptr [rdi+1]
    CMP dl, 6Eh
    JZ loc_4A0B60
loc_4A09ED:
    CMP dl, 6Fh
    JNZ loc_4A0A94
loc_4A09F6:
    CMP byte ptr [rdi+2], 74h
    JZ loc_4A0B7A
loc_4A0A00:
    XOR r10d, r10d
    JMP loc_4A0A19
loc_4A0A08:
    CMP byte ptr [rdi+1], 3Dh
    JZ loc_4A0A58
loc_4A0A0E:
    MOV r10d, 2Dh
    SUB r10d, edx
    JZ loc_4A09E0
loc_4A0A19:
    MOV rdx, [r8+r9-8]
    MOVZX ecx, byte ptr [rdx]
    CMP ecx, 21h
    JNZ loc_4A0AC0
loc_4A0A2A:
    CMP byte ptr [rdx+1], 0
    JNZ loc_4A0AF8
loc_4A0A34:
    ADD esi, 1
    CMP esi, cs:dword_7560D8
    MOV cs:dword_7560DC, esi
    JGE loc_4A0B89
loc_4A0A49:
    CALL sub_4A08E0
    XOR eax, 1
loc_4A0A51:
    POP rbx
    RETN 
loc_4A0A58:
    CMP byte ptr [rdi+2], 0
    JZ loc_4A09C8
loc_4A0A62:
    TEST ecx, ecx
    JNZ loc_4A0A0E
loc_4A0A66:
    JMP loc_4A0A7B
loc_4A0A70:
    CMP edx, 21h
    JZ loc_4A0A08
loc_4A0A75:
    CMP byte ptr [rdi+1], 3Dh
    JNZ loc_4A0A0E
loc_4A0A7B:
    CMP byte ptr [rdi+2], 0
    JZ loc_4A09C8
loc_4A0A85:
    MOV r10d, 2Dh
    SUB r10d, edx
    JNZ loc_4A0A19
loc_4A0A90:
    MOVZX edx, byte ptr [rdi+1]
loc_4A0A94:
    CMP dl, 65h
    JNZ loc_4A0B48
loc_4A0A9D:
    CMP byte ptr [rdi+2], 66h
    JNZ loc_4A0AB0
loc_4A0AA3:
    CMP byte ptr [rdi+3], 0
    JZ loc_4A09C8
loc_4A0AAD:
    NOP dword ptr [rax]
loc_4A0AB0:
    CMP byte ptr [rdi+2], 71h
    JNZ loc_4A0A00
loc_4A0ABA:
    JMP loc_4A0B7A
loc_4A0AC0:
    CMP ecx, 28h
    JNZ loc_4A0AF8
loc_4A0AC5:
    CMP byte ptr [rdx+1], 0
    JNZ loc_4A0AF8
loc_4A0ACB:
    MOV rdx, [r8+r9+8]
    CMP byte ptr [rdx], 29h
    JNZ loc_4A0AF8
loc_4A0AD5:
    CMP byte ptr [rdx+1], 0
    JNZ loc_4A0AF8
loc_4A0ADB:
    MOV rax, [r8+rax*8]
    CMP byte ptr [rax], 0
    SETNZ al
    ADD esi, 3
    MOV cs:dword_7560DC, esi
    JMP loc_4A0A51
loc_4A0AF8:
    TEST r10d, r10d
    JZ loc_4A0B28
loc_4A0AFD:
    CALL sub_4D4D30
    MOV esi, offset aSBinaryOperato
    MOV rbx, rax
    XOR edi, edi
    MOV edx, 5
    CALL _dcgettext
    MOV rsi, rbx
    MOV rdi, rax
    XOR eax, eax
    CALL sub_49FA90
loc_4A0B28:
    MOVZX eax, byte ptr [rdi+1]
    CMP al, 61h
    JZ loc_4A0B34
loc_4A0B30:
    CMP al, 6Fh
    JNZ loc_4A0AFD
loc_4A0B34:
    CMP byte ptr [rdi+2], 0
    JNZ loc_4A0AFD
loc_4A0B3A:
    CMP esi, cs:dword_7560D8
    JGE loc_4A0B89
loc_4A0B42:
    POP rbx
    JMP loc_4A0CB0
loc_4A0B48:
    CMP dl, 6Eh
    JZ loc_4A0B70
loc_4A0B4D:
    CMP dl, 6Ch
    JZ loc_4A0B60
loc_4A0B52:
    CMP dl, 67h
    JNZ loc_4A0A00
loc_4A0B5B:
    NOP dword ptr [rax+rax+00h]
loc_4A0B60:
    CMP byte ptr [rdi+2], 74h
    JNZ loc_4A0B70
loc_4A0B66:
    CMP byte ptr [rdi+3], 0
    JZ loc_4A09C8
loc_4A0B70:
    CMP byte ptr [rdi+2], 65h
    JNZ loc_4A0A00
loc_4A0B7A:
    CMP byte ptr [rdi+3], 0
    JZ loc_4A09C8
loc_4A0B84:
    JMP loc_4A0A00
loc_4A0B89:
    CALL sub_49FC20
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4', '0x10', '0xF8', '0xFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Cryptography'}

##### Q 177 - hash_pjw
```assembly
loc_4C2820:
    MOVSX rcx, byte ptr [rdi]
    TEST cl, cl
    JZ loc_4C284C
loc_4C2828:
    XOR eax, eax
    NOP word ptr [rax+rax+00h]
loc_4C2830:
    ROL rax, 9
    ADD rdi, 1
    ADD rax, rcx
    MOVSX rcx, byte ptr [rdi]
    TEST cl, cl
    JNZ loc_4C2830
loc_4C2843:
    XOR edx, edx
    DIV rsi
loc_4C2848:
    MOV rax, rdx
    RETN 
loc_4C284C:
    XOR edx, edx
    JMP loc_4C2848
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x98'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop', 'inferred_category': 'Utility/Helper'}

##### T 177 - hash_pjw
```assembly
loc_4E54C0:
    MOVSX rcx, byte ptr [rdi]
    TEST cl, cl
    JZ loc_4E54EC
loc_4E54C8:
    XOR eax, eax
    NOP word ptr [rax+rax+00h]
loc_4E54D0:
    ROL rax, 9
    ADD rdi, 1
    ADD rax, rcx
    MOVSX rcx, byte ptr [rdi]
    TEST cl, cl
    JNZ loc_4E54D0
loc_4E54E3:
    XOR edx, edx
    DIV rsi
loc_4E54E8:
    MOV rax, rdx
    RETN 
loc_4E54EC:
    XOR edx, edx
    JMP loc_4E54E8
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x98', '0x145', '0x41', '0x84', '0x2F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing/Cryptography', 'inferred_category': 'Security'}

##### Q 178 - single_binary_main_realpath
```assembly
loc_4681A0:
    PUSH r15
    PUSH r14
    XOR r14d, r14d
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    MOV r12d, 1
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
loc_4681F9:
    XOR r8d, r8d
    MOV ecx, offset stru_4F66A0
    MOV edx, offset aElmpqsz
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_468380
loc_468219:
    CMP eax, 6Dh
    JZ loc_468370
loc_468222:
    JG loc_468250
loc_468224:
    CMP eax, 4Ch
    JZ loc_468320
loc_46822D:
    JG loc_468280
loc_46822F:
    CMP eax, 0FFFFFF7Dh
    JZ loc_4682F0
loc_46823A:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_468360
loc_468245:
    XOR edi, edi
    CALL sub_467E80
loc_468250:
    CMP eax, 7Ah
    JZ loc_468330
loc_468259:
    JG loc_4682A0
loc_46825B:
    CMP eax, 71h
    JZ loc_4682E0
loc_468264:
    CMP eax, 73h
    JNZ loc_468360
loc_46826D:
    OR r12d, 4
    MOV cs:byte_730501, 0
    JMP loc_4681F9
loc_468280:
    CMP eax, 50h
    JZ loc_4682C0
loc_468285:
    CMP eax, 65h
    JNZ loc_468360
loc_46828E:
    AND r12d, 0FFFFFFFCh
    JMP loc_4681F9
loc_4682A0:
    CMP eax, 80h
    JZ loc_4682D0
loc_4682A7:
    CMP eax, 81h
    JNZ loc_468360
loc_4682B2:
    MOV r13, cs:optarg
    JMP loc_4681F9
loc_4682C0:
    AND r12d, 0FFFFFFFBh
    MOV cs:byte_730501, 0
    JMP loc_4681F9
loc_4682D0:
    MOV r14, cs:optarg
    JMP loc_4681F9
loc_4682E0:
    MOV cs:byte_71FFE9, 0
    JMP loc_4681F9
loc_4682F0:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    XOR r9d, r9d
    MOV r8d, offset aPadraigBrady
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aRealpath
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_468320:
    OR r12d, 4
    MOV cs:byte_730501, 1
    JMP loc_4681F9
loc_468330:
    MOV cs:byte_730500, 1
    JMP loc_4681F9
loc_46833C:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00h]
loc_468360:
    MOV edi, 1
    CALL sub_467E80
loc_468370:
    AND r12d, 0FFFFFFFCh
    OR r12d, 2
    JMP loc_4681F9
loc_468380:
    CMP ebp, cs:optind
    JLE loc_46833C
loc_468388:
    MOV r15d, r12d
    AND r15d, 3
    TEST r13, r13
    JZ loc_468518
loc_468398:
    TEST r14, r14
    JNZ loc_468518
loc_4683A1:
    MOV r14, r13
loc_4683A4:
    MOV esi, r12d
    MOV rdi, r14
    CALL sub_467D80
    TEST rax, rax
    MOV cs:qword_7304F8, rax
    JZ loc_468637
loc_4683BF:
    TEST r15d, r15d
    JZ loc_46855A
loc_4683C8:
    CMP r13, r14
    JZ loc_4685F0
loc_4683D1:
    TEST r13, r13
    JZ loc_468417
loc_4683D6:
    MOV esi, r12d
    MOV rdi, r13
    CALL sub_467D80
    TEST rax, rax
    MOV r14, rax
    JZ loc_46860A
loc_4683ED:
    TEST r15d, r15d
    JZ loc_4685B7
loc_4683F6:
    MOV r13, cs:qword_7304F8
    MOV rdi, r14
    MOV rsi, r13
    CALL sub_467CF0
    TEST al, al
    JZ loc_468598
loc_468410:
    MOV cs:qword_7304F0, r14
loc_468417:
    MOV eax, cs:optind
    MOV r13d, 1
    CMP eax, ebp
    JL loc_4684BD
loc_46842B:
    JMP loc_468603
loc_468430:
    MOV r8, cs:qword_7304F8
    TEST r8, r8
    JZ loc_468467
loc_46843C:
    MOV rdi, cs:qword_7304F0
    TEST rdi, rdi
    JZ loc_468454
loc_468448:
    MOV rsi, rax
    CALL sub_467CF0
    TEST al, al
    JZ loc_468467
loc_468454:
    XOR ecx, ecx
    XOR edx, edx
    MOV rsi, r8
    MOV rdi, r14
    CALL sub_446CD0
    TEST al, al
    JNZ loc_468476
loc_468467:
    MOV rsi, cs:stdout
    MOV rdi, r14
    CALL _fputs_unlocked
loc_468476:
    CMP cs:byte_730500, 1
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    SBB esi, esi
    AND esi, 0Ah
    CMP rax, [rdi+30h]
    JNB loc_468550
loc_468497:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], sil
loc_4684A2:
    MOV rdi, r14
    CALL _free
loc_4684AA:
    MOV eax, cs:optind
    ADD eax, 1
    CMP ebp, eax
    MOV cs:optind, eax
    JLE loc_468530
loc_4684BD:
    CDQE 
    MOV esi, r12d
    MOV r15, [rbx+rax*8]
    MOV rdi, r15
    CALL sub_467D80
    TEST rax, rax
    MOV r14, rax
    JNZ loc_468430
loc_4684DA:
    XOR r13d, r13d
    CMP cs:byte_71FFE9, 0
    JZ loc_4684AA
loc_4684E6:
    MOV rdx, r15
    XOR edi, edi
    MOV esi, 3
    CALL sub_4B5220
    MOV r14, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r14
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_4684AA
loc_468518:
    TEST r14, r14
    JZ loc_4683C8
loc_468521:
    JMP loc_4683A4
loc_468530:
    XOR r13d, 1
    MOVZX eax, r13b
loc_468538:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_468550:
    CALL ___overflow
    JMP loc_4684A2
loc_46855A:
    MOV rdi, rax
    CALL sub_467DD0
    TEST al, al
    JNZ loc_4683C8
loc_46856A:
    MOV rdx, r14
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    MOV esi, 14h
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00h]
loc_468598:
    MOV rdi, r14
    CALL _free
    MOV cs:qword_7304F0, r13
    MOV cs:qword_7304F8, 0
    JMP loc_468417
loc_4685B7:
    MOV rdi, rax
    CALL sub_467DD0
    TEST al, al
    JNZ loc_4683F6
loc_4685C7:
    MOV rdx, r13
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    MOV esi, 14h
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
loc_4685F0:
    MOV rax, cs:qword_7304F8
    MOV cs:qword_7304F0, rax
    JMP loc_468417
loc_468603:
    XOR eax, eax
    JMP loc_468538
loc_46860A:
    MOV rdx, r13
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_468637:
    MOV rdx, r14
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    XCHG ax, ax
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Looping', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x80', '0x100', '0x104', '0x108', '0x10C', '0x110'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Copy with Padding', 'inferred_category': 'Utility'}

##### T 178 - single_binary_main_realpath
```assembly
loc_472D20:
    PUSH r15
    PUSH r14
    XOR r14d, r14d
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    XOR r13d, r13d
    MOV ebp, 1
    SUB rsp, 0B8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
loc_472D8F:
    XOR r8d, r8d
    MOV ecx, offset stru_519660
    MOV edx, offset aElmpqsz
    MOV rsi, rbx
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_472F10
loc_472DB0:
    CMP eax, 6Dh
    JZ loc_472F00
loc_472DB9:
    JG loc_472DE8
loc_472DBB:
    CMP eax, 4Ch
    JZ loc_472EB0
loc_472DC4:
    JG loc_472E10
loc_472DC6:
    CMP eax, 0FFFFFF7Dh
    JZ loc_472E80
loc_472DD1:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_472EF0
loc_472DDC:
    XOR edi, edi
    CALL sub_472A00
loc_472DE8:
    CMP eax, 7Ah
    JZ loc_472EC0
loc_472DF1:
    JG loc_472E30
loc_472DF3:
    CMP eax, 71h
    JZ loc_472E70
loc_472DF8:
    CMP eax, 73h
    JNZ loc_472EF0
loc_472E01:
    OR ebp, 4
    MOV cs:byte_7534E1, 0
    JMP loc_472D8F
loc_472E10:
    CMP eax, 50h
    JZ loc_472E50
loc_472E15:
    CMP eax, 65h
    JNZ loc_472EF0
loc_472E1E:
    AND ebp, 0FFFFFFFCh
    JMP loc_472D8F
loc_472E30:
    CMP eax, 80h
    JZ loc_472E60
loc_472E37:
    CMP eax, 81h
    JNZ loc_472EF0
loc_472E42:
    MOV r13, cs:optarg
    JMP loc_472D8F
loc_472E50:
    AND ebp, 0FFFFFFFBh
    MOV cs:byte_7534E1, 0
    JMP loc_472D8F
loc_472E60:
    MOV r14, cs:optarg
    JMP loc_472D8F
loc_472E70:
    MOV cs:byte_742FE9, 0
    JMP loc_472D8F
loc_472E80:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    XOR r9d, r9d
    MOV r8d, offset aPadraigBrady
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aRealpath
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_472EB0:
    OR ebp, 4
    MOV cs:byte_7534E1, 1
    JMP loc_472D8F
loc_472EC0:
    MOV cs:byte_7534E0, 1
    JMP loc_472D8F
loc_472ECC:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00h]
loc_472EF0:
    MOV edi, 1
    CALL sub_472A00
loc_472F00:
    AND ebp, 0FFFFFFFCh
    OR ebp, 2
    JMP loc_472D8F
loc_472F10:
    CMP r12d, cs:optind
    JLE loc_472ECC
loc_472F19:
    MOV r15d, ebp
    AND r15d, 3
    TEST r13, r13
    JZ loc_473210
loc_472F29:
    TEST r14, r14
    JNZ loc_473210
loc_472F32:
    MOV r14, r13
loc_472F35:
    MOV esi, ebp
    MOV rdi, r14
    CALL sub_4B1E70
    CMP cs:byte_7534E1, 0
    MOV rcx, rax
    JZ loc_472F7E
loc_472F4B:
    TEST rax, rax
    JZ loc_4733AB
loc_472F54:
    MOV esi, ebp
    MOV rdi, rax
    MOV [rsp+0E8h+ptr], rax
    AND esi, 0FFFFFFFBh
    CALL sub_4B1E70
    MOV rcx, [rsp+0E8h+ptr]
    MOV [rsp+0E8h+var_E8], rax
    MOV rdi, rcx
    CALL _free
    MOV rax, [rsp+0E8h+var_E8]
    MOV rcx, rax
loc_472F7E:
    TEST rcx, rcx
    MOV cs:qword_7534D8, rcx
    JZ loc_4733B6
loc_472F8E:
    TEST r15d, r15d
    JZ loc_4732A3
loc_472F97:
    CMP r13, r14
    JZ loc_473380
loc_472FA0:
    TEST r13, r13
    JZ loc_47307C
loc_472FA9:
    MOV esi, ebp
    MOV rdi, r13
    CALL sub_4B1E70
    CMP cs:byte_7534E1, 0
    MOV r14, rax
    JZ loc_472FE8
loc_472FBF:
    TEST rax, rax
    JZ loc_4733EF
loc_472FC8:
    MOV esi, ebp
    MOV rdi, rax
    AND esi, 0FFFFFFFBh
    CALL sub_4B1E70
    MOV rdi, r14
    MOV [rsp+0E8h+var_E8], rax
    CALL _free
    MOV rax, [rsp+0E8h+var_E8]
    MOV r14, rax
loc_472FE8:
    TEST r14, r14
    JZ loc_4733EF
loc_472FF1:
    TEST r15d, r15d
    JZ loc_473327
loc_472FFA:
    MOVZX eax, byte ptr [r14+1]
    MOV r13, cs:qword_7534D8
    TEST al, al
    JZ loc_473296
loc_47300E:
    CMP al, 2Fh
    JZ loc_473393
loc_473016:
    MOVZX ecx, byte ptr [r13+1]
    LEA rdx, [r13+1]
    TEST cl, cl
    JZ loc_473308
loc_473027:
    CMP al, cl
    JNZ loc_473308
loc_47302F:
    LEA rcx, [r14+1]
    JMP loc_47304D
loc_473038:
    MOVZX edi, byte ptr [rdx]
    TEST dil, dil
    JZ loc_473308
loc_473044:
    CMP sil, dil
    JNZ loc_473308
loc_47304D:
    ADD rcx, 1
    MOVZX esi, byte ptr [rcx]
    ADD rdx, 1
    TEST sil, sil
    JNZ loc_473038
loc_47305D:
    MOVZX edx, byte ptr [rdx]
    CMP dl, 2Fh
    SETZ cl
    TEST dl, dl
    SETZ al
    OR eax, ecx
loc_47306D:
    TEST al, al
    JZ loc_473308
loc_473075:
    MOV cs:qword_7534D0, r14
loc_47307C:
    MOV eax, cs:optind
    MOV esi, ebp
    MOV byte ptr [rsp+0E8h+ptr], 1
    AND esi, 0FFFFFFFBh
    MOV dword ptr [rsp+0E8h+var_E8], esi
    CMP r12d, eax
    JLE loc_4733E8
loc_473098:
    NOP dword ptr [rax+rax+00000000h]
loc_4730A0:
    CDQE 
    MOV esi, ebp
    MOV r15, [rbx+rax*8]
    MOV rdi, r15
    CALL sub_4B1E70
    CMP cs:byte_7534E1, 0
    MOV r13, rax
    JZ loc_4730DE
loc_4730BC:
    TEST rax, rax
    JZ loc_473230
loc_4730C5:
    MOV esi, dword ptr [rsp+0E8h+var_E8]
    MOV rdi, rax
    CALL sub_4B1E70
    MOV r14, rax
    MOV rdi, r13
    MOV r13, r14
    CALL _free
loc_4730DE:
    TEST r13, r13
    JZ loc_473230
loc_4730E7:
    MOV rsi, cs:qword_7534D8
    TEST rsi, rsi
    JZ loc_473170
loc_4730F3:
    MOV rdx, cs:qword_7534D0
    TEST rdx, rdx
    JZ loc_473160
loc_4730FF:
    MOVZX eax, byte ptr [rdx+1]
    TEST al, al
    JZ loc_473220
loc_47310B:
    CMP al, 2Fh
    JZ loc_473248
loc_473113:
    MOVZX edi, byte ptr [r13+1]
    LEA rcx, [r13+1]
    CMP al, dil
    JNZ loc_473170
loc_473121:
    TEST dil, dil
    JZ loc_473170
loc_473126:
    ADD rdx, 1
    JMP loc_47313D
loc_473130:
    MOVZX edi, byte ptr [rcx]
    CMP al, dil
    JNZ loc_473170
loc_473138:
    TEST dil, dil
    JZ loc_473170
loc_47313D:
    ADD rdx, 1
    MOVZX eax, byte ptr [rdx]
    ADD rcx, 1
    TEST al, al
    JNZ loc_473130
loc_47314C:
    MOVZX edx, byte ptr [rcx]
    CMP dl, 2Fh
    SETZ cl
    TEST dl, dl
    SETZ al
    OR eax, ecx
loc_47315C:
    TEST al, al
    JZ loc_473170
loc_473160:
    XOR ecx, ecx
    XOR edx, edx
    MOV rdi, r13
    CALL sub_44D7F0
    TEST al, al
    JNZ loc_47317F
loc_473170:
    MOV rsi, cs:stdout
    MOV rdi, r13
    CALL _fputs_unlocked
loc_47317F:
    CMP cs:byte_7534E0, 1
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    SBB eax, eax
    AND eax, 0Ah
    CMP cs:byte_7534E0, 1
    SBB esi, esi
    AND esi, 0Ah
    CMP rdx, [rdi+30h]
    JNB loc_473260
loc_4731AC:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
loc_4731B6:
    MOV rdi, r13
    CALL _free
loc_4731BE:
    MOV eax, cs:optind
    ADD eax, 1
    CMP r12d, eax
    MOV cs:optind, eax
    JG loc_4730A0
loc_4731D6:
    MOVZX r13d, byte ptr [rsp+0E8h+ptr]
    XOR r13d, 1
    MOVZX eax, r13b
loc_4731E4:
    MOV rbx, [rsp+0E8h+var_40]
    XOR rbx, fs:28h
    JNZ loc_47341C
loc_4731FB:
    ADD rsp, 0B8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_473210:
    TEST r14, r14
    JZ loc_472F97
loc_473219:
    JMP loc_472F35
loc_473220:
    CMP byte ptr [r13+1], 2Fh
    SETNZ al
    JMP loc_47315C
loc_473230:
    CMP cs:byte_742FE9, 0
    JNZ loc_47326A
loc_473239:
    MOV byte ptr [rsp+0E8h+ptr], 0
    JMP loc_4731BE
loc_473248:
    CMP byte ptr [rdx+2], 0
    JNZ loc_473113
loc_473252:
    CMP byte ptr [r13+1], 2Fh
    SETZ al
    JMP loc_47315C
loc_473260:
    CALL ___overflow
    JMP loc_4731B6
loc_47326A:
    MOV rdx, r15
    XOR edi, edi
    MOV esi, 3
    CALL sub_4D3C20
    MOV r13, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, r13
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_473239
loc_473296:
    CMP byte ptr [r13+1], 2Fh
    SETNZ al
    JMP loc_47306D
loc_4732A3:
    LEA rdx, [rsp+0E8h+stat_buf]
    MOV rsi, rcx
    MOV edi, 1
    MOV [rsp+0E8h+var_E8], rcx
    CALL ___xstat
    TEST eax, eax
    MOV r15d, eax
    MOV rcx, [rsp+0E8h+var_E8]
    JNZ loc_473421
loc_4732C8:
    MOV eax, [rsp+0E8h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 4000h
    JZ loc_472F97
loc_4732DC:
    MOV rdx, r14
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    MOV esi, 14h
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00h]
loc_473308:
    MOV rdi, r14
    CALL _free
    MOV cs:qword_7534D0, r13
    MOV cs:qword_7534D8, 0
    JMP loc_47307C
loc_473327:
    LEA rdx, [rsp+0E8h+stat_buf]
    MOV rsi, r14
    MOV edi, 1
    CALL ___xstat
    TEST eax, eax
    JNZ loc_473429
loc_473341:
    MOV eax, [rsp+0E8h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 4000h
    JZ loc_472FFA
loc_473355:
    MOV rdx, r13
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    MOV esi, 14h
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
loc_473380:
    MOV rax, cs:qword_7534D8
    MOV cs:qword_7534D0, rax
    JMP loc_47307C
loc_473393:
    CMP byte ptr [r14+2], 0
    JNZ loc_473016
loc_47339E:
    CMP byte ptr [r13+1], 2Fh
    SETZ al
    JMP loc_47306D
loc_4733AB:
    MOV cs:qword_7534D8, 0
loc_4733B6:
    MOV rdx, r14
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00h]
loc_4733E8:
    XOR eax, eax
    JMP loc_4731E4
loc_4733EF:
    MOV rdx, r13
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_47341C:
    CALL ___stack_chk_fail
loc_473421:
    MOV rdi, rcx
    CALL sub_40695C
loc_473429:
    MOV rdi, r14
    CALL sub_40695C
    NOP word ptr [rax+rax+00000000h]
    NOP dword ptr [rax+rax+00h]
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'MemoryAccess'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0', '0x100', '0x104'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Initialization', 'inferred_category': 'Utility'}

##### Q 179 - heap_free
```assembly
loc_4A8320:
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, [rdi]
    CALL _free
    MOV rdi, rbx
    POP rbx
    JMP _free
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFh', '0x665h', '0x664h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Comparison', 'inferred_category': 'Mathematics'}

##### T 179 - heap_free
```assembly
loc_4C3EE0:
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, [rdi]
    CALL _free
    MOV rdi, rbx
    POP rbx
    JMP _free
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['1', '8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Comparison', 'inferred_category': 'Utility/Helper'}

##### Q 180 - isbase32
```assembly
loc_496F80:
    MOVZX edi, dil
    MOVZX eax, ds:byte_5042A0[rdi]
    NOT eax
    SHR al, 7
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7830', '0x3C', '0x6', '0x3', '0xF', '0x1', '0x7', '0x4', '0x5', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 180 - isbase32
```assembly
loc_4B0D30:
    MOVZX edi, dil
    MOVZX eax, ds:byte_527D40[rdi]
    NOT eax
    SHR al, 7
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7830', '0x3', '0x1', '0x78302C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Data Processing'}

##### Q 181 - _usage_tty
```assembly
loc_490E80:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_490ED6
loc_490EAA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_490ECF:
    MOV edi, ebx
    CALL _exit
loc_490ED6:
    MOV esi, offset aUsageSOption_0
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintTheFileNa
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], 4E9CF3h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 4E9CF3h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, (offset aNotATty+6)
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_490FFC
loc_490FF0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_491008
loc_490FFC:
    MOV ecx, 4
    MOV rsi, r8
    REPE 
    JNZ loc_490FF0
loc_491008:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4910D2
loc_491021:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_49106A
loc_491050:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_491156
loc_49106A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, (offset aNotATty+6)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 4E9B80h
    CALL ___printf_chk
    CMP rbp, (offset aNotATty+6)
    JZ loc_491141
loc_4910A7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_490ECF
loc_4910D2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_491117
loc_491101:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_491151
loc_491117:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, (offset aNotATty+6)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_491141:
    MOV ebp, (offset aNotATty+6)
    MOV r12d, 4C7B0Dh
    JMP loc_4910A7
loc_491151:
    MOV ebp, (offset aNotATty+6)
loc_491156:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, (offset aNotATty+6)
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_49106A
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy with Error Handling', 'inferred_category': 'Utility'}

##### T 181 - _usage_tty
```assembly
loc_4AA630:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_4AA686
loc_4AA65A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4AA67F:
    MOV edi, ebx
    CALL _exit
loc_4AA686:
    MOV esi, offset aUsageSOption_0
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintTheFileNa
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], 50CC20h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 50CC20h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, (offset aNotATty+6)
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_4AA7AC
loc_4AA7A0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_4AA7B8
loc_4AA7AC:
    MOV ecx, 4
    MOV rsi, r8
    REPE 
    JNZ loc_4AA7A0
loc_4AA7B8:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4AA882
loc_4AA7D1:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4AA81A
loc_4AA800:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4AA906
loc_4AA81A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, (offset aNotATty+6)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 50CABAh
    CALL ___printf_chk
    CMP rbp, (offset aNotATty+6)
    JZ loc_4AA8F1
loc_4AA857:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4AA67F
loc_4AA882:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4AA8C7
loc_4AA8B1:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4AA901
loc_4AA8C7:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, (offset aNotATty+6)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4AA8F1:
    MOV ebp, (offset aNotATty+6)
    MOV r12d, 4EA7ADh
    JMP loc_4AA857
loc_4AA901:
    MOV ebp, (offset aNotATty+6)
loc_4AA906:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, (offset aNotATty+6)
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4AA81A
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Copy Memory with Check', 'inferred_category': 'Memory Management'}

##### Q 182 - _obstack_memory_used
```assembly
loc_4C15C0:
    MOV rdx, [rdi+8]
    XOR eax, eax
    TEST rdx, rdx
    JZ locret_4C15E4
loc_4C15CB:
    NOP dword ptr [rax+rax+00h]
loc_4C15D0:
    MOV rcx, [rdx]
    SUB rcx, rdx
    MOV rdx, [rdx+8]
    ADD rax, rcx
    TEST rdx, rdx
    JNZ loc_4C15D0
loc_4C15E2:
    REP 
loc_4C15E4:
    REP 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x28', '0x10', '0x28', '0x10', '0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Stack Integrity Check'}

##### T 182 - _obstack_memory_used
```assembly
loc_4E4090:
    MOV rdx, [rdi+8]
    XOR eax, eax
    TEST rdx, rdx
    JZ locret_4E40B4
loc_4E409B:
    NOP dword ptr [rax+rax+00h]
loc_4E40A0:
    MOV rcx, [rdx]
    SUB rcx, rdx
    MOV rdx, [rdx+8]
    ADD rax, rcx
    TEST rdx, rdx
    JNZ loc_4E40A0
loc_4E40B2:
    REP 
loc_4E40B4:
    REP 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x14', '0x40', '0x8', '0x3F', '0x4C', '0x68', '0x78', '0x80', '0x88', '0x90', '0x98', '0xA0', '0xA8', '0xB0', '0xB8', '0xC0', '0xC8', '0xD0', '0xD4', '0xD8', '0xDC', '0xE0', '0xE4', '0xE8', '0xEC', '0xF0', '0xF4', '0xF8', '0xFC'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 32, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Copy and Modify Data', 'inferred_category': 'Utility/Helper'}

##### Q 183 - isdir
```assembly
loc_467DD0:
    PUSH rbp
    PUSH rbx
    MOV rsi, rdi
    MOV rbx, rdi
    MOV edi, 1
    SUB rsp, 0A8h
    MOV rdx, rsp
    MOV rax, fs:28h
    MOV [rsp+0B8h+var_20], rax
    XOR eax, eax
    CALL ___xstat
    TEST eax, eax
    JNZ loc_467E31
loc_467E03:
    MOV eax, [rsp+0B8h+var_A0]
    AND eax, 0F000h
    CMP eax, 4000h
    SETZ al
    MOV rcx, [rsp+0B8h+var_20]
    XOR rcx, fs:28h
    JNZ loc_467E6E
loc_467E27:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    RETN 
loc_467E31:
    MOV rsi, rbx
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aCannotStatS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_467E6E:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6', '0xFFFFFFFF', '0xF', '0x2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Binary Search', 'inferred_category': 'Search'}

##### T 183 - isdir
```assembly
loc_40695C:
    PUSH rbp
    PUSH rbx
    MOV rsi, rdi
    PUSH rax
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aCannotStatS
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x0F', '0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation', 'inferred_category': 'Utility/Helper'}

##### Q 184 - sha256_stream
```assembly
loc_49DC20:
    PUSH r14
    PUSH r13
    MOV r14, rsi
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV edi, 8048h
    SUB rsp, 0C0h
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_30], rax
    XOR eax, eax
    CALL _malloc
    TEST rax, rax
    JZ loc_49DD6F
loc_49DC5B:
    MOV r12, rax
    MOV [rsp+0E8h+var_E8], 6A09E667h
    MOV [rsp+0E8h+var_E4], 0BB67AE85h
    MOV [rsp+0E8h+var_E0], 3C6EF372h
    MOV [rsp+0E8h+var_DC], 0A54FF53Ah
    MOV [rsp+0E8h+var_D8], 510E527Fh
    MOV [rsp+0E8h+var_D4], 9B05688Ch
    MOV [rsp+0E8h+var_D0], 1F83D9ABh
    MOV [rsp+0E8h+var_CC], 5BE0CD19h
    MOV [rsp+0E8h+var_C4], 0
    MOV [rsp+0E8h+var_C8], 0
    MOV [rsp+0E8h+var_C0], 0
loc_49DCB6:
    XOR ebx, ebx
    MOV r13d, 8000h
    JMP loc_49DCCB
loc_49DCC0:
    TEST rax, rax
    JZ loc_49DD00
loc_49DCC5:
    TEST byte ptr [rbp+0], 10h
    JNZ loc_49DD06
loc_49DCCB:
    LEA rdi, [r12+rbx]
    MOV rdx, r13
    MOV rcx, rbp
    SUB rdx, rbx
    MOV esi, 1
    CALL _fread_unlocked
    ADD rbx, rax
    CMP rbx, 8000h
    JNZ loc_49DCC0
loc_49DCEE:
    MOV rdx, rsp
    MOV esi, 8000h
    MOV rdi, r12
    CALL sub_49ACC0
    JMP loc_49DCB6
loc_49DD00:
    TEST byte ptr [rbp+0], 20h
    JNZ loc_49DD60
loc_49DD06:
    TEST rbx, rbx
    JNZ loc_49DD50
loc_49DD0B:
    MOV rdi, rsp
    CALL sub_49D710
    MOV rsi, r14
    MOV rdi, rsp
    CALL sub_49AC80
    MOV rdi, r12
    CALL _free
    XOR eax, eax
loc_49DD28:
    MOV rcx, [rsp+0E8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_49DD76
loc_49DD3B:
    ADD rsp, 0C0h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_49DD50:
    MOV rdx, rsp
    MOV rsi, rbx
    MOV rdi, r12
    CALL sub_49D830
    JMP loc_49DD0B
loc_49DD60:
    MOV rdi, r12
    CALL _free
    MOV eax, 1
    JMP loc_49DD28
loc_49DD6F:
    MOV eax, 1
    JMP loc_49DD28
loc_49DD76:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x30', '0x28', '0x1C', '0x10', '0x7', '0x18', '0x10', '0x8', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing or Comparison', 'inferred_category': 'Utility/Helper'}

##### T 184 - sha256_stream
```assembly
loc_4B8260:
    PUSH r14
    PUSH r13
    MOV r14, rsi
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV edi, 8048h
    SUB rsp, 0C0h
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_30], rax
    XOR eax, eax
    CALL _malloc
    TEST rax, rax
    JZ loc_4B8402
loc_4B829B:
    MOV r12, rax
    MOV [rsp+0E8h+var_E8], 6A09E667h
    MOV [rsp+0E8h+var_E4], 0BB67AE85h
    MOV [rsp+0E8h+var_E0], 3C6EF372h
    MOV [rsp+0E8h+var_DC], 0A54FF53Ah
    MOV [rsp+0E8h+var_D8], 510E527Fh
    MOV [rsp+0E8h+var_D4], 9B05688Ch
    MOV [rsp+0E8h+var_D0], 1F83D9ABh
    MOV [rsp+0E8h+var_CC], 5BE0CD19h
    MOV [rsp+0E8h+var_C4], 0
    MOV [rsp+0E8h+var_C8], 0
    MOV [rsp+0E8h+var_C0], 0
loc_4B82F6:
    XOR ebx, ebx
    MOV r13d, 8000h
    JMP loc_4B830B
loc_4B8300:
    TEST rax, rax
    JZ loc_4B8340
loc_4B8305:
    TEST byte ptr [rbp+0], 10h
    JNZ loc_4B834A
loc_4B830B:
    LEA rdi, [r12+rbx]
    MOV rdx, r13
    MOV rcx, rbp
    SUB rdx, rbx
    MOV esi, 1
    CALL _fread_unlocked
    ADD rbx, rax
    CMP rbx, 8000h
    JNZ loc_4B8300
loc_4B832E:
    MOV rdx, rsp
    MOV esi, 8000h
    MOV rdi, r12
    CALL sub_4B5430
    JMP loc_4B82F6
loc_4B8340:
    TEST byte ptr [rbp+0], 20h
    JNZ loc_4B83F3
loc_4B834A:
    TEST rbx, rbx
    JNZ loc_4B83E0
loc_4B8353:
    MOV rdi, rsp
    CALL sub_4B7E70
    MOV eax, [rsp+0E8h+var_E8]
    MOV rdi, r12
    BSWAP eax
    MOV [r14], eax
    MOV eax, [rsp+0E8h+var_E4]
    BSWAP eax
    MOV [r14+4], eax
    MOV eax, [rsp+0E8h+var_E0]
    BSWAP eax
    MOV [r14+8], eax
    MOV eax, [rsp+0E8h+var_DC]
    BSWAP eax
    MOV [r14+0Ch], eax
    MOV eax, [rsp+0E8h+var_D8]
    BSWAP eax
    MOV [r14+10h], eax
    MOV eax, [rsp+0E8h+var_D4]
    BSWAP eax
    MOV [r14+14h], eax
    MOV eax, [rsp+0E8h+var_D0]
    BSWAP eax
    MOV [r14+18h], eax
    MOV eax, [rsp+0E8h+var_CC]
    BSWAP eax
    MOV [r14+1Ch], eax
    CALL _free
    XOR eax, eax
loc_4B83B3:
    MOV rcx, [rsp+0E8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_4B8409
loc_4B83C6:
    ADD rsp, 0C0h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4B83E0:
    MOV rdx, rsp
    MOV rsi, rbx
    MOV rdi, r12
    CALL sub_4B7FF0
    JMP loc_4B8353
loc_4B83F3:
    MOV rdi, r12
    CALL _free
    MOV eax, 1
    JMP loc_4B83B3
loc_4B8402:
    MOV eax, 1
    JMP loc_4B83B3
loc_4B8409:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1', '0x28', '0x3', '0x7', '0xB', '0xF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing/Checksumming', 'inferred_category': 'Utility/Helper'}

##### Q 185 - xgetcwd
```assembly
loc_4BB610:
    PUSH rbx
    XOR esi, esi
    XOR edi, edi
    CALL _getcwd
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4BB630
loc_4BB622:
    MOV rax, rbx
    POP rbx
    RETN 
loc_4BB630:
    CALL ___errno_location
    CMP dword ptr [rax], 0Ch
    JNZ loc_4BB622
loc_4BB63A:
    CALL sub_429BE0
```
{'input_parameter_count': 4, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x200', '0xFFFFFFFFFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Formatting and Handling', 'inferred_category': 'Utility Function'}

##### T 185 - xgetcwd
```assembly
loc_4DD280:
    PUSH rbx
    XOR esi, esi
    XOR edi, edi
    CALL _getcwd
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4DD2A0
loc_4DD292:
    MOV rax, rbx
    POP rbx
    RETN 
loc_4DD2A0:
    CALL ___errno_location
    CMP dword ptr [rax], 0Ch
    JNZ loc_4DD292
loc_4DD2AA:
    CALL sub_42C250
```
{'input_parameter_count': 4, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'MemoryAllocation', 'ErrorHandling'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x200', '0x7FFFFFFF', '0x193', '0x18'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Concatenation with Realloc', 'inferred_category': 'Utility Function'}

##### Q 186 - process_dir
```assembly
loc_43DC60:
    MOV eax, cs:group
    PUSH rbx
    MOV rcx, rdx
    PUSH 0
    MOV r8d, cs:dword_71FD0C
    MOV rbx, rdx
    MOV r9d, offset sub_43DD10
    MOV edx, offset sub_43DD30
    PUSH rax
    MOV eax, cs:owner
    PUSH rax
    MOV eax, cs:dword_71FD08
    PUSH rax
    CALL sub_4AB520
    ADD rsp, 20h
    TEST al, al
    JNZ loc_43DCA8
loc_43DC9D:
    MOV eax, 1
    POP rbx
    RETN 
loc_43DCA8:
    CMP byte ptr [rbx+21h], 0
    JZ loc_43DCC0
loc_43DCAE:
    CALL ___errno_location
    MOV dword ptr [rax], 5Fh
    XOR eax, eax
    POP rbx
    RETN 
loc_43DCC0:
    XOR eax, eax
    POP rbx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x18h+var_14', '0x18h+var_10', '0x28h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/StackCanary'}

##### T 186 - process_dir
```assembly
loc_4435F0:
    MOV eax, cs:group
    PUSH rbx
    MOV rcx, rdx
    PUSH 0
    MOV r8d, cs:dword_742D0C
    MOV rbx, rdx
    MOV r9d, offset sub_443D70
    MOV edx, offset sub_443660
    PUSH rax
    MOV eax, cs:owner
    PUSH rax
    MOV eax, cs:dword_742D08
    PUSH rax
    CALL sub_4C7A40
    ADD rsp, 20h
    TEST al, al
    JNZ loc_443638
loc_44362D:
    MOV eax, 1
    POP rbx
    RETN 
loc_443638:
    CMP byte ptr [rbx+21h], 0
    JZ loc_443650
loc_44363E:
    CALL ___errno_location
    MOV dword ptr [rax], 5Fh
    XOR eax, eax
    POP rbx
    RETN 
loc_443650:
    XOR eax, eax
    POP rbx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x18'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/StackCanary'}

##### Q 187 - _usage_df
```assembly
loc_412060:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_4120B6
loc_41208A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4120AF:
    MOV edi, ebx
    CALL _exit
loc_4120B6:
    XOR edi, edi
    MOV esi, offset aUsageSOptionFi_1
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aShowInformatio
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aMandatoryArgum
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aAAllIncludePse
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aIInodesListIno
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aOutputFieldLis
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTotalElideAllE
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTTypeTypeLimit
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aHelpDisplayThi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aVersionOutputV
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aDisplayValuesA
    XOR edi, edi
    CALL _dcgettext
    MOV edx, offset aDf
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheSizeArgumen
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aFieldListIsACo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aDf_0
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_41231C
loc_412310:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_412328
loc_41231C:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_412310
loc_412328:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4123F2
loc_412341:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_41238A
loc_412370:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_412476
loc_41238A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aDf_0
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aDf_0
    JZ loc_412461
loc_4123C7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4120AF
loc_4123F2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_412437
loc_412421:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_412471
loc_412437:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aDf_0
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_412461:
    MOV ebp, offset aDf_0
    MOV r12d, 4C7B0Dh
    JMP loc_4123C7
loc_412471:
    MOV ebp, offset aDf_0
loc_412476:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aDf_0
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41238A
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'User Authentication', 'inferred_category': 'Security'}

##### T 187 - _usage_df
```assembly
loc_412680:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_4126D6
loc_4126AA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4126CF:
    MOV edi, ebx
    CALL _exit
loc_4126D6:
    XOR edi, edi
    MOV esi, offset aUsageSOptionFi_1
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aShowInformatio
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aMandatoryArgum
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aAAllIncludePse
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aIInodesListIno
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aOutputFieldLis
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTotalElideAllE
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTTypeTypeLimit
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aHelpDisplayThi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aVersionOutputV
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aDisplayValuesA
    XOR edi, edi
    CALL _dcgettext
    MOV edx, offset aDf
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheSizeArgumen
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aFieldListIsACo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_50CC1F+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_50CC1F+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, (offset aUdf+1)
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_41293C
loc_412930:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_412948
loc_41293C:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_412930
loc_412948:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_412A12
loc_412961:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4129AA
loc_412990:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_412A96
loc_4129AA:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, (offset aUdf+1)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, (offset aUdf+1)
    JZ loc_412A81
loc_4129E7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4126CF
loc_412A12:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_412A57
loc_412A41:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_412A91
loc_412A57:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, (offset aUdf+1)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_412A81:
    MOV ebp, (offset aUdf+1)
    MOV r12d, 4EA7ADh
    JMP loc_4129E7
loc_412A91:
    MOV ebp, (offset aUdf+1)
loc_412A96:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, (offset aUdf+1)
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4129AA
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'User Authentication', 'inferred_category': 'Security'}

##### Q 188 - rpl_mbrtowc
```assembly
loc_4C09A0:
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV r12, rdx
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
    LEA rax, [rsp+38h+pwc]
    TEST rdi, rdi
    CMOVZ rbx, rax
    MOV rdi, rbx
    CALL _mbrtowc
    CMP rax, 0FFFFFFFFFFFFFFFDh
    MOV rbp, rax
    JBE loc_4C0A08
loc_4C09E0:
    TEST r12, r12
    JZ loc_4C0A08
loc_4C09E5:
    XOR edi, edi
    CALL sub_4A6E90
    MOV edx, eax
    MOV rax, rbp
    TEST dl, dl
    JNZ loc_4C0A0B
loc_4C09F5:
    MOVZX eax, byte ptr [r13+0]
    MOV [rbx], eax
    MOV eax, 1
    JMP loc_4C0A0B
loc_4C0A08:
    MOV rax, rbp
loc_4C0A0B:
    MOV rsi, [rsp+38h+var_30]
    XOR rsi, fs:28h
    JNZ loc_4C0A26
loc_4C0A1B:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4C0A26:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Unknown'], 'return_value_type': 'Unknown', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Comparison', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 17, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Data Manipulation', 'inferred_category': 'Complex System Call or Subroutine'}

##### T 188 - rpl_mbrtowc
```assembly
loc_4E33F0:
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV r12, rdx
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
    LEA rax, [rsp+38h+pwc]
    TEST rdi, rdi
    CMOVZ rbx, rax
    MOV rdi, rbx
    CALL _mbrtowc
    CMP rax, 0FFFFFFFFFFFFFFFDh
    MOV rbp, rax
    JBE loc_4E3458
loc_4E3430:
    TEST r12, r12
    JZ loc_4E3458
loc_4E3435:
    XOR edi, edi
    CALL sub_4C25E0
    MOV edx, eax
    MOV rax, rbp
    TEST dl, dl
    JNZ loc_4E345B
loc_4E3445:
    MOVZX eax, byte ptr [r13+0]
    MOV [rbx], eax
    MOV eax, 1
    JMP loc_4E345B
loc_4E3458:
    MOV rax, rbp
loc_4E345B:
    MOV rsi, [rsp+38h+var_30]
    XOR rsi, fs:28h
    JNZ loc_4E3476
loc_4E346B:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4E3476:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 13, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x100', '0x28', '0x1', '0x7', '0x40'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 189 - set_initialize
```assembly
loc_48D440:
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    MOV ebp, esi
    PUSH rbx
    MOV rbx, rdx
    MOV qword ptr [rdi+10h], 0FFFFFFFFFFFFFFFEh
    JMP loc_48D466
loc_48D460:
    CDQE 
    MOV byte ptr [rbx+rax], 1
loc_48D466:
    XOR esi, esi
    MOV rdi, r12
    CALL sub_48D030
    CMP eax, 0FFFFFFFFh
    JNZ loc_48D460
loc_48D475:
    TEST bpl, bpl
    MOV rdx, rbx
    LEA rax, [rbx+100h]
    JZ loc_48D494
loc_48D484:
    NOP dword ptr [rax+00h]
loc_48D488:
    XOR byte ptr [rdx], 1
    ADD rdx, 1
    CMP rdx, rax
    JNZ loc_48D488
loc_48D494:
    POP rbx
    POP rbp
    POP r12
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3Ch', '0x30h', '0x4', '0x40h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 189 - set_initialize
```assembly
loc_4A3880:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, 0FFFFFFFFFFFFFFFEh
    MOV rbx, rdx
    SUB rsp, 18h
    CMP rbp, 0FFFFFFFFFFFFFFFEh
    MOV qword ptr [rdi+10h], 0FFFFFFFFFFFFFFFEh
    MOV [rsp+48h+var_40], esi
    JZ loc_4A38F7
loc_4A38AD:
    MOV r14, [r15+8]
loc_4A38B1:
    TEST r14, r14
    JZ loc_4A39C5
loc_4A38BA:
    CMP dword ptr [r14], 4
    JA def_4A38C7
loc_4A38C4:
    MOV eax, [r14]
    JMP ds:jpt_4A38C7[rax*8]
loc_4A38D0:
    MOV rax, [r14+8]
    MOVZX r12d, byte ptr [r14+10h]
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    MOV qword ptr [r15+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r15+8], rax
loc_4A38EC:
    CMP rbp, 0FFFFFFFFFFFFFFFEh
    MOV byte ptr [rbx+r12], 1
    JNZ loc_4A38AD
loc_4A38F7:
    MOV rax, [r15]
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    MOV r14, [rax+8]
    MOV qword ptr [r15+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r15+8], r14
    JMP loc_4A38B1
loc_4A3918:
    CMP qword ptr [r14+18h], 0
    JNZ loc_4A3C3D
loc_4A3923:
    MOV rax, [r14+8]
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    MOV qword ptr [r15+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r15+8], rax
    JMP loc_4A38AD
loc_4A3940:
    CMP rbp, 0FFFFFFFFFFFFFFFFh
    JZ loc_4A3BD0
loc_4A394A:
    MOV r13d, [r14+10h]
    MOVZX esi, bpl
    MOV edi, r13d
    CALL sub_4A2530
    TEST al, al
    JZ loc_4A3C7D
loc_4A3962:
    LEA r12d, [rbp+1]
    MOV [rsp+48h+var_3C], ebp
    CMP r12d, 0FFh
    JG loc_4A3A35
loc_4A3977:
    NOP word ptr [rax+rax+00000000h]
loc_4A3980:
    CMP r13d, 0Bh
    MOVZX ebp, r12b
    JA def_4A38C7
loc_4A398A:
    MOV eax, r13d
    JMP ds:jpt_4A398D[rax*8]
loc_4A3998:
    CMP rbp, 0FFFFFFFFFFFFFFFFh
    JZ loc_4A3BC0
loc_4A39A2:
    ADD rbp, 1
loc_4A39A6:
    MOV [r15+10h], rbp
    MOVZX eax, byte ptr [r14+11h]
    MOVSXD r12, ebp
    CMP rax, rbp
    JZ loc_4A3C08
loc_4A39BB:
    CMP r12d, 0FFFFFFFFh
    JNZ loc_4A38EC
loc_4A39C5:
    CMP byte ptr [rsp+48h+var_40], 0
    MOV rdx, rbx
    LEA rax, [rbx+100h]
    JZ loc_4A39EC
loc_4A39D6:
    NOP word ptr [rax+rax+00000000h]
loc_4A39E0:
    XOR byte ptr [rdx], 1
    ADD rdx, 1
    CMP rax, rdx
    JNZ loc_4A39E0
loc_4A39EC:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4A3A00:
    CALL _abort
loc_4A3A08:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 100h
    MOVZX eax, ax
    NOP dword ptr [rax+rax+00h]
loc_4A3A20:
    TEST eax, eax
    JNZ loc_4A3A80
loc_4A3A24:
    ADD r12d, 1
    CMP r12d, 100h
    JNZ loc_4A3980
loc_4A3A35:
    MOV rax, [r14+8]
    MOVSXD r12, [rsp+48h+var_3C]
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    MOV qword ptr [r15+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r15+8], rax
    JMP loc_4A39BB
loc_4A3A60:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 2000h
    MOVZX eax, ax
    TEST eax, eax
    JZ loc_4A3A24
loc_4A3A77:
    NOP word ptr [rax+rax+00000000h]
loc_4A3A80:
    MOVSXD rbp, r12d
    MOVSXD r12, [rsp+48h+var_3C]
    MOV [r15+10h], rbp
    JMP loc_4A39BB
loc_4A3A98:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND eax, 4
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3AB0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 4000h
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3AD0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 200h
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3AF0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 8000h
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3B10:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 800h
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3B30:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND eax, 2
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3B50:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND eax, 1
    JMP loc_4A3A20
loc_4A3B68:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 400h
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3B80:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND eax, 8
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3BA0:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    MOVZX eax, word ptr [rax+rbp*2]
    AND ax, 1000h
    MOVZX eax, ax
    JMP loc_4A3A20
loc_4A3BC0:
    MOVZX ebp, byte ptr [r14+10h]
    JMP loc_4A39A6
loc_4A3BD0:
    MOV r12d, [r14+10h]
    XOR ebp, ebp
    JMP loc_4A3BEB
loc_4A3BE0:
    ADD ebp, 1
    CMP ebp, 100h
    JZ loc_4A3C24
loc_4A3BEB:
    MOV esi, ebp
    MOV edi, r12d
    CALL sub_4A2530
    TEST al, al
    JZ loc_4A3BE0
loc_4A3BF9:
    MOVSXD rbp, ebp
    MOV [r15+10h], rbp
    JMP loc_4A394A
loc_4A3C08:
    MOV rax, [r14+8]
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    MOV qword ptr [r15+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r15+8], rax
    JMP loc_4A39BB
loc_4A3C24:
    MOV ecx, offset aGetNext
    MOV edx, 434h
    MOV esi, offset aSrcTrC
    MOV edi, offset aINChars
    CALL ___assert_fail
loc_4A3C3D:
    LEA rax, [rbp+1]
    CMP rbp, 0FFFFFFFFFFFFFFFFh
    MOV ebp, 1
    CMOVNZ rbp, rax
    MOV [r15+10h], rbp
    CMP [r14+18h], rbp
    MOVZX r12d, byte ptr [r14+10h]
    JNZ loc_4A38EC
loc_4A3C61:
    MOV rax, [r14+8]
    MOV rbp, 0FFFFFFFFFFFFFFFFh
    MOV qword ptr [r15+10h], 0FFFFFFFFFFFFFFFFh
    MOV [r15+8], rax
    JMP loc_4A38EC
loc_4A3C7D:
    MOV ecx, offset aGetNext
    MOV edx, 437h
    MOV esi, offset aSrcTrC
    MOV edi, offset aIsCharClassMem
    CALL ___assert_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3Ch', '0x30h', '0x4', '0x40h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 190 - ino_hash
```assembly
loc_4A96D0:
    MOV rax, [rdi]
    XOR edx, edx
    DIV rsi
    MOV rax, rdx
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'Comparison', 'ControlFlow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bitwise Reversal', 'inferred_category': 'Data Manipulation'}

##### T 190 - ino_hash
```assembly
loc_4C5660:
    MOV rax, [rdi]
    XOR edx, edx
    DIV rsi
    MOV rax, rdx
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ControlFlow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['3'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 1, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bitwise Reversal', 'inferred_category': 'Data Manipulation'}

##### Q 191 - posix2_version
```assembly
loc_4B2B10:
    PUSH rbx
    MOV edi, offset aPosix2Version
    MOV ebx, 31069h
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CALL _getenv
    TEST rax, rax
    JZ loc_4B2B3E
loc_4B2B39:
    CMP byte ptr [rax], 0
    JNZ loc_4B2B60
loc_4B2B3E:
    MOV rcx, [rsp+18h+var_10]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_4B2B97
loc_4B2B50:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_4B2B60:
    MOV edx, 0Ah
    MOV rsi, rsp
    MOV rdi, rax
    CALL _strtol
    MOV rdx, [rsp+18h+var_18]
    CMP byte ptr [rdx], 0
    JNZ loc_4B2B3E
loc_4B2B79:
    CMP rax, 0FFFFFFFF80000000h
    MOV ebx, 80000000h
    JL loc_4B2B3E
loc_4B2B86:
    CMP rax, 7FFFFFFFh
    MOV ebx, 7FFFFFFFh
    CMOVLE rbx, rax
    JMP loc_4B2B3E
loc_4B2B97:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x641E20', '0x1', '0x3F', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'IO'}

##### T 191 - posix2_version
```assembly
loc_4D0170:
    PUSH rbx
    MOV edi, offset aPosix2Version
    MOV ebx, 31069h
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CALL _getenv
    TEST rax, rax
    JZ loc_4D019E
loc_4D0199:
    CMP byte ptr [rax], 0
    JNZ loc_4D01C0
loc_4D019E:
    MOV rcx, [rsp+18h+var_10]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_4D01F7
loc_4D01B0:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_4D01C0:
    MOV edx, 0Ah
    MOV rsi, rsp
    MOV rdi, rax
    CALL _strtol
    MOV rdx, [rsp+18h+var_18]
    CMP byte ptr [rdx], 0
    JNZ loc_4D019E
loc_4D01D9:
    CMP rax, 0FFFFFFFF80000000h
    MOV ebx, 80000000h
    JL loc_4D019E
loc_4D01E6:
    CMP rax, 7FFFFFFFh
    MOV ebx, 7FFFFFFFh
    CMOVLE rbx, rax
    JMP loc_4D019E
loc_4D01F7:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0', '0x3F', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop with conditional execution', 'inferred_category': 'Control Flow'}

##### Q 192 - single_binary_main_expr
```assembly
loc_438670:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 28h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+38h+var_20], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    MOV cs:dword_720158, 3
    CALL sub_4C78D0
    PUSH 0
    PUSH offset aPaulEggert
    XOR eax, eax
    PUSH offset aJamesYoungman
    PUSH offset aMikeParker
    MOV r9d, offset sub_438240
    MOV r8d, offset a82814856b8
    MOV ecx, offset unk_4C7B3F
    MOV edx, offset aExpr
    MOV rsi, rbx
    MOV edi, ebp
    CALL sub_4A9D20
    ADD rsp, 20h
    CMP ebp, 1
    JBE loc_4387A1
loc_43870F:
    MOV rax, [rbx+8]
    CMP byte ptr [rax], 2Dh
    JZ loc_438788
loc_438718:
    ADD rbx, 8
    MOV edi, 1
    MOV cs:qword_7212A8, rbx
    CALL sub_438190
    MOV rbx, rax
    MOV rax, cs:qword_7212A8
    MOV rdx, [rax]
    TEST rdx, rdx
    JNZ loc_43882F
loc_438743:
    MOV eax, [rbx]
    TEST eax, eax
    JZ loc_4387D8
loc_43874D:
    CMP eax, 1
    JNZ loc_4387D0
loc_438752:
    MOV rdi, [rbx+8]
    CALL _puts
loc_43875B:
    MOV rdi, rbx
    CALL sub_436B60
    MOV rcx, [rsp+38h+var_20]
    XOR rcx, fs:28h
    MOVZX eax, al
    JNZ loc_438863
loc_43877A:
    ADD rsp, 28h
    POP rbx
    POP rbp
    RETN 
loc_438788:
    CMP byte ptr [rax+1], 2Dh
    JNZ loc_438718
loc_43878E:
    CMP byte ptr [rax+2], 0
    JNZ loc_438718
loc_438794:
    ADD rbx, 8
    CMP ebp, 2
    JNZ loc_438718
loc_4387A1:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR edi, edi
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    CALL _error
    MOV edi, 2
    CALL sub_438240
loc_4387D0:
    CALL _abort
loc_4387D8:
    MOV rbp, cs:stdout
    MOV rdi, [rbx+8]
    MOV rsi, rsp
    CALL sub_4A9810
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_438820
loc_438807:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    JMP loc_43875B
loc_438820:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_43875B
loc_43882F:
    MOV esi, 8
    XOR edi, edi
    CALL sub_4B5040
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSyntaxErrorUne_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 2
    XOR eax, eax
    CALL _error
loc_438863:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20', '0x2', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### T 192 - single_binary_main_expr
```assembly
loc_43C8F0:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    SUB rsp, 28h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+38h+var_20], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    MOV cs:dword_743158, 3
    CALL sub_4EA570
    PUSH 0
    PUSH offset aPaulEggert
    XOR eax, eax
    PUSH offset aJamesYoungman
    PUSH offset aMikeParker
    MOV r9d, offset sub_439FA0
    MOV r8d, offset a82814856b8
    MOV ecx, offset unk_4EA7DF
    MOV edx, offset aExpr
    MOV rsi, rbx
    MOV edi, ebp
    CALL sub_4C5DA0
    ADD rsp, 20h
    CMP ebp, 1
    JBE loc_43CA71
loc_43C98F:
    MOV rax, [rbx+8]
    CMP byte ptr [rax], 2Dh
    JZ loc_43CA50
loc_43C99C:
    ADD rbx, 8
    MOV edi, 1
    MOV cs:qword_744288, rbx
    CALL sub_43AF10
    MOV rbx, rax
    MOV rax, cs:qword_744288
    MOV rdx, [rax]
    TEST rdx, rdx
    JNZ loc_43CB1C
loc_43C9C7:
    MOV eax, [rbx]
    TEST eax, eax
    JZ loc_43CAA0
loc_43C9D1:
    CMP eax, 1
    JNZ loc_43CA48
loc_43C9D6:
    MOV rdi, [rbx+8]
    CALL _puts
loc_43C9DF:
    MOV eax, [rbx]
    TEST eax, eax
    JZ loc_43CAE4
loc_43C9E9:
    CMP eax, 1
    JNZ loc_43CA48
loc_43C9EE:
    MOV rdx, [rbx+8]
    MOV eax, 1
    MOVZX ecx, byte ptr [rdx]
    TEST cl, cl
    JZ loc_43CA28
loc_43C9FE:
    XOR eax, eax
    CMP cl, 2Dh
    SETZ al
    ADD rax, rdx
    JMP loc_43CA1D
loc_43CA10:
    ADD rax, 1
    CMP byte ptr [rax], 0
    JZ loc_43CAF8
loc_43CA1D:
    CMP byte ptr [rax], 30h
    JZ loc_43CA10
loc_43CA22:
    XOR eax, eax
    NOP dword ptr [rax+00h]
loc_43CA28:
    MOV rcx, [rsp+38h+var_20]
    XOR rcx, fs:28h
    JNZ loc_43CB17
loc_43CA3C:
    ADD rsp, 28h
    POP rbx
    POP rbp
    RETN 
loc_43CA48:
    CALL _abort
loc_43CA50:
    CMP byte ptr [rax+1], 2Dh
    JNZ loc_43C99C
loc_43CA5A:
    CMP byte ptr [rax+2], 0
    JNZ loc_43C99C
loc_43CA64:
    ADD rbx, 8
    CMP ebp, 2
    JNZ loc_43C99C
loc_43CA71:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR edi, edi
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    CALL _error
    MOV edi, 2
    CALL sub_439FA0
loc_43CAA0:
    MOV rbp, cs:stdout
    MOV rdi, [rbx+8]
    MOV rsi, rsp
    CALL sub_4C57A0
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_43CB08
loc_43CACF:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    MOV eax, [rbx]
    TEST eax, eax
    JNZ loc_43C9E9
loc_43CAE4:
    XOR eax, eax
    CMP qword ptr [rbx+8], 0
    SETZ al
    JMP loc_43CA28
loc_43CAF8:
    MOV eax, 1
    JMP loc_43CA28
loc_43CB08:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_43C9DF
loc_43CB17:
    CALL ___stack_chk_fail
loc_43CB1C:
    MOV esi, 8
    XOR edi, edi
    CALL sub_4D2AF0
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSyntaxErrorUne_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 2
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 193 - _usage_pinky
```assembly
loc_40D150:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_40D1A6
loc_40D17A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_40D19F:
    MOV edi, ebx
    CALL _exit
loc_40D1A6:
    MOV esi, offset aUsageSOptionUs
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aLProduceLongFo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aFOmitTheLineOf
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aALightweightFi
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aVarRunUtmp
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aPinky
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_40D314
loc_40D308:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_40D320
loc_40D314:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_40D308
loc_40D320:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_40D3EA
loc_40D339:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_40D382
loc_40D368:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_40D46E
loc_40D382:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aPinky
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aPinky
    JZ loc_40D459
loc_40D3BF:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_40D19F
loc_40D3EA:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_40D42F
loc_40D419:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_40D469
loc_40D42F:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aPinky
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_40D459:
    MOV ebp, offset aPinky
    MOV r12d, 4C7B0Dh
    JMP loc_40D3BF
loc_40D469:
    MOV ebp, offset aPinky
loc_40D46E:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aPinky
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_40D382
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Cleanup', 'inferred_category': 'Memory Management'}

##### T 193 - _usage_pinky
```assembly
loc_40D5E0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_40D636
loc_40D60A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_40D62F:
    MOV edi, ebx
    CALL _exit
loc_40D636:
    MOV esi, offset aUsageSOptionUs
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aLProduceLongFo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aFOmitTheLineOf
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aALightweightFi
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aVarRunUtmp
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], (offset asc_50CC1F+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_50CC1F+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aPinky
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_40D7A4
loc_40D798:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_40D7B0
loc_40D7A4:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_40D798
loc_40D7B0:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_40D87A
loc_40D7C9:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_40D812
loc_40D7F8:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_40D8FE
loc_40D812:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aPinky
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aPinky
    JZ loc_40D8E9
loc_40D84F:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_40D62F
loc_40D87A:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_40D8BF
loc_40D8A9:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_40D8F9
loc_40D8BF:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aPinky
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_40D8E9:
    MOV ebp, offset aPinky
    MOV r12d, 4EA7ADh
    JMP loc_40D84F
loc_40D8F9:
    MOV ebp, offset aPinky
loc_40D8FE:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aPinky
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_40D812
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Deallocation Loop', 'inferred_category': 'Memory Management'}

##### Q 194 - sha256_conclude_ctx
```assembly
loc_49ACC0:

loc_49D710:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rdx, [rdi+28h]
    MOV rbx, rdi
    MOV ecx, [rdi+20h]
    CMP rdx, 38h
    SBB rbp, rbp
    AND rbp, 0FFFFFFFFFFFFFFC0h
    SUB rbp, 0FFFFFFFFFFFFFF80h
    CMP rdx, 38h
    SBB rsi, rsi
    AND rsi, 0FFFFFFFFFFFFFFF0h
    ADD rsi, 1Fh
    CMP rdx, 38h
    SBB rax, rax
    ADD ecx, edx
    AND rax, 0FFFFFFFFFFFFFFF0h
    MOV [rdi+20h], ecx
    MOV edi, ecx
    ADD rax, 1Eh
    CMP rdx, rdi
    MOV edi, [rbx+24h]
    JBE loc_49D760
loc_49D75A:
    ADD edi, 1
    MOV [rbx+24h], edi
loc_49D760:
    MOV r8d, ecx
    SHL edi, 3
    LEA r12, [rbx+30h]
    SHR r8d, 1Dh
    OR edi, r8d
    BSWAP edi
    MOV [rbx+rax*4+30h], edi
    LEA eax, ds:0[rcx*8]
    SHL ecx, 1Bh
    MOV edi, eax
    SHR edi, 18h
    OR ecx, edi
    MOV edi, eax
    SHR eax, 8
    AND edi, 0FF00h
    AND eax, 0FF00h
    SHL edi, 8
    OR ecx, edi
    LEA rdi, [r12+rdx]
    OR eax, ecx
    MOV [rbx+rsi*4+30h], eax
    MOV rax, rbp
    MOV esi, offset unk_504580
    SUB rax, rdx
    LEA rdx, [rax-8]
    CALL _memcpy
    MOV rdx, rbx
    MOV rsi, rbp
    MOV rdi, r12
    POP rbx
    POP rbp
    POP r12
    JMP sub_49ACC0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1', '0x110', '0x2B', '0x29', '0x3A', '0x42E3F3', '0x23FF880000000000', '0x41', '0x19', '0x3D'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'File Handling'}

##### T 194 - sha256_conclude_ctx
```assembly
loc_4B5430:

loc_4B7E70:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rdx, [rdi+28h]
    MOV rbx, rdi
    MOV ecx, [rdi+20h]
    CMP rdx, 38h
    SBB rbp, rbp
    AND rbp, 0FFFFFFFFFFFFFFC0h
    SUB rbp, 0FFFFFFFFFFFFFF80h
    CMP rdx, 38h
    SBB rsi, rsi
    AND rsi, 0FFFFFFFFFFFFFFF0h
    ADD rsi, 1Fh
    CMP rdx, 38h
    SBB rax, rax
    ADD ecx, edx
    AND rax, 0FFFFFFFFFFFFFFF0h
    MOV [rdi+20h], ecx
    MOV edi, ecx
    ADD rax, 1Eh
    CMP rdx, rdi
    MOV edi, [rbx+24h]
    JBE loc_4B7EC0
loc_4B7EBA:
    ADD edi, 1
    MOV [rbx+24h], edi
loc_4B7EC0:
    MOV r8d, ecx
    SHL edi, 3
    LEA r12, [rbx+30h]
    SHR r8d, 1Dh
    OR edi, r8d
    BSWAP edi
    MOV [rbx+rax*4+30h], edi
    LEA eax, ds:0[rcx*8]
    SHL ecx, 1Bh
    MOV edi, eax
    SHR edi, 18h
    OR ecx, edi
    MOV edi, eax
    SHR eax, 8
    AND edi, 0FF00h
    AND eax, 0FF00h
    SHL edi, 8
    OR ecx, edi
    LEA rdi, [r12+rdx]
    OR eax, ecx
    MOV [rbx+rsi*4+30h], eax
    MOV rax, rbp
    MOV esi, offset unk_528040
    SUB rax, rdx
    LEA rdx, [rax-8]
    CALL _memcpy
    MOV rdx, rbx
    MOV rsi, rbp
    MOV rdi, r12
    POP rbx
    POP rbp
    POP r12
    JMP sub_4B5430
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 12, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2B', '0x29', '0x3A', '0x5Ch'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### Q 195 - single_binary_main_uname
```assembly
loc_491690:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 1A8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+1D8h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    CMP cs:dword_720144, 2
    JZ loc_4918A0
loc_491701:
    XOR ebx, ebx
loc_491703:
    XOR r8d, r8d
    MOV ecx, offset stru_502CC0
    MOV edx, offset aAsnrvmpio
    MOV rsi, rbp
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_491918
loc_491724:
    CMP eax, 6Eh
    JZ loc_491890
loc_49172D:
    JG loc_491760
loc_49172F:
    CMP eax, 61h
    JZ loc_491880
loc_491738:
    JG loc_491780
loc_49173A:
    CMP eax, 0FFFFFF7Dh
    JZ loc_4917F0
loc_491745:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_491860
loc_491750:
    XOR edi, edi
    CALL sub_491350
loc_491760:
    CMP eax, 72h
    JZ loc_491870
loc_491769:
    JG loc_4917A0
loc_49176B:
    CMP eax, 6Fh
    JZ loc_4917C0
loc_491770:
    CMP eax, 70h
    JNZ loc_491860
loc_491779:
    OR ebx, 20h
    JMP loc_491703
loc_491780:
    CMP eax, 69h
    JZ loc_4917D0
loc_491785:
    CMP eax, 6Dh
    JNZ loc_491860
loc_49178E:
    OR ebx, 10h
    JMP loc_491703
loc_4917A0:
    CMP eax, 73h
    JZ loc_4917E0
loc_4917A5:
    CMP eax, 76h
    JNZ loc_491860
loc_4917AE:
    OR ebx, 8
    JMP loc_491703
loc_4917C0:
    OR bl, 80h
    JMP loc_491703
loc_4917D0:
    OR ebx, 40h
    JMP loc_491703
loc_4917E0:
    OR ebx, 1
    JMP loc_491703
loc_4917F0:
    CMP cs:dword_720144, 1
    MOV rdi, cs:stdout
    MOV eax, offset aArch
    MOV rcx, cs:off_720148
    MOV esi, offset aUname_0
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4C7B3F
    CMOVNZ rsi, rax
    XOR r9d, r9d
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_49182F:
    MOV rdi, [rbp+rax*8+0]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    XCHG ax, ax
loc_491860:
    MOV edi, 1
    CALL sub_491350
loc_491870:
    OR ebx, 4
    JMP loc_491703
loc_491880:
    MOV ebx, 0FFFFFFFFh
    JMP loc_491703
loc_491890:
    OR ebx, 2
    JMP loc_491703
loc_4918A0:
    XOR r8d, r8d
    MOV ecx, offset stru_502C60
    MOV edx, (offset a8+6)
    MOV rsi, rbp
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_491A30
loc_4918C1:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_491745
loc_4918CC:
    CMP cs:dword_720144, 1
    MOV eax, offset aArch
    MOV esi, offset aUname_0
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    MOV r9d, offset aKarelZak
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4C7B3F
    CMOVNZ rsi, rax
    SUB rsp, 8
    XOR eax, eax
    PUSH 0
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_491918:
    MOVSXD rax, cs:optind
    CMP r12d, eax
    JNZ loc_49182F
loc_491928:
    TEST ebx, ebx
    JNZ loc_491AA2
loc_491930:
    LEA rbp, [rsp+1D8h+name]
    MOV rdi, rbp
    CALL _uname
    CMP eax, 0FFFFFFFFh
    JNZ loc_49196C
loc_491942:
    MOV edx, 5
    MOV esi, offset aCannotGetSyste
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_49196C:
    XOR ebx, ebx
    XOR r13d, r13d
    XOR r12d, r12d
    XOR edx, edx
    XOR eax, eax
    XOR r15d, r15d
    XOR r14d, r14d
loc_49197E:
    MOV rdi, rbp
    MOV [rsp+1D8h+var_1CC], edx
    MOV [rsp+1D8h+var_1D0], eax
    CALL sub_491300
    MOV edx, [rsp+1D8h+var_1CC]
    MOV eax, [rsp+1D8h+var_1D0]
loc_491996:
    TEST r14d, r14d
    JNZ loc_491B14
loc_49199F:
    TEST r15d, r15d
    JNZ loc_491AF3
loc_4919A8:
    TEST eax, eax
    JNZ loc_491ADA
loc_4919B0:
    TEST edx, edx
    JNZ loc_491B32
loc_4919B8:
    TEST bl, bl
    JZ loc_4919C6
loc_4919BC:
    MOV edi, offset aUnknown_0
    CALL sub_491300
loc_4919C6:
    TEST r12b, r12b
    JZ loc_4919D5
loc_4919CB:
    MOV edi, offset aUnknown_0
    CALL sub_491300
loc_4919D5:
    TEST r13d, r13d
    JNZ loc_491A93
loc_4919DE:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_491ACB
loc_4919F3:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
loc_4919FE:
    XOR eax, eax
    MOV rcx, [rsp+1D8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_491B43
loc_491A17:
    ADD rsp, 1A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_491A30:
    MOVSXD rax, cs:optind
    CMP r12d, eax
    JNZ loc_49182F
loc_491A40:
    LEA rbp, [rsp+1D8h+name]
    MOV rdi, rbp
    CALL _uname
    CMP eax, 0FFFFFFFFh
    JZ loc_491942
loc_491A56:
    MOV ebx, 10h
loc_491A5B:
    MOV r12d, ebx
    MOV r14d, ebx
    MOV r15d, ebx
    MOV eax, ebx
    MOV edx, ebx
    MOV r13d, ebx
    SHR r12d, 6
    SHR ebx, 5
    AND r14d, 2
    AND r15d, 4
    AND eax, 8
    AND edx, 10h
    AND r12d, 1
    AND r13d, 80h
    AND ebx, 1
    JMP loc_491996
loc_491A93:
    MOV edi, offset aGnuLinux
    CALL sub_491300
    JMP loc_4919DE
loc_491AA2:
    TEST bl, 1Fh
    JNZ loc_491B48
loc_491AAB:
    MOV r12d, ebx
    MOV r13d, ebx
    SHR ebx, 5
    SHR r12d, 6
    AND r13d, 80h
    AND ebx, 1
    AND r12d, 1
    JMP loc_4919B8
loc_491ACB:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_4919FE
loc_491ADA:
    LEA rdi, [rbp+0C3h]
    MOV [rsp+1D8h+var_1D0], edx
    CALL sub_491300
    MOV edx, [rsp+1D8h+var_1D0]
    JMP loc_4919B0
loc_491AF3:
    LEA rdi, [rbp+82h]
    MOV [rsp+1D8h+var_1CC], edx
    MOV [rsp+1D8h+var_1D0], eax
    CALL sub_491300
    MOV edx, [rsp+1D8h+var_1CC]
    MOV eax, [rsp+1D8h+var_1D0]
    JMP loc_4919A8
loc_491B14:
    LEA rdi, [rbp+41h]
    MOV [rsp+1D8h+var_1CC], edx
    MOV [rsp+1D8h+var_1D0], eax
    CALL sub_491300
    MOV edx, [rsp+1D8h+var_1CC]
    MOV eax, [rsp+1D8h+var_1D0]
    JMP loc_49199F
loc_491B32:
    LEA rdi, [rbp+104h]
    CALL sub_491300
    JMP loc_4919B8
loc_491B43:
    CALL ___stack_chk_fail
loc_491B48:
    LEA rbp, [rsp+1D8h+name]
    MOV rdi, rbp
    CALL _uname
    ADD eax, 1
    JZ loc_491942
loc_491B5E:
    TEST bl, 1
    JZ loc_491A5B
loc_491B67:
    MOV r14d, ebx
    MOV r15d, ebx
    MOV eax, ebx
    MOV edx, ebx
    MOV r12d, ebx
    AND r14d, 2
    AND r15d, 4
    AND eax, 8
    AND edx, 10h
    CMP ebx, 0FFFFFFFFh
    MOV r13d, ebx
    SETNZ cl
    SHR r12d, 6
    SHR ebx, 5
    AND r12d, ecx
    AND r13d, 80h
    AND ebx, ecx
    JMP loc_49197E
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'FileHandle', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x77', '0x180', '0x241', '0xFE', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'File Opening', 'inferred_category': 'IO Operations'}

##### T 195 - single_binary_main_uname
```assembly
loc_4AADF0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 1A8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+1D8h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    CMP cs:dword_743144, 2
    JZ loc_4AB000
loc_4AAE61:
    XOR ebx, ebx
loc_4AAE63:
    XOR r8d, r8d
    MOV ecx, offset stru_526740
    MOV edx, offset aAsnrvmpio
    MOV rsi, rbp
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_4AB078
loc_4AAE84:
    CMP eax, 6Eh
    JZ loc_4AAFF0
loc_4AAE8D:
    JG loc_4AAEC0
loc_4AAE8F:
    CMP eax, 61h
    JZ loc_4AAFE0
loc_4AAE98:
    JG loc_4AAEE0
loc_4AAE9A:
    CMP eax, 0FFFFFF7Dh
    JZ loc_4AAF50
loc_4AAEA5:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_4AAFC0
loc_4AAEB0:
    XOR edi, edi
    CALL sub_4AAAB0
loc_4AAEC0:
    CMP eax, 72h
    JZ loc_4AAFD0
loc_4AAEC9:
    JG loc_4AAF00
loc_4AAECB:
    CMP eax, 6Fh
    JZ loc_4AAF20
loc_4AAED0:
    CMP eax, 70h
    JNZ loc_4AAFC0
loc_4AAED9:
    OR ebx, 20h
    JMP loc_4AAE63
loc_4AAEE0:
    CMP eax, 69h
    JZ loc_4AAF30
loc_4AAEE5:
    CMP eax, 6Dh
    JNZ loc_4AAFC0
loc_4AAEEE:
    OR ebx, 10h
    JMP loc_4AAE63
loc_4AAF00:
    CMP eax, 73h
    JZ loc_4AAF40
loc_4AAF05:
    CMP eax, 76h
    JNZ loc_4AAFC0
loc_4AAF0E:
    OR ebx, 8
    JMP loc_4AAE63
loc_4AAF20:
    OR bl, 80h
    JMP loc_4AAE63
loc_4AAF30:
    OR ebx, 40h
    JMP loc_4AAE63
loc_4AAF40:
    OR ebx, 1
    JMP loc_4AAE63
loc_4AAF50:
    CMP cs:dword_743144, 1
    MOV rdi, cs:stdout
    MOV eax, offset aArch
    MOV rcx, cs:off_743148
    MOV esi, offset aUname_0
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4EA7DF
    CMOVNZ rsi, rax
    XOR r9d, r9d
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_4AAF8F:
    MOV rdi, [rbp+rax*8+0]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    XCHG ax, ax
loc_4AAFC0:
    MOV edi, 1
    CALL sub_4AAAB0
loc_4AAFD0:
    OR ebx, 4
    JMP loc_4AAE63
loc_4AAFE0:
    MOV ebx, 0FFFFFFFFh
    JMP loc_4AAE63
loc_4AAFF0:
    OR ebx, 2
    JMP loc_4AAE63
loc_4AB000:
    XOR r8d, r8d
    MOV ecx, offset stru_5266E0
    MOV edx, (offset a8+6)
    MOV rsi, rbp
    MOV edi, r12d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_4AB248
loc_4AB021:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_4AAEA5
loc_4AB02C:
    CMP cs:dword_743144, 1
    MOV eax, offset aArch
    MOV esi, offset aUname_0
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    MOV r9d, offset aKarelZak
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4EA7DF
    CMOVNZ rsi, rax
    SUB rsp, 8
    XOR eax, eax
    PUSH 0
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_4AB078:
    MOVSXD rax, cs:optind
    CMP r12d, eax
    JNZ loc_4AAF8F
loc_4AB088:
    TEST ebx, ebx
    JNZ loc_4AB2FB
loc_4AB090:
    LEA rbp, [rsp+1D8h+name]
    MOV rdi, rbp
    CALL _uname
    CMP eax, 0FFFFFFFFh
    JNZ loc_4AB0CC
loc_4AB0A2:
    MOV edx, 5
    MOV esi, offset aCannotGetSyste
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4AB0CC:
    XOR ebx, ebx
    XOR r13d, r13d
    XOR r12d, r12d
    XOR r14d, r14d
    XOR ecx, ecx
    XOR edx, edx
    XOR r15d, r15d
loc_4AB0DE:
    CMP cs:byte_758479, 0
    JZ loc_4AB107
loc_4AB0E7:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB4E9
loc_4AB0FC:
    LEA rsi, [rax+1]
    MOV [rdi+28h], rsi
    MOV byte ptr [rax], 20h
loc_4AB107:
    MOV rsi, cs:stdout
    MOV rdi, rbp
    MOV [rsp+1D8h+var_1CC], ecx
    MOV [rsp+1D8h+var_1D0], edx
    MOV cs:byte_758479, 1
    CALL _fputs_unlocked
    MOV ecx, [rsp+1D8h+var_1CC]
    MOV edx, [rsp+1D8h+var_1D0]
loc_4AB12D:
    TEST r15d, r15d
    JNZ loc_4AB413
loc_4AB136:
    TEST edx, edx
    JNZ loc_4AB3C3
loc_4AB13E:
    TEST ecx, ecx
    JNZ loc_4AB37B
loc_4AB146:
    TEST r14d, r14d
    JNZ loc_4AB333
loc_4AB14F:
    TEST bl, bl
    JZ loc_4AB19E
loc_4AB153:
    CMP cs:byte_758479, 0
    JZ loc_4AB17C
loc_4AB15C:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB486
loc_4AB171:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_4AB17C:
    MOV rcx, cs:stdout
    MOV edx, 7
    MOV esi, 1
    MOV edi, offset aUnknown_0
    MOV cs:byte_758479, 1
    CALL _fwrite_unlocked
loc_4AB19E:
    TEST r12b, r12b
    JZ loc_4AB1EE
loc_4AB1A3:
    CMP cs:byte_758479, 0
    JZ loc_4AB1CC
loc_4AB1AC:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB477
loc_4AB1C1:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_4AB1CC:
    MOV rcx, cs:stdout
    MOV edx, 7
    MOV esi, 1
    MOV edi, offset aUnknown_0
    MOV cs:byte_758479, 1
    CALL _fwrite_unlocked
loc_4AB1EE:
    TEST r13d, r13d
    JNZ loc_4AB2AB
loc_4AB1F7:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB324
loc_4AB20C:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
loc_4AB217:
    XOR eax, eax
    MOV rbx, [rsp+1D8h+var_40]
    XOR rbx, fs:28h
    JNZ loc_4AB508
loc_4AB230:
    ADD rsp, 1A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4AB248:
    MOVSXD rax, cs:optind
    CMP r12d, eax
    JNZ loc_4AAF8F
loc_4AB258:
    LEA rbp, [rsp+1D8h+name]
    MOV rdi, rbp
    CALL _uname
    CMP eax, 0FFFFFFFFh
    JZ loc_4AB0A2
loc_4AB26E:
    MOV ebx, 10h
loc_4AB273:
    MOV r12d, ebx
    MOV r15d, ebx
    MOV edx, ebx
    MOV ecx, ebx
    MOV r14d, ebx
    MOV r13d, ebx
    SHR r12d, 6
    SHR ebx, 5
    AND r15d, 2
    AND edx, 4
    AND ecx, 8
    AND r14d, 10h
    AND r12d, 1
    AND r13d, 80h
    AND ebx, 1
    JMP loc_4AB12D
loc_4AB2AB:
    CMP cs:byte_758479, 0
    JZ loc_4AB2D4
loc_4AB2B4:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB468
loc_4AB2C9:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_4AB2D4:
    MOV rcx, cs:stdout
    MOV edx, 9
    MOV esi, 1
    MOV edi, offset aGnuLinux
    MOV cs:byte_758479, 1
    CALL _fwrite_unlocked
    JMP loc_4AB1F7
loc_4AB2FB:
    TEST bl, 1Fh
    JNZ loc_4AB50D
loc_4AB304:
    MOV r12d, ebx
    MOV r13d, ebx
    SHR ebx, 5
    SHR r12d, 6
    AND r13d, 80h
    AND ebx, 1
    AND r12d, 1
    JMP loc_4AB14F
loc_4AB324:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_4AB217
loc_4AB333:
    CMP cs:byte_758479, 0
    JZ loc_4AB35C
loc_4AB33C:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB4BB
loc_4AB351:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_4AB35C:
    MOV rsi, cs:stdout
    LEA rdi, [rbp+104h]
    MOV cs:byte_758479, 1
    CALL _fputs_unlocked
    JMP loc_4AB14F
loc_4AB37B:
    CMP cs:byte_758479, 0
    JZ loc_4AB3A4
loc_4AB384:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB4AC
loc_4AB399:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_4AB3A4:
    MOV rsi, cs:stdout
    LEA rdi, [rbp+0C3h]
    MOV cs:byte_758479, 1
    CALL _fputs_unlocked
    JMP loc_4AB146
loc_4AB3C3:
    CMP cs:byte_758479, 0
    JZ loc_4AB3EC
loc_4AB3CC:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB495
loc_4AB3E1:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 20h
loc_4AB3EC:
    MOV rsi, cs:stdout
    LEA rdi, [rbp+82h]
    MOV [rsp+1D8h+var_1D0], ecx
    MOV cs:byte_758479, 1
    CALL _fputs_unlocked
    MOV ecx, [rsp+1D8h+var_1D0]
    JMP loc_4AB13E
loc_4AB413:
    CMP cs:byte_758479, 0
    JZ loc_4AB43C
loc_4AB41C:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4AB4CA
loc_4AB431:
    LEA rsi, [rax+1]
    MOV [rdi+28h], rsi
    MOV byte ptr [rax], 20h
loc_4AB43C:
    MOV rsi, cs:stdout
    LEA rdi, [rbp+41h]
    MOV [rsp+1D8h+var_1CC], ecx
    MOV [rsp+1D8h+var_1D0], edx
    MOV cs:byte_758479, 1
    CALL _fputs_unlocked
    MOV ecx, [rsp+1D8h+var_1CC]
    MOV edx, [rsp+1D8h+var_1D0]
    JMP loc_4AB136
loc_4AB468:
    MOV esi, 20h
    CALL ___overflow
    JMP loc_4AB2D4
loc_4AB477:
    MOV esi, 20h
    CALL ___overflow
    JMP loc_4AB1CC
loc_4AB486:
    MOV esi, 20h
    CALL ___overflow
    JMP loc_4AB17C
loc_4AB495:
    MOV esi, 20h
    MOV [rsp+1D8h+var_1D0], ecx
    CALL ___overflow
    MOV ecx, [rsp+1D8h+var_1D0]
    JMP loc_4AB3EC
loc_4AB4AC:
    MOV esi, 20h
    CALL ___overflow
    JMP loc_4AB3A4
loc_4AB4BB:
    MOV esi, 20h
    CALL ___overflow
    JMP loc_4AB35C
loc_4AB4CA:
    MOV esi, 20h
    MOV [rsp+1D8h+var_1CC], ecx
    MOV [rsp+1D8h+var_1D0], edx
    CALL ___overflow
    MOV edx, [rsp+1D8h+var_1D0]
    MOV ecx, [rsp+1D8h+var_1CC]
    JMP loc_4AB43C
loc_4AB4E9:
    MOV esi, 20h
    MOV [rsp+1D8h+var_1CC], ecx
    MOV [rsp+1D8h+var_1D0], edx
    CALL ___overflow
    MOV edx, [rsp+1D8h+var_1D0]
    MOV ecx, [rsp+1D8h+var_1CC]
    JMP loc_4AB107
loc_4AB508:
    CALL ___stack_chk_fail
loc_4AB50D:
    LEA rbp, [rsp+1D8h+name]
    MOV rdi, rbp
    CALL _uname
    ADD eax, 1
    JZ loc_4AB0A2
loc_4AB523:
    TEST bl, 1
    JZ loc_4AB273
loc_4AB52C:
    MOV r15d, ebx
    MOV edx, ebx
    MOV ecx, ebx
    MOV r14d, ebx
    MOV r12d, ebx
    AND r15d, 2
    AND edx, 4
    AND ecx, 8
    AND r14d, 10h
    CMP ebx, 0FFFFFFFFh
    MOV r13d, ebx
    SETNZ al
    SHR r12d, 6
    SHR ebx, 5
    AND r12d, eax
    AND r13d, 80h
    AND ebx, eax
    JMP loc_4AB0DE
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'FileHandle', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x77', '0x180', '0x241', '0xFE', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'I/O Operations'}

##### Q 196 - _usage_pwd
```assembly
loc_467160:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_4671B6
loc_46718A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4671AF:
    MOV edi, ebx
    CALL _exit
loc_4671B6:
    MOV esi, offset aUsageSOption_0
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintTheFullFi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aLLogicalUsePwd
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aIfNoOptionIsSp
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aNoteYourShellM
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aPwd
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], 4E9CF3h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 4E9CF3h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aPwd
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_467344
loc_467338:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_467350
loc_467344:
    MOV ecx, 4
    MOV rsi, r8
    REPE 
    JNZ loc_467338
loc_467350:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_46741A
loc_467369:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4673B2
loc_467398:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_46749E
loc_4673B2:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aPwd
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 4E9B80h
    CALL ___printf_chk
    CMP rbp, offset aPwd
    JZ loc_467489
loc_4673EF:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4671AF
loc_46741A:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_46745F
loc_467449:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_467499
loc_46745F:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aPwd
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_467489:
    MOV ebp, offset aPwd
    MOV r12d, 4C7B0Dh
    JMP loc_4673EF
loc_467499:
    MOV ebp, offset aPwd
loc_46749E:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aPwd
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4673B2
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 8, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x9', '0xA', '0x20', '0x1', '0x5C', '0x22', '0x3', '0x1E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'File I/O'}

##### T 196 - _usage_pwd
```assembly
loc_471E60:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_471EB6
loc_471E8A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_471EAF:
    MOV edi, ebx
    CALL _exit
loc_471EB6:
    MOV esi, offset aUsageSOption_0
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintTheFullFi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aLLogicalUsePwd
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aIfNoOptionIsSp
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aNoteYourShellM
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aPwd
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], 50CC20h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 50CC20h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aPwd
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_472044
loc_472038:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_472050
loc_472044:
    MOV ecx, 4
    MOV rsi, r8
    REPE 
    JNZ loc_472038
loc_472050:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_47211A
loc_472069:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4720B2
loc_472098:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_47219E
loc_4720B2:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aPwd
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 50CABAh
    CALL ___printf_chk
    CMP rbp, offset aPwd
    JZ loc_472189
loc_4720EF:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_471EAF
loc_47211A:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_47215F
loc_472149:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_472199
loc_47215F:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aPwd
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_472189:
    MOV ebp, offset aPwd
    MOV r12d, 4EA7ADh
    JMP loc_4720EF
loc_472199:
    MOV ebp, offset aPwd
loc_47219E:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aPwd
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4720B2
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x9', '0xA', '0x20', '0x1', '0x4403FD', '0x2', '0x5Ch', '0x22', '0x3', '0x1E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File I/O', 'inferred_category': 'File Handling'}

##### Q 197 - _usage_hostid
```assembly
loc_408E10:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_408E66
loc_408E3A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_408E5F:
    MOV edi, ebx
    CALL _exit
loc_408E66:
    MOV esi, offset aUsageSOptionPr
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aHostid
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_408F6C
loc_408F60:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_408F78
loc_408F6C:
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JNZ loc_408F60
loc_408F78:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_409042
loc_408F91:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_408FDA
loc_408FC0:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4090C6
loc_408FDA:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aHostid
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aHostid
    JZ loc_4090B1
loc_409017:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_408E5F
loc_409042:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_409087
loc_409071:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4090C1
loc_409087:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aHostid
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4090B1:
    MOV ebp, offset aHostid
    MOV r12d, 4C7B0Dh
    JMP loc_409017
loc_4090C1:
    MOV ebp, offset aHostid
loc_4090C6:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aHostid
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_408FDA
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x40', '0x3BA', '0x88'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Cryptographic/Security'}

##### T 197 - _usage_hostid
```assembly
loc_4090B0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_409106
loc_4090DA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4090FF:
    MOV edi, ebx
    CALL _exit
loc_409106:
    MOV esi, offset aUsageSOptionPr
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_50CC1F+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_50CC1F+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aHostid
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_40920C
loc_409200:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_409218
loc_40920C:
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JNZ loc_409200
loc_409218:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4092E2
loc_409231:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_40927A
loc_409260:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_409366
loc_40927A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aHostid
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aHostid
    JZ loc_409351
loc_4092B7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4090FF
loc_4092E2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_409327
loc_409311:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_409361
loc_409327:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aHostid
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_409351:
    MOV ebp, offset aHostid
    MOV r12d, 4EA7ADh
    JMP loc_4092B7
loc_409361:
    MOV ebp, offset aHostid
loc_409366:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aHostid
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_40927A
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x40', '0x28', '0x18', '0x10', '0x8', '0xE', '0xD', '0xC', '0xB', '0xA', '0x9', '0x8', '0x7', '0x6', '0x5', '0x4', '0x3', '0x2', '0x1', '0x0', '0x3BA', '0x1E'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 28, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hash-based Message Authentication Code (HMAC)', 'inferred_category': 'Cryptographic'}

##### Q 198 - _usage_nohup
```assembly
loc_455B40:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_455B96
loc_455B6A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_455B8F:
    MOV edi, ebx
    CALL _exit
loc_455B96:
    MOV esi, offset aUsageSCommandA
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aRunCommandIgno
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:qword_7355D8
    MOV edx, 5
    MOV esi, offset aIfStandardInpu
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edx, 5
    MOV esi, offset aNoteYourShellM
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aNohup
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], 4E9CF3h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 4E9CF3h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aNohup
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_455D0C
loc_455D00:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_455D18
loc_455D0C:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_455D00
loc_455D18:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_455DE2
loc_455D31:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_455D7A
loc_455D60:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_455E66
loc_455D7A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aNohup
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 4E9B80h
    CALL ___printf_chk
    CMP rbp, offset aNohup
    JZ loc_455E51
loc_455DB7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_455B8F
loc_455DE2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_455E27
loc_455E11:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_455E61
loc_455E27:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aNohup
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_455E51:
    MOV ebp, offset aNohup
    MOV r12d, 4C7B0Dh
    JMP loc_455DB7
loc_455E61:
    MOV ebp, offset aNohup
loc_455E66:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aNohup
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_455D7A
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3F', '0x14', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy with Alignment and Padding', 'inferred_category': 'Utility'}

##### T 198 - _usage_nohup
```assembly
loc_45E740:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_45E796
loc_45E76A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_45E78F:
    MOV edi, ebx
    CALL _exit
loc_45E796:
    MOV esi, offset aUsageSCommandA
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aRunCommandIgno
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:qword_758598
    MOV edx, 5
    MOV esi, offset aIfStandardInpu
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edx, 5
    MOV esi, offset aNoteYourShellM
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aNohup
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], 50CC20h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 50CC20h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aNohup
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_45E90C
loc_45E900:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_45E918
loc_45E90C:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_45E900
loc_45E918:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_45E9E2
loc_45E931:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_45E97A
loc_45E960:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_45EA66
loc_45E97A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aNohup
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 50CABAh
    CALL ___printf_chk
    CMP rbp, offset aNohup
    JZ loc_45EA51
loc_45E9B7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_45E78F
loc_45E9E2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_45EA27
loc_45EA11:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_45EA61
loc_45EA27:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aNohup
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_45EA51:
    MOV ebp, offset aNohup
    MOV r12d, 4EA7ADh
    JMP loc_45E9B7
loc_45EA61:
    MOV ebp, offset aNohup
loc_45EA66:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aNohup
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_45E97A
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3F', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy and Swap', 'inferred_category': 'Utility/Helper'}

##### Q 199 - copy_with_unblock
```assembly
loc_42F090:
    TEST rsi, rsi
    JZ locret_42F1DE
loc_42F099:
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV r12, rdi
    MOV rbp, rsi
    SUB rsp, 8
    JMP loc_42F108
loc_42F0B0:
    MOV rdx, cs:qword_721048
    SUB r13, 1
    MOVZX esi, cs:byte_71FCCA
    MOV rcx, cs:qword_721050
    MOV cs:qword_720E70, 0
    MOV cs:qword_721040, 0
    LEA rax, [rdx+1]
    CMP rax, cs:qword_721108
    MOV [rcx+rdx], sil
    MOV cs:qword_721048, rax
    JNB loc_42F1C2
loc_42F0FB:
    ADD r13, 1
    CMP rbp, r13
    JBE loc_42F1D4
loc_42F108:
    MOV rax, cs:qword_721040
    CMP rax, cs:qword_721100
    MOVZX ebx, byte ptr [r12+r13]
    LEA rdx, [rax+1]
    MOV cs:qword_721040, rdx
    JNB loc_42F0B0
loc_42F128:
    MOVZX ecx, cs:byte_71FCC9
    CMP bl, cl
    JZ loc_42F1E0
loc_42F137:
    CMP cs:qword_720E70, 0
    MOV rax, cs:qword_721048
    MOV rdi, cs:qword_721050
    MOV rsi, cs:qword_721108
    MOV rdx, rax
    JNZ loc_42F174
loc_42F159:
    JMP loc_42F1AB
loc_42F160:
    SUB cs:qword_720E70, 1
    JZ loc_42F1AB
loc_42F16A:
    MOVZX ecx, cs:byte_71FCC9
    MOV rax, rdx
loc_42F174:
    LEA rdx, [rax+1]
    MOV [rdi+rax], cl
    CMP rdx, rsi
    MOV cs:qword_721048, rdx
    JB loc_42F160
loc_42F187:
    CALL sub_42EED0
    SUB cs:qword_720E70, 1
    MOV rdi, cs:qword_721050
    MOV rdx, cs:qword_721048
    MOV rsi, cs:qword_721108
    JNZ loc_42F16A
loc_42F1AB:
    LEA rax, [rdx+1]
    MOV [rdi+rdx], bl
    CMP rax, rsi
    MOV cs:qword_721048, rax
    JB loc_42F0FB
loc_42F1C2:
    ADD r13, 1
    CALL sub_42EED0
    CMP rbp, r13
    JA loc_42F108
loc_42F1D4:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
loc_42F1DE:
    REP 
loc_42F1E0:
    ADD cs:qword_720E70, 1
    JMP loc_42F0FB
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Arithmetic', 'Bitwise', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFD10E', '0x2800', '0x1', '0x3', '0x6', '0xA0', '0x2000', '0xFFFF8000', '0xFFFF4000', '0x5', '0x4', '0x9F', '0x7'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 26, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Algorithm'}

##### T 199 - copy_with_unblock
```assembly
loc_432100:
    TEST rsi, rsi
    JZ locret_43226D
loc_432109:
    PUSH r14
    XOR r14d, r14d
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    JMP loc_432178
loc_432120:
    MOV rdx, cs:qword_744028
    SUB r14, 1
    MOVZX esi, cs:byte_742CCA
    MOV rcx, cs:qword_744030
    MOV cs:qword_743E50, 0
    MOV cs:qword_744020, 0
    LEA rax, [rdx+1]
    CMP rax, cs:qword_7440E8
    MOV [rcx+rdx], sil
    MOV cs:qword_744028, rax
    JNB loc_432253
loc_43216B:
    ADD r14, 1
    CMP rbp, r14
    JBE loc_432265
loc_432178:
    MOV rax, cs:qword_744020
    CMP rax, cs:qword_7440E0
    MOVZX ebx, byte ptr [r12+r14]
    LEA rdx, [rax+1]
    MOV cs:qword_744020, rdx
    JNB loc_432120
loc_432198:
    MOVZX eax, cs:byte_742CC9
    CMP bl, al
    JZ loc_432270
loc_4321A7:
    MOV rdx, cs:qword_743E50
    MOV rdi, cs:qword_744030
    MOV rcx, cs:qword_744028
    MOV rsi, cs:qword_7440E8
    TEST rdx, rdx
    JNZ loc_4321EE
loc_4321C8:
    JMP loc_43223B
loc_4321D0:
    LEA rax, [rcx+2]
    MOV rcx, r8
loc_4321D7:
    SUB rdx, 1
    TEST rdx, rdx
    MOV cs:qword_743E50, rdx
    JZ loc_432240
loc_4321E7:
    MOVZX eax, cs:byte_742CC9
loc_4321EE:
    LEA r8, [rcx+1]
    MOV [rdi+rcx], al
    CMP r8, rsi
    MOV cs:qword_744028, r8
    JB loc_4321D0
loc_432201:
    CALL sub_431D90
    ADD cs:qword_744078, rax
    CMP rax, cs:qword_7440E8
    MOV r13, rax
    JNZ loc_43227D
loc_432219:
    MOV rsi, rax
    ADD cs:qword_744090, 1
    MOV rdi, cs:qword_744030
    MOV rdx, cs:qword_743E50
    MOV eax, 1
    XOR ecx, ecx
    JMP loc_4321D7
loc_43223B:
    LEA rax, [rcx+1]
    NOP 
loc_432240:
    CMP rax, rsi
    MOV cs:qword_744028, rax
    MOV [rdi+rcx], bl
    JB loc_43216B
loc_432253:
    ADD r14, 1
    CALL sub_432060
    CMP rbp, r14
    JA loc_432178
loc_432265:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
loc_43226D:
    REP 
loc_432270:
    ADD cs:qword_743E50, 1
    JMP loc_43216B
loc_43227D:
    MOV rsi, cs:qword_744100
    MOV edi, 4
    CALL sub_4D2F70
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aWritingToS
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    XOR edi, edi
    XOR eax, eax
    MOV rcx, rbp
    MOV rdx, rbx
    CALL sub_430F80
    TEST r13, r13
    JZ loc_4322C8
loc_4322C0:
    ADD cs:qword_744098, 1
loc_4322C8:
    CALL sub_431D10
    NOP dword ptr [rax]
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFD10E', '0x2800', '0xFFFF8000', '0xFFFF4000', '0xA0', '0x2000', '0x6572D8', '0x9F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 200 - argmatch_to_argument
```assembly
loc_496220:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV r14, [rsi]
    TEST r14, r14
    JZ loc_496261
loc_496230:
    MOV r12, rcx
    MOV r13, rdi
    MOV rbp, rdx
    LEA rbx, [rsi+8]
    JMP loc_49624F
loc_496240:
    MOV r14, [rbx]
    ADD rbp, r12
    ADD rbx, 8
    TEST r14, r14
    JZ loc_496261
loc_49624F:
    MOV rdx, r12
    MOV rsi, rbp
    MOV rdi, r13
    CALL _memcmp
    TEST eax, eax
    JNZ loc_496240
loc_496261:
    POP rbx
    MOV rax, r14
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28', '0x30', '0x20'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Management'}

##### T 200 - argmatch_to_argument
```assembly
loc_4B01A0:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV r14, [rsi]
    TEST r14, r14
    JZ loc_4B01E1
loc_4B01B0:
    MOV r12, rcx
    MOV r13, rdi
    MOV rbp, rdx
    LEA rbx, [rsi+8]
    JMP loc_4B01CF
loc_4B01C0:
    MOV r14, [rbx]
    ADD rbp, r12
    ADD rbx, 8
    TEST r14, r14
    JZ loc_4B01E1
loc_4B01CF:
    MOV rdx, r12
    MOV rsi, rbp
    MOV rdi, r13
    CALL _memcmp
    TEST eax, eax
    JNZ loc_4B01C0
loc_4B01E1:
    POP rbx
    MOV rax, r14
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x14', '0x40', '0x2B', '0x13'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bitwise Manipulation and Memory Copy', 'inferred_category': 'Utility/Helper'}

##### Q 201 - single_binary_main_od
```assembly
loc_45B680:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 58h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+88h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV eax, offset dword_72FBA0
    MOV edx, offset byte_72FBC4
    NOP dword ptr [rax+rax+00000000h]
loc_45B6F0:
    MOV dword ptr [rax], 0
    ADD rax, 4
    CMP rdx, rax
    JNZ loc_45B6F0
loc_45B6FF:
    MOV cs:dword_72FBA4, 1
    MOV cs:dword_72FBA8, 2
    MOV eax, offset dword_72FB40
    MOV cs:dword_72FBB0, 3
    MOV cs:dword_72FBC0, 5
    NOP dword ptr [rax+00h]
loc_45B730:
    MOV dword ptr [rax], 0
    ADD rax, 4
    CMP rax, offset unk_72FB84
    JNZ loc_45B730
loc_45B742:
    MOV cs:dword_72FB50, 6
    MOV cs:dword_72FB80, 8
    MOV ebp, 1
    MOV cs:dword_72FB60, 7
    MOV cs:qword_72FBF0, 0
    XOR r15d, r15d
    MOV cs:qword_72FBE8, 0
    MOV cs:qword_72FBF8, 0
    XOR r13d, r13d
    MOV cs:qword_72FC20, offset sub_459460
    MOV cs:dword_72FC44, 8
    XOR r14d, r14d
    MOV cs:dword_72FC40, 7
    MOV cs:byte_72FC32, 0
    NOP dword ptr [rax]
loc_45B7B8:
    LEA r8, [rsp+88h+longind]
    MOV ecx, offset stru_4F1F00
    MOV edx, offset aAAbbcddeffhhii
    MOV rsi, rbx
    MOV edi, r12d
    MOV [rsp+88h+longind], 0FFFFFFFFh
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_45BCA1
loc_45B7E3:
    ADD eax, 83h
    CMP eax, 104h
    JA def_45B7F3
loc_45B7F3:
    JMP ds:jpt_45B7F3[rax*8]
loc_45B800:
    MOV r9, cs:off_720150
    MOV rsi, cs:optarg
    MOV r8d, 4
    MOV ecx, offset dword_4F2080
    MOV edx, offset off_4F2090
    MOV edi, offset aEndian
    CALL sub_4961B0
    MOV eax, ds:dword_4F2080[rax*4]
    TEST eax, eax
    JZ loc_45BC3A
loc_45B837:
    CMP eax, 1
    JNZ loc_45B7B8
loc_45B840:
    MOV cs:byte_72FB21, 1
    JMP loc_45B7B8
loc_45B850:
    MOV cs:byte_72FC31, 1
    JMP loc_45B7B8
loc_45B860:
    MOV rdi, cs:optarg
    TEST rdi, rdi
    JZ loc_45BC46
loc_45B870:
    LEA rcx, [rsp+88h+var_60]
    XOR esi, esi
    MOV r8d, 4E9B80h
    MOV edx, 0Ah
    CALL sub_4BD3A0
    TEST eax, eax
    JNZ loc_45C819
loc_45B88F:
    MOV r14, [rsp+88h+var_60]
    MOV r15d, 1
    MOV r13d, 1
    JMP loc_45B7B8
loc_45B8A8:
    MOV cs:byte_71FF7D, 0
    MOV r13d, 1
    JMP loc_45B7B8
loc_45B8C0:
    MOV rdi, cs:optarg
    MOV r13d, 1
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B8E0:
    MOV edi, offset aD2
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B8F8:
    MOV rdi, cs:optarg
    XOR edx, edx
    XOR esi, esi
    MOV r8d, offset aBegkkmmptyz0
    MOV ecx, offset qword_72FC18
    CALL sub_4BD3A0
    TEST eax, eax
    JNZ loc_45C795
loc_45B91B:
    MOV r13d, 1
    JMP loc_45B7B8
loc_45B930:
    MOV edi, offset aDi_0
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B948:
    MOV edi, offset aX2
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B960:
    MOV edi, offset aFf
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B978:
    MOV edi, offset aU2
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B990:
    MOV edi, 4E6153h
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B9A8:
    MOV edi, offset aO1
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B9C0:
    MOV edi, (offset aA+1)
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45B9D8:
    MOV rdi, cs:optarg
    TEST rdi, rdi
    JZ loc_45BC91
loc_45B9E8:
    LEA rcx, [rsp+88h+var_60]
    XOR edx, edx
    XOR esi, esi
    MOV r8d, offset aBegkkmmptyz0
    CALL sub_4BD3A0
    TEST eax, eax
    JNZ loc_45C779
loc_45BA04:
    MOV rax, [rsp+88h+var_60]
    MOV cs:qword_72FC38, rax
loc_45BA10:
    MOV cs:byte_72FC32, 1
    MOV r13d, 1
    JMP loc_45B7B8
loc_45BA28:
    MOV edi, offset aO4
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45BA40:
    MOV rdi, cs:optarg
    XOR edx, edx
    XOR esi, esi
    MOV r8d, offset aBegkkmmptyz0
    MOV ecx, offset qword_72FC08
    MOV cs:byte_72FC10, 1
    CALL sub_4BD3A0
    TEST eax, eax
    JZ loc_45B91B
loc_45BA6A:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_4F1F00
    MOV edx, 4Eh
    MOV edi, eax
    CALL sub_4BD240
loc_45BA90:
    MOV edi, offset aDl
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45BAA8:
    MOV edi, (offset aQnx4+2)
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45BAC0:
    MOV edi, offset aFd
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45BAD8:
    MOV edi, offset aU4
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45BAF0:
    MOV edi, offset aO2
    CALL sub_459FB0
    AND ebp, eax
    JMP loc_45B7B8
loc_45BB08:
    MOV rax, cs:optarg
    MOVZX r13d, byte ptr [rax]
    CMP r13b, 6Eh
    JZ loc_45C053
loc_45BB1D:
    JLE loc_45BC5D
loc_45BB23:
    CMP r13b, 6Fh
    JZ loc_45C099
loc_45BB2D:
    CMP r13b, 78h
    JNZ loc_45C073
loc_45BB37:
    MOV cs:qword_72FC20, offset sub_459460
    MOV cs:dword_72FC44, 10h
    MOV r13d, 1
    MOV cs:dword_72FC40, 6
    JMP loc_45B7B8
loc_45BB68:
    XOR edi, edi
    CALL sub_45B1D0
loc_45BB70:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    XOR r9d, r9d
    MOV r8d, offset aJimMeyering
    MOV edx, offset unk_4C7B3F
    MOV esi, 4C7950h
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_45BB9F:
    CMP cs:byte_72FC31, 0
    JZ loc_45BD2A
loc_45BBAC:
    MOV rdi, [rbx+rax*8+8]
    LEA rsi, [rsp+88h+longind]
    CALL sub_459570
    TEST al, al
    JNZ loc_45C71D
loc_45BBC3:
    MOV r12d, 3
loc_45BBC9:
    CMP cs:byte_72FC31, 0
    JZ loc_45BD2A
loc_45BBD6:
    MOVSXD rax, cs:optind
loc_45BBDD:
    MOV rdi, [rbx+rax*8+8]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV edx, 5
    MOV esi, offset aCompatibilityM
    XOR edi, edi
    CALL _dcgettext
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_45BC30:
    MOV edi, 1
    CALL sub_45B1D0
loc_45BC3A:
    MOV cs:byte_72FB21, 0
    JMP loc_45B7B8
loc_45BC46:
    MOV r15d, 1
    MOV r13d, 1
    MOV r14d, 20h
    JMP loc_45B7B8
loc_45BC5D:
    CMP r13b, 64h
    JNZ loc_45C073
loc_45BC67:
    MOV cs:qword_72FC20, offset sub_459460
    MOV cs:dword_72FC44, 0Ah
    MOV r13d, 1
    MOV cs:dword_72FC40, 7
    JMP loc_45B7B8
loc_45BC91:
    MOV cs:qword_72FC38, 3
    JMP loc_45BA10
loc_45BCA1:
    TEST bpl, bpl
    JZ loc_45C02B
loc_45BCAA:
    CMP cs:byte_72FC32, 0
    JZ loc_45BCE0
loc_45BCB3:
    CMP cs:qword_72FBF0, 0
    JZ loc_45BCE0
loc_45BCBD:
    MOV edx, 5
    MOV esi, offset aNoTypeMayBeSpe
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
loc_45BCE0:
    MOVSXD rax, cs:optind
    SUB r12d, eax
    TEST r13b, r13b
    JZ loc_45C0C3
loc_45BCF3:
    MOVZX edx, cs:byte_72FC31
    TEST dl, dl
    JZ loc_45BD2A
loc_45BCFE:
    CMP r12d, 2
    JZ loc_45C69A
loc_45BD08:
    CMP r12d, 3
    JZ loc_45BBAC
loc_45BD12:
    CMP r12d, 1
    JZ loc_45C6A4
loc_45BD1C:
    CMP r12d, 1
    JLE loc_45BD2A
loc_45BD22:
    TEST dl, dl
    JNZ loc_45BBDD
loc_45BD2A:
    MOVZX eax, cs:byte_72FC30
    XOR ebp, ebp
loc_45BD33:
    TEST al, al
    JZ loc_45BD53
loc_45BD37:
    CMP cs:qword_72FC20, offset nullsub_3
    JZ loc_45C676
loc_45BD48:
    MOV cs:qword_72FC20, offset sub_45B1A0
loc_45BD53:
    CMP cs:byte_72FC10, 0
    JZ loc_45BD7D
loc_45BD5C:
    MOV rdx, cs:qword_72FC18
    MOV rax, rdx
    ADD rax, cs:qword_72FC08
    CMP rdx, rax
    MOV cs:qword_72FC00, rax
    JA loc_45C7B6
loc_45BD7D:
    CMP cs:qword_72FBF0, 0
    JZ loc_45C13A
loc_45BD8B:
    TEST r12d, r12d
    JLE loc_45C352
loc_45BD94:
    MOVSXD rax, cs:optind
    LEA rax, [rbx+rax*8]
    MOV cs:qword_72FBD0, rax
loc_45BDA6:
    CALL sub_45AA70
    CMP cs:qword_72FBC8, 0
    MOV ebx, eax
    MOV byte ptr [rsp+88h+var_88], al
    JZ loc_45C012
loc_45BDBE:
    MOV rdi, cs:qword_72FC18
    CALL sub_45AC30
    AND ebx, eax
    CMP cs:qword_72FBC8, 0
    MOV byte ptr [rsp+88h+var_88], bl
    JZ loc_45C012
loc_45BDDD:
    SUB rbp, cs:qword_72FC18
    CMP cs:byte_72FC30, 0
    MOV eax, 0
    MOV r11, cs:qword_72FBF0
    CMOVNZ rax, rbp
    TEST r11, r11
    MOV cs:qword_72FC28, rax
    JZ loc_45C52F
loc_45BE0B:
    MOV rsi, cs:qword_72FBF8
    LEA rax, [r11+r11*4]
    MOV r12d, 1
    LEA rbp, [rsi+rax*8]
    MOV r10, rsi
    NOP dword ptr [rax+rax+00h]
loc_45BE28:
    MOV eax, [r10+4]
    MOVSXD r9, r12d
    MOVSXD rdi, ds:dword_4F21A0[rax*4]
    MOV rax, r9
    MOV rcx, rdi
    JMP loc_45BE43
loc_45BE40:
    MOV rcx, rdx
loc_45BE43:
    XOR edx, edx
    DIV rcx
    MOV rax, rcx
    TEST rdx, rdx
    JNZ loc_45BE40
loc_45BE50:
    XOR edx, edx
    MOV rax, rdi
    ADD r10, 28h
    DIV rcx
    MOV r12d, eax
    IMUL r12d, r9d
    CMP r10, rbp
    JNZ loc_45BE28
loc_45BE68:
    TEST r15b, r15b
    JZ loc_45C362
loc_45BE71:
    TEST r14, r14
    MOVSXD rbp, r12d
    JZ loc_45BE8A
loc_45BE79:
    XOR edx, edx
    MOV rax, r14
    DIV rbp
    TEST rdx, rdx
    JZ loc_45C54D
loc_45BE8A:
    MOV edx, 5
    MOV esi, offset aWarningInvalid_0
    XOR edi, edi
    CALL _dcgettext
    MOV r8d, r12d
    MOV rdx, rax
    MOV rcx, r14
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV r11, cs:qword_72FBF0
    MOV cs:qword_72FBE0, rbp
loc_45BEBD:
    TEST r11, r11
    MOV rsi, cs:qword_72FBF8
    JZ loc_45BF37
loc_45BEC9:
    LEA rax, [r11+r11*4]
    MOV r8, cs:qword_72FBE0
    MOV rcx, rsi
    XOR edi, edi
    LEA r9, [rsi+rax*8]
    NOP dword ptr [rax]
loc_45BEE0:
    MOV eax, [rsi+4]
    XOR edx, edx
    MOV ebx, [rsi+1Ch]
    MOVSXD r10, ds:dword_4F21A0[rax*4]
    MOV rax, r8
    DIV r10
    LEA edx, [rbx+1]
    IMUL eax, edx
    CDQE 
    CMP rdi, rax
    CMOVB rdi, rax
    ADD rsi, 28h
    CMP rsi, r9
    JNZ loc_45BEE0
loc_45BF0E:
    XCHG ax, ax
loc_45BF10:
    MOV eax, [rcx+4]
    XOR edx, edx
    MOV ebx, edi
    ADD rcx, 28h
    MOVSXD rsi, ds:dword_4F21A0[rax*4]
    MOV rax, r8
    DIV rsi
    IMUL eax, [rcx-0Ch]
    SUB ebx, eax
    MOV [rcx-8], ebx
    CMP rcx, r9
    JNZ loc_45BF10
loc_45BF37:
    CMP cs:byte_72FC32, 0
    JZ loc_45C190
loc_45BF44:
    CMP cs:qword_72FC38, 64h
    MOV edi, 64h
    MOV ebp, 1
    CMOVNB rdi, cs:qword_72FC38
    MOV [rsp+88h+var_60], rdi
    CALL sub_4BB0B0
    MOV r14, cs:qword_72FC18
    MOV r15, rax
loc_45BF72:
    MOVZX eax, cs:byte_72FC10
    MOV rdx, cs:qword_72FC38
    TEST al, al
    JZ loc_45BFA7
loc_45BF84:
    MOV rcx, cs:qword_72FC00
    MOV rdx, cs:qword_72FC38
    CMP rcx, rdx
    JB loc_45C6B7
loc_45BF9B:
    SUB rcx, rdx
    CMP rcx, r14
    JBE loc_45C6B7
loc_45BFA7:
    XOR r12d, r12d
    TEST rdx, rdx
    JNZ loc_45BFDF
loc_45BFAF:
    JMP loc_45C382
loc_45BFB8:
    CALL ___ctype_b_loc
    MOV rcx, [rax]
    MOVSXD rdx, r13d
    TEST byte ptr [rcx+rdx*2+1], 40h
    JZ loc_45BF72
loc_45BFCA:
    MOV [r15+r12], r13b
    ADD r12, 1
    CMP r12, cs:qword_72FC38
    JNB loc_45C37B
loc_45BFDF:
    LEA rdi, [rsp+88h+longind]
    ADD r14, 1
    CALL sub_45AE30
    MOV r13d, [rsp+88h+longind]
    AND ebp, eax
    TEST r13d, r13d
    JNS loc_45BFB8
loc_45BFF9:
    MOV rdi, r15
    CALL _free
loc_45C001:
    MOV ebx, [rsp+88h+var_88]
    MOVZX ebp, bpl
    AND ebx, ebp
    MOV eax, ebx
    AND eax, 1
    MOV byte ptr [rsp+88h+var_88], al
loc_45C012:
    CMP cs:byte_72FBC4, 0
    JNZ loc_45C149
loc_45C01F:
    MOVZX ebx, byte ptr [rsp+88h+var_88]
    XOR ebx, 1
    MOVZX eax, bl
    JMP loc_45C030
loc_45C02B:
    MOV eax, 1
loc_45C030:
    MOV rbx, [rsp+88h+var_40]
    XOR rbx, fs:28h
    JNZ loc_45C7B1
loc_45C044:
    ADD rsp, 58h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45C053:
    MOV cs:qword_72FC20, offset nullsub_3
    MOV cs:dword_72FC40, 0
    MOV r13d, 1
    JMP loc_45B7B8
loc_45C073:
    MOV edx, 5
    MOV esi, offset aInvalidOutputA
    XOR edi, edi
    CALL _dcgettext
    MOVSX ecx, r13b
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_45C099:
    MOV cs:qword_72FC20, offset sub_459460
    MOV cs:dword_72FC44, 8
    MOV r13d, 1
    MOV cs:dword_72FC40, 7
    JMP loc_45B7B8
loc_45C0C3:
    CMP r12d, 2
    JZ loc_45C495
loc_45C0CD:
    CMP r12d, 3
    JZ loc_45BB9F
loc_45C0D7:
    CMP r12d, 1
    MOVZX edx, cs:byte_72FC31
    JNZ loc_45BD1C
loc_45C0E8:
    CMP cs:byte_72FC31, 0
    MOV rdi, [rbx+rax*8]
    JNZ loc_45C107
loc_45C0F5:
    XOR ebp, ebp
    CMP byte ptr [rdi], 2Bh
    MOVZX eax, cs:byte_72FC30
    JNZ loc_45BD33
loc_45C107:
    LEA rsi, [rsp+88h+longind]
    CALL sub_459570
    TEST al, al
    JZ loc_45C500
loc_45C119:
    MOV rax, qword ptr [rsp+88h+longind]
    ADD rbx, 8
    XOR ebp, ebp
    XOR r12d, r12d
    MOV cs:qword_72FC18, rax
    MOVZX eax, cs:byte_72FC30
    JMP loc_45BD33
loc_45C13A:
    MOV edi, offset aOs
    CALL sub_459FB0
    JMP loc_45BD8B
loc_45C149:
    MOV rdi, cs:stdin
    CALL sub_4BE090
    CMP eax, 0FFFFFFFFh
    JNZ loc_45C01F
loc_45C15E:
    MOV edx, 5
    MOV esi, offset aStandardInput
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00000000h]
loc_45C190:
    MOV rcx, cs:qword_72FBE0
    MOV eax, 2
    XOR esi, esi
    MUL rcx
    JO loc_45C83A
loc_45C1A7:
    TEST rax, rax
    JS loc_45C835
loc_45C1B0:
    TEST rsi, rsi
    JNZ loc_45C835
loc_45C1B9:
    LEA rdi, [rcx+rcx]
    CALL sub_4BB0B0
    MOV rdi, cs:qword_72FBE0
    MOV r15, rax
    MOV [rsp+88h+ptr], rax
    MOV [rsp+88h+var_58], rax
    MOV r13, cs:qword_72FC18
    ADD rax, rdi
    CMP cs:byte_72FC10, 0
    MOV [rsp+88h+var_50], rax
    JNZ loc_45C401
loc_45C1F2:
    MOV ebp, 1
    XOR r14d, r14d
    LEA r12, [rsp+88h+var_60]
    JMP loc_45C23B
loc_45C208:
    JNZ loc_45C800
loc_45C20E:
    XOR r14d, 1
    MOV rdi, r13
    MOV rcx, r15
    MOVZX eax, r14b
    MOV rsi, r8
    MOV rbx, [rsp+rax*8+88h+var_58]
    MOV rdx, rbx
    MOV r15, rbx
    CALL sub_45AE90
    ADD r13, [rsp+88h+var_60]
    MOV rdi, cs:qword_72FBE0
loc_45C23B:
    MOV rdx, r12
    MOV rsi, r15
    CALL sub_45AB70
    MOV r8, [rsp+88h+var_60]
    AND ebp, eax
    CMP r8, cs:qword_72FBE0
    JNB loc_45C208
loc_45C256:
    TEST r8, r8
    JZ loc_45C31A
loc_45C25F:
    MOV rax, cs:qword_72FBF0
    TEST rax, rax
    JZ loc_45C6AD
loc_45C26F:
    MOV r9, cs:qword_72FBF8
    LEA rax, [rax+rax*4]
    MOV esi, 1
    LEA r10, [r9+rax*8]
loc_45C283:
    MOV eax, [r9+4]
    MOVSXD rsi, esi
    MOVSXD rdi, ds:dword_4F21A0[rax*4]
    MOV rax, rsi
    MOV rcx, rdi
    JMP loc_45C2A3
loc_45C2A0:
    MOV rcx, rdx
loc_45C2A3:
    XOR edx, edx
    DIV rcx
    MOV rax, rcx
    TEST rdx, rdx
    JNZ loc_45C2A0
loc_45C2B0:
    XOR edx, edx
    MOV rax, rdi
    ADD r9, 28h
    DIV rcx
    IMUL esi, eax
    CMP r9, r10
    JNZ loc_45C283
loc_45C2C4:
    MOVSXD rsi, esi
loc_45C2C7:
    MOVZX eax, r14b
    XOR edx, edx
    MOV [rsp+88h+var_70], r8
    MOV r12, [rsp+rax*8+88h+var_58]
    LEA rax, [r8+rsi-1]
    DIV rsi
    LEA rdi, [r12+r8]
    IMUL rsi, rax
    SUB rsi, r8
    MOV rdx, rsi
    XOR esi, esi
    CALL _memset
    MOV eax, r14d
    MOV r8, [rsp+88h+var_70]
    MOV rdi, r13
    XOR eax, 1
    MOV rcx, r12
    MOVZX eax, al
    MOV rdx, [rsp+rax*8+88h+var_58]
    MOV rsi, r8
    CALL sub_45AE90
    ADD r13, [rsp+88h+var_60]
loc_45C31A:
    MOV esi, 0Ah
    MOV rdi, r13
    CALL cs:qword_72FC20
    CMP cs:byte_72FC10, 0
    JZ loc_45C343
loc_45C331:
    CMP r13, cs:qword_72FC00
    JB loc_45C343
loc_45C33A:
    XOR edi, edi
    CALL sub_45A920
    AND ebp, eax
loc_45C343:
    MOV rdi, [rsp+88h+ptr]
    CALL _free
    JMP loc_45C001
loc_45C352:
    MOV cs:qword_72FBD0, offset off_4F20F0
    JMP loc_45BDA6
loc_45C362:
    CMP r12d, 0Fh
    JLE loc_45C514
loc_45C36C:
    MOVSXD r9, r12d
    MOV cs:qword_72FBE0, r9
    JMP loc_45BEC9
loc_45C37B:
    MOVZX eax, cs:byte_72FC10
loc_45C382:
    SUB r12, r14
    JMP loc_45C3D3
loc_45C390:
    LEA rdi, [rsp+88h+longind]
    ADD r14, 1
    CALL sub_45AE30
    MOV ebx, [rsp+88h+longind]
    AND ebp, eax
    TEST ebx, ebx
    JS loc_45BFF9
loc_45C3AC:
    JZ loc_45C559
loc_45C3B2:
    CALL ___ctype_b_loc
    MOV rsi, [rax]
    MOVSXD rcx, ebx
    TEST byte ptr [rsi+rcx*2+1], 40h
    JZ loc_45BF72
loc_45C3C8:
    MOVZX eax, cs:byte_72FC10
    MOV [r15+r13], bl
loc_45C3D3:
    TEST al, al
    LEA r13, [r12+r14]
    JZ loc_45C3E8
loc_45C3DB:
    CMP r14, cs:qword_72FC00
    JNB loc_45C559
loc_45C3E8:
    CMP [rsp+88h+var_60], r13
    JNZ loc_45C390
loc_45C3EF:
    LEA rsi, [rsp+88h+var_60]
    MOV rdi, r15
    CALL sub_4BB200
    MOV r15, rax
    JMP loc_45C390
loc_45C401:
    MOV rax, cs:qword_72FC00
    CMP r13, rax
    JNB loc_45C663
loc_45C411:
    MOV r15, [rsp+88h+ptr]
    MOV ebp, 1
    XOR r14d, r14d
    LEA r12, [rsp+88h+var_60]
    JMP loc_45C46B
loc_45C428:
    JNZ loc_45C7E7
loc_45C42E:
    XOR r14d, 1
    MOV rdi, r13
    MOV rcx, r15
    MOVZX eax, r14b
    MOV rsi, r8
    MOV rbx, [rsp+rax*8+88h+var_58]
    MOV rdx, rbx
    CALL sub_45AE90
    ADD r13, [rsp+88h+var_60]
    MOV rax, cs:qword_72FC00
    CMP rax, r13
    JBE loc_45C668
loc_45C461:
    MOV rdi, cs:qword_72FBE0
    MOV r15, rbx
loc_45C46B:
    SUB rax, r13
    MOV rdx, r12
    MOV rsi, r15
    CMP rax, rdi
    CMOVBE rdi, rax
    CALL sub_45AB70
    MOV r8, [rsp+88h+var_60]
    AND ebp, eax
    CMP r8, cs:qword_72FBE0
    JNB loc_45C428
loc_45C490:
    JMP loc_45C256
loc_45C495:
    CMP cs:byte_72FC31, 0
    JNZ loc_45C69A
loc_45C4A2:
    MOV rdi, [rbx+rax*8+8]
    MOVSX eax, byte ptr [rdi]
    CMP al, 2Bh
    JZ loc_45C4BA
loc_45C4AE:
    SUB eax, 30h
    CMP eax, 9
    JA loc_45BD2A
loc_45C4BA:
    LEA r12, [rsp+88h+var_60]
    MOV rsi, r12
    CALL sub_459570
    TEST al, al
    JZ loc_45C658
loc_45C4CF:
    CMP cs:byte_72FC31, 0
    JNZ loc_45C6CD
loc_45C4DC:
    MOV rax, [rsp+88h+var_60]
    MOV cs:qword_72FC18, rax
    MOVSXD rax, cs:optind
    ADD rax, 1
    MOV rdx, [rbx+rax*8-8]
    MOV [rbx+rax*8], rdx
    ADD rbx, 8
loc_45C500:
    MOVZX eax, cs:byte_72FC30
    XOR ebp, ebp
    MOV r12d, 1
    JMP loc_45BD33
loc_45C514:
    MOV eax, 10h
    CDQ 
    IDIV r12d
    IMUL eax, r12d
    CDQE 
loc_45C523:
    MOV cs:qword_72FBE0, rax
    JMP loc_45BEBD
loc_45C52F:
    TEST r15b, r15b
    MOV eax, 10h
    JZ loc_45C523
loc_45C539:
    TEST r14, r14
    MOV ebp, 1
    MOV r12d, 1
    JZ loc_45BE8A
loc_45C54D:
    MOV cs:qword_72FBE0, r14
    JMP loc_45BEBD
loc_45C559:
    MOV rdi, r13
    MOV byte ptr [r15+r13], 0
    MOV esi, 20h
    NOT rdi
    LEA r12, [r15+1]
    ADD rdi, r14
    CALL cs:qword_72FC20
    MOVSX edx, byte ptr [r15]
    TEST edx, edx
    MOV ecx, edx
    MOV [rsp+88h+longind], edx
    JZ loc_45C5C7
loc_45C584:
    LEA eax, [rcx-7]
    CMP al, 6
    JA def_45C5A3
loc_45C58F:
    MOVZX eax, al
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    JMP ds:jpt_45C5A3[rax*8]
loc_45C5AA:
    MOV edi, offset asc_4F0591
    CALL _fwrite_unlocked
loc_45C5B4:
    MOVSX edx, byte ptr [r12]
    ADD r12, 1
    TEST edx, edx
    MOV ecx, edx
    MOV [rsp+88h+longind], edx
    JNZ loc_45C584
loc_45C5C7:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_45C7D8
loc_45C5DC:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    JMP loc_45BF72
loc_45C5EC:
    MOV edi, offset aV
    CALL _fwrite_unlocked
    JMP loc_45C5B4
loc_45C5F8:
    MOV edi, offset aN_0
    CALL _fwrite_unlocked
    JMP loc_45C5B4
loc_45C604:
    MOV edi, offset aT_0
    CALL _fwrite_unlocked
    JMP loc_45C5B4
loc_45C610:
    MOV edi, offset aB
    CALL _fwrite_unlocked
    JMP loc_45C5B4
loc_45C61C:
    MOV edi, offset aA
    CALL _fwrite_unlocked
    JMP loc_45C5B4
loc_45C628:
    MOV edi, offset unk_4F0594
    CALL _fwrite_unlocked
    JMP loc_45C5B4
loc_45C634:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_45C710
loc_45C649:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], cl
    JMP loc_45C5B4
loc_45C658:
    MOV r12d, 2
    JMP loc_45BBC9
loc_45C663:
    MOV ebp, 1
loc_45C668:
    MOV [rsp+88h+var_60], 0
    JMP loc_45C31A
loc_45C676:
    MOV cs:dword_72FC44, 8
    MOV cs:dword_72FC40, 7
    MOV cs:qword_72FC20, offset sub_45B120
    JMP loc_45BD53
loc_45C69A:
    MOV rdi, [rbx+rax*8+8]
    JMP loc_45C4BA
loc_45C6A4:
    MOV rdi, [rbx+rax*8]
    JMP loc_45C107
loc_45C6AD:
    MOV esi, 1
    JMP loc_45C2C7
loc_45C6B7:
    MOV rdi, r15
    CALL _free
    XOR edi, edi
    CALL sub_45A920
    AND ebp, eax
    JMP loc_45C001
loc_45C6CD:
    MOVSXD rax, cs:optind
    LEA rsi, [rsp+88h+longind]
    MOV rdi, [rbx+rax*8]
    CALL sub_459570
    TEST al, al
    JZ loc_45C4DC
loc_45C6EA:
    MOV rdx, qword ptr [rsp+88h+longind]
    MOV cs:byte_72FC30, 1
    ADD rbx, 10h
    MOV rbp, [rsp+88h+var_60]
    XOR r12d, r12d
    MOV cs:qword_72FC18, rdx
    JMP loc_45BD33
loc_45C710:
    MOVZX esi, dl
    CALL ___overflow
    JMP loc_45C5B4
loc_45C71D:
    MOVSXD rax, cs:optind
    LEA r12, [rsp+88h+var_60]
    MOV rsi, r12
    MOV rdi, [rbx+rax*8+10h]
    CALL sub_459570
    TEST al, al
    JZ loc_45BBC3
loc_45C73E:
    MOV rdx, qword ptr [rsp+88h+longind]
    MOV cs:byte_72FC30, 1
    MOV r12d, 1
    MOV rbp, [rsp+88h+var_60]
    MOV cs:qword_72FC18, rdx
    MOVSXD rdx, cs:optind
    ADD rdx, 2
    MOV rcx, [rbx+rdx*8-10h]
    MOV [rbx+rdx*8], rcx
    ADD rbx, 10h
    JMP loc_45BD33
loc_45C779:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_4F1F00
    MOV edx, 53h
    MOV edi, eax
    CALL sub_4BD240
loc_45C795:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_4F1F00
    MOV edx, 6Ah
    MOV edi, eax
    CALL sub_4BD240
loc_45C7B1:
    CALL ___stack_chk_fail
loc_45C7B6:
    MOV edx, 5
    MOV esi, offset aSkipBytesReadB
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_45C7D8:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_45BF72
loc_45C7E7:
    MOV ecx, offset aDump
    MOV edx, 575h
    MOV esi, offset aSrcOdC
    MOV edi, offset aNBytesReadByte
    CALL ___assert_fail
loc_45C800:
    MOV ecx, offset aDump
    MOV edx, 583h
    MOV esi, offset aSrcOdC
    MOV edi, offset aNBytesReadByte
    CALL ___assert_fail
loc_45C819:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_4F1F00
    MOV edx, 77h
    MOV edi, eax
    CALL sub_4BD240
loc_45C835:
    CALL sub_429BE0
loc_45C83A:
    MOV esi, 1
    JMP loc_45C1A7
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4088', '0x28', '0x5649525020485353', '0x2059454B20455441', '0x524F4620454C4946', '0xA312E312054414D', '0x1', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### T 201 - single_binary_main_od
```assembly
loc_464A60:
    PUSH r15
    PUSH r14
    XOR r15d, r15d
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    MOV ebp, 1
    XOR r14d, r14d
    XOR r13d, r13d
    SUB rsp, 58h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+88h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV edx, offset dword_752B20
    MOV ecx, 8
    XOR eax, eax
    MOV rdi, rdx
    MOV cs:qword_752B80, 0
    MOV cs:qword_752B88, 0
    REP 
    MOV cs:qword_752B90, 0
    MOV cs:qword_752B98, 0
    MOV dword ptr cs:qword_752B80+4, 1
    MOV dword ptr cs:qword_752B88, 2
    MOV dword ptr cs:qword_752B90, 3
    MOV cs:dword_752BA0, 5
    MOV cs:dword_752B30, 6
    MOV cs:dword_752B60, 8
    MOV cs:dword_752B40, 7
    MOV cs:qword_752BD0, 0
    MOV cs:qword_752BC8, 0
    MOV cs:qword_752BD8, 0
    MOV cs:qword_752C00, offset sub_4620E0
    MOV cs:dword_752C24, 8
    MOV cs:dword_752C20, 7
    MOV cs:byte_752C12, 0
    NOP word ptr [rax+rax+00000000h]
loc_464BA0:
    LEA r8, [rsp+88h+longind]
    MOV ecx, offset stru_514E80
    MOV edx, offset aAAbbcddeffhhii
    MOV rsi, rbx
    MOV edi, r12d
    MOV [rsp+88h+longind], 0FFFFFFFFh
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_4650E0
loc_464BCB:
    ADD eax, 83h
    CMP eax, 104h
    JA def_464BDB
loc_464BDB:
    JMP ds:jpt_464BDB[rax*8]
loc_464BE8:
    MOV r9, cs:off_743150
    MOV rsi, cs:optarg
    MOV r8d, 4
    MOV ecx, offset dword_515000
    MOV edx, offset off_515010
    MOV edi, offset aEndian
    CALL sub_4AFF80
    MOV eax, ds:dword_515000[rax*4]
    TEST eax, eax
    JZ loc_465060
loc_464C1F:
    CMP eax, 1
    JNZ loc_464BA0
loc_464C28:
    MOV cs:byte_752B01, 1
    JMP loc_464BA0
loc_464C38:
    MOV cs:byte_752C11, 1
    JMP loc_464BA0
loc_464C48:
    MOV rdi, cs:optarg
    TEST rdi, rdi
    JZ loc_465070
loc_464C58:
    LEA rcx, [rsp+88h+var_60]
    XOR esi, esi
    MOV r8d, 50CABAh
    MOV edx, 0Ah
    CALL sub_4DF370
    TEST eax, eax
    JNZ loc_465D63
loc_464C77:
    MOV r13, [rsp+88h+var_60]
    MOV r14d, 1
    MOV r15d, 1
    JMP loc_464BA0
loc_464C90:
    MOV cs:byte_742F7D, 0
    MOV r15d, 1
    JMP loc_464BA0
loc_464CA8:
    MOV rdi, cs:optarg
    MOV r15d, 1
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464CC8:
    MOV edi, offset aD2
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464CE0:
    MOV rdi, cs:optarg
    XOR edx, edx
    XOR esi, esi
    MOV r8d, offset aBegkkmmptyz0
    MOV ecx, offset qword_752BF8
    CALL sub_4DF370
    TEST eax, eax
    JNZ loc_465E3B
loc_464D03:
    MOV r15d, 1
    JMP loc_464BA0
loc_464D10:
    MOV edi, offset aDi_0
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464D28:
    MOV edi, offset aX2
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464D40:
    MOV edi, offset aFf
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464D58:
    MOV edi, offset aU2
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464D70:
    MOV edi, 509093h
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464D88:
    MOV edi, offset aO1
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464DA0:
    MOV edi, (offset aA+1)
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464DB8:
    MOV rdi, cs:optarg
    TEST rdi, rdi
    JZ loc_4650C8
loc_464DC8:
    LEA rcx, [rsp+88h+var_60]
    XOR edx, edx
    XOR esi, esi
    MOV r8d, offset aBegkkmmptyz0
    CALL sub_4DF370
    TEST eax, eax
    JNZ loc_465D7F
loc_464DE4:
    MOV rax, [rsp+88h+var_60]
    MOV cs:qword_752C18, rax
loc_464DF0:
    MOV cs:byte_752C12, 1
    MOV r15d, 1
    JMP loc_464BA0
loc_464E08:
    MOV edi, offset aO4
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464E20:
    MOV rdi, cs:optarg
    XOR edx, edx
    XOR esi, esi
    MOV r8d, offset aBegkkmmptyz0
    MOV ecx, offset qword_752BE8
    MOV cs:byte_752BF0, 1
    CALL sub_4DF370
    TEST eax, eax
    JZ loc_464D03
loc_464E4A:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_514E80
    MOV edx, 4Eh
    MOV edi, eax
    CALL sub_4DF210
loc_464E70:
    MOV edi, offset aDl
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464E88:
    MOV edi, (offset aQnx4+2)
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464EA0:
    MOV edi, offset aFd
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464EB8:
    MOV edi, offset aU4
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464ED0:
    MOV edi, offset aO2
    CALL sub_462EB0
    AND ebp, eax
    JMP loc_464BA0
loc_464EE8:
    MOV rax, cs:optarg
    MOVZX r15d, byte ptr [rax]
    CMP r15b, 6Eh
    JZ loc_46557C
loc_464EFD:
    JLE loc_465090
loc_464F03:
    CMP r15b, 6Fh
    JZ loc_4655C2
loc_464F0D:
    CMP r15b, 78h
    JNZ loc_46559C
loc_464F17:
    MOV cs:qword_752C00, offset sub_4620E0
    MOV cs:dword_752C24, 10h
    MOV r15d, 1
    MOV cs:dword_752C20, 6
    JMP loc_464BA0
loc_464F48:
    XOR edi, edi
    CALL sub_4645B0
loc_464F50:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    XOR r9d, r9d
    MOV r8d, offset aJimMeyering
    MOV edx, offset unk_4EA7DF
    MOV esi, 4EA5F0h
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_464F7F:
    TEST dl, dl
    JZ loc_465170
loc_464F87:
    MOV rbp, [rbx+rax*8+8]
    MOVZX eax, byte ptr [rbp+0]
    TEST al, al
    JZ loc_465C20
loc_464F98:
    CMP al, 2Bh
    MOV esi, 2Eh
    SETZ al
    MOVZX eax, al
    ADD rbp, rax
    MOV rdi, rbp
    CALL _strchr
    TEST rax, rax
    MOV edx, 0Ah
    JZ loc_465DCC
loc_464FBE:
    LEA rcx, [rsp+88h+longind]
    XOR esi, esi
    MOV r8d, offset aBb_0
    MOV rdi, rbp
    CALL sub_4DF370
    TEST eax, eax
    JZ loc_465C28
loc_464FDB:
    MOV r12d, 3
loc_464FE1:
    CMP cs:byte_752C11, 0
    JZ loc_465170
loc_464FEE:
    MOVSXD rax, cs:optind
loc_464FF5:
    MOV rdi, [rbx+rax*8+8]
loc_464FFA:
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV edx, 5
    MOV esi, offset aCompatibilityM
    XOR edi, edi
    CALL _dcgettext
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV rcx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00000000h]
loc_465050:
    MOV edi, 1
    CALL sub_4645B0
loc_465060:
    MOV cs:byte_752B01, 0
    JMP loc_464BA0
loc_465070:
    MOV r14d, 1
    MOV r15d, 1
    MOV r13d, 20h
    JMP loc_464BA0
loc_465090:
    CMP r15b, 64h
    JNZ loc_46559C
loc_46509A:
    MOV cs:qword_752C00, offset sub_4620E0
    MOV cs:dword_752C24, 0Ah
    MOV r15d, 1
    MOV cs:dword_752C20, 7
    JMP loc_464BA0
loc_4650C8:
    MOV cs:qword_752C18, 3
    JMP loc_464DF0
loc_4650E0:
    TEST bpl, bpl
    JZ loc_465554
loc_4650E9:
    CMP cs:byte_752C12, 0
    JZ loc_465120
loc_4650F2:
    CMP cs:qword_752BD0, 0
    JZ loc_465120
loc_4650FC:
    MOV edx, 5
    MOV esi, offset aNoTypeMayBeSpe
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    XCHG ax, ax
loc_465120:
    MOVSXD rax, cs:optind
    MOVZX edx, cs:byte_752C11
    SUB r12d, eax
    TEST r15b, r15b
    JNZ loc_4655EC
loc_46513A:
    CMP r12d, 2
    JZ loc_4659B7
loc_465144:
    CMP r12d, 3
    JZ loc_464F7F
loc_46514E:
    CMP r12d, 1
    JZ loc_465998
loc_465158:
    CMP r12d, 1
    JLE loc_465170
loc_46515E:
    TEST dl, dl
    JNZ loc_464FF5
loc_465166:
    NOP word ptr [rax+rax+00000000h]
loc_465170:
    MOVZX eax, cs:byte_752C10
    XOR ebp, ebp
loc_465179:
    TEST al, al
    JZ loc_465199
loc_46517D:
    CMP cs:qword_752C00, offset nullsub_3
    JZ loc_465BAE
loc_46518E:
    MOV cs:qword_752C00, offset sub_463F10
loc_465199:
    CMP cs:byte_752BF0, 0
    JZ loc_4651C3
loc_4651A2:
    MOV rdx, cs:qword_752BF8
    MOV rax, rdx
    ADD rax, cs:qword_752BE8
    CMP rdx, rax
    MOV cs:qword_752BE0, rax
    JA loc_465D32
loc_4651C3:
    CMP cs:qword_752BD0, 0
    JZ loc_4656D1
loc_4651D1:
    TEST r12d, r12d
    MOV eax, offset off_515070
    JLE loc_4651E6
loc_4651DB:
    MOVSXD rax, cs:optind
    LEA rax, [rbx+rax*8]
loc_4651E6:
    MOV cs:qword_752BB0, rax
    CALL sub_463970
    CMP cs:qword_752BA8, 0
    MOV ebx, eax
    MOV byte ptr [rsp+88h+var_88], al
    JZ loc_4656A4
loc_465205:
    MOV rdi, cs:qword_752BF8
    CALL sub_463A70
    MOV esi, ebx
    AND esi, eax
    CMP cs:qword_752BA8, 0
    MOV byte ptr [rsp+88h+var_88], sil
    JZ loc_4656A4
loc_465227:
    SUB rbp, cs:qword_752BF8
    CMP cs:byte_752C10, 0
    MOV eax, 0
    MOV r11, cs:qword_752BD0
    CMOVNZ rax, rbp
    TEST r11, r11
    MOV cs:qword_752C08, rax
    JZ loc_465A81
loc_465255:
    MOV rsi, cs:qword_752BD8
    LEA rax, [r11+r11*4]
    MOV ebp, 1
    LEA rbx, [rsi+rax*8]
    MOV r10, rsi
    NOP dword ptr [rax+00h]
loc_465270:
    MOV eax, [r10+4]
    MOVSXD r9, ebp
    MOVSXD rdi, ds:dword_515120[rax*4]
    MOV rax, r9
    MOV rcx, rdi
    JMP loc_465293
loc_465290:
    MOV rcx, rdx
loc_465293:
    XOR edx, edx
    DIV rcx
    MOV rax, rcx
    TEST rdx, rdx
    JNZ loc_465290
loc_4652A0:
    XOR edx, edx
    MOV rax, rdi
    ADD r10, 28h
    DIV rcx
    MOV ebp, eax
    IMUL ebp, r9d
    CMP r10, rbx
    JNZ loc_465270
loc_4652B7:
    TEST r14b, r14b
    JZ loc_4658E4
loc_4652C0:
    TEST r13, r13
    MOVSXD rbx, ebp
    JZ loc_4652D9
loc_4652C8:
    XOR edx, edx
    MOV rax, r13
    DIV rbx
    TEST rdx, rdx
    JZ loc_465A9E
loc_4652D9:
    MOV edx, 5
    MOV esi, offset aWarningInvalid_0
    XOR edi, edi
    CALL _dcgettext
    MOV r8d, ebp
    MOV rdx, rax
    MOV rcx, r13
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV r11, cs:qword_752BD0
    MOV cs:qword_752BC0, rbx
loc_46530C:
    TEST r11, r11
    MOV rsi, cs:qword_752BD8
    JZ loc_465387
loc_465318:
    LEA rax, [r11+r11*4]
    MOV rcx, rsi
    XOR edi, edi
    LEA r8, [rsi+rax*8]
    NOP dword ptr [rax]
loc_465328:
    MOV eax, [rsi+4]
    XOR edx, edx
    MOVSXD r9, ds:dword_515120[rax*4]
    MOV rax, rbx
    DIV r9
    MOV edx, [rsi+1Ch]
    ADD edx, 1
    IMUL eax, edx
    CDQE 
    CMP rdi, rax
    CMOVB rdi, rax
    ADD rsi, 28h
    CMP rsi, r8
    JNZ loc_465328
loc_465356:
    NOP word ptr [rax+rax+00000000h]
loc_465360:
    MOV eax, [rcx+4]
    XOR edx, edx
    ADD rcx, 28h
    MOVSXD rsi, ds:dword_515120[rax*4]
    MOV rax, rbx
    DIV rsi
    MOV esi, edi
    IMUL eax, [rcx-0Ch]
    SUB esi, eax
    MOV [rcx-8], esi
    CMP rcx, r8
    JNZ loc_465360
loc_465387:
    CMP cs:byte_752C12, 0
    JZ loc_465720
loc_465394:
    CMP cs:qword_752C18, 64h
    MOV edi, 64h
    MOV r12d, 1
    CMOVNB rdi, cs:qword_752C18
    MOV [rsp+88h+var_60], rdi
    CALL sub_4DCC10
    MOV r15, cs:qword_752BF8
    MOV r13, rax
loc_4653C3:
    MOVZX eax, cs:byte_752BF0
    MOV rdx, cs:qword_752C18
    TEST al, al
    JZ loc_4653F8
loc_4653D5:
    MOV rcx, cs:qword_752BE0
    MOV rdx, cs:qword_752C18
    CMP rcx, rdx
    JB loc_465D1B
loc_4653EC:
    SUB rcx, rdx
    CMP rcx, r15
    JBE loc_465D1B
loc_4653F8:
    XOR r14d, r14d
    TEST rdx, rdx
    JZ loc_465495
loc_465404:
    NOP dword ptr [rax+00h]
loc_465408:
    MOV rdi, cs:qword_752BA8
    MOV ebx, 1
    TEST rdi, rdi
    JNZ loc_465447
loc_465419:
    JMP loc_465688
loc_465420:
    CALL ___errno_location
    MOV edi, [rax]
    CALL sub_463820
    MOV ebp, eax
    CALL sub_463970
    MOV rdi, cs:qword_752BA8
    AND ebp, eax
    AND ebx, ebp
    TEST rdi, rdi
    JZ loc_465688
loc_465447:
    CALL _fgetc
    CMP eax, 0FFFFFFFFh
    MOV ebp, eax
    JZ loc_465420
loc_465453:
    AND r12d, ebx
    ADD r15, 1
    TEST eax, eax
    JS loc_46568B
loc_465462:
    CALL ___ctype_b_loc
    MOV rcx, [rax]
    MOVSXD rdx, ebp
    TEST byte ptr [rcx+rdx*2+1], 40h
    JZ loc_4653C3
loc_465478:
    MOV [r13+r14+0], bpl
    ADD r14, 1
    CMP r14, cs:qword_752C18
    JB loc_465408
loc_46548E:
    MOVZX eax, cs:byte_752BF0
loc_465495:
    SUB r14, r15
    MOV [rsp+88h+var_78], r14
    MOV rsi, r14
loc_4654A0:
    TEST al, al
    LEA r14, [rsi+r15]
    JZ loc_4654B5
loc_4654A8:
    CMP r15, cs:qword_752BE0
    JNB loc_465AAD
loc_4654B5:
    CMP [rsp+88h+var_60], r14
    JZ loc_4656BC
loc_4654C0:
    MOV rdi, cs:qword_752BA8
    MOV ebx, 1
    TEST rdi, rdi
    JNZ loc_465507
loc_4654D1:
    JMP loc_465688
loc_4654E0:
    CALL ___errno_location
    MOV edi, [rax]
    CALL sub_463820
    MOV ebp, eax
    CALL sub_463970
    MOV rdi, cs:qword_752BA8
    AND ebp, eax
    AND ebx, ebp
    TEST rdi, rdi
    JZ loc_465688
loc_465507:
    CALL _fgetc
    CMP eax, 0FFFFFFFFh
    MOV ebp, eax
    JZ loc_4654E0
loc_465513:
    AND r12d, ebx
    ADD r15, 1
    TEST eax, eax
    JS loc_46568B
loc_465522:
    JZ loc_465AAD
loc_465528:
    CALL ___ctype_b_loc
    MOV rcx, [rax]
    MOVSXD rdx, ebp
    TEST byte ptr [rcx+rdx*2+1], 40h
    JZ loc_4653C3
loc_46553E:
    MOV [r13+r14+0], bpl
    MOVZX eax, cs:byte_752BF0
    MOV rsi, [rsp+88h+var_78]
    JMP loc_4654A0
loc_465554:
    MOV eax, 1
loc_465559:
    MOV rsi, [rsp+88h+var_40]
    XOR rsi, fs:28h
    JNZ loc_465E36
loc_46556D:
    ADD rsp, 58h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46557C:
    MOV cs:qword_752C00, offset nullsub_3
    MOV cs:dword_752C20, 0
    MOV r15d, 1
    JMP loc_464BA0
loc_46559C:
    MOV edx, 5
    MOV esi, offset aInvalidOutputA
    XOR edi, edi
    CALL _dcgettext
    MOVSX ecx, r15b
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4655C2:
    MOV cs:qword_752C00, offset sub_4620E0
    MOV cs:dword_752C24, 8
    MOV r15d, 1
    MOV cs:dword_752C20, 7
    JMP loc_464BA0
loc_4655EC:
    TEST dl, dl
    JZ loc_465170
loc_4655F4:
    CMP r12d, 2
    JZ loc_465BE0
loc_4655FE:
    CMP r12d, 3
    JZ loc_464F87
loc_465608:
    CMP r12d, 1
    JNZ loc_465158
loc_465612:
    MOV rbp, [rbx+rax*8]
    MOVZX eax, byte ptr [rbp+0]
    TEST al, al
    JZ loc_465C02
loc_465622:
    CMP al, 2Bh
    JZ loc_4659AE
loc_46562A:
    MOV esi, 2Eh
    MOV rdi, rbp
    CALL _strchr
    TEST rax, rax
    MOV edx, 0Ah
    JZ loc_465DA3
loc_465645:
    LEA rcx, [rsp+88h+longind]
    XOR esi, esi
    MOV r8d, offset aBb_0
    MOV rdi, rbp
    CALL sub_4DF370
    TEST eax, eax
    JNZ loc_465C02
loc_465662:
    MOV rax, qword ptr [rsp+88h+longind]
    ADD rbx, 8
    XOR ebp, ebp
    XOR r12d, r12d
    MOV cs:qword_752BF8, rax
    MOVZX eax, cs:byte_752C10
    JMP loc_465179
loc_465688:
    AND r12d, ebx
loc_46568B:
    MOV rdi, r13
    CALL _free
loc_465693:
    MOVZX r13d, r12b
loc_465697:
    AND r13d, [rsp+88h+var_88]
    MOV eax, r13d
    AND eax, 1
    MOV byte ptr [rsp+88h+var_88], al
loc_4656A4:
    CMP cs:byte_752BA4, 0
    JNZ loc_4656E0
loc_4656AD:
    MOVZX eax, byte ptr [rsp+88h+var_88]
    XOR eax, 1
    MOVZX eax, al
    JMP loc_465559
loc_4656BC:
    LEA rsi, [rsp+88h+var_60]
    MOV rdi, r13
    CALL sub_4DCC70
    MOV r13, rax
    JMP loc_4654C0
loc_4656D1:
    MOV edi, offset aOs
    CALL sub_462EB0
    JMP loc_4651D1
loc_4656E0:
    MOV rdi, cs:stdin
    CALL sub_4E0210
    CMP eax, 0FFFFFFFFh
    JNZ loc_4656AD
loc_4656F1:
    MOV edx, 5
    MOV esi, offset aStandardInput
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00h]
loc_465720:
    MOV eax, 2
    XOR ecx, ecx
    MUL rbx
    JO loc_465E13
loc_465730:
    TEST rax, rax
    JS loc_465E0E
loc_465739:
    TEST rcx, rcx
    JNZ loc_465E0E
loc_465742:
    LEA rdi, [rbx+rbx]
    CALL sub_4DCC10
    MOV rdi, cs:qword_752BC0
    MOV r14, rax
    MOV [rsp+88h+ptr], rax
    MOV [rsp+88h+var_58], rax
    MOV rbx, cs:qword_752BF8
    ADD rax, rdi
    CMP cs:byte_752BF0, 0
    MOV [rsp+88h+var_50], rax
    JNZ loc_4658FC
loc_46577B:
    LEA rax, [rsp+88h+var_60]
    MOV r13d, 1
    XOR r12d, r12d
    MOV [rsp+88h+var_78], rax
    MOV rdx, rax
    JMP loc_4657D0
loc_465798:
    JNZ loc_465DF5
loc_46579E:
    XOR r12d, 1
    MOV rdi, rbx
    MOV rcx, r14
    MOVZX eax, r12b
    MOV rsi, r15
    MOV rbp, [rsp+rax*8+88h+var_58]
    MOV rdx, rbp
    MOV r14, rbp
    CALL sub_463C80
    ADD rbx, [rsp+88h+var_60]
    MOV rdi, cs:qword_752BC0
    MOV rdx, [rsp+88h+var_78]
loc_4657D0:
    MOV rsi, r14
    CALL sub_4643B0
    MOV r15, [rsp+88h+var_60]
    AND r13d, eax
    CMP r15, cs:qword_752BC0
    JNB loc_465798
loc_4657E9:
    TEST r15, r15
    JZ loc_4658A7
loc_4657F2:
    MOV rax, cs:qword_752BD0
    TEST rax, rax
    JZ loc_465C16
loc_465802:
    MOV r9, cs:qword_752BD8
    LEA rax, [rax+rax*4]
    MOV edi, 1
    LEA r10, [r9+rax*8]
    NOP word ptr [rax+rax+00000000h]
loc_465820:
    MOV eax, [r9+4]
    MOVSXD rdi, edi
    MOVSXD r8, ds:dword_515120[rax*4]
    MOV rax, rdi
    MOV rsi, r8
    JMP loc_465843
loc_465840:
    MOV rsi, rdx
loc_465843:
    XOR edx, edx
    DIV rsi
    MOV rax, rsi
    TEST rdx, rdx
    JNZ loc_465840
loc_465850:
    XOR edx, edx
    MOV rax, r8
    ADD r9, 28h
    DIV rsi
    IMUL edi, eax
    CMP r9, r10
    JNZ loc_465820
loc_465864:
    MOVSXD rdi, edi
loc_465867:
    LEA rax, [r15+rdi-1]
    XOR edx, edx
    XOR esi, esi
    DIV rdi
    IMUL rdi, rax
    MOV rdx, rdi
    LEA rdi, [r14+r15]
    SUB rdx, r15
    CALL _memset
    MOV eax, r12d
    MOV rdi, rbx
    MOV rcx, r14
    XOR eax, 1
    MOV rsi, r15
    MOVZX eax, al
    MOV rdx, [rsp+rax*8+88h+var_58]
    CALL sub_463C80
    ADD rbx, [rsp+88h+var_60]
loc_4658A7:
    MOV esi, 0Ah
    MOV rdi, rbx
    CALL cs:qword_752C00
    CMP cs:byte_752BF0, 0
    JZ loc_4658D1
loc_4658BE:
    CMP rbx, cs:qword_752BE0
    JB loc_4658D1
loc_4658C7:
    XOR edi, edi
    CALL sub_463820
    AND r13d, eax
loc_4658D1:
    MOV rdi, [rsp+88h+ptr]
    MOVZX r13d, r13b
    CALL _free
    JMP loc_465697
loc_4658E4:
    CMP ebp, 0Fh
    JLE loc_465A67
loc_4658ED:
    MOVSXD rbx, ebp
    MOV cs:qword_752BC0, rbx
    JMP loc_465318
loc_4658FC:
    MOV rax, cs:qword_752BE0
    MOV r13d, 1
    CMP rbx, rax
    JNB loc_465BD2
loc_465912:
    LEA rsi, [rsp+88h+var_60]
    XOR r12d, r12d
    MOV [rsp+88h+var_78], rsi
    MOV rdx, rsi
    JMP loc_465970
loc_465928:
    JNZ loc_465E1D
loc_46592E:
    XOR r12d, 1
    MOV rdi, rbx
    MOV rcx, r14
    MOVZX eax, r12b
    MOV rsi, r15
    MOV rbp, [rsp+rax*8+88h+var_58]
    MOV rdx, rbp
    CALL sub_463C80
    ADD rbx, [rsp+88h+var_60]
    MOV rax, cs:qword_752BE0
    CMP rax, rbx
    JBE loc_465BD2
loc_465961:
    MOV rdi, cs:qword_752BC0
    MOV rdx, [rsp+88h+var_78]
    MOV r14, rbp
loc_465970:
    SUB rax, rbx
    MOV rsi, r14
    CMP rax, rdi
    CMOVBE rdi, rax
    CALL sub_4643B0
    MOV r15, [rsp+88h+var_60]
    AND r13d, eax
    CMP r15, cs:qword_752BC0
    JNB loc_465928
loc_465993:
    JMP loc_4657E9
loc_465998:
    TEST dl, dl
    JNZ loc_465612
loc_4659A0:
    MOV rbp, [rbx+rax*8]
    CMP byte ptr [rbp+0], 2Bh
    JNZ loc_465170
loc_4659AE:
    ADD rbp, 1
    JMP loc_46562A
loc_4659B7:
    TEST dl, dl
    JNZ loc_465BE0
loc_4659BF:
    MOV r15, [rbx+rax*8+8]
    MOVZX eax, byte ptr [r15]
    CMP al, 2Bh
    JZ loc_465BF9
loc_4659D0:
    MOVSX edx, al
    SUB edx, 30h
    CMP edx, 9
    JA loc_465170
loc_4659DF:
    TEST al, al
    JZ loc_465170
loc_4659E7:
    MOV esi, 2Eh
    MOV rdi, r15
    CALL _strchr
    TEST rax, rax
    MOV edx, 0Ah
    JZ loc_465CE0
loc_465A02:
    LEA rax, [rsp+88h+var_60]
    XOR esi, esi
    MOV r8d, offset aBb_0
    MOV rdi, r15
    MOV rcx, rax
    CALL sub_4DF370
    TEST eax, eax
    JNZ loc_465D10
loc_465A22:
    CMP cs:byte_752C11, 0
    JNZ loc_465C95
loc_465A2F:
    MOV rax, [rsp+88h+var_60]
    XOR ebp, ebp
    MOV r12d, 1
    MOV cs:qword_752BF8, rax
    MOVSXD rax, cs:optind
    ADD rax, 1
    MOV rdx, [rbx+rax*8-8]
    MOV [rbx+rax*8], rdx
    ADD rbx, 8
    MOVZX eax, cs:byte_752C10
    JMP loc_465179
loc_465A67:
    MOV eax, 10h
    CDQ 
    IDIV ebp
    IMUL eax, ebp
    MOVSXD rbx, eax
loc_465A75:
    MOV cs:qword_752BC0, rbx
    JMP loc_46530C
loc_465A81:
    TEST r14b, r14b
    MOV ebx, 10h
    JZ loc_465A75
loc_465A8B:
    TEST r13, r13
    MOV ebx, 1
    MOV ebp, 1
    JZ loc_4652D9
loc_465A9E:
    MOV cs:qword_752BC0, r13
    MOV rbx, r13
    JMP loc_46530C
loc_465AAD:
    MOV rdi, r14
    MOV byte ptr [r13+r14+0], 0
    MOV esi, 20h
    NOT rdi
    LEA rbx, [r13+1]
    ADD rdi, r15
    CALL cs:qword_752C00
    MOVSX ecx, byte ptr [r13+0]
    TEST ecx, ecx
    MOV edx, ecx
    JZ loc_465B1D
loc_465AD6:
    NOP word ptr [rax+rax+00000000h]
loc_465AE0:
    LEA eax, [rdx-7]
    CMP al, 6
    JA def_465AFF
loc_465AEB:
    MOVZX eax, al
    MOV rcx, cs:stdout
    MOV edx, 2
    MOV esi, 1
    JMP ds:jpt_465AFF[rax*8]
loc_465B06:
    MOV edi, offset asc_513501
    CALL _fwrite_unlocked
loc_465B10:
    MOVSX ecx, byte ptr [rbx]
    ADD rbx, 1
    TEST ecx, ecx
    MOV edx, ecx
    JNZ loc_465AE0
loc_465B1D:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_465D54
loc_465B32:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    JMP loc_4653C3
loc_465B42:
    MOV edi, offset aV
    CALL _fwrite_unlocked
    JMP loc_465B10
loc_465B4E:
    MOV edi, offset aN_0
    CALL _fwrite_unlocked
    JMP loc_465B10
loc_465B5A:
    MOV edi, offset aT_0
    CALL _fwrite_unlocked
    JMP loc_465B10
loc_465B66:
    MOV edi, offset unk_513504
    CALL _fwrite_unlocked
    JMP loc_465B10
loc_465B72:
    MOV edi, offset aB
    CALL _fwrite_unlocked
    JMP loc_465B10
loc_465B7E:
    MOV edi, offset aA
    CALL _fwrite_unlocked
    JMP loc_465B10
loc_465B8A:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_465C88
loc_465B9F:
    LEA rcx, [rax+1]
    MOV [rdi+28h], rcx
    MOV [rax], dl
    JMP loc_465B10
loc_465BAE:
    MOV cs:dword_752C24, 8
    MOV cs:dword_752C20, 7
    MOV cs:qword_752C00, offset sub_4641F0
    JMP loc_465199
loc_465BD2:
    MOV [rsp+88h+var_60], 0
    JMP loc_4658A7
loc_465BE0:
    MOV r15, [rbx+rax*8+8]
    MOVZX eax, byte ptr [r15]
    TEST al, al
    JZ loc_465D9B
loc_465BF1:
    CMP al, 2Bh
    JNZ loc_4659E7
loc_465BF9:
    ADD r15, 1
    JMP loc_4659E7
loc_465C02:
    MOVZX eax, cs:byte_752C10
    XOR ebp, ebp
    MOV r12d, 1
    JMP loc_465179
loc_465C16:
    MOV edi, 1
    JMP loc_465867
loc_465C20:
    MOV rdi, rbp
    JMP loc_464FFA
loc_465C28:
    LEA rax, [rsp+88h+var_60]
    MOV rsi, rax
    MOVSXD rax, cs:optind
    MOV rdi, [rbx+rax*8+10h]
    CALL sub_462210
    TEST al, al
    JZ loc_464FDB
loc_465C49:
    MOV rdx, qword ptr [rsp+88h+longind]
    MOV cs:byte_752C10, 1
    MOV r12d, 1
    MOV rbp, [rsp+88h+var_60]
    MOV cs:qword_752BF8, rdx
    MOVSXD rdx, cs:optind
    ADD rdx, 2
    MOV rcx, [rbx+rdx*8-10h]
    MOV [rbx+rdx*8], rcx
    ADD rbx, 10h
    JMP loc_465179
loc_465C88:
    MOVZX esi, cl
    CALL ___overflow
    JMP loc_465B10
loc_465C95:
    MOVSXD rax, cs:optind
    LEA rsi, [rsp+88h+longind]
    MOV rdi, [rbx+rax*8]
    CALL sub_462210
    TEST al, al
    JZ loc_465A2F
loc_465CB2:
    MOV rdx, qword ptr [rsp+88h+longind]
    MOV cs:byte_752C10, 1
    ADD rbx, 10h
    MOV rbp, [rsp+88h+var_60]
    XOR r12d, r12d
    MOV cs:qword_752BF8, rdx
    JMP loc_465179
loc_465CE0:
    CMP byte ptr [r15], 30h
    MOV edx, 8
    JNZ loc_465A02
loc_465CEF:
    MOVZX eax, byte ptr [r15+1]
    XOR edx, edx
    AND eax, 0FFFFFFDFh
    CMP al, 58h
    SETZ dl
    LEA edx, ds:8[rdx*8]
    JMP loc_465A02
loc_465D10:
    MOV r12d, 2
    JMP loc_464FE1
loc_465D1B:
    MOV rdi, r13
    CALL _free
    XOR edi, edi
    CALL sub_463820
    AND r12d, eax
    JMP loc_465693
loc_465D32:
    MOV edx, 5
    MOV esi, offset aSkipBytesReadB
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_465D54:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_4653C3
loc_465D63:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_514E80
    MOV edx, 77h
    MOV edi, eax
    CALL sub_4DF210
loc_465D7F:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_514E80
    MOV edx, 53h
    MOV edi, eax
    CALL sub_4DF210
loc_465D9B:
    MOV rdi, r15
    JMP loc_464FFA
loc_465DA3:
    CMP byte ptr [rbp+0], 30h
    MOV edx, 8
    JNZ loc_465645
loc_465DB2:
    MOVZX eax, byte ptr [rbp+1]
    XOR edx, edx
    AND eax, 0FFFFFFDFh
    CMP al, 58h
    SETZ dl
    LEA edx, ds:8[rdx*8]
    JMP loc_465645
loc_465DCC:
    CMP byte ptr [rbp+0], 30h
    MOV edx, 8
    JNZ loc_464FBE
loc_465DDB:
    MOVZX eax, byte ptr [rbp+1]
    XOR edx, edx
    AND eax, 0FFFFFFDFh
    CMP al, 58h
    SETZ dl
    LEA edx, ds:8[rdx*8]
    JMP loc_464FBE
loc_465DF5:
    MOV ecx, offset aDump
    MOV edx, 583h
    MOV esi, offset aSrcOdC
    MOV edi, offset aNBytesReadByte
    CALL ___assert_fail
loc_465E0E:
    CALL sub_42C250
loc_465E13:
    MOV ecx, 1
    JMP loc_465730
loc_465E1D:
    MOV ecx, offset aDump
    MOV edx, 575h
    MOV esi, offset aSrcOdC
    MOV edi, offset aNBytesReadByte
    CALL ___assert_fail
loc_465E36:
    CALL ___stack_chk_fail
loc_465E3B:
    MOV r8, cs:optarg
    MOV esi, [rsp+88h+longind]
    MOV ecx, offset stru_514E80
    MOV edx, 6Ah
    MOV edi, eax
    CALL sub_4DF210
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4088', '0x2A', '0x18', '0x10', '0x8', '0x4', '0x3', '0x7'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Processing', 'inferred_category': 'Utility/Helper'}

##### Q 202 - blake2b_init_key
```assembly
loc_419970:
    PUSH rbp
    PUSH rbx
    SUB rsp, 0D8h
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_20], rax
    XOR eax, eax
    LEA rax, [rsi-1]
    CMP rax, 3Fh
    JA loc_419AC8
loc_41999A:
    LEA rax, [rcx-1]
    MOV r9, rcx
    CMP rax, 3Fh
    JA loc_419AC8
loc_4199AB:
    TEST rdx, rdx
    MOV r10, rdx
    JZ loc_419AC8
loc_4199B7:
    XOR eax, eax
    MOV [rsp+0E8h+var_E8], sil
    MOV rsi, rsp
    MOV rbp, rdi
    MOV [rsp+0E8h+var_E7], cl
    MOV [rsp+0E8h+var_E6], 1
    MOV [rsp+0E8h+var_E5], 1
    MOV [rsp+0E8h+var_E4], 0
    MOV [rsp+0E8h+var_E3], 0
    MOV [rsp+0E8h+var_E2], 0
    MOV [rsp+0E8h+var_E1], 0
    MOV [rsp+0E8h+var_E0], 0
    MOV [rsp+0E8h+var_DF], 0
    MOV [rsp+0E8h+var_DE], 0
    MOV [rsp+0E8h+var_DD], 0
    MOV [rsp+0E8h+var_DC], 0
    MOV [rsp+0E8h+var_DB], 0
    MOV [rsp+0E8h+var_DA], 0
    MOV [rsp+0E8h+var_D9], 0
    MOV [rsp+0E8h+var_D8], 0
    MOV [rsp+0E8h+var_D7], 0
    MOV [rsp+0E8h+var_D6], 0
    MOV [rsp+0E8h+var_CE], 0
    MOV [rsp+0E8h+var_CA], ax
    MOV [rsp+0E8h+var_C8], 0
    MOV [rsp+0E8h+var_C0], 0
    MOV [rsp+0E8h+var_B8], 0
    MOV [rsp+0E8h+var_B0], 0
    CALL sub_4197B0
    TEST eax, eax
    JS loc_419AC8
loc_419A5A:
    LEA rbx, [rsp+0E8h+s]
    XOR eax, eax
    MOV ecx, 10h
    MOV rdx, r9
    MOV rsi, r10
    MOV rdi, rbx
    REP 
    MOV ecx, 80h
    MOV rdi, rbx
    CALL ___memcpy_chk
    MOV edx, 80h
    MOV rsi, rbx
    MOV rdi, rbp
    CALL sub_419690
    MOV rax, cs:off_71FC68
    MOV edx, 80h
    XOR esi, esi
    MOV rdi, rbx
    CALL rax
    XOR eax, eax
loc_419AA4:
    MOV rdx, [rsp+0E8h+var_20]
    XOR rdx, fs:28h
    JNZ loc_419ACF
loc_419AB7:
    ADD rsp, 0D8h
    POP rbx
    POP rbp
    RETN 
loc_419AC8:
    MOV eax, 0FFFFFFFFh
    JMP loc_419AA4
loc_419ACF:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'BitwiseOperations', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x3D0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Conversion', 'inferred_category': 'Utility'}

##### T 202 - blake2b_init_key
```assembly
loc_41B300:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0E8h
    MOV rax, fs:28h
    MOV [rsp+118h+var_40], rax
    XOR eax, eax
    LEA rax, [rsi-1]
    CMP rax, 3Fh
    JA loc_41B688
loc_41B332:
    LEA rax, [rcx-1]
    MOV r8, rdx
    MOV rdx, rcx
    CMP rax, 3Fh
    JA loc_41B688
loc_41B346:
    TEST r8, r8
    JZ loc_41B688
loc_41B34F:
    XOR eax, eax
    MOV rbx, rdi
    MOV byte ptr [rsp+118h+var_108], sil
    MOV byte ptr [rsp+118h+var_108+1], cl
    MOV word ptr [rsp+118h+var_F8+0Eh], ax
    LEA rdi, [rdi+8]
    MOV byte ptr [rsp+118h+var_108+2], 1
    MOV byte ptr [rsp+118h+var_108+3], 1
    MOV rcx, rbx
    MOV byte ptr [rsp+118h+var_108+4], 0
    MOV byte ptr [rsp+118h+var_108+5], 0
    XOR eax, eax
    MOV byte ptr [rsp+118h+var_108+6], 0
    MOV byte ptr [rsp+118h+var_108+7], 0
    LEA r13, [rsp+118h+s]
    MOV byte ptr [rsp+118h+var_108+8], 0
    MOV byte ptr [rsp+118h+var_108+9], 0
    MOV ebp, 80h
    MOV byte ptr [rsp+118h+var_108+0Ah], 0
    MOV byte ptr [rsp+118h+var_108+0Bh], 0
    MOV byte ptr [rsp+118h+var_108+0Ch], 0
    MOV byte ptr [rsp+118h+var_108+0Dh], 0
    MOV byte ptr [rsp+118h+var_108+0Eh], 0
    MOV byte ptr [rsp+118h+var_108+0Fh], 0
    MOV byte ptr [rsp+118h+var_F8], 0
    MOV byte ptr [rsp+118h+var_F8+1], 0
    MOV qword ptr [rsp+118h+var_F8+2], 0
    MOV dword ptr [rsp+118h+var_F8+0Ah], 0
    MOV qword ptr [rsp+118h+var_E8], 0
    MOV qword ptr [rsp+118h+var_E8+8], 0
    MOV qword ptr [rsp+118h+var_D8], 0
    MOV qword ptr [rsp+118h+var_D8+8], 0
    MOV qword ptr [rdi+0E8h], 0
    AND rdi, 0FFFFFFFFFFFFFFF8h
    SUB rcx, rdi
    ADD ecx, 0F8h
    SHR ecx, 3
    REP 
    MOV rdi, 6A09E667F3BCC908h
    MOV rcx, 0A54FF53A5F1D36F1h
    MOV [rbx], rdi
    MOV rdi, 0BB67AE8584CAA73Bh
    MOV [rbx+18h], rcx
    MOV [rbx+8], rdi
    MOV rdi, 3C6EF372FE94F82Bh
    MOV rcx, 9B05688C2B3E6C1Fh
    MOV [rbx+10h], rdi
    MOV rdi, 510E527FADE682D1h
    MOV [rbx+20h], rdi
    MOV [rbx+28h], rcx
    MOV rdi, 1F83D9ABFB41BD6Bh
    MOVDQU xmm0, xmmword ptr [rbx]
    MOV rcx, 5BE0CD19137E2179h
    MOV [rbx+30h], rdi
    MOV [rbx+38h], rcx
    MOV rdi, r13
    PXOR xmm0, [rsp+118h+var_108]
    MOV ecx, 10h
    REP 
    MOV [rbx+0E8h], rsi
    MOV ecx, 80h
    MOV rsi, r8
    MOV rdi, r13
    MOVUPS xmmword ptr [rbx], xmm0
    MOVDQU xmm0, xmmword ptr [rbx+10h]
    PXOR xmm0, [rsp+118h+var_F8]
    MOVUPS xmmword ptr [rbx+10h], xmm0
    MOVDQU xmm0, xmmword ptr [rbx+20h]
    PXOR xmm0, [rsp+118h+var_E8]
    MOVUPS xmmword ptr [rbx+20h], xmm0
    MOVDQU xmm0, xmmword ptr [rbx+30h]
    PXOR xmm0, [rsp+118h+var_D8]
    MOVUPS xmmword ptr [rbx+30h], xmm0
    CALL ___memcpy_chk
    MOV r12, [rbx+0E0h]
    SUB rbp, r12
    CMP rbp, 7Fh
    JBE loc_41B5C0
loc_41B4F7:
    LEA rax, [rbx+60h]
    MOV rbp, r13
    MOV [rsp+118h+var_110], rax
    MOV rax, r12
    MOV r12d, 80h
loc_41B50C:
    MOV r14, [rsp+118h+var_110]
    MOV ecx, r12d
    ADD r14, rax
    CMP r12d, 8
    JB loc_41B598
loc_41B51D:
    MOV rax, [rbp+0]
    LEA rdi, [r14+8]
    MOV rsi, rbp
    AND rdi, 0FFFFFFFFFFFFFFF8h
    MOV [r14], rax
    MOV eax, r12d
    MOV rdx, [rbp+rax-8]
    MOV [r14+rax-8], rdx
    SUB r14, rdi
    LEA ecx, [r12+r14]
    SUB rsi, r14
    SHR ecx, 3
    REP 
loc_41B54C:
    ADD [rbx+0E0h], r12
    MOV rax, cs:off_742C68
    MOV edx, 80h
    XOR esi, esi
    MOV rdi, r13
    CALL rax
    XOR eax, eax
loc_41B568:
    MOV rdx, [rsp+118h+var_40]
    XOR rdx, fs:28h
    JNZ loc_41B6AC
loc_41B57F:
    ADD rsp, 0E8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41B598:
    TEST r12b, 4
    JNZ loc_41B698
loc_41B5A2:
    TEST ecx, ecx
    JZ loc_41B54C
loc_41B5A6:
    MOVZX eax, byte ptr [rbp+0]
    TEST cl, 2
    MOV [r14], al
    JZ loc_41B54C
loc_41B5B2:
    MOVZX eax, word ptr [rbp+rcx-2]
    MOV [r14+rcx-2], ax
    JMP loc_41B54C
loc_41B5C0:
    LEA rax, [rbx+60h]
    MOV rdx, rbp
    MOV rsi, r13
    MOV qword ptr [rbx+0E0h], 0
    MOV r14, r12
    LEA rdi, [rax+r12]
    MOV r15, rax
    MOV [rsp+118h+var_110], rax
    CALL _memcpy
    MOV rax, [rbx+40h]
    MOV rsi, r15
    MOV rdi, rbx
    SUB rax, 0FFFFFFFFFFFFFF80h
    CMP rax, 7Fh
    MOV [rbx+40h], rax
    SETBE al
    ADD rbp, r13
    MOVZX eax, al
    ADD [rbx+48h], rax
    MOV r15, rbp
    CALL sub_419950
    CMP r12, 80h
    JBE loc_41B679
loc_41B61D:
    NOP dword ptr [rax]
loc_41B620:
    MOV rax, [rbx+40h]
    MOV rsi, r15
    MOV rdi, rbx
    SUB rax, 0FFFFFFFFFFFFFF80h
    CMP rax, 7Fh
    MOV [rbx+40h], rax
    SETBE al
    ADD r14, 0FFFFFFFFFFFFFF80h
    SUB r15, 0FFFFFFFFFFFFFF80h
    MOVZX eax, al
    ADD [rbx+48h], rax
    CALL sub_419950
    CMP r14, 80h
    JA loc_41B620
loc_41B656:
    LEA rax, [r12-81h]
    SHR rax, 7
    LEA rdx, [rax+1]
    NEG rax
    SHL rax, 7
    SHL rdx, 7
    LEA r12, [r12+rax-80h]
    ADD rbp, rdx
loc_41B679:
    MOV rax, [rbx+0E0h]
    JMP loc_41B50C
loc_41B688:
    MOV eax, 0FFFFFFFFh
    JMP loc_41B568
loc_41B698:
    MOV eax, [rbp+0]
    MOV [r14], eax
    MOV eax, [rbp+rcx-4]
    MOV [r14+rcx-4], eax
    JMP loc_41B54C
loc_41B6AC:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'BitwiseOperation'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x18', '0x3D0', '0x3D4', '0x3D8', '0x3DC'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Data Conversion'}

##### Q 203 - print_ascii
```assembly
loc_45A780:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 38h
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    CMP rdi, rsi
    MOV [rsp+68h+var_64], r8d
    JBE loc_45A824
loc_45A7A8:
    LEA rbx, [rdi-1]
    MOVSXD rax, r9d
    MOV r12, rdi
    MOV r13, rsi
    MOV r14, rdx
    MOV [rsp+68h+var_60], rax
    IMUL rbx, rax
    MOV r15, rdi
    NOP dword ptr [rax+00h]
loc_45A7C8:
    XOR edx, edx
    MOV rax, rbx
    ADD r14, 1
    MOVZX r8d, byte ptr [r14-1]
    SUB r15, 1
    DIV r12
    CMP r8b, 0Dh
    MOVZX edx, r8b
    MOV rbp, rax
    JA def_45A7EE
loc_45A7EE:
    JMP ds:jpt_45A7EE[rdx*8]
loc_45A7F8:
    MOV edx, offset aA
    NOP dword ptr [rax]
loc_45A800:
    MOV eax, [rsp+68h+var_64]
    SUB r9d, ebp
    MOV edi, offset off_4D98BB
    LEA esi, [r9+rax]
    XOR eax, eax
    CALL sub_4BB990
    SUB rbx, [rsp+68h+var_60]
    CMP r13, r15
    MOV r9d, ebp
    JB loc_45A7C8
loc_45A824:
    MOV rax, [rsp+68h+var_40]
    XOR rax, fs:28h
    JNZ loc_45A919
loc_45A838:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45A850:
    MOV edx, offset a0
    JMP loc_45A800
loc_45A860:
    MOV edx, offset unk_4F0594
    JMP loc_45A800
loc_45A870:
    MOV edx, offset asc_4F0591
    JMP loc_45A800
loc_45A880:
    MOV edx, offset aV
    JMP loc_45A800
loc_45A890:
    MOV edx, offset aN_0
    JMP loc_45A800
loc_45A8A0:
    MOV edx, offset aT_0
    JMP loc_45A800
loc_45A8B0:
    MOV edx, offset aB
    JMP loc_45A800
loc_45A8C0:
    MOV [rsp+68h+var_54], r9d
    MOV [rsp+68h+var_50], rdx
    MOV [rsp+68h+var_58], r8d
    CALL ___ctype_b_loc
    MOV rdx, [rsp+68h+var_50]
    MOV rax, [rax]
    MOV ecx, 4E6152h
    MOV r8d, [rsp+68h+var_58]
    LEA rdi, [rsp+68h+var_48]
    MOV esi, 1
    TEST byte ptr [rax+rdx*2+1], 40h
    MOV eax, offset a03o
    MOV edx, 4
    CMOVZ rcx, rax
    XOR eax, eax
    CALL ___sprintf_chk
    LEA rdx, [rsp+68h+var_48]
    MOV r9d, [rsp+68h+var_54]
    JMP loc_45A800
loc_45A919:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Indirect Call'}

##### T 203 - print_ascii
```assembly
loc_463680:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 38h
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    CMP rdi, rsi
    MOV [rsp+68h+var_64], r8d
    JBE loc_463724
loc_4636A8:
    LEA rbx, [rdi-1]
    MOVSXD rax, r9d
    MOV r12, rdi
    MOV r13, rsi
    MOV r14, rdx
    MOV [rsp+68h+var_60], rax
    IMUL rbx, rax
    MOV r15, rdi
    NOP dword ptr [rax+00h]
loc_4636C8:
    XOR edx, edx
    MOV rax, rbx
    ADD r14, 1
    MOVZX r8d, byte ptr [r14-1]
    SUB r15, 1
    DIV r12
    CMP r8b, 0Dh
    MOVZX edx, r8b
    MOV rbp, rax
    JA def_4636EE
loc_4636EE:
    JMP ds:jpt_4636EE[rdx*8]
loc_4636F8:
    MOV edx, offset aA
    NOP dword ptr [rax]
loc_463700:
    MOV eax, [rsp+68h+var_64]
    SUB r9d, ebp
    MOV edi, offset aS_4
    LEA esi, [r9+rax]
    XOR eax, eax
    CALL sub_4DD600
    SUB rbx, [rsp+68h+var_60]
    CMP r13, r15
    MOV r9d, ebp
    JB loc_4636C8
loc_463724:
    MOV rax, [rsp+68h+var_40]
    XOR rax, fs:28h
    JNZ loc_463819
loc_463738:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_463750:
    MOV edx, offset a0
    JMP loc_463700
loc_463760:
    MOV edx, offset unk_513504
    JMP loc_463700
loc_463770:
    MOV edx, offset asc_513501
    JMP loc_463700
loc_463780:
    MOV edx, offset aV
    JMP loc_463700
loc_463790:
    MOV edx, offset aN_0
    JMP loc_463700
loc_4637A0:
    MOV edx, offset aT_0
    JMP loc_463700
loc_4637B0:
    MOV edx, offset aB
    JMP loc_463700
loc_4637C0:
    MOV [rsp+68h+var_54], r9d
    MOV [rsp+68h+var_50], rdx
    MOV [rsp+68h+var_58], r8d
    CALL ___ctype_b_loc
    MOV rdx, [rsp+68h+var_50]
    MOV rax, [rax]
    MOV ecx, 509092h
    MOV r8d, [rsp+68h+var_58]
    LEA rdi, [rsp+68h+var_48]
    MOV esi, 1
    TEST byte ptr [rax+rdx*2+1], 40h
    MOV eax, offset a03o
    MOV edx, 4
    CMOVZ rcx, rax
    XOR eax, eax
    CALL ___sprintf_chk
    LEA rdx, [rsp+68h+var_48]
    MOV r9d, [rsp+68h+var_54]
    JMP loc_463700
loc_463819:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Function Prologue/Epilogue'}

##### Q 204 - single_binary_main_mkdir
```assembly
loc_450E30:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV ebp, edi
    PUSH rbx
    MOV rbx, rsi
    XOR r12d, r12d
    SUB rsp, 30h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    MOV [rsp+58h+var_58], 0
    MOV [rsp+58h+var_4C], 1FFh
    MOV [rsp+58h+var_48], 0
    MOV [rsp+58h+var_40], 0
    MOV [rsp+58h+var_44], 0
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
loc_450EB4:
    XOR r8d, r8d
    MOV ecx, offset stru_4EC1C0
    MOV edx, offset aPmVz
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_450FC8
loc_450ED4:
    CMP eax, 5Ah
    JZ loc_450F90
loc_450EDD:
    JLE loc_450F00
loc_450EDF:
    CMP eax, 70h
    JZ loc_450F80
loc_450EE8:
    CMP eax, 76h
    JZ loc_450F50
loc_450EED:
    CMP eax, 6Dh
    JZ loc_450F70
loc_450EF2:
    MOV edi, 1
    CALL sub_450AC0
loc_450F00:
    CMP eax, 0FFFFFF7Dh
    JZ loc_450F18
loc_450F07:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_450EF2
loc_450F0E:
    XOR edi, edi
    CALL sub_450AC0
loc_450F18:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    XOR r9d, r9d
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aMkdir_0
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_450F50:
    MOV edx, 5
    MOV esi, offset aCreatedDirecto_0
    XOR edi, edi
    CALL _dcgettext
    MOV [rsp+58h+var_40], rax
    JMP loc_450EB4
loc_450F70:
    MOV r12, cs:optarg
    JMP loc_450EB4
loc_450F80:
    MOV [rsp+58h+var_58], offset sub_450A20
    JMP loc_450EB4
loc_450F90:
    CMP cs:optarg, 0
    JZ loc_450EB4
loc_450F9E:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aWarningIgnorin_2
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_450EB4
loc_450FC8:
    MOV eax, cs:optind
    CMP ebp, eax
    JZ loc_4510DF
loc_450FD6:
    CMP [rsp+58h+var_58], 0
    JZ loc_45107C
loc_450FE1:
    XOR edi, edi
    CALL _umask
    MOV edi, eax
    MOV r13d, eax
    CALL _umask
    TEST r12, r12
    MOV [rsp+58h+var_50], r13d
    JZ loc_45109C
loc_451000:
    MOV rdi, r12
    CALL sub_4AB880
    TEST rax, rax
    MOV r14, rax
    JZ loc_4510AF
loc_451014:
    LEA r8, [rsp+58h+var_48]
    MOV rcx, rax
    MOV edx, r13d
    MOV esi, 1
    MOV edi, 1FFh
    MOV r12, rsp
    CALL sub_4ABCA0
    MOV rdi, r14
    MOV [rsp+58h+var_4C], eax
    CALL _free
    MOV eax, cs:optind
loc_451043:
    MOVSXD rdx, eax
    MOV edi, ebp
    MOV rcx, r12
    LEA rsi, [rbx+rdx*8]
    SUB edi, eax
    MOV edx, offset sub_450970
    CALL sub_4B7D80
    MOV rcx, [rsp+58h+var_30]
    XOR rcx, fs:28h
    JNZ loc_451103
loc_45106F:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_45107C:
    TEST r12, r12
    JZ loc_4510AA
loc_451081:
    XOR edi, edi
    CALL _umask
    MOV r13d, eax
    MOV edi, eax
    CALL _umask
    MOV [rsp+58h+var_50], r13d
    JMP loc_451000
loc_45109C:
    MOV eax, cs:optind
    MOV [rsp+58h+var_4C], 1FFh
loc_4510AA:
    MOV r12, rsp
    JMP loc_451043
loc_4510AF:
    MOV rdi, r12
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidModeS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4510DF:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aMissingOperand
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_450EF2
loc_451103:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x60'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 204 - single_binary_main_mkdir
```assembly
loc_459640:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV ebp, edi
    PUSH rbx
    MOV rbx, rsi
    XOR r12d, r12d
    SUB rsp, 30h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    MOV [rsp+58h+var_58], 0
    MOV [rsp+58h+var_4C], 1FFh
    MOV [rsp+58h+var_48], 0
    MOV [rsp+58h+var_40], 0
    MOV [rsp+58h+var_44], 0
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
loc_4596C4:
    XOR r8d, r8d
    MOV ecx, offset stru_50F120
    MOV edx, offset aPmVz
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_4597D8
loc_4596E4:
    CMP eax, 5Ah
    JZ loc_4597A0
loc_4596ED:
    JLE loc_459710
loc_4596EF:
    CMP eax, 70h
    JZ loc_459790
loc_4596F8:
    CMP eax, 76h
    JZ loc_459760
loc_4596FD:
    CMP eax, 6Dh
    JZ loc_459780
loc_459702:
    MOV edi, 1
    CALL sub_4592D0
loc_459710:
    CMP eax, 0FFFFFF7Dh
    JZ loc_459728
loc_459717:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_459702
loc_45971E:
    XOR edi, edi
    CALL sub_4592D0
loc_459728:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    XOR r9d, r9d
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aMkdir_0
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_459760:
    MOV edx, 5
    MOV esi, offset aCreatedDirecto_0
    XOR edi, edi
    CALL _dcgettext
    MOV [rsp+58h+var_40], rax
    JMP loc_4596C4
loc_459780:
    MOV r12, cs:optarg
    JMP loc_4596C4
loc_459790:
    MOV [rsp+58h+var_58], offset sub_459200
    JMP loc_4596C4
loc_4597A0:
    CMP cs:optarg, 0
    JZ loc_4596C4
loc_4597AE:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aWarningIgnorin_2
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_4596C4
loc_4597D8:
    MOV eax, cs:optind
    CMP ebp, eax
    JZ loc_4598EF
loc_4597E6:
    CMP [rsp+58h+var_58], 0
    JZ loc_45988C
loc_4597F1:
    XOR edi, edi
    CALL _umask
    MOV edi, eax
    MOV r13d, eax
    CALL _umask
    TEST r12, r12
    MOV [rsp+58h+var_50], r13d
    JZ loc_4598AC
loc_459810:
    MOV rdi, r12
    CALL sub_4C7DA0
    TEST rax, rax
    MOV r14, rax
    JZ loc_4598BF
loc_459824:
    LEA r8, [rsp+58h+var_48]
    MOV rcx, rax
    MOV edx, r13d
    MOV esi, 1
    MOV edi, 1FFh
    MOV r12, rsp
    CALL sub_4C81D0
    MOV rdi, r14
    MOV [rsp+58h+var_4C], eax
    CALL _free
    MOV eax, cs:optind
loc_459853:
    MOVSXD rdx, eax
    MOV edi, ebp
    MOV rcx, r12
    LEA rsi, [rbx+rdx*8]
    SUB edi, eax
    MOV edx, offset sub_459150
    CALL sub_4D7B00
    MOV rcx, [rsp+58h+var_30]
    XOR rcx, fs:28h
    JNZ loc_459913
loc_45987F:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_45988C:
    TEST r12, r12
    JZ loc_4598BA
loc_459891:
    XOR edi, edi
    CALL _umask
    MOV r13d, eax
    MOV edi, eax
    CALL _umask
    MOV [rsp+58h+var_50], r13d
    JMP loc_459810
loc_4598AC:
    MOV eax, cs:optind
    MOV [rsp+58h+var_4C], 1FFh
loc_4598BA:
    MOV r12, rsp
    JMP loc_459853
loc_4598BF:
    MOV rdi, r12
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidModeS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4598EF:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aMissingOperand
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_459702
loc_459913:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x60'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 205 - openat_safer
```assembly
loc_4C5050:
    SUB rsp, 58h
    MOV [rsp+58h+var_20], rcx
    XOR ecx, ecx
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    TEST dl, 40h
    JNZ loc_4C5098
loc_4C5070:
    XOR eax, eax
    CALL _openat
    MOV edi, eax
    CALL sub_4B93D0
    MOV rsi, [rsp+58h+var_40]
    XOR rsi, fs:28h
    JNZ loc_4C50B9
loc_4C508E:
    ADD rsp, 58h
    RETN 
loc_4C5098:
    LEA rax, [rsp+58h+arg_0]
    MOV [rsp+58h+var_58], 18h
    MOV ecx, dword ptr [rsp+58h+var_20]
    MOV [rsp+58h+var_50], rax
    LEA rax, [rsp+58h+var_38]
    MOV [rsp+58h+var_48], rax
    JMP loc_4C5070
loc_4C50B9:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0x7830', '0x78302C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Manipulation', 'inferred_category': 'Utility/Helper'}

##### T 205 - openat_safer
```assembly
loc_4E7DC0:
    SUB rsp, 58h
    MOV [rsp+58h+var_20], rcx
    XOR ecx, ecx
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    TEST dl, 40h
    JNZ loc_4E7E08
loc_4E7DE0:
    XOR eax, eax
    CALL _openat
    MOV edi, eax
    CALL sub_4D95D0
    MOV rsi, [rsp+58h+var_40]
    XOR rsi, fs:28h
    JNZ loc_4E7E29
loc_4E7DFE:
    ADD rsp, 58h
    RETN 
loc_4E7E08:
    LEA rax, [rsp+58h+arg_0]
    MOV [rsp+58h+var_58], 18h
    MOV ecx, dword ptr [rsp+58h+var_20]
    MOV [rsp+58h+var_50], rax
    LEA rax, [rsp+58h+var_38]
    MOV [rsp+58h+var_48], rax
    JMP loc_4E7DE0
loc_4E7E29:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFFFFFFFFFF', '0x7830', '0x3', '0x1', '0x0F', '0x78302C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Manipulation', 'inferred_category': 'Utility/Helper'}

##### Q 206 - single_binary_main_paste
```assembly
loc_45D4D0:
    PUSH r13
    PUSH r12
    MOV r13d, offset a0
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    MOV r12d, offset asc_4D3FAA
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV cs:byte_72FC59, 0
    MOV cs:byte_72FC58, 0
loc_45D533:
    XOR r8d, r8d
    MOV ecx, offset stru_4F24C0
    MOV edx, offset aDSz
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_45D608
loc_45D553:
    CMP eax, 64h
    JZ loc_45D5F0
loc_45D55C:
    JG loc_45D578
loc_45D55E:
    CMP eax, 0FFFFFF7Dh
    JZ loc_45D590
loc_45D565:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_45D5E0
loc_45D56C:
    XOR edi, edi
    CALL sub_45D140
loc_45D578:
    CMP eax, 73h
    JZ loc_45D5D0
loc_45D57D:
    CMP eax, 7Ah
    JNZ loc_45D5E0
loc_45D582:
    MOV cs:byte_71FF7E, 0
    JMP loc_45D533
loc_45D590:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aDavidMIhnat
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aPaste
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_45D5D0:
    MOV cs:byte_72FC58, 1
    JMP loc_45D533
loc_45D5E0:
    MOV edi, 1
    CALL sub_45D140
loc_45D5F0:
    MOV r12, cs:optarg
    CMP byte ptr [r12], 0
    CMOVZ r12, r13
    JMP loc_45D533
loc_45D608:
    MOVSXD rax, cs:optind
    SUB ebp, eax
    JNZ loc_45D620
loc_45D613:
    MOV qword ptr [rbx+rax*8], (offset asc_50610E+3)
    MOV ebp, 1
loc_45D620:
    MOV rdi, r12
    CALL sub_4BB2E0
    MOV rcx, r12
    MOV cs:qword_72FC50, rax
    ADD rax, 1
    JMP loc_45D64B
loc_45D640:
    ADD rcx, 1
    MOV [rax-1], dl
loc_45D647:
    ADD rax, 1
loc_45D64B:
    MOVZX edx, byte ptr [rcx]
    LEA rsi, [rax-1]
    TEST dl, dl
    JZ loc_45D6C8
loc_45D656:
    CMP dl, 5Ch
    JNZ loc_45D640
loc_45D65B:
    MOVZX edx, byte ptr [rcx+1]
    CMP dl, 66h
    JZ loc_45D78C
loc_45D668:
    JG loc_45D6A0
loc_45D66A:
    CMP dl, 30h
    JZ loc_45D772
loc_45D673:
    JLE loc_45D730
loc_45D679:
    CMP dl, 5Ch
    JZ loc_45D783
loc_45D682:
    CMP dl, 62h
    JNZ loc_45D77B
loc_45D68B:
    MOV byte ptr [rax-1], 8
    NOP 
loc_45D690:
    ADD rcx, 2
    JMP loc_45D647
loc_45D6A0:
    CMP dl, 72h
    JZ loc_45D79E
loc_45D6A9:
    JLE loc_45D720
loc_45D6AB:
    CMP dl, 74h
    JZ loc_45D795
loc_45D6B4:
    CMP dl, 76h
    JNZ loc_45D77B
loc_45D6BD:
    MOV byte ptr [rax-1], 0Bh
    JMP loc_45D690
loc_45D6C8:
    CMP cs:byte_72FC58, 0
    MOV edx, offset sub_45C850
    MOV eax, offset sub_45CDD0
    MOV cs:qword_72FC48, rsi
    MOVSXD rdi, ebp
    CMOVZ rax, rdx
    MOVSXD rdx, cs:optind
    LEA rsi, [rbx+rdx*8]
    CALL rax
    MOV rdi, cs:qword_72FC50
    MOV ebx, eax
    CALL _free
    CMP cs:byte_72FC59, 0
    JNZ loc_45D7A7
loc_45D70F:
    ADD rsp, 8
    XOR ebx, 1
    MOVZX eax, bl
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_45D720:
    CMP dl, 6Eh
    JNZ loc_45D77B
loc_45D725:
    MOV byte ptr [rax-1], 0Ah
    JMP loc_45D690
loc_45D730:
    TEST dl, dl
    JNZ loc_45D77B
loc_45D734:
    MOV cs:qword_72FC48, rsi
    MOV rdx, r12
    MOV esi, 6
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aDelimiterListE
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_45D772:
    MOV byte ptr [rax-1], 0
    JMP loc_45D690
loc_45D77B:
    MOV [rax-1], dl
    JMP loc_45D690
loc_45D783:
    MOV byte ptr [rax-1], 5Ch
    JMP loc_45D690
loc_45D78C:
    MOV byte ptr [rax-1], 0Ch
    JMP loc_45D690
loc_45D795:
    MOV byte ptr [rax-1], 9
    JMP loc_45D690
loc_45D79E:
    MOV byte ptr [rax-1], 0Dh
    JMP loc_45D690
loc_45D7A7:
    MOV rdi, cs:stdin
    CALL sub_4BE090
    CMP eax, 0FFFFFFFFh
    JNZ loc_45D70F
loc_45D7BC:
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset asc_50610E+3)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    XCHG ax, ax
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['Comparison', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### T 206 - single_binary_main_paste
```assembly
loc_466AB0:
    PUSH r13
    PUSH r12
    MOV r13d, offset a0
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    MOV r12d, offset asc_4F6825
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV cs:byte_752C39, 0
    MOV cs:byte_752C38, 0
loc_466B13:
    XOR r8d, r8d
    MOV ecx, offset stru_515440
    MOV edx, offset aDSz
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_466BE8
loc_466B33:
    CMP eax, 64h
    JZ loc_466BD0
loc_466B3C:
    JG loc_466B58
loc_466B3E:
    CMP eax, 0FFFFFF7Dh
    JZ loc_466B70
loc_466B45:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_466BC0
loc_466B4C:
    XOR edi, edi
    CALL sub_466720
loc_466B58:
    CMP eax, 73h
    JZ loc_466BB0
loc_466B5D:
    CMP eax, 7Ah
    JNZ loc_466BC0
loc_466B62:
    MOV cs:byte_742F7E, 0
    JMP loc_466B13
loc_466B70:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aDavidMIhnat
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aPaste
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_466BB0:
    MOV cs:byte_752C38, 1
    JMP loc_466B13
loc_466BC0:
    MOV edi, 1
    CALL sub_466720
loc_466BD0:
    MOV r12, cs:optarg
    CMP byte ptr [r12], 0
    CMOVZ r12, r13
    JMP loc_466B13
loc_466BE8:
    MOVSXD rax, cs:optind
    SUB ebp, eax
    JNZ loc_466C00
loc_466BF3:
    MOV qword ptr [rbx+rax*8], (offset asc_52A7CE+3)
    MOV ebp, 1
loc_466C00:
    MOV rdi, r12
    CALL sub_4DCD60
    MOV rcx, r12
    MOV cs:qword_752C30, rax
    ADD rax, 1
    JMP loc_466C2B
loc_466C20:
    ADD rcx, 1
    MOV [rax-1], dl
loc_466C27:
    ADD rax, 1
loc_466C2B:
    MOVZX edx, byte ptr [rcx]
    LEA rsi, [rax-1]
    TEST dl, dl
    JZ loc_466CA8
loc_466C36:
    CMP dl, 5Ch
    JNZ loc_466C20
loc_466C3B:
    MOVZX edx, byte ptr [rcx+1]
    CMP dl, 66h
    JZ loc_466D6C
loc_466C48:
    JG loc_466C80
loc_466C4A:
    CMP dl, 30h
    JZ loc_466D52
loc_466C53:
    JLE loc_466D10
loc_466C59:
    CMP dl, 5Ch
    JZ loc_466D63
loc_466C62:
    CMP dl, 62h
    JNZ loc_466D5B
loc_466C6B:
    MOV byte ptr [rax-1], 8
    NOP 
loc_466C70:
    ADD rcx, 2
    JMP loc_466C27
loc_466C80:
    CMP dl, 72h
    JZ loc_466D7E
loc_466C89:
    JLE loc_466D00
loc_466C8B:
    CMP dl, 74h
    JZ loc_466D75
loc_466C94:
    CMP dl, 76h
    JNZ loc_466D5B
loc_466C9D:
    MOV byte ptr [rax-1], 0Bh
    JMP loc_466C70
loc_466CA8:
    CMP cs:byte_752C38, 0
    MOV edx, offset sub_465E60
    MOV eax, offset sub_4663E0
    MOV cs:qword_752C28, rsi
    MOVSXD rdi, ebp
    CMOVZ rax, rdx
    MOVSXD rdx, cs:optind
    LEA rsi, [rbx+rdx*8]
    CALL rax
    MOV rdi, cs:qword_752C30
    MOV ebx, eax
    CALL _free
    CMP cs:byte_752C39, 0
    JNZ loc_466D87
loc_466CEF:
    ADD rsp, 8
    XOR ebx, 1
    MOVZX eax, bl
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_466D00:
    CMP dl, 6Eh
    JNZ loc_466D5B
loc_466D05:
    MOV byte ptr [rax-1], 0Ah
    JMP loc_466C70
loc_466D10:
    TEST dl, dl
    JNZ loc_466D5B
loc_466D14:
    MOV cs:qword_752C28, rsi
    MOV rdx, r12
    MOV esi, 6
    XOR edi, edi
    CALL sub_4D3C20
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aDelimiterListE
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_466D52:
    MOV byte ptr [rax-1], 0
    JMP loc_466C70
loc_466D5B:
    MOV [rax-1], dl
    JMP loc_466C70
loc_466D63:
    MOV byte ptr [rax-1], 5Ch
    JMP loc_466C70
loc_466D6C:
    MOV byte ptr [rax-1], 0Ch
    JMP loc_466C70
loc_466D75:
    MOV byte ptr [rax-1], 9
    JMP loc_466C70
loc_466D7E:
    MOV byte ptr [rax-1], 0Dh
    JMP loc_466C70
loc_466D87:
    MOV rdi, cs:stdin
    CALL sub_4E0210
    CMP eax, 0FFFFFFFFh
    JNZ loc_466CEF
loc_466D9C:
    CALL ___errno_location
    MOV esi, [rax]
    MOV edx, (offset asc_52A7CE+3)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    XCHG ax, ax
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['Comparison', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 207 - bytes_split
```assembly
loc_47E4F0:
    PUSH r15
    PUSH r14
    MOV r15, r8
    PUSH r13
    PUSH r12
    XOR r12d, r12d
    PUSH rbp
    PUSH rbx
    MOV r14, rdi
    MOV rbp, rdi
    MOV r9d, 1
    MOV ebx, 1
    SUB rsp, 28h
    CMP rcx, 0FFFFFFFFFFFFFFFFh
    MOV [rsp+58h+buf], rsi
    MOV [rsp+58h+nbytes], rdx
    JZ loc_47E5DB
loc_47E529:
    CMP rcx, rdx
    MOV r13, rcx
    SETB [rsp+58h+var_49]
loc_47E534:
    CMP r13, rbp
    JB loc_47E5AA
loc_47E539:
    TEST r15, r15
    MOV rcx, [rsp+58h+buf]
    SETZ r11b
    JMP loc_47E580
loc_47E550:
    TEST r9b, r9b
    JNZ loc_47E584
loc_47E555:
    MOVZX ebx, bl
    ADD r12, rbx
    CMP r12, r15
    SETB bl
    OR ebx, r11d
    MOV eax, ebx
    XOR eax, 1
    CMP r9b, al
    JB loc_47E650
loc_47E572:
    SUB r13, rbp
    ADD rcx, rbp
    MOV rbp, r14
    CMP r14, r13
    JA loc_47E5B0
loc_47E580:
    TEST bl, bl
    JZ loc_47E550
loc_47E584:
    MOV rsi, rcx
    MOVZX edi, bl
    MOV rdx, rbp
    MOV [rsp+58h+var_4A], r11b
    MOV [rsp+58h+var_58], rcx
    CALL sub_47E3E0
    MOVZX r11d, [rsp+58h+var_4A]
    MOV r9d, eax
    MOV rcx, [rsp+58h+var_58]
    JMP loc_47E555
loc_47E5AA:
    MOV rcx, [rsp+58h+buf]
    NOP 
loc_47E5B0:
    TEST r13, r13
    JZ loc_47E5D4
loc_47E5B5:
    TEST r9b, r9b
    JNZ loc_47E610
loc_47E5BA:
    TEST bl, bl
    JNZ loc_47E610
loc_47E5BE:
    MOVZX ebx, bl
    ADD r12, rbx
    CMP r15, r12
    SETZ al
    SUB rbp, r13
    XOR ebx, ebx
    CMP r9b, al
    JB loc_47E650
loc_47E5D4:
    CMP [rsp+58h+var_49], 0
    JNZ loc_47E650
loc_47E5DB:
    TEST r9b, r9b
    JZ loc_47E623
loc_47E5E0:
    MOV rdx, [rsp+58h+nbytes]
    MOV rsi, [rsp+58h+buf]
    XOR edi, edi
    MOV byte ptr [rsp+58h+var_58], r9b
    CALL sub_4B7240
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV r13, rax
    MOVZX r9d, byte ptr [rsp+58h+var_58]
    JZ loc_47E67E
loc_47E603:
    TEST rax, rax
    SETZ [rsp+58h+var_49]
    JMP loc_47E534
loc_47E610:
    MOVZX edi, bl
    MOV rdx, r13
    MOV rsi, rcx
    CALL sub_47E3E0
    MOV r9d, eax
    JMP loc_47E5BE
loc_47E623:
    MOV rsi, rbp
    XOR edi, edi
    MOV edx, 1
    MOV byte ptr [rsp+58h+var_58], r9b
    CALL _lseek
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV eax, 1
    MOVZX r9d, byte ptr [rsp+58h+var_58]
    CMOVNZ rbp, r14
    CMOVNZ ebx, eax
    JMP loc_47E5E0
loc_47E650:
    CMP r12, r15
    JNB loc_47E66F
loc_47E655:
    NOP dword ptr [rax]
loc_47E658:
    XOR edx, edx
    XOR esi, esi
    MOV edi, 1
    ADD r12, 1
    CALL sub_47E3E0
    CMP r15, r12
    JA loc_47E658
loc_47E66F:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_47E67E:
    MOV rdx, cs:qword_730CD0
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x70', '0x18', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Access', 'inferred_category': 'Utility'}

##### T 207 - bytes_split
```assembly
loc_492640:
    PUSH r15
    PUSH r14
    MOV r14, r8
    PUSH r13
    PUSH r12
    MOV r13, rcx
    PUSH rbp
    PUSH rbx
    XOR r12d, r12d
    MOV rbp, rdi
    MOV ecx, 1
    MOV ebx, 1
    SUB rsp, 78h
    MOV [rsp+0A8h+buf], rsi
    MOV [rsp+0A8h+var_A0], rdi
    MOV rsi, fs:28h
    MOV [rsp+0A8h+var_40], rsi
    XOR esi, esi
    CMP r13, 0FFFFFFFFFFFFFFFFh
    MOV [rsp+0A8h+nbytes], rdx
    JZ loc_492971
loc_49268D:
    CMP r13, rdx
    SETB [rsp+0A8h+var_75]
loc_492695:
    CMP r13, rbp
    MOV r15, [rsp+0A8h+buf]
    JNB loc_4926E2
loc_49269F:
    JMP loc_492940
loc_4926A8:
    TEST bl, bl
    JNZ loc_492750
loc_4926B0:
    MOVZX ebx, bl
    ADD r12, rbx
    TEST r14, r14
    SETZ bl
    CMP r12, r14
    SETB al
    OR bl, al
    JZ loc_4929C0
loc_4926CA:
    XOR ecx, ecx
loc_4926CC:
    ADD r15, rbp
    SUB r13, rbp
    CMP [rsp+0A8h+var_A0], r13
    MOV rbp, [rsp+0A8h+var_A0]
    JA loc_492940
loc_4926E2:
    TEST cl, cl
    JZ loc_4926A8
loc_4926E6:
    TEST bl, bl
    MOV edi, cs:dword_74310C
    JNZ loc_492750
loc_4926F0:
    MOV rdx, rbp
    MOV rsi, r15
    CALL sub_4C2110
    CMP rbp, rax
    JZ loc_492900
loc_492704:
    CALL ___errno_location
    CMP cs:qword_753E20, 0
    JZ loc_492718
loc_492713:
    CMP dword ptr [rax], 20h
    JZ loc_4926B0
loc_492718:
    MOV rdx, cs:value
    MOV esi, 3
    XOR edi, edi
    MOV [rsp+0A8h+var_A0], rax
    CALL sub_4D3C20
    MOV r8, [rsp+0A8h+var_A0]
    MOV rcx, rax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    MOV esi, [r8]
    CALL _error
    NOP dword ptr [rax+00h]
loc_492750:
    TEST r15, r15
    JNZ loc_492767
loc_492755:
    TEST rbp, rbp
    JNZ loc_492767
loc_49275A:
    CMP cs:byte_753C01, 0
    JNZ loc_492900
loc_492767:
    MOV r8d, cs:dword_74310C
    MOV rax, cs:value
    MOV ecx, cs:dword_753E18
    TEST r8d, r8d
    MOV [rsp+0A8h+var_88], rax
    JS loc_4927E9
loc_492785:
    MOV edi, r8d
    MOV dword ptr [rsp+0A8h+var_98], ecx
    MOV dword ptr [rsp+0A8h+var_90], r8d
    CALL _close
    TEST eax, eax
    JS loc_492B0C
loc_49279E:
    MOV rdi, cs:qword_753E00
    MOV ecx, dword ptr [rsp+0A8h+var_98]
    TEST rdi, rdi
    JZ loc_4927E9
loc_4927AE:
    MOV r9, cs:qword_753E10
    MOV r8d, dword ptr [rsp+0A8h+var_90]
    CMP r8d, [r9]
    JZ loc_49291E
loc_4927C3:
    LEA rdx, [r9+4]
    SUB rdi, 1
    XOR eax, eax
    JMP loc_4927E4
loc_4927D0:
    MOV rsi, rdx
    ADD rax, 1
    ADD rdx, 4
    CMP r8d, [rsi]
    JZ loc_492928
loc_4927E4:
    CMP rdi, rax
    JNZ loc_4927D0
loc_4927E9:
    TEST ecx, ecx
    JLE loc_4928A8
loc_4927F1:
    LEA rsi, [rsp+0A8h+stat_loc]
    XOR edx, edx
    MOV edi, ecx
    MOV [rsp+0A8h+stat_loc], 0
    CALL _waitpid
    CMP eax, 0FFFFFFFFh
    JZ loc_4929E8
loc_492810:
    MOV edx, [rsp+0A8h+stat_loc]
    MOV eax, edx
    AND eax, 7Fh
    ADD eax, 1
    CMP al, 1
    JLE loc_492A28
loc_492824:
    AND edx, 7Fh
    CMP edx, 0Dh
    JZ loc_4928A8
loc_49282C:
    LEA rsi, [rsp+0A8h+var_58]
    MOV edi, edx
    MOV dword ptr [rsp+0A8h+var_98], edx
    CALL sub_4E4610
    TEST eax, eax
    MOV r11d, dword ptr [rsp+0A8h+var_98]
    JNZ loc_492AB5
loc_492849:
    MOV r9, cs:qword_753E20
    MOV rdx, [rsp+0A8h+var_88]
    MOV esi, 3
    XOR edi, edi
    MOV [rsp+0A8h+status], r11d
    MOV [rsp+0A8h+var_90], r9
    CALL sub_4D3C20
    MOV edx, 5
    MOV esi, offset aWithFileSSigna
    XOR edi, edi
    MOV [rsp+0A8h+var_98], rax
    CALL _dcgettext
    MOV r11d, [rsp+0A8h+status]
    MOV r9, [rsp+0A8h+var_90]
    LEA r8, [rsp+0A8h+var_58]
    MOV rcx, [rsp+0A8h+var_98]
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    LEA edi, [r11+80h]
    CALL _error
loc_4928A8:
    CALL sub_491220
    MOV rdi, cs:value
    CALL sub_491500
    TEST eax, eax
    MOV edi, eax
    MOV cs:dword_74310C, eax
    JNS loc_4926F0
loc_4928C9:
    MOV rdx, cs:value
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00h]
loc_492900:
    MOVZX ebx, bl
    MOV ecx, 1
    ADD r12, rbx
    CMP r14, r12
    SETNBE bl
    TEST r14, r14
    SETZ al
    OR ebx, eax
    JMP loc_4926CC
loc_49291E:
    MOV rsi, r9
    SUB rdi, 1
    NOP dword ptr [rax]
loc_492928:
    MOV eax, [r9+rdi*4]
    MOV cs:qword_753E00, rdi
    MOV [rsi], eax
    JMP loc_4927E9
loc_492940:
    TEST r13, r13
    JZ loc_49296A
loc_492945:
    TEST cl, cl
    JNZ loc_492AA0
loc_49294D:
    TEST bl, bl
    JNZ loc_492AA0
loc_492955:
    MOVZX ebx, bl
    ADD r12, rbx
    CMP r14, r12
    SETZ al
    SUB rbp, r13
    XOR ebx, ebx
    CMP cl, al
    JB loc_4929B9
loc_49296A:
    CMP [rsp+0A8h+var_75], 0
    JNZ loc_4929B9
loc_492971:
    TEST cl, cl
    JZ loc_492ADD
loc_492979:
    MOV rdx, [rsp+0A8h+nbytes]
    MOV rsi, [rsp+0A8h+buf]
    XOR edi, edi
    MOV byte ptr [rsp+0A8h+var_98], cl
    CALL sub_4D6FC0
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV r13, rax
    MOVZX ecx, byte ptr [rsp+0A8h+var_98]
    JZ loc_492B6A
loc_4929A0:
    TEST rax, rax
    SETZ [rsp+0A8h+var_75]
    JMP loc_492695
loc_4929B0:
    ADD r12, 1
    CALL sub_4922F0
loc_4929B9:
    CMP r14, r12
    JA loc_4929B0
loc_4929BE:
    XCHG ax, ax
loc_4929C0:
    MOV rax, [rsp+0A8h+var_40]
    XOR rax, fs:28h
    JNZ loc_492B65
loc_4929D4:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4929E8:
    CALL ___errno_location
    CMP dword ptr [rax], 0Ah
    JZ loc_492810
loc_4929F6:
    MOV edx, 5
    MOV esi, offset aWaitingForChil
    XOR edi, edi
    MOV [rsp+0A8h+var_A0], rax
    CALL _dcgettext
    MOV rcx, [rsp+0A8h+var_A0]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    MOV esi, [rcx]
    CALL _error
    NOP word ptr [rax+rax+00h]
loc_492A28:
    TEST dl, 7Fh
    JNZ loc_492B3B
loc_492A31:
    MOVZX eax, dh
    TEST eax, eax
    JZ loc_4928A8
loc_492A3C:
    MOV r9, cs:qword_753E20
    MOV rdx, [rsp+0A8h+var_88]
    XOR edi, edi
    MOV esi, 3
    MOV [rsp+0A8h+status], eax
    MOV [rsp+0A8h+var_90], r9
    CALL sub_4D3C20
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aWithFileSExitD
    MOV [rsp+0A8h+var_98], rax
    CALL _dcgettext
    MOV r11d, [rsp+0A8h+status]
    MOV r9, [rsp+0A8h+var_90]
    MOV rdx, rax
    MOV rcx, [rsp+0A8h+var_98]
    XOR esi, esi
    XOR eax, eax
    MOV r8d, r11d
    MOV edi, r11d
    CALL _error
    JMP loc_4928A8
loc_492AA0:
    MOVZX edi, bl
    MOV rdx, r13
    MOV rsi, r15
    CALL sub_491F60
    MOV ecx, eax
    JMP loc_492955
loc_492AB5:
    LEA rdi, [rsp+0A8h+var_58]
    MOV r8d, r11d
    MOV ecx, 4FFA6Fh
    MOV edx, 13h
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    MOV r11d, dword ptr [rsp+0A8h+var_98]
    JMP loc_492849
loc_492ADD:
    MOV rsi, rbp
    XOR edi, edi
    MOV edx, 1
    MOV byte ptr [rsp+0A8h+var_98], cl
    CALL _lseek
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV eax, 1
    CMOVNZ rbp, [rsp+0A8h+var_A0]
    CMOVNZ ebx, eax
    MOVZX ecx, byte ptr [rsp+0A8h+var_98]
    JMP loc_492979
loc_492B0C:
    MOV rdx, [rsp+0A8h+var_88]
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_492B3B:
    MOV dword ptr [rsp+0A8h+var_A0], edx
    MOV esi, offset aUnknownStatusF_0
    MOV edx, 5
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, dword ptr [rsp+0A8h+var_A0]
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_492B65:
    CALL ___stack_chk_fail
loc_492B6A:
    MOV rdx, cs:qword_753CB0
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00h]
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x70', '0x18', '0x10'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### Q 208 - length_of_file_name_and_frills
```assembly
loc_44A380:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 2A8h
    MOV rax, fs:28h
    MOV [rsp+2B8h+var_20], rax
    XOR eax, eax
    CMP cs:byte_72F51C, 0
    JZ loc_44A450
loc_44A3AC:
    CMP cs:dword_72F558, 4
    JZ loc_44A4E0
loc_44A3B9:
    MOVSXD r8, cs:dword_72F580
    CMP cs:byte_72F54C, 0
    LEA rbp, [r8+1]
    JNZ loc_44A464
loc_44A3D1:
    CMP cs:byte_72F585, 0
    JNZ loc_44A488
loc_44A3DE:
    XCHG ax, ax
loc_44A3E0:
    MOV edx, [rbx+0C4h]
    MOV rsi, cs:qword_72F4F0
    MOV rdi, [rbx]
    CALL sub_44A2F0
    LEA r8, [rbp+rax+0]
    MOV eax, cs:dword_72F534
    TEST eax, eax
    JZ loc_44A424
loc_44A404:
    MOVZX edi, byte ptr [rbx+0B8h]
    MOV edx, [rbx+0A8h]
    MOV esi, [rbx+30h]
    CALL sub_4483F0
    TEST al, al
    SETNZ al
    MOVZX eax, al
    ADD r8, rax
loc_44A424:
    MOV rcx, [rsp+2B8h+var_20]
    XOR rcx, fs:28h
    MOV rax, r8
    JNZ loc_44A512
loc_44A43E:
    ADD rsp, 2A8h
    POP rbx
    POP rbp
    RETN 
loc_44A450:
    XOR ebp, ebp
loc_44A452:
    CMP cs:byte_72F54C, 0
    JZ loc_44A472
loc_44A45B:
    CMP cs:dword_72F558, 4
    JZ loc_44A4A0
loc_44A464:
    MOVSXD rax, cs:dword_72F57C
    ADD rax, 1
loc_44A46F:
    ADD rbp, rax
loc_44A472:
    CMP cs:byte_72F585, 0
    JZ loc_44A3E0
loc_44A47F:
    CMP cs:dword_72F558, 4
    JZ loc_44A500
loc_44A488:
    MOVSXD rax, cs:dword_72F574
    ADD rax, 1
loc_44A493:
    ADD rbp, rax
    JMP loc_44A3E0
loc_44A4A0:
    CMP byte ptr [rbx+0B8h], 0
    MOV eax, 2
    JZ loc_44A46F
loc_44A4AE:
    MOV rdi, [rbx+58h]
    MOV r8, cs:qword_72F540
    MOV ecx, 200h
    MOV edx, cs:dword_72F548
    MOV rsi, rsp
    CALL sub_4A8580
    MOV rdi, rax
    CALL _strlen
    ADD rax, 1
    JMP loc_44A46F
loc_44A4E0:
    MOV rdi, [rdi+20h]
    MOV rsi, rsp
    CALL sub_4A9A40
    MOV rdi, rax
    CALL _strlen
    LEA rbp, [rax+1]
    JMP loc_44A452
loc_44A500:
    MOV rdi, [rbx+0B0h]
    CALL _strlen
    ADD rax, 1
    JMP loc_44A493
loc_44A512:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ControlFlow'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3D0', '0x3D8', '0x10', '0x28', '0x41F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'AES CBC Decryption', 'inferred_category': 'Crypto/Security'}

##### T 208 - length_of_file_name_and_frills
```assembly
loc_44FA10:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 2A8h
    MOV rax, fs:28h
    MOV [rsp+2B8h+var_20], rax
    XOR eax, eax
    CMP cs:byte_7524FC, 0
    JZ loc_44FB00
loc_44FA3C:
    CMP cs:dword_752538, 4
    JZ loc_44FC10
loc_44FA49:
    MOVSXD rax, cs:dword_752560
    CMP cs:byte_75252C, 0
    LEA rbp, [rax+1]
    JNZ loc_44FB18
loc_44FA61:
    CMP cs:byte_752565, 0
    JNZ loc_44FB40
loc_44FA6E:
    XCHG ax, ax
loc_44FA70:
    MOV edx, [rbx+0C4h]
    MOV rsi, cs:qword_7524D0
    MOV rdi, [rbx]
    CALL sub_44F980
    MOV edx, cs:dword_752514
    ADD rax, rbp
    TEST edx, edx
    JZ loc_44FADB
loc_44FA92:
    MOVZX esi, byte ptr [rbx+0B8h]
    MOV edi, [rbx+0A8h]
    MOV r8d, [rbx+30h]
    TEST sil, sil
    JZ loc_44FB58
loc_44FAAC:
    MOV ecx, r8d
    AND ecx, 0F000h
    CMP ecx, 8000h
    JNZ loc_44FBB8
loc_44FAC1:
    CMP edx, 3
    JNZ loc_44FC80
loc_44FACA:
    XOR ecx, ecx
    AND r8d, 49h
    SETNZ cl
    NOP dword ptr [rax+rax+00h]
loc_44FAD8:
    ADD rax, rcx
loc_44FADB:
    MOV rsi, [rsp+2B8h+var_20]
    XOR rsi, fs:28h
    JNZ loc_44FC87
loc_44FAF2:
    ADD rsp, 2A8h
    POP rbx
    POP rbp
    RETN 
loc_44FB00:
    XOR ebp, ebp
loc_44FB02:
    CMP cs:byte_75252C, 0
    JZ loc_44FB26
loc_44FB0B:
    CMP cs:dword_752538, 4
    JZ loc_44FBC8
loc_44FB18:
    MOVSXD rax, cs:dword_75255C
    ADD rax, 1
loc_44FB23:
    ADD rbp, rax
loc_44FB26:
    CMP cs:byte_752565, 0
    JZ loc_44FA70
loc_44FB33:
    CMP cs:dword_752538, 4
    JZ loc_44FC30
loc_44FB40:
    MOVSXD rax, cs:dword_752554
    ADD rax, 1
loc_44FB4B:
    ADD rbp, rax
    JMP loc_44FA70
loc_44FB58:
    XOR ecx, ecx
    CMP edi, 5
    JZ loc_44FAD8
loc_44FB63:
    CMP edi, 3
    SETZ r9b
    CMP edi, 9
    SETZ cl
    OR r9d, ecx
loc_44FB73:
    TEST r9b, r9b
    MOV ecx, 1
    JNZ loc_44FAD8
loc_44FB81:
    CMP edx, 1
    JZ loc_44FC80
loc_44FB8A:
    TEST sil, sil
    JNZ loc_44FC48
loc_44FB93:
    CMP edi, 6
    JZ loc_44FAD8
loc_44FB9C:
    CMP edi, 1
    JZ loc_44FAD8
loc_44FBA5:
    CMP edi, 7
    SETZ cl
loc_44FBAB:
    MOVZX ecx, cl
    JMP loc_44FAD8
loc_44FBB8:
    CMP ecx, 4000h
    SETZ r9b
    JMP loc_44FB73
loc_44FBC8:
    CMP byte ptr [rbx+0B8h], 0
    MOV eax, 2
    JZ loc_44FB23
loc_44FBDA:
    MOV rdi, [rbx+58h]
    MOV r8, cs:qword_752520
    MOV ecx, 200h
    MOV edx, cs:dword_752528
    MOV rsi, rsp
    CALL sub_4C4140
    MOV rdi, rax
    CALL _strlen
    ADD rax, 1
    JMP loc_44FB23
loc_44FC10:
    MOV rdi, [rdi+20h]
    MOV rsi, rsp
    CALL sub_4C59D0
    MOV rdi, rax
    CALL _strlen
    LEA rbp, [rax+1]
    JMP loc_44FB02
loc_44FC30:
    MOV rdi, [rbx+0B0h]
    CALL _strlen
    ADD rax, 1
    JMP loc_44FB4B
loc_44FC48:
    AND r8d, 0F000h
    CMP r8d, 0A000h
    JZ loc_44FAD8
loc_44FC5C:
    CMP r8d, 1000h
    JZ loc_44FAD8
loc_44FC69:
    CMP r8d, 0C000h
    SETZ cl
    JMP loc_44FBAB
loc_44FC80:
    XOR ecx, ecx
    JMP loc_44FAD8
loc_44FC87:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3D0', '0x3D8', '0x40', '0x28', '0x3C8', '0x41F', '0x150'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'AES CBC Decryption', 'inferred_category': 'Cryptographic'}

##### Q 209 - _usage_wc
```assembly
loc_494570:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_4945C6
loc_49459A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4945BF:
    MOV edi, ebx
    CALL _exit
loc_4945C6:
    MOV esi, offset aUsageSOptionFi_7
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintNewlineWo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aWithNoFileOrWh
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheOptionsBelo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aFiles0FromFRea
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], 4E9CF3h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 4E9CF3h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aWc
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_49475C
loc_494750:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_494768
loc_49475C:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_494750
loc_494768:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_494832
loc_494781:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4947CA
loc_4947B0:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4948B6
loc_4947CA:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aWc
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 4E9B80h
    CALL ___printf_chk
    CMP rbp, offset aWc
    JZ loc_4948A1
loc_494807:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4945BF
loc_494832:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_494877
loc_494861:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4948B1
loc_494877:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aWc
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4948A1:
    MOV ebp, offset aWc
    MOV r12d, 4C7B0Dh
    JMP loc_494807
loc_4948B1:
    MOV ebp, offset aWc
loc_4948B6:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aWc
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4947CA
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Looping', 'ErrorHandling'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x49C', '0x88', '0x14', '0xFFFFFFFFFFFFFFEC', '0x78'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Checksum or Validation', 'inferred_category': 'Utility/Helper'}

##### T 209 - _usage_wc
```assembly
loc_4AE2F0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_4AE346
loc_4AE31A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4AE33F:
    MOV edi, ebx
    CALL _exit
loc_4AE346:
    MOV esi, offset aUsageSOptionFi_7
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintNewlineWo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aWithNoFileOrWh
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheOptionsBelo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aFiles0FromFRea
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], 50CC20h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 50CC20h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aWc
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_4AE4DC
loc_4AE4D0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_4AE4E8
loc_4AE4DC:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_4AE4D0
loc_4AE4E8:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4AE5B2
loc_4AE501:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4AE54A
loc_4AE530:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4AE636
loc_4AE54A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aWc
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 50CABAh
    CALL ___printf_chk
    CMP rbp, offset aWc
    JZ loc_4AE621
loc_4AE587:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4AE33F
loc_4AE5B2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4AE5F7
loc_4AE5E1:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_4AE631
loc_4AE5F7:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aWc
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4AE621:
    MOV ebp, offset aWc
    MOV r12d, 4EA7ADh
    JMP loc_4AE587
loc_4AE631:
    MOV ebp, offset aWc
loc_4AE636:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aWc
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4AE54A
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'Loop', 'MemoryAccess', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['-0x14', '0xA', '0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Unknown (possibly cryptographic or error-checking)', 'inferred_category': 'Security/Cryptography'}

##### Q 210 - force_symlinkat
```assembly
loc_429340:
    PUSH r15
    PUSH r14
    MOV r14d, ecx
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV r12, rdx
    MOV ebp, esi
    SUB rsp, 128h
    MOV rax, fs:28h
    MOV [rsp+158h+var_40], rax
    XOR eax, eax
    CALL _symlinkat
    TEST eax, eax
    MOV ebx, eax
    SETZ dl
    CMP r14b, dl
    JBE loc_429390
loc_429380:
    CALL ___errno_location
    MOV r14, rax
    MOV eax, ebx
    CMP dword ptr [r14], 11h
    JZ loc_4293C0
loc_429390:
    MOV rcx, [rsp+158h+var_40]
    XOR rcx, fs:28h
    JNZ loc_429465
loc_4293A7:
    ADD rsp, 128h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4293C0:
    LEA r15, [rsp+158h+dest]
    MOV rdi, r12
    MOV rsi, r15
    CALL sub_429150
    TEST rax, rax
    MOV rbx, rax
    JZ loc_42945B
loc_4293DC:
    XOR esi, esi
    MOV r8d, 6
    MOV ecx, offset sub_4291B0
    MOV rdx, rsp
    MOV rdi, rax
    MOV [rsp+158h+var_158], r13
    MOV [rsp+158h+var_150], ebp
    CALL sub_4B88D0
    TEST eax, eax
    JZ loc_429420
loc_429400:
    MOV r12d, [r14]
loc_429403:
    CMP rbx, r15
    JZ loc_429410
loc_429408:
    MOV rdi, rbx
    CALL _free
loc_429410:
    TEST r12d, r12d
    JNZ loc_42944E
loc_429415:
    MOV eax, 1
    JMP loc_429390
loc_429420:
    MOV rcx, r12
    MOV edx, ebp
    MOV rsi, rbx
    MOV edi, ebp
    CALL _renameat
    TEST eax, eax
    JNZ loc_42943D
loc_429433:
    XOR r12d, r12d
    CMP rbx, r15
    JNZ loc_429408
loc_42943B:
    JMP loc_429415
loc_42943D:
    XOR edx, edx
    MOV rsi, rbx
    MOV edi, ebp
    MOV r12d, [r14]
    CALL _unlinkat
    JMP loc_429403
loc_42944E:
    MOV [r14], r12d
    MOV eax, 0FFFFFFFFh
    JMP loc_429390
loc_42945B:
    MOV eax, 0FFFFFFFFh
    JMP loc_429390
loc_429465:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3F8', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'IO Operations'}

##### T 210 - force_symlinkat
```assembly
loc_42BA40:
    PUSH r15
    PUSH r14
    MOV r14d, ecx
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV rbp, rdx
    MOV r12d, esi
    SUB rsp, 138h
    MOV rax, fs:28h
    MOV [rsp+168h+var_40], rax
    XOR eax, eax
    CALL _symlinkat
    TEST eax, eax
    MOV ebx, eax
    SETZ dl
    CMP r14b, dl
    JBE loc_42BA91
loc_42BA81:
    CALL ___errno_location
    MOV r14, rax
    MOV eax, ebx
    CMP dword ptr [r14], 11h
    JZ loc_42BAC0
loc_42BA91:
    MOV rcx, [rsp+168h+var_40]
    XOR rcx, fs:28h
    JNZ loc_42BBB5
loc_42BAA8:
    ADD rsp, 138h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42BAC0:
    MOV rdi, rbp
    CALL sub_4BDCD0
    SUB rax, rbp
    LEA rdi, [rax+9]
    MOV rdx, rax
    CMP rdi, 100h
    JBE loc_42BB68
loc_42BADF:
    MOV [rsp+168h+n], rax
    CALL _malloc
    MOV rbx, rax
    MOV eax, 0FFFFFFFFh
    TEST rbx, rbx
    JZ loc_42BA91
loc_42BAF6:
    MOV rdx, [rsp+168h+n]
    LEA r15, [rsp+168h+var_148]
loc_42BB00:
    MOV rsi, rbp
    MOV rdi, rbx
    CALL _mempcpy
    MOV rcx, 5858585858587543h
    LEA rdx, [rsp+168h+var_158]
    XOR esi, esi
    MOV [rax], rcx
    MOV byte ptr [rax+8], 0
    MOV r8d, 6
    MOV ecx, offset sub_42B840
    MOV rdi, rbx
    MOV [rsp+168h+var_158], r13
    MOV [rsp+168h+var_150], r12d
    CALL sub_4D8850
    TEST eax, eax
    JZ loc_42BB78
loc_42BB44:
    MOV ebp, [r14]
loc_42BB47:
    CMP rbx, r15
    JZ loc_42BB54
loc_42BB4C:
    MOV rdi, rbx
    CALL _free
loc_42BB54:
    TEST ebp, ebp
    JNZ loc_42BBA8
loc_42BB58:
    MOV eax, 1
    JMP loc_42BA91
loc_42BB68:
    LEA r15, [rsp+168h+var_148]
    MOV rbx, r15
    JMP loc_42BB00
loc_42BB78:
    MOV rcx, rbp
    MOV edx, r12d
    MOV rsi, rbx
    MOV edi, r12d
    CALL _renameat
    TEST eax, eax
    JNZ loc_42BB96
loc_42BB8D:
    XOR ebp, ebp
    CMP rbx, r15
    JNZ loc_42BB4C
loc_42BB94:
    JMP loc_42BB58
loc_42BB96:
    XOR edx, edx
    MOV rsi, rbx
    MOV edi, r12d
    MOV ebp, [r14]
    CALL _unlinkat
    JMP loc_42BB47
loc_42BBA8:
    MOV [r14], ebp
    MOV eax, 0FFFFFFFFh
    JMP loc_42BA91
loc_42BBB5:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Integer', 'Integer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3F8', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'IO'}

##### Q 211 - proctab_hasher
```assembly
loc_475A50:
    MOVSXD rax, dword ptr [rdi+8]
    XOR edx, edx
    DIV rsi
    MOV rax, rdx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['FileHandle'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3A', '0x20', '0x1', '0xE'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Parsing', 'inferred_category': 'IO/Network'}

##### T 211 - proctab_hasher
```assembly
loc_481460:
    MOVSXD rax, dword ptr [rdi+8]
    XOR edx, edx
    DIV rsi
    MOV rax, rdx
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['FileHandle'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x27', '0x3A', '0x20', '0xE', '0x4801'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Parsing', 'inferred_category': 'Input/Output'}

##### Q 212 - excise
```assembly
loc_453890:
    PUSH r14
    PUSH r13
    MOV r13, rdx
    PUSH r12
    PUSH rbp
    MOV r12, rdi
    PUSH rbx
    MOV rbx, rsi
    MOV ebp, ecx
    SUB rsp, 0A0h
    MOV rsi, [rsi+30h]
    MOV edi, [rdi+2Ch]
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    CMP cl, 1
    SBB edx, edx
    NOT edx
    AND edx, 200h
    CALL _unlinkat
    TEST eax, eax
    JNZ loc_453918
loc_4538DA:
    CMP byte ptr [r13+19h], 0
    MOV eax, 2
    JNZ loc_4539D0
loc_4538EA:
    MOV rcx, [rsp+0C8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_453ABE
loc_453901:
    ADD rsp, 0A0h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_453918:
    CALL ___errno_location
    MOV ebp, [rax]
    MOV r14, rax
    CMP ebp, 1Eh
    JZ loc_453A30
loc_45392B:
    CMP byte ptr [r13+0], 0
    JNZ loc_4539A8
loc_453932:
    CMP word ptr [rbx+70h], 4
    JZ loc_453A88
loc_45393D:
    MOV rsi, [rbx+38h]
    MOV edi, 4
    CALL sub_4B5100
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aCannotRemoveS
    MOV rbp, rax
    CALL _dcgettext
    MOV esi, [r14]
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    MOV rcx, rbp
    CALL _error
    MOV rax, [rbx+8]
    CMP qword ptr [rax+58h], 0
    JNS loc_453993
loc_45397C:
    JMP loc_45399A
loc_453980:
    MOV qword ptr [rax+20h], 1
    MOV rax, [rax+8]
    CMP qword ptr [rax+58h], 0
    JS loc_45399A
loc_453993:
    CMP qword ptr [rax+20h], 0
    JZ loc_453980
loc_45399A:
    MOV eax, 4
    JMP loc_4538EA
loc_4539A8:
    CMP ebp, 14h
    JZ loc_4539BD
loc_4539AD:
    JLE loc_453A20
loc_4539AF:
    CMP ebp, 16h
    JZ loc_4539BD
loc_4539B4:
    CMP ebp, 54h
    JNZ loc_453932
loc_4539BD:
    MOV eax, 2
    JMP loc_4538EA
loc_4539D0:
    MOV rsi, [rbx+38h]
    MOV edi, 4
    CALL sub_4B5100
    TEST bpl, bpl
    MOV rbx, rax
    MOV edx, 5
    JZ loc_453A70
loc_4539EF:
    MOV esi, offset aRemovedDirecto
    XOR edi, edi
    CALL _dcgettext
loc_4539FB:
    MOV rsi, rax
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV eax, 2
    JMP loc_4538EA
loc_453A20:
    CMP ebp, 2
    JNZ loc_453932
loc_453A29:
    JMP loc_4539BD
loc_453A30:
    MOV rdx, [rbx+30h]
    MOV esi, [r12+2Ch]
    MOV r8d, 100h
    MOV rcx, rsp
    MOV edi, 1
    CALL ___fxstatat
    TEST eax, eax
    JZ loc_453A60
loc_453A50:
    CMP dword ptr [r14], 2
    JNZ loc_453A60
loc_453A56:
    MOV ebp, 2
    JMP loc_45392B
loc_453A60:
    MOV dword ptr [r14], 1Eh
    JMP loc_45392B
loc_453A70:
    MOV esi, offset aRemovedS
    XOR edi, edi
    CALL _dcgettext
    JMP loc_4539FB
loc_453A88:
    CMP ebp, 27h
    JA loc_45393D
loc_453A91:
    MOV rax, 8000320000h
    BT rax, rbp
    JNB loc_45393D
loc_453AA5:
    MOV eax, [rbx+40h]
    CMP eax, 1
    JZ loc_453AB6
loc_453AAD:
    CMP eax, 0Dh
    JNZ loc_45393D
loc_453AB6:
    MOV [r14], eax
    JMP loc_45393D
loc_453ABE:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ControlFlow'}

##### T 212 - excise
```assembly
loc_45C030:
    PUSH r14
    PUSH r13
    MOV r13, rdx
    PUSH r12
    PUSH rbp
    MOV r12, rdi
    PUSH rbx
    MOV rbx, rsi
    MOV ebp, ecx
    SUB rsp, 0A0h
    MOV rsi, [rsi+30h]
    MOV edi, [rdi+2Ch]
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    CMP cl, 1
    SBB edx, edx
    NOT edx
    AND edx, 200h
    CALL _unlinkat
    TEST eax, eax
    JNZ loc_45C0B8
loc_45C07A:
    CMP byte ptr [r13+19h], 0
    MOV eax, 2
    JNZ loc_45C170
loc_45C08A:
    MOV rcx, [rsp+0C8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_45C25E
loc_45C0A1:
    ADD rsp, 0A0h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_45C0B8:
    CALL ___errno_location
    MOV ebp, [rax]
    MOV r14, rax
    CMP ebp, 1Eh
    JZ loc_45C1D0
loc_45C0CB:
    CMP byte ptr [r13+0], 0
    JNZ loc_45C148
loc_45C0D2:
    CMP word ptr [rbx+70h], 4
    JZ loc_45C228
loc_45C0DD:
    MOV rsi, [rbx+38h]
    MOV edi, 4
    CALL sub_4D2F70
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aCannotRemoveS
    MOV rbp, rax
    CALL _dcgettext
    MOV esi, [r14]
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    MOV rcx, rbp
    CALL _error
    MOV rax, [rbx+8]
    CMP qword ptr [rax+58h], 0
    JNS loc_45C133
loc_45C11C:
    JMP loc_45C13A
loc_45C120:
    MOV qword ptr [rax+20h], 1
    MOV rax, [rax+8]
    CMP qword ptr [rax+58h], 0
    JS loc_45C13A
loc_45C133:
    CMP qword ptr [rax+20h], 0
    JZ loc_45C120
loc_45C13A:
    MOV eax, 4
    JMP loc_45C08A
loc_45C148:
    CMP ebp, 14h
    JZ loc_45C15D
loc_45C14D:
    JLE loc_45C1C0
loc_45C14F:
    CMP ebp, 16h
    JZ loc_45C15D
loc_45C154:
    CMP ebp, 54h
    JNZ loc_45C0D2
loc_45C15D:
    MOV eax, 2
    JMP loc_45C08A
loc_45C170:
    MOV rsi, [rbx+38h]
    MOV edi, 4
    CALL sub_4D2F70
    TEST bpl, bpl
    MOV rbx, rax
    MOV edx, 5
    JZ loc_45C210
loc_45C18F:
    MOV esi, offset aRemovedDirecto
    XOR edi, edi
    CALL _dcgettext
loc_45C19B:
    MOV rsi, rax
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV eax, 2
    JMP loc_45C08A
loc_45C1C0:
    CMP ebp, 2
    JNZ loc_45C0D2
loc_45C1C9:
    JMP loc_45C15D
loc_45C1D0:
    MOV rdx, [rbx+30h]
    MOV esi, [r12+2Ch]
    MOV r8d, 100h
    MOV rcx, rsp
    MOV edi, 1
    CALL ___fxstatat
    TEST eax, eax
    JZ loc_45C200
loc_45C1F0:
    CMP dword ptr [r14], 2
    JNZ loc_45C200
loc_45C1F6:
    MOV ebp, 2
    JMP loc_45C0CB
loc_45C200:
    MOV dword ptr [r14], 1Eh
    JMP loc_45C0CB
loc_45C210:
    MOV esi, offset aRemovedS
    XOR edi, edi
    CALL _dcgettext
    JMP loc_45C19B
loc_45C228:
    CMP ebp, 27h
    JA loc_45C0DD
loc_45C231:
    MOV rax, 8000320000h
    BT rax, rbp
    JNB loc_45C0DD
loc_45C245:
    MOV eax, [rbx+40h]
    CMP eax, 1
    JZ loc_45C256
loc_45C24D:
    CMP eax, 0Dh
    JNZ loc_45C0DD
loc_45C256:
    MOV [r14], eax
    JMP loc_45C0DD
loc_45C25E:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 0, 'input_parameter_types': [], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### Q 213 - xstrcoll_df_mtime
```assembly
loc_44CCA0:
    MOV edx, [rdi+0A8h]
    CMP edx, 3
    SETZ cl
    CMP edx, 9
    SETZ al
    OR eax, ecx
    MOV ecx, [rsi+0A8h]
    CMP ecx, 3
    SETZ r8b
    CMP ecx, 9
    SETZ dl
    OR edx, r8d
    CMP dl, al
    JB loc_44CD00
loc_44CCCE:
    MOV eax, 1
    JBE loc_44CCE0
loc_44CCD5:
    REP 
loc_44CCE0:
    MOV rcx, [rsi+70h]
    CMP [rdi+70h], rcx
    JG loc_44CD00
loc_44CCEA:
    JL locret_44CCD5
loc_44CCEC:
    MOV rax, [rsi+78h]
    SUB eax, [rdi+78h]
    JNZ locret_44CCD5
loc_44CCF5:
    MOV rsi, [rsi]
    MOV rdi, [rdi]
    JMP sub_447C80
loc_44CD00:
    MOV eax, 0FFFFFFFFh
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x58', '0x90', '0x8', '0x5Ah', '0x60h', '0x18h', '0x50h'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Hashing/Checksum'}

##### T 213 - xstrcoll_df_mtime
```assembly
loc_450E80:
    MOV edx, [rdi+0A8h]
    CMP edx, 3
    SETZ cl
    CMP edx, 9
    SETZ al
    OR eax, ecx
    MOV ecx, [rsi+0A8h]
    CMP ecx, 3
    SETZ r8b
    CMP ecx, 9
    SETZ dl
    OR edx, r8d
    CMP dl, al
    JB loc_450F10
loc_450EAE:
    MOV eax, 1
    JBE loc_450EC0
loc_450EB5:
    RETN 
loc_450EC0:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rbx, [rsi+70h]
    CMP [rdi+70h], rbx
    JG loc_450F00
loc_450ED0:
    JL loc_450F05
loc_450ED2:
    MOV rax, [rsi+78h]
    SUB eax, [rdi+78h]
    JNZ loc_450F05
loc_450EDB:
    MOV rbp, [rsi]
    MOV rbx, [rdi]
    CALL ___errno_location
    MOV dword ptr [rax], 0
    ADD rsp, 8
    MOV rsi, rbp
    MOV rdi, rbx
    POP rbx
    POP rbp
    JMP _strcoll
loc_450F00:
    MOV eax, 0FFFFFFFFh
loc_450F05:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_450F10:
    MOV eax, 0FFFFFFFFh
    RETN 
```
None

##### Q 214 - _usage_id
```assembly
loc_441C40:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_441C96
loc_441C6A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_441C8F:
    MOV edi, ebx
    CALL _exit
loc_441C96:
    MOV esi, offset aUsageSOptionUs_1
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintUserAndGr
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aAIgnoreForComp
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aWithoutAnyOpti
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, (offset aSInvalidProces+14h)
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_441DFC
loc_441DF0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_441E08
loc_441DFC:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_441DF0
loc_441E08:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_441ED2
loc_441E21:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_441E6A
loc_441E50:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_441F56
loc_441E6A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, (offset aSInvalidProces+14h)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, (offset aSInvalidProces+14h)
    JZ loc_441F41
loc_441EA7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_441C8F
loc_441ED2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_441F17
loc_441F01:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_441F51
loc_441F17:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, (offset aSInvalidProces+14h)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_441F41:
    MOV ebp, (offset aSInvalidProces+14h)
    MOV r12d, 4C7B0Dh
    JMP loc_441EA7
loc_441F51:
    MOV ebp, (offset aSInvalidProces+14h)
loc_441F56:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, (offset aSInvalidProces+14h)
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_441E6A
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20', '0x38', '0x70', '0x68'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Comparison', 'inferred_category': 'Utility/Helper'}

##### T 214 - _usage_id
```assembly
loc_4479D0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_447A26
loc_4479FA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_447A1F:
    MOV edi, ebx
    CALL _exit
loc_447A26:
    MOV esi, offset aUsageSOptionUs_1
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintUserAndGr
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aAIgnoreForComp
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aWithoutAnyOpti
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_50CC1F+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_50CC1F+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, (offset aSInvalidProces+14h)
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_447B8C
loc_447B80:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_447B98
loc_447B8C:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_447B80
loc_447B98:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_447C62
loc_447BB1:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_447BFA
loc_447BE0:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_447CE6
loc_447BFA:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, (offset aSInvalidProces+14h)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, (offset aSInvalidProces+14h)
    JZ loc_447CD1
loc_447C37:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_447A1F
loc_447C62:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_447CA7
loc_447C91:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_447CE1
loc_447CA7:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, (offset aSInvalidProces+14h)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_447CD1:
    MOV ebp, (offset aSInvalidProces+14h)
    MOV r12d, 4EA7ADh
    JMP loc_447C37
loc_447CE1:
    MOV ebp, (offset aSInvalidProces+14h)
loc_447CE6:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, (offset aSInvalidProces+14h)
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_447BFA
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x20', '0x38', '0x70', '0x40', '0x10', '0x30', '0x8', '0x68'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Comparison', 'inferred_category': 'Utility'}

##### Q 215 - _usage_sha224sum
```assembly
loc_46CB50:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_46CBA6
loc_46CB7A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_46CB9F:
    MOV edi, ebx
    CALL _exit
loc_46CBA6:
    XOR edi, edi
    MOV esi, offset aUsageSOptionFi_2
    CALL _dcgettext
    MOV r8d, 0E0h
    MOV ecx, offset aSha224
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aWithNoFileOrWh
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aBBinaryReadInB
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aCCheckReadSSum
    CALL _dcgettext
    MOV edx, offset aSha224
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTagCreateABsdS
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTTextReadInTex
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTheFollowingFi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aHelpDisplayThi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aVersionOutputV
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aTheSumsAreComp
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aRfc3874
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], 4E9CF3h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 4E9CF3h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aSha224sum
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_46CDAC
loc_46CDA0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_46CDB8
loc_46CDAC:
    MOV ecx, 0Ah
    MOV rsi, r8
    REPE 
    JNZ loc_46CDA0
loc_46CDB8:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_46CE82
loc_46CDD1:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_46CE1A
loc_46CE00:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_46CF06
loc_46CE1A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aSha224sum
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 4E9B80h
    CALL ___printf_chk
    CMP rbp, offset aSha224sum
    JZ loc_46CEF1
loc_46CE57:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_46CB9F
loc_46CE82:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_46CEC7
loc_46CEB1:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_46CF01
loc_46CEC7:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aSha224sum
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_46CEF1:
    MOV ebp, offset aSha224sum
    MOV r12d, 4C7B0Dh
    JMP loc_46CE57
loc_46CF01:
    MOV ebp, offset aSha224sum
loc_46CF06:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aSha224sum
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_46CE1A
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Dynamic Memory Management', 'inferred_category': 'Memory Operations'}

##### T 215 - _usage_sha224sum
```assembly
loc_477A30:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_477A86
loc_477A5A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_477A7F:
    MOV edi, ebx
    CALL _exit
loc_477A86:
    XOR edi, edi
    MOV esi, offset aUsageSOptionFi_2
    CALL _dcgettext
    MOV r8d, 0E0h
    MOV ecx, offset aSha224
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aWithNoFileOrWh
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aBBinaryReadInB
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aCCheckReadSSum
    CALL _dcgettext
    MOV edx, offset aSha224
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTagCreateABsdS
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTTextReadInTex
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTheFollowingFi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aHelpDisplayThi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aVersionOutputV
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aTheSumsAreComp
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV edx, offset aRfc3874
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], 50CC20h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, 50CC20h
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aSha224sum
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_477C8C
loc_477C80:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_477C98
loc_477C8C:
    MOV ecx, 0Ah
    MOV rsi, r8
    REPE 
    JNZ loc_477C80
loc_477C98:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_477D62
loc_477CB1:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_477CFA
loc_477CE0:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_477DE6
loc_477CFA:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aSha224sum
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, 50CABAh
    CALL ___printf_chk
    CMP rbp, offset aSha224sum
    JZ loc_477DD1
loc_477D37:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_477A7F
loc_477D62:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_477DA7
loc_477D91:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_477DE1
loc_477DA7:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aSha224sum
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_477DD1:
    MOV ebp, offset aSha224sum
    MOV r12d, 4EA7ADh
    JMP loc_477D37
loc_477DE1:
    MOV ebp, offset aSha224sum
loc_477DE6:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aSha224sum
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_477CFA
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Management', 'inferred_category': 'Memory Allocation'}

##### Q 216 - print_lineno
```assembly
loc_4547E0:
    SUB rsp, 8
    MOV edx, cs:dword_71FF00
    MOV r8, cs:off_71FF30
    MOV rcx, cs:qword_72F650
    MOV rsi, cs:off_71FEF8
    XOR eax, eax
    MOV edi, 1
    CALL ___printf_chk
    MOV rax, cs:qword_72F650
    MOV rdx, rax
    ADD rdx, cs:qword_71FF18
    CMP rax, rdx
    JG loc_45482D
loc_454821:
    MOV cs:qword_72F650, rdx
    ADD rsp, 8
    RETN 
loc_45482D:
    MOV edx, 5
    MOV esi, offset aLineNumberOver
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing', 'inferred_category': 'Utility/Helper'}

##### T 216 - print_lineno
```assembly
loc_4068C0:
    PUSH rax
    MOV edx, 5
    MOV esi, offset aLineNumberOver
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x5', '0x4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Copy with Initialization', 'inferred_category': 'Utility Function'}

##### Q 217 - delete_all_files
```assembly
loc_429530:
    MOV eax, cs:dword_720D98
    TEST eax, eax
    JZ loc_4295B6
loc_42953A:
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    XOR ebx, ebx
    JMP loc_429555
loc_429548:
    MOV eax, cs:dword_720D98
    ADD ebx, 1
    CMP ebx, eax
    JNB loc_4295A7
loc_429555:
    MOV edi, ebx
    CALL sub_429470
    MOV rdi, rax
    MOV rbp, rax
    CALL _unlink
    TEST eax, eax
    JZ loc_429548
loc_42956B:
    TEST r12b, r12b
    JNZ loc_429548
loc_429570:
    MOV rdx, rbp
    XOR edi, edi
    MOV esi, 3
    CALL sub_4B5220
    MOV rbp, rax
    ADD ebx, 1
    CALL ___errno_location
    MOV esi, [rax]
    XOR edi, edi
    XOR eax, eax
    MOV rcx, rbp
    MOV edx, (offset aLuBytesSCopied+1Bh)
    CALL _error
    MOV eax, cs:dword_720D98
    CMP ebx, eax
    JB loc_429555
loc_4295A7:
    POP rbx
    MOV cs:dword_720D98, 0
    POP rbp
    POP r12
    RETN 
loc_4295B6:
    MOV cs:dword_720D98, 0
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x0A0', '0x64', '0xFFFFFFFFFFFFFFFF'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Validation'}

##### T 217 - delete_all_files
```assembly
loc_42BBC0:
    MOV eax, cs:dword_743D78
    TEST eax, eax
    JZ loc_42BD01
loc_42BBCE:
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    XOR ebx, ebx
    SUB rsp, 8
    JMP loc_42BBF1
loc_42BBE0:
    MOV eax, cs:dword_743D78
    ADD ebx, 1
    CMP ebx, eax
    JNB loc_42BCA3
loc_42BBF1:
    MOV rsi, cs:qword_743D88
    MOV rdi, cs:dest
    CALL _strcpy
    MOV rax, cs:qword_743D80
    TEST rax, rax
    JZ loc_42BCC0
loc_42BC14:
    MOV rbp, cs:qword_743D80
    MOV r13, cs:dest
    MOV rdi, cs:qword_743D88
    CALL _strlen
    LEA rdi, [r13+rax+0]
    MOV r8d, ebx
    MOV rcx, rbp
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
loc_42BC4C:
    MOV rbp, cs:dest
    MOV rdi, rbp
    CALL _unlink
    TEST eax, eax
    JZ loc_42BBE0
loc_42BC5F:
    TEST r12b, r12b
    JNZ loc_42BBE0
loc_42BC68:
    MOV rdx, rbp
    XOR edi, edi
    MOV esi, 3
    CALL sub_4D3C20
    MOV rbp, rax
    ADD ebx, 1
    CALL ___errno_location
    MOV esi, [rax]
    XOR edi, edi
    XOR eax, eax
    MOV rcx, rbp
    MOV edx, (offset aLuBytesSCopied+1Bh)
    CALL _error
    MOV eax, cs:dword_743D78
    CMP ebx, eax
    JB loc_42BBF1
loc_42BCA3:
    MOV cs:dword_743D78, 0
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_42BCC0:
    MOV ebp, cs:dword_742CB8
    MOV r13, cs:dest
    MOV rdi, cs:qword_743D88
    CALL _strlen
    LEA rdi, [r13+rax+0]
    MOV r9d, ebx
    MOV r8d, ebp
    MOV ecx, offset a0U
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 1
    XOR eax, eax
    CALL ___sprintf_chk
    JMP loc_42BC4C
loc_42BD01:
    MOV cs:dword_743D78, 0
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x0A0', '0x7E', '0x98', '0x9C', '0x78', '0xA0', '0x4C1288', '0xFFFFFFFFFFFFFFFF', '0x12', '0x24', '0x29', '0xFFFFFFFF', '0x1', '0x2', '0xFFFFFFFFh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Management'}

##### Q 218 - print_char_0
```assembly
loc_45ED60:
    PUSH rbp
    PUSH rbx
    MOV ebx, edi
    SUB rsp, 8
    CMP cs:byte_72FD14, 0
    JZ loc_45EDA0
loc_45ED71:
    CMP dil, 20h
    JZ loc_45EDD8
loc_45ED77:
    MOV eax, cs:dword_72FD10
    MOVZX ebp, dil
    TEST eax, eax
    JLE loc_45ED8A
loc_45ED85:
    CALL sub_45E880
loc_45ED8A:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    TEST byte ptr [rax+rbp*2+1], 40h
    JNZ loc_45EDC8
loc_45ED99:
    CMP bl, 8
    JZ loc_45EDE8
loc_45ED9E:
    XCHG ax, ax
loc_45EDA0:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_45EDF8
loc_45EDB1:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], bl
loc_45EDBB:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_45EDC8:
    ADD cs:dword_72FD08, 1
    JMP loc_45EDA0
loc_45EDD8:
    ADD cs:dword_72FD10, 1
    JMP loc_45EDBB
loc_45EDE8:
    SUB cs:dword_72FD08, 1
    JMP loc_45EDA0
loc_45EDF8:
    ADD rsp, 8
    MOVZX esi, bl
    POP rbx
    POP rbp
    JMP ___overflow
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x19', '0x6BBAE8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 7, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### T 218 - print_char_0
```assembly
loc_468020:
    PUSH rbp
    PUSH rbx
    MOV ebx, edi
    SUB rsp, 8
    CMP cs:byte_752CF4, 0
    JZ loc_468060
loc_468031:
    CMP dil, 20h
    JZ loc_468098
loc_468037:
    MOV eax, cs:dword_752CF0
    MOVZX ebp, dil
    TEST eax, eax
    JLE loc_46804A
loc_468045:
    CALL sub_467C70
loc_46804A:
    CALL ___ctype_b_loc
    MOV rax, [rax]
    TEST byte ptr [rax+rbp*2+1], 40h
    JNZ loc_468088
loc_468059:
    CMP bl, 8
    JZ loc_4680A8
loc_46805E:
    XCHG ax, ax
loc_468060:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4680B8
loc_468071:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], bl
loc_46807B:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_468088:
    ADD cs:dword_752CE8, 1
    JMP loc_468060
loc_468098:
    ADD cs:dword_752CF0, 1
    JMP loc_46807B
loc_4680A8:
    SUB cs:dword_752CE8, 1
    JMP loc_468060
loc_4680B8:
    ADD rsp, 8
    MOVZX esi, bl
    POP rbx
    POP rbp
    JMP ___overflow
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x44', '0x19', '0x4C5B80'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Management'}

##### Q 219 - print_esc
```assembly
loc_461DD0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOVZX r13d, byte ptr [rdi+1]
    CMP r13b, 78h
    JZ loc_461EC8
loc_461DF0:
    LEA eax, [r13-30h]
    LEA rbp, [rdi+1]
    CMP al, 7
    JA loc_461E68
loc_461DFC:
    XOR eax, eax
    CMP r13b, 30h
    SETZ al
    XOR edx, edx
    AND rsi, rax
    ADD rsi, rbp
    LEA rbp, [rsi+3]
loc_461E11:
    MOVSX eax, byte ptr [rsi]
    LEA ecx, [rax-30h]
    CMP cl, 7
    JA loc_4621A0
loc_461E20:
    ADD rsi, 1
    LEA edx, [rax+rdx*8-30h]
    CMP rsi, rbp
    JNZ loc_461E11
loc_461E2D:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_462040
loc_461E42:
    LEA rcx, [rax+1]
    MOV [rdi+28h], rcx
    MOV [rax], dl
loc_461E4C:
    ADD rsp, 8
    SUB rbp, r12
    POP rbx
    LEA eax, [rbp-1]
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_461E68:
    TEST r13b, r13b
    JNZ loc_461F30
loc_461E71:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4621D8
loc_461E86:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_461E91:
    MOVZX eax, byte ptr [r12+1]
    TEST al, al
    JZ loc_461E4C
loc_461E9B:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_4621E7
loc_461EB0:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
loc_461EBA:
    LEA rbp, [r12+2]
    JMP loc_461E4C
loc_461EC8:
    LEA rbp, [rdi+2]
    CALL ___ctype_b_loc
    MOV rdi, [rax]
    XOR esi, esi
    XOR edx, edx
loc_461ED8:
    MOVZX eax, byte ptr [rbp+0]
    MOVZX ecx, al
    TEST byte ptr [rdi+rcx*2+1], 10h
    JZ loc_4621A8
loc_461EEA:
    MOV ecx, edx
    LEA edx, [rax-61h]
    SHL ecx, 4
    CMP dl, 5
    JA loc_461F18
loc_461EF7:
    MOVSX edx, al
    LEA eax, [rdx-57h]
loc_461EFD:
    ADD esi, 1
    ADD rbp, 1
    LEA edx, [rax+rcx]
    CMP esi, 2
    JZ loc_461E2D
loc_461F10:
    JMP loc_461ED8
loc_461F18:
    LEA edx, [rax-41h]
    CMP dl, 5
    MOVSX edx, al
    LEA eax, [rdx-37h]
    JBE loc_461EFD
loc_461F26:
    LEA eax, [rdx-30h]
    JMP loc_461EFD
loc_461F30:
    MOVSX ebx, r13b
    MOV edi, offset aAbcefnrtv
    MOV esi, ebx
    CALL _strchr
    TEST rax, rax
    JZ loc_461F60
loc_461F45:
    LEA eax, [r13-61h]
    LEA rbp, [r12+2]
    CMP al, 15h
    JA def_461F59
loc_461F56:
    MOVZX eax, al
    JMP ds:jpt_461F59[rax*8]
loc_461F60:
    MOV eax, r13d
    AND eax, 0FFFFFFDFh
    CMP al, 55h
    JNZ loc_461E71
loc_461F6E:
    XOR ebp, ebp
    CMP r13b, 75h
    LEA r14, [r12+2]
    SETNZ bpl
    XOR r15d, r15d
    LEA ebp, ds:4[rbp*4]
    CALL ___ctype_b_loc
    MOV rsi, [rax]
    LEA eax, [rbp-1]
    LEA rbp, [r14+rax+1]
    JMP loc_461FB3
loc_461FA0:
    MOVSX ecx, dl
    LEA edx, [rcx-57h]
loc_461FA6:
    ADD r14, 1
    LEA r15d, [rdx+r9]
    CMP r14, rbp
    JZ loc_461FF0
loc_461FB3:
    MOVZX eax, byte ptr [r14]
    TEST byte ptr [rsi+rax*2+1], 10h
    MOV rdx, rax
    JZ loc_4621B0
loc_461FC5:
    LEA eax, [rax-61h]
    MOV r9d, r15d
    SHL r9d, 4
    CMP al, 5
    JBE loc_461FA0
loc_461FD3:
    LEA eax, [rdx-41h]
    MOVSX ecx, dl
    LEA edx, [rcx-37h]
    CMP al, 5
    JBE loc_461FA6
loc_461FE0:
    LEA edx, [rcx-30h]
    ADD r14, 1
    CMP r14, rbp
    LEA r15d, [rdx+r9]
    JNZ loc_461FB3
loc_461FF0:
    CMP r15d, 9Fh
    JA loc_46200E
loc_461FF9:
    CMP r15d, 24h
    JZ loc_46200E
loc_461FFF:
    MOV eax, r15d
    AND eax, 0FFFFFFDFh
    CMP eax, 40h
    JNZ loc_46227A
loc_46200E:
    LEA eax, [r15-0D800h]
    CMP eax, 7FFh
    JBE loc_46227A
loc_462020:
    MOV rdi, cs:stdout
    XOR edx, edx
    MOV esi, r15d
    CALL sub_4B93A0
    JMP loc_461E4C
loc_462040:
    MOVZX esi, dl
    CALL ___overflow
    JMP loc_461E4C
loc_46204D:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_462202
loc_462062:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Bh
    JMP loc_461E4C
loc_462072:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46223E
loc_462087:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 9
    JMP loc_461E4C
loc_462097:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46224D
loc_4620AC:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Dh
    JMP loc_461E4C
loc_4620BC:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_462211
loc_4620D1:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    JMP loc_461E4C
loc_4620E1:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_462220
loc_4620F6:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ch
    JMP loc_461E4C
loc_462106:
    XOR edi, edi
    CALL _exit
loc_46210D:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46222F
loc_462122:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 1Bh
    JMP loc_461E4C
loc_462132:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46225C
loc_462147:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 8
    JMP loc_461E4C
loc_462157:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46226B
loc_46216C:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 7
    JMP loc_461E4C
loc_46217C:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_4621F4
loc_46218D:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], r13b
    JMP loc_461E4C
loc_4621A0:
    MOV rbp, rsi
    JMP loc_461E2D
loc_4621A8:
    TEST esi, esi
    JNZ loc_461E2D
loc_4621B0:
    MOV edx, 5
    MOV esi, offset aMissingHexadec
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00h]
loc_4621D8:
    MOV esi, 5Ch
    CALL ___overflow
    JMP loc_461E91
loc_4621E7:
    MOVZX esi, al
    CALL ___overflow
    JMP loc_461EBA
loc_4621F4:
    MOVZX esi, r13b
    CALL ___overflow
    JMP loc_461E4C
loc_462202:
    MOV esi, 0Bh
    CALL ___overflow
    JMP loc_461E4C
loc_462211:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_461E4C
loc_462220:
    MOV esi, 0Ch
    CALL ___overflow
    JMP loc_461E4C
loc_46222F:
    MOV esi, 1Bh
    CALL ___overflow
    JMP loc_461E4C
loc_46223E:
    MOV esi, 9
    CALL ___overflow
    JMP loc_461E4C
loc_46224D:
    MOV esi, 0Dh
    CALL ___overflow
    JMP loc_461E4C
loc_46225C:
    MOV esi, 8
    CALL ___overflow
    JMP loc_461E4C
loc_46226B:
    MOV esi, 7
    CALL ___overflow
    JMP loc_461E4C
loc_46227A:
    XOR ebp, ebp
    CMP r13b, 75h
    MOV edx, 5
    SETNZ bpl
    MOV esi, offset aInvalidUnivers
    XOR edi, edi
    LEA ebp, ds:4[rbp*4]
    CALL _dcgettext
    MOV r9d, r15d
    MOV rdx, rax
    MOV r8d, ebp
    MOV ecx, ebx
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
    NOP word ptr [rax+rax+00000000h]
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x7', '0xA1', '0x12', '0x1C', '0x59', '0x5A', '0x5B', '0x4A4850'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Algorithm'}

##### T 219 - print_esc
```assembly
loc_46BCB0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOVZX r12d, byte ptr [rdi+1]
    CMP r12b, 78h
    JZ loc_46BDD0
loc_46BCD0:
    LEA eax, [r12-30h]
    LEA rbx, [rdi+1]
    CMP al, 7
    JA loc_46BD70
loc_46BCE1:
    XOR eax, eax
    CMP r12b, 30h
    SETZ al
    AND rsi, rax
    ADD rbx, rsi
    MOVSX eax, byte ptr [rbx]
    LEA edx, [rax-30h]
    CMP dl, 7
    JA loc_46C380
loc_46BCFF:
    MOVSX edx, byte ptr [rbx+1]
    SUB eax, 30h
    LEA rsi, [rbx+1]
    LEA ecx, [rdx-30h]
    CMP cl, 7
    JA loc_46C370
loc_46BD16:
    LEA eax, [rdx+rax*8-30h]
    MOVSX edx, byte ptr [rbx+2]
    LEA rsi, [rbx+2]
    LEA ecx, [rdx-30h]
    CMP cl, 7
    JA loc_46C370
loc_46BD2E:
    LEA eax, [rdx+rax*8-30h]
    ADD rbx, 3
loc_46BD36:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_46BF10
loc_46BD4B:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
loc_46BD55:
    ADD rsp, 8
    SUB rbx, rbp
    LEA eax, [rbx-1]
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46BD70:
    TEST r12b, r12b
    JNZ loc_46BE38
loc_46BD79:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C390
loc_46BD8E:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 5Ch
loc_46BD99:
    MOVZX eax, byte ptr [rbp+1]
    TEST al, al
    JZ loc_46BD55
loc_46BDA1:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_46C39F
loc_46BDB6:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
loc_46BDC0:
    LEA rbx, [rbp+2]
    JMP loc_46BD55
loc_46BDD0:
    CALL ___ctype_b_loc
    MOVZX edx, byte ptr [rbp+2]
    MOV rcx, [rax]
    TEST byte ptr [rcx+rdx*2+1], 10h
    MOV rax, rdx
    JZ loc_46C3B0
loc_46BDEA:
    LEA edx, [rdx-61h]
    CMP dl, 5
    JBE loc_46BE70
loc_46BDF2:
    LEA edx, [rax-41h]
    MOVSX eax, al
    CMP dl, 5
    JBE loc_46BEF8
loc_46BE01:
    SUB eax, 30h
loc_46BE04:
    MOVZX esi, byte ptr [rbp+3]
    LEA rbx, [rbp+3]
    TEST byte ptr [rcx+rsi*2+1], 10h
    JZ loc_46BD36
loc_46BE17:
    LEA ecx, [rsi-61h]
    SHL eax, 4
    CMP cl, 5
    JA loc_46BE80
loc_46BE22:
    MOVSX edx, sil
    SUB edx, 57h
loc_46BE29:
    ADD eax, edx
    LEA rbx, [rbp+4]
    JMP loc_46BD36
loc_46BE38:
    MOVSX r13d, r12b
    MOV edi, offset aAbcefnrtv
    MOV esi, r13d
    CALL _strchr
    TEST rax, rax
    JZ loc_46BE98
loc_46BE4E:
    LEA eax, [r12-61h]
    LEA rbx, [rbp+2]
    CMP al, 15h
    JA def_46BE62
loc_46BE5F:
    MOVZX eax, al
    JMP ds:jpt_46BE62[rax*8]
loc_46BE70:
    MOVSX eax, al
    SUB eax, 57h
    JMP loc_46BE04
loc_46BE80:
    LEA ecx, [rsi-41h]
    MOVSX edx, sil
    CMP cl, 5
    JA loc_46BF00
loc_46BE8C:
    SUB edx, 37h
    JMP loc_46BE29
loc_46BE98:
    MOV eax, r12d
    AND eax, 0FFFFFFDFh
    CMP al, 55h
    JNZ loc_46BD79
loc_46BEA6:
    XOR r14d, r14d
    CMP r12b, 75h
    SETNZ r14b
    CALL ___ctype_b_loc
    MOVZX ecx, byte ptr [rbp+2]
    MOV rdx, [rax]
    LEA r14d, ds:4[r14*4]
    TEST byte ptr [rdx+rcx*2+1], 10h
    MOV rax, rcx
    JZ loc_46C3B0
loc_46BED3:
    LEA ecx, [rcx-61h]
    CMP cl, 5
    JBE loc_46BF20
loc_46BEDB:
    LEA ecx, [rax-41h]
    MOVSX r9d, al
    CMP cl, 5
    JA loc_46C1F0
loc_46BEEB:
    SUB r9d, 37h
    JMP loc_46BF28
loc_46BEF8:
    SUB eax, 37h
    JMP loc_46BE04
loc_46BF00:
    SUB edx, 30h
    JMP loc_46BE29
loc_46BF10:
    MOVZX esi, al
    CALL ___overflow
    JMP loc_46BD55
loc_46BF20:
    MOVSX r9d, al
    SUB r9d, 57h
loc_46BF28:
    MOVZX ecx, byte ptr [rbp+3]
    TEST byte ptr [rdx+rcx*2+1], 10h
    MOV rax, rcx
    JZ loc_46C3B0
loc_46BF3A:
    LEA ecx, [rcx-61h]
    SHL r9d, 4
    CMP cl, 5
    JBE loc_46BF60
loc_46BF46:
    LEA ecx, [rax-41h]
    MOVSX eax, al
    CMP cl, 5
    JA loc_46C1E0
loc_46BF55:
    SUB eax, 37h
    JMP loc_46BF66
loc_46BF60:
    MOVSX eax, al
    SUB eax, 57h
loc_46BF66:
    MOVZX ecx, byte ptr [rbp+4]
    ADD r9d, eax
    TEST byte ptr [rdx+rcx*2+1], 10h
    MOV rax, rcx
    JZ loc_46C3B0
loc_46BF7B:
    LEA ecx, [rcx-61h]
    SHL r9d, 4
    CMP cl, 5
    JBE loc_46BFA0
loc_46BF87:
    LEA ecx, [rax-41h]
    MOVSX eax, al
    CMP cl, 5
    JA loc_46C1D0
loc_46BF96:
    SUB eax, 37h
    JMP loc_46BFA6
loc_46BFA0:
    MOVSX eax, al
    SUB eax, 57h
loc_46BFA6:
    MOVZX ecx, byte ptr [rbp+5]
    ADD r9d, eax
    TEST byte ptr [rdx+rcx*2+1], 10h
    MOV rax, rcx
    JZ loc_46C3B0
loc_46BFBB:
    LEA ecx, [rcx-61h]
    SHL r9d, 4
    CMP cl, 5
    JBE loc_46BFE0
loc_46BFC7:
    LEA ecx, [rax-41h]
    MOVSX eax, al
    CMP cl, 5
    JA loc_46C1C0
loc_46BFD6:
    SUB eax, 37h
    JMP loc_46BFE6
loc_46BFE0:
    MOVSX eax, al
    SUB eax, 57h
loc_46BFE6:
    CMP r14d, 4
    LEA r15d, [r9+rax]
    LEA rbx, [rbp+6]
    JZ loc_46C07C
loc_46BFF8:
    MOVZX ecx, byte ptr [rbp+6]
    TEST byte ptr [rdx+rcx*2+1], 10h
    MOV rax, rcx
    JZ loc_46C3B0
loc_46C00A:
    LEA ecx, [rcx-61h]
    SHL r15d, 4
    MOV r9d, r15d
    CMP cl, 5
    JBE loc_46C0C8
loc_46C01D:
    LEA ecx, [rax-41h]
    MOVSX eax, al
    CMP cl, 5
    JA loc_46C1B0
loc_46C02C:
    SUB eax, 37h
    JMP loc_46C0CE
loc_46C038:
    MOVSX eax, al
    SUB eax, 57h
loc_46C03E:
    CMP r14d, 8
    LEA r15d, [r9+rax]
    LEA rbx, [rbp+9]
    JNZ loc_46C07C
loc_46C04C:
    MOVZX ecx, byte ptr [rbp+9]
    TEST byte ptr [rdx+rcx*2+1], 10h
    JZ loc_46C3B0
loc_46C05B:
    LEA edx, [rcx-61h]
    MOV r9d, r15d
    SHL r9d, 4
    CMP dl, 5
    JA loc_46C170
loc_46C06E:
    MOVSX eax, cl
    SUB eax, 57h
loc_46C074:
    LEA r15d, [rax+r9]
    LEA rbx, [rbp+0Ah]
loc_46C07C:
    CMP r15d, 9Fh
    JA loc_46C09A
loc_46C085:
    CMP r15d, 24h
    JZ loc_46C09A
loc_46C08B:
    MOV eax, r15d
    AND eax, 0FFFFFFDFh
    CMP eax, 40h
    JNZ loc_46C458
loc_46C09A:
    LEA eax, [r15-0D800h]
    CMP eax, 7FFh
    JBE loc_46C458
loc_46C0AC:
    MOV rdi, cs:stdout
    XOR edx, edx
    MOV esi, r15d
    CALL sub_4D93A0
    JMP loc_46BD55
loc_46C0C8:
    MOVSX eax, al
    SUB eax, 57h
loc_46C0CE:
    CMP r14d, 5
    LEA r15d, [r9+rax]
    LEA rbx, [rbp+7]
    JZ loc_46C07C
loc_46C0DC:
    MOVZX ecx, byte ptr [rbp+7]
    TEST byte ptr [rdx+rcx*2+1], 10h
    MOV rax, rcx
    JZ loc_46C3B0
loc_46C0EE:
    LEA ecx, [rcx-61h]
    SHL r15d, 4
    MOV r9d, r15d
    CMP cl, 5
    JBE loc_46C118
loc_46C0FD:
    LEA ecx, [rax-41h]
    MOVSX eax, al
    CMP cl, 5
    JA loc_46C1A0
loc_46C10C:
    SUB eax, 37h
    JMP loc_46C11E
loc_46C118:
    MOVSX eax, al
    SUB eax, 57h
loc_46C11E:
    CMP r14d, 6
    LEA r15d, [r9+rax]
    LEA rbx, [rbp+8]
    JZ loc_46C07C
loc_46C130:
    MOVZX ecx, byte ptr [rbp+8]
    TEST byte ptr [rdx+rcx*2+1], 10h
    MOV rax, rcx
    JZ loc_46C3B0
loc_46C142:
    LEA ecx, [rcx-61h]
    SHL r15d, 4
    MOV r9d, r15d
    CMP cl, 5
    JBE loc_46C038
loc_46C155:
    LEA ecx, [rax-41h]
    MOVSX eax, al
    CMP cl, 5
    JA loc_46C190
loc_46C160:
    SUB eax, 37h
    JMP loc_46C03E
loc_46C170:
    LEA edx, [rcx-41h]
    MOVSX eax, cl
    CMP dl, 5
    JA loc_46C188
loc_46C17B:
    SUB eax, 37h
    JMP loc_46C074
loc_46C188:
    SUB eax, 30h
    JMP loc_46C074
loc_46C190:
    SUB eax, 30h
    JMP loc_46C03E
loc_46C1A0:
    SUB eax, 30h
    JMP loc_46C11E
loc_46C1B0:
    SUB eax, 30h
    JMP loc_46C0CE
loc_46C1C0:
    SUB eax, 30h
    JMP loc_46BFE6
loc_46C1D0:
    SUB eax, 30h
    JMP loc_46BFA6
loc_46C1E0:
    SUB eax, 30h
    JMP loc_46BF66
loc_46C1F0:
    SUB r9d, 30h
    JMP loc_46BF28
loc_46C200:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C3E1
loc_46C215:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Bh
    JMP loc_46BD55
loc_46C228:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C3FF
loc_46C23D:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 9
    JMP loc_46BD55
loc_46C250:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C3F0
loc_46C265:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ah
    JMP loc_46BD55
loc_46C278:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C40E
loc_46C28D:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Dh
    JMP loc_46BD55
loc_46C2A0:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C43A
loc_46C2B5:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 0Ch
    JMP loc_46BD55
loc_46C2C8:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C42B
loc_46C2DD:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 1Bh
    JMP loc_46BD55
loc_46C2F0:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C449
loc_46C305:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 8
    JMP loc_46BD55
loc_46C318:
    XOR edi, edi
    CALL _exit
loc_46C320:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C3D2
loc_46C335:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 7
    JMP loc_46BD55
loc_46C348:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46C41D
loc_46C35D:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV [rax], r12b
    JMP loc_46BD55
loc_46C370:
    MOV rbx, rsi
    JMP loc_46BD36
loc_46C380:
    XOR eax, eax
    JMP loc_46BD36
loc_46C390:
    MOV esi, 5Ch
    CALL ___overflow
    JMP loc_46BD99
loc_46C39F:
    MOVZX esi, al
    CALL ___overflow
    JMP loc_46BDC0
loc_46C3B0:
    MOV edx, 5
    MOV esi, offset aMissingHexadec
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_46C3D2:
    MOV esi, 7
    CALL ___overflow
    JMP loc_46BD55
loc_46C3E1:
    MOV esi, 0Bh
    CALL ___overflow
    JMP loc_46BD55
loc_46C3F0:
    MOV esi, 0Ah
    CALL ___overflow
    JMP loc_46BD55
loc_46C3FF:
    MOV esi, 9
    CALL ___overflow
    JMP loc_46BD55
loc_46C40E:
    MOV esi, 0Dh
    CALL ___overflow
    JMP loc_46BD55
loc_46C41D:
    MOVZX esi, r12b
    CALL ___overflow
    JMP loc_46BD55
loc_46C42B:
    MOV esi, 1Bh
    CALL ___overflow
    JMP loc_46BD55
loc_46C43A:
    MOV esi, 0Ch
    CALL ___overflow
    JMP loc_46BD55
loc_46C449:
    MOV esi, 8
    CALL ___overflow
    JMP loc_46BD55
loc_46C458:
    XOR ebx, ebx
    CMP r12b, 75h
    MOV edx, 5
    SETNZ bl
    MOV esi, offset aInvalidUnivers
    XOR edi, edi
    LEA ebx, ds:4[rbx*4]
    CALL _dcgettext
    MOV r9d, r15d
    MOV rdx, rax
    MOV r8d, ebx
    MOV ecx, r13d
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
    NOP word ptr [rax+rax+00000000h]
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x7', '0xA1', '0x12', '0x1C', '0x59', '0x5A', '0x5B'], 'presence_of_notable_floating_point_constants': ['cs:qword_4CC730'], 'count_of_distinct_immediate_values': 25, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Computation'}

##### Q 220 - forget_all
```assembly
loc_428DE0:
    MOV rdi, cs:qword_720CB8
    JMP sub_4A7980
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3FFFFFFF', '0x5E', '0x10', '0x4', '0x1100'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Allocation', 'inferred_category': 'Utility'}

##### T 220 - forget_all
```assembly
loc_42B4D0:
    MOV rdi, cs:qword_743C98
    JMP sub_4C30E0
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x3FFFFFFF', '0x5E', '0x10', '0x4', '0x1100'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 9, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Memory Allocation', 'inferred_category': 'Utility/Helper'}

##### Q 221 - cleanup
```assembly
loc_405DE0:

loc_4093D0:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV ebx, edi
    SUB rsp, 10h
    CMP edi, 0Eh
    JZ loc_4094F0
loc_4093E3:
    MOV ebp, cs:pid
    TEST ebp, ebp
    JZ loc_409505
loc_4093F1:
    MOVSD xmm0, cs:qword_7203F8
    UCOMISD xmm0, cs:qword_4C8D88
    JP loc_409498
loc_409407:
    JNZ loc_409498
loc_40940D:
    MOV esi, ebx
    MOV edi, ebp
    CALL _kill
    CMP cs:byte_7203F1, 0
    JZ loc_409430
loc_40941F:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_409430:
    MOV esi, 1
    MOV edi, ebx
    CALL _signal
    XOR edi, edi
    MOV esi, ebx
    CALL _kill
    CMP ebx, 9
    JZ loc_40941F
loc_40944A:
    CMP ebx, 12h
    JZ loc_40941F
loc_40944F:
    TEST ebp, ebp
    JNZ loc_409462
loc_409453:
    MOV esi, 1
    MOV edi, 12h
    CALL _signal
loc_409462:
    MOV edi, ebp
    MOV esi, 12h
    CALL _kill
    MOV esi, 1
    MOV edi, 12h
    CALL _signal
    ADD rsp, 10h
    MOV esi, 12h
    XOR edi, edi
    POP rbx
    POP rbp
    POP r12
    JMP _kill
loc_409498:
    MOVSD [rsp+28h+var_20], xmm0
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbp, rax
    XOR edi, edi
    MOVSD xmm0, [rsp+28h+var_20]
    MOV cs:signo, 9
    CALL sub_4091F0
    MOV [rbp+0], r12d
    MOV ebp, cs:pid
    MOV cs:qword_7203F8, 0
    TEST ebp, ebp
    JNZ loc_40940D
loc_4094DD:
    MOV esi, 1
    MOV edi, ebx
    CALL _signal
    JMP loc_40940D
loc_4094F0:
    MOV cs:dword_720404, 1
    MOV ebx, cs:signo
    JMP loc_4093E3
loc_409505:
    LEA edi, [rbx+80h]
    CALL __exit
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching', 'SubroutineCall'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFF8', '8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Mathematical/Algorithmic'}

##### T 221 - cleanup
```assembly
loc_405DE0:

loc_4095E0:
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV ebx, edi
    SUB rsp, 10h
    CMP edi, 0Eh
    JZ loc_409700
loc_4095F3:
    MOV ebp, cs:pid
    TEST ebp, ebp
    JZ loc_409715
loc_409601:
    MOVSD xmm0, cs:qword_7433F8
    UCOMISD xmm0, cs:qword_4EBA28
    JP loc_4096A8
loc_409617:
    JNZ loc_4096A8
loc_40961D:
    MOV esi, ebx
    MOV edi, ebp
    CALL _kill
    CMP cs:byte_7433F1, 0
    JZ loc_409640
loc_40962F:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_409640:
    MOV esi, 1
    MOV edi, ebx
    CALL _signal
    XOR edi, edi
    MOV esi, ebx
    CALL _kill
    CMP ebx, 9
    JZ loc_40962F
loc_40965A:
    CMP ebx, 12h
    JZ loc_40962F
loc_40965F:
    TEST ebp, ebp
    JNZ loc_409672
loc_409663:
    MOV esi, 1
    MOV edi, 12h
    CALL _signal
loc_409672:
    MOV edi, ebp
    MOV esi, 12h
    CALL _kill
    MOV esi, 1
    MOV edi, 12h
    CALL _signal
    ADD rsp, 10h
    MOV esi, 12h
    XOR edi, edi
    POP rbx
    POP rbp
    POP r12
    JMP _kill
loc_4096A8:
    MOVSD [rsp+28h+var_20], xmm0
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbp, rax
    XOR edi, edi
    MOVSD xmm0, [rsp+28h+var_20]
    MOV cs:signo, 9
    CALL sub_409490
    MOV [rbp+0], r12d
    MOV ebp, cs:pid
    MOV cs:qword_7433F8, 0
    TEST ebp, ebp
    JNZ loc_40961D
loc_4096ED:
    MOV esi, 1
    MOV edi, ebx
    CALL _signal
    JMP loc_40961D
loc_409700:
    MOV cs:dword_743404, 1
    MOV ebx, cs:signo
    JMP loc_4095F3
loc_409715:
    LEA edi, [rbx+80h]
    CALL __exit
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching', 'SubroutineCall'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFF8', '0x8', '0xFFFFFFFF', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Math/Number Theory'}

##### Q 222 - single_binary_main_chgrp
```assembly
loc_41DD40:
    PUSH r15
    PUSH r14
    MOV r14d, 0FFFFFFFFh
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOVSXD rbp, edi
    MOV rbx, rsi
    MOV r12d, 10h
    SUB rsp, 0E8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+118h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    LEA rdi, [rsp+118h+var_108]
    CALL sub_41E2B0
loc_41DDBD:
    XOR r8d, r8d
    MOV ecx, offset stru_4D2260
    MOV edx, offset aHlprcfhv
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_41DF70
loc_41DDDD:
    CMP eax, 63h
    JZ loc_41DF60
loc_41DDE6:
    JLE loc_41DE18
loc_41DDE8:
    CMP eax, 80h
    JZ loc_41DF50
loc_41DDF3:
    JG loc_41DE50
loc_41DDF5:
    CMP eax, 68h
    JZ loc_41DF40
loc_41DDFE:
    CMP eax, 76h
    JZ loc_41DE98
loc_41DE07:
    CMP eax, 66h
    JNZ loc_41DE3E
loc_41DE0C:
    MOV [rsp+118h+var_F7], 1
    JMP loc_41DDBD
loc_41DE18:
    CMP eax, 48h
    JZ loc_41DF30
loc_41DE21:
    JLE loc_41DE80
loc_41DE23:
    CMP eax, 50h
    JZ loc_41DF20
loc_41DE2C:
    CMP eax, 52h
    JZ loc_41DEF0
loc_41DE35:
    CMP eax, 4Ch
    JZ loc_41DF00
loc_41DE3E:
    MOV edi, 1
    CALL sub_41D920
loc_41DE50:
    CMP eax, 82h
    JZ loc_41DF10
loc_41DE5B:
    JL loc_41DEE0
loc_41DE61:
    CMP eax, 83h
    JNZ loc_41DE3E
loc_41DE68:
    MOV rax, cs:optarg
    MOV cs:qword_7207B0, rax
    JMP loc_41DDBD
loc_41DE80:
    CMP eax, 0FFFFFF7Dh
    JZ loc_41DEA8
loc_41DE87:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_41DE3E
loc_41DE8E:
    XOR edi, edi
    CALL sub_41D920
loc_41DE98:
    MOV [rsp+118h+var_108], 0
    JMP loc_41DDBD
loc_41DEA8:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    PUSH 0
    MOV r9d, offset aJimMeyering
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aChgrp
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_41DEE0:
    XOR r13d, r13d
    JMP loc_41DDBD
loc_41DEF0:
    MOV [rsp+118h+var_104], 1
    JMP loc_41DDBD
loc_41DF00:
    MOV r12d, 2
    JMP loc_41DDBD
loc_41DF10:
    MOV r13d, 1
    JMP loc_41DDBD
loc_41DF20:
    MOV r12d, 10h
    JMP loc_41DDBD
loc_41DF30:
    MOV r12d, 11h
    JMP loc_41DDBD
loc_41DF40:
    XOR r14d, r14d
    JMP loc_41DDBD
loc_41DF50:
    MOV r14d, 1
    JMP loc_41DDBD
loc_41DF60:
    MOV [rsp+118h+var_108], 1
    JMP loc_41DDBD
loc_41DF70:
    MOVZX eax, [rsp+118h+var_104]
    TEST al, al
    JZ loc_41DF90
loc_41DF79:
    CMP r12d, 10h
    JZ loc_41E0B0
loc_41DF83:
    TEST r14d, r14d
    SETNZ dl
    JMP loc_41DF9C
loc_41DF90:
    TEST r14d, r14d
    MOV r12d, 10h
    SETNZ dl
loc_41DF9C:
    MOV [rsp+118h+var_F8], dl
    MOVSXD rdx, cs:optind
    MOV ecx, ebp
    MOV r14, cs:qword_7207B0
    SUB ecx, edx
    TEST r14, r14
    JZ loc_41E0C1
loc_41DFBB:
    TEST ecx, ecx
    JLE loc_41E1B3
loc_41DFC3:
    LEA rdx, [rsp+118h+stat_buf]
    MOV rsi, r14
    MOV edi, 1
    CALL ___xstat
    TEST eax, eax
    JNZ loc_41E176
loc_41DFDD:
    MOV ebp, [rsp+118h+stat_buf.st_gid]
    MOV edi, ebp
    CALL sub_41E2F0
    MOV [rsp+118h+var_E8], rax
    MOVZX eax, [rsp+118h+var_104]
loc_41DFF2:
    TEST r13b, r13b
    JZ loc_41DFFB
loc_41DFF7:
    TEST al, al
    JNZ loc_41E05D
loc_41DFFB:
    MOVSXD rax, cs:optind
    SUB rsp, 8
    MOV r9d, 0FFFFFFFFh
    MOV esi, r12d
    MOV ecx, ebp
    MOV edx, r9d
    OR esi, 400h
    MOV r8d, r9d
    LEA rdi, [rbx+rax*8]
    LEA rax, [rsp+120h+var_108]
    PUSH rax
    CALL sub_41F080
    POP rdx
    POP rcx
    XOR eax, 1
    MOVZX eax, al
    MOV rcx, [rsp+118h+var_40]
    XOR rcx, fs:28h
    JNZ loc_41E112
loc_41E04B:
    ADD rsp, 0E8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41E05D:
    MOV edi, offset unk_7207A0
    CALL sub_4B71C0
    TEST rax, rax
    MOV [rsp+118h+var_100], rax
    JNZ loc_41DFFB
loc_41E071:
    MOV esi, (offset aDired+8)
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aFailedToGetAtt
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41E0B0:
    CMP r14d, 1
    JZ loc_41E1DB
loc_41E0BA:
    XOR edx, edx
    JMP loc_41DF9C
loc_41E0C1:
    CMP ecx, 1
    JLE loc_41E1B3
loc_41E0CA:
    MOV r15, [rbx+rdx*8]
    LEA ecx, [rdx+1]
    MOV ebp, 0FFFFFFFFh
    MOV cs:optind, ecx
    CMP byte ptr [r15], 0
    CMOVNZ r14, r15
    MOV [rsp+118h+var_E8], r14
    CMP byte ptr [r15], 0
    JZ loc_41DFF2
loc_41E0F3:
    MOV rdi, r15
    CALL _getgrnam
    TEST rax, rax
    JZ loc_41E117
loc_41E100:
    MOV ebp, [rax+10h]
loc_41E103:
    CALL _endgrent
    MOVZX eax, [rsp+118h+var_104]
    JMP loc_41DFF2
loc_41E112:
    CALL ___stack_chk_fail
loc_41E117:
    LEA rcx, [rsp+118h+var_110]
    XOR esi, esi
    MOV r8d, (offset a8+6)
    MOV edx, 0Ah
    MOV rdi, r15
    CALL sub_4BCCA0
    TEST eax, eax
    JNZ loc_41E146
loc_41E135:
    MOV rax, [rsp+118h+var_110]
    MOV edx, 0FFFFFFFFh
    CMP rax, rdx
    MOV ebp, eax
    JBE loc_41E103
loc_41E146:
    MOV rdi, r15
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidGroupS_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41E176:
    MOV rsi, r14
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aFailedToGetAtt
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41E1B3:
    CMP ebp, edx
    JG loc_41E1FD
loc_41E1B7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aMissingOperand
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_41DE3E
loc_41E1DB:
    MOV edx, 5
    MOV esi, offset aRDereferenceRe
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41E1FD:
    MOV rdi, [rbx+rbp*8-8]
    CALL sub_4B5440
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aMissingOperand_0
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_41DE3E
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Traversal', 'inferred_category': 'Recursive'}

##### T 222 - single_binary_main_chgrp
```assembly
loc_420060:
    PUSH r15
    PUSH r14
    MOV r14d, 0FFFFFFFFh
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOVSXD rbp, edi
    MOV rbx, rsi
    MOV r12d, 10h
    SUB rsp, 0E8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+118h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    LEA rdi, [rsp+118h+var_108]
    CALL sub_420560
loc_4200DD:
    XOR r8d, r8d
    MOV ecx, offset stru_4F4F80
    MOV edx, offset aHlprcfhv
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_420290
loc_4200FD:
    CMP eax, 63h
    JZ loc_420280
loc_420106:
    JLE loc_420138
loc_420108:
    CMP eax, 80h
    JZ loc_420270
loc_420113:
    JG loc_420170
loc_420115:
    CMP eax, 68h
    JZ loc_420260
loc_42011E:
    CMP eax, 76h
    JZ loc_4201B8
loc_420127:
    CMP eax, 66h
    JNZ loc_42015E
loc_42012C:
    MOV [rsp+118h+var_F7], 1
    JMP loc_4200DD
loc_420138:
    CMP eax, 48h
    JZ loc_420250
loc_420141:
    JLE loc_4201A0
loc_420143:
    CMP eax, 50h
    JZ loc_420240
loc_42014C:
    CMP eax, 52h
    JZ loc_420210
loc_420155:
    CMP eax, 4Ch
    JZ loc_420220
loc_42015E:
    MOV edi, 1
    CALL sub_41FC40
loc_420170:
    CMP eax, 82h
    JZ loc_420230
loc_42017B:
    JL loc_420200
loc_420181:
    CMP eax, 83h
    JNZ loc_42015E
loc_420188:
    MOV rax, cs:optarg
    MOV cs:qword_7437A0, rax
    JMP loc_4200DD
loc_4201A0:
    CMP eax, 0FFFFFF7Dh
    JZ loc_4201C8
loc_4201A7:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_42015E
loc_4201AE:
    XOR edi, edi
    CALL sub_41FC40
loc_4201B8:
    MOV [rsp+118h+var_108], 0
    JMP loc_4200DD
loc_4201C8:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    PUSH 0
    MOV r9d, offset aJimMeyering
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aChgrp
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_420200:
    XOR r13d, r13d
    JMP loc_4200DD
loc_420210:
    MOV [rsp+118h+var_104], 1
    JMP loc_4200DD
loc_420220:
    MOV r12d, 2
    JMP loc_4200DD
loc_420230:
    MOV r13d, 1
    JMP loc_4200DD
loc_420240:
    MOV r12d, 10h
    JMP loc_4200DD
loc_420250:
    MOV r12d, 11h
    JMP loc_4200DD
loc_420260:
    XOR r14d, r14d
    JMP loc_4200DD
loc_420270:
    MOV r14d, 1
    JMP loc_4200DD
loc_420280:
    MOV [rsp+118h+var_108], 1
    JMP loc_4200DD
loc_420290:
    MOVZX eax, [rsp+118h+var_104]
    TEST al, al
    JZ loc_4202B0
loc_420299:
    CMP r12d, 10h
    JZ loc_4203D0
loc_4202A3:
    TEST r14d, r14d
    SETNZ dl
    JMP loc_4202BC
loc_4202B0:
    TEST r14d, r14d
    MOV r12d, 10h
    SETNZ dl
loc_4202BC:
    MOV [rsp+118h+var_F8], dl
    MOVSXD rdx, cs:optind
    MOV ecx, ebp
    MOV r14, cs:qword_7437A0
    SUB ecx, edx
    TEST r14, r14
    JZ loc_4203E1
loc_4202DB:
    TEST ecx, ecx
    JLE loc_4204D3
loc_4202E3:
    LEA rdx, [rsp+118h+stat_buf]
    MOV rsi, r14
    MOV edi, 1
    CALL ___xstat
    TEST eax, eax
    JNZ loc_420496
loc_4202FD:
    MOV ebp, [rsp+118h+stat_buf.st_gid]
    MOV edi, ebp
    CALL sub_4205A0
    MOV [rsp+118h+var_E8], rax
    MOVZX eax, [rsp+118h+var_104]
loc_420312:
    TEST r13b, r13b
    JZ loc_42031B
loc_420317:
    TEST al, al
    JNZ loc_42037D
loc_42031B:
    MOVSXD rax, cs:optind
    SUB rsp, 8
    MOV r9d, 0FFFFFFFFh
    MOV esi, r12d
    MOV ecx, ebp
    MOV edx, r9d
    OR esi, 400h
    MOV r8d, r9d
    LEA rdi, [rbx+rax*8]
    LEA rax, [rsp+120h+var_108]
    PUSH rax
    CALL sub_420660
    POP rdx
    POP rcx
    XOR eax, 1
    MOVZX eax, al
    MOV rcx, [rsp+118h+var_40]
    XOR rcx, fs:28h
    JNZ loc_420432
loc_42036B:
    ADD rsp, 0E8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42037D:
    MOV edi, offset unk_743790
    CALL sub_4D6F40
    TEST rax, rax
    MOV [rsp+118h+var_100], rax
    JNZ loc_42031B
loc_420391:
    MOV esi, (offset aDired+8)
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aFailedToGetAtt
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4203D0:
    CMP r14d, 1
    JZ loc_4204FB
loc_4203DA:
    XOR edx, edx
    JMP loc_4202BC
loc_4203E1:
    CMP ecx, 1
    JLE loc_4204D3
loc_4203EA:
    MOV r15, [rbx+rdx*8]
    LEA ecx, [rdx+1]
    MOV ebp, 0FFFFFFFFh
    MOV cs:optind, ecx
    CMP byte ptr [r15], 0
    CMOVNZ r14, r15
    MOV [rsp+118h+var_E8], r14
    CMP byte ptr [r15], 0
    JZ loc_420312
loc_420413:
    MOV rdi, r15
    CALL _getgrnam
    TEST rax, rax
    JZ loc_420437
loc_420420:
    MOV ebp, [rax+10h]
loc_420423:
    CALL _endgrent
    MOVZX eax, [rsp+118h+var_104]
    JMP loc_420312
loc_420432:
    CALL ___stack_chk_fail
loc_420437:
    LEA rcx, [rsp+118h+var_110]
    XOR esi, esi
    MOV r8d, (offset a8+6)
    MOV edx, 0Ah
    MOV rdi, r15
    CALL sub_4DEB00
    TEST eax, eax
    JNZ loc_420466
loc_420455:
    MOV rax, [rsp+118h+var_110]
    MOV edx, 0FFFFFFFFh
    CMP rax, rdx
    MOV ebp, eax
    JBE loc_420423
loc_420466:
    MOV rdi, r15
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidGroupS_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_420496:
    MOV rsi, r14
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aFailedToGetAtt
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_4204D3:
    CMP ebp, edx
    JG loc_42051D
loc_4204D7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aMissingOperand
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_42015E
loc_4204FB:
    MOV edx, 5
    MOV esi, offset aRDereferenceRe
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42051D:
    MOV rdi, [rbx+rbp*8-8]
    CALL sub_4D4D30
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aMissingOperand_0
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_42015E
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x6E42A0', '0x6E3AE8', '0x6E3AA0', '0x6E4348', '0x6E4300', '0x6E3A90', '0x6E42A0', '0x6E3AF8', '0x6E3A60', '0x18'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### Q 223 - xgetgroups
```assembly
loc_4BB640:
    PUSH rbx
    CALL sub_4C4B90
    CMP eax, 0FFFFFFFFh
    MOV ebx, eax
    JZ loc_4BB658
loc_4BB64D:
    MOV eax, ebx
    POP rbx
    RETN 
loc_4BB658:
    CALL ___errno_location
    CMP dword ptr [rax], 0Ch
    JNZ loc_4BB64D
loc_4BB662:
    CALL sub_429BE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x11', '0x0', '0x8', '0xA', '0x3', '0x2', '0x4', '0x7', '0x1', '0xFE'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 19, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation and Looping', 'inferred_category': 'Utility Function'}

##### T 223 - xgetgroups
```assembly
loc_4DD2B0:
    PUSH rbx
    CALL sub_4E78D0
    CMP eax, 0FFFFFFFFh
    MOV ebx, eax
    JZ loc_4DD2C8
loc_4DD2BD:
    MOV eax, ebx
    POP rbx
    RETN 
loc_4DD2C8:
    CALL ___errno_location
    CMP dword ptr [rax], 0Ch
    JNZ loc_4DD2BD
loc_4DD2D2:
    CALL sub_42C250
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'ArithmeticOperations'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x0', '0x8', '0x10', '0x11', '0x14', '0x15', '0x17', '0x18', '0x19', '0x1D', '0x20', '0x22', '0x23'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Control Flow Manipulation', 'inferred_category': 'Utility/Helper Function'}

##### Q 224 - src_to_dest_free
```assembly
loc_428C30:
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, [rdi+10h]
    CALL _free
    MOV rdi, rbx
    POP rbx
    JMP _free
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'SubroutineCall'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1D2', '0x1B'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 38, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Search Algorithm (Linear Search or Similar)', 'inferred_category': 'General Algorithms/Utilities'}

##### T 224 - src_to_dest_free
```assembly
loc_42B320:
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, [rdi+10h]
    CALL _free
    MOV rdi, rbx
    POP rbx
    JMP _free
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['28h', '40h', '20h', '46h', '1Bh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 21, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Comparison and Modification', 'inferred_category': 'Utility Function'}

##### Q 225 - rpl_vfprintf
```assembly
loc_4C2242:
    MOV rcx, r13
    MOV rdx, rbx
    MOV esi, 1
    MOV rdi, rax
    MOV rbp, rax
    CALL _fwrite
    CMP rbx, rax
    JA loc_4C22A0
loc_4C225D:
    CMP rbp, r12
    JZ loc_4C226A
loc_4C2262:
    MOV rdi, rbp
    CALL _free
loc_4C226A:
    CMP rbx, 7FFFFFFFh
    JA loc_4C22C3
loc_4C2273:
    MOV rcx, [rsp+818h+var_30]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_4C22DD
loc_4C2288:
    ADD rsp, 7F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4C22A0:
    CMP rbp, r12
    MOV ebx, 0FFFFFFFFh
    JZ loc_4C2273
loc_4C22AA:
    CALL ___errno_location
    MOV r13d, [rax]
    MOV r12, rax
    MOV rdi, rbp
    CALL _free
    MOV [r12], r13d
    JMP loc_4C2273
loc_4C22C3:
    CALL ___errno_location
    MOV dword ptr [rax], 4Bh
loc_4C22CE:
    MOV rdi, r13
    MOV ebx, 0FFFFFFFFh
    CALL sub_4C5600
    JMP loc_4C2273
loc_4C22DD:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x13'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility'}

##### T 225 - rpl_vfprintf
```assembly
loc_4E4ED2:
    MOV rcx, r13
    MOV rdx, rbx
    MOV esi, 1
    MOV rdi, rax
    MOV rbp, rax
    CALL _fwrite
    CMP rbx, rax
    JA loc_4E4F30
loc_4E4EED:
    CMP rbp, r12
    JZ loc_4E4EFA
loc_4E4EF2:
    MOV rdi, rbp
    CALL _free
loc_4E4EFA:
    CMP rbx, 7FFFFFFFh
    JA loc_4E4F53
loc_4E4F03:
    MOV rcx, [rsp+818h+var_30]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_4E4F6D
loc_4E4F18:
    ADD rsp, 7F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4E4F30:
    CMP rbp, r12
    MOV ebx, 0FFFFFFFFh
    JZ loc_4E4F03
loc_4E4F3A:
    CALL ___errno_location
    MOV r13d, [rax]
    MOV r12, rax
    MOV rdi, rbp
    CALL _free
    MOV [r12], r13d
    JMP loc_4E4F03
loc_4E4F53:
    CALL ___errno_location
    MOV dword ptr [rax], 4Bh
loc_4E4F5E:
    MOV rdi, r13
    MOV ebx, 0FFFFFFFFh
    CALL sub_4E8370
    JMP loc_4E4F03
loc_4E4F6D:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x13'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### Q 226 - interrupt_handler
```assembly
loc_429980:
    MOVZX eax, cs:byte_720D72
    PUSH rbx
    MOV ebx, edi
    TEST al, al
    JZ loc_429998
loc_42998E:
    MOV edi, 1
    CALL sub_429530
loc_429998:
    MOV edi, ebx
    XOR esi, esi
    CALL _signal
    MOV edi, ebx
    POP rbx
    JMP _raise
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x11', '0x20', '0x497B74', '0xF6F0', '0xB', '0x41F6C0', '0x41F740', '0x41A3F0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 16, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hash Table Lookup or Insertion', 'inferred_category': 'Data Structures'}

##### T 226 - interrupt_handler
```assembly
loc_42C220:
    MOVZX eax, cs:byte_743D52
    PUSH rbx
    MOV ebx, edi
    TEST al, al
    JZ loc_42C238
loc_42C22E:
    MOV edi, 1
    CALL sub_42BBC0
loc_42C238:
    MOV edi, ebx
    XOR esi, esi
    CALL _signal
    MOV edi, ebx
    POP rbx
    JMP _raise
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Unknown', 'Unknown'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'ArithmeticOperations'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['4BFAA4h', '0F6F0h', '0Bh'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 22, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Data Manipulation', 'inferred_category': 'Data Processing'}

##### Q 227 - freadahead
```assembly
loc_4BE2B0:
    XOR eax, eax
    MOV rcx, [rdi+20h]
    CMP [rdi+28h], rcx
    JA locret_4BE2DC
loc_4BE2BC:
    MOV rax, [rdi+10h]
    SUB rax, [rdi+8]
    MOV rdx, rax
    XOR eax, eax
    TEST dword ptr [rdi], 100h
    JZ loc_4BE2D9
loc_4BE2D1:
    MOV rax, [rdi+58h]
    SUB rax, [rdi+48h]
loc_4BE2D9:
    ADD rax, rdx
loc_4BE2DC:
    REP 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'Arithmetic', 'JumpTable'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': True, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Linear Search', 'inferred_category': 'Search/Traversal'}

##### T 227 - freadahead
```assembly
loc_4E0430:
    XOR eax, eax
    MOV rcx, [rdi+20h]
    CMP [rdi+28h], rcx
    JA locret_4E045C
loc_4E043C:
    MOV rax, [rdi+10h]
    SUB rax, [rdi+8]
    MOV rdx, rax
    XOR eax, eax
    TEST dword ptr [rdi], 100h
    JZ loc_4E0459
loc_4E0451:
    MOV rax, [rdi+58h]
    SUB rax, [rdi+48h]
loc_4E0459:
    ADD rax, rdx
loc_4E045C:
    REP 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Comparison', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Loop with Conditional Branch', 'inferred_category': 'Control Flow'}

##### Q 228 - single_binary_main_csplit
```assembly
loc_42A750:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 0F8h
    MOV [rsp+128h+argc], edi
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+128h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV cs:byte_720D72, 1
    MOV cs:qword_720D78, rbx
    MOV cs:qword_720D68, 0
    MOV cs:qword_720D60, 0
    MOV cs:byte_720D73, 0
    MOV cs:byte_720D70, 0
    MOV cs:qword_720DA8, offset aXx
loc_42A7F2:
    MOV edi, [rsp+128h+argc]
    XOR r8d, r8d
    MOV ecx, offset stru_4D76A0
    MOV edx, offset aFBKnSqz
    MOV rsi, rbx
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_42A99C
loc_42A814:
    CMP eax, 6Bh
    JZ loc_42A990
loc_42A81D:
    JG loc_42A858
loc_42A81F:
    CMP eax, 0FFFFFF7Eh
    JZ loc_42A980
loc_42A82A:
    JLE loc_42A938
loc_42A830:
    CMP eax, 62h
    JZ loc_42A8D0
loc_42A839:
    CMP eax, 66h
    JNZ loc_42A928
loc_42A842:
    MOV rax, cs:optarg
    MOV cs:qword_720DA8, rax
    JMP loc_42A7F2
loc_42A858:
    CMP eax, 73h
    JZ loc_42A8ED
loc_42A861:
    JLE loc_42A880
loc_42A863:
    CMP eax, 7Ah
    JZ loc_42A8C0
loc_42A868:
    ADD eax, 0FFFFFF80h
    JNZ loc_42A928
loc_42A871:
    MOV cs:byte_720D70, 1
    JMP loc_42A7F2
loc_42A880:
    CMP eax, 6Eh
    JNZ loc_42A8E8
loc_42A885:
    MOV edx, 5
    MOV esi, offset aInvalidNumber
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, (offset a8+6)
    MOV edx, 7FFFFFFFh
    XOR esi, esi
    CALL sub_4BB420
    MOV cs:dword_71FCB8, eax
    JMP loc_42A7F2
loc_42A8C0:
    MOV cs:byte_720D71, 1
    JMP loc_42A7F2
loc_42A8D0:
    MOV rax, cs:optarg
    MOV cs:qword_720DA0, rax
    JMP loc_42A7F2
loc_42A8E8:
    CMP eax, 71h
    JNZ loc_42A928
loc_42A8ED:
    MOV cs:byte_720D73, 1
    JMP loc_42A7F2
loc_42A8F9:
    CMP [rsp+128h+argc], eax
    JG loc_42B6A0
loc_42A903:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00h]
loc_42A928:
    MOV edi, 1
    CALL sub_42A380
loc_42A938:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_42A928
loc_42A93F:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_720148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aStuartKemp
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aCsplit
    XOR eax, eax
    CALL sub_4BAF40
    XOR edi, edi
    CALL _exit
loc_42A980:
    XOR edi, edi
    CALL sub_42A380
loc_42A990:
    MOV cs:byte_720D72, 0
    JMP loc_42A7F2
loc_42A99C:
    MOV eax, cs:optind
    MOV edx, [rsp+128h+argc]
    SUB edx, eax
    CMP edx, 1
    JLE loc_42A8F9
loc_42A9B1:
    MOV rdi, cs:qword_720DA8
    CALL _strlen
    MOV rbp, rax
    MOV rax, cs:qword_720DA0
    TEST rax, rax
    JZ loc_42AB72
loc_42A9D0:
    MOV r8, cs:qword_720DA0
    XOR esi, esi
    MOVZX edx, byte ptr [r8]
    MOV rcx, r8
    TEST dl, dl
    JNZ loc_42AA30
loc_42A9E4:
    MOV edx, 5
    MOV esi, offset aMissingConvers
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42AA06:
    MOV edx, 0FFFFFFFEh
loc_42AA0B:
    AND esi, edx
    JNZ loc_42B552
loc_42AA13:
    MOV esi, 1
    NOP dword ptr [rax+rax+00000000h]
loc_42AA20:
    MOVZX edx, byte ptr [rax+1]
    LEA rcx, [rax+1]
    TEST dl, dl
    JZ loc_42B34D
loc_42AA30:
    CMP dl, 25h
    MOV rax, rcx
    JNZ loc_42AA20
loc_42AA38:
    CMP byte ptr [rcx+1], 25h
    LEA rax, [rcx+1]
    JZ loc_42AA20
loc_42AA42:
    TEST sil, sil
    JNZ loc_42B3FD
loc_42AA4B:
    MOV rdx, rax
    XOR esi, esi
    MOVZX ecx, byte ptr [rdx]
    MOV rax, rdx
    CMP cl, 27h
    JZ loc_42AA74
loc_42AA5B:
    JG loc_42AA80
loc_42AA5D:
    CMP cl, 23h
    JNZ loc_42AA8A
loc_42AA62:
    OR esi, 2
loc_42AA65:
    ADD rdx, 1
    MOVZX ecx, byte ptr [rdx]
    MOV rax, rdx
    CMP cl, 27h
    JNZ loc_42AA5B
loc_42AA74:
    OR esi, 1
    JMP loc_42AA65
loc_42AA80:
    CMP cl, 2Dh
    JZ loc_42AA65
loc_42AA85:
    CMP cl, 30h
    JZ loc_42AA65
loc_42AA8A:
    MOVSX edx, cl
    SUB edx, 30h
    CMP edx, 9
    JA loc_42AAA9
loc_42AA95:
    NOP dword ptr [rax]
loc_42AA98:
    ADD rax, 1
    MOVSX edx, byte ptr [rax]
    MOV ecx, edx
    SUB edx, 30h
    CMP edx, 9
    JBE loc_42AA98
loc_42AAA9:
    CMP cl, 2Eh
    JZ loc_42AB5B
loc_42AAB2:
    MOVZX r13d, byte ptr [rax]
loc_42AAB6:
    CMP r13b, 69h
    JZ loc_42B38C
loc_42AAC0:
    JG loc_42AAFD
loc_42AAC2:
    CMP r13b, 58h
    JZ loc_42B399
loc_42AACC:
    CMP r13b, 64h
    JZ loc_42B38C
loc_42AAD6:
    TEST r13b, r13b
    JNZ loc_42AB1B
loc_42AADB:
    MOV edx, 5
    MOV esi, offset aMissingConvers_0
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42AAFD:
    CMP r13b, 75h
    JZ loc_42AA06
loc_42AB07:
    CMP r13b, 78h
    JZ loc_42B399
loc_42AB11:
    CMP r13b, 6Fh
    JZ loc_42B399
loc_42AB1B:
    CALL ___ctype_b_loc
    MOV rcx, [rax]
    MOVZX edx, r13b
    MOV rax, rdx
    MOV edx, 5
    TEST byte ptr [rcx+rax*2+1], 40h
    JZ loc_42B3B2
loc_42AB3A:
    MOV esi, offset aInvalidConvers
    XOR edi, edi
    CALL _dcgettext
    MOVZX ecx, r13b
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42AB5B:
    ADD rax, 1
    MOVSX edx, byte ptr [rax]
    MOV r13d, edx
    SUB edx, 30h
    CMP edx, 9
    JBE loc_42AB5B
loc_42AB6D:
    JMP loc_42AAB6
loc_42AB72:
    MOV edx, cs:dword_71FCB8
    MOV eax, 0Ah
    CMP edx, 9
    JBE loc_42AB89
loc_42AB82:
    MOVSXD rax, cs:dword_71FCB8
loc_42AB89:
    MOV rdx, 0FFFFFFFFFFFFFFFEh
    SUB rdx, rbp
    CMP rax, rdx
    JA loc_42B5C8
loc_42AB9C:
    LEA rdi, [rax+rbp+1]
    CALL sub_4BB0B0
    MOV cs:dest, rax
    MOVSXD rax, cs:optind
    MOV rbp, [rbx+rax*8]
    LEA r13d, [rax+1]
    MOV cs:optind, r13d
    CMP byte ptr [rbp+0], 2Dh
    JZ loc_42B32A
loc_42ABCD:
    XOR ecx, ecx
    XOR edx, edx
    XOR edi, edi
    MOV rsi, rbp
    CALL sub_4A3FD0
    TEST eax, eax
    JS loc_42B58B
loc_42ABE3:
    MOV r13d, cs:optind
loc_42ABEA:
    CMP [rsp+128h+argc], r13d
    JLE loc_42AD10
loc_42ABF5:
    NOP dword ptr [rax]
loc_42ABF8:
    MOVSXD rbp, r13d
    SHL rbp, 3
    LEA r15, [rbx+rbp]
    MOV r14, [r15]
    MOVSX eax, byte ptr [r14]
    CMP al, 25h
    SETZ dl
    CMP al, 2Fh
    JZ loc_42AE90
loc_42AC17:
    TEST dl, dl
    JNZ loc_42AE90
loc_42AC1F:
    CALL sub_429C10
    MOV rdi, [r15]
    LEA rcx, [rsp+128h+var_108]
    XOR esi, esi
    MOV [rax+18h], r13d
    MOV r8d, (offset a8+6)
    MOV edx, 0Ah
    MOV r12, rax
    CALL sub_4BD3A0
    TEST eax, eax
    JNZ loc_42B670
loc_42AC4D:
    MOV rax, [rsp+128h+var_108]
    TEST rax, rax
    JZ loc_42B648
loc_42AC5B:
    MOV rdi, cs:qword_720CD0
    CMP rax, rdi
    JB loc_42B605
loc_42AC6B:
    JZ loc_42AF90
loc_42AC71:
    MOV cs:qword_720CD0, rax
    MOV [r12+8], rax
loc_42AC7D:
    LEA eax, [r13+1]
    CMP [rsp+128h+argc], eax
    JLE loc_42AD10
loc_42AC8B:
    LEA r14, [rbp+8]
    MOV rbp, [rbx+rbp+8]
    CMP byte ptr [rbp+0], 7Bh
    JZ loc_42ACA8
loc_42AC9A:
    MOV r13d, eax
    JMP loc_42ABF8
loc_42ACA8:
    MOV rdi, rbp
    CALL _strlen
    LEA r15, [rbp+rax-1]
    CMP byte ptr [r15], 7Dh
    JNZ loc_42B4FE
loc_42ACBF:
    LEA rdi, [rbp+1]
    LEA rax, [r15-1]
    MOV byte ptr [r15], 0
    CMP rdi, rax
    JZ loc_42B220
loc_42ACD4:
    LEA rcx, [rsp+128h+var_100]
    XOR esi, esi
    MOV r8d, (offset a8+6)
    MOV edx, 0Ah
    CALL sub_4BD3A0
    TEST eax, eax
    JNZ loc_42B5CD
loc_42ACF3:
    MOV rax, [rsp+128h+var_100]
    MOV [r12+10h], rax
loc_42ACFD:
    LEA eax, [r13+2]
    CMP [rsp+128h+argc], eax
    MOV byte ptr [r15], 7Dh
    JG loc_42AC9A
loc_42AD0B:
    NOP dword ptr [rax+rax+00h]
loc_42AD10:
    MOV edi, offset set
    MOV ebx, offset unk_4D7664
    MOV r13d, offset unk_4D768C
    CALL _sigemptyset
    MOV rbp, rbx
    MOV r12d, 0Eh
    JMP loc_42AD38
loc_42AD30:
    MOV r12d, [rbp+0]
    ADD rbp, 4
loc_42AD38:
    LEA rdx, [rsp+128h+var_F8]
    XOR esi, esi
    MOV edi, r12d
    CALL _sigaction
    CMP [rsp+128h+var_F8], 1
    JZ loc_42AD5C
loc_42AD4F:
    MOV esi, r12d
    MOV edi, offset set
    CALL _sigaddset
loc_42AD5C:
    CMP rbp, offset unk_4D768C
    JNZ loc_42AD30
loc_42AD65:
    MOV rax, cs:set.__val
    MOV [rsp+128h+var_F8], offset sub_429980
    MOV ebp, 0Eh
    MOV [rsp+128h+var_F0], rax
    MOV rax, cs:set.__val+8
    MOV [rsp+128h+var_E8], rax
    MOV rax, cs:set.__val+10h
    MOV [rsp+128h+var_E0], rax
    MOV rax, cs:set.__val+18h
    MOV [rsp+128h+var_D8], rax
    MOV rax, cs:set.__val+20h
    MOV [rsp+128h+var_D0], rax
    MOV rax, cs:set.__val+28h
    MOV [rsp+128h+var_C8], rax
    MOV rax, cs:set.__val+30h
    MOV [rsp+128h+var_C0], rax
    MOV rax, cs:set.__val+38h
    MOV [rsp+128h+var_B8], rax
    MOV rax, cs:set.__val+40h
    MOV [rsp+128h+var_B0], rax
    MOV rax, cs:set.__val+48h
    MOV [rsp+128h+var_A8], rax
    MOV rax, cs:set.__val+50h
    MOV [rsp+128h+var_A0], rax
    MOV rax, cs:set.__val+58h
    MOV [rsp+128h+var_98], rax
    MOV rax, cs:set.__val+60h
    MOV [rsp+128h+var_90], rax
    MOV rax, cs:set.__val+68h
    MOV [rsp+128h+var_88], rax
    MOV rax, cs:set.__val+70h
    MOV [rsp+128h+var_80], rax
    MOV rax, cs:set.__val+78h
    MOV [rsp+128h+var_78], rax
    MOV [rsp+128h+var_70], 0
    JMP loc_42AE67
loc_42AE58:
    CMP r13, rbx
    JZ loc_42AFC7
loc_42AE61:
    MOV ebp, [rbx]
    ADD rbx, 4
loc_42AE67:
    MOV esi, ebp
    MOV edi, offset set
    CALL _sigismember
    TEST eax, eax
    JZ loc_42AE58
loc_42AE77:
    LEA rsi, [rsp+128h+var_F8]
    XOR edx, edx
    MOV edi, ebp
    CALL _sigaction
    JMP loc_42AE58
loc_42AE90:
    LEA r15, [r14+1]
    MOV esi, eax
    MOV byte ptr [rsp+128h+var_118], dl
    MOV r12d, eax
    MOV rdi, r15
    CALL _strrchr
    TEST rax, rax
    MOVZX edx, byte ptr [rsp+128h+var_118]
    JZ loc_42B454
loc_42AEB3:
    MOV byte ptr [rsp+128h+var_10C], dl
    MOV [rsp+128h+var_118], rax
    CALL sub_429C10
    MOVZX edx, byte ptr [rsp+128h+var_10C]
    MOV edi, 100h
    MOV [rax+18h], r13d
    MOV byte ptr [rax+1Eh], 1
    MOV qword ptr [rax+20h], 0
    MOV r12, rax
    MOV qword ptr [rax+28h], 0
    MOV [rax+1Dh], dl
    CALL sub_4BB0B0
    MOV rcx, [rsp+128h+var_118]
    LEA rdx, [r12+20h]
    MOV rdi, r15
    MOV [r12+40h], rax
    MOV qword ptr [r12+48h], 0
    MOV cs:re_syntax_options, 2C6h
    MOV rsi, rcx
    SUB rsi, r14
    SUB rsi, 1
    CALL _re_compile_pattern
    TEST rax, rax
    MOV r15, rax
    MOV rcx, [rsp+128h+var_118]
    JNZ loc_42B41F
loc_42AF34:
    CMP byte ptr [rcx+1], 0
    JZ loc_42AC7D
loc_42AF3E:
    LEA rdi, [rcx+1]
    XOR esi, esi
    MOV r8d, (offset a8+6)
    MOV rcx, r12
    MOV edx, 0Ah
    CALL sub_4BBD00
    TEST eax, eax
    JZ loc_42AC7D
loc_42AF5F:
    MOV rdi, r14
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSIntegerExpect
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP 
loc_42AF90:
    MOV rdi, [r15]
    CALL sub_4B5440
    MOV edx, 5
    MOV r14, rax
    MOV esi, offset aWarningLineNum
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, r14
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    XOR edi, edi
    CALL _error
    MOV rax, [rsp+128h+var_108]
    JMP loc_42AC71
loc_42AFC7:
    XOR r15d, r15d
    CMP cs:qword_720D60, 0
    MOV qword ptr [rsp+128h+argc], 0
    MOV rax, cs:qword_720D68
    JZ loc_42B251
loc_42AFE8:
    XOR r14d, r14d
    CMP byte ptr [rax+r15+1Eh], 0
    JZ loc_42B0FB
loc_42AFF7:
    LEA r13, [rax+r15]
    CMP byte ptr [r13+1Ch], 0
    JNZ loc_42B00C
loc_42B002:
    CMP r14, [r13+10h]
    JA loc_42B235
loc_42B00C:
    MOVZX ebp, byte ptr [r13+1Dh]
    TEST bpl, bpl
    JZ loc_42B382
loc_42B01A:
    CMP cs:byte_720D70, 0
    MOV rdi, cs:qword_720DC0
    JZ loc_42B033
loc_42B02A:
    TEST rdi, rdi
    JNZ loc_42B3D3
loc_42B033:
    CMP qword ptr [r13+0], 0
    LEA rbx, [r13+20h]
    JNS loc_42B093
loc_42B03E:
    JMP loc_42B1CD
loc_42B048:
    MOV rdx, [rax]
    MOV rsi, [rax+8]
    MOV rdi, rbx
    CMP byte ptr [rsi+rdx-1], 0Ah
    LEA rax, [rdx-1]
    CMOVZ rdx, rax
    XOR r9d, r9d
    XOR ecx, ecx
    MOV r8d, edx
    CALL _re_search
    CMP eax, 0FFFFFFFEh
    JZ loc_42B52E
loc_42B075:
    CMP eax, 0FFFFFFFFh
    JNZ loc_42B29A
loc_42B07E:
    CALL sub_42A050
    TEST bpl, bpl
    JZ loc_42B340
loc_42B08C:
    MOV rdi, cs:qword_720DC0
loc_42B093:
    ADD rdi, 1
    MOV cs:qword_720DC0, rdi
    CALL sub_42A230
    TEST rax, rax
    JNZ loc_42B048
loc_42B0A8:
    CMP byte ptr [r13+1Ch], 0
    JZ loc_42B3A3
loc_42B0B3:
    TEST bpl, bpl
    JZ loc_42B3EE
loc_42B0BC:
    XOR edi, edi
    CALL _exit
loc_42B0C3:
    CALL sub_429630
    CMP cs:byte_720D70, 0
    JNZ loc_42B181
loc_42B0D5:
    NOP dword ptr [rax]
loc_42B0D8:
    MOV rax, cs:qword_720DC0
    LEA rdi, [rax+1]
    CALL sub_42A230
    TEST rax, rax
    JZ loc_42B210
loc_42B0F1:
    MOV rax, cs:qword_720D68
    MOV r14, r13
loc_42B0FB:
    LEA r12, [rax+r15]
    CMP byte ptr [r12+1Ch], 0
    JNZ loc_42B112
loc_42B107:
    CMP r14, [r12+10h]
    JA loc_42B235
loc_42B112:
    LEA r13, [r14+1]
    MOV rbp, r13
    IMUL rbp, [r12+8]
    CALL sub_429880
    MOV rax, cs:qword_720DC0
    LEA rdi, [rax+1]
    CALL sub_42A230
    TEST rax, rax
    JZ loc_42B1F0
loc_42B13D:
    CALL sub_42A310
    CMP rbp, rax
    MOV rbx, rax
    JBE loc_42B0C3
loc_42B14E:
    XCHG ax, ax
loc_42B150:
    CALL sub_42A050
    TEST rax, rax
    JZ loc_42B1FD
loc_42B15E:
    MOV rdi, rax
    ADD rbx, 1
    CALL sub_4297F0
    CMP rbp, rbx
    JA loc_42B150
loc_42B16F:
    CALL sub_429630
    CMP cs:byte_720D70, 0
    JZ loc_42B0D8
loc_42B181:
    CALL sub_42A050
    JMP loc_42B0D8
loc_42B190:
    MOV rdx, [rax]
    MOV rsi, [rax+8]
    MOV rdi, rbx
    CMP byte ptr [rsi+rdx-1], 0Ah
    LEA rax, [rdx-1]
    CMOVZ rdx, rax
    XOR r9d, r9d
    XOR ecx, ecx
    MOV r8d, edx
    CALL _re_search
    CMP eax, 0FFFFFFFEh
    JZ loc_42B52E
loc_42B1BD:
    CMP eax, 0FFFFFFFFh
    JNZ loc_42B29A
loc_42B1C6:
    MOV rdi, cs:qword_720DC0
loc_42B1CD:
    ADD rdi, 1
    MOV cs:qword_720DC0, rdi
    CALL sub_42A230
    TEST rax, rax
    JNZ loc_42B190
loc_42B1E2:
    JMP loc_42B0A8
loc_42B1F0:
    CMP cs:byte_720D70, 0
    JZ loc_42B13D
loc_42B1FD:
    MOV rdi, [r12+8]
    MOV rsi, r14
    CALL sub_4299B0
loc_42B210:
    CMP cs:byte_720D70, 0
    JNZ loc_42B0F1
loc_42B21D:
    JMP loc_42B1FD
loc_42B220:
    CMP byte ptr [rbp+1], 2Ah
    JNZ loc_42ACD4
loc_42B22A:
    MOV byte ptr [r12+1Ch], 1
    JMP loc_42ACFD
loc_42B235:
    ADD qword ptr [rsp+128h+argc], 1
    ADD r15, 60h
    MOV rcx, qword ptr [rsp+128h+argc]
    CMP rcx, cs:qword_720D60
    JB loc_42AFE8
loc_42B251:
    CALL sub_429880
    CALL sub_42A130
    CALL sub_429630
    XOR edi, edi
    CALL _close
    TEST eax, eax
    JNZ loc_42B481
loc_42B26F:
    XOR eax, eax
    MOV rcx, [rsp+128h+var_40]
    XOR rcx, fs:28h
    JNZ loc_42B47C
loc_42B288:
    ADD rsp, 0F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42B29A:
    MOV rax, cs:qword_720DC0
    ADD rax, [r13+0]
    MOV rbx, rax
    MOV [rsp+128h+var_118], rax
    MOV eax, [r13+18h]
    MOV [rsp+128h+var_10C], eax
    CALL sub_42A310
    CMP rbx, rax
    JB loc_42B4EC
loc_42B2C3:
    MOV r12, [rsp+128h+var_118]
    XOR ebx, ebx
    SUB r12, rax
    JNZ loc_42B2E1
loc_42B2CF:
    JMP loc_42B2FE
loc_42B2D8:
    ADD rbx, 1
    CMP r12, rbx
    JZ loc_42B2FE
loc_42B2E1:
    CALL sub_42A050
    TEST rax, rax
    JZ loc_42B4AD
loc_42B2EF:
    TEST bpl, bpl
    JNZ loc_42B2D8
loc_42B2F4:
    MOV rdi, rax
    CALL sub_4297F0
    JMP loc_42B2D8
loc_42B2FE:
    TEST bpl, bpl
    JZ loc_42B3E4
loc_42B307:
    CMP qword ptr [r13+0], 0
    JLE loc_42B31A
loc_42B30E:
    MOV rax, [rsp+128h+var_118]
    MOV cs:qword_720DC0, rax
loc_42B31A:
    ADD r14, 1
    MOV rax, cs:qword_720D68
    JMP loc_42AFF7
loc_42B32A:
    CMP byte ptr [rbp+1], 0
    JZ loc_42ABEA
loc_42B334:
    JMP loc_42ABCD
loc_42B340:
    MOV rdi, rax
    CALL sub_4297F0
    JMP loc_42B08C
loc_42B34D:
    TEST sil, sil
    JZ loc_42A9E4
loc_42B356:
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    MOV r9d, 0FFFFFFFFh
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV edx, 1
    CALL ___snprintf_chk
    TEST eax, eax
    JS loc_42B5C8
loc_42B37B:
    CDQE 
    JMP loc_42AB89
loc_42B382:
    CALL sub_429880
    JMP loc_42B01A
loc_42B38C:
    MOV byte ptr [rax], 75h
    MOV edx, 0FFFFFFFEh
    JMP loc_42AA0B
loc_42B399:
    MOV edx, 0FFFFFFFDh
    JMP loc_42AA0B
loc_42B3A3:
    MOVZX edx, bpl
    MOV rsi, r14
    MOV rdi, r13
    CALL sub_42A160
loc_42B3B2:
    MOV esi, offset aInvalidConvers_0
    XOR edi, edi
    CALL _dcgettext
    MOVZX ecx, r13b
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B3D3:
    CALL sub_42A050
    MOV rdi, cs:qword_720DC0
    JMP loc_42B033
loc_42B3E4:
    CALL sub_429630
    JMP loc_42B307
loc_42B3EE:
    CALL sub_42A130
    CALL sub_429630
    JMP loc_42B0BC
loc_42B3FD:
    MOV edx, 5
    MOV esi, offset aTooManyConvers
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B41F:
    MOV rdi, r14
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSInvalidRegula
    XOR edi, edi
    CALL _dcgettext
    MOV r8, r15
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_4295D0
loc_42B454:
    MOV edx, 5
    MOV esi, offset aSClosingDelimi
    XOR edi, edi
    CALL _dcgettext
    MOV r8d, r12d
    MOV rdx, rax
    MOV rcx, r14
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B47C:
    CALL ___stack_chk_fail
loc_42B481:
    MOV edx, 5
    MOV esi, offset aReadError
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_4295D0
loc_42B4AD:
    MOVSXD rax, [rsp+128h+var_10C]
    MOV rdx, cs:qword_720D78
    MOV rdi, [rdx+rax*8]
loc_42B4BD:
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSLineNumberOut
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_4295D0
loc_42B4EC:
    MOVSXD rdx, [rsp+128h+var_10C]
    MOV rax, cs:qword_720D78
    MOV rdi, [rax+rdx*8]
    JMP loc_42B4BD
loc_42B4FE:
    MOV rdi, rbp
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSIsRequiredInR
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B52E:
    MOV edx, 5
    MOV esi, offset aErrorInRegular
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_4295D0
loc_42B552:
    AND esi, 2
    MOV edx, 5
    MOVZX r13d, r13b
    CMP esi, 1
    MOV esi, offset aInvalidFlagsIn
    SBB ebx, ebx
    XOR edi, edi
    AND ebx, 4
    ADD ebx, 23h
    CALL _dcgettext
    MOV r8d, r13d
    MOV rdx, rax
    MOV ecx, ebx
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B58B:
    MOV rsi, rbp
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aCannotOpenSFor
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B5C8:
    CALL sub_429BE0
loc_42B5CD:
    MOV rax, cs:qword_720D78
    MOV rdi, [rax+r14]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSIntegerRequir
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B605:
    LEA rsi, [rsp+128h+var_58]
    CALL sub_4A9A40
    MOV rdi, [r15]
    MOV rbp, rax
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aLineNumberSIsS
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B648:
    MOV rbx, [r15]
    MOV edx, 5
    MOV esi, offset aSLineNumberMus
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B670:
    MOV rdi, [r15]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSInvalidPatter
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42B6A0:
    MOVSXD r12, [rsp+128h+argc]
    MOV rdi, [rbx+r12*8-8]
    CALL sub_4B5440
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aMissingOperand_0
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_42A928
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 228 - single_binary_main_csplit
```assembly
loc_42CEC0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOVSXD r13, edi
    PUSH rbp
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 0F8h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+128h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV cs:byte_743D52, 1
    MOV cs:qword_743D58, rbx
    MOV cs:qword_743D48, 0
    MOV cs:qword_743D40, 0
    MOV cs:byte_743D53, 0
    MOV cs:byte_743D50, 0
    MOV cs:qword_743D88, offset aXx
loc_42CF61:
    XOR r8d, r8d
    MOV ecx, offset stru_4FA3C0
    MOV edx, offset aFBKnSqz
    MOV rsi, rbx
    MOV edi, r13d
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_42D10C
loc_42CF82:
    CMP eax, 6Bh
    JZ loc_42D100
loc_42CF8B:
    JG loc_42CFC0
loc_42CF8D:
    CMP eax, 0FFFFFF7Eh
    JZ loc_42D0F0
loc_42CF98:
    JLE loc_42D0A8
loc_42CF9E:
    CMP eax, 62h
    JZ loc_42D040
loc_42CFA7:
    CMP eax, 66h
    JNZ loc_42D098
loc_42CFB0:
    MOV rax, cs:optarg
    MOV cs:qword_743D88, rax
    JMP loc_42CF61
loc_42CFC0:
    CMP eax, 73h
    JZ loc_42D05D
loc_42CFC9:
    JLE loc_42CFE8
loc_42CFCB:
    CMP eax, 7Ah
    JZ loc_42D030
loc_42CFD0:
    ADD eax, 0FFFFFF80h
    JNZ loc_42D098
loc_42CFD9:
    MOV cs:byte_743D50, 1
    JMP loc_42CF61
loc_42CFE8:
    CMP eax, 6Eh
    JNZ loc_42D058
loc_42CFED:
    MOV edx, 5
    MOV esi, offset aInvalidNumber
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, (offset a8+6)
    MOV edx, 7FFFFFFFh
    XOR esi, esi
    CALL sub_4DCEC0
    MOV cs:dword_742CB8, eax
    JMP loc_42CF61
loc_42D030:
    MOV cs:byte_743D51, 1
    JMP loc_42CF61
loc_42D040:
    MOV rax, cs:optarg
    MOV cs:qword_743D80, rax
    JMP loc_42CF61
loc_42D058:
    CMP eax, 71h
    JNZ loc_42D098
loc_42D05D:
    MOV cs:byte_743D53, 1
    JMP loc_42CF61
loc_42D069:
    CMP r13d, eax
    JG loc_42DFC0
loc_42D072:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00000000h]
loc_42D098:
    MOV edi, 1
    CALL sub_42CAF0
loc_42D0A8:
    CMP eax, 0FFFFFF7Dh
    JNZ loc_42D098
loc_42D0AF:
    SUB rsp, 8
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    PUSH 0
    MOV r9d, offset aDavidMackenzie
    MOV r8d, offset aStuartKemp
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aCsplit
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_42D0F0:
    XOR edi, edi
    CALL sub_42CAF0
loc_42D100:
    MOV cs:byte_743D52, 0
    JMP loc_42CF61
loc_42D10C:
    MOV eax, cs:optind
    MOV edx, r13d
    SUB edx, eax
    CMP edx, 1
    JLE loc_42D069
loc_42D120:
    MOV rdi, cs:qword_743D88
    CALL _strlen
    MOV r12, rax
    MOV rax, cs:qword_743D80
    TEST rax, rax
    JZ loc_42D2E6
loc_42D13F:
    MOV r8, cs:qword_743D80
    XOR esi, esi
    MOVZX edx, byte ptr [r8]
    MOV rcx, r8
    TEST dl, dl
    JNZ loc_42D1A0
loc_42D153:
    MOV edx, 5
    MOV esi, offset aMissingConvers
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42D175:
    MOV edx, 0FFFFFFFEh
loc_42D17A:
    AND ecx, edx
    JNZ loc_42E14F
loc_42D182:
    MOV esi, 1
    NOP word ptr [rax+rax+00000000h]
loc_42D190:
    MOVZX edx, byte ptr [rax+1]
    LEA rcx, [rax+1]
    TEST dl, dl
    JZ loc_42DDB0
loc_42D1A0:
    CMP dl, 25h
    MOV rax, rcx
    JNZ loc_42D190
loc_42D1A8:
    CMP byte ptr [rcx+1], 25h
    LEA rax, [rcx+1]
    JZ loc_42D190
loc_42D1B2:
    TEST sil, sil
    JNZ loc_42E093
loc_42D1BB:
    MOV rdx, rax
    XOR ecx, ecx
    MOVZX ebp, byte ptr [rdx]
    MOV rax, rdx
    CMP bpl, 27h
    JZ loc_42D1E7
loc_42D1CC:
    JG loc_42D1F0
loc_42D1CE:
    CMP bpl, 23h
    JNZ loc_42D1FC
loc_42D1D4:
    OR ecx, 2
loc_42D1D7:
    ADD rdx, 1
    MOVZX ebp, byte ptr [rdx]
    MOV rax, rdx
    CMP bpl, 27h
    JNZ loc_42D1CC
loc_42D1E7:
    OR ecx, 1
    JMP loc_42D1D7
loc_42D1F0:
    CMP bpl, 2Dh
    JZ loc_42D1D7
loc_42D1F6:
    CMP bpl, 30h
    JZ loc_42D1D7
loc_42D1FC:
    MOVSX edx, bpl
    SUB edx, 30h
    CMP edx, 9
    JA loc_42D221
loc_42D208:
    NOP dword ptr [rax+rax+00000000h]
loc_42D210:
    ADD rax, 1
    MOVSX edx, byte ptr [rax]
    MOV ebp, edx
    SUB edx, 30h
    CMP edx, 9
    JBE loc_42D210
loc_42D221:
    CMP bpl, 2Eh
    JZ loc_42D2D0
loc_42D22B:
    CMP bpl, 69h
    JZ loc_42DDEF
loc_42D235:
    JG loc_42D272
loc_42D237:
    CMP bpl, 58h
    JZ loc_42DDFC
loc_42D241:
    CMP bpl, 64h
    JZ loc_42DDEF
loc_42D24B:
    TEST bpl, bpl
    JNZ loc_42D290
loc_42D250:
    MOV edx, 5
    MOV esi, offset aMissingConvers_0
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42D272:
    CMP bpl, 75h
    JZ loc_42D175
loc_42D27C:
    CMP bpl, 78h
    JZ loc_42DDFC
loc_42D286:
    CMP bpl, 6Fh
    JZ loc_42DDFC
loc_42D290:
    CALL ___ctype_b_loc
    MOV rcx, [rax]
    MOVZX edx, bpl
    MOV rax, rdx
    MOV edx, 5
    TEST byte ptr [rcx+rax*2+1], 40h
    JZ loc_42DE06
loc_42D2AF:
    MOV esi, offset aInvalidConvers
    XOR edi, edi
    CALL _dcgettext
    MOVZX ecx, bpl
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42D2D0:
    ADD rax, 1
    MOVSX edx, byte ptr [rax]
    MOV ebp, edx
    SUB edx, 30h
    CMP edx, 9
    JBE loc_42D2D0
loc_42D2E1:
    JMP loc_42D22B
loc_42D2E6:
    MOV edx, cs:dword_742CB8
    MOV eax, 0Ah
    CMP edx, 9
    JBE loc_42D2FD
loc_42D2F6:
    MOVSXD rax, cs:dword_742CB8
loc_42D2FD:
    MOV rdx, 0FFFFFFFFFFFFFFFEh
    SUB rdx, r12
    CMP rax, rdx
    JA loc_42D8E4
loc_42D310:
    LEA rdi, [rax+r12+1]
    CALL sub_4DCC10
    MOV cs:dest, rax
    MOVSXD rax, cs:optind
    MOV rbp, [rbx+rax*8]
    LEA r14d, [rax+1]
    MOV cs:optind, r14d
    CMP byte ptr [rbp+0], 2Dh
    JZ loc_42DD9B
loc_42D341:
    XOR ecx, ecx
    XOR edx, edx
    XOR edi, edi
    MOV rsi, rbp
    CALL sub_4BF390
    TEST eax, eax
    JS loc_42E04C
loc_42D357:
    MOV r14d, cs:optind
loc_42D35E:
    CMP r13d, r14d
    JLE loc_42D500
loc_42D367:
    NOP word ptr [rax+rax+00000000h]
loc_42D370:
    MOVSXD rbp, r14d
    LEA rax, ds:0[rbp*8]
    LEA r15, [rbx+rax]
    MOV [rsp+128h+var_128], rax
    MOV rbp, [r15]
    MOVSX r12d, byte ptr [rbp+0]
    CMP r12b, 25h
    SETZ r8b
    CMP r12b, 2Fh
    JZ loc_42D670
loc_42D39D:
    TEST r8b, r8b
    JNZ loc_42D670
loc_42D3A6:
    MOV rcx, cs:qword_743D40
    CMP rcx, cs:qword_743CA8
    MOV rax, cs:qword_743D48
    JZ loc_42D7C0
loc_42D3C1:
    LEA r9, [rcx+rcx*2]
    LEA rdx, [rcx+1]
    LEA rcx, [rsp+128h+var_108]
    XOR esi, esi
    MOV r8d, (offset a8+6)
    MOV rdi, rbp
    SHL r9, 5
    MOV cs:qword_743D40, rdx
    MOV edx, 0Ah
    LEA r12, [rax+r9]
    MOV byte ptr [r12+1Eh], 0
    MOV qword ptr [r12+10h], 0
    MOV byte ptr [r12+1Ch], 0
    MOV qword ptr [r12+8], 0
    MOV qword ptr [r12], 0
    MOV [r12+18h], r14d
    CALL sub_4DF370
    TEST eax, eax
    JNZ loc_42E01C
loc_42D425:
    MOV rax, [rsp+128h+var_108]
    TEST rax, rax
    JZ loc_42DFF4
loc_42D433:
    MOV rdi, cs:qword_743CB0
    CMP rax, rdi
    JB loc_42DED9
loc_42D443:
    JZ loc_42D880
loc_42D449:
    MOV cs:qword_743CB0, rax
    MOV [r12+8], rax
loc_42D455:
    LEA eax, [r14+1]
    CMP r13d, eax
    JLE loc_42D500
loc_42D462:
    MOV rsi, [rsp+128h+var_128]
    MOV rbp, [rbx+rsi+8]
    LEA r9, [rsi+8]
    CMP byte ptr [rbp+0], 7Bh
    JZ loc_42D480
loc_42D475:
    MOV r14d, eax
    JMP loc_42D370
loc_42D480:
    MOV rdi, rbp
    MOV [rsp+128h+var_128], r9
    CALL _strlen
    LEA r15, [rbp+rax-1]
    MOV r9, [rsp+128h+var_128]
    CMP byte ptr [r15], 7Dh
    JNZ loc_42E0B5
loc_42D49F:
    LEA rdi, [rbp+1]
    LEA rax, [r15-1]
    MOV byte ptr [r15], 0
    CMP rdi, rax
    JZ loc_42DC70
loc_42D4B4:
    LEA rcx, [rsp+128h+var_100]
    XOR esi, esi
    MOV r8d, (offset a8+6)
    MOV edx, 0Ah
    MOV [rsp+128h+var_128], r9
    CALL sub_4DF370
    TEST eax, eax
    MOV r9, [rsp+128h+var_128]
    JNZ loc_42DF1C
loc_42D4DB:
    MOV rax, [rsp+128h+var_100]
    MOV [r12+10h], rax
loc_42D4E5:
    LEA eax, [r14+2]
    MOV byte ptr [r15], 7Dh
    CMP r13d, eax
    JG loc_42D475
loc_42D4F6:
    NOP word ptr [rax+rax+00000000h]
loc_42D500:
    MOV ebx, offset unk_4FA380
    MOV edi, offset set
    MOV r12d, offset unk_4FA3AC
    MOV rbp, rbx
    CALL _sigemptyset
loc_42D518:
    MOV r13d, [rbp+0]
    LEA rdx, [rsp+128h+var_F8]
    XOR esi, esi
    MOV edi, r13d
    CALL _sigaction
    CMP [rsp+128h+var_F8], 1
    JZ loc_42D540
loc_42D533:
    MOV esi, r13d
    MOV edi, offset set
    CALL _sigaddset
loc_42D540:
    ADD rbp, 4
    CMP r12, rbp
    JNZ loc_42D518
loc_42D549:
    MOV rax, cs:set.__val
    MOV [rsp+128h+var_F8], offset sub_42C220
    MOV [rsp+128h+var_F0], rax
    MOV rax, cs:set.__val+8
    MOV [rsp+128h+var_E8], rax
    MOV rax, cs:set.__val+10h
    MOV [rsp+128h+var_E0], rax
    MOV rax, cs:set.__val+18h
    MOV [rsp+128h+var_D8], rax
    MOV rax, cs:set.__val+20h
    MOV [rsp+128h+var_D0], rax
    MOV rax, cs:set.__val+28h
    MOV [rsp+128h+var_C8], rax
    MOV rax, cs:set.__val+30h
    MOV [rsp+128h+var_C0], rax
    MOV rax, cs:set.__val+38h
    MOV [rsp+128h+var_B8], rax
    MOV rax, cs:set.__val+40h
    MOV [rsp+128h+var_B0], rax
    MOV rax, cs:set.__val+48h
    MOV [rsp+128h+var_A8], rax
    MOV rax, cs:set.__val+50h
    MOV [rsp+128h+var_A0], rax
    MOV rax, cs:set.__val+58h
    MOV [rsp+128h+var_98], rax
    MOV rax, cs:set.__val+60h
    MOV [rsp+128h+var_90], rax
    MOV rax, cs:set.__val+68h
    MOV [rsp+128h+var_88], rax
    MOV rax, cs:set.__val+70h
    MOV [rsp+128h+var_80], rax
    MOV rax, cs:set.__val+78h
    MOV [rsp+128h+var_78], rax
    MOV [rsp+128h+var_70], 0
    JMP loc_42D645
loc_42D638:
    ADD rbx, 4
    CMP r12, rbx
    JZ loc_42D920
loc_42D645:
    MOV ebp, [rbx]
    MOV edi, offset set
    MOV esi, ebp
    CALL _sigismember
    TEST eax, eax
    JZ loc_42D638
loc_42D657:
    LEA rsi, [rsp+128h+var_F8]
    XOR edx, edx
    MOV edi, ebp
    CALL _sigaction
    JMP loc_42D638
loc_42D670:
    LEA rax, [rbp+1]
    MOV esi, r12d
    MOV byte ptr [rsp+128h+length], r8b
    MOV rdi, rax
    MOV [rsp+128h+pattern], rax
    CALL _strrchr
    TEST rax, rax
    MOV r15, rax
    MOVZX r8d, byte ptr [rsp+128h+length]
    JZ loc_42DF98
loc_42D69B:
    MOV r12, rax
    MOV rcx, cs:qword_743D40
    SUB r12, rbp
    CMP rcx, cs:qword_743CA8
    LEA rax, [r12-1]
    MOV [rsp+128h+length], rax
    MOV rax, cs:qword_743D48
    JZ loc_42D820
loc_42D6C6:
    LEA r9, [rcx+rcx*2]
    LEA rdx, [rcx+1]
    MOV edi, 100h
    SHL r9, 5
    MOV cs:qword_743D40, rdx
    LEA r12, [rax+r9]
    MOV [r12+1Dh], r8b
    MOV qword ptr [r12+10h], 0
    MOV byte ptr [r12+1Ch], 0
    MOV qword ptr [r12+8], 0
    MOV qword ptr [r12], 0
    MOV [r12+18h], r14d
    MOV byte ptr [r12+1Eh], 1
    MOV qword ptr [r12+20h], 0
    MOV qword ptr [r12+28h], 0
    CALL sub_4DCC10
    MOV rsi, [rsp+128h+length]
    MOV rdi, [rsp+128h+pattern]
    LEA rdx, [r12+20h]
    MOV [r12+40h], rax
    MOV qword ptr [r12+48h], 0
    MOV cs:re_syntax_options, 2C6h
    CALL _re_compile_pattern
    TEST rax, rax
    JNZ loc_42DF5E
loc_42D75F:
    CMP byte ptr [r15+1], 0
    JZ loc_42D455
loc_42D76A:
    LEA rdi, [r15+1]
    XOR esi, esi
    MOV r8d, (offset a8+6)
    MOV rcx, r12
    MOV edx, 0Ah
    CALL sub_4DDA60
    TEST eax, eax
    JZ loc_42D455
loc_42D78B:
    MOV rdi, rbp
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSIntegerExpect
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00h]
loc_42D7C0:
    MOV rdi, cs:qword_743D48
    TEST rdi, rdi
    JZ loc_42D8B7
loc_42D7D0:
    MOV rax, 0E38E38E38E38E2h
    CMP rcx, rax
    JA loc_42D8E4
loc_42D7E3:
    MOV rax, rcx
    SHR rax, 1
    LEA rcx, [rax+rcx+1]
loc_42D7EE:
    LEA rsi, [rcx+rcx*2]
    MOV cs:qword_743CA8, rcx
    SHL rsi, 5
    CALL sub_4DCC30
    MOV rbp, [r15]
    MOV cs:qword_743D48, rax
    MOV rcx, cs:qword_743D40
    JMP loc_42D3C1
loc_42D820:
    MOV rdi, cs:qword_743D48
    TEST rdi, rdi
    JZ loc_42D8F0
loc_42D830:
    MOV rax, 0E38E38E38E38E2h
    CMP rcx, rax
    JA loc_42D8E4
loc_42D843:
    MOV rax, rcx
    SHR rax, 1
    LEA rcx, [rax+rcx+1]
loc_42D84E:
    LEA rsi, [rcx+rcx*2]
    MOV [rsp+128h+var_109], r8b
    MOV cs:qword_743CA8, rcx
    SHL rsi, 5
    CALL sub_4DCC30
    MOV rcx, cs:qword_743D40
    MOV cs:qword_743D48, rax
    MOVZX r8d, [rsp+128h+var_109]
    JMP loc_42D6C6
loc_42D880:
    MOV rdi, [r15]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbp, rax
    MOV esi, offset aWarningLineNum
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    XOR edi, edi
    CALL _error
    MOV rax, [rsp+128h+var_108]
    JMP loc_42D449
loc_42D8B7:
    TEST rcx, rcx
    MOV eax, 1
    MOV edx, 60h
    CMOVZ rcx, rax
    MOV rax, rdx
    XOR esi, esi
    MUL rcx
    JO loc_42DF54
loc_42D8D6:
    TEST rax, rax
    JS loc_42D8E4
loc_42D8DB:
    TEST rsi, rsi
    JZ loc_42D7EE
loc_42D8E4:
    CALL sub_42C250
loc_42D8F0:
    TEST rcx, rcx
    MOV eax, 1
    MOV edx, 60h
    CMOVZ rcx, rax
    MOV rax, rdx
    XOR esi, esi
    MUL rcx
    JO loc_42E089
loc_42D90F:
    TEST rax, rax
    JS loc_42D8E4
loc_42D914:
    TEST rsi, rsi
    JZ loc_42D84E
loc_42D91D:
    JMP loc_42D8E4
loc_42D920:
    CMP cs:qword_743D40, 0
    MOV rax, cs:qword_743D48
    MOV [rsp+128h+var_128], 0
    JZ loc_42DC9B
loc_42D93D:
    MOV rcx, [rsp+128h+var_128]
    XOR r14d, r14d
    XOR r13d, r13d
    LEA r15, [rcx+rcx*2]
    SHL r15, 5
    CMP byte ptr [rax+r15+1Eh], 0
    JZ loc_42DA63
loc_42D95B:
    LEA r12, [rax+r15]
    CMP byte ptr [r12+1Ch], 0
    JNZ loc_42D972
loc_42D967:
    CMP r13, [r12+10h]
    JA loc_42DC85
loc_42D972:
    MOVZX ebp, byte ptr [r12+1Dh]
    TEST bpl, bpl
    JZ loc_42DDE5
loc_42D981:
    CMP cs:byte_743D50, 0
    MOV rdi, cs:qword_743DA0
    JZ loc_42D99A
loc_42D991:
    TEST rdi, rdi
    JNZ loc_42DE27
loc_42D99A:
    CMP qword ptr [r12], 0
    LEA rbx, [r12+20h]
    JS loc_42DB45
loc_42D9AA:
    TEST bpl, bpl
    JNZ loc_42D9FA
loc_42D9AF:
    JMP loc_42DBC0
loc_42D9B8:
    MOV rdx, [rax]
    MOV rsi, [rax+8]
    MOV rdi, rbx
    CMP byte ptr [rsi+rdx-1], 0Ah
    LEA rax, [rdx-1]
    CMOVZ rdx, rax
    XOR r9d, r9d
    XOR ecx, ecx
    MOV r8d, edx
    CALL _re_search
    CMP eax, 0FFFFFFFEh
    JZ loc_42E116
loc_42D9E5:
    CMP eax, 0FFFFFFFFh
    JNZ loc_42DCF3
loc_42D9EE:
    CALL sub_42C7A0
    MOV rdi, cs:qword_743DA0
loc_42D9FA:
    ADD rdi, 1
    MOV cs:qword_743DA0, rdi
    CALL sub_42CA10
    TEST rax, rax
    JNZ loc_42D9B8
loc_42DA0F:
    CMP byte ptr [r12+1Ch], 0
    JNZ loc_42DB6F
loc_42DA1B:
    MOVZX edx, bpl
    MOV rsi, r13
    MOV rdi, r12
    CALL sub_42C8B0
loc_42DA2A:
    CALL sub_42BD70
    CMP cs:byte_743D50, 0
    JNZ loc_42DAF9
loc_42DA3C:
    NOP dword ptr [rax+00h]
loc_42DA40:
    MOV rax, cs:qword_743DA0
    LEA rdi, [rax+1]
    CALL sub_42CA10
    TEST rax, rax
    JZ loc_42DC58
loc_42DA59:
    MOV rax, cs:qword_743D48
    MOV r14, r13
loc_42DA63:
    LEA r12, [rax+r15]
    CMP byte ptr [r12+1Ch], 0
    JNZ loc_42DA7A
loc_42DA6F:
    CMP r14, [r12+10h]
    JA loc_42DC85
loc_42DA7A:
    LEA r13, [r14+1]
    MOV rbp, r13
    IMUL rbp, [r12+8]
    CALL sub_42C080
    MOV rax, cs:qword_743DA0
    LEA rdi, [rax+1]
    CALL sub_42CA10
    TEST rax, rax
    JZ loc_42DC20
loc_42DAA5:
    MOV rax, cs:qword_743DC0
    TEST rax, rax
    JZ loc_42DC40
loc_42DAB5:
    MOV rbx, [rax+18h]
    CMP rbp, rbx
    JBE loc_42DA2A
loc_42DAC2:
    NOP word ptr [rax+rax+00h]
loc_42DAC8:
    CALL sub_42C7A0
    TEST rax, rax
    JZ loc_42DC2D
loc_42DAD6:
    MOV rdi, rax
    ADD rbx, 1
    CALL sub_42BFF0
    CMP rbx, rbp
    JB loc_42DAC8
loc_42DAE7:
    CALL sub_42BD70
    CMP cs:byte_743D50, 0
    JZ loc_42DA40
loc_42DAF9:
    CALL sub_42C7A0
    JMP loc_42DA40
loc_42DB08:
    MOV rdx, [rax]
    MOV rsi, [rax+8]
    MOV rdi, rbx
    CMP byte ptr [rsi+rdx-1], 0Ah
    LEA rax, [rdx-1]
    CMOVZ rdx, rax
    XOR r9d, r9d
    XOR ecx, ecx
    MOV r8d, edx
    CALL _re_search
    CMP eax, 0FFFFFFFEh
    JZ loc_42E116
loc_42DB35:
    CMP eax, 0FFFFFFFFh
    JNZ loc_42DCF3
loc_42DB3E:
    MOV rdi, cs:qword_743DA0
loc_42DB45:
    ADD rdi, 1
    MOV cs:qword_743DA0, rdi
    CALL sub_42CA10
    TEST rax, rax
    JNZ loc_42DB08
loc_42DB5A:
    CMP byte ptr [r12+1Ch], 0
    JZ loc_42DA1B
loc_42DB66:
    TEST bpl, bpl
    JZ loc_42DC0C
loc_42DB6F:
    XOR edi, edi
    CALL _exit
loc_42DB76:
    MOV rdx, [rax]
    MOV rsi, [rax+8]
    MOV rdi, rbx
    CMP byte ptr [rsi+rdx-1], 0Ah
    LEA rax, [rdx-1]
    CMOVZ rdx, rax
    XOR r9d, r9d
    XOR ecx, ecx
    MOV r8d, edx
    CALL _re_search
    CMP eax, 0FFFFFFFEh
    JZ loc_42E116
loc_42DBA3:
    CMP eax, 0FFFFFFFFh
    JNZ loc_42DCF3
loc_42DBAC:
    CALL sub_42C7A0
    MOV rdi, rax
    CALL sub_42BFF0
    MOV rdi, cs:qword_743DA0
loc_42DBC0:
    ADD rdi, 1
    MOV cs:qword_743DA0, rdi
    CALL sub_42CA10
    TEST rax, rax
    JNZ loc_42DB76
loc_42DBD5:
    CMP byte ptr [r12+1Ch], 0
    JNZ loc_42DBF0
loc_42DBDD:
    JMP loc_42DA1B
loc_42DBE8:
    MOV rdi, rax
    CALL sub_42BFF0
loc_42DBF0:
    CALL sub_42C7A0
    TEST rax, rax
    JNZ loc_42DBE8
loc_42DBFA:
    CALL sub_42BD70
    JMP loc_42DB6F
loc_42DC04:
    MOV rdi, rax
    CALL sub_42BFF0
loc_42DC0C:
    CALL sub_42C7A0
    TEST rax, rax
    JNZ loc_42DC04
loc_42DC16:
    JMP loc_42DBFA
loc_42DC20:
    CMP cs:byte_743D50, 0
    JZ loc_42DAA5
loc_42DC2D:
    MOV rdi, [r12+8]
    MOV rsi, r14
    CALL sub_42BF30
loc_42DC40:
    CMP cs:byte_743D98, 0
    JZ loc_42DD82
loc_42DC4D:
    CALL sub_4067A4
loc_42DC58:
    CMP cs:byte_743D50, 0
    JNZ loc_42DA59
loc_42DC65:
    JMP loc_42DC2D
loc_42DC70:
    CMP byte ptr [rbp+1], 2Ah
    JNZ loc_42D4B4
loc_42DC7A:
    MOV byte ptr [r12+1Ch], 1
    JMP loc_42D4E5
loc_42DC85:
    ADD [rsp+128h+var_128], 1
    MOV rcx, [rsp+128h+var_128]
    CMP rcx, cs:qword_743D40
    JB loc_42D93D
loc_42DC9B:
    CALL sub_42C080
    JMP loc_42DCAA
loc_42DCA2:
    MOV rdi, rax
    CALL sub_42BFF0
loc_42DCAA:
    CALL sub_42C7A0
    TEST rax, rax
    JNZ loc_42DCA2
loc_42DCB4:
    CALL sub_42BD70
    XOR edi, edi
    CALL _close
    TEST eax, eax
    JNZ loc_42E0EA
loc_42DCC8:
    XOR eax, eax
    MOV rcx, [rsp+128h+var_40]
    XOR rcx, fs:28h
    JNZ loc_42E0E5
loc_42DCE1:
    ADD rsp, 0F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42DCF3:
    MOV eax, [r12+18h]
    MOV r14, cs:qword_743DA0
    ADD r14, [r12]
    MOV dword ptr [rsp+128h+length], eax
    MOV rax, cs:qword_743DC0
    MOV [rsp+128h+pattern], r14
    TEST rax, rax
    JZ loc_42DE69
loc_42DD1C:
    MOV rax, [rax+18h]
    CMP [rsp+128h+pattern], rax
    JB loc_42DE9A
loc_42DD2B:
    MOV rbx, [rsp+128h+pattern]
    SUB rbx, rax
    JZ loc_42DE8F
loc_42DD39:
    XOR r14d, r14d
    TEST bpl, bpl
    JZ loc_42DE38
loc_42DD45:
    NOP dword ptr [rax]
loc_42DD48:
    CALL sub_42C7A0
    TEST rax, rax
    JZ loc_42E13A
loc_42DD56:
    ADD r14, 1
    CMP rbx, r14
    JNZ loc_42DD48
loc_42DD5F:
    CMP qword ptr [r12], 0
    JLE loc_42DD72
loc_42DD66:
    MOV rax, [rsp+128h+pattern]
    MOV cs:qword_743DA0, rax
loc_42DD72:
    ADD r13, 1
    MOV rax, cs:qword_743D48
    JMP loc_42D95B
loc_42DD82:
    CALL sub_42C280
    TEST al, al
    JZ loc_42DC4D
loc_42DD8F:
    MOV rax, cs:qword_743DC0
    JMP loc_42DAB5
loc_42DD9B:
    CMP byte ptr [rbp+1], 0
    JZ loc_42D35E
loc_42DDA5:
    JMP loc_42D341
loc_42DDB0:
    TEST sil, sil
    JZ loc_42D153
loc_42DDB9:
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    MOV r9d, 0FFFFFFFFh
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV edx, 1
    CALL ___snprintf_chk
    TEST eax, eax
    JS loc_42D8E4
loc_42DDDE:
    CDQE 
    JMP loc_42D2FD
loc_42DDE5:
    CALL sub_42C080
    JMP loc_42D981
loc_42DDEF:
    MOV byte ptr [rax], 75h
    MOV edx, 0FFFFFFFEh
    JMP loc_42D17A
loc_42DDFC:
    MOV edx, 0FFFFFFFDh
    JMP loc_42D17A
loc_42DE06:
    MOV esi, offset aInvalidConvers_0
    XOR edi, edi
    CALL _dcgettext
    MOVZX ecx, bpl
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42DE27:
    CALL sub_42C7A0
    MOV rdi, cs:qword_743DA0
    JMP loc_42D99A
loc_42DE38:
    XOR ebp, ebp
    NOP word ptr [rax+rax+00h]
loc_42DE40:
    CALL sub_42C7A0
    TEST rax, rax
    JZ loc_42E13A
loc_42DE4E:
    MOV rdi, rax
    ADD rbp, 1
    CALL sub_42BFF0
    CMP rbx, rbp
    JNZ loc_42DE40
loc_42DE5F:
    CALL sub_42BD70
    JMP loc_42DD5F
loc_42DE69:
    CMP cs:byte_743D98, 0
    JNZ loc_42DC4D
loc_42DE76:
    CALL sub_42C280
    TEST al, al
    JZ loc_42DC4D
loc_42DE83:
    MOV rax, cs:qword_743DC0
    JMP loc_42DD1C
loc_42DE8F:
    TEST bpl, bpl
    JNZ loc_42DD5F
loc_42DE98:
    JMP loc_42DE5F
loc_42DE9A:
    MOVSXD rdx, dword ptr [rsp+128h+length]
    MOV rax, cs:qword_743D58
    MOV rdi, [rax+rdx*8]
loc_42DEAA:
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSLineNumberOut
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_42BD10
loc_42DED9:
    LEA rsi, [rsp+128h+var_58]
    CALL sub_4C59D0
    MOV rdi, [r15]
    MOV rbp, rax
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aLineNumberSIsS
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42DF1C:
    MOV rax, cs:qword_743D58
    MOV rdi, [rax+r9]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSIntegerRequir
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42DF54:
    MOV esi, 1
    JMP loc_42D8D6
loc_42DF5E:
    MOV rdi, rbp
    MOV [rsp+128h+var_128], rax
    CALL sub_4D4D30
    MOV edx, 5
    MOV esi, offset aSInvalidRegula
    XOR edi, edi
    MOV rbx, rax
    CALL _dcgettext
    MOV r8, [rsp+128h+var_128]
    MOV rdx, rax
    MOV rcx, rbx
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_42BD10
loc_42DF98:
    MOV edx, 5
    MOV esi, offset aSClosingDelimi
    XOR edi, edi
    CALL _dcgettext
    MOV r8d, r12d
    MOV rdx, rax
    MOV rcx, rbp
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42DFC0:
    MOV rdi, [rbx+r13*8-8]
    CALL sub_4D4D30
    XOR edi, edi
    MOV rbx, rax
    MOV edx, 5
    MOV esi, offset aMissingOperand_0
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_42D098
loc_42DFF4:
    MOV rbx, [r15]
    MOV edx, 5
    MOV esi, offset aSLineNumberMus
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42E01C:
    MOV rdi, [r15]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSInvalidPatter
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42E04C:
    MOV rsi, rbp
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aCannotOpenSFor
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42E089:
    MOV esi, 1
    JMP loc_42D90F
loc_42E093:
    MOV edx, 5
    MOV esi, offset aTooManyConvers
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42E0B5:
    MOV rdi, rbp
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSIsRequiredInR
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_42E0E5:
    CALL ___stack_chk_fail
loc_42E0EA:
    MOV edx, 5
    MOV esi, offset aReadError
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_42BD10
loc_42E116:
    MOV edx, 5
    MOV esi, offset aErrorInRegular
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CALL sub_42BD10
loc_42E13A:
    MOVSXD rax, dword ptr [rsp+128h+length]
    MOV rdx, cs:qword_743D58
    MOV rdi, [rdx+rax*8]
    JMP loc_42DEAA
loc_42E14F:
    AND ecx, 2
    MOV edx, 5
    MOV esi, offset aInvalidFlagsIn
    CMP ecx, 1
    MOVZX ebp, bpl
    SBB ebx, ebx
    XOR edi, edi
    AND ebx, 4
    ADD ebx, 23h
    CALL _dcgettext
    MOV r8d, ebp
    MOV rdx, rax
    MOV ecx, ebx
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+rax+00000000h]
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Linked List Manipulation', 'inferred_category': 'Data Structures'}

##### Q 229 - debug_strfdatetime
```assembly
loc_4AE590:
    PUSH r12
    PUSH rbp
    MOV rbp, rdx
    PUSH rbx
    MOV rcx, rdi
    MOV r12, rsi
    XOR r9d, r9d
    XOR r8d, r8d
    MOV edx, offset unk_50601E
    SUB rsp, 30h
    MOV esi, 64h
    MOV rdi, rbp
    MOV rax, fs:28h
    MOV [rsp+48h+var_20], rax
    XOR eax, eax
    CALL sub_4ADD90
    TEST r12, r12
    JZ loc_4AE61A
loc_4AE5CE:
    CMP eax, 63h
    MOV rbx, rax
    JG loc_4AE61A
loc_4AE5D6:
    CMP qword ptr [r12+0D0h], 0
    JZ loc_4AE61A
loc_4AE5E1:
    MOV edi, [r12+18h]
    MOV rsi, rsp
    CALL sub_4ADF70
    MOV esi, 64h
    MOVSXD rdi, ebx
    MOV r9, rax
    SUB esi, ebx
    ADD rdi, rbp
    MOV r8d, offset aTzS
    MOVSXD rsi, esi
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV edx, 1
    XOR eax, eax
    CALL ___snprintf_chk
loc_4AE61A:
    MOV rdx, [rsp+48h+var_20]
    XOR rdx, fs:28h
    MOV rax, rbp
    JNZ loc_4AE636
loc_4AE62D:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4AE636:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFB', '0x2', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation', 'inferred_category': 'Utility Function'}

##### T 229 - debug_strfdatetime
```assembly
loc_4CA960:
    PUSH r13
    PUSH r12
    MOV r12, rdx
    PUSH rbp
    PUSH rbx
    MOV rcx, rdi
    MOV rbx, rsi
    XOR r9d, r9d
    XOR r8d, r8d
    SUB rsp, 38h
    MOV edx, offset unk_52A6CF
    MOV esi, 64h
    MOV rdi, r12
    MOV rax, fs:28h
    MOV [rsp+58h+var_30], rax
    XOR eax, eax
    CALL sub_4CA440
    TEST rbx, rbx
    JZ loc_4CAABF
loc_4CA9A4:
    CMP eax, 63h
    MOV r13, rax
    JG loc_4CAABF
loc_4CA9B0:
    CMP qword ptr [rbx+0D0h], 0
    JZ loc_4CAABF
loc_4CA9BE:
    MOV ebx, [rbx+18h]
    MOV edx, 91A2B3C5h
    MOV esi, 1
    MOV rdi, rsp
    MOV eax, ebx
    MOV ecx, ebx
    IMUL edx
    MOV eax, ebx
    SAR ecx, 1Fh
    SAR eax, 1Fh
    AND ecx, 2
    LEA r8d, [rcx+2Bh]
    MOV ecx, offset aC02d
    LEA ebp, [rdx+rbx]
    MOV edx, 1Bh
    SAR ebp, 0Bh
    SUB ebp, eax
    MOV eax, ebp
    SAR eax, 1Fh
    MOV r9d, eax
    XOR r9d, ebp
    IMUL ebp, 0E10h
    SUB r9d, eax
    XOR eax, eax
    CALL ___sprintf_chk
    SUB ebx, ebp
    MOV edx, ebx
    MOV ecx, ebx
    SAR edx, 1Fh
    XOR ecx, edx
    SUB ecx, edx
    JZ loc_4CAA92
loc_4CAA1F:
    CDQE 
    MOV edx, 88888889h
    MOV r9d, ecx
    LEA rdi, [rsp+rax+58h+var_58]
    MOV eax, ecx
    SAR r9d, 1Fh
    IMUL edx
    MOV eax, ecx
    MOV byte ptr [rdi], 3Ah
    LEA esi, [rdx+rcx]
    MOV edx, 1B4E81B5h
    IMUL edx
    SAR esi, 5
    MOV r8d, esi
    SUB esi, r9d
    SAR edx, 6
    SUB r8d, r9d
    MOV eax, esi
    SUB edx, r9d
    MOV r9d, 66666667h
    ADD edx, 30h
    MOV [rdi+1], dl
    IMUL r9d
    MOV eax, esi
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+rdx*4]
    IMUL r8d, 3Ch
    ADD eax, eax
    SUB esi, eax
    LEA rax, [rdi+3]
    ADD esi, 30h
    SUB ecx, r8d
    MOV [rdi+2], sil
    MOV r8d, ecx
    JNZ loc_4CAAE0
loc_4CAA8F:
    MOV byte ptr [rax], 0
loc_4CAA92:
    MOV esi, 64h
    MOVSXD rdi, r13d
    MOV r9, rsp
    SUB esi, r13d
    ADD rdi, r12
    MOV r8d, offset aTzS
    MOVSXD rsi, esi
    MOV rcx, 0FFFFFFFFFFFFFFFFh
    MOV edx, 1
    XOR eax, eax
    CALL ___snprintf_chk
loc_4CAABF:
    MOV rdi, [rsp+58h+var_30]
    XOR rdi, fs:28h
    MOV rax, r12
    JNZ loc_4CAB0F
loc_4CAAD2:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4CAAE0:
    MOV eax, ecx
    MOV byte ptr [rdi+3], 3Ah
    IMUL r9d
    MOV eax, ecx
    SAR eax, 1Fh
    SAR edx, 2
    SUB edx, eax
    LEA eax, [rdx+30h]
    LEA edx, [rdx+rdx*4]
    ADD edx, edx
    MOV [rdi+4], al
    LEA rax, [rdi+6]
    SUB r8d, edx
    ADD r8d, 30h
    MOV [rdi+5], r8b
    JMP loc_4CAA8F
loc_4CAB0F:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFB', '0x1', '0x26', '0x11', '0x14', '0x12', '0x8', '0x1C', '0x1', '0x4', '0x2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation', 'inferred_category': 'Utility/Helper'}

##### Q 230 - atexit
```assembly
loc_406410:

loc_4C78D0:
    LEA rax, unk_71F9E8
    TEST rax, rax
    JZ loc_4C78F0
loc_4C78DC:
    MOV rdx, [rax]
    XOR esi, esi
    JMP ___cxa_atexit
loc_4C78F0:
    XOR edx, edx
    XOR esi, esi
    JMP ___cxa_atexit
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFF', '0x1', '0xD', '0xB', '0x4', '0x11', '0x25', '0x6E', '0x10', '0xF0A'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File Time Manipulation', 'inferred_category': 'System/OS Interaction'}

##### T 230 - atexit
```assembly
loc_406410:

loc_4EA570:
    LEA rax, unk_7429E8
    TEST rax, rax
    JZ loc_4EA590
loc_4EA57C:
    MOV rdx, [rax]
    XOR esi, esi
    JMP ___cxa_atexit
loc_4EA590:
    XOR edx, edx
    XOR esi, esi
    JMP ___cxa_atexit
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x1Ch', '0x28h', '0xFF', '0x1', '0x11h', '0xDh', '0x4', '0xBh', '0x5', '0x6Eh', '0x10h', '0xF0Ah'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 2, 'inferred_algorithm': 'File Handling', 'inferred_category': 'Interfacing/Wrapper'}

##### Q 231 - dc_parse_stream
```assembly
loc_431A90:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV edi, offset aTerm_0
    SUB rsp, 48h
    MOV rax, fs:28h
    MOV [rsp+78h+var_40], rax
    XOR eax, eax
    MOV [rsp+78h+var_60], rsi
    MOV [rsp+78h+lineptr], 0
    MOV [rsp+78h+n], 0
    CALL _getenv
    TEST rax, rax
    JZ loc_431F96
loc_431ADB:
    CMP byte ptr [rax], 0
    MOV rdi, rax
    MOV eax, offset aNone_0
    CMOVNZ rax, rdi
    MOV [rsp+78h+name], rax
loc_431AEF:
    MOV r14d, 3
    MOV [rsp+78h+var_61], 1
    MOV r15d, offset aConfigurationF
    XOR ebp, ebp
    NOP word ptr [rax+rax+00h]
loc_431B08:
    ADD rbp, 1
    TEST r13, r13
    JZ loc_431C66
loc_431B15:
    LEA rsi, [rsp+78h+n]
    LEA rdi, [rsp+78h+lineptr]
    MOV rcx, r13
    MOV edx, 0Ah
    CALL ___getdelim
    TEST rax, rax
    JLE loc_431EBB
loc_431B35:
    MOV rbx, [rsp+78h+lineptr]
loc_431B3A:
    CALL ___ctype_b_loc
    MOV rcx, [rax]
    MOV r8, rax
loc_431B45:
    MOVZX edx, byte ptr [rbx]
    TEST byte ptr [rcx+rdx*2+1], 20h
    JNZ loc_431C90
loc_431B53:
    TEST dl, dl
    JZ loc_431B08
loc_431B57:
    CMP dl, 23h
    JZ loc_431B08
loc_431B5C:
    MOV r12, rbx
    JMP loc_431B6C
loc_431B68:
    TEST dl, dl
    JZ loc_431B7C
loc_431B6C:
    ADD r12, 1
    MOVZX edx, byte ptr [r12]
    TEST byte ptr [rcx+rdx*2+1], 20h
    JZ loc_431B68
loc_431B7C:
    MOV rsi, r12
    MOV rdi, rbx
    MOV [rsp+78h+var_78], r8
    SUB rsi, rbx
    CALL sub_4BBC20
    CMP byte ptr [r12], 0
    MOV rbx, rax
    JZ loc_431CA0
loc_431B9C:
    MOV r8, [rsp+78h+var_78]
    MOV rcx, [r8]
    NOP dword ptr [rax+rax+00h]
loc_431BA8:
    ADD r12, 1
    MOVZX edx, byte ptr [r12]
    TEST byte ptr [rcx+rdx*2+1], 20h
    JNZ loc_431BA8
loc_431BB8:
    TEST dl, dl
    JZ loc_431CA0
loc_431BC0:
    CMP dl, 23h
    JZ loc_431CA0
loc_431BC9:
    MOV rax, r12
    JMP loc_431BD5
loc_431BD0:
    CMP dl, 23h
    JZ loc_431BE0
loc_431BD5:
    ADD rax, 1
    MOVZX edx, byte ptr [rax]
    TEST dl, dl
    JNZ loc_431BD0
loc_431BE0:
    LEA rdx, [rax-1]
    MOVZX eax, byte ptr [rax-1]
    TEST byte ptr [rcx+rax*2+1], 20h
    JZ loc_431BFD
loc_431BEF:
    SUB rdx, 1
    MOVZX eax, byte ptr [rdx]
    TEST byte ptr [rcx+rax*2+1], 20h
    JNZ loc_431BEF
loc_431BFD:
    LEA rsi, [rdx+1]
    MOV rdi, r12
    SUB rsi, r12
    CALL sub_4BBC20
    TEST rbx, rbx
    MOV r12, rax
    JZ loc_431B08
loc_431C18:
    TEST rax, rax
    JZ loc_431CA9
loc_431C21:
    MOV esi, offset aTerm_0
    MOV rdi, rbx
    CALL sub_497A60
    TEST eax, eax
    JZ loc_431E10
loc_431C36:
    CMP r14d, 2
    JZ loc_431CF8
loc_431C40:
    TEST r14d, r14d
    JNZ loc_431CFE
loc_431C49:
    MOV rdi, rbx
    ADD rbp, 1
    CALL _free
    MOV rdi, r12
    CALL _free
    TEST r13, r13
    JNZ loc_431B15
loc_431C66:
    CMP r15, offset aUsageSOptionNa
    JZ loc_431EC5
loc_431C73:
    MOV rdi, r15
    MOV rbx, r15
    CALL _strlen
    LEA r15, [r15+rax+1]
    JMP loc_431B3A
loc_431C90:
    ADD rbx, 1
    JMP loc_431B45
loc_431CA0:
    TEST rbx, rbx
    JZ loc_431B08
loc_431CA9:
    MOV rdx, [rsp+78h+var_60]
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aSLuInvalidLine
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rdx, rax
    MOV rcx, r12
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV rdi, rbx
    CALL _free
    MOV [rsp+78h+var_61], 0
    JMP loc_431B08
loc_431CF8:
    MOV r14d, 1
loc_431CFE:
    MOVZX eax, byte ptr [rbx]
    CMP al, 2Eh
    JZ loc_431E40
loc_431D09:
    CMP al, 2Ah
    JZ loc_431E62
loc_431D11:
    MOV esi, offset aOptions
    MOV rdi, rbx
    CALL sub_497A60
    TEST eax, eax
    JZ loc_431C49
loc_431D26:
    MOV esi, offset aColor
    MOV rdi, rbx
    CALL sub_497A60
    TEST eax, eax
    JZ loc_431C49
loc_431D3B:
    MOV esi, offset aEightbit
    MOV rdi, rbx
    CALL sub_497A60
    TEST eax, eax
    JZ loc_431C49
loc_431D50:
    XOR edx, edx
    MOV esi, offset aNormal
    JMP loc_431D79
loc_431D60:
    MOV rdx, [rsp+78h+var_78]
    ADD rdx, 1
    MOV rsi, ds:off_4DB820[rdx*8]
    TEST rsi, rsi
    JZ loc_431EED
loc_431D79:
    MOV rdi, rbx
    MOV [rsp+78h+var_68], edx
    MOV [rsp+78h+var_78], rdx
    CALL sub_497A60
    TEST eax, eax
    JNZ loc_431D60
loc_431D8D:
    MOV rax, cs:qword_721158
    CMP cs:qword_721160, rax
    JZ loc_431FC7
loc_431DA1:
    LEA rdx, [rax+1]
    MOV cs:qword_721158, rdx
    MOVSXD rdx, [rsp+78h+var_68]
    MOV rdx, ds:off_4DB6E0[rdx*8]
    MOVZX ecx, byte ptr [rdx]
    MOV [rax], cl
    MOV rax, cs:qword_721158
    CMP cs:qword_721160, rax
    JZ loc_431FA4
loc_431DD2:
    LEA rcx, [rax+1]
    MOV cs:qword_721158, rcx
    MOVZX edx, byte ptr [rdx+1]
    MOV [rax], dl
    MOV rax, cs:qword_721158
    CMP cs:qword_721160, rax
    JNZ loc_431E7E
loc_431DF7:
    MOV esi, 1
    MOV edi, offset unk_721140
    CALL _obstack_newchunk
    MOV rax, cs:qword_721158
    JMP loc_431E7E
loc_431E10:
    MOV rsi, [rsp+78h+name]
    XOR edx, edx
    MOV rdi, r12
    CALL _fnmatch
    TEST eax, eax
    JZ loc_431E33
loc_431E23:
    CMP r14d, 2
    MOV r14d, 0
    JNZ loc_431C49
loc_431E33:
    MOV r14d, 2
    JMP loc_431C49
loc_431E40:
    MOV rax, cs:qword_721158
    CMP cs:qword_721160, rax
    JZ loc_431F7B
loc_431E54:
    LEA rdx, [rax+1]
    MOV cs:qword_721158, rdx
    MOV byte ptr [rax], 2Ah
loc_431E62:
    MOV rdi, rbx
    CALL sub_4318C0
    MOV rax, cs:qword_721158
    CMP cs:qword_721160, rax
    JZ loc_431DF7
loc_431E7E:
    LEA rdx, [rax+1]
    MOV rdi, r12
    MOV cs:qword_721158, rdx
    MOV byte ptr [rax], 3Dh
    CALL sub_4318C0
    MOV rax, cs:qword_721158
    CMP cs:qword_721160, rax
    JZ loc_431F4A
loc_431EA8:
    LEA rdx, [rax+1]
    MOV cs:qword_721158, rdx
    MOV byte ptr [rax], 3Ah
    JMP loc_431C49
loc_431EBB:
    MOV rdi, [rsp+78h+lineptr]
    CALL _free
loc_431EC5:
    MOV rdi, [rsp+78h+var_40]
    XOR rdi, fs:28h
    MOVZX eax, [rsp+78h+var_61]
    JNZ loc_431FE2
loc_431EDE:
    ADD rsp, 48h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_431EED:
    CMP r14d, 3
    JZ loc_431C49
loc_431EF7:
    MOV rax, [rsp+78h+var_60]
    TEST rax, rax
    JZ loc_431F65
loc_431F01:
    MOV rdx, rax
    MOV esi, 3
    XOR edi, edi
    CALL sub_4B5220
    MOV rcx, rax
loc_431F13:
    MOV edx, 5
    MOV esi, offset aSLuUnrecognize
    XOR edi, edi
    MOV [rsp+78h+var_78], rcx
    CALL _dcgettext
    MOV rcx, [rsp+78h+var_78]
    MOV rdx, rax
    MOV r9, rbx
    MOV r8, rbp
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV [rsp+78h+var_61], 0
    JMP loc_431C49
loc_431F4A:
    MOV esi, 1
    MOV edi, offset unk_721140
    CALL _obstack_newchunk
    MOV rax, cs:qword_721158
    JMP loc_431EA8
loc_431F65:
    MOV edx, 5
    MOV esi, offset aInternal
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rax
    JMP loc_431F13
loc_431F7B:
    MOV esi, 1
    MOV edi, offset unk_721140
    CALL _obstack_newchunk
    MOV rax, cs:qword_721158
    JMP loc_431E54
loc_431F96:
    MOV [rsp+78h+name], offset aNone_0
    JMP loc_431AEF
loc_431FA4:
    MOV esi, 1
    MOV edi, offset unk_721140
    MOV [rsp+78h+var_78], rdx
    CALL _obstack_newchunk
    MOV rax, cs:qword_721158
    MOV rdx, [rsp+78h+var_78]
    JMP loc_431DD2
loc_431FC7:
    MOV esi, 1
    MOV edi, offset unk_721140
    CALL _obstack_newchunk
    MOV rax, cs:qword_721158
    JMP loc_431DA1
loc_431FE2:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/StackCanaryCheck'}

##### T 231 - dc_parse_stream
```assembly
loc_434F40:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    MOV edi, offset aTerm_0
    SUB rsp, 48h
    MOV rax, fs:28h
    MOV [rsp+78h+var_40], rax
    XOR eax, eax
    MOV [rsp+78h+var_60], rsi
    MOV [rsp+78h+lineptr], 0
    MOV [rsp+78h+n], 0
    CALL _getenv
    TEST rax, rax
    JZ loc_435446
loc_434F8B:
    CMP byte ptr [rax], 0
    MOV rdi, rax
    MOV eax, offset aNone_0
    CMOVNZ rax, rdi
    MOV [rsp+78h+name], rax
loc_434F9F:
    MOV r14d, 3
    MOV [rsp+78h+var_61], 1
    MOV r15d, offset aConfigurationF
    XOR ebp, ebp
    NOP word ptr [rax+rax+00h]
loc_434FB8:
    ADD rbp, 1
    TEST r13, r13
    JZ loc_435116
loc_434FC5:
    LEA rsi, [rsp+78h+n]
    LEA rdi, [rsp+78h+lineptr]
    MOV rcx, r13
    MOV edx, 0Ah
    CALL ___getdelim
    TEST rax, rax
    JLE loc_43536B
loc_434FE5:
    MOV rbx, [rsp+78h+lineptr]
loc_434FEA:
    CALL ___ctype_b_loc
    MOV rcx, [rax]
    MOV r8, rax
loc_434FF5:
    MOVZX edx, byte ptr [rbx]
    TEST byte ptr [rcx+rdx*2+1], 20h
    JNZ loc_435140
loc_435003:
    TEST dl, dl
    JZ loc_434FB8
loc_435007:
    CMP dl, 23h
    JZ loc_434FB8
loc_43500C:
    MOV r12, rbx
    JMP loc_43501C
loc_435018:
    TEST dl, dl
    JZ loc_43502C
loc_43501C:
    ADD r12, 1
    MOVZX edx, byte ptr [r12]
    TEST byte ptr [rcx+rdx*2+1], 20h
    JZ loc_435018
loc_43502C:
    MOV rsi, r12
    MOV rdi, rbx
    MOV [rsp+78h+var_78], r8
    SUB rsi, rbx
    CALL sub_4DD980
    CMP byte ptr [r12], 0
    MOV rbx, rax
    JZ loc_435150
loc_43504C:
    MOV r8, [rsp+78h+var_78]
    MOV rcx, [r8]
    NOP dword ptr [rax+rax+00h]
loc_435058:
    ADD r12, 1
    MOVZX edx, byte ptr [r12]
    TEST byte ptr [rcx+rdx*2+1], 20h
    JNZ loc_435058
loc_435068:
    TEST dl, dl
    JZ loc_435150
loc_435070:
    CMP dl, 23h
    JZ loc_435150
loc_435079:
    MOV rax, r12
    JMP loc_435085
loc_435080:
    CMP dl, 23h
    JZ loc_435090
loc_435085:
    ADD rax, 1
    MOVZX edx, byte ptr [rax]
    TEST dl, dl
    JNZ loc_435080
loc_435090:
    LEA rdx, [rax-1]
    MOVZX eax, byte ptr [rax-1]
    TEST byte ptr [rcx+rax*2+1], 20h
    JZ loc_4350AD
loc_43509F:
    SUB rdx, 1
    MOVZX eax, byte ptr [rdx]
    TEST byte ptr [rcx+rax*2+1], 20h
    JNZ loc_43509F
loc_4350AD:
    LEA rsi, [rdx+1]
    MOV rdi, r12
    SUB rsi, r12
    CALL sub_4DD980
    TEST rbx, rbx
    MOV r12, rax
    JZ loc_434FB8
loc_4350C8:
    TEST rax, rax
    JZ loc_435159
loc_4350D1:
    MOV esi, offset aTerm_0
    MOV rdi, rbx
    CALL sub_4B1BC0
    TEST eax, eax
    JZ loc_4352C0
loc_4350E6:
    CMP r14d, 2
    JZ loc_4351A8
loc_4350F0:
    TEST r14d, r14d
    JNZ loc_4351AE
loc_4350F9:
    MOV rdi, rbx
    ADD rbp, 1
    CALL _free
    MOV rdi, r12
    CALL _free
    TEST r13, r13
    JNZ loc_434FC5
loc_435116:
    CMP r15, offset aUsageSOptionNa
    JZ loc_435375
loc_435123:
    MOV rdi, r15
    MOV rbx, r15
    CALL _strlen
    LEA r15, [r15+rax+1]
    JMP loc_434FEA
loc_435140:
    ADD rbx, 1
    JMP loc_434FF5
loc_435150:
    TEST rbx, rbx
    JZ loc_434FB8
loc_435159:
    MOV rdx, [rsp+78h+var_60]
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV edx, 5
    MOV r12, rax
    MOV esi, offset aSLuInvalidLine
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rdx, rax
    MOV rcx, r12
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV rdi, rbx
    CALL _free
    MOV [rsp+78h+var_61], 0
    JMP loc_434FB8
loc_4351A8:
    MOV r14d, 1
loc_4351AE:
    MOVZX eax, byte ptr [rbx]
    CMP al, 2Eh
    JZ loc_4352F0
loc_4351B9:
    CMP al, 2Ah
    JZ loc_435312
loc_4351C1:
    MOV esi, offset aOptions
    MOV rdi, rbx
    CALL sub_4B1BC0
    TEST eax, eax
    JZ loc_4350F9
loc_4351D6:
    MOV esi, offset aColor
    MOV rdi, rbx
    CALL sub_4B1BC0
    TEST eax, eax
    JZ loc_4350F9
loc_4351EB:
    MOV esi, offset aEightbit
    MOV rdi, rbx
    CALL sub_4B1BC0
    TEST eax, eax
    JZ loc_4350F9
loc_435200:
    XOR edx, edx
    MOV esi, offset aNormal
    JMP loc_435229
loc_435210:
    MOV rdx, [rsp+78h+var_78]
    ADD rdx, 1
    MOV rsi, ds:off_4FE640[rdx*8]
    TEST rsi, rsi
    JZ loc_43539D
loc_435229:
    MOV rdi, rbx
    MOV [rsp+78h+var_68], edx
    MOV [rsp+78h+var_78], rdx
    CALL sub_4B1BC0
    TEST eax, eax
    JNZ loc_435210
loc_43523D:
    MOV rax, cs:qword_744138
    CMP cs:qword_744140, rax
    JZ loc_435477
loc_435251:
    LEA rdx, [rax+1]
    MOV cs:qword_744138, rdx
    MOVSXD rdx, [rsp+78h+var_68]
    MOV rdx, ds:off_4FE500[rdx*8]
    MOVZX ecx, byte ptr [rdx]
    MOV [rax], cl
    MOV rax, cs:qword_744138
    CMP cs:qword_744140, rax
    JZ loc_435454
loc_435282:
    LEA rcx, [rax+1]
    MOV cs:qword_744138, rcx
    MOVZX edx, byte ptr [rdx+1]
    MOV [rax], dl
    MOV rax, cs:qword_744138
    CMP cs:qword_744140, rax
    JNZ loc_43532E
loc_4352A7:
    MOV esi, 1
    MOV edi, offset unk_744120
    CALL _obstack_newchunk
    MOV rax, cs:qword_744138
    JMP loc_43532E
loc_4352C0:
    MOV rsi, [rsp+78h+name]
    XOR edx, edx
    MOV rdi, r12
    CALL _fnmatch
    TEST eax, eax
    JZ loc_4352E3
loc_4352D3:
    CMP r14d, 2
    MOV r14d, 0
    JNZ loc_4350F9
loc_4352E3:
    MOV r14d, 2
    JMP loc_4350F9
loc_4352F0:
    MOV rax, cs:qword_744138
    CMP cs:qword_744140, rax
    JZ loc_43542B
loc_435304:
    LEA rdx, [rax+1]
    MOV cs:qword_744138, rdx
    MOV byte ptr [rax], 2Ah
loc_435312:
    MOV rdi, rbx
    CALL sub_434D70
    MOV rax, cs:qword_744138
    CMP cs:qword_744140, rax
    JZ loc_4352A7
loc_43532E:
    LEA rdx, [rax+1]
    MOV rdi, r12
    MOV cs:qword_744138, rdx
    MOV byte ptr [rax], 3Dh
    CALL sub_434D70
    MOV rax, cs:qword_744138
    CMP cs:qword_744140, rax
    JZ loc_4353FA
loc_435358:
    LEA rdx, [rax+1]
    MOV cs:qword_744138, rdx
    MOV byte ptr [rax], 3Ah
    JMP loc_4350F9
loc_43536B:
    MOV rdi, [rsp+78h+lineptr]
    CALL _free
loc_435375:
    MOV rdi, [rsp+78h+var_40]
    XOR rdi, fs:28h
    MOVZX eax, [rsp+78h+var_61]
    JNZ loc_435492
loc_43538E:
    ADD rsp, 48h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_43539D:
    CMP r14d, 3
    JZ loc_4350F9
loc_4353A7:
    MOV rax, [rsp+78h+var_60]
    TEST rax, rax
    JZ loc_435415
loc_4353B1:
    MOV rdx, rax
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rcx, rax
loc_4353C3:
    MOV edx, 5
    MOV esi, offset aSLuUnrecognize
    XOR edi, edi
    MOV [rsp+78h+var_78], rcx
    CALL _dcgettext
    MOV rcx, [rsp+78h+var_78]
    MOV rdx, rax
    MOV r9, rbx
    MOV r8, rbp
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV [rsp+78h+var_61], 0
    JMP loc_4350F9
loc_4353FA:
    MOV esi, 1
    MOV edi, offset unk_744120
    CALL _obstack_newchunk
    MOV rax, cs:qword_744138
    JMP loc_435358
loc_435415:
    MOV edx, 5
    MOV esi, offset aInternal
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rax
    JMP loc_4353C3
loc_43542B:
    MOV esi, 1
    MOV edi, offset unk_744120
    CALL _obstack_newchunk
    MOV rax, cs:qword_744138
    JMP loc_435304
loc_435446:
    MOV [rsp+78h+name], offset aNone_0
    JMP loc_434F9F
loc_435454:
    MOV esi, 1
    MOV edi, offset unk_744120
    MOV [rsp+78h+var_78], rdx
    CALL _obstack_newchunk
    MOV rax, cs:qword_744138
    MOV rdx, [rsp+78h+var_78]
    JMP loc_435282
loc_435477:
    MOV esi, 1
    MOV edi, offset unk_744120
    CALL _obstack_newchunk
    MOV rax, cs:qword_744138
    JMP loc_435251
loc_435492:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x9', '0xA', '0x4BFAA4', '0x48A1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 10, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Manipulation', 'inferred_category': 'Utility Function'}

##### Q 232 - full_write
```assembly
loc_4A69C0:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST rdx, rdx
    JZ loc_4A6A31
loc_4A69CF:
    MOV r13d, edi
    MOV rbp, rsi
    MOV rbx, rdx
    XOR r12d, r12d
    JMP loc_4A69F0
loc_4A69E0:
    TEST rax, rax
    JZ loc_4A6A18
loc_4A69E5:
    ADD r12, rax
    ADD rbp, rax
    SUB rbx, rax
    JZ loc_4A6A04
loc_4A69F0:
    MOV rdx, rbx
    MOV rsi, rbp
    MOV edi, r13d
    CALL sub_4B72A0
    CMP rax, 0FFFFFFFFFFFFFFFFh
    JNZ loc_4A69E0
loc_4A6A04:
    ADD rsp, 8
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4A6A18:
    CALL ___errno_location
    MOV dword ptr [rax], 1Ch
    ADD rsp, 8
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4A6A31:
    XOR r12d, r12d
    JMP loc_4A6A04
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x50', '0x2', '0x1', '0xD', '0xFFFFFFFD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 15, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### T 232 - full_write
```assembly
loc_4C2110:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST rdx, rdx
    JZ loc_4C2181
loc_4C211F:
    MOV r13d, edi
    MOV rbp, rsi
    MOV rbx, rdx
    XOR r12d, r12d
    JMP loc_4C2140
loc_4C2130:
    TEST rax, rax
    JZ loc_4C2168
loc_4C2135:
    ADD r12, rax
    ADD rbp, rax
    SUB rbx, rax
    JZ loc_4C2154
loc_4C2140:
    MOV rdx, rbx
    MOV rsi, rbp
    MOV edi, r13d
    CALL sub_4D7020
    CMP rax, 0FFFFFFFFFFFFFFFFh
    JNZ loc_4C2130
loc_4C2154:
    ADD rsp, 8
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4C2168:
    CALL ___errno_location
    MOV dword ptr [rax], 1Ch
    ADD rsp, 8
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4C2181:
    XOR r12d, r12d
    JMP loc_4C2154
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Unknown', 'Pointer'], 'return_value_type': 'Boolean (Int32)', 'dominant_operation_categories': ['ControlTransfer', 'MemoryAccess', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 7, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['1', '0x50', '1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Manipulation or Processing', 'inferred_category': 'Utility Function'}

##### Q 233 - restore_default_fscreatecon_or_die
```assembly
loc_40672B:
    PUSH rbx
    CALL ___errno_location
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aFailedToRestor
    XOR edi, edi
    MOV dword ptr [rax], 5Fh
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xB', '0x3FFFFFFF', '0x64', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Sorting', 'inferred_category': 'DataProcessing'}

##### T 233 - restore_default_fscreatecon_or_die
```assembly
loc_406773:
    PUSH rbx
    CALL ___errno_location
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aFailedToRestor
    XOR edi, edi
    MOV dword ptr [rax], 5Fh
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL _error
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 6, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xB', '0x3FFFFFFF', '0x64', '0x1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': True, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Sorting', 'inferred_category': 'Utility'}

##### Q 234 - mode_create_from_ref
```assembly
loc_4ABC20:
    PUSH rbx
    MOV rsi, rdi
    MOV edi, 1
    SUB rsp, 0A0h
    MOV rdx, rsp
    MOV rax, fs:28h
    MOV [rsp+0A8h+var_10], rax
    XOR eax, eax
    CALL ___xstat
    MOV edx, eax
    XOR eax, eax
    TEST edx, edx
    JNZ loc_4ABC7D
loc_4ABC53:
    MOV ebx, [rsp+0A8h+var_90]
    MOV edi, 20h
    CALL sub_4BB0B0
    MOV byte ptr [rax], 3Dh
    MOV byte ptr [rax+1], 1
    MOV dword ptr [rax+4], 0FFFh
    MOV [rax+8], ebx
    MOV dword ptr [rax+0Ch], 0FFFh
    MOV byte ptr [rax+11h], 0
loc_4ABC7D:
    MOV rcx, [rsp+0A8h+var_10]
    XOR rcx, fs:28h
    JNZ loc_4ABC99
loc_4ABC90:
    ADD rsp, 0A0h
    POP rbx
    RETN 
loc_4ABC99:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6BBBA0', '0x6BC2B0', '0x6BC2A0', '0x6BBAE8', '0x6BC2B8', '0x6BC318', '0x6BC2C0', '0x6BBAF8', '0x6BBAA0', '0x6BC2A0', '0x6BBA90', '0x6BC2A0', '0x6BC348', '0x6BC320', '0x6BC300'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 17, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### T 234 - mode_create_from_ref
```assembly
loc_4C8150:
    PUSH rbx
    MOV rsi, rdi
    MOV edi, 1
    SUB rsp, 0A0h
    MOV rdx, rsp
    MOV rax, fs:28h
    MOV [rsp+0A8h+var_10], rax
    XOR eax, eax
    CALL ___xstat
    MOV edx, eax
    XOR eax, eax
    TEST edx, edx
    JNZ loc_4C81AD
loc_4C8183:
    MOV ebx, [rsp+0A8h+var_90]
    MOV edi, 20h
    CALL sub_4DCC10
    MOV byte ptr [rax], 3Dh
    MOV byte ptr [rax+1], 1
    MOV dword ptr [rax+4], 0FFFh
    MOV [rax+8], ebx
    MOV dword ptr [rax+0Ch], 0FFFh
    MOV byte ptr [rax+11h], 0
loc_4C81AD:
    MOV rcx, [rsp+0A8h+var_10]
    XOR rcx, fs:28h
    JNZ loc_4C81C9
loc_4C81C0:
    ADD rsp, 0A0h
    POP rbx
    RETN 
loc_4C81C9:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6E3BA0', '0x6E42B0', '0x6E42A0', '0x6E3AE8', '0x6E42B8', '0x6E4318', '0x6E42C0', '0x6E3AF8', '0x6E3AA0', '0x6E3A90', '0x6E4348', '0x6E4320', '0x6E4300', '0x6E3A60'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ControlFlow'}

##### Q 235 - print_int
```assembly
loc_4598C0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 38h
    MOV rax, fs:28h
    MOV [rsp+68h+var_40], rax
    XOR eax, eax
    CMP rdi, rsi
    MOV [rsp+68h+var_60], rcx
    MOV [rsp+68h+var_54], r8d
    JBE loc_459970
loc_4598F1:
    LEA rcx, [rdi-1]
    MOVSXD rax, r9d
    MOV rbx, rdi
    MOV rbp, rsi
    MOV r15, rdx
    MOV [rsp+68h+var_50], rax
    IMUL rcx, rax
    MOV r13, rdi
    MOV r14, rcx
loc_459910:
    XOR edx, edx
    MOV rax, r14
    SUB r13, 1
    DIV rbx
    SUB r9d, eax
    CMP cs:byte_72FB21, 0
    MOV r12, rax
    MOV eax, [rsp+68h+var_54]
    LEA esi, [r9+rax]
    JZ loc_459990
loc_459933:
    XOR eax, eax
loc_459935:
    MOV rdx, rax
    NEG rdx
    MOVZX edx, byte ptr [r15+rdx+3]
    MOV byte ptr [rsp+rax+68h+var_48], dl
    ADD rax, 1
    CMP rax, 4
    JNZ loc_459935
loc_45994F:
    MOV edx, [rsp+68h+var_48]
loc_459953:
    MOV rdi, [rsp+68h+var_60]
    XOR eax, eax
    ADD r15, 4
    CALL sub_4BB990
    SUB r14, [rsp+68h+var_50]
    CMP rbp, r13
    MOV r9d, r12d
    JB loc_459910
loc_459970:
    MOV rax, [rsp+68h+var_40]
    XOR rax, fs:28h
    JNZ loc_459995
loc_459980:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_459990:
    MOV edx, [r15]
    JMP loc_459953
loc_459995:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x30', '0x60', '0x63', '0x40', '0x40', '0x18', '0x10', '0x4', '0x0', '0x38', '0x38', '0x20h', '0x4', '0x0'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 31, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Binary search', 'inferred_category': 'Algorithm Implementation'}

##### T 235 - print_int
```assembly
loc_462680:
    PUSH r15
    PUSH r14
    MOV rax, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 38h
    MOV [rsp+68h+var_68], rdi
    MOV [rsp+68h+var_60], rcx
    MOV rdi, fs:28h
    MOV [rsp+68h+var_40], rdi
    XOR edi, edi
    CMP rax, rsi
    MOV [rsp+68h+var_54], r8d
    JBE loc_462750
loc_4626B8:
    LEA rcx, [rax-1]
    MOVSXD rdi, r9d
    MOV rbp, rsi
    MOV r15, rdx
    MOV [rsp+68h+var_50], rdi
    MOV r13, rax
    IMUL rcx, rdi
    MOV r14, rcx
    JMP loc_462725
loc_4626E0:
    MOVZX eax, byte ptr [r15+2]
    MOV bl, [r15+3]
    MOVZX edx, byte ptr [r15]
    MOV bh, al
    MOVZX eax, byte ptr [r15+1]
    MOVZX r10d, bx
    SHL edx, 18h
    SHL eax, 10h
    OR r10d, eax
    MOV ebx, r10d
    OR ebx, edx
    MOV edx, ebx
loc_462708:
    MOV rdi, [rsp+68h+var_60]
    XOR eax, eax
    ADD r15, 4
    CALL sub_4DD600
    SUB r14, [rsp+68h+var_50]
    CMP rbp, r13
    MOV r9d, r12d
    JNB loc_462750
loc_462725:
    XOR edx, edx
    MOV rax, r14
    SUB r13, 1
    DIV [rsp+68h+var_68]
    SUB r9d, eax
    CMP cs:byte_752B01, 0
    MOV r12, rax
    MOV eax, [rsp+68h+var_54]
    LEA esi, [r9+rax]
    JNZ loc_4626E0
loc_462749:
    MOV edx, [r15]
    JMP loc_462708
loc_462750:
    MOV rax, [rsp+68h+var_40]
    XOR rax, fs:28h
    JNZ loc_46276F
loc_462760:
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46276F:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 5, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x50', '0x2'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 236 - str_iconv
```assembly
loc_4C5530:
    PUSH r12
    PUSH rbp
    PUSH rbx
    CMP byte ptr [rdi], 0
    MOV rbx, rdi
    JZ loc_4C5551
loc_4C553C:
    MOV r12, rsi
    MOV rsi, rdx
    MOV rbp, rdx
    MOV rdi, r12
    CALL sub_497A60
    TEST eax, eax
    JNZ loc_4C5570
loc_4C5551:
    MOV rdi, rbx
    CALL ___strdup
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4C55C0
loc_4C5561:
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4C5570:
    MOV rdi, rbp
    MOV rsi, r12
    CALL _iconv_open
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV rbp, rax
    JZ loc_4C55D3
loc_4C5584:
    MOV rdi, rbx
    MOV rsi, rax
    CALL sub_4C5330
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4C55E0
loc_4C5597:
    MOV rdi, rbp
    CALL _iconv_close
    TEST eax, eax
    JNS loc_4C5561
loc_4C55A3:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbp, rax
    MOV rdi, rbx
    CALL _free
    XOR ebx, ebx
    MOV [rbp+0], r12d
    JMP loc_4C5561
loc_4C55C0:
    CALL ___errno_location
    MOV dword ptr [rax], 0Ch
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4C55D3:
    XOR ebx, ebx
    JMP loc_4C5561
loc_4C55E0:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbx, rax
    MOV rdi, rbp
    CALL _iconv_close
    MOV [rbx], r12d
    XOR ebx, ebx
    JMP loc_4C5561
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x7', '0x200'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'String Manipulation', 'inferred_category': 'Utility'}

##### T 236 - str_iconv
```assembly
loc_4E82A0:
    PUSH r12
    PUSH rbp
    PUSH rbx
    CMP byte ptr [rdi], 0
    MOV rbx, rdi
    JZ loc_4E82C1
loc_4E82AC:
    MOV r12, rsi
    MOV rsi, rdx
    MOV rbp, rdx
    MOV rdi, r12
    CALL sub_4B1BC0
    TEST eax, eax
    JNZ loc_4E82E0
loc_4E82C1:
    MOV rdi, rbx
    CALL ___strdup
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4E8330
loc_4E82D1:
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4E82E0:
    MOV rdi, rbp
    MOV rsi, r12
    CALL _iconv_open
    CMP rax, 0FFFFFFFFFFFFFFFFh
    MOV rbp, rax
    JZ loc_4E8343
loc_4E82F4:
    MOV rdi, rbx
    MOV rsi, rax
    CALL sub_4E80A0
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4E8350
loc_4E8307:
    MOV rdi, rbp
    CALL _iconv_close
    TEST eax, eax
    JNS loc_4E82D1
loc_4E8313:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbp, rax
    MOV rdi, rbx
    CALL _free
    XOR ebx, ebx
    MOV [rbp+0], r12d
    JMP loc_4E82D1
loc_4E8330:
    CALL ___errno_location
    MOV dword ptr [rax], 0Ch
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4E8343:
    XOR ebx, ebx
    JMP loc_4E82D1
loc_4E8350:
    CALL ___errno_location
    MOV r12d, [rax]
    MOV rbx, rax
    MOV rdi, rbp
    CALL _iconv_close
    MOV [rbx], r12d
    XOR ebx, ebx
    JMP loc_4E82D1
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x2', '0x7', '0x200'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### Q 237 - fnmatch_pattern_has_wildcards
```assembly
loc_4A34C0:
    MOVZX eax, byte ptr [rdi]
    MOV r8d, esi
    MOV ecx, esi
    AND r8d, 20h
    AND ecx, 8000000h
    AND esi, 2
loc_4A34D5:
    CMP al, 7Dh
    LEA rdx, [rdi+1]
    JA def_4A34DD
loc_4A34DD:
    JMP ds:jpt_4A34DD[rax*8]
loc_4A34E8:
    XOR eax, eax
    RETN 
loc_4A34F0:
    TEST ecx, ecx
    JZ def_4A34DD
loc_4A34F4:
    MOV eax, 1
    RETN 
loc_4A3500:
    MOVZX eax, byte ptr [rdi+1]
    MOV rdi, rdx
    JMP loc_4A34D5
loc_4A3510:
    TEST ecx, ecx
    JNZ def_4A34DD
loc_4A3514:
    XOR eax, eax
    TEST esi, esi
    JNZ loc_4A3523
loc_4A351A:
    XOR eax, eax
    CMP byte ptr [rdi+1], 0
    SETNZ al
loc_4A3523:
    LEA rdi, [rdx+rax]
    MOVZX eax, byte ptr [rdi]
    JMP loc_4A34D5
loc_4A3530:
    TEST r8d, r8d
    JZ def_4A34DD
loc_4A3535:
    MOVZX eax, byte ptr [rdi+1]
    CMP al, 28h
    JZ loc_4A34F4
loc_4A353D:
    MOV rdi, rdx
    JMP loc_4A34D5
```
{'input_parameter_count': 9, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer', 'Integer', 'Integer', 'Integer', 'Integer', 'Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Manipulation', 'inferred_category': 'Utility Function'}

##### T 237 - fnmatch_pattern_has_wildcards
```assembly
loc_4BE3B0:
    MOV edx, esi
    MOV ecx, esi
    MOVZX eax, byte ptr [rdi]
    AND edx, 8000000h
    AND ecx, 2
    AND esi, 20h
    JZ loc_4BE3E8
loc_4BE3C5:
    TEST ecx, ecx
    JZ loc_4BE410
loc_4BE3C9:
    TEST edx, edx
    JNZ loc_4BE587
loc_4BE3D1:
    ADD rdi, 1
    CMP al, 7Dh
    JA def_4BE3DD
loc_4BE3DD:
    JMP ds:jpt_4BE3DD[rax*8]
loc_4BE3E8:
    TEST edx, edx
    JNZ loc_4BE520
loc_4BE3F0:
    TEST ecx, ecx
    JZ loc_4BE460
loc_4BE3F4:
    ADD rdi, 1
    CMP al, 7Dh
    JA def_4BE400
loc_4BE400:
    JMP ds:jpt_4BE400[rax*8]
loc_4BE410:
    TEST edx, edx
    JZ loc_4BE480
loc_4BE414:
    ADD rdi, 1
    CMP al, 2Eh
    JZ loc_4BE43F
loc_4BE41C:
    JLE loc_4BE5C0
loc_4BE422:
    CMP al, 5Bh
    JZ loc_4BE43F
loc_4BE426:
    JLE loc_4BE60F
loc_4BE42C:
    CMP al, 7Bh
    JZ loc_4BE43F
loc_4BE430:
    CMP al, 7Dh
    JZ loc_4BE43F
loc_4BE434:
    MOVZX eax, byte ptr [rdi]
    ADD rdi, 1
    CMP al, 2Eh
    JNZ loc_4BE41C
loc_4BE43F:
    MOV eax, 1
    RETN 
loc_4BE448:
    CMP byte ptr [rdi+1], 0
    SETNZ dil
    MOVZX edi, dil
    ADD rdi, rdx
    MOVZX eax, byte ptr [rdi]
    NOP word ptr [rax+rax+00h]
loc_4BE460:
    CMP al, 7Dh
    LEA rdx, [rdi+1]
    JA def_4BE468
loc_4BE468:
    JMP ds:jpt_4BE468[rax*8]
loc_4BE470:
    MOVZX eax, byte ptr [rdi+1]
    CMP al, 28h
    JZ loc_4BE43F
loc_4BE478:
    MOV rdi, rdx
    NOP dword ptr [rax+rax+00h]
loc_4BE480:
    CMP al, 7Dh
    LEA rdx, [rdi+1]
    JA def_4BE488
loc_4BE488:
    JMP ds:jpt_4BE488[rax*8]
loc_4BE48F:
    CMP al, 2Ah
    JG loc_4BE550
loc_4BE497:
    CMP al, 28h
    JGE loc_4BE43F
loc_4BE49B:
    TEST al, al
    JNZ loc_4BE550
loc_4BE4A3:
    XOR eax, eax
    RETN 
loc_4BE4B0:
    MOVZX eax, byte ptr [rdi]
    JMP loc_4BE3F4
loc_4BE4C0:
    MOVZX eax, byte ptr [rdi+1]
    MOV rdi, rdx
    JMP loc_4BE460
loc_4BE4D0:
    MOVZX eax, byte ptr [rdi]
    JMP loc_4BE3D1
loc_4BE4E0:
    MOVZX eax, byte ptr [rdi+1]
    MOV rdi, rdx
    JMP loc_4BE480
loc_4BE4F0:
    CMP byte ptr [rdi+1], 0
    SETNZ dil
    MOVZX edi, dil
    ADD rdi, rdx
    MOVZX eax, byte ptr [rdi]
    JMP loc_4BE480
loc_4BE510:
    MOVZX eax, byte ptr [rdi]
    CMP al, 28h
    JNZ loc_4BE3D1
loc_4BE51B:
    JMP loc_4BE43F
loc_4BE520:
    ADD rdi, 1
    CMP al, 2Eh
    JZ loc_4BE43F
loc_4BE52C:
    JLE loc_4BE48F
loc_4BE532:
    CMP al, 5Bh
    JZ loc_4BE43F
loc_4BE53A:
    JLE loc_4BE5F0
loc_4BE540:
    CMP al, 7Bh
    JZ loc_4BE43F
loc_4BE548:
    CMP al, 7Dh
    JZ loc_4BE43F
loc_4BE550:
    MOVZX eax, byte ptr [rdi]
    ADD rdi, 1
    CMP al, 2Eh
    JNZ loc_4BE52C
loc_4BE55B:
    JMP loc_4BE43F
loc_4BE560:
    CMP al, 2Ah
    JG loc_4BE629
loc_4BE568:
    CMP al, 28h
    JGE loc_4BE43F
loc_4BE570:
    TEST al, al
    JZ loc_4BE4A3
loc_4BE578:
    CMP al, 21h
    JNZ loc_4BE5AF
loc_4BE57C:
    MOVZX eax, byte ptr [rdi]
    CMP al, 28h
    JZ loc_4BE43F
loc_4BE587:
    ADD rdi, 1
    CMP al, 2Eh
    JZ loc_4BE43F
loc_4BE593:
    JLE loc_4BE560
loc_4BE595:
    CMP al, 5Bh
    JZ loc_4BE43F
loc_4BE59D:
    JLE loc_4BE5FD
loc_4BE59F:
    CMP al, 7Bh
    JZ loc_4BE43F
loc_4BE5A7:
    CMP al, 7Dh
    JZ loc_4BE43F
loc_4BE5AF:
    MOVZX eax, byte ptr [rdi]
    ADD rdi, 1
    CMP al, 2Eh
    JNZ loc_4BE593
loc_4BE5BA:
    JMP loc_4BE43F
loc_4BE5C0:
    CMP al, 2Ah
    JG loc_4BE620
loc_4BE5C4:
    CMP al, 28h
    JGE loc_4BE43F
loc_4BE5CC:
    TEST al, al
    JZ loc_4BE4A3
loc_4BE5D4:
    CMP al, 21h
    JNZ loc_4BE434
loc_4BE5DC:
    MOVZX eax, byte ptr [rdi]
    CMP al, 28h
    JNZ loc_4BE414
loc_4BE5E7:
    JMP loc_4BE43F
loc_4BE5F0:
    CMP al, 3Fh
    JNZ loc_4BE550
loc_4BE5F8:
    JMP loc_4BE43F
loc_4BE5FD:
    CMP al, 3Fh
    JZ loc_4BE43F
loc_4BE605:
    CMP al, 40h
    JZ loc_4BE57C
loc_4BE60D:
    JMP loc_4BE5AF
loc_4BE60F:
    CMP al, 3Fh
    JZ loc_4BE43F
loc_4BE617:
    CMP al, 40h
    JZ loc_4BE5DC
loc_4BE61B:
    JMP loc_4BE434
loc_4BE620:
    CMP al, 2Bh
    JZ loc_4BE5DC
loc_4BE624:
    JMP loc_4BE434
loc_4BE629:
    CMP al, 2Bh
    JZ loc_4BE57C
loc_4BE631:
    JMP loc_4BE5AF
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x42', '0x41', '0x43', '0xFFFFFFFD'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Logic'}

##### Q 238 - _usage_cp
```assembly
loc_422C70:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_422CC6
loc_422C9A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_422CBF:
    MOV edi, ebx
    CALL _exit
loc_422CC6:
    XOR edi, edi
    MOV esi, offset aUsageSOptionTS
    CALL _dcgettext
    MOV r8, rbp
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aCopySourceToDe
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aMandatoryArgum
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aAArchiveSameAs
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aFForceIfAnExis
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aLLinkHardLinkF
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aNNoClobberDoNo
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aPSameAsPreserv
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aNoPreserveAttr
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aRRRecursiveCop
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aSparseWhenCont
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aSSymbolicLinkM
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aUUpdateCopyOnl
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aZSetSelinuxSec
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aByDefaultSpars
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheBackupSuffi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aNoneOffNeverMa
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aAsASpecialCase
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, (offset aBcp+1)
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_423024
loc_423018:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_423030
loc_423024:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_423018
loc_423030:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4230FA
loc_423049:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_423092
loc_423078:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_42317E
loc_423092:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, (offset aBcp+1)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, (offset aBcp+1)
    JZ loc_423169
loc_4230CF:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_422CBF
loc_4230FA:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_42313F
loc_423129:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_423179
loc_42313F:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, (offset aBcp+1)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_423169:
    MOV ebp, (offset aBcp+1)
    MOV r12d, 4C7B0Dh
    JMP loc_4230CF
loc_423179:
    MOV ebp, (offset aBcp+1)
loc_42317E:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, (offset aBcp+1)
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_423092
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6BB808', '0x6BB7D8', '0x0', '0x78'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 8, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Validation'}

##### T 238 - _usage_cp
```assembly
loc_425130:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_425186
loc_42515A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_42517F:
    MOV edi, ebx
    CALL _exit
loc_425186:
    XOR edi, edi
    MOV esi, offset aUsageSOptionTS
    CALL _dcgettext
    MOV r8, rbp
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aCopySourceToDe
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aMandatoryArgum
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aAArchiveSameAs
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aFForceIfAnExis
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aLLinkHardLinkF
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aNNoClobberDoNo
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aPSameAsPreserv
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aNoPreserveAttr
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aRRRecursiveCop
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aSparseWhenCont
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aSSymbolicLinkM
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aUUpdateCopyOnl
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aZSetSelinuxSec
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aByDefaultSpars
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheBackupSuffi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aNoneOffNeverMa
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aAsASpecialCase
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_50CC1F+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_50CC1F+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, (offset aBcp+1)
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_4254E4
loc_4254D8:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_4254F0
loc_4254E4:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_4254D8
loc_4254F0:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4255BA
loc_425509:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_425552
loc_425538:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_42563E
loc_425552:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, (offset aBcp+1)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, (offset aBcp+1)
    JZ loc_425629
loc_42558F:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_42517F
loc_4255BA:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4255FF
loc_4255E9:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_425639
loc_4255FF:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, (offset aBcp+1)
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_425629:
    MOV ebp, (offset aBcp+1)
    MOV r12d, 4EA7ADh
    JMP loc_42558F
loc_425639:
    MOV ebp, (offset aBcp+1)
loc_42563E:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, (offset aBcp+1)
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_425552
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6', '0x10', '0x78'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Security/Validation'}

##### Q 239 - extent_scan_init
```assembly
loc_428DF0:
    MOV [rsi], edi
    MOV qword ptr [rsi+18h], 0
    MOV qword ptr [rsi+28h], 0
    MOV qword ptr [rsi+8], 0
    MOV byte ptr [rsi+20h], 0
    MOV byte ptr [rsi+21h], 0
    MOV dword ptr [rsi+10h], 1
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x28', '0x800', '0x200100', '0x18'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Binary Search or Similar', 'inferred_category': 'Search'}

##### T 239 - extent_scan_init
```assembly
loc_42B4E0:
    MOV [rsi], edi
    MOV qword ptr [rsi+18h], 0
    MOV qword ptr [rsi+28h], 0
    MOV qword ptr [rsi+8], 0
    MOV byte ptr [rsi+20h], 0
    MOV byte ptr [rsi+21h], 0
    MOV dword ptr [rsi+10h], 1
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x18', '0x28', '0x20', '0x5', '0x800', '0x200100', '0x4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 13, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Sorting/Merging', 'inferred_category': 'Utility'}

##### Q 240 - ino_map_insert
```assembly
loc_4A9770:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 18h
    MOV rbx, [rdi+10h]
    TEST rbx, rbx
    JZ loc_4A97B0
loc_4A9782:
    CMP [rbx], rsi
    JZ loc_4A9800
loc_4A9787:
    MOV rdi, [rbp+0]
    MOV [rbx], rsi
    MOV rsi, rbx
    CALL sub_4A7F20
    TEST rax, rax
    JZ loc_4A97D0
loc_4A979B:
    CMP rbx, rax
    JZ loc_4A97E0
loc_4A97A0:
    MOV rax, [rax+8]
    MOV [rbx+8], rax
loc_4A97A8:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_4A97B0:
    MOV edi, 10h
    MOV [rsp+28h+var_20], rsi
    CALL _malloc
    TEST rax, rax
    MOV rbx, rax
    MOV [rbp+10h], rax
    MOV rsi, [rsp+28h+var_20]
    JNZ loc_4A9787
loc_4A97D0:
    ADD rsp, 18h
    MOV rax, 0FFFFFFFFFFFFFFFFh
    POP rbx
    POP rbp
    RETN 
loc_4A97E0:
    MOV rax, [rbp+8]
    MOV qword ptr [rbp+10h], 0
    LEA rdx, [rax+1]
    MOV [rbp+8], rdx
    MOV [rbx+8], rax
    JMP loc_4A97A8
loc_4A9800:
    MOV rax, [rbx+8]
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x34', '0x10', '0x8', '0x7F', '0x4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bit Manipulation and Data Parsing', 'inferred_category': 'Utility Function'}

##### T 240 - ino_map_insert
```assembly
loc_4C5700:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 18h
    MOV rbx, [rdi+10h]
    TEST rbx, rbx
    JZ loc_4C5740
loc_4C5712:
    CMP [rbx], rsi
    JZ loc_4C5790
loc_4C5717:
    MOV rdi, [rbp+0]
    MOV [rbx], rsi
    MOV rsi, rbx
    CALL sub_4C3760
    TEST rax, rax
    JZ loc_4C5760
loc_4C572B:
    CMP rbx, rax
    JZ loc_4C5770
loc_4C5730:
    MOV rax, [rax+8]
    MOV [rbx+8], rax
loc_4C5738:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_4C5740:
    MOV edi, 10h
    MOV [rsp+28h+var_20], rsi
    CALL _malloc
    TEST rax, rax
    MOV rbx, rax
    MOV [rbp+10h], rax
    MOV rsi, [rsp+28h+var_20]
    JNZ loc_4C5717
loc_4C5760:
    ADD rsp, 18h
    MOV rax, 0FFFFFFFFFFFFFFFFh
    POP rbx
    POP rbp
    RETN 
loc_4C5770:
    MOV rax, [rbp+8]
    MOV qword ptr [rbp+10h], 0
    LEA rdx, [rax+1]
    MOV [rbp+8], rdx
    MOV [rbx+8], rax
    JMP loc_4C5738
loc_4C5790:
    MOV rax, [rbx+8]
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Loop'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['7Fh', '4'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Base64 Decoding or similar Bit-wise Operations', 'inferred_category': 'Utility Functions'}

##### Q 241 - _usage_chown
```assembly
loc_4202C0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_420316
loc_4202EA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_42030F:
    MOV edi, ebx
    CALL _exit
loc_420316:
    XOR edi, edi
    MOV esi, offset aUsageSOptionOw
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aChangeTheOwner
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aCChangesLikeVe
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aDereferenceAff
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aUsefulOnlyOnSy
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aFromCurrentOwn
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aNoPreserveRoot
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aReferenceRfile_2
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aRRecursiveOper
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTheFollowingOp
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aOwnerIsUnchang
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:qword_7355D8
    MOV edx, 5
    MOV esi, offset aExamplesSRootU
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rsi, rax
    MOV edi, 1
    MOV rcx, rbp
    MOV rdx, rbp
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aChown
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_4205AC
loc_4205A0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_4205B8
loc_4205AC:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_4205A0
loc_4205B8:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_420682
loc_4205D1:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_42061A
loc_420600:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_420706
loc_42061A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aChown
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aChown
    JZ loc_4206F1
loc_420657:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_42030F
loc_420682:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_4206C7
loc_4206B1:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_420701
loc_4206C7:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aChown
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_4206F1:
    MOV ebp, offset aChown
    MOV r12d, 4C7B0Dh
    JMP loc_420657
loc_420701:
    MOV ebp, offset aChown
loc_420706:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aChown
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_42061A
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Pointer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'MemoryAccess'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 24, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Comparison', 'inferred_category': 'Algorithm'}

##### T 241 - _usage_chown
```assembly
loc_422910:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_758598
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_422966
loc_42293A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_42295F:
    MOV edi, ebx
    CALL _exit
loc_422966:
    XOR edi, edi
    MOV esi, offset aUsageSOptionOw
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aChangeTheOwner
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aCChangesLikeVe
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aDereferenceAff
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aUsefulOnlyOnSy
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aFromCurrentOwn
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aNoPreserveRoot
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aReferenceRfile_2
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aRRecursiveOper
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTheFollowingOp
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aOwnerIsUnchang
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:qword_758598
    MOV edx, 5
    MOV esi, offset aExamplesSRootU
    XOR edi, edi
    CALL _dcgettext
    MOV r8, rbp
    MOV rsi, rax
    MOV edi, 1
    MOV rcx, rbp
    MOV rdx, rbp
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], (offset asc_50CC1F+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_50CC1F+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aChown
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_422BFC
loc_422BF0:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_422C08
loc_422BFC:
    MOV ecx, 6
    MOV rsi, r8
    REPE 
    JNZ loc_422BF0
loc_422C08:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_422CD2
loc_422C21:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_422C6A
loc_422C50:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_422D56
loc_422C6A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aChown
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aChown
    JZ loc_422D41
loc_422CA7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_42295F
loc_422CD2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4EA7DF
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_422D17
loc_422D01:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_422D51
loc_422D17:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aChown
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_422D41:
    MOV ebp, offset aChown
    MOV r12d, 4EA7ADh
    JMP loc_422CA7
loc_422D51:
    MOV ebp, offset aChown
loc_422D56:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aChown
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_422C6A
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Size'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['SimdOperations', 'MemoryAccess', 'Comparison', 'Arithmetic'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': True, 'presence_of_notable_integer_constants': ['0x10', '0x2', '0xE'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 5, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': True, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Checksum or Hashing', 'inferred_category': 'Utility'}

##### Q 242 - cycle_check
```assembly
loc_4C25C0:
    CMP dword ptr [rdi+18h], 95F616h
    JNZ loc_4C2627
loc_4C25C9:
    MOV rdx, [rdi+10h]
    TEST rdx, rdx
    JZ loc_4C25F0
loc_4C25D2:
    MOV rcx, [rsi+8]
    CMP rcx, [rdi]
    JZ loc_4C2610
loc_4C25DB:
    LEA r8, [rdx+1]
    XOR eax, eax
    TEST rdx, r8
    MOV [rdi+10h], r8
    JZ loc_4C2620
loc_4C25EA:
    REP 
loc_4C25F0:
    MOV rcx, [rsi+8]
    MOV qword ptr [rdi+10h], 1
loc_4C25FC:
    MOV rax, [rsi]
    MOV [rdi], rcx
    MOV [rdi+8], rax
    XOR eax, eax
    RETN 
loc_4C2610:
    MOV rax, [rdi+8]
    CMP [rsi], rax
    JNZ loc_4C25DB
loc_4C2619:
    MOV eax, 1
    RETN 
loc_4C2620:
    TEST r8, r8
    JZ loc_4C2619
loc_4C2625:
    JMP loc_4C25FC
loc_4C2627:
    PUSH rax
    MOV ecx, offset aCycleCheck
    MOV edx, 3Ch
    MOV esi, offset aLibCycleCheckC
    MOV edi, offset aStateMagic9827
    CALL ___assert_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 1, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x148', '0x2460', '0x10', '0xC0A', '0xFB', '0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 12, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### T 242 - cycle_check
```assembly
loc_4E5260:
    CMP dword ptr [rdi+18h], 95F616h
    JNZ loc_4E52C7
loc_4E5269:
    MOV rdx, [rdi+10h]
    TEST rdx, rdx
    JZ loc_4E5290
loc_4E5272:
    MOV rcx, [rsi+8]
    CMP rcx, [rdi]
    JZ loc_4E52B0
loc_4E527B:
    LEA r8, [rdx+1]
    XOR eax, eax
    TEST rdx, r8
    MOV [rdi+10h], r8
    JZ loc_4E52C0
loc_4E528A:
    REP 
loc_4E5290:
    MOV rcx, [rsi+8]
    MOV qword ptr [rdi+10h], 1
loc_4E529C:
    MOV rax, [rsi]
    MOV [rdi], rcx
    MOV [rdi+8], rax
    XOR eax, eax
    RETN 
loc_4E52B0:
    MOV rax, [rdi+8]
    CMP [rsi], rax
    JNZ loc_4E527B
loc_4E52B9:
    MOV eax, 1
    RETN 
loc_4E52C0:
    TEST r8, r8
    JZ loc_4E52B9
loc_4E52C5:
    JMP loc_4E529C
loc_4E52C7:
    PUSH rax
    MOV ecx, offset aCycleCheck
    MOV edx, 3Ch
    MOV esi, offset aLibCycleCheckC
    MOV edi, offset aStateMagic9827
    CALL ___assert_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x148', '0x8', '0x2460', '0xFB', '0xA'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 6, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Array Processing with Conditionals', 'inferred_category': 'Control Flow'}

##### Q 243 - init_tokenbuffer
```assembly
loc_4B6770:
    MOV qword ptr [rdi], 0
    MOV qword ptr [rdi+8], 0
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Void', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'State Machine', 'inferred_category': 'Control Flow'}

##### T 243 - init_tokenbuffer
```assembly
loc_4D64F0:
    MOV qword ptr [rdi], 0
    MOV qword ptr [rdi+8], 0
    RETN 
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'None', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'ControlFlow/Loop'}

##### Q 244 - reset_fields
```assembly
loc_42CD80:
    SUB rsp, 8
    MOV rdi, cs:base
    MOV cs:qword_720E20, 0
    MOV cs:qword_720E38, 0
    CALL _free
    MOV cs:base, 0
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Word', 'Word'], 'return_value_type': 'Word', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x31', '0x1F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Utility/Helper'}

##### T 244 - reset_fields
```assembly
loc_42FB50:
    SUB rsp, 8
    MOV rdi, cs:base
    MOV cs:qword_743E00, 0
    MOV cs:qword_743E18, 0
    CALL _free
    MOV cs:base, 0
    ADD rsp, 8
    RETN 
```
{'input_parameter_count': 2, 'input_parameter_types': ['Integer', 'Integer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['Arithmetic', 'Comparison', 'DataMovement'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x31', '0x1F'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 4, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Bitwise Manipulation', 'inferred_category': 'Utility/Helper'}

##### Q 245 - announce_mkdir
```assembly
loc_43DCD0:

loc_43DD10:
    CMP byte ptr [rsi+2Eh], 0
    JNZ loc_43DD20
loc_43DD16:
    REP 
loc_43DD20:
    JMP sub_43DCD0
```
{'input_parameter_count': 1, 'input_parameter_types': ['String'], 'return_value_type': 'FileHandle', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 3, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'File Handling', 'inferred_category': 'Interfacing/Wrapper'}

##### T 245 - announce_mkdir
```assembly
loc_443D70:
    CMP byte ptr [rsi+2Eh], 0
    JNZ loc_443D80
loc_443D76:
    REP 
loc_443D80:
    PUSH rbx
    MOV rsi, rdi
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aCreatingDirect
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbx
    MOV rdi, cs:stdout
    MOV rsi, rax
    POP rbx
    XOR eax, eax
    JMP sub_444EE0
```
{'input_parameter_count': 1, 'input_parameter_types': ['String'], 'return_value_type': 'FileHandle', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': True, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': True, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'File I/O'}

##### Q 246 - single_binary_main_printf
```assembly
loc_4627E0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 188h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+1B8h+var_40], rax
    XOR eax, eax
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV edi, offset aPosixlyCorrect
    MOV cs:dword_72FD64, 0
    CALL _getenv
    TEST rax, rax
    SETNZ cs:byte_72FD60
    CMP r12d, 2
    JZ loc_462F3B
loc_46286C:
    CMP r12d, 1
    JLE loc_462FA3
loc_462876:
    MOV rax, [rbp+8]
loc_46287A:
    CMP byte ptr [rax], 2Dh
    JNZ loc_462889
loc_46287F:
    CMP byte ptr [rax+1], 2Dh
    JZ loc_462F12
loc_462889:
    MOV [rsp+1B8h+src], rax
loc_46288E:
    LEA eax, [r12-2]
    MOV r14, [rsp+1B8h+src]
    MOV [rsp+1B8h+var_16C], eax
    LEA rax, [rbp+10h]
    MOV [rsp+1B8h+var_168], rax
    MOVZX eax, byte ptr [r14]
    TEST al, al
    JZ loc_4629A8
loc_4628B1:
    MOV rsi, [rsp+1B8h+var_168]
    MOV r13d, [rsp+1B8h+var_16C]
    MOV [rsp+1B8h+var_170], 0
    MOV [rsp+1B8h+var_174], 0
    MOV [rsp+1B8h+var_198], rsi
    JMP loc_4628FC
loc_4628D8:
    CMP al, 5Ch
    JNZ loc_4629B8
loc_4628E0:
    XOR esi, esi
    MOV rdi, r14
    CALL sub_461DD0
    MOVSXD rbp, eax
    ADD rbp, r14
loc_4628F0:
    MOVZX eax, byte ptr [rbp+1]
    LEA r14, [rbp+1]
    TEST al, al
    JZ loc_462969
loc_4628FC:
    CMP al, 25h
    JNZ loc_4628D8
loc_462900:
    MOVZX ebx, byte ptr [r14+1]
    LEA rbp, [r14+1]
    CMP bl, 25h
    JZ loc_4629E0
loc_462912:
    CMP bl, 62h
    JZ loc_462E00
loc_46291B:
    CMP bl, 71h
    JNZ loc_462A08
loc_462924:
    TEST r13d, r13d
    JZ loc_4628F0
loc_462929:
    MOV r14, [rsp+1B8h+var_198]
    MOV rbx, cs:stdout
    MOV edi, 3
    SUB r13d, 1
    MOV rsi, [r14]
    CALL sub_4B5100
    MOV rsi, rbx
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rax, r14
    LEA r14, [rbp+1]
    ADD rax, 8
    MOV [rsp+1B8h+var_198], rax
    MOVZX eax, byte ptr [rbp+1]
    TEST al, al
    JNZ loc_4628FC
loc_462969:
    MOV eax, [rsp+1B8h+var_16C]
    MOV rsi, [rsp+1B8h+var_168]
    SUB eax, r13d
    MOVSXD rdx, eax
    TEST eax, eax
    LEA rsi, [rsi+rdx*8]
    MOV [rsp+1B8h+var_168], rsi
    JLE loc_462EA7
loc_462989:
    TEST r13d, r13d
    JLE loc_462EA7
loc_462992:
    MOV r14, [rsp+1B8h+src]
    MOV [rsp+1B8h+var_16C], r13d
    MOVZX eax, byte ptr [r14]
    TEST al, al
    JNZ loc_4628B1
loc_4629A8:
    MOV r15d, [rsp+1B8h+var_16C]
    JMP loc_462EAA
loc_4629B8:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_462E7B
loc_4629CD:
    LEA rcx, [rdx+1]
    MOV rbp, r14
    MOV [rdi+28h], rcx
    MOV [rdx], al
    JMP loc_4628F0
loc_4629E0:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_462E98
loc_4629F5:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 25h
    JMP loc_4628F0
loc_462A08:
    LEA rdi, [rsp+1B8h+var_148]
    XOR eax, eax
    MOV ecx, 20h
    MOV rdx, r14
    XOR esi, esi
    XOR r10d, r10d
    REP 
    LEA eax, [rbx-20h]
    NEG rdx
    XOR r8d, r8d
    XOR r9d, r9d
    MOV [rsp+1B8h+var_F0], 1
    MOV [rsp+1B8h+var_D0], 1
    CMP al, 29h
    MOV [rsp+1B8h+var_D3], 1
    MOV [rsp+1B8h+var_D5], 1
    MOV [rsp+1B8h+var_D9], 1
    MOV [rsp+1B8h+var_DF], 1
    MOV ecx, 1
    MOV [rsp+1B8h+var_101], 1
    MOV [rsp+1B8h+var_E1], 1
    MOV edi, 1
    MOV [rsp+1B8h+var_102], 1
    MOV [rsp+1B8h+var_E2], 1
    MOV r11d, 1
    MOV [rsp+1B8h+var_103], 1
    MOV [rsp+1B8h+var_E3], 1
    MOV r15d, 1
    MOV [rsp+1B8h+var_E4], 1
    MOV [rsp+1B8h+var_E5], 1
    LEA r12, [rbp+rdx+0]
    MOV [rsp+1B8h+var_107], 1
    MOV [rsp+1B8h+var_E7], 1
    MOV [rsp+1B8h+var_175], 0
    MOV [rsp+1B8h+var_176], 1
    MOV [rsp+1B8h+var_177], 0
    MOV [rsp+1B8h+var_178], 1
    MOV [rsp+1B8h+var_179], 0
    MOV [rsp+1B8h+var_17A], 1
    MOV [rsp+1B8h+var_17B], 0
    MOV [rsp+1B8h+var_17C], 1
    MOV [rsp+1B8h+var_17D], 0
    MOV [rsp+1B8h+var_17F], 1
    MOV [rsp+1B8h+var_180], 0
    MOV byte ptr [rsp+1B8h+var_1A8], 1
    MOV byte ptr [rsp+1B8h+var_1B8], 0
    MOV byte ptr [rsp+1B8h+nptr], 1
    MOV [rsp+1B8h+var_181], 1
    MOV [rsp+1B8h+var_17E], 0
    JA def_462B23
loc_462B1D:
    NOP dword ptr [rax]
loc_462B20:
    MOVZX eax, al
    JMP ds:jpt_462B23[rax*8]
loc_462B30:
    MOV esi, 1
    XOR ecx, ecx
    MOV r8d, 1
    XOR edi, edi
loc_462B3F:
    ADD rbp, 1
    MOVZX ebx, byte ptr [rbp+0]
loc_462B47:
    LEA eax, [rbx-20h]
    LEA r12, [rbp+rdx+0]
    CMP al, 29h
    JBE loc_462B20
loc_462B53:
    TEST r9b, r9b
    JNZ loc_463564
loc_462B5C:
    CMP [rsp+1B8h+var_17E], 0
    JZ loc_462B6B
loc_462B63:
    MOV [rsp+1B8h+var_D0], r11b
loc_462B6B:
    TEST r8b, r8b
    JZ loc_462B78
loc_462B70:
    MOV [rsp+1B8h+var_D5], dil
loc_462B78:
    TEST r10b, r10b
    JZ loc_462B89
loc_462B7D:
    MOVZX eax, [rsp+1B8h+var_181]
    MOV [rsp+1B8h+var_D9], al
loc_462B89:
    CMP byte ptr [rsp+1B8h+var_1B8], 0
    JZ loc_462B9B
loc_462B8F:
    MOVZX eax, byte ptr [rsp+1B8h+nptr]
    MOV [rsp+1B8h+var_103], al
loc_462B9B:
    CMP [rsp+1B8h+var_180], 0
    JZ loc_462BAE
loc_462BA2:
    MOVZX eax, byte ptr [rsp+1B8h+var_1A8]
    MOV [rsp+1B8h+var_E3], al
loc_462BAE:
    TEST sil, sil
    JZ loc_462BBA
loc_462BB3:
    MOV [rsp+1B8h+var_E5], cl
loc_462BBA:
    CMP [rsp+1B8h+var_17D], 0
    JZ loc_462BCD
loc_462BC1:
    MOVZX eax, [rsp+1B8h+var_17F]
    MOV [rsp+1B8h+var_107], al
loc_462BCD:
    CMP [rsp+1B8h+var_17B], 0
    JZ loc_462BE0
loc_462BD4:
    MOVZX eax, [rsp+1B8h+var_17C]
    MOV [rsp+1B8h+var_E7], al
loc_462BE0:
    CMP [rsp+1B8h+var_179], 0
    JZ loc_462BF3
loc_462BE7:
    MOVZX eax, [rsp+1B8h+var_17A]
    MOV [rsp+1B8h+var_D3], al
loc_462BF3:
    CMP [rsp+1B8h+var_177], 0
    JZ loc_462C06
loc_462BFA:
    MOVZX eax, [rsp+1B8h+var_178]
    MOV [rsp+1B8h+var_DF], al
loc_462C06:
    CMP [rsp+1B8h+var_175], 0
    JZ loc_462C19
loc_462C0D:
    MOVZX eax, [rsp+1B8h+var_176]
    MOV [rsp+1B8h+var_E4], al
loc_462C19:
    CMP bl, 2Ah
    JZ loc_4631C3
loc_462C22:
    MOVSX eax, bl
    MOV r15, rbp
    SUB eax, 30h
    CMP eax, 9
    JA loc_462C46
loc_462C30:
    ADD r15, 1
    MOVSX eax, byte ptr [r15]
    LEA r12, [r15+rdx]
    MOV ebx, eax
    SUB eax, 30h
    CMP eax, 9
    JBE loc_462C30
loc_462C46:
    MOV [rsp+1B8h+var_180], 0
loc_462C4B:
    CMP bl, 2Eh
    MOV [rsp+1B8h+var_181], 0
    JZ loc_4631F3
loc_462C59:
    LEA eax, [rbx-4Ch]
    CMP al, 2Eh
    JA loc_462C83
loc_462C60:
    MOV rdx, 410150000001h
    BT rdx, rax
    JNB loc_462C83
loc_462C70:
    ADD r15, 1
    MOVZX ebx, byte ptr [r15]
    LEA eax, [rbx-4Ch]
    CMP al, 2Eh
    JBE loc_463170
loc_462C83:
    MOVZX eax, bl
    CMP [rsp+rax+1B8h+var_148], 0
    JZ loc_463188
loc_462C91:
    TEST r13d, r13d
    MOV r8d, 4E9B80h
    JZ loc_462CB1
loc_462C9C:
    MOV rax, [rsp+1B8h+var_198]
    SUB r13d, 1
    MOV r8, [rax]
    ADD rax, 8
    MOV [rsp+1B8h+var_198], rax
loc_462CB1:
    LEA ecx, [rbx-41h]
    CMP cl, 37h
    JA loc_4631B8
loc_462CBD:
    MOV eax, 1
    MOV rsi, 90410800800000h
    SHL rax, cl
    TEST rax, rsi
    JNZ loc_46324D
loc_462CD8:
    MOV rsi, 7100000071h
    AND rax, rsi
    CMP rax, 1
    SBB rcx, rcx
    ADD rcx, 1
    TEST rax, rax
    MOV eax, 4CE671h
    CMOVZ rax, r14
    MOV qword ptr [rsp+1B8h+var_1B8], rax
loc_462D00:
    LEA rdi, [r12+rcx+2]
    MOV [rsp+1B8h+nptr], r8
    MOV qword ptr [rsp+1B8h+var_1A8], rcx
    CALL sub_4BB0B0
    MOV rdx, r12
    MOV rsi, r14
    MOV rdi, rax
    MOV rbp, rax
    CALL _mempcpy
    MOV rcx, qword ptr [rsp+1B8h+var_1A8]
    MOV rsi, qword ptr [rsp+1B8h+var_1B8]
    MOV rdi, rax
    MOV rdx, rcx
    CALL _mempcpy
    MOV [rax], bl
    SUB ebx, 41h
    MOV byte ptr [rax+1], 0
    CMP bl, 37h
    JA def_462D53
loc_462D4B:
    MOVZX ebx, bl
    MOV r8, [rsp+1B8h+nptr]
    JMP ds:jpt_462D53[rbx*8]
loc_462D60:
    ADD rbp, 1
    MOV [rsp+1B8h+var_17B], 1
    MOV [rsp+1B8h+var_17C], 0
    MOV [rsp+1B8h+var_17D], 1
    MOV [rsp+1B8h+var_17F], 0
    MOV esi, 1
    XOR ecx, ecx
    MOV [rsp+1B8h+var_180], 1
    MOV byte ptr [rsp+1B8h+var_1A8], 0
    MOV byte ptr [rsp+1B8h+var_1B8], 1
    MOV byte ptr [rsp+1B8h+nptr], 0
    MOV r10d, 1
    MOV [rsp+1B8h+var_181], 0
    MOV r8d, 1
    XOR edi, edi
    MOV [rsp+1B8h+var_17E], 1
    XOR r11d, r11d
    MOV r9d, 1
    XOR r15d, r15d
    MOVZX ebx, byte ptr [rbp+0]
    JMP loc_462B47
loc_462DC0:
    ADD rbp, 1
    MOV [rsp+1B8h+var_175], 1
    MOV [rsp+1B8h+var_176], 0
    MOV [rsp+1B8h+var_177], 1
    MOV [rsp+1B8h+var_178], 0
    MOV esi, 1
    MOV [rsp+1B8h+var_179], 1
    MOV [rsp+1B8h+var_17A], 0
    XOR ecx, ecx
    MOV r8d, 1
    XOR edi, edi
    MOVZX ebx, byte ptr [rbp+0]
    JMP loc_462B47
loc_462E00:
    TEST r13d, r13d
    JZ loc_4628F0
loc_462E09:
    MOV rax, [rsp+1B8h+var_198]
    MOV rbx, [rax]
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JNZ loc_462E4A
loc_462E18:
    JMP loc_462E6C
loc_462E20:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_462E8B
loc_462E31:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
    MOV rax, rbx
loc_462E3E:
    LEA rbx, [rax+1]
    MOVZX eax, byte ptr [rax+1]
    TEST al, al
    JZ loc_462E6C
loc_462E4A:
    CMP al, 5Ch
    JNZ loc_462E20
loc_462E4E:
    MOV rdi, rbx
    MOV esi, 1
    CALL sub_461DD0
    CDQE 
    ADD rax, rbx
    LEA rbx, [rax+1]
    MOVZX eax, byte ptr [rax+1]
    TEST al, al
    JNZ loc_462E4A
loc_462E6C:
    ADD [rsp+1B8h+var_198], 8
    SUB r13d, 1
    JMP loc_4628F0
loc_462E7B:
    MOVZX esi, al
    MOV rbp, r14
    CALL ___overflow
    JMP loc_4628F0
loc_462E8B:
    MOVZX esi, al
    CALL ___overflow
    MOV rax, rbx
    JMP loc_462E3E
loc_462E98:
    MOV esi, 25h
    CALL ___overflow
    JMP loc_4628F0
loc_462EA7:
    MOV r15d, r13d
loc_462EAA:
    TEST r15d, r15d
    JZ loc_462EE1
loc_462EAF:
    MOV rax, [rsp+1B8h+var_168]
    MOV rdi, [rax]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aWarningIgnorin_3
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_462EE1:
    MOV ebx, cs:dword_72FD64
loc_462EE7:
    MOV rsi, [rsp+1B8h+var_40]
    XOR rsi, fs:28h
    MOV eax, ebx
    JNZ loc_462FCC
loc_462F00:
    ADD rsp, 188h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_462F12:
    CMP byte ptr [rax+2], 0
    JNZ loc_462889
loc_462F1C:
    SUB r12d, 1
    LEA rax, [rbp+8]
    CMP r12d, 1
    JZ loc_462FA3
loc_462F2A:
    MOV rsi, [rbp+10h]
    MOV rbp, rax
    MOV [rsp+1B8h+src], rsi
    JMP loc_46288E
loc_462F3B:
    MOV rax, [rbp+8]
    MOV edi, offset aHelp
    MOV ecx, 7
    MOV rsi, rax
    REPE 
    JZ loc_463571
loc_462F54:
    MOV edi, offset aVersion
    MOV ecx, 0Ah
    MOV rsi, rax
    REPE 
    SETNBE bl
    SETB dl
    SUB ebx, edx
    MOVSX ebx, bl
    TEST ebx, ebx
    JNZ loc_46287A
loc_462F76:
    MOV rcx, cs:off_720148
    MOV rdi, cs:stdout
    XOR r9d, r9d
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4C7B3F
    MOV esi, offset aPrintf
    XOR eax, eax
    CALL sub_4BAF40
    JMP loc_462EE7
loc_462FA3:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR edi, edi
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    CALL _error
    MOV edi, 1
    CALL sub_462420
loc_462FCC:
    CALL ___stack_chk_fail
loc_462FD8:
    CMP [rsp+1B8h+var_180], 0
    JNZ loc_46338E
loc_462FE3:
    CMP [rsp+1B8h+var_181], 0
    JNZ loc_4633FB
loc_462FEE:
    MOV rsi, r8
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    NOP dword ptr [rax+rax+00h]
loc_463000:
    MOV rdi, rbp
    MOV rbp, r15
    CALL _free
    JMP loc_4628F0
loc_463010:
    MOV rdi, r8
    CALL sub_462370
    CMP [rsp+1B8h+var_180], 0
    JNZ loc_4633B3
loc_463023:
    CMP [rsp+1B8h+var_181], 0
    JNZ loc_463453
loc_46302E:
    MOV rsi, rax
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_46303D:
    CMP [rsp+1B8h+var_180], 0
    JNZ loc_463377
loc_463048:
    MOVSX esi, byte ptr [r8]
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_463058:
    MOVZX eax, byte ptr [r8]
    CMP al, 22h
    JZ loc_463068
loc_463060:
    CMP al, 27h
    JNZ loc_463308
loc_463068:
    MOVZX eax, byte ptr [r8+1]
    TEST al, al
    JZ loc_463308
loc_463075:
    CMP byte ptr [r8+2], 0
    MOV word ptr [rsp+1B8h+var_1B8], ax
    FILD word ptr [rsp+1B8h+var_1B8]
    JZ loc_4630BF
loc_463083:
    CMP cs:byte_72FD60, 0
    JNZ loc_4630BF
loc_46308C:
    FSTP [rsp+1B8h+var_1A8]
    MOV edx, 5
    MOV esi, offset aWarningSCharac
    XOR edi, edi
    MOV qword ptr [rsp+1B8h+var_1B8], r8
    CALL _dcgettext
    MOV r8, qword ptr [rsp+1B8h+var_1B8]
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    LEA rcx, [r8+2]
    CALL _error
    FLD [rsp+1B8h+var_1A8]
loc_4630BF:
    CMP [rsp+1B8h+var_180], 0
    JNZ loc_463350
loc_4630CA:
    CMP [rsp+1B8h+var_181], 0
    JNZ loc_463469
loc_4630D5:
    SUB rsp, 10h
    MOV rdi, rbp
    XOR eax, eax
    FSTP [rsp+1C8h+var_1C8]
    CALL sub_4BB990
    POP r9
    POP r10
    JMP def_462D53
loc_4630EF:
    MOVZX eax, byte ptr [r8]
    CMP al, 22h
    JZ loc_4630FF
loc_4630F7:
    CMP al, 27h
    JNZ loc_4632A4
loc_4630FF:
    MOVZX ebx, byte ptr [r8+1]
    TEST bl, bl
    JZ loc_4632A4
loc_46310C:
    CMP byte ptr [r8+2], 0
    JZ loc_463147
loc_463113:
    CMP cs:byte_72FD60, 0
    JNZ loc_463147
loc_46311C:
    MOV edx, 5
    MOV esi, offset aWarningSCharac
    XOR edi, edi
    MOV qword ptr [rsp+1B8h+var_1B8], r8
    CALL _dcgettext
    MOV r8, qword ptr [rsp+1B8h+var_1B8]
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    LEA rcx, [r8+2]
    CALL _error
loc_463147:
    CMP [rsp+1B8h+var_180], 0
    JNZ loc_4632E7
loc_463152:
    CMP [rsp+1B8h+var_181], 0
    JNZ loc_46348E
loc_46315D:
    MOV rsi, rbx
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_463170:
    BT rdx, rax
    JB loc_462C70
loc_46317A:
    MOVZX eax, bl
    CMP [rsp+rax+1B8h+var_148], 0
    JNZ loc_462C91
loc_463188:
    MOV edx, 5
    MOV esi, offset aSInvalidConver
    XOR edi, edi
    CALL _dcgettext
    LEA rcx, [r15+1]
    MOV rdx, rax
    MOV r8, r14
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    SUB rcx, r14
    CALL _error
    NOP dword ptr [rax+00h]
loc_4631B8:
    MOV qword ptr [rsp+1B8h+var_1B8], r14
    XOR ecx, ecx
    JMP loc_462D00
loc_4631C3:
    ADD r12, 1
    TEST r13d, r13d
    LEA r15, [rbp+1]
    JNZ loc_46325F
loc_4631D4:
    MOVZX ebx, byte ptr [rbp+1]
    MOV [rsp+1B8h+var_174], 0
    MOV [rsp+1B8h+var_180], 1
    MOV [rsp+1B8h+var_181], 0
    CMP bl, 2Eh
    JNZ loc_462C59
loc_4631F3:
    MOVZX ebx, byte ptr [r15+1]
    MOV [rsp+1B8h+var_E5], 0
    CMP bl, 2Ah
    JZ loc_4633D4
loc_463209:
    MOVSX edx, bl
    LEA rcx, [r12+1]
    SUB r12, r15
    SUB edx, 30h
    LEA rax, [r15+1]
    CMP edx, 9
    JA loc_4634E2
loc_463224:
    NOP dword ptr [rax+00h]
loc_463228:
    ADD rax, 1
    MOVSX ecx, byte ptr [rax]
    LEA rdx, [rax+r12]
    MOV ebx, ecx
    SUB ecx, 30h
    CMP ecx, 9
    JBE loc_463228
loc_46323D:
    MOV r12, rdx
    MOV r15, rax
    MOV [rsp+1B8h+var_181], 0
    JMP loc_462C59
loc_46324D:
    MOV ecx, 1
    MOV qword ptr [rsp+1B8h+var_1B8], (offset aNumberOfSecond+14h)
    JMP loc_462D00
loc_46325F:
    MOV rbx, [rsp+1B8h+var_198]
    MOV rdi, [rbx]
    CALL sub_462370
    MOV edx, 80000000h
    MOV ecx, 0FFFFFFFFh
    ADD rdx, rax
    CMP rdx, rcx
    JA loc_46352F
loc_463282:
    MOV [rsp+1B8h+var_174], eax
    MOV rax, rbx
    SUB r13d, 1
    ADD rax, 8
    MOVZX ebx, byte ptr [rbp+1]
    MOV [rsp+1B8h+var_180], 1
    MOV [rsp+1B8h+var_198], rax
    JMP loc_462C4B
loc_4632A4:
    MOV qword ptr [rsp+1B8h+var_1B8], r8
    CALL ___errno_location
    MOV r8, qword ptr [rsp+1B8h+var_1B8]
    LEA rsi, [rsp+1B8h+endptr]
    XOR ecx, ecx
    XOR edx, edx
    MOV dword ptr [rax], 0
    MOV rdi, r8
    CALL ___strtoul_internal
    MOV r8, qword ptr [rsp+1B8h+var_1B8]
    MOV rsi, [rsp+1B8h+endptr]
    MOV rbx, rax
    MOV rdi, r8
    CALL sub_4622C0
    CMP [rsp+1B8h+var_180], 0
    JZ loc_463152
loc_4632E7:
    CMP [rsp+1B8h+var_181], 0
    JNZ loc_4634C4
loc_4632F2:
    MOV esi, [rsp+1B8h+var_174]
    MOV rdx, rbx
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_463308:
    MOV qword ptr [rsp+1B8h+var_1B8], r8
    CALL ___errno_location
    MOV r8, qword ptr [rsp+1B8h+var_1B8]
    LEA rsi, [rsp+1B8h+endptr]
    MOV dword ptr [rax], 0
    MOV rdi, r8
    MOV qword ptr [rsp+1B8h+var_1A8], r8
    CALL sub_497B20
    MOV r8, qword ptr [rsp+1B8h+var_1A8]
    MOV rsi, [rsp+1B8h+endptr]
    FSTP [rsp+1B8h+var_1B8]
    MOV rdi, r8
    CALL sub_4622C0
    CMP [rsp+1B8h+var_180], 0
    FLD [rsp+1B8h+var_1B8]
    JZ loc_4630CA
loc_463350:
    CMP [rsp+1B8h+var_181], 0
    JNZ loc_4634A4
loc_46335B:
    SUB rsp, 10h
    MOV rdi, rbp
    XOR eax, eax
    MOV esi, [rsp+1C8h+var_174]
    FSTP [rsp+1C8h+var_1C8]
    CALL sub_4BB990
    POP rcx
    POP rsi
    JMP def_462D53
loc_463377:
    MOVSX edx, byte ptr [r8]
    MOV esi, [rsp+1B8h+var_174]
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_46338E:
    CMP [rsp+1B8h+var_181], 0
    MOV rcx, r8
    JZ loc_4634CC
loc_46339C:
    MOV edx, [rsp+1B8h+var_170]
    MOV esi, [rsp+1B8h+var_174]
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_4633B3:
    CMP [rsp+1B8h+var_181], 0
    JNZ loc_463486
loc_4633BE:
    MOV esi, [rsp+1B8h+var_174]
    MOV rdx, rax
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_4633D4:
    ADD r12, 2
    TEST r13d, r13d
    LEA rbp, [r15+2]
    JNZ loc_463411
loc_4633E1:
    MOVZX ebx, byte ptr [r15+2]
    MOV [rsp+1B8h+var_170], 0
    MOV r15, rbp
    MOV [rsp+1B8h+var_181], 1
    JMP loc_462C59
loc_4633FB:
    MOV esi, [rsp+1B8h+var_170]
    MOV rdx, r8
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_463411:
    MOV rax, [rsp+1B8h+var_198]
    MOV rdi, [rax]
    CALL sub_462370
    TEST rax, rax
    JS loc_4634ED
loc_463427:
    CMP rax, 7FFFFFFFh
    JG loc_4634FA
loc_463433:
    MOV [rsp+1B8h+var_170], eax
loc_463437:
    MOVZX ebx, byte ptr [r15+2]
    ADD [rsp+1B8h+var_198], 8
    SUB r13d, 1
    MOV r15, rbp
    MOV [rsp+1B8h+var_181], 1
    JMP loc_462C59
loc_463453:
    MOV esi, [rsp+1B8h+var_170]
    MOV rdx, rax
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_463469:
    SUB rsp, 10h
    MOV rdi, rbp
    XOR eax, eax
    MOV esi, [rsp+1C8h+var_170]
    FSTP [rsp+1C8h+var_1C8]
    CALL sub_4BB990
    POP rdi
    POP r8
    JMP def_462D53
loc_463486:
    MOV rcx, rax
    JMP loc_46339C
loc_46348E:
    MOV esi, [rsp+1B8h+var_170]
    MOV rdx, rbx
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_4634A4:
    SUB rsp, 10h
    MOV rdi, rbp
    XOR eax, eax
    MOV edx, [rsp+1C8h+var_170]
    MOV esi, [rsp+1C8h+var_174]
    FSTP [rsp+1C8h+var_1C8]
    CALL sub_4BB990
    POP rax
    POP rdx
    JMP def_462D53
loc_4634C4:
    MOV rcx, rbx
    JMP loc_46339C
loc_4634CC:
    MOV esi, [rsp+1B8h+var_174]
    MOV rdx, r8
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4BB990
    JMP def_462D53
loc_4634E2:
    MOV r12, rcx
    MOV r15, rax
    JMP loc_462C59
loc_4634ED:
    MOV [rsp+1B8h+var_170], 0FFFFFFFFh
    JMP loc_463437
loc_4634FA:
    MOV rax, [rsp+1B8h+var_198]
    MOV rdi, [rax]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidPrecisi_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_46352F:
    MOV rax, [rsp+1B8h+var_198]
    MOV rdi, [rax]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidFieldWi
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_463564:
    MOV [rsp+1B8h+var_F0], r15b
    JMP loc_462B5C
loc_463571:
    XOR edi, edi
    CALL sub_462420
```
{'input_parameter_count': 3, 'input_parameter_types': ['Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 4, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x6BC2D0', '0x6BC2D8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Interfacing/Wrapper'}

##### T 246 - single_binary_main_printf
```assembly
loc_46C910:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12d, edi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 178h
    MOV rdi, [rsi]
    MOV rax, fs:28h
    MOV [rsp+1A8h+var_40], rax
    XOR eax, eax
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
    MOV edi, offset aPosixlyCorrect
    MOV cs:dword_752D44, 0
    CALL _getenv
    TEST rax, rax
    SETNZ cs:byte_752D40
    CMP r12d, 2
    JZ loc_46D081
loc_46C99C:
    CMP r12d, 1
    JLE loc_46D0E9
loc_46C9A6:
    MOV rax, [rbp+8]
loc_46C9AA:
    CMP byte ptr [rax], 2Dh
    JNZ loc_46C9B9
loc_46C9AF:
    CMP byte ptr [rax+1], 2Dh
    JZ loc_46D058
loc_46C9B9:
    MOV [rsp+1A8h+src], rax
loc_46C9BE:
    LEA eax, [r12-2]
    MOV r14, [rsp+1A8h+src]
    MOV [rsp+1A8h+var_16C], eax
    LEA rax, [rbp+10h]
    MOV [rsp+1A8h+var_168], rax
    MOVZX eax, byte ptr [r14]
    TEST al, al
    JZ loc_46CAE5
loc_46C9E1:
    MOV rdi, [rsp+1A8h+var_168]
    MOV r15d, [rsp+1A8h+var_16C]
    MOV [rsp+1A8h+var_170], 0
    MOV [rsp+1A8h+var_174], 0
    MOV [rsp+1A8h+var_198], rdi
    MOV [rsp+1A8h+var_188], r15d
    JMP loc_46CA34
loc_46CA10:
    CMP al, 5Ch
    JNZ loc_46CB58
loc_46CA18:
    XOR esi, esi
    MOV rdi, r14
    CALL sub_46BCB0
    MOVSXD rbp, eax
    ADD rbp, r14
loc_46CA28:
    MOVZX eax, byte ptr [rbp+1]
    LEA r14, [rbp+1]
    TEST al, al
    JZ loc_46CAA9
loc_46CA34:
    CMP al, 25h
    JNZ loc_46CA10
loc_46CA38:
    MOVZX eax, byte ptr [r14+1]
    LEA rbp, [r14+1]
    CMP al, 25h
    JZ loc_46CB80
loc_46CA49:
    CMP al, 62h
    JZ loc_46CFB0
loc_46CA51:
    CMP al, 71h
    JNZ loc_46CBA8
loc_46CA59:
    MOV r15d, [rsp+1A8h+var_188]
    TEST r15d, r15d
    JZ loc_46CA28
loc_46CA63:
    MOV r14, [rsp+1A8h+var_198]
    MOV rbx, cs:stdout
    MOV edi, 3
    MOV rsi, [r14]
    CALL sub_4D2F70
    MOV rsi, rbx
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rax, r14
    LEA r14, [rbp+1]
    ADD rax, 8
    MOV [rsp+1A8h+var_198], rax
    MOV eax, r15d
    SUB eax, 1
    MOV [rsp+1A8h+var_188], eax
    MOVZX eax, byte ptr [rbp+1]
    TEST al, al
    JNZ loc_46CA34
loc_46CAA9:
    MOV r15d, [rsp+1A8h+var_188]
    MOV eax, [rsp+1A8h+var_16C]
    MOV rdi, [rsp+1A8h+var_168]
    SUB eax, r15d
    MOVSXD rdx, eax
    TEST eax, eax
    LEA rdi, [rdi+rdx*8]
    MOV [rsp+1A8h+var_168], rdi
    JLE loc_46CAEA
loc_46CACA:
    TEST r15d, r15d
    JLE loc_46CAEA
loc_46CACF:
    MOV r14, [rsp+1A8h+src]
    MOV [rsp+1A8h+var_16C], r15d
    MOVZX eax, byte ptr [r14]
    TEST al, al
    JNZ loc_46C9E1
loc_46CAE5:
    MOV r15d, [rsp+1A8h+var_16C]
loc_46CAEA:
    TEST r15d, r15d
    JZ loc_46CB21
loc_46CAEF:
    MOV rax, [rsp+1A8h+var_168]
    MOV rdi, [rax]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aWarningIgnorin_3
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_46CB21:
    MOV ebx, cs:dword_752D44
loc_46CB27:
    MOV rdi, [rsp+1A8h+var_40]
    XOR rdi, fs:28h
    MOV eax, ebx
    JNZ loc_46D112
loc_46CB40:
    ADD rsp, 178h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46CB58:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_46D02C
loc_46CB6D:
    LEA rcx, [rdx+1]
    MOV rbp, r14
    MOV [rdi+28h], rcx
    MOV [rdx], al
    JMP loc_46CA28
loc_46CB80:
    MOV rdi, cs:stdout
    MOV rax, [rdi+28h]
    CMP rax, [rdi+30h]
    JNB loc_46D049
loc_46CB95:
    LEA rdx, [rax+1]
    MOV [rdi+28h], rdx
    MOV byte ptr [rax], 25h
    JMP loc_46CA28
loc_46CBA8:
    LEA rdi, [rsp+1A8h+var_148]
    XOR eax, eax
    MOV ecx, 20h
    MOV byte ptr [rsp+1A8h+var_1A8], 0
    MOV byte ptr [rsp+1A8h+n], 1
    MOV rdx, r14
    REP 
    MOV [rsp+1A8h+var_181], 0
    MOV [rsp+1A8h+var_F0], 1
    NEG rdx
    MOV [rsp+1A8h+var_D0], 1
    MOV [rsp+1A8h+var_D3], 1
    XOR esi, esi
    MOV [rsp+1A8h+var_D5], 1
    MOV [rsp+1A8h+var_D9], 1
    XOR r10d, r10d
    MOV [rsp+1A8h+var_DF], 1
    MOV [rsp+1A8h+var_101], 1
    XOR r8d, r8d
    MOV [rsp+1A8h+var_E1], 1
    MOV [rsp+1A8h+var_102], 1
    XOR r13d, r13d
    MOV [rsp+1A8h+var_E2], 1
    MOV [rsp+1A8h+var_103], 1
    XOR r9d, r9d
    MOV [rsp+1A8h+var_E3], 1
    MOV [rsp+1A8h+var_E4], 1
    MOV ecx, 1
    MOV [rsp+1A8h+var_E5], 1
    MOV [rsp+1A8h+var_107], 1
    MOV edi, 1
    MOV [rsp+1A8h+var_E7], 1
    MOV [rsp+1A8h+var_180], 1
    MOV r11d, 1
    MOV [rsp+1A8h+var_17F], 0
    MOV [rsp+1A8h+var_17E], 1
    MOV r15d, 1
    MOV [rsp+1A8h+var_17D], 0
    MOV [rsp+1A8h+var_17C], 1
    LEA r12, [rbp+rdx+0]
    MOV [rsp+1A8h+var_17B], 0
    MOV [rsp+1A8h+var_17A], 1
    MOV [rsp+1A8h+var_179], 0
    MOV [rsp+1A8h+var_178], 1
    MOV [rsp+1A8h+var_177], 0
    MOV [rsp+1A8h+var_176], 1
    MOV [rsp+1A8h+var_175], 1
    MOVZX ebx, byte ptr [rbp+0]
    LEA eax, [rbx-20h]
    CMP al, 29h
    JA def_46CCC3
loc_46CCBB:
    NOP dword ptr [rax+rax+00h]
loc_46CCC0:
    MOVZX eax, al
    JMP ds:jpt_46CCC3[rax*8]
loc_46CCD0:
    MOV esi, 1
    XOR ecx, ecx
    MOV r8d, 1
    XOR edi, edi
loc_46CCDF:
    ADD rbp, 1
loc_46CCE3:
    MOVZX ebx, byte ptr [rbp+0]
    LEA r12, [rbp+rdx+0]
    LEA eax, [rbx-20h]
    CMP al, 29h
    JBE loc_46CCC0
loc_46CCF3:
    TEST r9b, r9b
    JNZ loc_46D846
loc_46CCFC:
    TEST r13b, r13b
    JZ loc_46CD09
loc_46CD01:
    MOV [rsp+1A8h+var_D0], r11b
loc_46CD09:
    TEST r8b, r8b
    JZ loc_46CD16
loc_46CD0E:
    MOV [rsp+1A8h+var_D5], dil
loc_46CD16:
    TEST r10b, r10b
    JZ loc_46CD27
loc_46CD1B:
    MOVZX eax, [rsp+1A8h+var_175]
    MOV [rsp+1A8h+var_D9], al
loc_46CD27:
    CMP [rsp+1A8h+var_177], 0
    JZ loc_46CD3A
loc_46CD2E:
    MOVZX eax, [rsp+1A8h+var_176]
    MOV [rsp+1A8h+var_103], al
loc_46CD3A:
    CMP [rsp+1A8h+var_179], 0
    JZ loc_46CD4D
loc_46CD41:
    MOVZX eax, [rsp+1A8h+var_178]
    MOV [rsp+1A8h+var_E3], al
loc_46CD4D:
    TEST sil, sil
    JZ loc_46CD59
loc_46CD52:
    MOV [rsp+1A8h+var_E5], cl
loc_46CD59:
    CMP [rsp+1A8h+var_17B], 0
    JZ loc_46CD6C
loc_46CD60:
    MOVZX eax, [rsp+1A8h+var_17A]
    MOV [rsp+1A8h+var_107], al
loc_46CD6C:
    CMP [rsp+1A8h+var_17D], 0
    JZ loc_46CD7F
loc_46CD73:
    MOVZX eax, [rsp+1A8h+var_17C]
    MOV [rsp+1A8h+var_E7], al
loc_46CD7F:
    CMP [rsp+1A8h+var_17F], 0
    JZ loc_46CD92
loc_46CD86:
    MOVZX eax, [rsp+1A8h+var_17E]
    MOV [rsp+1A8h+var_D3], al
loc_46CD92:
    CMP [rsp+1A8h+var_181], 0
    JZ loc_46CDA5
loc_46CD99:
    MOVZX eax, [rsp+1A8h+var_180]
    MOV [rsp+1A8h+var_DF], al
loc_46CDA5:
    CMP byte ptr [rsp+1A8h+var_1A8], 0
    JZ loc_46CDB7
loc_46CDAB:
    MOVZX eax, byte ptr [rsp+1A8h+n]
    MOV [rsp+1A8h+var_E4], al
loc_46CDB7:
    CMP bl, 2Ah
    JZ loc_46D345
loc_46CDC0:
    MOVSX eax, bl
    MOV r13, rbp
    SUB eax, 30h
    CMP eax, 9
    JA loc_46CDE8
loc_46CDCE:
    XCHG ax, ax
loc_46CDD0:
    ADD r13, 1
    MOVSX eax, byte ptr [r13+0]
    LEA r12, [r13+rdx+0]
    MOV ebx, eax
    SUB eax, 30h
    CMP eax, 9
    JBE loc_46CDD0
loc_46CDE8:
    MOV [rsp+1A8h+var_180], 0
loc_46CDED:
    CMP bl, 2Eh
    MOV [rsp+1A8h+var_181], 0
    JZ loc_46D2ED
loc_46CDFB:
    LEA eax, [rbx-4Ch]
    CMP al, 2Eh
    JA loc_46CE43
loc_46CE02:
    MOV rdx, 410150000001h
    BT rdx, rax
    JNB loc_46CE43
loc_46CE12:
    MOV esi, 1
    NOP word ptr [rax+rax+00000000h]
loc_46CE20:
    ADD r13, 1
    MOVZX ebx, byte ptr [r13+0]
    MOV rax, rdx
    LEA ecx, [rbx-4Ch]
    SHR rax, cl
    AND eax, 1
    XOR rax, 1
    CMP cl, 2Eh
    CMOVA eax, esi
    TEST al, al
    JZ loc_46CE20
loc_46CE43:
    MOVZX eax, bl
    CMP [rsp+rax+1A8h+var_148], 0
    JZ loc_46D8B7
loc_46CE51:
    MOV eax, [rsp+1A8h+var_188]
    MOV ebp, (offset a8+6)
    TEST eax, eax
    JZ loc_46CE76
loc_46CE5E:
    SUB eax, 1
    MOV [rsp+1A8h+var_188], eax
    MOV rax, [rsp+1A8h+var_198]
    MOV rbp, [rax]
    ADD rax, 8
    MOV [rsp+1A8h+var_198], rax
loc_46CE76:
    LEA ecx, [rbx-41h]
    CMP cl, 37h
    JA loc_46D2E2
loc_46CE82:
    MOV eax, 1
    MOV rdi, 90410800800000h
    SHL rax, cl
    TEST rax, rdi
    JNZ loc_46D36B
loc_46CE9D:
    MOV rdi, 7100000071h
    AND rax, rdi
    CMP rax, 1
    SBB rcx, rcx
    ADD rcx, 1
    TEST rax, rax
    MOV eax, 4F1379h
    CMOVZ rax, r14
    MOV qword ptr [rsp+1A8h+var_1A8], rax
loc_46CEC5:
    LEA rdi, [r12+rcx+2]
    MOV [rsp+1A8h+n], rcx
    CALL sub_4DCC10
    MOV rdx, r12
    MOV rsi, r14
    MOV rdi, rax
    MOV r15, rax
    CALL _mempcpy
    MOV rcx, [rsp+1A8h+n]
    MOV rsi, qword ptr [rsp+1A8h+var_1A8]
    MOV rdi, rax
    MOV rdx, rcx
    CALL _mempcpy
    MOV [rax], bl
    SUB ebx, 41h
    MOV byte ptr [rax+1], 0
    CMP bl, 37h
    JA def_46CF0E
loc_46CF0B:
    MOVZX ebx, bl
    JMP ds:jpt_46CF0E[rbx*8]
loc_46CF18:
    MOV [rsp+1A8h+var_17D], 1
    MOV [rsp+1A8h+var_17C], 0
    MOV esi, 1
    MOV [rsp+1A8h+var_17B], 1
    MOV [rsp+1A8h+var_17A], 0
    XOR ecx, ecx
    MOV [rsp+1A8h+var_179], 1
    MOV [rsp+1A8h+var_178], 0
    MOV r10d, 1
    MOV [rsp+1A8h+var_177], 1
    MOV [rsp+1A8h+var_176], 0
    MOV r8d, 1
    MOV [rsp+1A8h+var_175], 0
    XOR edi, edi
    MOV r13d, 1
    XOR r11d, r11d
    MOV r9d, 1
    XOR r15d, r15d
    ADD rbp, 1
    JMP loc_46CCE3
loc_46CF78:
    MOV byte ptr [rsp+1A8h+var_1A8], 1
    MOV byte ptr [rsp+1A8h+n], 0
    MOV esi, 1
    MOV [rsp+1A8h+var_181], 1
    MOV [rsp+1A8h+var_180], 0
    XOR ecx, ecx
    MOV [rsp+1A8h+var_17F], 1
    MOV [rsp+1A8h+var_17E], 0
    MOV r8d, 1
    XOR edi, edi
    ADD rbp, 1
    JMP loc_46CCE3
loc_46CFB0:
    MOV edi, [rsp+1A8h+var_188]
    TEST edi, edi
    JZ loc_46CA28
loc_46CFBC:
    MOV rax, [rsp+1A8h+var_198]
    MOV rbx, [rax]
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JNZ loc_46CFFA
loc_46CFCB:
    JMP loc_46D01C
loc_46CFD0:
    MOV rdi, cs:stdout
    MOV rdx, [rdi+28h]
    CMP rdx, [rdi+30h]
    JNB loc_46D03C
loc_46CFE1:
    LEA rcx, [rdx+1]
    MOV [rdi+28h], rcx
    MOV [rdx], al
    MOV rax, rbx
loc_46CFEE:
    LEA rbx, [rax+1]
    MOVZX eax, byte ptr [rax+1]
    TEST al, al
    JZ loc_46D01C
loc_46CFFA:
    CMP al, 5Ch
    JNZ loc_46CFD0
loc_46CFFE:
    MOV rdi, rbx
    MOV esi, 1
    CALL sub_46BCB0
    CDQE 
    ADD rax, rbx
    LEA rbx, [rax+1]
    MOVZX eax, byte ptr [rax+1]
    TEST al, al
    JNZ loc_46CFFA
loc_46D01C:
    ADD [rsp+1A8h+var_198], 8
    SUB [rsp+1A8h+var_188], 1
    JMP loc_46CA28
loc_46D02C:
    MOVZX esi, al
    MOV rbp, r14
    CALL ___overflow
    JMP loc_46CA28
loc_46D03C:
    MOVZX esi, al
    CALL ___overflow
    MOV rax, rbx
    JMP loc_46CFEE
loc_46D049:
    MOV esi, 25h
    CALL ___overflow
    JMP loc_46CA28
loc_46D058:
    CMP byte ptr [rax+2], 0
    JNZ loc_46C9B9
loc_46D062:
    SUB r12d, 1
    LEA rax, [rbp+8]
    CMP r12d, 1
    JZ loc_46D0E9
loc_46D070:
    MOV rdi, [rbp+10h]
    MOV rbp, rax
    MOV [rsp+1A8h+src], rdi
    JMP loc_46C9BE
loc_46D081:
    MOV rax, [rbp+8]
    MOV edi, offset aHelp
    MOV ecx, 7
    MOV rsi, rax
    REPE 
    JZ loc_46D853
loc_46D09A:
    MOV edi, offset aVersion
    MOV ecx, 0Ah
    MOV rsi, rax
    REPE 
    SETNBE bl
    SETB dl
    SUB ebx, edx
    MOVSX ebx, bl
    TEST ebx, ebx
    JNZ loc_46C9AA
loc_46D0BC:
    MOV rcx, cs:off_743148
    MOV rdi, cs:stdout
    XOR r9d, r9d
    MOV r8d, offset aDavidMackenzie
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aPrintf
    XOR eax, eax
    CALL sub_4DC840
    JMP loc_46CB27
loc_46D0E9:
    MOV edx, 5
    MOV esi, offset aMissingOperand
    XOR edi, edi
    CALL _dcgettext
    XOR edi, edi
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    CALL _error
    MOV edi, 1
    CALL sub_46C550
loc_46D112:
    CALL ___stack_chk_fail
loc_46D120:
    CMP [rsp+1A8h+var_180], 0
    JNZ loc_46D5AD
loc_46D12B:
    CMP [rsp+1A8h+var_181], 0
    JNZ loc_46D5FB
loc_46D136:
    MOV rsi, rbp
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    NOP dword ptr [rax+rax+00h]
loc_46D148:
    MOV rdi, r15
    MOV rbp, r13
    CALL _free
    JMP loc_46CA28
loc_46D158:
    MOVZX eax, byte ptr [rbp+0]
    CMP al, 22h
    JZ loc_46D164
loc_46D160:
    CMP al, 27h
    JNZ loc_46D170
loc_46D164:
    MOVZX ebx, byte ptr [rbp+1]
    TEST bl, bl
    JNZ loc_46D1FB
loc_46D170:
    CALL ___errno_location
    LEA rsi, [rsp+1A8h+endptr]
    MOV rdi, rbp
    MOV dword ptr [rax], 0
    XOR ecx, ecx
    XOR edx, edx
    CALL ___strtol_internal
    MOV rsi, [rsp+1A8h+endptr]
    MOV rdi, rbp
    MOV rbx, rax
    CALL sub_46C4A0
loc_46D19C:
    CMP [rsp+1A8h+var_180], 0
    JNZ loc_46D238
loc_46D1A7:
    CMP [rsp+1A8h+var_181], 0
    JNZ loc_46D597
loc_46D1B2:
    MOV rsi, rbx
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D1C1:
    CMP [rsp+1A8h+var_180], 0
    JNZ loc_46D580
loc_46D1CC:
    MOVSX esi, byte ptr [rbp+0]
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D1DF:
    MOVZX eax, byte ptr [rbp+0]
    CMP al, 22h
    JZ loc_46D1EF
loc_46D1E7:
    CMP al, 27h
    JNZ loc_46D4B3
loc_46D1EF:
    MOVZX ebx, byte ptr [rbp+1]
    TEST bl, bl
    JZ loc_46D4B3
loc_46D1FB:
    CMP byte ptr [rbp+2], 0
    JZ loc_46D19C
loc_46D201:
    CMP cs:byte_752D40, 0
    JNZ loc_46D19C
loc_46D20A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aWarningSCharac
    CALL _dcgettext
    LEA rcx, [rbp+2]
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    CMP [rsp+1A8h+var_180], 0
    JZ loc_46D1A7
loc_46D238:
    CMP [rsp+1A8h+var_181], 0
    JNZ loc_46D566
loc_46D243:
    MOV esi, [rsp+1A8h+var_174]
    MOV rdx, rbx
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D259:
    MOVZX eax, byte ptr [rbp+0]
    CMP al, 22h
    JZ loc_46D269
loc_46D261:
    CMP al, 27h
    JNZ loc_46D408
loc_46D269:
    MOVZX eax, byte ptr [rbp+1]
    TEST al, al
    JZ loc_46D408
loc_46D275:
    MOV word ptr [rsp+1A8h+var_1A8], ax
    CMP byte ptr [rbp+2], 0
    FILD word ptr [rsp+1A8h+var_1A8]
    FSTP [rsp+1A8h+var_1A8]
    JZ loc_46D2B1
loc_46D285:
    CMP cs:byte_752D40, 0
    JNZ loc_46D2B1
loc_46D28E:
    MOV edx, 5
    MOV esi, offset aWarningSCharac
    XOR edi, edi
    CALL _dcgettext
    LEA rcx, [rbp+2]
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_46D2B1:
    CMP [rsp+1A8h+var_180], 0
    JNZ loc_46D48B
loc_46D2BC:
    CMP [rsp+1A8h+var_181], 0
    JNZ loc_46D632
loc_46D2C7:
    PUSH qword ptr [rsp+1A8h+var_1A8+8]
    PUSH qword ptr [rsp+1B0h+var_1A8]
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    POP r9
    POP r10
    JMP def_46CF0E
loc_46D2E2:
    MOV qword ptr [rsp+1A8h+var_1A8], r14
    XOR ecx, ecx
    JMP loc_46CEC5
loc_46D2ED:
    MOVZX ebx, byte ptr [r13+1]
    MOV [rsp+1A8h+var_E5], 0
    CMP bl, 2Ah
    JZ loc_46D5CD
loc_46D303:
    MOVSX edx, bl
    LEA rcx, [r12+1]
    SUB r12, r13
    SUB edx, 30h
    LEA rax, [r13+1]
    CMP edx, 9
    JA loc_46D7BE
loc_46D31E:
    XCHG ax, ax
loc_46D320:
    ADD rax, 1
    MOVSX edx, byte ptr [rax]
    LEA rcx, [rax+r12]
    MOV ebx, edx
    SUB edx, 30h
    CMP edx, 9
    JBE loc_46D320
loc_46D335:
    MOV r12, rcx
    MOV r13, rax
    MOV [rsp+1A8h+var_181], 0
    JMP loc_46CDFB
loc_46D345:
    MOV esi, [rsp+1A8h+var_188]
    ADD r12, 1
    LEA r13, [rbp+1]
    TEST esi, esi
    JNZ loc_46D37D
loc_46D355:
    MOVZX ebx, byte ptr [rbp+1]
    MOV [rsp+1A8h+var_174], 0
    MOV [rsp+1A8h+var_180], 1
    JMP loc_46CDED
loc_46D36B:
    MOV ecx, 1
    MOV qword ptr [rsp+1A8h+var_1A8], (offset aNumberOfSecond+14h)
    JMP loc_46CEC5
loc_46D37D:
    MOV rax, [rsp+1A8h+var_198]
    MOV r15, [rax]
    MOVZX eax, byte ptr [r15]
    CMP al, 22h
    JZ loc_46D395
loc_46D38D:
    CMP al, 27h
    JNZ loc_46D535
loc_46D395:
    MOVZX ebx, byte ptr [r15+1]
    TEST bl, bl
    JZ loc_46D535
loc_46D3A2:
    CMP byte ptr [r15+2], 0
    JZ loc_46D3D5
loc_46D3A9:
    CMP cs:byte_752D40, 0
    JNZ loc_46D3D5
loc_46D3B2:
    MOV edx, 5
    MOV esi, offset aWarningSCharac
    XOR edi, edi
    CALL _dcgettext
    LEA rcx, [r15+2]
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_46D3D5:
    MOV eax, 80000000h
    MOV edx, 0FFFFFFFFh
    ADD rax, rbx
    CMP rax, rdx
    JA loc_46D882
loc_46D3EB:
    MOV [rsp+1A8h+var_174], ebx
    ADD [rsp+1A8h+var_198], 8
    SUB [rsp+1A8h+var_188], 1
    MOVZX ebx, byte ptr [rbp+1]
    MOV [rsp+1A8h+var_180], 1
    JMP loc_46CDED
loc_46D408:
    CALL ___errno_location
    LEA rsi, [rsp+1A8h+endptr]
    MOV rbx, rax
    MOV dword ptr [rax], 0
    MOV rdi, rbp
    CALL sub_4B1C80
    MOV r11d, [rbx]
    FSTP [rsp+1A8h+var_1A8]
    TEST r11d, r11d
    JNZ loc_46D768
loc_46D432:
    MOV rax, [rsp+1A8h+endptr]
    CMP byte ptr [rax], 0
    JZ loc_46D2B1
loc_46D440:
    CMP rbp, rax
    MOV rdi, rbp
    JZ loc_46D801
loc_46D44C:
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSValueNotCompl
loc_46D45E:
    XOR edi, edi
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    MOV rcx, rbx
    CALL _error
    CMP [rsp+1A8h+var_180], 0
    MOV cs:dword_752D44, 1
    JZ loc_46D2BC
loc_46D48B:
    CMP [rsp+1A8h+var_181], 0
    JNZ loc_46D611
loc_46D496:
    PUSH qword ptr [rsp+1A8h+var_1A8+8]
    PUSH qword ptr [rsp+1B0h+var_1A8]
    MOV rdi, r15
    MOV esi, [rsp+1B8h+var_174]
    XOR eax, eax
    CALL sub_4DD600
    POP rcx
    POP rsi
    JMP def_46CF0E
loc_46D4B3:
    CALL ___errno_location
    LEA rsi, [rsp+1A8h+endptr]
    MOV r12, rax
    XOR ecx, ecx
    XOR edx, edx
    MOV dword ptr [rax], 0
    MOV rdi, rbp
    CALL ___strtoul_internal
    MOV r14d, [r12]
    MOV rbx, rax
    TEST r14d, r14d
    JNZ loc_46D792
loc_46D4E2:
    MOV rax, [rsp+1A8h+endptr]
    CMP byte ptr [rax], 0
    JZ loc_46D19C
loc_46D4F0:
    CMP rbp, rax
    MOV rdi, rbp
    JZ loc_46D818
loc_46D4FC:
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbp, rax
    MOV esi, offset aSValueNotCompl
loc_46D50E:
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_752D44, 1
    JMP loc_46D19C
loc_46D535:
    CALL ___errno_location
    LEA rsi, [rsp+1A8h+endptr]
    MOV rdi, r15
    XOR ecx, ecx
    XOR edx, edx
    MOV dword ptr [rax], 0
    CALL ___strtol_internal
    MOV rsi, [rsp+1A8h+endptr]
    MOV rdi, r15
    MOV rbx, rax
    CALL sub_46C4A0
    JMP loc_46D3D5
loc_46D566:
    MOV rcx, rbx
loc_46D569:
    MOV edx, [rsp+1A8h+var_170]
    MOV esi, [rsp+1A8h+var_174]
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D580:
    MOVSX edx, byte ptr [rbp+0]
    MOV esi, [rsp+1A8h+var_174]
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D597:
    MOV esi, [rsp+1A8h+var_170]
    MOV rdx, rbx
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D5AD:
    CMP [rsp+1A8h+var_181], 0
    MOV rcx, rbp
    JNZ loc_46D569
loc_46D5B7:
    MOV esi, [rsp+1A8h+var_174]
    MOV rdx, rbp
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D5CD:
    MOV ecx, [rsp+1A8h+var_188]
    LEA rax, [r13+2]
    ADD r12, 2
    MOV qword ptr [rsp+1A8h+var_1A8], rax
    TEST ecx, ecx
    JNZ loc_46D650
loc_46D5E1:
    MOVZX ebx, byte ptr [r13+2]
    MOV [rsp+1A8h+var_170], 0
    MOV r13, rax
    MOV [rsp+1A8h+var_181], 1
    JMP loc_46CDFB
loc_46D5FB:
    MOV esi, [rsp+1A8h+var_170]
    MOV rdx, rbp
    MOV rdi, r15
    XOR eax, eax
    CALL sub_4DD600
    JMP def_46CF0E
loc_46D611:
    PUSH qword ptr [rsp+1A8h+var_1A8+8]
    PUSH qword ptr [rsp+1B0h+var_1A8]
    MOV rdi, r15
    MOV edx, [rsp+1B8h+var_170]
    MOV esi, [rsp+1B8h+var_174]
    XOR eax, eax
    CALL sub_4DD600
    POP rax
    POP rdx
    JMP def_46CF0E
loc_46D632:
    PUSH qword ptr [rsp+1A8h+var_1A8+8]
    PUSH qword ptr [rsp+1B0h+var_1A8]
    MOV rdi, r15
    MOV esi, [rsp+1B8h+var_170]
    XOR eax, eax
    CALL sub_4DD600
    POP rdi
    POP r8
    JMP def_46CF0E
loc_46D650:
    MOV rax, [rsp+1A8h+var_198]
    MOV r15, [rax]
    MOVZX eax, byte ptr [r15]
    CMP al, 22h
    JZ loc_46D664
loc_46D660:
    CMP al, 27h
    JNZ loc_46D6A3
loc_46D664:
    MOVZX ebx, byte ptr [r15+1]
    TEST bl, bl
    JZ loc_46D6A3
loc_46D66D:
    CMP byte ptr [r15+2], 0
    JZ loc_46D681
loc_46D674:
    CMP cs:byte_752D40, 0
    JZ loc_46D85A
loc_46D681:
    MOV [rsp+1A8h+var_170], ebx
loc_46D685:
    MOVZX ebx, byte ptr [r13+2]
    ADD [rsp+1A8h+var_198], 8
    SUB [rsp+1A8h+var_188], 1
    MOV r13, qword ptr [rsp+1A8h+var_1A8]
    MOV [rsp+1A8h+var_181], 1
    JMP loc_46CDFB
loc_46D6A3:
    CALL ___errno_location
    LEA rsi, [rsp+1A8h+endptr]
    XOR edx, edx
    MOV rbp, rax
    XOR ecx, ecx
    MOV dword ptr [rax], 0
    MOV rdi, r15
    CALL ___strtol_internal
    MOV edx, [rbp+0]
    MOV rbx, rax
    MOV rax, [rsp+1A8h+endptr]
    TEST edx, edx
    JNZ loc_46D7D6
loc_46D6D5:
    CMP byte ptr [rax], 0
    JZ loc_46D71A
loc_46D6DA:
    CMP r15, rax
    MOV rdi, r15
    JZ loc_46D82F
loc_46D6E6:
    CALL sub_4D4D30
    MOV edx, 5
    MOV r15, rax
    MOV esi, offset aSValueNotCompl
loc_46D6F8:
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, r15
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_752D44, 1
loc_46D71A:
    TEST rbx, rbx
    JS loc_46D7C9
loc_46D723:
    CMP rbx, 7FFFFFFFh
    JLE loc_46D681
loc_46D730:
    MOV rax, [rsp+1A8h+var_198]
    MOV rdi, [rax]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidPrecisi_0
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax]
loc_46D768:
    MOV rdi, rbp
    CALL sub_4D4D30
    MOV esi, [rbx]
    MOV rcx, rax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_752D44, 1
    JMP loc_46D2B1
loc_46D792:
    MOV rdi, rbp
    CALL sub_4D4D30
    MOV esi, [r12]
    MOV rcx, rax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_752D44, 1
    JMP loc_46D19C
loc_46D7BE:
    MOV r12, rcx
    MOV r13, rax
    JMP loc_46CDFB
loc_46D7C9:
    MOV [rsp+1A8h+var_170], 0FFFFFFFFh
    JMP loc_46D685
loc_46D7D6:
    MOV rdi, r15
    CALL sub_4D4D30
    MOV esi, [rbp+0]
    MOV rcx, rax
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    MOV cs:dword_752D44, 1
    JMP loc_46D71A
loc_46D801:
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aSExpectedANume
    JMP loc_46D45E
loc_46D818:
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbp, rax
    MOV esi, offset aSExpectedANume
    JMP loc_46D50E
loc_46D82F:
    CALL sub_4D4D30
    MOV edx, 5
    MOV r15, rax
    MOV esi, offset aSExpectedANume
    JMP loc_46D6F8
loc_46D846:
    MOV [rsp+1A8h+var_F0], r15b
    JMP loc_46CCFC
loc_46D853:
    XOR edi, edi
    CALL sub_46C550
loc_46D85A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aWarningSCharac
    CALL _dcgettext
    LEA rcx, [r15+2]
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_46D681
loc_46D882:
    MOV rax, [rsp+1A8h+var_198]
    MOV rdi, [rax]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aInvalidFieldWi
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_46D8B7:
    MOV edx, 5
    MOV esi, offset aSInvalidConver
    XOR edi, edi
    CALL _dcgettext
    LEA rcx, [r13+1]
    MOV rdx, rax
    MOV r8, r14
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    SUB rcx, r14
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    NOP dword ptr [rax]
loc_46D8F0:
    MOV r9, [rsi+8]
    MOV r8, [rdi+8]
    CMP r9, r8
    MOV r10, r8
    CMOVLE r10, r9
    CMP cs:byte_7534C0, 0
    JNZ loc_46D950
loc_46D90B:
    TEST r10, r10
    JLE loc_46D93D
loc_46D910:
    MOV rdi, [rdi]
    MOV rsi, [rsi]
    MOVZX eax, byte ptr [rdi]
    MOVZX edx, byte ptr [rsi]
    SUB eax, edx
    JNZ locret_46D94D
loc_46D920:
    XOR edx, edx
    JMP loc_46D934
loc_46D928:
    MOVZX eax, byte ptr [rdi+rdx]
    MOVZX ecx, byte ptr [rsi+rdx]
    SUB eax, ecx
    JNZ locret_46D94D
loc_46D934:
    ADD rdx, 1
    CMP r10, rdx
    JNZ loc_46D928
loc_46D93D:
    XOR eax, eax
    CMP r9, r8
    MOV edx, 0FFFFFFFFh
    SETL al
    CMOVG eax, edx
loc_46D94D:
    REP 
loc_46D950:
    TEST r10, r10
    JLE loc_46D93D
loc_46D955:
    MOV rdi, [rdi]
    MOV rsi, [rsi]
    MOVZX eax, byte ptr [rdi]
    MOVZX edx, byte ptr [rsi]
    MOVZX eax, ds:byte_753100[rax]
    MOVZX edx, ds:byte_753100[rdx]
    SUB eax, edx
    JNZ locret_46D94D
loc_46D973:
    XOR edx, edx
    JMP loc_46D99A
loc_46D980:
    MOVZX eax, byte ptr [rdi+rdx]
    MOVZX ecx, byte ptr [rsi+rdx]
    MOVZX eax, ds:byte_753100[rax]
    MOVZX ecx, ds:byte_753100[rcx]
    SUB eax, ecx
    JNZ locret_46D94D
loc_46D99A:
    ADD rdx, 1
    CMP r10, rdx
    JNZ loc_46D980
loc_46D9A3:
    XOR eax, eax
    CMP r9, r8
    MOV edx, 0FFFFFFFFh
    SETL al
    CMOVG eax, edx
    JMP locret_46D94D
```
{'input_parameter_count': 3, 'input_parameter_types': ['Integer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'Comparison'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': False, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': [], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 0, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': False, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Control Flow'}

##### Q 247 - set_program_name
```assembly
loc_4B2BA0:
    TEST rdi, rdi
    PUSH rbx
    JZ loc_4B2C13
loc_4B2BA6:
    MOV esi, 2Fh
    MOV rbx, rdi
    CALL _strrchr
    TEST rax, rax
    JZ loc_4B2C03
loc_4B2BB8:
    LEA rdx, [rax+1]
    MOV rcx, rdx
    SUB rcx, rbx
    CMP rcx, 6
    JLE loc_4B2C03
loc_4B2BC8:
    LEA rsi, [rax-6]
    MOV edi, offset aLibs
    MOV ecx, 7
    REPE 
    JNZ loc_4B2C03
loc_4B2BDA:
    MOV ecx, 3
    MOV rsi, rdx
    MOV edi, offset aLt
    REPE 
    MOV rbx, rdx
    SETNBE sil
    SETB cl
    CMP sil, cl
    JNZ loc_4B2C03
loc_4B2BF8:
    LEA rbx, [rax+4]
    MOV cs:program_invocation_short_name, rbx
loc_4B2C03:
    MOV cs:qword_7355D8, rbx
    MOV cs:program_invocation_name, rbx
    POP rbx
    RETN 
loc_4B2C13:
    MOV rcx, cs:stderr
    MOV edx, 37h
    MOV esi, 1
    MOV edi, offset aANullArgv0WasP
    CALL _fwrite
    CALL _abort
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall'], 'loop_indicators': False, 'number_of_distinct_subroutine_call_targets': 2, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0xFFFFFFFF', '0x30', '0x68', '0x6C'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 9, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Memory Manipulation'}

##### T 247 - set_program_name
```assembly
loc_4D0200:
    TEST rdi, rdi
    PUSH rbx
    JZ loc_4D0273
loc_4D0206:
    MOV esi, 2Fh
    MOV rbx, rdi
    CALL _strrchr
    TEST rax, rax
    JZ loc_4D0263
loc_4D0218:
    LEA rdx, [rax+1]
    MOV rcx, rdx
    SUB rcx, rbx
    CMP rcx, 6
    JLE loc_4D0263
loc_4D0228:
    LEA rsi, [rax-6]
    MOV edi, offset aLibs
    MOV ecx, 7
    REPE 
    JNZ loc_4D0263
loc_4D023A:
    MOV ecx, 3
    MOV rsi, rdx
    MOV edi, offset aLt
    REPE 
    MOV rbx, rdx
    SETNBE sil
    SETB cl
    CMP sil, cl
    JNZ loc_4D0263
loc_4D0258:
    LEA rbx, [rax+4]
    MOV cs:program_invocation_short_name, rbx
loc_4D0263:
    MOV cs:qword_758598, rbx
    MOV cs:program_invocation_name, rbx
    POP rbx
    RETN 
loc_4D0273:
    MOV rcx, cs:stderr
    MOV edx, 37h
    MOV esi, 1
    MOV edi, offset aANullArgv0WasP
    CALL _fwrite
    CALL _abort
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 10, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x10', '0x8', '0x298', '0x180', '0x188', '0x178', '0x160'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 14, 'string_literal_presence': False, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Complex Data Processing'}

##### Q 248 - set_fd_flags
```assembly
loc_42E400:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV ebx, esi
    SUB rsp, 0A8h
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    AND ebx, 0FFFDFEFFh
    JNZ loc_42E450
loc_42E42A:
    MOV rax, [rsp+0C8h+var_30]
    XOR rax, fs:28h
    JNZ loc_42E517
loc_42E441:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_42E450:
    MOV esi, 3
    MOV ebp, edi
    MOV r13, rdx
    CALL sub_4BE110
    TEST eax, eax
    MOV r12d, eax
    JS loc_42E490
loc_42E466:
    OR ebx, eax
    CMP eax, ebx
    JZ loc_42E42A
loc_42E46C:
    TEST ebx, 10000h
    JNZ loc_42E4D0
loc_42E474:
    XOR eax, eax
    MOV edx, ebx
    MOV esi, 4
    MOV edi, ebp
    CALL sub_4BE110
    CMP eax, 0FFFFFFFFh
    JNZ loc_42E42A
loc_42E489:
    NOP dword ptr [rax+00000000h]
loc_42E490:
    CALL ___errno_location
    MOV rbx, rax
loc_42E498:
    MOV rsi, r13
    MOV edi, 4
    CALL sub_4B5100
    MOV edx, 5
    MOV esi, offset aSettingFlagsFo
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV rcx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL sub_42E1C0
    NOP dword ptr [rax]
loc_42E4D0:
    MOV rdx, rsp
    MOV esi, ebp
    MOV edi, 1
    CALL ___fxstat
    TEST eax, eax
    JNZ loc_42E490
loc_42E4E3:
    MOV eax, [rsp+0C8h+var_B0]
    AND eax, 0F000h
    CMP eax, 4000h
    JZ loc_42E503
loc_42E4F3:
    CALL ___errno_location
    MOV rbx, rax
    MOV dword ptr [rax], 14h
    JMP loc_42E498
loc_42E503:
    AND ebx, 0FFFEFFFFh
    CMP r12d, ebx
    JNZ loc_42E474
loc_42E512:
    JMP loc_42E42A
loc_42E517:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 1, 'input_parameter_types': ['Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 8, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x497B74', '0x107FF', '0x10804'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 11, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': True, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing', 'inferred_category': 'Utility/Helper'}

##### T 248 - set_fd_flags
```assembly
loc_4311C0:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV ebx, esi
    SUB rsp, 0A8h
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_30], rax
    XOR eax, eax
    AND ebx, 0FFFDFEFFh
    JNZ loc_431210
loc_4311EA:
    MOV rax, [rsp+0C8h+var_30]
    XOR rax, fs:28h
    JNZ loc_4312D7
loc_431201:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_431210:
    MOV esi, 3
    MOV ebp, edi
    MOV r13, rdx
    CALL sub_4E0290
    TEST eax, eax
    MOV r12d, eax
    JS loc_431250
loc_431226:
    OR ebx, eax
    CMP eax, ebx
    JZ loc_4311EA
loc_43122C:
    TEST ebx, 10000h
    JNZ loc_431290
loc_431234:
    XOR eax, eax
    MOV edx, ebx
    MOV esi, 4
    MOV edi, ebp
    CALL sub_4E0290
    CMP eax, 0FFFFFFFFh
    JNZ loc_4311EA
loc_431249:
    NOP dword ptr [rax+00000000h]
loc_431250:
    CALL ___errno_location
    MOV rbx, rax
loc_431258:
    MOV rsi, r13
    MOV edi, 4
    CALL sub_4D2F70
    MOV edx, 5
    MOV esi, offset aSettingFlagsFo
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV esi, [rbx]
    MOV rdx, rax
    MOV rcx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL sub_430F80
    NOP dword ptr [rax]
loc_431290:
    MOV rdx, rsp
    MOV esi, ebp
    MOV edi, 1
    CALL ___fxstat
    TEST eax, eax
    JNZ loc_431250
loc_4312A3:
    MOV eax, [rsp+0C8h+var_B0]
    AND eax, 0F000h
    CMP eax, 4000h
    JZ loc_4312C3
loc_4312B3:
    CALL ___errno_location
    MOV rbx, rax
    MOV dword ptr [rax], 14h
    JMP loc_431258
loc_4312C3:
    AND ebx, 0FFFEFFFFh
    CMP r12d, ebx
    JNZ loc_431234
loc_4312D2:
    JMP loc_4311EA
loc_4312D7:
    CALL ___stack_chk_fail
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Integer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 11, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x4BFAA4', '0x107FF', '0x10804', '0x1', '0x8'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 18, 'string_literal_presence': True, 'likely_modifies_input_parameters': True, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': True, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Undetermined', 'inferred_category': 'Database/Record Processing'}

##### Q 249 - process_field
```assembly
loc_4567C0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 168h
    MOV rax, fs:28h
    MOV [rsp+198h+var_40], rax
    XOR eax, eax
    MOV rax, cs:base
    TEST rax, rax
    JNZ loc_45680F
loc_4567F6:
    JMP loc_456860
loc_456800:
    CMP rbp, rdx
    JB loc_45680B
loc_456805:
    CMP rbp, [rax+8]
    JBE loc_456866
loc_45680B:
    ADD rax, 10h
loc_45680F:
    MOV rdx, [rax]
    CMP rdx, 0FFFFFFFFFFFFFFFFh
    JNZ loc_456800
loc_456818:
    MOV rsi, cs:stdout
    MOV rdi, r12
    MOV ebx, 1
    CALL _fputs_unlocked
loc_45682C:
    MOV rcx, [rsp+198h+var_40]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_457CCE
loc_456845:
    ADD rsp, 168h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_456860:
    CMP rsi, 1
    JNZ loc_456818
loc_456866:
    MOV r13, cs:qword_72FAF0
    TEST r13, r13
    JZ loc_4568B8
loc_456872:
    MOV rdi, r12
    CALL _strlen
    MOV rdi, r13
    MOV rbx, rax
    CALL _strlen
    CMP rbx, rax
    JBE loc_4568B8
loc_45688A:
    SUB rbx, rax
    MOV rdi, r13
    ADD rbx, r12
    MOV rsi, rbx
    CALL _strcmp
    TEST eax, eax
    JNZ loc_456A47
loc_4568A3:
    CMP cs:byte_72FA88, 0
    MOV byte ptr [rbx], 0
    JNZ loc_456D9D
loc_4568B3:
    NOP dword ptr [rax+rax+00h]
loc_4568B8:
    MOVZX ebx, byte ptr [r12]
    TEST bl, bl
    JZ loc_456DC5
loc_4568C5:
    CALL ___ctype_b_loc
    MOV r13, r12
    MOV rax, [rax]
    JMP loc_4568E5
loc_4568D8:
    ADD r13, 1
    MOVZX ebx, byte ptr [r13+0]
    TEST bl, bl
    JZ loc_4568EB
loc_4568E5:
    TEST byte ptr [rax+rbx*2], 1
    JNZ loc_4568D8
loc_4568EB:
    MOV eax, r12d
    SUB eax, r13d
loc_4568F1:
    MOV r11d, cs:dword_72FAA8
    TEST r11d, r11d
    JZ loc_456A00
loc_456901:
    TEST eax, eax
    JNZ loc_456B44
loc_456909:
    CMP rbp, 1
    JG loc_456B44
loc_456913:
    MOV cs:qword_72FAD0, 0
loc_45691E:
    MOVZX eax, cs:byte_72FA88
    TEST al, al
    JNZ loc_4569E1
loc_45692D:
    PXOR xmm2, xmm2
    MOV ebp, cs:dword_72FB00
    MOV [rsp+198h+s1], 0
    MOV dword ptr [rsp+198h+var_188], 3E8h
    MOVSS dword ptr [rsp+198h+var_198], xmm2
    LEA edx, [rbp-3]
    FLD dword ptr [rsp+198h+var_198]
    CMP edx, 1
    FSTP [rsp+198h+var_128]
    JA loc_4569AA
loc_45695C:
    MOV dword ptr [rsp+198h+var_188], 400h
loc_456964:
    TEST al, al
    JZ loc_4569AA
loc_456968:
    MOV rsi, cs:qword_72FA90
    MOV edi, 1
    CALL sub_4B5420
    MOV rsi, r13
    XOR edi, edi
    MOV rbx, rax
    CALL sub_4B5420
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV r9d, 12h
    MOV r8, rbx
    MOV edx, offset aSimpleStrtodHu
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4569AA:
    LEA rcx, [rsp+198h+var_13A]
    LEA rdx, [rsp+198h+var_128]
    LEA rsi, [rsp+198h+s1]
    MOV rdi, r13
    CALL sub_4564E0
    CMP eax, 1
    MOV r14d, eax
    JBE loc_456B80
loc_4569CD:
    CMP r14d, 6
    JA def_4569DA
loc_4569D7:
    MOV eax, r14d
    JMP ds:jpt_4569DA[rax*8]
loc_4569E1:
    MOV rcx, cs:qword_72FAD0
    MOV rdi, cs:stderr
    MOV edx, offset aSettingAutoPad
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_456A00:
    PXOR xmm1, xmm1
    MOV ebp, cs:dword_72FB00
    MOVZX eax, cs:byte_72FA88
    MOV [rsp+198h+s1], 0
    MOV dword ptr [rsp+198h+var_188], 3E8h
    MOVSS dword ptr [rsp+198h+var_198], xmm1
    LEA edx, [rbp-3]
    FLD dword ptr [rsp+198h+var_198]
    CMP edx, 1
    FSTP [rsp+198h+var_128]
    JA loc_456964
loc_456A3A:
    MOV dword ptr [rsp+198h+var_188], 400h
    JMP loc_456964
loc_456A47:
    CMP cs:byte_72FA88, 0
    JZ loc_4568B8
loc_456A54:
    MOV rcx, cs:stderr
    MOV edx, 16h
    MOV esi, 1
    MOV edi, offset aNoValidSuffixF
    CALL _fwrite
    JMP loc_4568B8
loc_456A74:
    XOR ebx, ebx
    MOV ebp, offset aInvalidNumberS
loc_456A7B:
    CMP cs:dword_72FAF8, 3
    JZ loc_456AB3
loc_456A84:
    MOV rdi, r13
    CALL sub_4B5440
    MOV edx, 5
    MOV rsi, rbp
    XOR edi, edi
    MOV r13, rax
    CALL _dcgettext
    MOV edi, cs:status
    MOV rdx, rax
    MOV rcx, r13
    XOR esi, esi
    XOR eax, eax
    CALL _error
loc_456AB3:
    MOV rax, cs:qword_71FF70
    MOV rdx, cs:qword_71FF68
    CMP rax, 1
    JZ loc_456D00
loc_456ACB:
    MOV qword ptr [rsp+198h+var_188], rax
    TEST rax, rax
    FILD qword ptr [rsp+198h+var_188]
    JS loc_456D13
loc_456ADD:
    MOV qword ptr [rsp+198h+var_188], rdx
    TEST rdx, rdx
    FLD [rsp+198h+var_128]
    FMULP st(1), st
    FILD qword ptr [rsp+198h+var_188]
    JS loc_456B2A
loc_456AF1:
    FDIVP st(1), st
loc_456AF3:
    CMP r14d, 1
    JBE loc_456C40
loc_456AFD:
    FSTP st
    JMP loc_456B08
loc_456B01:
    FSTP st
    NOP dword ptr [rax+rax+00h]
loc_456B08:
    MOV rsi, cs:stdout
    MOV rdi, r12
    XOR ebx, ebx
    CALL _fputs_unlocked
    JMP loc_45682C
loc_456B1E:
    XOR ebx, ebx
    MOV ebp, offset aValueTooLargeT
    JMP loc_456A7B
loc_456B2A:
    FADD cs:flt_4F04D8
    JMP loc_456AF1
loc_456B32:
    XOR ebx, ebx
loc_456B34:
    MOV r14d, 4
    MOV ebp, offset aRejectingSuffi
    JMP loc_456A7B
loc_456B44:
    MOV rdi, r12
    CALL _strlen
    CMP rax, cs:qword_72FAD8
    MOV cs:qword_72FAD0, rax
    JB loc_45691E
loc_456B60:
    MOV rdi, rax
    CALL sub_456790
    JMP loc_45691E
loc_456B6D:
    XOR ebx, ebx
    XOR ebp, ebp
    JMP loc_456A7B
loc_456B80:
    MOVSXD r15, cs:dword_72FA8C
    MOV rcx, [rsp+198h+s1]
    XOR ebx, ebx
    MOV rsi, cs:qword_72FA90
    MOV rdi, rcx
    MOV qword ptr [rsp+198h+var_178], rcx
    MOV rdx, r15
    CALL _strncmp
    TEST eax, eax
    MOV rcx, qword ptr [rsp+198h+var_178]
    JZ loc_456D37
loc_456BB2:
    CMP cs:byte_72FA88, 0
    JNZ loc_456D72
loc_456BBF:
    MOV r15, [rsp+198h+s1]
    MOVZX edx, byte ptr [r15]
    TEST dl, dl
    MOV byte ptr [rsp+198h+var_178], dl
    JZ loc_456D1E
loc_456BD4:
    CALL ___ctype_b_loc
    MOVZX edx, byte ptr [rsp+198h+var_178]
    MOV rsi, [rax]
    MOV rax, r15
    JMP loc_456BFA
loc_456BF0:
    MOV [rsp+198h+s1], rax
    MOVZX edx, byte ptr [r15+1]
loc_456BFA:
    MOVZX ecx, dl
    MOV r15, rax
    LEA rax, [rax+1]
    TEST byte ptr [rsi+rcx*2], 1
    JNZ loc_456BF0
loc_456C0A:
    MOVSX esi, dl
    MOV edi, offset aKmgtpezy
    MOV byte ptr [rsp+198h+var_178], dl
    CALL _strchr
    TEST rax, rax
    MOVZX edx, byte ptr [rsp+198h+var_178]
    JNZ loc_456F12
loc_456C29:
    MOV r14d, 5
    MOV ebp, offset aInvalidSuffixI
    JMP loc_456A7B
loc_456C40:
    FLD cs:tbyte_4F04F0
    FXCH st(1)
    MOV rax, cs:qword_71FF60
    CMP rax, 0FFFFFFFFFFFFFFFFh
    CMOVNZ rbx, rax
    FUCOMI st, st(1)
    FSTP st(1)
    JB loc_456C95
loc_456C5D:
    FLD cs:tbyte_4F0500
    FUCOMIP st, st(1)
    JB loc_456C95
loc_456C67:
    FLD st
    XOR eax, eax
    FLDZ 
    FLD cs:flt_4F04D0
    JMP loc_456C87
loc_456C78:
    FXCH st(2)
loc_456C7A:
    FUCOMIP st, st(1)
    JB loc_456EB1
loc_456C82:
    FDIV st(2), st
    ADD eax, 1
loc_456C87:
    FLD st(2)
    FXCH st(2)
    FUCOMI st, st(3)
    JBE loc_456C78
loc_456C8F:
    FXCH st(2)
    FCHS 
    JMP loc_456C7A
loc_456C95:
    MOV ebp, cs:dword_72FAFC
    TEST ebp, ebp
    JNZ loc_456F84
loc_456CA3:
    CMP rbx, 12h
    JBE loc_456F84
loc_456CAD:
    CMP cs:dword_72FAF8, 3
    JZ loc_456B01
loc_456CBA:
    TEST rbx, rbx
    MOV edx, 5
    FSTP [rsp+198h+var_198]
    JZ loc_457779
loc_456CCB:
    MOV esi, offset aValuePrecision
    XOR edi, edi
    CALL _dcgettext
    MOV edi, cs:status
    SUB rsp, 10h
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    FLD [rsp+1A8h+var_198]
    FSTP [rsp+1A8h+var_1A8]
    CALL _error
    POP rcx
    POP rsi
    JMP loc_456B08
loc_456D00:
    CMP rdx, 1
    JNZ loc_456ACB
loc_456D0A:
    FLD [rsp+198h+var_128]
    JMP loc_456AF3
loc_456D13:
    FADD cs:flt_4F04D8
    JMP loc_456ADD
loc_456D1E:
    CMP ebp, 4
    JNZ loc_456DD6
loc_456D27:
    MOV r14d, 6
    MOV ebp, offset aMissingISuffix
    JMP loc_456A7B
loc_456D37:
    LEA rdi, [rcx+r15]
    FLD dword ptr [rsp+198h+var_198]
    LEA rcx, [rsp+198h+var_139]
    LEA rdx, [rsp+198h+var_118]
    LEA rsi, [rsp+198h+var_130]
    FSTP [rsp+198h+var_118]
    MOV [rsp+198h+s1], rdi
    CALL sub_4564E0
    CMP eax, 1
    JBE loc_4573DC
loc_456D6A:
    MOV r14d, eax
    JMP loc_4569CD
loc_456D72:
    MOV rdi, cs:stderr
    PUSH qword ptr [rsp+198h+var_128+8]
    MOV ecx, ebx
    PUSH qword ptr [rsp+1A0h+var_128]
    MOV edx, offset aParsedNumericV
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    POP r9
    POP r10
    JMP loc_456BBF
loc_456D9D:
    MOV rdi, r13
    CALL sub_4B5440
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, offset aTrimmingSuffix
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_4568B8
loc_456DC5:
    MOV r13, r12
    XOR eax, eax
    JMP loc_4568F1
loc_456DCF:
    XOR ebx, ebx
    JMP loc_456D27
loc_456DD6:
    MOVZX edx, cs:byte_72FA88
    FLD1 
    XOR r8d, r8d
loc_456DE2:
    TEST dl, dl
    JNZ loc_45735F
loc_456DEA:
    FLD tbyte ptr [rsp+1A8h+s1]
    FMULP st(1), st
    FSTP tbyte ptr [rsp+1A8h+s1]
    JMP loc_456DF8
loc_456DF6:
    FSTP st
loc_456DF8:
    MOV rsi, [rsp+1A8h+var_148]
    TEST rsi, rsi
    JZ loc_456E68
loc_456E02:
    CMP byte ptr [rsi], 0
    JZ loc_456E68
loc_456E07:
    CMP cs:dword_72FAF8, 3
    MOV r14d, 5
    JZ loc_456AB3
loc_456E1A:
    MOV edi, 1
    CALL sub_4B5420
    MOV rsi, r13
    XOR edi, edi
    MOV r15, rax
    CALL sub_4B5420
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aInvalidSuffixI_0
    MOV rbp, rax
    CALL _dcgettext
    MOV edi, cs:status
    MOV rdx, rax
    MOV r8, r15
    MOV rcx, rbp
    XOR esi, esi
    XOR eax, eax
    CALL _error
    JMP loc_456AB3
loc_456E68:
    CMP r14d, 1
    JNZ loc_457BDB
loc_456E72:
    CMP cs:byte_72FA98, 0
    JZ loc_456AB3
loc_456E7F:
    MOV rdi, r13
    CALL sub_4B5440
    XOR edi, edi
    MOV rbp, rax
    MOV edx, 5
    MOV esi, offset aLargeInputValu
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_456AB3
loc_456EB1:
    FSTP st
    FSTP st
    FSTP st
    MOV ebp, cs:dword_72FAFC
    TEST ebp, ebp
    JZ loc_457C4B
loc_456EC5:
    CMP eax, 1Ah
    JBE loc_456F84
loc_456ECE:
    CMP cs:dword_72FAF8, 3
    FSTP [rsp+198h+var_198]
    JZ loc_456B08
loc_456EDE:
    MOV edx, 5
    MOV esi, offset aValueTooLargeT_0
loc_456EE8:
    XOR edi, edi
    CALL _dcgettext
    FLD [rsp+198h+var_198]
    MOV edi, cs:status
    SUB rsp, 10h
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    FSTP [rsp+1A8h+var_1A8]
    CALL _error
    POP rax
    POP rdx
    JMP loc_456B08
loc_456F12:
    TEST ebp, ebp
    JZ loc_456B34
loc_456F1A:
    SUB edx, 45h
    XOR r8d, r8d
    CMP dl, 15h
    JA loc_456F30
loc_456F25:
    MOVZX edx, dl
    MOV r8d, ds:dword_4F00C0[rdx*4]
loc_456F30:
    LEA rax, [r15+1]
    CMP ebp, 1
    MOV [rsp+198h+s1], rax
    JZ loc_457ADD
loc_456F42:
    CMP ebp, 4
    JZ loc_457CE5
loc_456F4B:
    FILD dword ptr [rsp+198h+var_188]
    MOVZX edx, cs:byte_72FA88
loc_456F56:
    TEST r8d, r8d
    JZ loc_457C40
loc_456F5F:
    MOV eax, r8d
    SUB eax, 1
    FLD st
    JZ loc_456F7B
loc_456F69:
    NOP dword ptr [rax+00000000h]
loc_456F70:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_456F70
loc_456F77:
    FSTP st(1)
    JMP loc_456F7D
loc_456F7B:
    FSTP st(1)
loc_456F7D:
    XOR ebx, ebx
    JMP loc_456DE2
loc_456F84:
    MOV r14d, cs:dword_72FAE8
    MOV r15d, cs:dword_71FF78
    MOV [rsp+198h+var_108], 25h
    TEST r14d, r14d
    JZ loc_457768
loc_456FA3:
    LEA r13, [rsp+198h+var_108]
    MOV [rsp+198h+var_107], 27h
    LEA r12, [r13+2]
loc_456FB7:
    MOV r9, cs:qword_72FAC8
    TEST r9, r9
    JNZ loc_45778D
loc_456FC7:
    MOVZX edx, cs:byte_72FA88
    TEST dl, dl
    JNZ loc_4577BE
loc_456FD6:
    TEST ebp, ebp
    JNZ loc_457452
loc_456FDE:
    TEST ebx, ebx
    MOV esi, ebx
    JZ loc_4577ED
loc_456FE8:
    MOV eax, ebx
    SUB eax, 1
    JZ loc_457B89
loc_456FF3:
    FLD cs:flt_4F04D0
    MOV ecx, eax
    FLD st
    FLD st(1)
loc_456FFF:
    SUB ecx, 1
    FMUL st(1), st
    JNZ loc_456FFF
loc_457006:
    FSTP st
    FMUL st, st(2)
    FNSTCW [rsp+198h+var_14A]
    MOVZX ecx, [rsp+198h+var_14A]
    FLD cs:tbyte_4F0510
    OR ch, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], cx
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_188]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_188]
    FMULP st(1), st
    FSUB st(1), st
    JA def_457049
loc_457043:
    FSTP st(2)
    JMP loc_457049
loc_457047:
    FSTP st(2)
loc_457049:
    JMP ds:jpt_457049[r15*8]
loc_457051:
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    FXCH st(1)
    FUCOMIP st, st(1)
    JBE loc_457078
loc_457067:
    FSTP st
    MOV rcx, qword ptr [rsp+198h+var_198]
    ADD rcx, 1
    MOV qword ptr [rsp+198h+var_198], rcx
    FILD qword ptr [rsp+198h+var_198]
loc_457078:
    TEST esi, esi
    FADDP st(1), st
    JNZ loc_45793A
loc_457082:
    TEST dl, dl
    MOV ebp, ebx
    JZ loc_4570D0
loc_457088:
    FXCH st(1)
    FSTP [rsp+198h+var_188]
    TEST r14d, r14d
    MOV eax, offset aNoScalingRetur
    MOV edx, offset aNoScalingRetur_0
    CMOVZ rdx, rax
    SUB rsp, 10h
    MOV ecx, ebx
    MOV rdi, cs:stderr
    MOV esi, 1
    XOR eax, eax
    FLD st
    FSTP [rsp+1A8h+var_1A8]
    FSTP [rsp+1A8h+var_198]
    CALL ___fprintf_chk
    POP r14
    POP r15
    FLD [rsp+198h+var_188]
    FLD [rsp+198h+var_198]
    FXCH st(1)
    JMP loc_4570D2
loc_4570D0:
    FXCH st(1)
loc_4570D2:
    MOV dword ptr [r12], 664C2A2Eh
    MOV byte ptr [r12+4], 0
    LEA r12, [rsp+198h+src]
    SUB rsp, 10h
    XOR eax, eax
    MOV r9d, ebp
    MOV r8, r13
    MOV ecx, 80h
    MOV edx, 1
    MOV esi, 80h
    MOV rdi, r12
    FSTP [rsp+1A8h+var_188]
    FLD st
    FSTP [rsp+1A8h+var_1A8]
    FSTP [rsp+1A8h+var_198]
    CALL ___snprintf_chk
    CMP eax, 7Fh
    POP r11
    POP rbx
    FLD [rsp+198h+var_198]
    JA loc_457C09
loc_457127:
    FSTP st
    MOVZX ebx, cs:byte_72FA88
    FLD [rsp+198h+var_188]
loc_457134:
    MOV rsi, cs:qword_72FAF0
    TEST rsi, rsi
    JZ loc_457194
loc_457140:
    MOV rdx, r12
loc_457143:
    MOV ecx, [rdx]
    ADD rdx, 4
    LEA eax, [rcx-1010101h]
    NOT ecx
    AND eax, ecx
    AND eax, 80808080h
    JZ loc_457143
loc_45715A:
    MOV ecx, eax
    MOV rdi, r12
    SHR ecx, 10h
    TEST eax, 8080h
    CMOVZ eax, ecx
    LEA rcx, [rdx+2]
    FSTP [rsp+198h+var_198]
    CMOVZ rdx, rcx
    MOV ecx, eax
    ADD cl, al
    MOV rax, r12
    MOV ecx, 80h
    SBB rdx, 3
    SUB rax, rdx
    LEA rdx, [rax+7Fh]
    CALL ___strncat_chk
    FLD [rsp+198h+var_198]
loc_457194:
    TEST bl, bl
    JZ loc_4571CD
loc_457198:
    MOV rdi, r12
    FSTP [rsp+198h+var_198]
    CALL sub_4B5440
    SUB rsp, 10h
    MOV rcx, rax
    MOV edx, offset aFormattingOutp
    MOV rdi, cs:stderr
    MOV esi, 1
    XOR eax, eax
    FLD [rsp+1A8h+var_198]
    FSTP [rsp+1A8h+var_1A8]
    CALL ___fprintf_chk
    POP rax
    POP rdx
    JMP loc_4571CF
loc_4571CD:
    FSTP st
loc_4571CF:
    MOV rcx, cs:qword_72FAD0
    MOV rax, r12
    TEST rcx, rcx
    JZ loc_457296
loc_4571E2:
    MOV esi, [rax]
    ADD rax, 4
    LEA edx, [rsi-1010101h]
    NOT esi
    AND edx, esi
    AND edx, 80808080h
    JZ loc_4571E2
loc_4571FA:
    MOV esi, edx
    SHR esi, 10h
    TEST edx, 8080h
    CMOVZ edx, esi
    LEA rsi, [rax+2]
    MOV edi, edx
    CMOVZ rax, rsi
    ADD dil, dl
    SBB rax, 3
    SUB rax, r12
    CMP rax, rcx
    JB loc_45795D
loc_457225:
    LEA rdi, [rax+1]
    CMP rdi, cs:qword_72FAD8
    JNB loc_457853
loc_457236:
    MOV rdi, cs:qword_72FAE0
    MOV rsi, r12
    CALL _strcpy
loc_457245:
    MOV rdi, cs:qword_72FAB8
    TEST rdi, rdi
    JZ loc_45725D
loc_457251:
    MOV rsi, cs:stdout
    CALL _fputs_unlocked
loc_45725D:
    MOV rdi, cs:qword_72FAE0
    MOV rsi, cs:stdout
    MOV ebx, 1
    CALL _fputs_unlocked
    MOV rdi, cs:qword_72FAB0
    TEST rdi, rdi
    JZ loc_45682C
loc_457285:
    MOV rsi, cs:stdout
    CALL _fputs_unlocked
    JMP loc_45682C
loc_457296:
    MOV ecx, [rax]
    ADD rax, 4
    LEA edx, [rcx-1010101h]
    NOT ecx
    AND edx, ecx
    AND edx, 80808080h
    JZ loc_457296
loc_4572AE:
    MOV ecx, edx
    SHR ecx, 10h
    TEST edx, 8080h
    CMOVZ edx, ecx
    LEA rcx, [rax+2]
    CMOVZ rax, rcx
    MOV ecx, edx
    ADD cl, dl
    SBB rax, 3
    SUB rax, r12
    JMP loc_457225
loc_4572D4:
    FLDZ; 
    FUCOMIP st, st(1)
    JA loc_457BE3
loc_4572DE:
    FADD cs:flt_4F04DC
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_457078
loc_4572F7:
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_457078
loc_45730A:
    FLDZ; 
    FUCOMIP st, st(1)
    JBE loc_457051
loc_457314:
    FCHS 
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP [rsp+198h+var_158]
    FLDCW [rsp+198h+var_14A]
loc_457324:
    MOV rax, [rsp+198h+var_158]
    MOV qword ptr [rsp+198h+var_198], rax
    LEA rcx, [rax+1]
    FILD qword ptr [rsp+198h+var_198]
    FXCH st(1)
    FUCOMIP st, st(1)
    FSTP st
    CMOVA rax, rcx
    NEG rax
    MOV qword ptr [rsp+198h+var_198], rax
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_457078
loc_45734D:
    FCHS; 
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP [rsp+198h+var_158]
    FLDCW [rsp+198h+var_14A]
    JMP loc_457324
loc_45735F:
    SUB rsp, 10h
    MOV rdi, cs:stderr
    XOR eax, eax
    FLD st
    FSTP [rsp+1B8h+var_1B8]
    MOV ecx, dword ptr [rsp+1B8h+var_198]
    MOV edx, offset aSuffixPowerDDL
    MOV esi, 1
    FSTP [rsp+1B8h+var_188]
    CALL ___fprintf_chk
    CMP cs:byte_72FA88, 0
    FLD tbyte ptr [rsp+1B8h+s1]
    FLD [rsp+1B8h+var_188]
    FMULP st(1), st
    FLD st
    FSTP tbyte ptr [rsp+1B8h+s1]
    POP rdi
    POP r8
    JZ loc_456DF6
loc_4573AE:
    SUB rsp, 20h
    MOV rdi, cs:stderr
    MOV edx, offset aReturningValue
    FLD st
    FSTP [rsp+1C8h+var_1B8]
    MOV esi, 1
    XOR eax, eax
    FSTP [rsp+1C8h+var_1C8]
    CALL ___fprintf_chk
    ADD rsp, 20h
    JMP loc_456DF8
loc_4573DC:
    MOV eax, 1
    CMOVZ r14d, eax
    CMP [rsp+198h+var_139], 0
    JNZ loc_457783
loc_4573F0:
    MOV rdx, [rsp+198h+var_130]
    FLD [rsp+198h+var_118]
    MOV rbx, rdx
    SUB rbx, [rsp+198h+s1]
    TEST ebx, ebx
    JZ loc_457899
loc_45740C:
    MOV eax, ebx
    SUB eax, 1
    JZ loc_457CFE
loc_457417:
    FLD cs:flt_4F04D0
    FLD st
loc_45741F:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_45741F
loc_457426:
    FSTP st(1)
loc_457428:
    FDIVP st(1), st
    CMP [rsp+198h+var_13A], 0
    FLD st
    FSTP [rsp+198h+var_118]
    FLD [rsp+198h+var_128]
    JZ loc_4578CC
loc_457442:
    FSUBRP st(1), st
    FSTP [rsp+198h+var_128]
loc_457448:
    MOV [rsp+198h+s1], rdx
    JMP loc_456BB2
loc_457452:
    LEA eax, [rbp-3]
    CMP eax, 1
    JBE loc_457838
loc_45745E:
    MOVSD xmm3, cs:qword_4F04E8
    MOV dword ptr [rsp+198h+var_178], 3E8h
    MOVSD qword ptr [rsp+198h+var_188], xmm3
loc_457474:
    FLD cs:tbyte_4F04F0
    FXCH st(1)
    FUCOMI st, st(1)
    FSTP st(1)
    JB loc_4574B5
loc_457482:
    FLD cs:tbyte_4F0500
    FUCOMIP st, st(1)
    JB loc_4574B5
loc_45748C:
    FILD dword ptr [rsp+198h+var_178]
    XOR ebx, ebx
    FLD st(1)
    FLDZ 
    JMP loc_4574A7
loc_457498:
    FXCH st(1)
loc_45749A:
    FUCOMIP st, st(3)
    JB loc_4574BB
loc_45749E:
    FXCH st(1)
    FDIV st, st(2)
    FXCH st(1)
    ADD ebx, 1
loc_4574A7:
    FLD st(1)
    FXCH st(1)
    FUCOMI st, st(2)
    JBE loc_457498
loc_4574AF:
    FXCH st(1)
    FCHS 
    JMP loc_45749A
loc_4574B5:
    FLD st
    XOR ebx, ebx
    JMP loc_4574BF
loc_4574BB:
    FSTP st
    FSTP st(1)
loc_4574BF:
    TEST dl, dl
    JNZ loc_457A76
loc_4574C7:
    MOV rcx, cs:qword_71FF60
    CMP rcx, 0FFFFFFFFFFFFFFFFh
    JZ loc_457A15
loc_4574D8:
    LEA eax, [rbx+rbx*2]
    CMP rax, rcx
    CMOVG rax, rcx
    TEST eax, eax
    MOV edi, eax
    JNZ loc_4578D7
loc_4574EC:
    JMP loc_4574F0
loc_4574EE:
    FSTP st
loc_4574F0:
    FLD cs:tbyte_4F0510
    FNSTCW [rsp+198h+var_14A]
    MOVZX eax, [rsp+198h+var_14A]
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], ax
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FSUB st(1), st
    JA def_45752B
loc_457529:
    XOR edi, edi
    JMP ds:jpt_45752B[r15*8]
loc_457533:
    FXCH st(1)
    JMP loc_457539
loc_457537:
    FXCH st(1)
loc_457539:
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
loc_457549:
    TEST edi, edi
    FADDP st(1), st
    JZ loc_45785D
loc_457553:
    MOV eax, edi
    SUB eax, 1
    JZ loc_457CDA
loc_45755E:
    FLD cs:flt_4F04D0
loc_457564:
    FLD st
loc_457566:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_457566
loc_45756D:
    FSTP st(1)
loc_45756F:
    FDIVP st(1), st
    FLDZ 
    FUCOMIP st, st(1)
    JA loc_457AC4
loc_45757B:
    FLD qword ptr [rsp+198h+var_188]
    FXCH st(1)
    FUCOMI st, st(1)
    JB loc_457592
loc_457585:
    JMP loc_45758B
loc_457587:
    FSTP st
    FXCH st(1)
loc_45758B:
    FDIVRP st(1), st
    ADD ebx, 1
    JMP loc_457594
loc_457592:
    FSTP st(1)
loc_457594:
    FLDZ 
    FXCH st(1)
    FUCOMI st, st(1)
    FSTP st(1)
    JP loc_4578A0
loc_4575A2:
    JNZ loc_4578A0
loc_4575A8:
    JMP loc_4575AC
loc_4575AA:
    FSTP st(1)
loc_4575AC:
    XOR r14d, r14d
loc_4575AF:
    TEST dl, dl
    JNZ loc_4579C9
loc_4575B7:
    CMP rcx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 7325h
    MOV dword ptr [r12], 664C2A2Eh
    CMOVNZ r14d, ecx
    CMP ebx, 8
    MOV [r12+4], si
    MOV byte ptr [r12+6], 0
    MOV eax, offset aError
    JA loc_4575F0
loc_4575E2:
    FXCH st(1)
    MOV eax, ebx
    MOV rax, ds:off_4F0060[rax*8]
    JMP loc_4575F2
loc_4575F0:
    FXCH st(1)
loc_4575F2:
    FSTP [rsp+198h+var_188]
    LEA r12, [rsp+198h+src]
    SUB rsp, 8
    MOV r9d, r14d
    MOV r8, r13
    MOV ecx, 80h
    MOV edx, 1
    PUSH rax
    MOV esi, 7Fh
    XOR eax, eax
    MOV rdi, r12
    SUB rsp, 10h
    FLD st
    FSTP [rsp+1B8h+var_1B8]
    FSTP [rsp+1B8h+var_198]
    CALL ___snprintf_chk
    ADD rsp, 20h
    CMP eax, 7Eh
    FLD [rsp+198h+var_188]
    JA loc_457C5F
loc_457640:
    CMP ebp, 4
    JNZ loc_45766B
loc_457645:
    TEST ebx, ebx
    JZ loc_45766B
loc_457649:
    CDQE 
    MOV edx, 7Fh
    MOV ecx, 80h
    SUB rdx, rax
    MOV esi, (offset aIecI+4)
    MOV rdi, r12
    FSTP [rsp+198h+var_198]
    CALL ___strncat_chk
    FLD [rsp+198h+var_198]
loc_45766B:
    MOVZX ebx, cs:byte_72FA88
    TEST bl, bl
    JNZ loc_457864
loc_45767A:
    MOV rsi, cs:qword_72FAF0
    TEST rsi, rsi
    JNZ loc_457140
loc_45768A:
    FSTP st
    JMP loc_4571CF
loc_457691:
    FLDZ; 
    FUCOMIP st, st(2)
    JA loc_457B40
loc_45769B:
    FXCH st(1)
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FXCH st(1)
    FUCOMIP st, st(1)
    JBE loc_457549
loc_4576B9:
    FSTP st
loc_4576BB:
    MOV rax, qword ptr [rsp+198h+var_178]
    ADD rax, 1
    MOV qword ptr [rsp+198h+var_178], rax
    FILD qword ptr [rsp+198h+var_178]
    JMP loc_457549
loc_4576D2:
    FXCH st(1)
    JMP loc_4576D8
loc_4576D6:
    FXCH st(1)
loc_4576D8:
    FCHS 
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP [rsp+198h+var_158]
    FLDCW [rsp+198h+var_14A]
loc_4576E8:
    MOV rax, [rsp+198h+var_158]
    MOV qword ptr [rsp+198h+var_178], rax
    LEA rsi, [rax+1]
    FILD qword ptr [rsp+198h+var_178]
    FXCH st(1)
    FUCOMIP st, st(1)
    FSTP st
    CMOVA rax, rsi
    NEG rax
    MOV qword ptr [rsp+198h+var_178], rax
    FILD qword ptr [rsp+198h+var_178]
    JMP loc_457549
loc_457715:
    FLDZ; 
    FUCOMIP st, st(2)
    JA loc_457B57
loc_45771F:
    FXCH st(1)
    FADD cs:flt_4F04DC
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    JMP loc_457549
loc_45773C:
    FXCH st(1)
    JMP loc_457742
loc_457740:
    FXCH st(1)
loc_457742:
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FXCH st(1)
    FUCOMIP st, st(1)
    JBE loc_457549
loc_45775E:
    FSTP st
    JMP loc_4576BB
loc_457768:
    LEA r13, [rsp+198h+var_108]
    LEA r12, [r13+1]
    JMP loc_456FB7
loc_457779:
    MOV esi, offset aValueTooLargeT_1
    JMP loc_456EE8
loc_457783:
    MOV eax, 3
    JMP loc_456D6A
loc_45778D:
    FSTP [rsp+198h+var_188]
    MOV rdi, r12
    MOV r8d, offset a0Ld
    MOV ecx, 3Fh
    MOV edx, 1
    MOV esi, 3Eh
    XOR eax, eax
    CALL ___snprintf_chk
    CDQE 
    ADD r12, rax
    FLD [rsp+198h+var_188]
    JMP loc_456FC7
loc_4577BE:
    FSTP [rsp+198h+var_188]
    MOV rcx, cs:stderr
    MOV edx, 11h
    MOV esi, 1
    MOV edi, offset aDoubleToHuman
    CALL _fwrite
    MOVZX edx, cs:byte_72FA88
    FLD [rsp+198h+var_188]
    JMP loc_456FD6
loc_4577ED:
    FLD cs:tbyte_4F0510
    FNSTCW [rsp+198h+var_14A]
    MOVZX eax, [rsp+198h+var_14A]
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], ax
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_188]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_188]
    FMULP st(1), st
    FLD st(1)
    FSUB st, st(1)
    JBE loc_457049
loc_457828:
    FSTP st
    FSTP st
    FLDZ 
    JMP loc_457082
loc_457838:
    MOVSD xmm4, cs:qword_4F04E0
    MOV dword ptr [rsp+198h+var_178], 400h
    MOVSD qword ptr [rsp+198h+var_188], xmm4
    JMP loc_457474
loc_457853:
    CALL sub_456790
    JMP loc_457236
loc_45785D:
    FLD1 
    JMP loc_45756F
loc_457864:
    FSTP [rsp+198h+var_198]
    MOV rdi, r12
    CALL sub_4B5440
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, offset unk_4EE824
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOVZX ebx, cs:byte_72FA88
    FLD [rsp+198h+var_198]
    JMP loc_457134
loc_457899:
    FLD1 
    JMP loc_457428
loc_4578A0:
    FLDZ 
    FLD st(1)
    FXCH st(1)
    FUCOMIP st, st(2)
    JA loc_457CD3
loc_4578AE:
    FLD cs:flt_4F04D0
    FUCOMIP st, st(1)
    FSTP st
    SETNBE al
    XOR r14d, r14d
    TEST ebx, ebx
    SETNZ r14b
    AND r14d, eax
    JMP loc_4575AF
loc_4578CC:
    FADDP st(1), st
    FSTP [rsp+198h+var_128]
    JMP loc_457448
loc_4578D7:
    SUB eax, 1
    FLD cs:flt_4F04D0
    TEST eax, eax
    MOV esi, eax
    FLD st
    JZ loc_4578F3
loc_4578E8:
    FLD st(1)
loc_4578EA:
    SUB esi, 1
    FMUL st(1), st
    JNZ loc_4578EA
loc_4578F1:
    FSTP st
loc_4578F3:
    FMULP st(2), st
    FNSTCW [rsp+198h+var_14A]
    MOVZX esi, [rsp+198h+var_14A]
    FLD cs:tbyte_4F0510
    OR si, 0C00h
    CMP r15d, 4
    MOV [rsp+198h+var_14C], si
    FLD st(2)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FSUB st(2), st
    JA def_457932
loc_457930:
    FSTP st(1)
loc_457932:
    JMP ds:jpt_457932[r15*8]
loc_45793A:
    LEA eax, [rsi-1]
    FLD cs:flt_4F04D0
    TEST eax, eax
    JZ loc_457BD4
loc_45794B:
    FLD st
loc_45794D:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_45794D
loc_457954:
    FSTP st(1)
    FDIVP st(1), st
    JMP loc_457082
loc_45795D:
    MOV r8d, cs:dword_71FF58
    MOV rdx, cs:qword_72FAD8
    MOV r9d, 2
    MOV rsi, cs:qword_72FAE0
    MOV qword ptr [rsp+198h+var_118], rcx
    LEA rcx, [rsp+198h+var_118]
    MOV rdi, r12
    CALL sub_4A9F10
    CMP cs:byte_72FA88, 0
    JZ loc_457245
loc_45799D:
    MOV rdi, cs:qword_72FAE0
    CALL sub_4B5440
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, offset aAfterPaddingS
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_457245
loc_4579C9:
    FXCH st(1)
    FSTP [rsp+198h+var_178]
    SUB rsp, 10h
    MOV rdi, cs:stderr
    MOV ecx, ebx
    MOV edx, offset aAfterRoundingV
    MOV esi, 1
    MOV eax, 1
    FLD st
    FSTP [rsp+1A8h+var_1A8]
    MOVSD xmm0, qword ptr [rsp+1A8h+var_188]
    FSTP [rsp+1A8h+var_198]
    CALL ___fprintf_chk
    POP rdi
    POP r8
    MOV rcx, cs:qword_71FF60
    FLD [rsp+198h+var_178]
    FLD [rsp+198h+var_198]
    JMP loc_4575B7
loc_457A15:
    FLDZ 
    FLD st(1)
    FXCH st(1)
    FUCOMIP st, st(2)
    JBE loc_457A21
loc_457A1F:
    FCHS 
loc_457A21:
    FLD cs:flt_4F04D0
    FUCOMI st, st(1)
    FSTP st(1)
    JBE loc_4574EE
loc_457A31:
    FMULP st(1), st
    FNSTCW [rsp+198h+var_14A]
    MOVZX eax, [rsp+198h+var_14A]
    FLD cs:tbyte_4F0510
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], ax
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FSUB st(1), st
    JA loc_457D09
loc_457A6C:
    MOV edi, 1
    JMP loc_457932
loc_457A76:
    FXCH st(1)
    FSTP [rsp+198h+var_168]
    SUB rsp, 10h
    MOV rdi, cs:stderr
    MOV edx, offset aScaledValueToL
    MOV ecx, ebx
    MOV esi, 1
    MOV eax, 1
    MOVSD xmm0, qword ptr [rsp+1A8h+var_188]
    FLD st
    FSTP [rsp+1A8h+var_1A8]
    FSTP [rsp+1A8h+var_178]
    CALL ___fprintf_chk
    POP r9
    POP r10
    MOVZX edx, cs:byte_72FA88
    FLD [rsp+198h+var_168]
    FLD [rsp+198h+var_178]
    JMP loc_4574C7
loc_457AC4:
    FLD st
    FCHS 
    FLD qword ptr [rsp+198h+var_188]
    FXCH st(1)
    FUCOMI st, st(1)
    JNB loc_457587
loc_457AD6:
    FSTP st(1)
    JMP loc_4578AE
loc_457ADD:
    CMP byte ptr [r15+1], 69h
    JZ loc_457AF4
loc_457AE4:
    FILD dword ptr [rsp+198h+var_188]
    MOVZX edx, cs:byte_72FA88
    JMP loc_456F56
loc_457AF4:
    MOVZX edx, cs:byte_72FA88
    ADD r15, 2
    MOV [rsp+198h+s1], r15
    TEST dl, dl
    JNZ loc_457C8D
loc_457B0C:
    FLD cs:flt_4F04D4
    MOV dword ptr [rsp+198h+var_188], 400h
    JMP loc_456F56
loc_457B1F:
    FSTP st
    FSTP st
    FLD qword ptr [rsp+198h+var_188]
    FLDZ 
    FUCOMI st, st(1)
    JNB loc_45758B
loc_457B31:
    FSTP st(1)
    JMP loc_4575AC
loc_457B40:
    FXCH st(1)
    FCHS 
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP [rsp+198h+var_158]
    FLDCW [rsp+198h+var_14A]
    JMP loc_4576E8
loc_457B57:
    FXCH st(1)
    FSUB cs:flt_4F04DC
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    JMP loc_457549
loc_457B74:
    FSTP st
    FSTP st(1)
    TEST eax, eax
    JZ loc_457D0F
loc_457B80:
    FLDZ 
    FXCH st(1)
    JMP loc_457564
loc_457B89:
    FLD cs:flt_4F04D0
    FNSTCW [rsp+198h+var_14A]
    MOVZX eax, [rsp+198h+var_14A]
    FLD st(1)
    FMUL st, st(1)
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], ax
    FLD cs:tbyte_4F0510
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_188]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_188]
    FMULP st(1), st
    FSUB st(1), st
    JBE loc_457047
loc_457BCC:
    FSTP st
    FSTP st
    FLDZ 
    FXCH st(1)
loc_457BD4:
    FDIVP st(1), st
    JMP loc_457082
loc_457BDB:
    XOR r14d, r14d
    JMP loc_456AB3
loc_457BE3:
    FSUB cs:flt_4F04DC
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_457078
loc_457BFC:
    FSTP st
    FSTP st
    FLDZ 
    FXCH st(1)
    JMP loc_45794B
loc_457C09:
    FSTP [rsp+198h+var_198]
    MOV edx, 5
    MOV esi, offset aFailedToPrepar
    XOR edi, edi
    CALL _dcgettext
    SUB rsp, 10h
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    FLD [rsp+1A8h+var_198]
    FSTP [rsp+1A8h+var_1A8]
    CALL _error
loc_457C39:
    XOR ebx, ebx
    JMP loc_456C29
loc_457C40:
    FSTP st
    XOR ebx, ebx
    FLD1 
    JMP loc_456DE2
loc_457C4B:
    MOV edx, eax
    ADD rdx, rbx
    CMP rdx, 12h
    JBE loc_456EC5
loc_457C5A:
    JMP loc_456CAD
loc_457C5F:
    FSTP st
    MOV edx, 5
    MOV esi, offset aFailedToPrepar
    XOR edi, edi
    CALL _dcgettext
    FLD [rsp+198h+var_198]
    MOV rdx, rax
    SUB rsp, 10h
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    FSTP [rsp+1A8h+var_1A8]
    CALL _error
loc_457C8D:
    MOV rdi, cs:stderr
    MOV edx, offset aAutoScalingFou
    MOV ecx, 400h
    MOV esi, 1
    XOR eax, eax
    MOV dword ptr [rsp+1A8h+var_188], r8d
    CALL ___fprintf_chk
    FLD cs:flt_4F04D4
    MOVZX edx, cs:byte_72FA88
    MOV dword ptr [rsp+1A8h+var_198], 400h
    MOV r8d, dword ptr [rsp+1A8h+var_188]
    JMP loc_456F56
loc_457CCE:
    CALL ___stack_chk_fail
loc_457CD3:
    FCHS 
    JMP loc_4578AE
loc_457CDA:
    FLD cs:flt_4F04D0
    JMP loc_45756F
loc_457CE5:
    CMP byte ptr [r15+1], 69h
    JNZ loc_456DCF
loc_457CF0:
    ADD r15, 2
    MOV [rsp+198h+s1], r15
    JMP loc_456F4B
loc_457CFE:
    FLD cs:flt_4F04D0
    JMP loc_457428
loc_457D09:
    FSTP st
    FSTP st
    JMP loc_457D11
loc_457D0F:
    FSTP st
loc_457D11:
    FLD qword ptr [rsp+198h+var_188]
    FLD dword ptr [rsp+198h+var_198]
    FUCOMI st, st(1)
    JB loc_4575AA
loc_457D20:
    FSTP st
    FLDZ 
    JMP loc_45758B
```
{'input_parameter_count': 3, 'input_parameter_types': ['Pointer', 'Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'SubroutineCall', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x9E3779B1', '0x4A2340'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 2, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hashing', 'inferred_category': 'Utility/Helper'}

##### T 249 - process_field
```assembly
loc_45F390:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 168h
    MOV rax, fs:28h
    MOV [rsp+198h+var_40], rax
    XOR eax, eax
    MOV rax, cs:base
    TEST rax, rax
    JNZ loc_45F3DF
loc_45F3C6:
    JMP loc_45F430
loc_45F3D0:
    CMP rbp, rdx
    JB loc_45F3DB
loc_45F3D5:
    CMP rbp, [rax+8]
    JBE loc_45F436
loc_45F3DB:
    ADD rax, 10h
loc_45F3DF:
    MOV rdx, [rax]
    CMP rdx, 0FFFFFFFFFFFFFFFFh
    JNZ loc_45F3D0
loc_45F3E8:
    MOV rsi, cs:stdout
    MOV rdi, r12
    MOV ebx, 1
    CALL _fputs_unlocked
loc_45F3FC:
    MOV rcx, [rsp+198h+var_40]
    XOR rcx, fs:28h
    MOV eax, ebx
    JNZ loc_460967
loc_45F415:
    ADD rsp, 168h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45F430:
    CMP rsi, 1
    JNZ loc_45F3E8
loc_45F436:
    MOV r13, cs:qword_752AD0
    TEST r13, r13
    JZ loc_45F488
loc_45F442:
    MOV rdi, r12
    CALL _strlen
    MOV rdi, r13
    MOV rbx, rax
    CALL _strlen
    CMP rbx, rax
    JBE loc_45F488
loc_45F45A:
    SUB rbx, rax
    MOV rdi, r13
    ADD rbx, r12
    MOV rsi, rbx
    CALL _strcmp
    TEST eax, eax
    JNZ loc_45F60C
loc_45F473:
    CMP cs:byte_752A68, 0
    MOV byte ptr [rbx], 0
    JNZ loc_45F99F
loc_45F483:
    NOP dword ptr [rax+rax+00h]
loc_45F488:
    MOVZX ebx, byte ptr [r12]
    TEST bl, bl
    JZ loc_45F9C7
loc_45F495:
    CALL ___ctype_b_loc
    MOV r13, r12
    MOV rax, [rax]
    JMP loc_45F4B5
loc_45F4A8:
    ADD r13, 1
    MOVZX ebx, byte ptr [r13+0]
    TEST bl, bl
    JZ loc_45F4BB
loc_45F4B5:
    TEST byte ptr [rax+rbx*2], 1
    JNZ loc_45F4A8
loc_45F4BB:
    MOV eax, r12d
    SUB eax, r13d
loc_45F4C1:
    MOV r11d, cs:dword_752A88
    TEST r11d, r11d
    JZ loc_45F5C9
loc_45F4D1:
    TEST eax, eax
    JNZ loc_45F719
loc_45F4D9:
    CMP rbp, 1
    JG loc_45F719
loc_45F4E3:
    MOV cs:qword_752AB0, 0
loc_45F4EE:
    MOVZX eax, cs:byte_752A68
    TEST al, al
    JNZ loc_45F5AA
loc_45F4FD:
    PXOR xmm2, xmm2
    MOV r14d, cs:dword_752AE0
    MOV [rsp+198h+s1], 0
    MOV ebp, 3E8h
    MOVSS dword ptr [rsp+198h+var_198], xmm2
    LEA edx, [r14-3]
    FLD dword ptr [rsp+198h+var_198]
    CMP edx, 1
    FSTP [rsp+198h+var_128]
    JA loc_45F576
loc_45F52B:
    MOV ebp, 400h
loc_45F530:
    TEST al, al
    JZ loc_45F576
loc_45F534:
    MOV rsi, cs:qword_752A70
    MOV edi, 1
    CALL sub_4D4B80
    MOV rsi, r13
    XOR edi, edi
    MOV rbx, rax
    CALL sub_4D4B80
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV r9d, 12h
    MOV r8, rbx
    MOV edx, offset aSimpleStrtodHu
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_45F576:
    LEA rcx, [rsp+198h+var_13A]
    LEA rdx, [rsp+198h+var_128]
    LEA rsi, [rsp+198h+s1]
    MOV rdi, r13
    CALL sub_45F0E0
    CMP eax, 1
    MOV ebx, eax
    JBE loc_45F770
loc_45F598:
    CMP ebx, 6
    JA def_45F5A3
loc_45F5A1:
    MOV eax, ebx
    JMP ds:jpt_45F5A3[rax*8]
loc_45F5AA:
    MOV rcx, cs:qword_752AB0
    MOV rdi, cs:stderr
    MOV edx, offset aSettingAutoPad
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_45F5C9:
    PXOR xmm1, xmm1
    MOV r14d, cs:dword_752AE0
    MOVZX eax, cs:byte_752A68
    MOV [rsp+198h+s1], 0
    MOV ebp, 3E8h
    MOVSS dword ptr [rsp+198h+var_198], xmm1
    LEA edx, [r14-3]
    FLD dword ptr [rsp+198h+var_198]
    CMP edx, 1
    FSTP [rsp+198h+var_128]
    JA loc_45F530
loc_45F602:
    MOV ebp, 400h
    JMP loc_45F530
loc_45F60C:
    CMP cs:byte_752A68, 0
    JZ loc_45F488
loc_45F619:
    MOV rcx, cs:stderr
    MOV edx, 16h
    MOV esi, 1
    MOV edi, offset aNoValidSuffixF
    CALL _fwrite
    JMP loc_45F488
loc_45F639:
    MOV qword ptr [rsp+198h+var_188], 0
    MOV ebp, offset aInvalidNumberS
loc_45F647:
    CMP cs:dword_752AD8, 3
    JZ loc_45F67F
loc_45F650:
    MOV rdi, r13
    CALL sub_4D4D30
    MOV edx, 5
    MOV rsi, rbp
    XOR edi, edi
    MOV r13, rax
    CALL _dcgettext
    MOV edi, cs:status
    MOV rdx, rax
    MOV rcx, r13
    XOR esi, esi
    XOR eax, eax
    CALL _error
loc_45F67F:
    MOV rax, cs:qword_742F70
    MOV rdx, cs:qword_742F68
    CMP rax, 1
    JZ loc_45F900
loc_45F697:
    MOV qword ptr [rsp+198h+var_178], rax
    TEST rax, rax
    FILD qword ptr [rsp+198h+var_178]
    JS loc_45F913
loc_45F6A9:
    MOV qword ptr [rsp+198h+var_178], rdx
    TEST rdx, rdx
    FLD [rsp+198h+var_128]
    FMULP st(1), st
    FILD qword ptr [rsp+198h+var_178]
    JS loc_45F6F9
loc_45F6BD:
    FDIVP st(1), st
loc_45F6BF:
    CMP ebx, 1
    JBE loc_45F830
loc_45F6C8:
    FSTP st
    JMP loc_45F6D0
loc_45F6CC:
    FSTP st
    XCHG ax, ax
loc_45F6D0:
    MOV rsi, cs:stdout
    MOV rdi, r12
    XOR ebx, ebx
    CALL _fputs_unlocked
    JMP loc_45F3FC
loc_45F6E6:
    MOV qword ptr [rsp+198h+var_188], 0
    MOV ebp, offset aValueTooLargeT
    JMP loc_45F647
loc_45F6F9:
    FADD cs:flt_51343C
    JMP loc_45F6BD
loc_45F701:
    MOV qword ptr [rsp+198h+var_188], 0
loc_45F70A:
    MOV ebx, 4
    MOV ebp, offset aRejectingSuffi
    JMP loc_45F647
loc_45F719:
    MOV rdi, r12
    CALL _strlen
    CMP rax, cs:qword_752AB8
    MOV cs:qword_752AB0, rax
    JB loc_45F4EE
loc_45F735:
    MOV rdi, cs:qword_752AC0
    LEA rsi, [rax+1]
    MOV cs:qword_752AB8, rsi
    CALL sub_4DCC30
    MOV cs:qword_752AC0, rax
    JMP loc_45F4EE
loc_45F758:
    MOV qword ptr [rsp+198h+var_188], 0
    XOR ebp, ebp
    JMP loc_45F647
loc_45F770:
    MOVSXD rcx, cs:dword_752A6C
    MOV r15, [rsp+198h+s1]
    MOV rsi, cs:qword_752A70
    MOV rdi, r15
    MOV rdx, rcx
    MOV qword ptr [rsp+198h+var_178], rcx
    CALL _strncmp
    TEST eax, eax
    MOV qword ptr [rsp+198h+var_188], 0
    MOV rcx, qword ptr [rsp+198h+var_178]
    JZ loc_45F937
loc_45F7A9:
    CMP cs:byte_752A68, 0
    JNZ loc_45F96D
loc_45F7B6:
    MOVZX edx, byte ptr [r15]
    TEST dl, dl
    MOV byte ptr [rsp+198h+var_178], dl
    JZ loc_45F91E
loc_45F7C6:
    CALL ___ctype_b_loc
    MOVZX edx, byte ptr [rsp+198h+var_178]
    MOV rsi, [rax]
    MOV rax, r15
    JMP loc_45F7EA
loc_45F7E0:
    MOV [rsp+198h+s1], rax
    MOVZX edx, byte ptr [r15+1]
loc_45F7EA:
    MOVZX ecx, dl
    MOV r15, rax
    LEA rax, [rax+1]
    TEST byte ptr [rsi+rcx*2], 1
    JNZ loc_45F7E0
loc_45F7FA:
    MOVSX esi, dl
    MOV edi, offset aKmgtpezy
    MOV byte ptr [rsp+198h+var_178], dl
    CALL _strchr
    TEST rax, rax
    MOVZX edx, byte ptr [rsp+198h+var_178]
    JNZ loc_45FB89
loc_45F819:
    MOV ebx, 5
    MOV ebp, offset aInvalidSuffixI
    JMP loc_45F647
loc_45F830:
    FLD cs:tbyte_513460
    FXCH st(1)
    MOV rax, cs:qword_742F60
    CMP rax, 0FFFFFFFFFFFFFFFFh
    CMOVZ rax, qword ptr [rsp+198h+var_188]
    MOV qword ptr [rsp+198h+var_188], rax
    FUCOMI st, st(1)
    FSTP st(1)
    JB loc_45F88D
loc_45F854:
    FLD cs:tbyte_513470
    FUCOMIP st, st(1)
    JB loc_45F88D
loc_45F85E:
    FLD st
    XOR eax, eax
    FLDZ 
    FLD cs:flt_513430
    JMP loc_45F87F
loc_45F870:
    FXCH st(2)
loc_45F872:
    FUCOMIP st, st(1)
    JB loc_45FB28
loc_45F87A:
    FDIV st(2), st
    ADD eax, 1
loc_45F87F:
    FLD st(2)
    FXCH st(2)
    FUCOMI st, st(3)
    JBE loc_45F870
loc_45F887:
    FXCH st(2)
    FCHS 
    JMP loc_45F872
loc_45F88D:
    MOV ebp, cs:dword_752ADC
    TEST ebp, ebp
    JNZ loc_45FC0B
loc_45F89B:
    CMP qword ptr [rsp+198h+var_188], 12h
    JBE loc_45FC0B
loc_45F8A7:
    CMP cs:dword_752AD8, 3
    JZ loc_45F6CC
loc_45F8B4:
    MOV rbx, qword ptr [rsp+198h+var_188]
    MOV edx, 5
    FSTP [rsp+198h+var_198]
    TEST rbx, rbx
    JZ loc_4603A1
loc_45F8CA:
    MOV esi, offset aValuePrecision
    XOR edi, edi
    CALL _dcgettext
    FLD [rsp+198h+var_198]
    MOV edi, cs:status
    SUB rsp, 10h
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    FSTP [rsp+1A8h+var_1A8]
    CALL _error
    POP rcx
    POP rsi
    JMP loc_45F6D0
loc_45F900:
    CMP rdx, 1
    JNZ loc_45F697
loc_45F90A:
    FLD [rsp+198h+var_128]
    JMP loc_45F6BF
loc_45F913:
    FADD cs:flt_51343C
    JMP loc_45F6A9
loc_45F91E:
    CMP r14d, 4
    JNZ loc_45FA4E
loc_45F928:
    MOV ebx, 6
    MOV ebp, offset aMissingISuffix
    JMP loc_45F647
loc_45F937:
    LEA rdi, [r15+rcx]
    FLD dword ptr [rsp+198h+var_198]
    LEA rcx, [rsp+198h+var_139]
    LEA rdx, [rsp+198h+var_118]
    LEA rsi, [rsp+198h+var_130]
    FSTP [rsp+198h+var_118]
    MOV [rsp+198h+s1], rdi
    CALL sub_45F0E0
    CMP eax, 1
    JBE loc_45F9D1
loc_45F966:
    MOV ebx, eax
    JMP loc_45F598
loc_45F96D:
    PUSH qword ptr [rsp+198h+var_128+8]
    MOV rdi, cs:stderr
    MOV edx, offset aParsedNumericV
    PUSH qword ptr [rsp+1A0h+var_128]
    MOV ecx, dword ptr [rsp+1A8h+var_188]
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOV r15, [rsp+1A8h+s1]
    POP r9
    POP r10
    JMP loc_45F7B6
loc_45F99F:
    MOV rdi, r13
    CALL sub_4D4D30
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, offset aTrimmingSuffix
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_45F488
loc_45F9C7:
    MOV r13, r12
    XOR eax, eax
    JMP loc_45F4C1
loc_45F9D1:
    MOV eax, 1
    CMOVZ ebx, eax
    CMP [rsp+198h+var_139], 0
    JNZ loc_4603AB
loc_45F9E4:
    MOV r15, [rsp+198h+var_130]
    FLD [rsp+198h+var_118]
    MOV rax, r15
    SUB rax, [rsp+198h+s1]
    TEST eax, eax
    MOV qword ptr [rsp+198h+var_188], rax
    JZ loc_46059D
loc_45FA05:
    SUB eax, 1
    JZ loc_46096C
loc_45FA0E:
    FLD cs:flt_513430
    FLD st
loc_45FA16:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_45FA16
loc_45FA1D:
    FSTP st(1)
loc_45FA1F:
    FDIVP st(1), st
    CMP [rsp+198h+var_13A], 0
    FLD [rsp+198h+var_128]
    JZ loc_460531
loc_45FA30:
    FSUBRP st(1), st
loc_45FA32:
    FSTP [rsp+198h+var_128]
    MOV [rsp+198h+s1], r15
    JMP loc_45F7A9
loc_45FA40:
    MOV qword ptr [rsp+198h+var_188], 0
    JMP loc_45F928
loc_45FA4E:
    MOVZX edx, cs:byte_752A68
    FLD1 
    XOR r8d, r8d
loc_45FA5A:
    TEST dl, dl
    JNZ loc_460000
loc_45FA62:
    FLD [rsp+1B8h+var_148]
    FMULP st(1), st
    FSTP [rsp+1B8h+var_148]
    JMP loc_45FA70
loc_45FA6E:
    FSTP st
loc_45FA70:
    MOV rsi, [rsp+1B8h+var_158]
    TEST rsi, rsi
    JZ loc_45FAE0
loc_45FA7A:
    CMP byte ptr [rsi], 0
    JZ loc_45FAE0
loc_45FA7F:
    CMP cs:dword_752AD8, 3
    MOV ebx, 5
    JZ loc_45F67F
loc_45FA91:
    MOV edi, 1
    CALL sub_4D4B80
    MOV rsi, r13
    XOR edi, edi
    MOV r14, rax
    CALL sub_4D4B80
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aInvalidSuffixI_0
    MOV rbp, rax
    CALL _dcgettext
    MOV edi, cs:status
    MOV rdx, rax
    MOV r8, r14
    MOV rcx, rbp
    XOR esi, esi
    XOR eax, eax
    CALL _error
    JMP loc_45F67F
loc_45FAE0:
    CMP ebx, 1
    JNZ loc_4607B8
loc_45FAE9:
    CMP cs:byte_752A78, 0
    JZ loc_45F67F
loc_45FAF6:
    MOV rdi, r13
    CALL sub_4D4D30
    XOR edi, edi
    MOV rbp, rax
    MOV edx, 5
    MOV esi, offset aLargeInputValu
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_45F67F
loc_45FB28:
    FSTP st
    FSTP st
    FSTP st
    MOV ebp, cs:dword_752ADC
    TEST ebp, ebp
    JZ loc_460926
loc_45FB3C:
    CMP eax, 1Ah
    JBE loc_45FC0B
loc_45FB45:
    CMP cs:dword_752AD8, 3
    FSTP [rsp+198h+var_198]
    JZ loc_45F6D0
loc_45FB55:
    MOV edx, 5
    MOV esi, offset aValueTooLargeT_0
loc_45FB5F:
    XOR edi, edi
    CALL _dcgettext
    FLD [rsp+198h+var_198]
    MOV edi, cs:status
    SUB rsp, 10h
    MOV rdx, rax
    XOR esi, esi
    XOR eax, eax
    FSTP [rsp+1A8h+var_1A8]
    CALL _error
    POP rax
    POP rdx
    JMP loc_45F6D0
loc_45FB89:
    TEST r14d, r14d
    JZ loc_45F70A
loc_45FB92:
    SUB edx, 45h
    XOR r8d, r8d
    CMP dl, 15h
    JA loc_45FBA8
loc_45FB9D:
    MOVZX edx, dl
    MOV r8d, ds:dword_513020[rdx*4]
loc_45FBA8:
    LEA rax, [r15+1]
    CMP r14d, 1
    MOV [rsp+198h+s1], rax
    JZ loc_46073F
loc_45FBBB:
    CMP r14d, 4
    JZ loc_46094E
loc_45FBC5:
    MOV dword ptr [rsp+198h+var_188], ebp
    MOVZX edx, cs:byte_752A68
    FILD dword ptr [rsp+198h+var_188]
loc_45FBD4:
    TEST r8d, r8d
    JZ loc_46093C
loc_45FBDD:
    MOV eax, r8d
    SUB eax, 1
    FLD st
    JZ loc_45FBFB
loc_45FBE7:
    NOP word ptr [rax+rax+00000000h]
loc_45FBF0:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_45FBF0
loc_45FBF7:
    FSTP st(1)
    JMP loc_45FBFD
loc_45FBFB:
    FSTP st(1)
loc_45FBFD:
    MOV qword ptr [rsp+1B8h+var_1A8], 0
    JMP loc_45FA5A
loc_45FC0B:
    MOV r14d, cs:dword_752AC8
    MOV r15d, cs:dword_742F78
    MOV [rsp+198h+var_108], 25h
    TEST r14d, r14d
    JZ loc_460390
loc_45FC2A:
    LEA r13, [rsp+198h+var_108]
    MOV [rsp+198h+var_107], 27h
    LEA r12, [r13+2]
loc_45FC3E:
    MOV r9, cs:qword_752AA8
    TEST r9, r9
    JNZ loc_4603E6
loc_45FC4E:
    MOVZX edx, cs:byte_752A68
    TEST dl, dl
    JNZ loc_4603B7
loc_45FC5D:
    TEST ebp, ebp
    JNZ loc_46007B
loc_45FC65:
    MOV rax, qword ptr [rsp+198h+var_188]
    TEST eax, eax
    MOV esi, eax
    JZ loc_460430
loc_45FC74:
    SUB eax, 1
    JZ loc_4607F0
loc_45FC7D:
    FLD cs:flt_513430
    MOV ecx, eax
    FLD st
    FLD st(1)
loc_45FC89:
    SUB ecx, 1
    FMUL st(1), st
    JNZ loc_45FC89
loc_45FC90:
    FSTP st
    FMUL st, st(2)
    FNSTCW [rsp+198h+var_14A]
    MOVZX ecx, [rsp+198h+var_14A]
    FLD cs:tbyte_513480
    OR ch, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], cx
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FSUB st(1), st
    JA def_45FCD3
loc_45FCCD:
    FSTP st(2)
    JMP loc_45FCD3
loc_45FCD1:
    FSTP st(2)
loc_45FCD3:
    JMP ds:jpt_45FCD3[r15*8]
loc_45FCDB:
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
loc_45FCE9:
    TEST esi, esi
    FADDP st(1), st
    JNZ loc_4604E2
loc_45FCF3:
    MOV rcx, qword ptr [rsp+198h+var_188]
    TEST dl, dl
    MOV ebp, ecx
    JZ loc_45FD44
loc_45FCFE:
    FXCH st(1)
    FSTP [rsp+198h+var_188]
    TEST r14d, r14d
    MOV eax, offset aNoScalingRetur
    MOV edx, offset aNoScalingRetur_0
    CMOVZ rdx, rax
    SUB rsp, 10h
    MOV esi, 1
    MOV rdi, cs:stderr
    XOR eax, eax
    FLD st
    FSTP [rsp+1A8h+var_1A8]
    FSTP [rsp+1A8h+var_198]
    CALL ___fprintf_chk
    POP r14
    POP r15
    FLD [rsp+198h+var_188]
    FLD [rsp+198h+var_198]
    FXCH st(1)
    JMP loc_45FD46
loc_45FD44:
    FXCH st(1)
loc_45FD46:
    MOV dword ptr [r12], 664C2A2Eh
    MOV byte ptr [r12+4], 0
    LEA r12, [rsp+198h+src]
    SUB rsp, 10h
    XOR eax, eax
    MOV r9d, ebp
    MOV r8, r13
    MOV ecx, 80h
    MOV edx, 1
    MOV esi, 80h
    MOV rdi, r12
    FSTP [rsp+1A8h+var_188]
    FLD st
    FSTP [rsp+1A8h+var_1A8]
    FSTP [rsp+1A8h+var_198]
    CALL ___snprintf_chk
    CMP eax, 7Fh
    POP r11
    POP rbx
    FLD [rsp+198h+var_198]
    JA loc_46087F
loc_45FD9B:
    FSTP st
    MOVZX ebx, cs:byte_752A68
    FLD [rsp+198h+var_188]
loc_45FDA8:
    MOV rsi, cs:qword_752AD0
    TEST rsi, rsi
    JZ loc_45FE08
loc_45FDB4:
    MOV rdx, r12
loc_45FDB7:
    MOV ecx, [rdx]
    ADD rdx, 4
    LEA eax, [rcx-1010101h]
    NOT ecx
    AND eax, ecx
    AND eax, 80808080h
    JZ loc_45FDB7
loc_45FDCE:
    MOV ecx, eax
    MOV rdi, r12
    SHR ecx, 10h
    TEST eax, 8080h
    CMOVZ eax, ecx
    LEA rcx, [rdx+2]
    FSTP [rsp+198h+var_198]
    CMOVZ rdx, rcx
    MOV ecx, eax
    ADD cl, al
    MOV rax, r12
    MOV ecx, 80h
    SBB rdx, 3
    SUB rax, rdx
    LEA rdx, [rax+7Fh]
    CALL ___strncat_chk
    FLD [rsp+198h+var_198]
loc_45FE08:
    TEST bl, bl
    JZ loc_45FE41
loc_45FE0C:
    MOV rdi, r12
    FSTP [rsp+198h+var_198]
    CALL sub_4D4D30
    SUB rsp, 10h
    MOV rcx, rax
    MOV edx, offset aFormattingOutp
    MOV rdi, cs:stderr
    MOV esi, 1
    XOR eax, eax
    FLD [rsp+1A8h+var_198]
    FSTP [rsp+1A8h+var_1A8]
    CALL ___fprintf_chk
    POP rax
    POP rdx
    JMP loc_45FE43
loc_45FE41:
    FSTP st
loc_45FE43:
    MOV rcx, cs:qword_752AB0
    MOV rax, r12
    TEST rcx, rcx
    JZ loc_45FF0A
loc_45FE56:
    MOV esi, [rax]
    ADD rax, 4
    LEA edx, [rsi-1010101h]
    NOT esi
    AND edx, esi
    AND edx, 80808080h
    JZ loc_45FE56
loc_45FE6E:
    MOV esi, edx
    SHR esi, 10h
    TEST edx, 8080h
    CMOVZ edx, esi
    LEA rsi, [rax+2]
    MOV edi, edx
    CMOVZ rax, rsi
    ADD dil, dl
    SBB rax, 3
    SUB rax, r12
    CMP rax, rcx
    JB loc_4605F0
loc_45FE99:
    LEA rdx, [rax+1]
    CMP rdx, cs:qword_752AB8
    MOV rdi, cs:qword_752AC0
    JNB loc_460480
loc_45FEB1:
    MOV rsi, r12
    CALL _strcpy
loc_45FEB9:
    MOV rdi, cs:qword_752A98
    TEST rdi, rdi
    JZ loc_45FED1
loc_45FEC5:
    MOV rsi, cs:stdout
    CALL _fputs_unlocked
loc_45FED1:
    MOV rdi, cs:qword_752AC0
    MOV rsi, cs:stdout
    MOV ebx, 1
    CALL _fputs_unlocked
    MOV rdi, cs:qword_752A90
    TEST rdi, rdi
    JZ loc_45F3FC
loc_45FEF9:
    MOV rsi, cs:stdout
    CALL _fputs_unlocked
    JMP loc_45F3FC
loc_45FF0A:
    MOV ecx, [rax]
    ADD rax, 4
    LEA edx, [rcx-1010101h]
    NOT ecx
    AND edx, ecx
    AND edx, 80808080h
    JZ loc_45FF0A
loc_45FF22:
    MOV ecx, edx
    SHR ecx, 10h
    TEST edx, 8080h
    CMOVZ edx, ecx
    LEA rcx, [rax+2]
    CMOVZ rax, rcx
    MOV ecx, edx
    ADD cl, dl
    SBB rax, 3
    SUB rax, r12
    JMP loc_45FE99
loc_45FF48:
    FLDZ; 
    FUCOMIP st, st(1)
    JA loc_4607BF
loc_45FF52:
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    FXCH st(1)
    FUCOMIP st, st(1)
    JBE loc_45FCE9
loc_45FF6C:
    FSTP st
loc_45FF6E:
    MOV rcx, qword ptr [rsp+198h+var_198]
    ADD rcx, 1
    MOV qword ptr [rsp+198h+var_198], rcx
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_45FCE9
loc_45FF82:
    FCHS; 
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP [rsp+198h+var_158]
    FLDCW [rsp+198h+var_14A]
loc_45FF92:
    MOV rax, [rsp+198h+var_158]
    MOV qword ptr [rsp+198h+var_198], rax
    LEA rcx, [rax+1]
    FILD qword ptr [rsp+198h+var_198]
    FXCH st(1)
    FUCOMIP st, st(1)
    FSTP st
    CMOVA rax, rcx
    NEG rax
    MOV qword ptr [rsp+198h+var_198], rax
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_45FCE9
loc_45FFBB:
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    FXCH st(1)
    FUCOMIP st, st(1)
    JBE loc_45FCE9
loc_45FFD5:
    FSTP st
    JMP loc_45FF6E
loc_45FFD9:
    FLDZ; 
    FUCOMIP st, st(1)
    JA loc_460782
loc_45FFE3:
    FADD cs:flt_513440
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_45FCE9
loc_460000:
    SUB rsp, 10h
    MOV rdi, cs:stderr
    XOR eax, eax
    FLD st
    FSTP [rsp+1C8h+var_1C8]
    MOV ecx, ebp
    MOV edx, offset aSuffixPowerDDL
    MOV esi, 1
    FSTP [rsp+1C8h+var_198]
    CALL ___fprintf_chk
    CMP cs:byte_752A68, 0
    FLD [rsp+1C8h+var_148]
    FLD [rsp+1C8h+var_198]
    FMULP st(1), st
    FLD st
    FSTP [rsp+1C8h+var_148]
    POP rdi
    POP r8
    JZ loc_45FA6E
loc_46004D:
    SUB rsp, 20h
    MOV rdi, cs:stderr
    MOV edx, offset aReturningValue
    FLD st
    FSTP [rsp+1D8h+var_1C8]
    MOV esi, 1
    XOR eax, eax
    FSTP [rsp+1D8h+var_1D8]
    CALL ___fprintf_chk
    ADD rsp, 20h
    JMP loc_45FA70
loc_46007B:
    LEA eax, [rbp-3]
    CMP eax, 1
    JBE loc_460417
loc_460087:
    MOVSD xmm3, cs:qword_513450
    FLD cs:flt_513438
    MOVSD qword ptr [rsp+198h+var_188], xmm3
loc_46009B:
    FLD cs:tbyte_513460
    FXCH st(2)
    FUCOMI st, st(2)
    FSTP st(2)
    JB loc_4600DB
loc_4600A9:
    FLD cs:tbyte_513470
    MOV ebx, 0
    FUCOMIP st, st(2)
    FLD st(1)
    JB loc_4600E3
loc_4600BA:
    FLDZ 
    JMP loc_4600CD
loc_4600BE:
    FXCH st(1)
loc_4600C0:
    FUCOMIP st, st(3)
    JB loc_4600E7
loc_4600C4:
    FXCH st(1)
    FDIV st, st(2)
    FXCH st(1)
    ADD ebx, 1
loc_4600CD:
    FLD st(1)
    FXCH st(1)
    FUCOMI st, st(2)
    JBE loc_4600BE
loc_4600D5:
    FXCH st(1)
    FCHS 
    JMP loc_4600C0
loc_4600DB:
    FSTP st
    FLD st
    XOR ebx, ebx
    JMP loc_4600EB
loc_4600E3:
    FSTP st(1)
    JMP loc_4600EB
loc_4600E7:
    FSTP st
    FSTP st(1)
loc_4600EB:
    TEST dl, dl
    JNZ loc_4606D8
loc_4600F3:
    MOV rcx, cs:qword_742F60
    CMP rcx, 0FFFFFFFFFFFFFFFFh
    JZ loc_46065C
loc_460104:
    LEA eax, [rbx+rbx*2]
    CMP rax, rcx
    CMOVG rax, rcx
    TEST eax, eax
    MOV esi, eax
    JNZ loc_460538
loc_460118:
    JMP loc_46011C
loc_46011A:
    FSTP st
loc_46011C:
    FLD cs:tbyte_513480
    FNSTCW [rsp+198h+var_14A]
    MOVZX eax, [rsp+198h+var_14A]
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], ax
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FSUB st(1), st
    JA def_460157
loc_460155:
    XOR esi, esi
    JMP ds:jpt_460157[r15*8]
loc_46015F:
    FXCH st(1)
    JMP loc_460165
loc_460163:
    FXCH st(1)
loc_460165:
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_188]
    FLDCW [rsp+1A8h+var_15A]
    FILD qword ptr [rsp+1A8h+var_188]
loc_460175:
    TEST esi, esi
    FADDP st(1), st
    JZ loc_4604A6
loc_46017F:
    MOV eax, esi
    SUB eax, 1
    JZ loc_460859
loc_46018A:
    FLD cs:flt_513430
loc_460190:
    FLD st
loc_460192:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_460192
loc_460199:
    FSTP st(1)
loc_46019B:
    FDIVP st(1), st
    FLDZ 
    FUCOMIP st, st(1)
    JA loc_460726
loc_4601A7:
    FLD qword ptr [rsp+1A8h+var_198]
    FXCH st(1)
    FUCOMI st, st(1)
    JB loc_4601BE
loc_4601B1:
    JMP loc_4601B7
loc_4601B3:
    FSTP st
    FXCH st(1)
loc_4601B7:
    FDIVRP st(1), st
    ADD ebx, 1
    JMP loc_4601C0
loc_4601BE:
    FSTP st(1)
loc_4601C0:
    FLDZ 
    FXCH st(1)
    FUCOMI st, st(1)
    FSTP st(1)
    JP loc_460505
loc_4601CE:
    JNZ loc_460505
loc_4601D4:
    JMP loc_4601D8
loc_4601D6:
    FSTP st(1)
loc_4601D8:
    XOR r14d, r14d
loc_4601DB:
    TEST dl, dl
    JNZ loc_4605A4
loc_4601E3:
    CMP rcx, 0FFFFFFFFFFFFFFFFh
    MOV esi, 7325h
    MOV dword ptr [r12], 664C2A2Eh
    CMOVNZ r14d, ecx
    CMP ebx, 8
    MOV [r12+4], si
    MOV byte ptr [r12+6], 0
    MOV eax, offset aError
    JA loc_46021C
loc_46020E:
    FXCH st(1)
    MOV eax, ebx
    MOV rax, ds:off_512FC0[rax*8]
    JMP loc_46021E
loc_46021C:
    FXCH st(1)
loc_46021E:
    FSTP [rsp+1A8h+var_198]
    LEA r12, [rsp+1A8h+var_D8]
    SUB rsp, 8
    MOV r9d, r14d
    MOV r8, r13
    MOV ecx, 80h
    MOV edx, 1
    PUSH rax
    MOV esi, 7Fh
    XOR eax, eax
    MOV rdi, r12
    SUB rsp, 10h
    FLD st
    FSTP [rsp+1C8h+var_1C8]
    FSTP [rsp+1C8h+var_1A8]
    CALL ___snprintf_chk
    ADD rsp, 20h
    CMP eax, 7Eh
    FLD [rsp+1A8h+var_198]
    JA loc_4608BA
loc_46026C:
    CMP ebp, 4
    JNZ loc_460297
loc_460271:
    TEST ebx, ebx
    JZ loc_460297
loc_460275:
    CDQE 
    MOV edx, 7Fh
    MOV ecx, 80h
    SUB rdx, rax
    MOV esi, (offset aIecI+4)
    MOV rdi, r12
    FSTP [rsp+1A8h+var_1A8]
    CALL ___strncat_chk
    FLD [rsp+1A8h+var_1A8]
loc_460297:
    MOVZX ebx, cs:byte_752A68
    TEST bl, bl
    JNZ loc_4604AD
loc_4602A6:
    MOV rsi, cs:qword_752AD0
    TEST rsi, rsi
    JNZ loc_45FDB4
loc_4602B6:
    FSTP st
    JMP loc_45FE43
loc_4602BD:
    FLDZ; 
    FUCOMIP st, st(2)
    JA loc_460842
loc_4602C7:
    FXCH st(1)
    FLD st
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_188]
    FLDCW [rsp+1A8h+var_15A]
    FILD qword ptr [rsp+1A8h+var_188]
    FXCH st(1)
    FUCOMIP st, st(1)
    JBE loc_460175
loc_4602E5:
    FSTP st
loc_4602E7:
    MOV rax, qword ptr [rsp+1A8h+var_188]
    ADD rax, 1
    MOV qword ptr [rsp+1A8h+var_188], rax
    FILD qword ptr [rsp+1A8h+var_188]
    JMP loc_460175
loc_4602FE:
    FXCH st(1)
    JMP loc_460304
loc_460302:
    FXCH st(1)
loc_460304:
    FCHS 
    FLD st
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_168]
    FLDCW [rsp+1A8h+var_15A]
loc_460314:
    MOV rax, qword ptr [rsp+1A8h+var_168]
    MOV qword ptr [rsp+1A8h+var_188], rax
    LEA rdi, [rax+1]
    FILD qword ptr [rsp+1A8h+var_188]
    FXCH st(1)
    FUCOMIP st, st(1)
    FSTP st
    CMOVA rax, rdi
    NEG rax
    MOV qword ptr [rsp+1A8h+var_188], rax
    FILD qword ptr [rsp+1A8h+var_188]
    JMP loc_460175
loc_460341:
    FXCH st(1)
    JMP loc_460347
loc_460345:
    FXCH st(1)
loc_460347:
    FLD st
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_188]
    FLDCW [rsp+1A8h+var_15A]
    FILD qword ptr [rsp+1A8h+var_188]
    FXCH st(1)
    FUCOMIP st, st(1)
    JBE loc_460175
loc_460363:
    FSTP st
    JMP loc_4602E7
loc_460367:
    FLDZ; 
    FUCOMIP st, st(2)
    JA loc_46079B
loc_460371:
    FXCH st(1)
    FADD cs:flt_513440
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_188]
    FLDCW [rsp+1A8h+var_15A]
    FILD qword ptr [rsp+1A8h+var_188]
    JMP loc_460175
loc_460390:
    LEA r13, [rsp+198h+var_108]
    LEA r12, [r13+1]
    JMP loc_45FC3E
loc_4603A1:
    MOV esi, offset aValueTooLargeT_1
    JMP loc_45FB5F
loc_4603AB:
    MOV eax, 3
    MOV ebx, eax
    JMP loc_45F598
loc_4603B7:
    FSTP [rsp+198h+var_178]
    MOV rcx, cs:stderr
    MOV edx, 11h
    MOV esi, 1
    MOV edi, offset aDoubleToHuman
    CALL _fwrite
    MOVZX edx, cs:byte_752A68
    FLD [rsp+198h+var_178]
    JMP loc_45FC5D
loc_4603E6:
    FSTP [rsp+198h+var_178]
    MOV rdi, r12
    MOV r8d, offset a0Ld
    MOV ecx, 3Fh
    MOV edx, 1
    MOV esi, 3Eh
    XOR eax, eax
    CALL ___snprintf_chk
    CDQE 
    ADD r12, rax
    FLD [rsp+198h+var_178]
    JMP loc_45FC4E
loc_460417:
    MOVSD xmm4, cs:qword_513448
    FLD cs:flt_513434
    MOVSD qword ptr [rsp+198h+var_188], xmm4
    JMP loc_46009B
loc_460430:
    FLD cs:tbyte_513480
    FNSTCW [rsp+198h+var_14A]
    MOVZX eax, [rsp+198h+var_14A]
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], ax
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FLD st(1)
    FSUB st, st(1)
    JBE loc_45FCD3
loc_46046B:
    FSTP st
    FSTP st
    FLDZ 
    JMP loc_45FCF3
loc_460480:
    MOV rdi, cs:qword_752AC0
    LEA rsi, [rax+2]
    MOV cs:qword_752AB8, rsi
    CALL sub_4DCC30
    MOV cs:qword_752AC0, rax
    MOV rdi, rax
    JMP loc_45FEB1
loc_4604A6:
    FLD1 
    JMP loc_46019B
loc_4604AD:
    FSTP [rsp+1A8h+var_1A8]
    MOV rdi, r12
    CALL sub_4D4D30
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, offset unk_511784
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    MOVZX ebx, cs:byte_752A68
    FLD [rsp+1A8h+var_1A8]
    JMP loc_45FDA8
loc_4604E2:
    LEA eax, [rsi-1]
    FLD cs:flt_513430
    TEST eax, eax
    JZ loc_46083B
loc_4604F3:
    FLD st
loc_4604F5:
    SUB eax, 1
    FMUL st, st(1)
    JNZ loc_4604F5
loc_4604FC:
    FSTP st(1)
    FDIVP st(1), st
    JMP loc_45FCF3
loc_460505:
    FLDZ 
    FLD st(1)
    FXCH st(1)
    FUCOMIP st, st(2)
    JA loc_460977
loc_460513:
    FLD cs:flt_513430
    FUCOMIP st, st(1)
    FSTP st
    SETNBE al
    XOR r14d, r14d
    TEST ebx, ebx
    SETNZ r14b
    AND r14d, eax
    JMP loc_4601DB
loc_460531:
    FADDP st(1), st
    JMP loc_45FA32
loc_460538:
    SUB eax, 1
    JZ loc_4608AF
loc_460541:
    FLD cs:flt_513430
    MOV edi, eax
    FLD st
    FLD st(1)
loc_46054D:
    SUB edi, 1
    FMUL st(1), st
    JNZ loc_46054D
loc_460554:
    FSTP st
    FMULP st(2), st
    FNSTCW [rsp+198h+var_14A]
    MOVZX edi, [rsp+198h+var_14A]
    FLD cs:tbyte_513480
    OR di, 0C00h
    CMP r15d, 4
    MOV [rsp+198h+var_14C], di
    FLD st(2)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FSUB st(2), st
    JA def_460595
loc_460593:
    FSTP st(1)
loc_460595:
    JMP ds:jpt_460595[r15*8]
loc_46059D:
    FLD1 
    JMP loc_45FA1F
loc_4605A4:
    FXCH st(1)
    FSTP [rsp+1A8h+var_188]
    SUB rsp, 10h
    MOV rdi, cs:stderr
    MOV ecx, ebx
    MOV edx, offset aAfterRoundingV
    MOV esi, 1
    MOV eax, 1
    FLD st
    FSTP [rsp+1B8h+var_1B8]
    MOVSD xmm0, qword ptr [rsp+1B8h+var_198]
    FSTP [rsp+1B8h+var_1A8]
    CALL ___fprintf_chk
    POP rdi
    POP r8
    MOV rcx, cs:qword_742F60
    FLD [rsp+1A8h+var_188]
    FLD [rsp+1A8h+var_1A8]
    JMP loc_4601E3
loc_4605F0:
    MOV r8d, cs:dword_742F58
    MOV rdx, cs:qword_752AB8
    MOV r9d, 2
    MOV rsi, cs:qword_752AC0
    MOV qword ptr [rsp+198h+var_118], rcx
    LEA rcx, [rsp+198h+var_118]
    MOV rdi, r12
    CALL sub_4C5F90
    CMP cs:byte_752A68, 0
    JZ loc_45FEB9
loc_460630:
    MOV rdi, cs:qword_752AC0
    CALL sub_4D4D30
    MOV rdi, cs:stderr
    MOV rcx, rax
    MOV edx, offset aAfterPaddingS
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
    JMP loc_45FEB9
loc_46065C:
    FLDZ 
    FUCOMIP st, st(1)
    FLD st
    JBE loc_460666
loc_460664:
    FCHS 
loc_460666:
    FLD cs:flt_513430
    FLD st
    FUCOMIP st, st(2)
    FSTP st(1)
    JBE loc_46011A
loc_460678:
    MOV esi, 1
loc_46067D:
    FMULP st(1), st
    FNSTCW [rsp+1A8h+var_15A]
    MOVZX eax, [rsp+1A8h+var_15A]
    FLD cs:tbyte_513480
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+1A8h+var_15C], ax
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_188]
    FLDCW [rsp+1A8h+var_15A]
    FILD qword ptr [rsp+1A8h+var_188]
    FMULP st(1), st
    FSUB st(1), st
    JBE loc_460595
loc_4606B8:
    FSTP st
    FSTP st
    FLD qword ptr [rsp+1A8h+var_198]
    FLD dword ptr [rsp+1A8h+var_1A8]
    FUCOMI st, st(1)
    JB loc_4601D6
loc_4606CB:
    FSTP st
    FLDZ 
    JMP loc_4601B7
loc_4606D8:
    FXCH st(1)
    FSTP [rsp+198h+var_168]
    SUB rsp, 10h
    MOV rdi, cs:stderr
    MOV edx, offset aScaledValueToL
    MOV ecx, ebx
    MOV esi, 1
    MOV eax, 1
    MOVSD xmm0, qword ptr [rsp+1A8h+var_188]
    FLD st
    FSTP [rsp+1A8h+var_1A8]
    FSTP [rsp+1A8h+var_178]
    CALL ___fprintf_chk
    POP r9
    POP r10
    MOVZX edx, cs:byte_752A68
    FLD [rsp+198h+var_168]
    FLD [rsp+198h+var_178]
    JMP loc_4600F3
loc_460726:
    FLD st
    FCHS 
    FLD qword ptr [rsp+1A8h+var_198]
    FXCH st(1)
    FUCOMI st, st(1)
    JNB loc_4601B3
loc_460738:
    FSTP st(1)
    JMP loc_460513
loc_46073F:
    CMP byte ptr [r15+1], 69h
    JZ loc_46075A
loc_460746:
    MOV dword ptr [rsp+198h+var_188], ebp
    MOVZX edx, cs:byte_752A68
    FILD dword ptr [rsp+198h+var_188]
    JMP loc_45FBD4
loc_46075A:
    MOVZX edx, cs:byte_752A68
    LEA rax, [r15+2]
    MOV [rsp+198h+s1], rax
    TEST dl, dl
    JNZ loc_4608E8
loc_460772:
    FLD cs:flt_513434
    MOV ebp, 400h
    JMP loc_45FBD4
loc_460782:
    FSUB cs:flt_513440
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_198]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_198]
    JMP loc_45FCE9
loc_46079B:
    FXCH st(1)
    FSUB cs:flt_513440
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_188]
    FLDCW [rsp+1A8h+var_15A]
    FILD qword ptr [rsp+1A8h+var_188]
    JMP loc_460175
loc_4607B8:
    XOR ebx, ebx
    JMP loc_45F67F
loc_4607BF:
    FCHS 
    FLD st
    FLDCW [rsp+198h+var_14C]
    FISTP [rsp+198h+var_158]
    FLDCW [rsp+198h+var_14A]
    JMP loc_45FF92
loc_4607D4:
    FSTP st
    FSTP st
    FLD qword ptr [rsp+198h+var_188]
    FLDZ 
    FUCOMI st, st(1)
    JNB loc_4601B7
loc_4607E6:
    FSTP st(1)
    JMP loc_4601D8
loc_4607F0:
    FLD cs:flt_513430
    FNSTCW [rsp+198h+var_14A]
    MOVZX eax, [rsp+198h+var_14A]
    FLD st(1)
    FMUL st, st(1)
    OR ah, 0Ch
    CMP r15d, 4
    MOV [rsp+198h+var_14C], ax
    FLD cs:tbyte_513480
    FLD st(1)
    FDIV st, st(1)
    FLDCW [rsp+198h+var_14C]
    FISTP qword ptr [rsp+198h+var_178]
    FLDCW [rsp+198h+var_14A]
    FILD qword ptr [rsp+198h+var_178]
    FMULP st(1), st
    FSUB st(1), st
    JBE loc_45FCD1
loc_460833:
    FSTP st
    FSTP st
    FLDZ 
    FXCH st(1)
loc_46083B:
    FDIVP st(1), st
    JMP loc_45FCF3
loc_460842:
    FXCH st(1)
    FCHS 
    FLD st
    FLDCW [rsp+1A8h+var_15C]
    FISTP qword ptr [rsp+1A8h+var_168]
    FLDCW [rsp+1A8h+var_15A]
    JMP loc_460314
loc_460859:
    FLD cs:flt_513430
    JMP loc_46019B
loc_460864:
    FSTP st
    FSTP st
    FLDZ 
    FXCH st(1)
    JMP loc_4604F3
loc_460871:
    MOV qword ptr [rsp+198h+var_188], 0
    JMP loc_45F819
loc_46087F:
    FSTP [rsp+198h+var_198]
    MOV edx, 5
    MOV esi, offset aFailedToPrepar
    XOR edi, edi
    CALL _dcgettext
    SUB rsp, 10h
    MOV rdx, rax
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    FLD [rsp+1A8h+var_198]
    FSTP [rsp+1A8h+var_1A8]
    CALL _error
loc_4608AF:
    FLD cs:flt_513430
    JMP loc_46067D
loc_4608BA:
    FSTP st
    MOV edx, 5
    MOV esi, offset aFailedToPrepar
    XOR edi, edi
    CALL _dcgettext
    FLD [rsp+1A8h+var_1A8]
    MOV rdx, rax
    SUB rsp, 10h
    XOR esi, esi
    MOV edi, 1
    XOR eax, eax
    FSTP [rsp+1B8h+var_1B8]
    CALL _error
loc_4608E8:
    MOV rdi, cs:stderr
    MOV edx, offset aAutoScalingFou
    MOV ecx, 400h
    MOV esi, 1
    XOR eax, eax
    MOV dword ptr [rsp+1B8h+var_1A8], r8d
    MOV ebp, 400h
    CALL ___fprintf_chk
    FLD cs:flt_513434
    MOVZX edx, cs:byte_752A68
    MOV r8d, dword ptr [rsp+1B8h+var_1A8]
    JMP loc_45FBD4
loc_460926:
    MOV edx, eax
    ADD rdx, qword ptr [rsp+198h+var_188]
    CMP rdx, 12h
    JBE loc_45FB3C
loc_460937:
    JMP loc_45F8A7
loc_46093C:
    FSTP st
    MOV qword ptr [rsp+1B8h+var_1A8], 0
    FLD1 
    JMP loc_45FA5A
loc_46094E:
    CMP byte ptr [r15+1], 69h
    JNZ loc_45FA40
loc_460959:
    LEA rax, [r15+2]
    MOV [rsp+198h+s1], rax
    JMP loc_45FBC5
loc_460967:
    CALL ___stack_chk_fail
loc_46096C:
    FLD cs:flt_513430
    JMP loc_45FA1F
loc_460977:
    FCHS 
    JMP loc_460513
loc_46097E:
    FSTP st
    FSTP st(1)
    FLDZ 
    FXCH st(1)
    JMP loc_460190
```
{'input_parameter_count': 2, 'input_parameter_types': ['Pointer', 'Pointer'], 'return_value_type': 'Integer', 'dominant_operation_categories': ['DataMovement', 'Arithmetic', 'ConditionalBranching'], 'loop_indicators': True, 'number_of_distinct_subroutine_call_targets': 0, 'use_of_indexed_addressing_modes': True, 'jump_table_indicators': False, 'presence_of_simd_instructions': False, 'presence_of_notable_integer_constants': ['0x9E3779B1'], 'presence_of_notable_floating_point_constants': [], 'count_of_distinct_immediate_values': 3, 'string_literal_presence': False, 'likely_modifies_input_parameters': False, 'likely_modifies_global_state': False, 'likely_performs_memory_allocation_deallocation': False, 'likely_performs_io_operations': False, 'likely_performs_block_memory_operations': False, 'likely_performs_linear_memory_accesses': True, 'likely_performs_error_handling': False, 'number_of_software_interrupts_system_calls': 0, 'inferred_algorithm': 'Hash Function', 'inferred_category': 'Cryptographic'}
