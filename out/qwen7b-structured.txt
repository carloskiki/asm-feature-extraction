############
```assembly
loc_46D2B0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rsi
    PUSH rbp
    PUSH rbx
    XOR ebp, ebp
    MOV ebx, 1
    SUB rsp, 8
    JMP loc_46D2D5
loc_46D2D0:
    CMP al, 6Eh
    CMOVZ ebp, ebx
loc_46D2D5:
    MOV edi, offset aNp
    CALL sub_468140
    TEST al, al
    JNZ loc_46D2D0
loc_46D2E3:
    MOV rdi, [r12]
    CMP byte ptr [rdi], 72h
    JZ loc_46D3F0
loc_46D2F0:
    NOT ebp
    MOV r13d, 1
loc_46D2F8:
    MOV rbx, cs:qword_742FF0
    MOV r14, [rbx]
    TEST r14, r14
    JZ loc_46D400
loc_46D30B:
    MOV r12d, r13d
    AND r12d, ebp
    JMP loc_46D33A
loc_46D318:
    ADD r15, 1
loc_46D31C:
    MOV rdi, r14
    ADD rbx, 8
    MOV edx, r12d
    MOV rsi, r15
    CALL sub_469EB0
    MOV r14, [rbx]
    TEST r14, r14
    JZ loc_46D3D6
loc_46D33A:
    MOV esi, 3Dh
    MOV rdi, r14
    CALL _strchr
    TEST rax, rax
    MOV r15, rax
    JNZ loc_46D318
loc_46D34F:
    MOVZX edi, byte ptr [r14]
    MOV esi, edi
    SHL esi, 4
    CMP dil, 3Dh
    JZ loc_46D384
loc_46D35E:
    TEST dil, dil
    JZ loc_46D384
loc_46D363:
    MOV rdx, r14
    JMP loc_46D377
loc_46D370:
    CMP al, 3Dh
    JZ loc_46D384
loc_46D374:
    MOVZX edi, al
loc_46D377:
    ADD rdx, 1
    MOVZX eax, byte ptr [rdx]
    ADD esi, edi
    TEST al, al
    JNZ loc_46D370
loc_46D384:
    MOV eax, 0A41A41A5h
    MUL esi
    MOV eax, esi
    SUB eax, edx
    SHR eax, 1
    ADD eax, edx
    SHR eax, 5
    IMUL eax, 27h
    SUB esi, eax
    MOV rax, cs:qword_743210
    LEA rdi, [rax+rsi*8+28h]
    MOV rsi, r14
    CALL sub_466420
    MOV rax, [rax]
    TEST rax, rax
    JZ loc_46D31C
loc_46D3BB:
    MOV edx, [rax+8]
    ADD rbx, 8
    MOV r14, [rbx]
    OR edx, r13d
    AND edx, ebp
    TEST r14, r14
    MOV [rax+8], edx
    JNZ loc_46D33A
loc_46D3D6:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46D3F0:
    MOV ebp, 0FFFFFFFFh
    MOV r13d, 2
    JMP loc_46D2F8
loc_46D400:
    XOR edx, edx
    MOV esi, r13d
    CALL sub_46D120
    JMP loc_46D3D6
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Unknown"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "Comparison",
        "ControlFlow",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 4,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x6E",
        "0x72",
        "0x3D",
        "0xA41A41A5",
        "0x27",
        "0x28",
        "0x2",
        "0x1",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 9
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Character Processing and Data Manipulation"
}
```
############
```assembly
loc_4479B0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rsi
    PUSH rbp
    PUSH rbx
    SUB rsp, 28h
    MOV eax, [rdi+2Ch]
    MOV [rsp+58h+var_58], rdi
    MOV [rsp+58h+var_40], rdx
    MOV [rsp+58h+var_48], 0
    MOV [rsp+58h+var_44], eax
    JMP loc_4479F4
loc_4479E0:
    MOV eax, edx
    ADD eax, 1
    MOV [rsp+58h+var_48], eax
loc_4479E9:
    CMP [rsp+58h+var_48], 10h
    JZ loc_447AED
loc_4479F4:
    MOV edx, [rsp+58h+var_48]
    MOVSXD rax, edx
    CMP qword ptr [r12+rax*8], 0
    JZ loc_4479E0
loc_447A02:
    MOV r13d, [rsp+58h+var_48]
    XOR r14d, r14d
    SHL r13d, 6
    MOV r15d, r13d
    NOP dword ptr [rax+00000000h]
loc_447A18:
    LEA rbp, [r15+r14]
    LEA ebx, [r13+r14+0]
    ADD r14, 1
    MOV rdi, rbp
    CALL ___fdelt_chk
    MOV esi, 1
    MOV ecx, ebx
    SHL rsi, cl
    TEST [r12+rax*8], rsi
    JZ loc_447A18
loc_447A3D:
    MOV rdi, rbp
    MOV [rsp+58h+var_50], rsi
    CALL ___fdelt_chk
    MOV rcx, [rsp+58h+var_50]
    NOT rcx
    AND [r12+rax*8], rcx
    CMP ebx, [rsp+58h+var_44]
    JGE loc_447AED
loc_447A60:
    MOV r15, [rsp+58h+var_58]
    MOVSXD rax, ebx
    MOV rdx, [r15]
    MOVSX r13, word ptr [rdx+rax*2]
    TEST r13d, r13d
    MOV rbp, r13
    JS loc_4479E9
loc_447A7B:
    JNZ loc_447B00
loc_447A81:
    MOV rax, [r15+8]
    MOV esi, 4
    MOV edi, ebx
    MOV rdx, [rax]
    XOR eax, eax
    OR dh, 8
    CALL _fcntl
    XOR edx, edx
    XOR esi, esi
    MOV edi, ebx
    CALL _accept
    MOV ebp, eax
    MOV rax, [r15+8]
    MOV esi, 4
    MOV edi, ebx
    MOV rdx, [rax]
    XOR eax, eax
    CALL _fcntl
    TEST ebp, ebp
    JS loc_447B40
loc_447AC3:
    MOV rax, [rsp+58h+var_58]
    MOV esi, ebp
    MOV rdi, rax
    CALL qword ptr [rax+18h]
    TEST eax, eax
    JZ loc_4479E9
loc_447AD7:
    MOV rdi, [rsp+58h+var_58]
    MOV esi, eax
    CALL sub_447890
    CMP [rsp+58h+var_48], 10h
    JNZ loc_4479F4
loc_447AED:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_447B00:
    MOV rax, [rsp+58h+var_58]
    SHL rbp, 3
    MOV edi, ebx
    MOV rsi, rbp
    ADD rsi, [rax+8]
    MOV rax, [rsp+58h+var_40]
    CALL rax
    TEST eax, eax
    JNZ loc_447B60
loc_447B1C:
    MOV rax, [rsp+58h+var_58]
    MOV edx, [rax+28h]
    TEST edx, edx
    JZ loc_4479E9
loc_447B2B:
    ADD rbp, [rax+10h]
    CALL sub_40CA70
    MOV eax, eax
    MOV [rbp+0], rax
    JMP loc_4479E9
loc_447B40:
    MOV rax, cs:qword_7431E8
    CMP dword ptr [rax], 0Bh
    JZ loc_4479E9
loc_447B50:
    MOV edi, offset aAccept_1
    XOR eax, eax
    CALL sub_409DA0
loc_447B60:
    MOV rdi, [rsp+58h+var_58]
    MOV esi, r13d
    CALL sub_447890
    JMP loc_4479E9
```
Output:
############
```assembly
loc_743D60:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference Marker"
}
```
############
```assembly
loc_743AF0:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference Marker"
}
```
############
```assembly
loc_407D80:

loc_495ED0:
    MOV edi, 1
    JMP sub_407D80
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "UnconditionalJump",
        "Arithmetic"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x1"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Infinite Loop"
}
```
############
```assembly
loc_4B39A0:
    SUB rsp, 18h
    MOV [rsp+18h+var_18], edx
    MOV edx, esi
    MOV rsi, rdi
    MOV rdi, rsp
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    CALL sub_4C2340
    MOV rcx, [rsp+18h+var_10]
    XOR rcx, fs:28h
    JNZ loc_4B39D9
loc_4B39D4:
    ADD rsp, 18h
    RETN 
loc_4B39D9:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Integer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "StackManipulation",
        "SubroutineCall",
        "ConditionalBranching"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x18"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Security Check/Validation"
}
```
############
```assembly
loc_736830:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference Placeholder"
}
```
############
```assembly
loc_41C1B0:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST rdx, rdx
    SETNZ al
    AND al, cs:byte_6B06A0
    MOV ebp, eax
    JZ loc_41C22B
loc_41C1CA:
    MOV rax, cs:qword_6B0698
    TEST rax, rax
    JNZ loc_41C240
loc_41C1D6:
    MOV rbx, rdx
    MOV rcx, rdi
    MOV r13, rdi
    LEA rdi, aLimitSDSReache
    MOV edx, esi
    MOV r12d, esi
    MOV rsi, rbx
    CALL sub_41C070
    MOV rax, cs:stderr_ptr
    LEA rsi, aLimitSDSReache
    MOV r8, r13
    MOV ecx, r12d
    MOV rdx, rbx
    MOV rdi, [rax]
    XOR eax, eax
    CALL sub_41AC40
    MOV rdi, cs:stream
    CALL _fflush
    CALL ___errno_location
    MOV dword ptr [rax], 0Ch
loc_41C22B:
    ADD rsp, 8
    MOV eax, ebp
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_41C240:
    SUB rax, 1
    XOR ebp, ebp
    MOV cs:qword_6B0698, rax
    ADD rsp, 8
    MOV eax, ebp
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 4,
      "input_parameter_types": [
        "Pointer",
        "Pointer",
        "Integer",
        "Integer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Comparison",
        "DataMovement",
        "SubroutineCall",
        "ConditionalBranching",
        "Bitwise",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 4,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x6B06A0",
        "0x6B0698",
        "0x1",
        "0x0",
        "0xC",
        "0x41C070",
        "0x41AC40",
        "0x40B5E0",
        "0x6B0698"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 9
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": true,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Error Handling and Logging"
}
```
############
```assembly
loc_429BD0:
    PUSH rbp
    PUSH rbx
    MOV edx, esi
    MOV rsi, rdi
    LEA rdi, aSD
    XOR eax, eax
    SUB rsp, 8
    CALL sub_41A840
    TEST rax, rax
    MOV rbp, rax
    JZ loc_429C29
loc_429BF1:
    MOVZX ebx, byte ptr [rax]
    CMP bl, 3Ah
    JZ loc_429C29
loc_429BF9:
    TEST bl, bl
    JZ loc_429C29
loc_429BFD:
    CALL ___ctype_tolower_loc
    MOV rdx, rbp
    JMP loc_429C15
loc_429C10:
    CMP bl, 3Ah
    JZ loc_429C29
loc_429C15:
    MOV rcx, [rax]
    ADD rdx, 1
    MOV ecx, [rcx+rbx*4]
    MOV [rdx-1], cl
    MOVZX ebx, byte ptr [rdx]
    TEST bl, bl
    JNZ loc_429C10
loc_429C29:
    ADD rsp, 8
    MOV rax, rbp
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Integer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Comparison",
        "Bitwise",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x3A"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Character Processing and Conversion"
}
```
############
```assembly
loc_402430:
    JMP cs:off_6B0170
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x6B0170"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Jump"
}
```
############
```assembly
loc_402460:
    JMP cs:off_6B0188
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x6B0188"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Jump to Absolute Address"
}
```
############
```assembly
loc_4AC120:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 40A8h
    MOV rax, fs:28h
    MOV [rsp+40D8h+var_40], rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_4ACC8F
loc_4AC14D:
    MOV rbp, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+3278h], rax
    JNZ loc_4ACC76
loc_4AC162:
    MOV r8d, [rdi+3270h]
    MOV r14, rsi
    TEST r8d, r8d
    JNZ loc_4AC8E8
loc_4AC175:
    TEST r14, r14
    JZ loc_4ACC5D
loc_4AC17E:
    MOV eax, 0ABACADABh
    CMP [r14+30h], rax
    JNZ loc_4ACC44
loc_4AC18D:
    MOV rsi, r14
    MOV rdi, rbp
    CALL sub_40F630
    MOV rcx, r14
    MOV edx, 2
    MOV rdi, rbp
    MOV rsi, rax
    MOV rbx, rax
    CALL sub_516AA0
    TEST eax, eax
    JZ loc_4ACB0C
loc_4AC1B6:
    LEA rax, [rbp+2270h]
    LEA rsi, [rsp+40D8h+file]
    MOV rdi, rax
    MOV [rsp+40D8h+var_40C0], rax
    CALL sub_44FFE0
    TEST eax, eax
    JZ loc_4ACABE
loc_4AC1DA:
    PXOR xmm0, xmm0
    UCOMISD xmm0, qword ptr [rbx+248h]
    JP loc_4AC1EE
loc_4AC1E8:
    JZ loc_4AC6D0
loc_4AC1EE:
    UCOMISD xmm0, qword ptr [rbx+250h]
    JP loc_4AC1FE
loc_4AC1F8:
    JZ loc_4AC6D0
loc_4AC1FE:
    LEA r15, [rsp+40D8h+var_4078]
loc_4AC203:
    LEA rdi, [rsp+40D8h+var_40B8]
    XOR eax, eax
    CMP dword ptr [rbx+4], 2
    MOV edx, 20h
    LEA r12, [rsp+40D8h+s]
    SETZ al
    XOR esi, esi
    MOV dword ptr [rsp+40D8h+var_40D8], eax
    CALL sub_41A5B0
    MOV edx, 20h
    XOR esi, esi
    MOV rdi, r15
    CALL sub_41A5B0
    MOV edx, 20h
    XOR esi, esi
    LEA rdi, [rsp+40D8h+var_4098]
    CALL sub_41A5B0
    MOV edx, 1000h
    XOR esi, esi
    MOV rdi, r12
    CALL sub_41A5B0
    MOV rdi, rbx
    CALL sub_518060
    CDQE 
    CMP rax, 0FFFFFFFFFFFFFFFFh
    JZ loc_4AC2E0
loc_4AC267:
    MOV [rsp+40D8h+var_40D0], 0
    LEA rcx, [r15+18h]
    MOV r13, r12
    MOV [rsp+40D8h+var_40C8], rcx
    JMP loc_4AC290
loc_4AC280:
    MOV rdi, rbx
    CALL sub_518060
    CDQE 
    CMP rax, 0FFFFFFFFFFFFFFFFh
    JZ loc_4AC2E0
loc_4AC290:
    CMP qword ptr [rbp+28h], 0
    JNZ loc_4AC280
loc_4AC297:
    MOV [r13+0], al
    CMP rax, 2Fh
    JZ loc_4AC720
loc_4AC2A5:
    CMP rax, 0Ah
    JZ loc_4AC720
loc_4AC2AF:
    LEA rax, [r13+1]
    MOV rdx, rax
    SUB rdx, r12
    CMP rdx, 0FFEh
    JA loc_4AC720
loc_4AC2C6:
    MOV rdi, rbx
    MOV r13, rax
    CALL sub_518060
    CDQE 
    CMP rax, 0FFFFFFFFFFFFFFFFh
    JNZ loc_4AC290
loc_4AC2D9:
    NOP dword ptr [rax+00000000h]
loc_4AC2E0:
    MOV rdi, rbx
    CALL sub_514EA0
    CMP [rsp+40D8h+var_4098], 0
    JZ loc_4AC2F8
loc_4AC2F0:
    CMP [rsp+40D8h+var_4090], 0
    JNZ loc_4AC307
loc_4AC2F8:
    LEA rsi, [rsp+40D8h+var_4098]
    MOV edi, offset a612x792
    CALL sub_59EDA0
loc_4AC307:
    MOV rdi, [rbp+28h]
    TEST rdi, rdi
    JZ loc_4AC31A
loc_4AC310:
    LEA rsi, [rsp+40D8h+var_4098]
    CALL sub_59EDA0
loc_4AC31A:
    MOV rax, [rsp+40D8h+var_4090]
    TEST rax, rax
    JS loc_4ACA80
loc_4AC328:
    PXOR xmm1, xmm1
    CVTSI2SD xmm1, rax
loc_4AC331:
    MOV rax, [rsp+40D8h+var_4098]
    TEST rax, rax
    JS loc_4ACA60
loc_4AC33F:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
loc_4AC348:
    MOV edx, offset a20gx20g
    MOV esi, 1000h
    MOV eax, 2
    LEA rdi, [rsp+40D8h+var_2048]
    CALL sub_414410
    MOV edi, [rbp+204h]
    MOV rdx, r14
    XOR esi, esi
    TEST edi, edi
    JNZ loc_4AC918
loc_4AC377:
    MOV ecx, dword ptr [rsp+40D8h+var_40D8]
    TEST ecx, ecx
    JZ loc_4AC8D0
loc_4AC382:
    MOV edi, offset aPclCmyk
    CALL sub_546410
    MOV [rsp+40D8h+var_40D8], rax
loc_4AC390:
    CMP [rsp+40D8h+var_40D8], 0
    JZ loc_4ACC38
loc_4AC39B:
    CMP [rsp+40D8h+var_4098], 0
    JZ loc_4AC3AB
loc_4AC3A3:
    CMP [rsp+40D8h+var_4090], 0
    JNZ loc_4AC3BA
loc_4AC3AB:
    LEA rsi, [rsp+40D8h+var_4098]
    MOV edi, offset a612x792
    CALL sub_59EDA0
loc_4AC3BA:
    MOV rdi, [rbp+28h]
    TEST rdi, rdi
    JZ loc_4AC3CD
loc_4AC3C3:
    LEA rsi, [rsp+40D8h+var_4098]
    CALL sub_59EDA0
loc_4AC3CD:
    MOV edi, offset byte_6D3DC9
    CALL sub_448010
    MOV edi, offset byte_6D3DC9
    MOV r15, rax
    MOV [rsp+40D8h+var_40D0], rax
    CALL sub_448010
    MOVSD xmm1, qword ptr [rbx+250h]
    MOV edx, offset aGxG
    MOV rdi, r15
    MOVSD xmm0, qword ptr [rbx+248h]
    MOV r13, rax
    MOV esi, 1000h
    MOV eax, 2
    CALL sub_414410
    MOV rax, [rsp+40D8h+var_4098]
    TEST rax, rax
    JS loc_4ACAA0
loc_4AC421:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
loc_4AC42A:
    MULSD xmm0, qword ptr [rbx+248h]
    DIVSD xmm0, cs:qword_6D2388
    ADDSD xmm0, cs:qword_6D2460
    CALL _floor
    MOVSD xmm1, cs:qword_6D2468
    UCOMISD xmm0, xmm1
    JNB loc_4AC880
loc_4AC459:
    CVTTSD2SI r15, xmm0
    MOV rdx, [rsp+40D8h+var_4090]
    MOV [rsp+40D8h+var_4098], r15
    TEST rdx, rdx
    JS loc_4AC8A9
loc_4AC471:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rdx
loc_4AC47A:
    MULSD xmm0, qword ptr [rbx+250h]
    MOVSD [rsp+40D8h+var_40C8], xmm1
    DIVSD xmm0, cs:qword_6D2388
    ADDSD xmm0, cs:qword_6D2460
    CALL _floor
    MOVSD xmm1, [rsp+40D8h+var_40C8]
    UCOMISD xmm0, xmm1
    JNB loc_4AC818
loc_4AC4AD:
    CVTTSD2SI rdx, xmm0
    MOV [rsp+40D8h+var_4090], rdx
    TEST rdx, rdx
    JS loc_4AC83C
loc_4AC4C0:
    PXOR xmm1, xmm1
    CVTSI2SD xmm1, rdx
    TEST r15, r15
    JS loc_4AC85E
loc_4AC4D2:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, r15
loc_4AC4DB:
    MOV edx, offset aG20gx20g
    MOV esi, 1000h
    MOV rdi, r13
    MOV eax, 2
    CALL sub_414410
    MOV rdi, rbx
    CALL sub_40A330
    MOV rdi, rbp
    CALL sub_40C160
    MOV r15, rax
    MOV byte ptr [rax+270h], 0
    MOV rax, [rax+40h]
    TEST rax, rax
    JZ loc_4AC55D
loc_4AC515:
    CMP rax, 1
    JZ loc_4ACB80
loc_4AC51F:
    ADD rax, [r15+38h]
    JS loc_4ACBE1
loc_4AC529:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
loc_4AC532:
    MOV edx, offset aDlastpage20g
    MOV esi, 1000h
    MOV rdi, r13
    MOV eax, 1
    CALL sub_414410
loc_4AC549:
    MOV rax, [r15+30h]
    MOV qword ptr [r15+40h], 0
    TEST rax, rax
    JZ loc_4AC55D
loc_4AC55A:
    MOV byte ptr [rax], 0
loc_4AC55D:
    LEA rbx, [r15+2270h]
    MOV edx, 1000h
    LEA rdi, [rsp+40D8h+var_3048]
    MOV rsi, rbx
    CALL sub_448A10
    MOV rdi, rbx
    CALL sub_44FFB0
    CMP dword ptr [r15+14h], 1
    MOV rdi, [rsp+40D8h+var_40D8]
    SBB ebp, ebp
    CALL sub_5463A0
    SUB rsp, 8
    AND ebp, 0FFFFFFFDh
    MOV rdi, r12
    LEA rcx, [rsp+40E0h+file]
    ADD ebp, 4
    MOV rdx, rax
    PUSH rcx
    MOV r8d, ebp
    MOV ecx, ebp
    MOV esi, 1000h
    PUSH rbx
    XOR eax, eax
    PUSH r13
    MOV r9, [rsp+40F8h+var_40D0]
    CALL sub_414410
    ADD rsp, 20h
    MOV rdi, r13
    CALL sub_448B70
    MOV rdi, [rsp+40D8h+var_40D0]
    CALL sub_448B70
    MOV esi, [r15+218h]
    XOR ecx, ecx
    XOR edi, edi
    MOV r8, r14
    MOV rdx, r12
    CALL sub_546090
    MOV rsi, r14
    MOV rdi, r15
    CALL sub_53DBC0
    MOV rdi, rbx
    MOV rbp, rax
    CALL sub_43CE50
    LEA rdi, [rsp+40D8h+file]
    CALL sub_43CE50
    MOV rdi, r15
    CALL sub_40A1A0
    TEST rbp, rbp
    JZ loc_4ACB20
loc_4AC623:
    LEA rdi, [rbp+23F8h]
    MOV esi, (offset aWbmp+1)
    CALL sub_414FD0
    TEST eax, eax
    JNZ loc_4AC643
loc_4AC638:
    JMP loc_4AC9E8
loc_4AC640:
    MOV rbp, rax
loc_4AC643:
    LEA rdi, [rbp+3F8h]
    MOV edx, 1000h
    LEA rsi, [rsp+40D8h+var_3048]
    CALL sub_448A10
    MOV rax, [rsp+40D8h+var_4098]
    MOV rdi, rbp
    MOV [rbp+258h], rax
    MOV rax, [rsp+40D8h+var_4090]
    MOV [rbp+260h], rax
    MOV rax, [rsp+40D8h+var_4088]
    MOV [rbp+268h], rax
    MOV rax, [rsp+40D8h+var_4080]
    MOV [rbp+270h], rax
    CALL sub_4135D0
    TEST rax, rax
    JNZ loc_4AC640
loc_4AC699:
    MOV rdi, rbp
    CALL sub_411B60
loc_4AC6A1:
    MOV rcx, [rsp+40D8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_4ACC3F
loc_4AC6B8:
    ADD rsp, 40A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4AC6D0:
    LEA r15, [rsp+40D8h+var_4078]
    MOV edi, offset a720x720
    MOV rsi, r15
    CALL sub_59EF80
    MOVSD xmm0, [rsp+40D8h+var_4078]
    MOVSD qword ptr [rbx+248h], xmm0
    TEST al, 8
    JNZ loc_4AC708
loc_4AC6F4:
    MOVSD qword ptr [rbx+250h], xmm0
    JMP loc_4AC203
loc_4AC708:
    MOVSD xmm0, [rsp+40D8h+var_4070]
    MOVSD qword ptr [rbx+250h], xmm0
    JMP loc_4AC203
loc_4AC720:
    MOV edx, 0Ah
    MOV rsi, r12
    MOV edi, offset aDevicecmyk
    MOV byte ptr [r13+1], 0
    CALL sub_415060
    MOV edx, 7
    MOV rsi, r12
    MOV edi, offset aCropbox
    TEST eax, eax
    MOV eax, 1
    CMOVNZ eax, dword ptr [rsp+40D8h+var_40D8]
    MOV dword ptr [rsp+40D8h+var_40D8], eax
    CALL sub_415060
    TEST eax, eax
    JZ loc_4AC930
loc_4AC75F:
    MOV edx, 8
    MOV rsi, r12
    MOV edi, offset aMediabox
    CALL sub_415060
    TEST eax, eax
    JZ loc_4AC980
loc_4AC779:
    CMP [rsp+40D8h+var_40D0], 4
    MOV r13, r12
    JNZ loc_4AC280
loc_4AC788:
    NOP dword ptr [rax+rax+00000000h]
loc_4AC790:
    MOVSD xmm0, [rsp+40D8h+var_4068]
    SUBSD xmm0, [rsp+40D8h+var_4078]
    ADDSD xmm0, cs:qword_6D2460
    CALL _floor
    UCOMISD xmm0, cs:qword_6D2468
    JNB loc_4ACA40
loc_4AC7B7:
    CVTTSD2SI r13, xmm0
loc_4AC7BC:
    MOVSD xmm0, [rsp+40D8h+var_4060]
    SUBSD xmm0, [rsp+40D8h+var_4070]
    ADDSD xmm0, cs:qword_6D2460
    CALL _floor
    UCOMISD xmm0, cs:qword_6D2468
    JNB loc_4ACB60
loc_4AC7E3:
    CVTTSD2SI rax, xmm0
loc_4AC7E8:
    CMP r13, [rsp+40D8h+var_4098]
    JBE loc_4AC7F4
loc_4AC7EF:
    MOV [rsp+40D8h+var_4098], r13
loc_4AC7F4:
    CMP rax, [rsp+40D8h+var_4090]
    JBE loc_4ACBD0
loc_4AC7FF:
    MOV [rsp+40D8h+var_4090], rax
    MOV r13, r12
    MOV [rsp+40D8h+var_40D0], 4
    JMP loc_4AC280
loc_4AC818:
    MOV rcx, 8000000000000000h
    SUBSD xmm0, xmm1
    CVTTSD2SI rdx, xmm0
    XOR rdx, rcx
    MOV [rsp+40D8h+var_4090], rdx
    TEST rdx, rdx
    JNS loc_4AC4C0
loc_4AC83C:
    MOV rcx, rdx
    AND edx, 1
    PXOR xmm1, xmm1
    SHR rcx, 1
    OR rcx, rdx
    CVTSI2SD xmm1, rcx
    ADDSD xmm1, xmm1
    TEST r15, r15
    JNS loc_4AC4D2
loc_4AC85E:
    MOV rdx, r15
    MOV rax, r15
    PXOR xmm0, xmm0
    SHR rdx, 1
    AND eax, 1
    OR rdx, rax
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_4AC4DB
loc_4AC880:
    MOV rdx, 8000000000000000h
    SUBSD xmm0, xmm1
    CVTTSD2SI r15, xmm0
    XOR r15, rdx
    MOV rdx, [rsp+40D8h+var_4090]
    MOV [rsp+40D8h+var_4098], r15
    TEST rdx, rdx
    JNS loc_4AC471
loc_4AC8A9:
    MOV rcx, rdx
    AND edx, 1
    PXOR xmm0, xmm0
    SHR rcx, 1
    OR rcx, rdx
    CVTSI2SD xmm0, rcx
    ADDSD xmm0, xmm0
    JMP loc_4AC47A
loc_4AC8D0:
    MOV edi, offset aPclColor
    CALL sub_546410
    MOV [rsp+40D8h+var_40D8], rax
    JMP loc_4AC390
loc_4AC8E8:
    LEA r9, [rdi+2270h]
    MOV r8d, 7D85CEh
    MOV ecx, 0C9h
    MOV edx, offset aReadpclimage
    MOV esi, offset aCodersPclC
    MOV edi, 8000h
    XOR eax, eax
    CALL sub_416CE0
    JMP loc_4AC175
loc_4AC918:
    MOV edi, offset aPclMono
    CALL sub_546410
    MOV [rsp+40D8h+var_40D8], rax
    JMP loc_4AC390
loc_4AC930:
    MOV r9, [rsp+40D8h+var_40C8]
    LEA r10, [r15+10h]
    MOV rdx, r15
    MOV rdi, r12
    LEA r13, [r15+8]
    MOV r8, r10
    MOV esi, offset aCropboxLfLfLfL
    MOV [rsp+40D8h+var_40D0], r10
    MOV rcx, r13
    CALL _sscanf
    CMP eax, 4
    JNZ loc_4ACA10
loc_4AC961:
    MOV edx, 8
    MOV rsi, r12
    MOV edi, offset aMediabox
    CALL sub_415060
    TEST eax, eax
    JNZ loc_4AC790
loc_4AC97B:
    NOP dword ptr [rax+rax+00h]
loc_4AC980:
    MOV r9, [rsp+40D8h+var_40C8]
    LEA r10, [r15+10h]
    XOR eax, eax
    MOV rdx, r15
    LEA r13, [r15+8]
    MOV r8, r10
    MOV rdi, r12
    MOV [rsp+40D8h+var_40D0], r10
    MOV rcx, r13
    MOV esi, offset aMediaboxLfLfLf
    CALL _sscanf
    MOV r10, [rsp+40D8h+var_40D0]
    CMP eax, 4
    JZ loc_4AC790
loc_4AC9B8:
    MOV r9, [rsp+40D8h+var_40C8]
    MOV r8, r10
    MOV rcx, r13
    MOV rdx, r15
    MOV esi, offset aMediaboxLfLfLf_0
    MOV rdi, r12
    XOR eax, eax
    CALL _sscanf
    CDQE 
    MOV [rsp+40D8h+var_40D0], rax
    JMP loc_4AC779
loc_4AC9E8:
    MOV rsi, r14
    MOV rdi, rbp
    CALL sub_604CA0
    MOV rbx, rax
    TEST rax, rax
    JZ loc_4AC643
loc_4AC9FF:
    MOV rdi, rbp
    MOV rbp, rbx
    CALL sub_412B50
    JMP loc_4AC643
loc_4ACA10:
    MOV r10, [rsp+40D8h+var_40D0]
    MOV rcx, r13
    MOV rdx, r15
    MOV esi, offset aCropboxLfLfLfL_0
    MOV r9, [rsp+40D8h+var_40C8]
    MOV rdi, r12
    XOR eax, eax
    MOV r8, r10
    CALL _sscanf
    CDQE 
    MOV [rsp+40D8h+var_40D0], rax
    JMP loc_4AC75F
loc_4ACA40:
    SUBSD xmm0, cs:qword_6D2468
    MOV rax, 8000000000000000h
    CVTTSD2SI r13, xmm0
    XOR r13, rax
    JMP loc_4AC7BC
loc_4ACA60:
    MOV rdx, rax
    AND eax, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rax
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_4AC348
loc_4ACA80:
    MOV rdx, rax
    AND eax, 1
    PXOR xmm1, xmm1
    SHR rdx, 1
    OR rdx, rax
    CVTSI2SD xmm1, rdx
    ADDSD xmm1, xmm1
    JMP loc_4AC331
loc_4ACAA0:
    MOV rdx, rax
    AND eax, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rax
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_4AC42A
loc_4ACABE:
    CALL ___errno_location
    MOV edi, [rax]
    CALL sub_407F70
    SUB rsp, 8
    MOV rdi, r14
    MOV r9d, offset aUnabletocreate
    PUSH rax
    MOV rbp, rax
    MOV r8d, 1AEh
    MOV ecx, 0DBh
    PUSH [rsp+40E8h+var_40C0]
    MOV edx, offset aReadpclimage
    PUSH offset aSS_1
    XOR eax, eax
    MOV esi, offset aCodersPclC
    CALL sub_408190
    ADD rsp, 20h
    MOV rdi, rbp
    CALL sub_448B70
loc_4ACB0C:
    MOV rdi, rbx
    CALL sub_412B50
    XOR eax, eax
    JMP loc_4AC6A1
loc_4ACB20:
    PUSH [rsp+40D8h+var_40C0]
    MOV edx, offset aReadpclimage
    PUSH offset aS
    XOR eax, eax
    MOV r9d, offset aPcldelegatefai
    MOV r8d, 19Fh
    MOV ecx, 16Fh
    MOV esi, offset aCodersPclC
    MOV rdi, r14
    CALL sub_408190
    POP rax
    XOR eax, eax
    POP rdx
    JMP loc_4AC6A1
loc_4ACB60:
    SUBSD xmm0, cs:qword_6D2468
    MOV rdx, 8000000000000000h
    CVTTSD2SI rax, xmm0
    XOR rax, rdx
    JMP loc_4AC7E8
loc_4ACB80:
    MOV rax, [r15+38h]
    MOV rcx, rax
    ADD rcx, 1
    JS loc_4ACC1A
loc_4ACB91:
    PXOR xmm1, xmm1
    CVTSI2SD xmm1, rcx
loc_4ACB9A:
    TEST rax, rax
    JS loc_4ACBFF
loc_4ACB9F:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rax
loc_4ACBA8:
    MOV edx, offset aDfirstpage20gD
    MOV esi, 1000h
    MOV rdi, r13
    ADDSD xmm0, cs:qword_6D2458
    MOV eax, 2
    CALL sub_414410
    JMP loc_4AC549
loc_4ACBD0:
    MOV [rsp+40D8h+var_40D0], 4
    MOV r13, r12
    JMP loc_4AC280
loc_4ACBE1:
    MOV rdx, rax
    AND eax, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rax
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_4AC532
loc_4ACBFF:
    MOV rdx, rax
    AND eax, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rax
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_4ACBA8
loc_4ACC1A:
    MOV rdx, rcx
    AND ecx, 1
    PXOR xmm1, xmm1
    SHR rdx, 1
    OR rdx, rcx
    CVTSI2SD xmm1, rdx
    ADDSD xmm1, xmm1
    JMP loc_4ACB9A
loc_4ACC38:
    XOR eax, eax
    JMP loc_4AC6A1
loc_4ACC3F:
    CALL ___stack_chk_fail
loc_4ACC44:
    MOV ecx, offset aReadpclimage_0
    MOV edx, 0CCh
    MOV esi, offset aCodersPclC
    MOV edi, offset aExceptionSigna
    CALL ___assert_fail
loc_4ACC5D:
    MOV ecx, offset aReadpclimage_0
    MOV edx, 0CBh
    MOV esi, offset aCodersPclC
    MOV edi, offset aExceptionExcep
    CALL ___assert_fail
loc_4ACC76:
    MOV ecx, offset aReadpclimage_0
    MOV edx, 0C7h
    MOV esi, offset aCodersPclC
    MOV edi, offset aImageInfoSigna
    CALL ___assert_fail
loc_4ACC8F:
    MOV ecx, offset aReadpclimage_0
    MOV edx, 0C6h
    MOV esi, offset aCodersPclC
    MOV edi, offset aImageInfoConst
    CALL ___assert_fail
```
Output:8:
    CMP [rsp+40D8h+var_4088], 0
    JNZ loc_4AC307
loc_4AC2FF:
    LEA rdi, [rsp+40D8h+var_40B0]
    MOV rsi, r12
    MOV [rsp+40D8h+var_40B8], rdi
    CALL sub_44FFE0
loc_4AC307:
    ADD rsp, 40A8h
    POP r15
    POP r14
    POP r13
    POP r12
    POP rbp
    RET
loc_4ACC44:
    LEA rsi, [rsp+40D8h+file]
    MOV rdi, r14
    CALL sub_44FFE0
    JMP loc_4AC8E8
loc_4ACC5D:
    LEA rsi, [rsp+40D8h+file]
    MOV rdi, rbp
    CALL sub_44FFE0
    JMP loc_4AC8E8
loc_4ACC76:
    LEA rsi, [rsp+40D8h+file]
    MOV rdi, rbp
    CALL sub_44FFE0
    JMP loc_4AC8E8
loc_4ACC8F:
    ADD rsp, 40A8h
    POP r15
    POP r14
    POP r13
    POP r12
    POP rbp
    RET
```

Assistant, please provide your analysis of this assembly routine.
############
```assembly
loc_416B70:
    CMP cs:qword_A353A8, 0
    PUSH rbx
    JZ loc_416BB0
loc_416B7B:
    CALL sub_408240
    MOV rbx, rax
    MOV rdi, rax
    CALL sub_415A60
    MOV rdi, rbx
    CALL sub_407E40
    CALL sub_43E1E0
    POP rbx
    MOV cs:qword_A353B0, rax
    MOV eax, 1
    RETN 
loc_416BB0:
    CALL sub_43E1E0
    MOV cs:qword_A353A8, rax
    JMP loc_416B7B
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ConditionalBranching",
        "SubroutineCall",
        "DataMovement"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 5,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Conditional Loop with Subroutine Calls"
}
```
############
```assembly
loc_6B3D10:
    PUSH rbx
    SUB rsp, 10h
    TEST rdi, rdi
    JZ loc_6B3D95
loc_6B3D1A:
    MOV rbx, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+1078h], rax
    JNZ loc_6B3D7C
loc_6B3D2B:
    MOV eax, [rdi+1070h]
    TEST eax, eax
    JZ loc_6B3D66
loc_6B3D35:
    LEA r9, [rdi+8]
    MOV r8d, 7D85CEh
    MOV ecx, 790h
    MOVSS [rsp+18h+var_C], xmm0
    MOV edx, offset aPixelsetgreenq
    MOV esi, offset aMagickwandPixe
    MOV edi, 40000h
    XOR eax, eax
    CALL sub_416CE0
    MOVSS xmm0, [rsp+18h+var_C]
loc_6B3D66:
    PXOR xmm1, xmm1
    CVTSS2SD xmm1, xmm0
    MOVSD qword ptr [rbx+1040h], xmm1
    ADD rsp, 10h
    POP rbx
    RETN 
loc_6B3D7C:
    MOV ecx, offset aPixelsetgreenq_0
    MOV edx, 78Eh
    MOV esi, offset aMagickwandPixe
    MOV edi, offset aWandSignatureM
    CALL ___assert_fail
loc_6B3D95:
    MOV ecx, offset aPixelsetgreenq_0
    MOV edx, 78Dh
    MOV esi, offset aMagickwandPixe
    MOV edi, offset aWandConstPixel
    CALL ___assert_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Comparison",
        "Bitwise",
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 4,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xABACADAB",
        "0x1078",
        "0x1070",
        "0x8",
        "0x7D85CE",
        "0x790",
        "0x1040",
        "0x40000",
        "0x10",
        "0x78E",
        "0x78D",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 12
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Pixel Manipulation or Image Processing"
}
```
############
```assembly
loc_4E7250:
    MOV rax, [rdi]
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "MemoryAccess",
        "Return"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Direct Pointer Access"
}
```
############
```assembly
loc_533730:
    MOV rdi, [rdi+30h]
    JMP sub_533670
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Unknown"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x30"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Function Call"
}
```
############
```assembly
loc_44E5F0:
    PUSH r13
    PUSH r12
    LEA r13, [rcx+1]
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rax, [rdi+8]
    MOV rcx, [rsi+8]
    MOV rax, [rax+0C0h]
    TEST byte ptr [rax+60h], 1
    JZ loc_44E720
loc_44E617:
    LEA r8, [r13+rdx+0]
    XOR eax, eax
    CMP r8, rcx
    JA loc_44E715
loc_44E627:
    MOV rax, rdx
    ADD rax, [rsi+20h]
    ADD [rsi+28h], rdx
    SUB [rsi+10h], rdx
    SUB rcx, rdx
    MOV [rsi+8], rcx
    MOV [rsi+20h], rax
loc_44E641:
    MOV rdi, [rdi+3A8h]
    MOVZX ebx, byte ptr [rax+rcx-1]
    MOV rbp, rsi
    CALL sub_4E7250
    MOV rdi, rax
    MOV r12, rbx
    CALL sub_4E7270
    TEST eax, 200000h
    JNZ loc_44E730
loc_44E66B:
    MOV r9, [rbp+8]
    ADD r13, rbx
    MOV rcx, r9
    SUB rcx, r13
    XOR rcx, r13
    XOR r13, r9
    OR rcx, r13
    XOR rcx, r9
    SAR rcx, 3Fh
    CMP r9, 0FFh
    NOT rcx
    JBE loc_44E750
loc_44E698:
    MOV r8d, 100h
loc_44E69E:
    MOV rsi, r9
    MOV rdi, rbx
    XOR edx, edx
    SUB rsi, rbx
    ADD rsi, [rbp+20h]
    NOP dword ptr [rax]
loc_44E6B0:
    MOV rax, rdi
    MOV r10, rbx
    XOR r10, rdx
    XOR rax, rdx
    ADD rdx, 1
    OR rax, r10
    MOV r10d, r12d
    XOR r10b, [rsi+rdi-1]
    XOR rax, rbx
    SUB rdi, 1
    SAR rax, 3Fh
    NOT rax
    MOVZX r10d, r10b
    AND rax, r10
    NOT rax
    AND rcx, rax
    CMP rdx, r8
    JB loc_44E6B0
loc_44E6EB:
    MOVZX ecx, cl
    ADD rbx, 1
    XOR cl, 0FFh
    MOV rax, rcx
    SUB rcx, 1
    NOT rax
    AND rax, rcx
    SAR rax, 3Fh
    AND rbx, rax
    AND eax, 0FFFFFFFEh
    SUB r9, rbx
    NOT eax
    MOV [rbp+8], r9
loc_44E715:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_44E720:
    XOR eax, eax
    CMP r13, rcx
    JA loc_44E715
loc_44E727:
    MOV rax, [rsi+20h]
    JMP loc_44E641
loc_44E730:
    NOT rbx
    ADD [rbp+8], rbx
    ADD rsp, 8
    POP rbx
    MOV eax, 1
    POP rbp
    POP r12
    POP r13
    RETN 
loc_44E750:
    TEST r9, r9
    JZ loc_44E6EB
loc_44E755:
    MOV r8, r9
    JMP loc_44E69E
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "ConditionalBranching",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x80000000",
        "0xFFFFFFFE",
        "0x100",
        "0x1",
        "0x0",
        "0xFFFFFFFF",
        "0x3F",
        "0xFF"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 8
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": true
    }
  },
  "inferred_algorithm": "Hashing/CRC-like Calculation"
}
```
############
```assembly
loc_54A9D0:
    PUSH r15
    PUSH r14
    MOV r15d, edx
    PUSH r13
    PUSH r12
    MOV r14, rdi
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    MOV rbx, rcx
    SUB rsp, 8
    CALL sub_526B40
    TEST eax, eax
    JLE loc_54AA0D
loc_54A9F3:
    MOV r8, rbx
    MOV ecx, offset unk_6E79E2
    MOV edx, r15d
    MOV esi, offset aSS_12
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_49E330
loc_54AA0D:
    XOR r13d, r13d
    ADD r15d, 2
    JMP loc_54AA39
loc_54AA20:
    MOV rdi, rbp
    CALL sub_5444B0
loc_54AA28:
    MOV esi, 641E6Eh
    MOV rdi, rbp
    ADD r13d, 1
    CALL sub_4A0E70
loc_54AA39:
    MOV rdi, r14
    CALL sub_526B40
    CMP r13d, eax
    JGE loc_54AB18
loc_54AA4A:
    MOV esi, r13d
    MOV rdi, r14
    CALL sub_526B50
    MOV esi, offset off_6A7DDB
    MOV rbx, rax
    MOV ecx, offset unk_6E79E2
    XOR eax, eax
    MOV edx, r15d
    MOV rdi, rbp
    CALL sub_49E330
    MOV rsi, [rbx]
    CMP dword ptr [rsi], 7
    JNZ loc_54AA20
loc_54AA77:
    MOV rax, [rsi+8]
    MOV rdi, rbp
    MOV esi, offset aIp
    MOV ebx, [rax]
    MOV r12, [rax+8]
    CALL sub_4A0E70
    CMP ebx, 8
    JZ loc_54AB30
loc_54AA97:
    CMP ebx, 20h
    JNZ loc_54AB00
loc_54AA9C:
    MOV ebx, 1
    JMP loc_54AACA
loc_54AAA8:
    CMP eax, 0Fh
    JZ loc_54AA28
loc_54AAB1:
    MOV esi, 681E27h
    MOV rdi, rbp
    CALL sub_4A0E70
    CMP ebx, 10h
    JZ loc_54AA28
loc_54AAC7:
    ADD ebx, 1
loc_54AACA:
    MOVZX edx, word ptr [r12]
    XOR eax, eax
    MOV esi, (offset asc_6A7035+1)
    MOV rdi, rbp
    ADD r12, 2
    ROL dx, 8
    MOVZX edx, dx
    CALL sub_49E330
    LEA eax, [rbx-1]
    CMP eax, 7
    JNZ loc_54AAA8
loc_54AAF1:
    MOV esi, 651E78h
    MOV rdi, rbp
    CALL sub_4A0E70
    JMP loc_54AAC7
loc_54AB00:
    MOV esi, offset unk_6A7039
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_49E330
    JMP loc_54AA28
loc_54AB18:
    ADD rsp, 8
    MOV eax, 1
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_54AB30:
    MOVZX eax, byte ptr [r12+7]
    MOVZX ecx, byte ptr [r12+1]
    MOV esi, offset unk_6A8F25
    MOVZX edx, byte ptr [r12]
    MOV rdi, rbp
    PUSH rax
    MOVZX eax, byte ptr [r12+6]
    PUSH rax
    MOVZX eax, byte ptr [r12+5]
    PUSH rax
    MOVZX eax, byte ptr [r12+4]
    PUSH rax
    MOVZX r9d, byte ptr [r12+3]
    XOR eax, eax
    MOVZX r8d, byte ptr [r12+2]
    CALL sub_49E330
    ADD rsp, 20h
    JMP loc_54AA28
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "Comparison",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x8",
        "0x10",
        "0x7",
        "0x20",
        "0x1",
        "0xF",
        "0x6A79E2",
        "0xA",
        "0x1E27",
        "0x6A7DDB",
        "0x6A7035",
        "0x681E27",
        "0x6A8F25",
        "0x6A7039"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 14
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Complex Data Processing and Conditional Handling"
}
```
############
```assembly
loc_401770:
    PUSH cs:qword_642008
    JMP cs:qword_642010
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x642008",
        "0x642010"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Undetermined"
}
```
############
```assembly
loc_4130F0:

loc_414740:
    PUSH rbx
    MOV rdx, rsi
    XOR r10d, r10d
    XOR ecx, ecx
    MOV r11d, 7Fh
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    LEA rbx, [rsp+18h+var_10]
    MOV r8, rsp
    NOP dword ptr [rax+rax+00h]
loc_414770:
    CMP ecx, 6
    JG loc_41478A
loc_414775:
    MOVSXD rsi, r10d
    SHL eax, 8
    ADD ecx, 8
    MOVZX r9d, byte ptr [rdi+rsi]
    ADD r10d, 1
    OR eax, r9d
loc_41478A:
    SUB ecx, 7
    MOV r9d, eax
    ADD r8, 1
    SHR r9d, cl
    ADD r9d, r9d
    MOV [r8-1], r9b
    MOV r9d, r11d
    SHL r9d, cl
    NOT r9d
    AND eax, r9d
    CMP r8, rbx
    JNZ loc_414770
loc_4147AF:
    MOV esi, [rsp+18h+var_14]
    MOV edi, [rsp+18h+var_18]
    MOV rax, [rsp+18h+var_10]
    XOR rax, fs:28h
    BSWAP esi
    BSWAP edi
    JNZ loc_4147D4
loc_4147CA:
    ADD rsp, 10h
    POP rbx
    JMP sub_4130F0
loc_4147D4:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 3,
      "input_parameter_types": [
        "Pointer",
        "Integer",
        "Integer"
      ],
      "return_value_type": "Unknown"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Bitwise",
        "Comparison",
        "DataMovement",
        "Looping"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x7F",
        "0x8",
        "0x10"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Checksum Calculation"
}
```
############
```assembly
loc_4194A0:
    PUSH r12
    PUSH rbp
    MOV r12, rdi
    PUSH rbx
    SUB rsp, 30h
    MOV rbx, [rdi+70h]
    MOV [rsp+48h+var_40], rsi
    MOV [rsp+48h+var_44], edx
    LEA rcx, [rsp+48h+var_2C]
    LEA rdx, [rsp+48h+var_28]
    LEA rsi, [rsp+48h+var_44]
    LEA rdi, [rsp+48h+var_40]
    MOV rax, fs:28h
    MOV [rsp+48h+var_20], rax
    XOR eax, eax
    CALL sub_418D50
    CMP [rsp+48h+var_28], 0
    JZ loc_419598
loc_4194ED:
    CALL qword ptr [rbx]
    MOV rbp, rax
    MOV eax, [rax]
    TEST eax, 0FFFFFFFDh
    JNZ loc_4195F2
loc_4194FF:
    TEST eax, eax
    JZ loc_4195B8
loc_419507:
    MOV esi, 38h
    MOV edi, 1
    CALL sub_40AC50
    LEA rsi, [rsp+48h+var_44]
    LEA rdx, [rax+8]
    LEA rdi, [rsp+48h+var_40]
    MOV [rax], r12
    MOV [rax+8], rbp
    MOV rbx, rax
    MOV byte ptr [rax+28h], 0
    MOV qword ptr [rax+10h], 0
    MOV qword ptr [rax+18h], 0
    MOV qword ptr [rax+20h], 0
    MOV qword ptr [rax+30h], 0
    CALL sub_419440
    TEST eax, eax
    JZ loc_419590
loc_41955B:
    MOV rdi, [rbx+10h]
    TEST rdi, rdi
    JZ loc_419590
loc_419564:
    CMP qword ptr [rbx+18h], 0
    JZ loc_419590
loc_41956B:
    MOV rsi, [rbp+20h]
    CALL sub_4111B0
    TEST eax, eax
    JNS loc_419590
loc_419578:
    MOV rsi, [rbp+20h]
    MOV rdi, [rbx+18h]
    CALL sub_4111B0
    TEST eax, eax
    JNS loc_419590
loc_419589:
    MOV rax, rbx
    JMP loc_41959A
loc_419590:
    MOV rdi, rbx
    CALL sub_416E00
loc_419598:
    XOR eax, eax
loc_41959A:
    MOV rcx, [rsp+48h+var_20]
    XOR rcx, fs:28h
    JNZ loc_41960B
loc_4195AA:
    ADD rsp, 30h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4195B8:
    LEA rsi, [rsp+48h+var_44]
    LEA rcx, [rsp+48h+var_2C]
    LEA rdx, [rsp+48h+var_28]
    LEA rdi, [rsp+48h+var_40]
    CALL sub_418D50
    MOV rsi, [rsp+48h+var_28]
    TEST rsi, rsi
    JZ loc_419598
loc_4195DB:
    MOV rdx, [rbp+8]
    MOV edi, [rsp+48h+var_2C]
    CALL sub_40B9B0
    TEST eax, eax
    JNZ loc_419507
loc_4195F0:
    JMP loc_419598
loc_4195F2:
    MOV ecx, offset aEcdsaNewkey
    MOV edx, 6E9h
    MOV esi, offset aSsheccC
    MOV edi, offset aCurveTypeEcWei
    CALL ___assert_fail
loc_41960B:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 3,
      "input_parameter_types": [
        "Pointer",
        "Integer",
        "Integer"
      ],
      "return_value_type": "Boolean"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "ConditionalBranching",
        "DataMovement",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 6,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xFFFFFFFD",
        "0x6E9",
        "0x38",
        "0x1",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 5
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Key Generation or Validation"
}
```
############
```assembly
loc_418620:
    TEST edx, edx
    JLE locret_4186D8
loc_418628:
    MOV ecx, [rdi]
    TEST ecx, ecx
    JNZ locret_4186D8
loc_418632:
    PUSH r14
    MOV r14d, edx
    PUSH r13
    MOV r13, rsi
    PUSH r12
    MOV r12d, edx
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    JMP loc_41865F
loc_418650:
    SUB r14d, ebx
    TEST r14d, r14d
    JLE loc_4186D0
loc_418658:
    MOV eax, [rbp+0]
    TEST eax, eax
    JNZ loc_4186D0
loc_41865F:
    MOVSXD rdi, dword ptr [rbp+18h]
    MOV ebx, [rbp+10h]
    MOV esi, r12d
    SUB ebx, edi
    CMP ebx, r14d
    CMOVG ebx, r14d
    ADD rdi, [rbp+8]
    SUB esi, r14d
    MOVSXD rsi, esi
    MOVSXD rdx, ebx
    ADD rsi, r13
    CALL _memcpy
    MOV edx, [rbp+18h]
    ADD edx, ebx
    CMP edx, [rbp+10h]
    MOV [rbp+18h], edx
    JNZ loc_418650
loc_418694:
    MOV rdi, [rbp+28h]
    MOVSXD rsi, dword ptr [rbp+14h]
    SUB r14d, ebx
    MOV rax, [rdi]
    SUB edx, esi
    MOV rcx, rsi
    ADD rsi, [rbp+8]
    ADD rcx, [rbp+20h]
    CALL qword ptr [rax+18h]
    MOV [rbp+0], eax
    MOVSXD rax, dword ptr [rbp+10h]
    ADD [rbp+20h], rax
    TEST r14d, r14d
    MOV dword ptr [rbp+18h], 0
    MOV dword ptr [rbp+14h], 0
    JG loc_418658
loc_4186D0:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
loc_4186D8:
    REP 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 4,
      "input_parameter_types": [
        "Pointer",
        "Pointer",
        "Pointer",
        "Integer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "MemoryAccess",
        "DataMovement",
        "Arithmetic",
        "ConditionalBranching"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": true
    }
  },
  "inferred_algorithm": "Block Processing and Transformation"
}
```
############
```assembly
loc_41BAB0:
    TEST rdi, rdi
    JZ loc_41BAC0
loc_41BAB5:
    JMP sub_41BA20
loc_41BAC0:
    MOV rdi, rsi
    JMP sub_41A0E0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Comparison",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Conditional Function Dispatch"
}
```
############
```assembly
loc_425AC0:
    MOV eax, [rsi+88h]
    MOV rdx, [rdi]
    BSWAP eax
    ADD eax, 1
    BSWAP eax
    MOV [rdx+18h], eax
    MOV rdx, [rdi]
    MOV [rdx+5Ch], eax
    MOV rax, [rdi]
    MOV dword ptr [rax+60h], 0F8102E00h
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "MemoryAccess",
        "Arithmetic"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x60",
        "0x5C",
        "0x18",
        "0x88",
        "0x1",
        "0x2E00F810"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 7
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Increment and Store Value"
}
```
############
```assembly
loc_418C40:
    SUB rsp, 8
    MFENCE 
    CALL sub_413590
    ADD rsp, 8
    JMP sub_4135D0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "UnconditionalJump",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Function Chaining/Redirection"
}
```
############
```assembly
loc_480E50:
    SUB rsp, 8
    MOV edx, 1
    MOV esi, offset dest
    CALL _semop
    CMP eax, 0FFFFFFFFh
    JZ loc_480E6D
loc_480E68:
    ADD rsp, 8
    RETN 
loc_480E6D:
    MOV edi, offset aSemopSmrup
    XOR eax, eax
    CALL sub_409DA0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Boolean"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "Comparison",
        "ConditionalBranching"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xFFFFFFFF",
        "0x1"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Semaphore Operation Check"
}
```
############
```assembly
loc_460F40:
    PUSH r15
    PUSH r14
    MOV esi, 800h
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 128h
    MOV [rsp+158h+var_158], rdi
    MOV edi, (offset aD_9+5)
    LEA rbp, [rsp+158h+s]
    MOV rax, fs:28h
    MOV [rsp+158h+var_40], rax
    XOR eax, eax
    CALL sub_40AE50
    MOV rdi, rbx
    MOV [rsp+158h+fd], eax
    CALL sub_40B450
    MOV edi, (offset aD_9+5)
    CALL sub_40B500
    MOV r12, cs:qword_7431E8
    MOV r13, rax
    NOP 
loc_460FA0:
    MOV dword ptr [r12], 0
    MOV rdi, r13
    CALL _readdir64
    TEST rax, rax
    JZ loc_4610A0
loc_460FB9:
    CMP byte ptr [rax+13h], 2Eh
    JZ loc_460FA0
loc_460FBF:
    LEA rbx, [rax+13h]
    MOV esi, 800h
    XOR eax, eax
    MOV rdi, rbx
    CALL _open64
    TEST eax, eax
    MOV r14d, eax
    JS loc_461050
loc_460FD9:
    MOV edx, 0FFh
    MOV rsi, rbp
    MOV edi, eax
    CALL sub_40BE60
    MOV edi, r14d
    MOV r15, rax
    CALL _close
    TEST r15d, r15d
    JS loc_4610FA
loc_460FFC:
    JZ loc_461090
loc_461002:
    MOVSXD rdx, r15d
    MOV esi, 0Ah
    MOV rdi, rbp
    MOV [rsp+rdx+158h+s], 0Ah
    CALL _strchr
    NOP word ptr [rax+rax+00000000h]
loc_461020:
    MOV byte ptr [rax], 0
    SUB rax, 1
    CMP rax, rbp
    JB loc_46103C
loc_46102C:
    MOVZX ecx, byte ptr [rax]
    LEA edx, [rcx-9]
    CMP dl, 17h
    JZ loc_461020
loc_461037:
    CMP dl, 4
    JBE loc_461020
loc_46103C:
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_40B270
    JMP loc_460FA0
loc_461050:
    CMP dword ptr [r12], 15h
    JNZ loc_4610E7
loc_46105B:
    CMP [rsp+158h+var_158], 0
    JZ loc_4610E7
loc_461066:
    TEST byte ptr cs:dword_74363C+2, 1
    JZ loc_460FA0
loc_461073:
    MOV rsi, [rsp+158h+var_158]
    MOV rdx, rbx
    MOV edi, offset aWarningSSIsADi
    XOR eax, eax
    CALL sub_409CC0
    JMP loc_460FA0
loc_461090:
    MOV rdi, rbx
    CALL _unsetenv
    JMP loc_460FA0
loc_4610A0:
    MOV edx, [r12]
    TEST edx, edx
    JNZ loc_461112
loc_4610A8:
    MOV rdi, r13
    CALL _closedir
    MOV ebx, [rsp+158h+fd]
    MOV edi, ebx
    CALL sub_40B470
    MOV edi, ebx
    CALL _close
    MOV rax, [rsp+158h+var_40]
    XOR rax, fs:28h
    JNZ loc_46110D
loc_4610D5:
    ADD rsp, 128h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4610E7:
    MOV rsi, [rsp+158h+var_158]
    MOV rdx, rbx
    MOV edi, offset aOpenSS
    XOR eax, eax
    CALL sub_409DA0
loc_4610FA:
    MOV rsi, [rsp+158h+var_158]
    MOV rdx, rbx
    MOV edi, offset aReadSS
    XOR eax, eax
    CALL sub_409DA0
loc_46110D:
    CALL ___stack_chk_fail
loc_461112:
    MOV rsi, [rsp+158h+var_158]
    MOV edi, offset aReaddirS
    CALL sub_409DA0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "FileOperations",
        "DataMovement",
        "SubroutineCall",
        "ConditionalBranching",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 5,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x800",
        "0x15",
        "0x1",
        "0x2E",
        "0x17",
        "0x4",
        "0xA",
        "0x0",
        "0x10",
        "0x158"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 10
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": true,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Directory Listing and Processing"
}
```
############
```assembly
loc_407010:
    JMP cs:off_742930
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x742930"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Jump to External Target"
}
```
############
```assembly
loc_4A1920:

loc_4A1950:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rbx, cs:qword_7431F0
    MOV edx, [rbx-14h]
    MOV rax, rdx
    ADD rdx, [rbx-30h]
    CMP eax, 1FFDh
    JBE loc_4A19A8
loc_4A196E:
    ADD eax, 1
    MOV ebp, edi
    MOV [rdx], dil
    SHR bp, 8
    CMP eax, 2000h
    MOV [rbx-14h], eax
    JZ loc_4A19D0
loc_4A1984:
    MOV rdx, [rbx-30h]
    LEA ecx, [rax+1]
    MOV [rbx-14h], ecx
    MOV [rdx+rax], bpl
    CMP dword ptr [rbx-14h], 2000h
    JZ loc_4A19C0
loc_4A199B:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4A19A8:
    ADD eax, 2
    MOV [rdx], di
    MOV [rbx-14h], eax
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_4A19C0:
    ADD rsp, 8
    POP rbx
    POP rbp
    JMP sub_4A1920
loc_4A19D0:
    CALL sub_4A1920
    MOV eax, [rbx-14h]
    JMP loc_4A1984
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Unknown"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Comparison",
        "Bitwise",
        "ControlFlow"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x1FFD",
        "0x2000"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Data Processing Loop"
}
```
############
```assembly
loc_4B8280:
    MOVZX r9d, byte ptr [rdi]
    MOVZX r8d, byte ptr [rsi]
    CMP r9b, 2Dh
    JZ loc_4B8340
loc_4B8292:
    CMP r8b, 2Dh
    JNZ loc_4B82A8
loc_4B8298:
    JMP loc_4B83B8
loc_4B82A0:
    ADD rdi, 1
    MOVZX r9d, byte ptr [rdi]
loc_4B82A8:
    CMP r9b, 30h
    JZ loc_4B82A0
loc_4B82AE:
    MOVZX eax, r9b
    CMP ecx, eax
    MOV r11d, eax
    JZ loc_4B82A0
loc_4B82B9:
    CMP r8b, 30h
    JNZ loc_4B82CE
loc_4B82BF:
    NOP 
loc_4B82C0:
    ADD rsi, 1
    MOVZX r8d, byte ptr [rsi]
    CMP r8b, 30h
    JZ loc_4B82C0
loc_4B82CE:
    MOVZX r10d, r8b
    CMP ecx, r10d
    JZ loc_4B82C0
loc_4B82D7:
    NOP word ptr [rax+rax+00000000h]
loc_4B82E0:
    CMP r9b, r8b
    JNZ loc_4B84CB
loc_4B82E9:
    LEA r8d, [r10-30h]
    CMP r8d, 9
    JA loc_4B8545
loc_4B82F7:
    NOP word ptr [rax+rax+00000000h]
loc_4B8300:
    ADD rdi, 1
    MOVZX eax, byte ptr [rdi]
    CMP ecx, eax
    MOV r9d, eax
    MOV r11d, eax
    JZ loc_4B8300
loc_4B8311:
    NOP dword ptr [rax+00000000h]
loc_4B8318:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    MOV r8d, r10d
    JNZ loc_4B82E0
loc_4B8328:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    MOV r8d, r10d
    JZ loc_4B8318
loc_4B8338:
    JMP loc_4B82E0
loc_4B8340:
    ADD rdi, 1
    MOVZX r9d, byte ptr [rdi]
    CMP r9b, 30h
    JZ loc_4B8340
loc_4B834E:
    MOVZX eax, r9b
    CMP ecx, eax
    MOV r11d, eax
    JZ loc_4B8340
loc_4B8359:
    CMP r8b, 2Dh
    JZ loc_4B83E8
loc_4B8363:
    CMP edx, eax
    JZ loc_4B8460
loc_4B836B:
    SUB eax, 30h
    CMP eax, 9
    JA loc_4B8388
loc_4B8373:
    JMP loc_4B8780
loc_4B8380:
    ADD rsi, 1
    MOVZX r8d, byte ptr [rsi]
loc_4B8388:
    CMP r8b, 30h
    JZ loc_4B8380
loc_4B838E:
    MOVZX r10d, r8b
    CMP ecx, r10d
    JZ loc_4B8380
loc_4B8397:
    CMP edx, r10d
    JZ loc_4B8560
loc_4B83A0:
    SUB r10d, 30h
    XOR r11d, r11d
    CMP r10d, 9
    SETBE r11b
    MOV eax, r11d
    NEG eax
    RETN 
loc_4B83B8:
    ADD rsi, 1
    MOVZX eax, byte ptr [rsi]
    CMP al, 30h
    JZ loc_4B83B8
loc_4B83C3:
    CMP ecx, eax
    JZ loc_4B83B8
loc_4B83C7:
    CMP edx, eax
    JZ loc_4B8477
loc_4B83CF:
    LEA esi, [rax-30h]
    MOV eax, 1
    CMP esi, 9
    JA loc_4B84A8
loc_4B83E0:
    REP 
loc_4B83E8:
    ADD rsi, 1
    MOVZX r8d, byte ptr [rsi]
    CMP r8b, 30h
    JZ loc_4B83E8
loc_4B83F6:
    MOVZX r10d, r8b
    CMP ecx, r10d
    JZ loc_4B83E8
loc_4B83FF:
    NOP 
loc_4B8400:
    CMP r9b, r8b
    JNZ loc_4B86A0
loc_4B8409:
    LEA r8d, [r10-30h]
    CMP r8d, 9
    JA loc_4B8603
loc_4B8417:
    NOP word ptr [rax+rax+00000000h]
loc_4B8420:
    ADD rdi, 1
    MOVZX eax, byte ptr [rdi]
    CMP ecx, eax
    MOV r9d, eax
    MOV r11d, eax
    JZ loc_4B8420
loc_4B8431:
    NOP dword ptr [rax+00000000h]
loc_4B8438:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    MOV r8d, r10d
    JNZ loc_4B8400
loc_4B8448:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    MOV r8d, r10d
    JZ loc_4B8438
loc_4B8458:
    JMP loc_4B8400
loc_4B8460:
    ADD rdi, 1
    MOVZX r9d, byte ptr [rdi]
    CMP r9b, 30h
    JZ loc_4B8460
loc_4B846E:
    MOVZX eax, r9b
    JMP loc_4B836B
loc_4B8477:
    ADD rsi, 1
    MOVZX eax, byte ptr [rsi]
    CMP al, 30h
    JNZ loc_4B83CF
loc_4B8486:
    ADD rsi, 1
    MOVZX eax, byte ptr [rsi]
    CMP al, 30h
    JZ loc_4B8477
loc_4B8491:
    JMP loc_4B83CF
loc_4B84A0:
    ADD rdi, 1
    MOVZX r9d, byte ptr [rdi]
loc_4B84A8:
    CMP r9b, 30h
    JZ loc_4B84A0
loc_4B84AE:
    MOVZX eax, r9b
    CMP ecx, eax
    JZ loc_4B84A0
loc_4B84B6:
    CMP edx, eax
    JZ loc_4B8577
loc_4B84BE:
    SUB eax, 30h
    CMP eax, 9
    SETBE al
    MOVZX eax, al
    RETN 
loc_4B84CB:
    CMP edx, eax
    JZ loc_4B858E
loc_4B84D3:
    CMP edx, r10d
    JZ loc_4B85A0
loc_4B84DC:
    SUB eax, 30h
    SUB r11d, r10d
    CMP eax, 9
    JA loc_4B85BE
loc_4B84EB:
    XOR edx, edx
    NOP dword ptr [rax]
loc_4B84F0:
    ADD rdi, 1
    MOVZX eax, byte ptr [rdi]
    CMP ecx, eax
    JZ loc_4B84F0
loc_4B84FB:
    SUB eax, 30h
    ADD rdx, 1
    CMP eax, 9
    JBE loc_4B84F0
loc_4B8507:
    SUB r10d, 30h
    CMP r10d, 9
    JA loc_4B85D1
loc_4B8515:
    XOR edi, edi
    NOP word ptr [rax+rax+00000000h]
loc_4B8520:
    ADD rsi, 1
    MOVZX eax, byte ptr [rsi]
    CMP ecx, eax
    JZ loc_4B8520
loc_4B852B:
    SUB eax, 30h
    ADD rdi, 1
    CMP eax, 9
    JBE loc_4B8520
loc_4B8537:
    CMP rdi, rdx
    JZ loc_4B85B1
loc_4B853C:
    CMP rdx, rdi
    SBB eax, eax
    OR eax, 1
    RETN 
loc_4B8545:
    CMP edx, eax
    JNZ loc_4B84D3
loc_4B8549:
    CMP dl, [rdi]
    JZ loc_4B86BA
loc_4B8551:
    XOR eax, eax
    CMP dl, [rsi]
    JZ loc_4B85DA
loc_4B855B:
    REP 
loc_4B8560:
    ADD rsi, 1
    MOVZX r8d, byte ptr [rsi]
    CMP r8b, 30h
    JZ loc_4B8560
loc_4B856E:
    MOVZX r10d, r8b
    JMP loc_4B83A0
loc_4B8577:
    ADD rdi, 1
    MOVZX r9d, byte ptr [rdi]
    CMP r9b, 30h
    JZ loc_4B8577
loc_4B8585:
    MOVZX eax, r9b
    JMP loc_4B84BE
loc_4B858E:
    LEA r8d, [r10-30h]
    CMP r8d, 9
    JA loc_4B8549
loc_4B8598:
    MOV r11d, edx
    JMP loc_4B84D3
loc_4B85A0:
    SUB eax, 30h
    SUB r11d, edx
    CMP eax, 9
    JBE loc_4B84EB
loc_4B85AF:
    JMP loc_4B8549
loc_4B85B1:
    TEST rdi, rdi
    MOV eax, 0
    CMOVNZ eax, r11d
    RETN 
loc_4B85BE:
    SUB r10d, 30h
    XOR edx, edx
    CMP r10d, 9
    JBE loc_4B8515
loc_4B85CE:
    XOR eax, eax
loc_4B85D0:
    RETN 
loc_4B85D1:
    XOR eax, eax
    TEST rdx, rdx
    SETNZ al
    RETN 
loc_4B85DA:
    LEA r8, [rsi+1]
    MOVZX ecx, byte ptr [rsi+1]
    JMP loc_4B85EC
loc_4B85E4:
    ADD r8, 1
    MOVZX ecx, byte ptr [r8]
loc_4B85EC:
    CMP cl, 30h
    JZ loc_4B85E4
loc_4B85F1:
    MOVSX eax, cl
    SUB eax, 30h
    CMP eax, 9
    SETBE al
    MOVZX eax, al
    NEG eax
    RETN 
loc_4B8603:
    CMP edx, eax
    JZ loc_4B86F6
loc_4B860B:
    CMP edx, r10d
    JZ loc_4B86E4
loc_4B8614:
    MOV r8d, r10d
    SUB eax, 30h
    SUB r8d, r11d
    CMP eax, 9
    JA loc_4B8687
loc_4B8622:
    XOR edx, edx
    NOP dword ptr [rax+00h]
loc_4B8628:
    ADD rdi, 1
    MOVZX eax, byte ptr [rdi]
    CMP ecx, eax
    JZ loc_4B8628
loc_4B8633:
    SUB eax, 30h
    ADD rdx, 1
    CMP eax, 9
    JBE loc_4B8628
loc_4B863F:
    SUB r10d, 30h
    CMP r10d, 9
    JA loc_4B867C
loc_4B8649:
    XOR edi, edi
    NOP dword ptr [rax+rax+00h]
loc_4B8650:
    ADD rsi, 1
    MOVZX eax, byte ptr [rsi]
    CMP ecx, eax
    JZ loc_4B8650
loc_4B865B:
    SUB eax, 30h
    ADD rdi, 1
    CMP eax, 9
    JBE loc_4B8650
loc_4B8667:
    CMP rdi, rdx
    JZ loc_4B8724
loc_4B8670:
    CMP rdx, rdi
    SBB eax, eax
    AND eax, 2
    SUB eax, 1
    RETN 
loc_4B867C:
    XOR eax, eax
    TEST rdx, rdx
    SETNZ al
    NEG eax
    RETN 
loc_4B8687:
    SUB r10d, 30h
    XOR edx, edx
    CMP r10d, 9
    JBE loc_4B8649
loc_4B8693:
    XOR eax, eax
    JMP locret_4B85D0
loc_4B86A0:
    CMP edx, eax
    JNZ loc_4B860B
loc_4B86A8:
    LEA r8d, [r10-30h]
    CMP r8d, 9
    JA loc_4B86F6
loc_4B86B2:
    MOV r11d, edx
    JMP loc_4B860B
loc_4B86BA:
    CMP dl, [rsi]
    JZ loc_4B8731
loc_4B86BE:
    LEA rsi, [rdi+1]
    MOVZX edx, byte ptr [rdi+1]
    JMP loc_4B86D7
loc_4B86D0:
    ADD rsi, 1
    MOVZX edx, byte ptr [rsi]
loc_4B86D7:
    CMP dl, 30h
    JZ loc_4B86D0
loc_4B86DC:
    MOVSX eax, dl
    JMP loc_4B84BE
loc_4B86E4:
    SUB eax, 30h
    MOV r8d, edx
    SUB r8d, r11d
    CMP eax, 9
    JBE loc_4B8622
loc_4B86F6:
    CMP dl, [rsi]
    JZ loc_4B8786
loc_4B86FE:
    XOR eax, eax
    CMP dl, [rdi]
    JNZ locret_4B855B
loc_4B8708:
    LEA r8, [rdi+1]
    MOVZX ecx, byte ptr [rdi+1]
    JMP loc_4B871A
loc_4B8712:
    ADD r8, 1
    MOVZX ecx, byte ptr [r8]
loc_4B871A:
    CMP cl, 30h
    JZ loc_4B8712
loc_4B871F:
    JMP loc_4B85F1
loc_4B8724:
    TEST rdi, rdi
    MOV eax, 0
    CMOVNZ eax, r8d
    RETN 
loc_4B8731:
    MOV r8, rsi
    MOV rsi, rdi
    JMP loc_4B874C
loc_4B8740:
    SUB eax, 30h
    CMP eax, 9
    JA loc_4B85CE
loc_4B874C:
    ADD rsi, 1
    ADD r8, 1
    MOVZX edx, byte ptr [rsi]
    MOVSX ecx, byte ptr [r8]
    MOVSX eax, dl
    CMP dl, cl
    JZ loc_4B8740
loc_4B8762:
    LEA edi, [rax-30h]
    CMP edi, 9
    JA loc_4B87A5
loc_4B876A:
    LEA edi, [rcx-30h]
    CMP edi, 9
    JA loc_4B86D7
loc_4B8776:
    SUB eax, ecx
    RETN 
loc_4B8780:
    MOV eax, 0FFFFFFFFh
    RETN 
loc_4B8786:
    CMP dl, [rdi]
    JZ loc_4B87BB
loc_4B878A:
    LEA rdi, [rsi+1]
    MOVZX edx, byte ptr [rsi+1]
    JMP loc_4B879B
loc_4B8794:
    ADD rdi, 1
    MOVZX edx, byte ptr [rdi]
loc_4B879B:
    CMP dl, 30h
    JZ loc_4B8794
loc_4B87A0:
    JMP loc_4B86DC
loc_4B87A5:
    MOVSX eax, cl
    SUB eax, 30h
    CMP eax, 9
    JBE loc_4B85EC
loc_4B87B4:
    XOR eax, eax
    JMP locret_4B85D0
loc_4B87BB:
    MOV r8, rdi
    MOV rdi, rsi
    JMP loc_4B87D4
loc_4B87C8:
    SUB eax, 30h
    CMP eax, 9
    JA loc_4B85CE
loc_4B87D4:
    ADD rdi, 1
    ADD r8, 1
    MOVZX edx, byte ptr [rdi]
    MOVSX ecx, byte ptr [r8]
    MOVSX eax, dl
    CMP dl, cl
    JZ loc_4B87C8
loc_4B87EA:
    LEA esi, [rax-30h]
    CMP esi, 9
    JA loc_4B87FF
loc_4B87F2:
    LEA esi, [rcx-30h]
    CMP esi, 9
    JA loc_4B879B
loc_4B87FA:
    JMP loc_4B8776
loc_4B87FF:
    MOVSX eax, cl
    SUB eax, 30h
    CMP eax, 9
    JBE loc_4B871A
loc_4B880E:
    XOR eax, eax
    JMP locret_4B85D0
```
Output:0:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    JZ loc_4B8400
loc_4B8410:
    JMP loc_4B83E8
loc_4B8418:
    NOP 
loc_4B8420:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    JZ loc_4B8420
loc_4B8428:
    JMP loc_4B83E8
loc_4B8430:
    NOP 
loc_4B8438:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    JZ loc_4B8438
loc_4B8440:
    JMP loc_4B83E8
loc_4B8448:
    NOP 
loc_4B8450:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    JZ loc_4B8450
loc_4B8458:
    JMP loc_4B83E8
loc_4B8460:
    NOP 
loc_4B8468:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    JZ loc_4B8468
loc_4B8470:
    JMP loc_4B83E8
loc_4B8477:
    NOP 
loc_4B847F:
    ADD rsi, 1
    MOVZX r10d, byte ptr [rsi]
    CMP ecx, r10d
    JZ loc_4B847F
loc_4B8487:
    JMP loc_4B83E8
loc_4B8490:
    NOP 
loc_4B8498:
    ADD rsi,
############
```assembly
loc_4B6500:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdi
    PUSH rbp
    PUSH rbx
    SUB rsp, 0B8h
    MOV [rsp+0E8h+var_E0], rsi
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_40], rax
    XOR eax, eax
    CALL _fileno
    LEA rdx, [rsp+0E8h+stat_buf]
    MOV esi, eax
    MOV edi, 1
    CALL ___fxstat
    TEST eax, eax
    JS loc_4B655A
loc_4B6546:
    MOV eax, [rsp+0E8h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 8000h
    JZ loc_4B6690
loc_4B655A:
    MOV ebx, 2000h
loc_4B655F:
    MOV rdi, rbx
    CALL _malloc
    TEST rax, rax
    MOV r12, rax
    JZ loc_4B66BB
loc_4B6573:
    XOR ebp, ebp
    MOV r15, 0FFFFFFFFFFFFFFFFh
    JMP loc_4B65BA
loc_4B6580:
    CMP rbx, 0FFFFFFFFFFFFFFFFh
    JZ loc_4B6658
loc_4B658A:
    MOV rax, rbx
    MOV rdi, r12
    SHR rax, 1
    MOV rdx, rax
    ADD rax, rbx
    NOT rdx
    CMP rbx, rdx
    CMOVNB rax, r15
    MOV rsi, rax
    MOV rbx, rax
    CALL _realloc
    TEST rax, rax
    JZ loc_4B6638
loc_4B65B7:
    MOV r12, rax
loc_4B65BA:
    MOV r14, rbx
    LEA rdi, [r12+rbp]
    MOV rcx, r13
    SUB r14, rbp
    MOV esi, 1
    MOV rdx, r14
    CALL _fread
    ADD rbp, rax
    CMP r14, rax
    JZ loc_4B6580
loc_4B65DC:
    CALL ___errno_location
    MOV rdi, r13
    MOV r14, rax
    MOV r15d, [rax]
    CALL _ferror
    TEST eax, eax
    JNZ loc_4B6643
loc_4B65F3:
    SUB rbx, 1
    CMP rbp, rbx
    JB loc_4B6678
loc_4B65FC:
    MOV rax, [rsp+0E8h+var_E0]
    MOV byte ptr [r12+rbp], 0
    MOV [rax], rbp
    MOV rax, r12
loc_4B660C:
    MOV rcx, [rsp+0E8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_4B66C2
loc_4B6623:
    ADD rsp, 0B8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B6638:
    CALL ___errno_location
    MOV r15d, [rax]
    MOV r14, rax
loc_4B6643:
    MOV rdi, r12
    CALL _free
    MOV [r14], r15d
    XOR eax, eax
    JMP loc_4B660C
loc_4B6658:
    CALL ___errno_location
    MOV r15d, 0Ch
    MOV r14, rax
    MOV rdi, r12
    CALL _free
    MOV [r14], r15d
    XOR eax, eax
    JMP loc_4B660C
loc_4B6678:
    LEA rsi, [rbp+1]
    MOV rdi, r12
    CALL _realloc
    TEST rax, rax
    CMOVNZ r12, rax
    JMP loc_4B65FC
loc_4B6690:
    MOV rdi, r13
    CALL _ftello
    TEST rax, rax
    JS loc_4B655A
loc_4B66A1:
    MOV rbx, [rsp+0E8h+stat_buf.st_size]
    CMP rax, rbx
    JGE loc_4B655A
loc_4B66AF:
    SUB rbx, rax
    ADD rbx, 1
    JMP loc_4B655F
loc_4B66BB:
    XOR eax, eax
    JMP loc_4B660C
loc_4B66C2:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "FileDescriptor"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "MemoryAllocation",
        "MemoryAccess",
        "SubroutineCall",
        "ConditionalBranching"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 4,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x1",
        "0x0",
        "0xFFFFFFFFFFFFFFFF",
        "0x80000000",
        "0x2",
        "0x10",
        "0x4"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 7
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": true,
      "likely_performs_io_operations": true,
      "likely_performs_block_memory_operations": true
    }
  },
  "inferred_algorithm": "Read File Content"
}
```
############
```assembly
loc_4058B0:
    JMP cs:off_71F2B0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x71F2B0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Jump"
}
```
############
```assembly
loc_4145F0:
    PUSH r12
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV esi, (offset aFtp+3)
    MOV r12, rdi
    SUB rsp, 210h
    MOV qword ptr [rdi], 0
    MOV rdi, rbp
    MOV rax, fs:28h
    MOV [rsp+228h+var_20], rax
    XOR eax, eax
    CALL _strstr
    LEA rdx, [rax+3]
    TEST rax, rax
    MOV esi, 5Ch
    CMOVNZ rbp, rdx
    MOV rdi, rbp
    CALL _strrchr
    MOV esi, 2Fh
    MOV rbx, rax
    MOV rdi, rbp
    CALL _strrchr
    TEST rbx, rbx
    JZ loc_41465F
loc_414655:
    TEST rax, rax
    JZ loc_41466C
loc_41465A:
    CMP rbx, rax
    JA loc_41466C
loc_41465F:
    TEST rax, rax
    MOV edi, offset src
    JZ loc_414670
loc_414669:
    MOV rbx, rax
loc_41466C:
    LEA rdi, [rbx+1]
loc_414670:
    MOV edx, offset aToolOperhlpC
    MOV esi, 9Bh
    CALL sub_41C410
    TEST rax, rax
    MOV [r12], rax
    MOV edx, 1Bh
    JZ loc_4146FF
loc_41468D:
    MOV edi, offset aCurlTestdir
    CALL sub_418B90
    XOR edx, edx
    TEST rax, rax
    MOV rbx, rax
    JZ loc_4146FF
loc_4146A1:
    MOV r8, [r12]
    MOV rcx, rax
    MOV edx, offset aSS_3
    MOV esi, 200h
    MOV rdi, rsp
    XOR eax, eax
    CALL sub_419110
    MOV rdi, [r12]
    MOV edx, offset aToolOperhlpC
    MOV esi, 0B4h
    CALL sub_41C5A0
    MOV edx, offset aToolOperhlpC
    MOV esi, 0B5h
    MOV rdi, rsp
    MOV qword ptr [r12], 0
    CALL sub_41C410
    MOV rdi, rbx
    MOV [r12], rax
    CALL sub_418F80
    CMP qword ptr [r12], 1
    SBB edx, edx
    AND edx, 1Bh
loc_4146FF:
    MOV rcx, [rsp+228h+var_20]
    XOR rcx, fs:28h
    MOV eax, edx
    JNZ loc_414720
loc_414714:
    ADD rsp, 210h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_414720:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "StringHandling",
        "SubroutineCall",
        "ConditionalBranching",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 4,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x210",
        "0x3",
        "0x5C",
        "0x2F",
        "0x1B",
        "0x0",
        "0x200",
        "0x1",
        "0xB4",
        "0xB5"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 10
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "File Path Manipulation"
}
```
############
```assembly
loc_4023A0:
    JMP cs:off_6B0128
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x6B0128"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Jumper Function"
}
```
############
```assembly
loc_426FC0:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rdx, [rdi+0A8h]
    TEST rdx, rdx
    SETNZ r13b
    TEST rsi, rsi
    SETNZ al
    AND r13b, al
    JZ loc_42703B
loc_426FE1:
    MOV r14, rdi
    MOV rdi, rdx
    MOV r12, rsi
    CALL sub_4207F0
    MOV rbx, [rax]
    TEST rbx, rbx
    JNZ loc_427009
loc_426FF7:
    JMP loc_427050
loc_427000:
    MOV rbx, [rbx+10h]
    TEST rbx, rbx
    JZ loc_427050
loc_427009:
    LEA rbp, [rbx+18h]
    MOV rdi, rbp
    CALL _strlen
    MOV rsi, r12
    MOV rdx, rax
    MOV rdi, rbp
    CALL sub_41AE30
    TEST eax, eax
    JZ loc_427000
loc_427027:
    LEA rsi, aServerSIsBlack
    MOV rdx, r12
    MOV rdi, r14
    XOR eax, eax
    CALL sub_4329E0
loc_42703B:
    POP rbx
    MOV eax, r13d
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_427050:
    LEA rsi, aServerSIsNotBl
    MOV rdx, r12
    MOV rdi, r14
    XOR eax, eax
    XOR r13d, r13d
    CALL sub_4329E0
    POP rbx
    MOV eax, r13d
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "Boolean"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ConditionalBranching",
        "DataMovement",
        "SubroutineCall",
        "Comparison",
        "Bitwise"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xA8",
        "0x10",
        "0x18",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 4
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Boolean Decision and String Comparison"
}
```
############
```assembly
loc_4549F0:
    PUSH rbp
    PUSH rbx
    LEA rbp, [rdi+5B0h]
    MOV rbx, rdi
    SUB rsp, 8
    TEST sil, sil
    JNZ loc_454B10
loc_454A09:
    CMP byte ptr [rdi+641h], 0
    JZ loc_454A70
loc_454A12:
    LEA rdx, aQuit
    LEA rsi, aSSSSSSLdSS+17h
    XOR eax, eax
    MOV rdi, rbp
    CALL sub_44D720
    TEST eax, eax
    JNZ loc_454B20
loc_454A32:
    MOV edx, 0FE2h
    MOV esi, 22h
    MOV rdi, rbx
    CALL sub_454900
    JMP loc_454A61
loc_454A50:
    MOV esi, 1
    MOV rdi, rbp
    CALL sub_44D320
    TEST eax, eax
    JNZ loc_454A70
loc_454A61:
    MOV eax, [rbx+66Ch]
    TEST eax, eax
    JNZ loc_454A50
loc_454A6B:
    NOP dword ptr [rax+rax+00h]
loc_454A70:
    MOV rdi, [rbx+620h]
    TEST rdi, rdi
    JZ loc_454AA8
loc_454A7C:
    MOV rax, [rbx]
    CMP rdi, [rax+5048h]
    JZ loc_454B70
loc_454A8C:
    LEA rdx, aTftpC+1
    MOV esi, 1008h
    CALL sub_41C5A0
    MOV qword ptr [rbx+620h], 0
loc_454AA8:
    MOV rdi, rbp
    CALL sub_454830
    MOV rdi, [rbx+650h]
    LEA rdx, aTftpC+1
    MOV esi, 100Dh
    CALL sub_41C5A0
    MOV rdi, [rbx+680h]
    LEA rdx, aTftpC+1
    MOV qword ptr [rbx+650h], 0
    MOV esi, 100Fh
    CALL sub_41C5A0
    MOV qword ptr [rbx+680h], 0
    MOV rdi, rbp
    CALL sub_44DD10
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_454B10:
    MOV byte ptr [rdi+641h], 0
    JMP loc_454A70
loc_454B20:
    MOV edi, eax
    CALL sub_422730
    MOV rdi, [rbx]
    LEA rsi, aFailureSending
    MOV rdx, rax
    XOR eax, eax
    CALL sub_432CC0
    LEA rdx, aQuitCommandFai
    MOV rdi, rbx
    MOV byte ptr [rbx+641h], 0
    MOV esi, 1
    CALL sub_41E550
    MOV edx, 0FDEh
    XOR esi, esi
    MOV rdi, rbx
    CALL sub_454900
    JMP loc_454A70
loc_454B70:
    MOV qword ptr [rax+5048h], 0
    JMP loc_454A8C
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ConditionalBranching",
        "SubroutineCall",
        "DataMovement",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 5,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x5B0",
        "0x641",
        "0xFE2",
        "0x22",
        "0x1",
        "0x1008",
        "0x100D",
        "0x100F",
        "0x5048",
        "0x620",
        "0x650",
        "0x680",
        "0xFDE"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 13
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": true,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Network Protocol Handling (Specifically TFTP)"
}
```
############
```assembly
loc_551B10:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 1018h
    MOV rax, fs:28h
    MOV [rsp+1048h+var_40], rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_551CF5
loc_551B3D:
    MOV r14, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+1018h], rax
    JNZ loc_551CDC
loc_551B52:
    TEST rsi, rsi
    JZ loc_551CC3
loc_551B5B:
    MOV r13, rcx
    TEST rcx, rcx
    JZ loc_551CAA
loc_551B67:
    MOV rbp, rdx
    TEST rdx, rdx
    JS loc_551C98
loc_551B73:
    MOV rax, [rdi+8]
    MOV [rsp+1048h+buf], 52h
    XOR r15d, r15d
    MOV rbx, 7FFFFFFFFFFFFFFFh
    MOV [rsp+1048h+var_101F], rdx
    MOV r12d, [rdi]
    MOV [rsp+1048h+var_1047], rax
    MOV rax, [rsi]
    MOV [rsp+1048h+var_103F], rax
    MOV rax, [rsi+8]
    MOV [rsp+1048h+var_1037], rax
    MOV rax, [rsi+10h]
    MOV [rsp+1048h+var_102F], rax
    MOV rax, [rsi+18h]
    MOV [rsp+1048h+var_1027], rax
    JMP loc_551BC9
loc_551BC0:
    ADD r15, rax
    CMP r15, 30h
    JG loc_551C07
loc_551BC9:
    MOV edx, 31h
    MOV ecx, 4000h
    MOV edi, r12d
    LEA rsi, [rsp+r15+1048h+buf]
    SUB rdx, r15
    CMP rdx, rbx
    CMOVA rdx, rbx
    CALL _send
    TEST rax, rax
    JG loc_551BC0
loc_551BEE:
    CALL ___errno_location
    CMP dword ptr [rax], 4
    JNZ loc_551C98
loc_551BFC:
    XOR eax, eax
    ADD r15, rax
    CMP r15, 30h
    JLE loc_551BC9
loc_551C07:
    CMP r15, 31h
    JNZ loc_551C98
loc_551C11:
    MOV r14d, [r14]
    TEST rbp, rbp
    JZ loc_551CA1
loc_551C1D:
    MOV r12, 7FFFFFFFFFFFFFFFh
    XOR ebx, ebx
    JMP loc_551C38
loc_551C30:
    ADD rbx, rax
    CMP rbp, rbx
    JLE loc_551C6D
loc_551C38:
    LEA rsi, [r13+rbx+0]
    MOV rdx, rbp
    MOV edi, r14d
    SUB rdx, rbx
    CMP rdx, r12
    CMOVA rdx, r12
    XOR ecx, ecx
    CALL _recv
    TEST rax, rax
    JG loc_551C30
loc_551C59:
    CALL ___errno_location
    CMP dword ptr [rax], 4
    JNZ loc_551C6D
loc_551C63:
    XOR eax, eax
    ADD rbx, rax
    CMP rbp, rbx
    JG loc_551C38
loc_551C6D:
    MOV rax, rbx
loc_551C70:
    MOV rcx, [rsp+1048h+var_40]
    XOR rcx, fs:28h
    JNZ loc_551CA5
loc_551C83:
    ADD rsp, 1018h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_551C98:
    MOV rax, 0FFFFFFFFFFFFFFFFh
    JMP loc_551C70
loc_551CA1:
    XOR eax, eax
    JMP loc_551C70
loc_551CA5:
    CALL ___stack_chk_fail
loc_551CAA:
    MOV ecx, offset aReaddistribute
    MOV edx, 4D7h
    MOV esi, offset aMagickcoreDist_0
    MOV edi, offset aMetacontentUns
    CALL ___assert_fail
loc_551CC3:
    MOV ecx, offset aReaddistribute
    MOV edx, 4D6h
    MOV esi, offset aMagickcoreDist_0
    MOV edi, offset aRegionRectangl
    CALL ___assert_fail
loc_551CDC:
    MOV ecx, offset aReaddistribute
    MOV edx, 4D5h
    MOV esi, offset aMagickcoreDist_0
    MOV edi, offset aServerInfoSign
    CALL ___assert_fail
loc_551CF5:
    MOV ecx, offset aReaddistribute
    MOV edx, 4D4h
    MOV esi, offset aMagickcoreDist_0
    MOV edi, offset aServerInfoDist
    CALL ___assert_fail
```
Output:MOV edx, 4D5h
    MOV esi, offset aMagickcoreDist_0
    MOV edi, offset aReadBlobConten
    CALL ___assert_fail
loc_551CF5:
    ADD rsp, 1018h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
```





















































s


s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
############
```assembly
loc_48DB40:
    MOV esi, esi
    PUSH r12
    MOVAPD xmm2, xmm0
    MOV r12d, ecx
    MOV rax, rsi
    SHL rsi, 7
    PUSH rbp
    SHL rax, 4
    PUSH rbx
    MOV rbx, rdi
    SUB rsi, rax
    MOV eax, 6
    ADD r8, rsi
    MOV esi, offset aSMinGMaxG
    MOVSD xmm3, qword ptr [r8+10h]
    MOVSD xmm1, qword ptr [r8+18h]
    MULSD xmm3, xmm0
    MOVSD xmm5, qword ptr [r8+60h]
    MULSD xmm1, xmm0
    PXOR xmm0, xmm0
    MOVSD xmm4, qword ptr [r8+58h]
    CVTSD2SS xmm3, xmm3
    CVTSS2SD xmm0, xmm3
    MOVSD xmm3, qword ptr [r8+50h]
    CVTSD2SS xmm1, xmm1
    CVTSS2SD xmm1, xmm1
    MULSD xmm3, xmm2
    MULSD xmm2, qword ptr [r8+40h]
    CALL sub_414230
    MOV rbp, rax
    TEST r12d, r12d
    JZ loc_48DBCB
loc_48DBBC:
    MOV esi, 70CE94h
    MOV rdi, rbx
    XOR eax, eax
    CALL sub_414230
loc_48DBCB:
    MOV rdi, rbx
    MOV esi, (offset asc_7DE146+14h)
    XOR eax, eax
    CALL sub_414230
    MOV rax, rbp
    POP rbx
    POP rbp
    POP r12
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 3,
      "input_parameter_types": [
        "Double",
        "Double",
        "Double"
      ],
      "return_value_type": "Double"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Arithmetic",
        "DataMovement",
        "SubroutineCall"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x70CE94"
      ],
      "presence_of_notable_floating_point_constants": [
        "0x3FF0000000000000", // 1.0
        "0x4000000000000000"  // 2.0
      ],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Mathematical Computation (likely involving trigonometric functions)"
}
```
############
```assembly
loc_6066F0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 68h
    MOV rax, fs:28h
    MOV [rsp+98h+var_40], rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_606A20
loc_606717:
    MOV r14, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+3450h], rax
    JNZ loc_606A07
loc_60672C:
    MOV eax, [rdi+3418h]
    MOV rbx, rsi
    TEST eax, eax
    JNZ loc_606950
loc_60673D:
    TEST rbx, rbx
    JZ loc_606A39
loc_606746:
    MOV eax, 0ABACADABh
    CMP [rbx+30h], rax
    JNZ loc_606A57
loc_606755:
    MOV rdx, [r14+28h]
    MOV r8, rbx
    MOV ecx, 1
    MOV rsi, [r14+20h]
    MOV rdi, r14
    CALL sub_40C670
    MOV rbp, rax
    TEST rax, rax
    JZ loc_606A00
loc_606779:
    MOV rax, [r14+258h]
    MOV rsi, rbx
    MOV rdi, r14
    MOV r12, [r14+260h]
    MOV r13, [r14+270h]
    MOV [rsp+98h+var_80], rax
    MOV rax, [r14+268h]
    MOV [rsp+98h+var_88], rax
    CALL sub_522400
    MOV rdi, rbp
    MOV rsi, rbx
    MOV [rsp+98h+var_90], rax
    CALL sub_522630
    MOV rdi, r14
    MOV r15, rax
    CALL sub_520130
    CMP eax, 4
    JZ loc_6068F0
loc_6067CE:
    MOV rdi, r14
    CALL sub_520130
    CMP eax, 3
    JZ loc_6068F0
loc_6067DF:
    MOV edi, 7
    CALL sub_43C660
    CMP rax, 1
    JBE loc_6069E0
loc_6067F3:
    MOV edi, 7
    CALL sub_43C660
    CMP rax, 1
    JBE loc_6069B0
loc_606807:
    MOV edx, 2
loc_60680C:
    MOV rax, [rsp+98h+var_90]
    XOR ecx, ecx
    MOV edi, offset sub_602C10
    MOV [rsp+98h+var_78], r14
    LEA rsi, [rsp+98h+var_78]
    MOV [rsp+98h+var_70], rbx
    MOV [rsp+98h+var_68], r15
    MOV [rsp+98h+var_58], rbp
    MOV [rsp+98h+var_60], rax
    MOV [rsp+98h+var_50], 0
    MOV [rsp+98h+var_48], 1
    CALL _GOMP_parallel
    MOV rbp, [rsp+98h+var_60]
    MOV rdi, [rsp+98h+var_68]
    MOV r15, [rsp+98h+var_78]
    MOV rbx, [rsp+98h+var_58]
    MOV r14d, [rsp+98h+var_48]
    CALL sub_5227A0
    MOV rdi, rbp
    CALL sub_5227A0
    MOV eax, [r15+320h]
    MOV [rbx+320h], eax
    TEST r12, r12
    JNZ loc_6068E0
loc_606884:
    MOV rax, [rsp+98h+var_80]
    MOV [rbx+260h], r12
    MOV [rbx+270h], r13
    MOV [rbx+258h], rax
    MOV rax, [rsp+98h+var_88]
    MOV [rbx+268h], rax
    MOV rax, rbx
    TEST r14d, r14d
    JNZ loc_6068BA
loc_6068B2:
    MOV rdi, rbx
    CALL sub_40A330
loc_6068BA:
    MOV rcx, [rsp+98h+var_40]
    XOR rcx, fs:28h
    JNZ loc_606A52
loc_6068CE:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_6068E0:
    MOV rax, r12
    SUB rax, [rbx+28h]
    SUB rax, r13
    MOV r13, rax
    JMP loc_606884
loc_6068F0:
    MOV rdi, rbp
    CALL sub_520130
    CMP eax, 4
    JZ loc_60690E
loc_6068FD:
    MOV rdi, rbp
    CALL sub_520130
    CMP eax, 3
    JNZ loc_6067DF
loc_60690E:
    MOV edi, 7
    CALL sub_43C660
    MOV rcx, [rbp+28h]
    LEA rdx, [rcx+3Fh]
    TEST rcx, rcx
    CMOVNS rdx, rcx
    SAR rdx, 6
    CMP rcx, 7Fh
    SETNLE cl
    CMP rax, rdx
    JL loc_6069C8
loc_60693B:
    TEST cl, cl
    JNZ loc_606980
loc_60693F:
    MOV edx, 1
    JMP loc_60680C
loc_606950:
    LEA r9, [rdi+3F8h]
    MOV r8d, 7D85CEh
    MOV ecx, 4B8h
    MOV edx, offset aFlipimage
    MOV esi, offset aMagickcoreTran
    MOV edi, 8000h
    XOR eax, eax
    CALL sub_416CE0
    JMP loc_60673D
loc_606980:
    MOV edi, 7
    CALL sub_43C660
    MOV rcx, [rbp+28h]
    LEA rdx, [rcx+3Fh]
    TEST rcx, rcx
    CMOVS rcx, rdx
    SAR rcx, 6
    MOV edx, ecx
    CMP rax, rcx
    JGE loc_60680C
loc_6069A8:
    NOP dword ptr [rax+rax+00000000h]
loc_6069B0:
    MOV edi, 7
    CALL sub_43C660
    MOV edx, eax
    JMP loc_60680C
loc_6069C8:
    MOV edi, 7
    CALL sub_43C660
    CMP rax, 1
    SETNLE cl
    JMP loc_60693B
loc_6069E0:
    MOV edi, 7
    CALL sub_43C660
    CMP rax, 1
    JA loc_6067F3
loc_6069F4:
    JMP loc_60693F
loc_606A00:
    XOR eax, eax
    JMP loc_6068BA
loc_606A07:
    MOV ecx, offset aFlipimage_0
    MOV edx, 4B6h
    MOV esi, offset aMagickcoreTran
    MOV edi, offset aImageSignature
    CALL ___assert_fail
loc_606A20:
    MOV ecx, offset aFlipimage_0
    MOV edx, 4B5h
    MOV esi, offset aMagickcoreTran
    MOV edi, offset aImageConstImag
    CALL ___assert_fail
loc_606A39:
    MOV ecx, offset aFlipimage_0
    MOV edx, 4B9h
    MOV esi, offset aMagickcoreTran
    MOV edi, offset aExceptionExcep
    CALL ___assert_fail
loc_606A52:
    CALL ___stack_chk_fail
loc_606A57:
    MOV ecx, offset aFlipimage_0
    MOV edx, 4BAh
    MOV esi, offset aMagickcoreTran
    MOV edi, offset aExceptionSigna
    CALL ___assert_fail
```
Output:2
    MOV [rbx+260h], r12
    MOV [rbx+270h], r13
    MOV [rbx+258h], rax
    MOV rax, r13
    MOV [rbx+268h], rax
    MOV rdi, rbx
    CALL sub_40A330
loc_606900:
    MOV rcx, [rsp+98h+var_40]
    XOR rcx, fs:28h
    JNZ loc_606A52
loc_606914:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_606920:
    MOV rdi, r14
    CALL sub_520130
    CMP eax, 2
    JZ loc_6068F0
loc_606931:
    MOV edi, 7
    CALL sub_43C660
    CMP rax, 1
    JBE loc_6069E0
loc_606945:
    MOV edi, 7
    CALL sub_43C660
    CMP rax, 1
    JBE loc_6069B0
loc_606959:
    MOV edx, 1
loc_60695E:
    MOV rax, [rsp+98h+var_90]
    XOR ecx, ecx
    MOV edi, offset sub_602C10
    MOV [rsp+98h+var_78], r14
    LEA rsi, [rsp+98h+var_78]
    MOV [rsp+98h+var_70], rbx
    MOV [rsp+98h+var_68], r15
    MOV [rsp+98h+var_58], rbp
    MOV [rsp+98h+var_60], rax
    MOV [rsp+98h+var
############
```assembly
loc_579650:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    MOV r14, rsi
    PUSH rbp
    PUSH rbx
    MOV r13, rcx
    MOV rbp, r8
    SUB rsp, 28h
    MOV ebx, [r9]
    MOV eax, [rsp+58h+arg_0]
    MOV [rsp+58h+var_50], r9
    MOV rdi, fs:28h
    MOV [rsp+58h+var_40], rdi
    XOR edi, edi
    TEST eax, eax
    JNZ loc_579768
loc_57968E:
    TEST rdx, rdx
    MOV r12, rdx
    JNZ loc_57975C
loc_57969A:
    NOP word ptr [rax+rax+00h]
loc_5796A0:
    MOV rax, [rsp+58h+var_50]
    MOV [rax], ebx
    MOV rax, [rsp+58h+var_40]
    XOR rax, fs:28h
    JNZ loc_579811
loc_5796BB:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_5796D0:
    MOV edx, [rbp+0]
    LEA rdi, [rsp+58h+var_48]
    MOV rsi, r13
    BSWAP edx
    MOV [rsp+58h+var_48], edx
    MOV edx, [rbp+4]
    BSWAP edx
    MOV [rsp+58h+var_44], edx
    CALL sub_4AE870
    MOV edx, [rsp+58h+var_48]
    MOV ecx, edx
    MOV [rbp+3], dl
    SHR ecx, 18h
    MOV [rbp+0], cl
    MOV ecx, edx
    SHR ecx, 10h
    MOV [rbp+1], cl
    MOV ecx, edx
    MOV edx, [rsp+58h+var_44]
    SHR ecx, 8
    MOV [rbp+2], cl
    MOV ecx, edx
    MOV [rbp+7], dl
    SHR ecx, 18h
    MOV [rbp+4], cl
    MOV ecx, edx
    SHR ecx, 10h
    MOV [rbp+5], cl
    MOV ecx, edx
    SHR ecx, 8
    MOV [rbp+6], cl
loc_57972D:
    MOVSXD rdx, ebx
    ADD r15, 1
    MOVZX esi, byte ptr [r15-1]
    ADD rdx, rbp
    ADD ebx, 1
    ADD r14, 1
    MOVZX ecx, byte ptr [rdx]
    AND ebx, 7
    MOV [rdx], sil
    XOR esi, ecx
    SUB r12, 1
    MOV [r14-1], sil
    JZ loc_5796A0
loc_57975C:
    TEST ebx, ebx
    JNZ loc_57972D
loc_579760:
    JMP loc_5796D0
loc_579768:
    TEST rdx, rdx
    JZ loc_5796A0
loc_579771:
    MOV r12, rdx
    JMP loc_5797AB
loc_579780:
    ADD r15, 1
    MOVSXD rdx, ebx
    MOVZX ecx, byte ptr [r15-1]
    ADD rdx, rbp
    ADD ebx, 1
    ADD r14, 1
    XOR cl, [rdx]
    AND ebx, 7
    SUB r12, 1
    MOV [r14-1], cl
    MOV [rdx], cl
    JZ loc_5796A0
loc_5797AB:
    TEST ebx, ebx
    JNZ loc_579780
loc_5797AF:
    MOV edx, [rbp+0]
    LEA rdi, [rsp+58h+var_48]
    MOV rsi, r13
    BSWAP edx
    MOV [rsp+58h+var_48], edx
    MOV edx, [rbp+4]
    BSWAP edx
    MOV [rsp+58h+var_44], edx
    CALL sub_4AE870
    MOV edx, [rsp+58h+var_48]
    MOV ecx, edx
    MOV [rbp+3], dl
    SHR ecx, 18h
    MOV [rbp+0], cl
    MOV ecx, edx
    SHR ecx, 10h
    MOV [rbp+1], cl
    MOV ecx, edx
    MOV edx, [rsp+58h+var_44]
    SHR ecx, 8
    MOV [rbp+2], cl
    MOV ecx, edx
    MOV [rbp+7], dl
    SHR ecx, 18h
    MOV [rbp+4], cl
    MOV ecx, edx
    SHR ecx, 10h
    MOV [rbp+5], cl
    MOV ecx, edx
    SHR ecx, 8
    MOV [rbp+6], cl
    JMP loc_579780
loc_579811:
    CALL sub_5E2570
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 4,
      "input_parameter_types": [
        "Pointer",
        "Pointer",
        "Integer",
        "Integer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "ConditionalBranching",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x7",
        "0x1",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": true
    }
  },
  "inferred_algorithm": "XOR Cipher with Key Expansion"
}
```
############
```assembly
loc_4DAC20:
    PUSH r15
    PUSH r14
    MOV r15d, esi
    PUSH r13
    PUSH r12
    MOV r13d, edi
    PUSH rbp
    PUSH rbx
    MOV r12, rdx
    MOV r14, rcx
    MOV rbx, r8
    MOV rbp, r9
    SUB rsp, 18h
    CALL sub_4DA9A0
    TEST rax, rax
    JZ loc_4DAD88
loc_4DAC4E:
    TEST r13d, r13d
    MOV r10, rax
    JZ loc_4DACA8
loc_4DAC56:
    TEST r15d, r15d
    JZ loc_4DACA8
loc_4DAC5B:
    TEST r12, r12
    JZ loc_4DAC68
loc_4DAC60:
    MOV qword ptr [r12], offset unk_6E79E2
loc_4DAC68:
    TEST r14, r14
    JZ loc_4DAC74
loc_4DAC6D:
    MOV dword ptr [r14], 0
loc_4DAC74:
    TEST rbx, rbx
    JZ loc_4DAC80
loc_4DAC79:
    MOV qword ptr [rbx], offset unk_6E79E2
loc_4DAC80:
    TEST rbp, rbp
    JZ loc_4DADA0
loc_4DAC89:
    MOV dword ptr [rbp+0], 0
    MOV eax, 44h
loc_4DAC95:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4DACA8:

loc_4DAD88:

loc_4DADA0:

loc_4DAF20:
    XOR r9d, r9d
    XOR r8d, r8d
    XOR ecx, ecx
    XOR edx, edx
    MOV esi, 1
    XOR edi, edi
    JMP loc_4DAC20
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 6,
      "input_parameter_types": [
        "Integer",
        "Integer",
        "Pointer",
        "Pointer",
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x1",
        "0x0",
        "0x44",
        "0x6E79E2"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 4
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Loop-based Data Processing"
}
```
############
```assembly
loc_553670:
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, [rdi]
    MOV edx, 394h
    MOV esi, offset aCryptoAsn1AsnM
    CALL sub_4F43E0
    MOV rdi, [rbx+8]
    MOV edx, 395h
    MOV esi, offset aCryptoAsn1AsnM
    CALL sub_4F43E0
    MOV rdi, rbx
    MOV edx, 396h
    MOV esi, offset aCryptoAsn1AsnM
    POP rbx
    JMP sub_4F43E0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x394",
        "0x395",
        "0x396"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Cryptographic ASN.1 Processing"
}
```
############
```assembly
loc_406750:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV ebx, esi
    SUB rsp, 8
    MOV rdi, cs:off_94E800
    CALL sub_597A20
    MOVSXD rdx, ebx
    MOV rsi, rbp
    MOV edi, eax
    CALL sub_5DDAA0
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Integer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "Arithmetic"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x94E800",
        "0x597A20",
        "0x5DDAA0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Undetermined"
}
```
############
```assembly
loc_4039F0:
    XOR ebp, ebp
    MOV r9, rdx
    POP rsi
    MOV rdx, rsp
    AND rsp, 0FFFFFFFFFFFFFFF0h
    PUSH rax
    PUSH rsp
    MOV r8, offset fini
    MOV rcx, offset init
    MOV rdi, offset main
    CALL ___libc_start_main
    HLT 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 3,
      "input_parameter_types": [
        "Pointer",
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "DataMovement",
        "ControlFlow"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xFFFFFFFFFFFFFFF0",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Program Entry Point"
}
```
############
```assembly
loc_40B440:
    SUB rsp, 0D8h
    TEST al, al
    MOV [rsp+0D8h+var_A8], rdx
    MOV [rsp+0D8h+var_A0], rcx
    MOV [rsp+0D8h+var_98], r8
    MOV [rsp+0D8h+var_90], r9
    JZ loc_40B496
loc_40B45F:
    MOVAPS [rsp+0D8h+var_88], xmm0
    MOVAPS [rsp+0D8h+var_78], xmm1
    MOVAPS [rsp+0D8h+var_68], xmm2
    MOVAPS [rsp+0D8h+var_58], xmm3
    MOVAPS [rsp+0D8h+var_48], xmm4
    MOVAPS [rsp+0D8h+var_38], xmm5
    MOVAPS [rsp+0D8h+var_28], xmm6
    MOVAPS [rsp+0D8h+var_18], xmm7
loc_40B496:
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_C0], rax
    XOR eax, eax
    LEA rax, [rsp+0D8h+arg_0]
    MOV rdx, rsp
    MOV [rsp+0D8h+var_D0], rax
    LEA rax, [rsp+0D8h+var_B8]
    MOV [rsp+0D8h+var_D8], 10h
    MOV [rsp+0D8h+var_D4], 30h
    MOV [rsp+0D8h+var_C8], rax
    CALL sub_40B400
    MOV rax, [rsp+0D8h+var_C0]
    XOR rax, fs:28h
    JNZ loc_40B4EC
loc_40B4E4:
    ADD rsp, 0D8h
    RETN 
loc_40B4EC:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "MemoryAccess",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xD8",
        "0x0",
        "0x28",
        "0x10",
        "0x30"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 5
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Exception Handling"
}
```
############
```assembly
loc_410F40:
    MOV ecx, [rdi]
    SHL ecx, 6
    SUB ecx, 1
    JS loc_410F7C
loc_410F4A:
    MOV eax, ecx
    SAR eax, 6
    CDQE 
    CMP qword ptr [rdi+rax*8+8], 0
    JNS loc_410F74
loc_410F59:
    JMP loc_410F7C
loc_410F60:
    MOV eax, ecx
    SAR eax, 6
    CDQE 
    MOV rax, [rdi+rax*8+8]
    SHR rax, cl
    TEST rax, rax
    JNZ loc_410F7C
loc_410F74:
    SUB ecx, 1
    CMP ecx, 0FFFFFFFFh
    JNZ loc_410F60
loc_410F7C:
    LEA eax, [rcx+0Fh]
    ADD ecx, 8
    CMOVS ecx, eax
    SAR ecx, 3
    LEA eax, [rcx+2]
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Bitwise",
        "Comparison",
        "DataMovement",
        "LoopIndicators"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x6",
        "0xFFFFFFFF"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Bit Manipulation and Array Access"
}
```
############
```assembly
loc_43589B:
    MOV r15d, eax
    MOVZX eax, word ptr [rbp+30h]
    MOVZX esi, byte ptr [r14+0Ah]
    MOV byte ptr [r14+0Ch], 0
    MOV r8d, 497B74h
    MOV ecx, 0ED85h
    SUB eax, 1
    MOV [r14+18h], ax
    MOV eax, [rbp+34h]
    MOVSXD rdx, eax
    MOV rax, rsi
    LEA esi, [rbx+rsi+8]
    ADD rax, r13
    MOV [rsp+58h+var_44], edx
    ADD rdx, r13
    MOVZX r9d, si
    MOV [r14+12h], si
    MOV [r14+58h], rdx
    ADD r9, r13
    MOV [r14+68h], rax
    MOV [r14+60h], r9
    MOVZX eax, byte ptr [r13+rbx+5]
    MOVZX edx, byte ptr [r13+rbx+4]
    MOV [rsp+58h+var_3A], al
    MOVZX eax, byte ptr [r13+rbx+6]
    MOV [rsp+58h+var_39], al
    MOVZX eax, byte ptr [r13+rbx+3]
    SHL eax, 8
    OR eax, edx
    MOV edx, 0AAAAAAABh
    MOVZX edi, ax
    MOV [r14+16h], ax
    MOV eax, [rbp+30h]
    SUB eax, 8
    MUL edx
    SHR edx, 2
    CMP edi, edx
    JA loc_4359E0
loc_435933:
    MOVZX esi, si
    MOV ecx, [rsp+58h+var_44]
    LEA eax, [rsi+rdi*2]
    MOV [rsp+58h+var_40], eax
    MOV eax, ecx
    SUB eax, 4
    MOV [rsp+58h+var_48], eax
    MOV rax, [rbp+8]
    TEST byte ptr [rax+2Fh], 20h
    JZ loc_435A20
loc_435958:
    CMP byte ptr [r14+8], 0
    JNZ loc_435B08
loc_435963:
    MOV eax, ecx
    SUB eax, 5
    TEST edi, edi
    MOV [rsp+58h+var_48], eax
    JZ loc_435A17
loc_435974:
    MOV rbp, r9
    XOR r12d, r12d
    JMP loc_435992
loc_435980:
    MOVZX eax, word ptr [r14+16h]
    ADD r12d, 1
    ADD rbp, 2
    CMP r12d, eax
    JGE loc_435A10
loc_435992:
    MOVZX esi, word ptr [rbp+0]
    ROL si, 8
    MOVZX edx, si
    CMP [rsp+58h+var_40], edx
    JG loc_435B30
loc_4359A7:
    CMP edx, [rsp+58h+var_48]
    JG loc_435B30
loc_4359B1:
    MOVZX esi, si
    MOV [rsp+58h+var_4C], edx
    MOV rdi, r14
    ADD rsi, r13
    CALL qword ptr [r14+78h]
    MOV edx, [rsp+58h+var_4C]
    MOVZX eax, ax
    ADD edx, eax
    CMP [rsp+58h+var_44], edx
    JGE loc_435980
loc_4359D1:
    MOV r8d, 497B74h
    MOV ecx, 0EDA6h
    NOP dword ptr [rax+00h]
loc_4359E0:
    MOV edx, offset aDatabaseCorrup
    MOV esi, offset aSAtLineDOf10s
    MOV edi, 0Bh
    XOR eax, eax
    MOV r15d, 0Bh
    CALL sub_435180
loc_4359FC:
    ADD rsp, 28h
    MOV eax, r15d
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_435A10:
    CMP byte ptr [r14+8], 0
    JNZ loc_435A20
loc_435A17:
    ADD [rsp+58h+var_48], 1
    NOP dword ptr [rax+00h]
loc_435A20:
    MOVZX edx, [rsp+58h+var_3A]
    MOVZX ecx, [rsp+58h+var_39]
    MOVZX eax, byte ptr [r13+rbx+1]
    MOVZX edi, byte ptr [r13+rbx+2]
    MOVZX esi, byte ptr [r13+rbx+7]
    SHL edx, 8
    OR edx, ecx
    SHL eax, 8
    SUB edx, 1
    OR edi, eax
    MOVZX edx, dx
    LEA r9d, [rdx+rsi+1]
    JZ loc_435AE8
loc_435A57:
    CMP [rsp+58h+var_40], edi
    MOV r8d, 497B74h
    MOV ecx, 0EDB8h
    JG loc_4359E0
loc_435A6C:
    CMP edi, [rsp+58h+var_48]
    JLE loc_435A8C
loc_435A72:
    JMP loc_435B40
loc_435A80:
    CMP [rsp+58h+var_48], esi
    MOV edi, esi
    JL loc_435B40
loc_435A8C:
    MOVSXD rdx, edi
    MOVZX esi, byte ptr [r13+rdx+0]
    MOVZX eax, byte ptr [r13+rdx+1]
    SHL esi, 8
    OR esi, eax
    MOVZX eax, byte ptr [r13+rdx+2]
    MOVZX edx, byte ptr [r13+rdx+3]
    SHL eax, 8
    OR eax, edx
    ADD r9d, eax
    ADD eax, edi
    LEA edx, [rax+3]
    CMP esi, edx
    JA loc_435A80
loc_435ABD:
    TEST esi, esi
    MOV r8d, 497B74h
    MOV ecx, 0EDC5h
    JNZ loc_4359E0
loc_435AD0:
    CMP [rsp+58h+var_44], eax
    MOV r8d, 497B74h
    MOV ecx, 0EDC8h
    JB loc_4359E0
loc_435AE5:
    NOP dword ptr [rax]
loc_435AE8:
    CMP [rsp+58h+var_44], r9d
    JL loc_435B18
loc_435AEF:
    SUB r9w, word ptr [rsp+58h+var_40]
    MOV byte ptr [r14], 1
    MOV [r14+14h], r9w
    JMP loc_4359FC
loc_435B08:
    TEST edi, edi
    JNZ loc_435974
loc_435B10:
    JMP loc_435A20
loc_435B18:
    MOV r8d, 497B74h
    MOV ecx, 0EDD4h
    JMP loc_4359E0
loc_435B30:
    MOV r8d, 497B74h
    MOV ecx, 0EDA1h
    JMP loc_4359E0
loc_435B40:
    MOV r8d, 497B74h
    MOV ecx, 0EDBCh
    JMP loc_4359E0
```
Output:MOVZX r8d, byte ptr [r13+rbx+0]
    MOVZX rdx, byte ptr [r13+rbx+6]
    MOVZX rax, byte ptr [r13+rbx+3]
    SHL rdx, 8
    OR rdx, rax
    MOVZX r10d, rdx
    MOVZX r11d, byte ptr [r13+rbx+4]
    SHL r10d, 8
    OR r10d, r11d
    MOVZX r11d, byte ptr [r13+rbx+5]
    SHL r11d, 8
    OR r11d, r10d
    MOVZX r10d, r11d
    MOVZX r11d, byte ptr [r13+rbx+7]
    SHL r11d, 8
    OR r11d, r10d
    MOVZX r10d, r11d
    MOVZX r11d, byte ptr [r13+rbx+0]
    SHL r11d, 8
    OR r11d, r10d
    MOVZX r10d, r11d
    MOVZX r11d, byte ptr [r13+rbx+6]
    SHL r11d, 8
    OR r11d, r10d
    MOVZX r10d, r11d
    MOVZX r11d, byte ptr [r13+rbx+3]
    SHL r11d, 8
    OR r11d, r10d
    MOVZX r10d, r11d
    MOVZX r11d, byte ptr [r13+rbx+4]
    SHL r11d, 8
    OR r11d, r10d
    MOVZX r10d, r11d
    MOVZX r11d, byte ptr [r13+rbx+5]
    SHL r11d, 8
    OR r11d, r10d
    MOVZX r10d,
############
```assembly
loc_4262A0:
    XOR eax, eax
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Bitwise",
        "Return"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Reset/Clear Operation"
}
```
############
```assembly
loc_420090:
    TEST word ptr [rdi+8], 2460h
    JNZ loc_4200C8
loc_420098:
    MOV rax, [rsi]
    MOV [rdi], rax
    MOV rax, [rsi+8]
    MOV [rdi+8], rax
    MOV rax, [rsi+10h]
    MOV [rdi+10h], rax
    TEST byte ptr [rsi+9], 8
    JNZ locret_4200C1
loc_4200B4:
    MOVZX eax, word ptr [rdi+8]
    AND ah, 0E3h
    OR edx, eax
    MOV [rdi+8], dx
loc_4200C1:
    REP 
loc_4200C8:
    JMP loc_4200D0
loc_4200D0:
    PUSH r12
    PUSH rbp
    MOV r12d, edx
    PUSH rbx
    MOV rbp, rsi
    MOV rbx, rdi
    CALL sub_41B010
    MOV edx, r12d
    MOV rsi, rbp
    MOV rdi, rbx
    POP rbx
    POP rbp
    POP r12
    JMP sub_420090
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "ConditionalBranching",
        "SubroutineCall",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x2460",
        "0x8",
        "0xE3",
        "0x10",
        "0x9",
        "0x4",
        "0x12",
        "0x10"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 8
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Data Transformation and Repetition"
}
```
############
```assembly
loc_442630:
    PUSH r15
    PUSH r14
    MOV ecx, 7
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 3A8h
    MOV rax, [rdi+8]
    MOV [rsp+3D8h+var_3A8], rsi
    MOV [rsp+3D8h+var_360], rdi
    MOV [rsp+3D8h+var_390], rdx
    MOV rbx, rax
    MOV [rsp+3D8h+var_368], rax
    MOVSXD rax, dword ptr [rax+14h]
    MOV rdx, fs:28h
    MOV [rsp+3D8h+var_40], rdx
    XOR edx, edx
    MOV rdx, [rdi]
    SHL rax, 6
    ADD rax, [rbx+20h]
    MOV rsi, rax
    MOV [rsp+3D8h+var_370], rax
    MOV rax, [rdi+18h]
    LEA rdi, [rsp+3D8h+var_328]
    MOV r8, rax
    MOV [rsp+3D8h+var_378], rax
    XOR eax, eax
    REP 
    MOVZX eax, byte ptr [r8+10h]
    MOV rdx, [rdx+8]
    MOV rcx, rax
    SHL rax, 7
    SHL rcx, 4
    SUB rax, rcx
    LEA rax, [rdx+rax+8]
    MOV [rsp+3D8h+var_3A0], rax
    MOV eax, [rax+44h]
    MOV [rsp+3D8h+var_394], eax
    MOV rax, [rbx+20h]
    CMP rsi, rax
    MOV [rsp+3D8h+var_3B8], rax
    JBE loc_442B36
loc_4426DE:
    LEA rax, [rsp+3D8h+var_2A0]
    MOV [rsp+3D8h+var_388], rax
    LEA rax, [rsp+3D8h+var_2E0]
    MOV [rsp+3D8h+var_380], rax
    NOP dword ptr [rax+rax+00000000h]
loc_442700:
    MOV rax, [rsp+3D8h+var_3B8]
    TEST byte ptr [rax+15h], 2
    JZ loc_442B20
loc_44270F:
    MOV rax, [rsp+3D8h+var_3B8]
    MOV rcx, [rsp+3D8h+var_378]
    MOV rax, [rax+28h]
    MOV rdx, [rax+228h]
    TEST [rcx+8], rdx
    JZ loc_442B20
loc_44272E:
    MOV rcx, [rax+20h]
    MOVSXD rax, dword ptr [rax+14h]
    MOV rdx, [rsp+3D8h+var_360]
    MOV [rsp+3D8h+var_348], 0
    MOV [rsp+3D8h+var_3D0], rcx
    SHL rax, 6
    ADD rax, rcx
    MOV rdi, rax
    MOV [rsp+3D8h+var_3B0], rax
    MOV rax, [rdx]
    CMP rcx, rdi
    MOV [rsp+3D8h+var_358], rax
    MOV rax, [rdx+8]
    MOV [rsp+3D8h+var_350], rax
    MOV rax, [rdx+18h]
    MOV [rsp+3D8h+var_340], rax
    MOV rax, [rdx+28h]
    MOV [rsp+3D8h+var_330], rax
    LEA rax, [rsp+3D8h+var_2E8]
    MOV [rsp+3D8h+var_338], rax
    JNB loc_442B43
loc_4427A3:
    MOV [rsp+3D8h+var_398], 1
    MOV [rsp+3D8h+var_3BC], 0
    JMP loc_442878
loc_4427C0:
    MOV rax, [rax+28h]
    MOV [rsp+3D8h+var_350], rax
loc_4427CC:
    MOV rax, [rsp+3D8h+var_3A0]
    XOR r12d, r12d
    MOV [rsp+3D8h+var_2E8], r12w
    MOV rax, [rax+20h]
    MOV r13d, [rax+54h]
    TEST r13d, r13d
    JZ loc_4428E8
loc_4427EE:
    MOV rdx, [rsp+3D8h+var_390]
    MOV rsi, [rsp+3D8h+var_3A8]
    LEA rdi, [rsp+3D8h+var_358]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_3BC], eax
    MOV ebp, [rsp+3D8h+var_3BC]
    TEST ebp, ebp
    JZ loc_44290A
loc_442815:
    MOVZX ebx, [rsp+3D8h+var_2E8]
    TEST bx, bx
    JZ loc_442936
loc_442826:
    MOV r11d, [rsp+3D8h+var_398]
    TEST r11d, r11d
    JZ loc_442A30
loc_442834:
    MOV rsi, [rsp+3D8h+var_380]
    MOVZX edx, bx
    LEA rdi, [rsp+3D8h+var_320]
    SHL rdx, 4
    MOV ecx, 30h
    MOV [rsp+3D8h+var_328], bx
    CALL ___memcpy_chk
    MOV [rsp+3D8h+var_398], 0
loc_442862:
    ADD [rsp+3D8h+var_3D0], 40h
    MOV rax, [rsp+3D8h+var_3D0]
    CMP [rsp+3D8h+var_3B0], rax
    JBE loc_442940
loc_442878:
    MOV rax, [rsp+3D8h+var_3D0]
    TEST byte ptr [rax+15h], 4
    JNZ loc_4427C0
loc_442887:
    MOV rax, [rsp+3D8h+var_3D0]
    MOV ecx, [rsp+3D8h+var_394]
    CMP ecx, [rax+1Ch]
    JNZ loc_442862
loc_442895:
    MOV rcx, [rsp+3D8h+var_368]
    MOV rax, [rcx]
    MOV [rsp+3D8h+var_260], rcx
    MOV [rsp+3D8h+var_258], 47h
    MOV [rsp+3D8h+var_254], 1
    MOV [rsp+3D8h+var_268], rax
    MOV rax, [rsp+3D8h+var_3D0]
    MOV [rsp+3D8h+var_248], rax
    LEA rax, [rsp+3D8h+var_268]
    MOV [rsp+3D8h+var_350], rax
    JMP loc_4427CC
loc_4428E8:
    MOV rsi, [rsp+3D8h+var_3A8]
    LEA rdi, [rsp+3D8h+var_358]
    CALL sub_441D70
    MOV [rsp+3D8h+var_3BC], eax
    MOV ebp, [rsp+3D8h+var_3BC]
    TEST ebp, ebp
    JNZ loc_442815
loc_44290A:
    MOV rdx, [rsp+3D8h+var_390]
    MOV rsi, [rsp+3D8h+var_3A8]
    LEA rdi, [rsp+3D8h+var_358]
    CALL sub_442630
    MOVZX ebx, [rsp+3D8h+var_2E8]
    MOV [rsp+3D8h+var_3BC], eax
    TEST bx, bx
    JNZ loc_442826
loc_442936:
    XOR ebx, ebx
    MOV [rsp+3D8h+var_328], bx
loc_442940:
    MOV rdx, [rsp+3D8h+var_378]
    MOV r9d, [rsp+3D8h+var_3BC]
    XOR r8d, r8d
    MOV rcx, [rsp+3D8h+var_3B8]
    MOV edi, 1
    MOV rax, [rdx+38h]
    TEST r9d, r9d
    MOV [rdx+2Ch], di
    MOV [rax], rcx
    MOV dword ptr [rdx+28h], 2000h
    MOV [rdx+12h], r8w
    MOV byte ptr [rdx+11h], 0
    MOV qword ptr [rdx+18h], 0
    MOV qword ptr [rdx+20h], 0
    JNZ loc_4429FE
loc_442987:
    CMP [rsp+3D8h+var_328], 0
    JZ loc_442B20
loc_442996:
    LEA rbx, [rsp+3D8h+var_328]
    XOR ebp, ebp
    MOV r12, [rsp+3D8h+var_378]
    MOV r13, [rsp+3D8h+var_360]
    JMP loc_4429C4
loc_4429B0:
    MOVZX eax, [rsp+3D8h+var_328]
    ADD rbx, 10h
    CMP eax, ebp
    JLE loc_442B20
loc_4429C4:
    MOVZX eax, word ptr [rbx+10h]
    MOV rsi, [r13+20h]
    MOV rdx, r12
    MOV rdi, [r13+0]
    ADD ebp, 1
    ADD eax, 1
    MOV [r12+14h], ax
    MOVZX eax, word ptr [rbx+12h]
    MOV [r12+16h], ax
    MOV rax, [rbx+8]
    MOV [r12], rax
    CALL sub_423560
    TEST eax, eax
    JZ loc_4429B0
loc_4429FA:
    MOV [rsp+3D8h+var_3BC], eax
loc_4429FE:
    MOV rdx, [rsp+3D8h+var_40]
    XOR rdx, fs:28h
    MOV eax, [rsp+3D8h+var_3BC]
    JNZ loc_442B83
loc_442A19:
    ADD rsp, 3A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_442A30:
    MOVZX edx, [rsp+3D8h+var_328]
    MOV rdi, [rsp+3D8h+var_388]
    LEA rsi, [rsp+3D8h+var_320]
    MOV ecx, 30h
    MOV r12, rdx
    MOV [rsp+3D8h+var_2A8], dx
    SHL rdx, 4
    CALL ___memcpy_chk
    XOR r10d, r10d
    TEST r12w, r12w
    MOV [rsp+3D8h+var_328], r10w
    JZ loc_442862
loc_442A74:
    LEA eax, [r12-1]
    LEA rbp, [rsp+3D8h+var_2A8]
    SHL rax, 4
    ADD rax, rbp
    MOV [rsp+3D8h+var_3C8], rax
    NOP dword ptr [rax]
loc_442A90:
    TEST bx, bx
    JZ loc_442AFB
loc_442A95:
    MOVSX r14d, word ptr [rbp+12h]
    MOVSX r13d, word ptr [rbp+10h]
    LEA rbx, [rsp+3D8h+var_2E8]
    MOV r12, [rbp+8]
    XOR r15d, r15d
loc_442AAE:
    MOVSX esi, word ptr [rbx+12h]
    MOV edi, r14d
    ADD r15d, 1
    ADD rbx, 10h
    CALL sub_41CAA0
    MOVSX esi, word ptr [rbx]
    MOV edi, r13d
    MOV [rsp+3D8h+var_3BE], ax
    CALL sub_41CAA0
    MOVSX ecx, [rsp+3D8h+var_3BE]
    MOV rsi, r12
    OR rsi, [rbx-8]
    LEA rdi, [rsp+3D8h+var_328]
    MOVSX edx, ax
    CALL sub_415FB0
    MOVZX eax, [rsp+3D8h+var_2E8]
    CMP eax, r15d
    JG loc_442AAE
loc_442AFB:
    CMP [rsp+3D8h+var_3C8], rbp
    JZ loc_442862
loc_442B06:
    MOVZX ebx, [rsp+3D8h+var_2E8]
    ADD rbp, 10h
    JMP loc_442A90
loc_442B20:
    ADD [rsp+3D8h+var_3B8], 40h
    MOV rax, [rsp+3D8h+var_3B8]
    CMP [rsp+3D8h+var_370], rax
    JA loc_442700
loc_442B36:
    MOV [rsp+3D8h+var_3BC], 0
    JMP loc_4429FE
loc_442B43:
    MOV rdx, [rsp+3D8h+var_378]
    MOV ecx, 1
    XOR esi, esi
    MOV [rdx+2Ch], cx
    MOV rax, [rdx+38h]
    MOV rcx, [rsp+3D8h+var_3B8]
    MOV [rax], rcx
    MOV dword ptr [rdx+28h], 2000h
    MOV [rdx+12h], si
    MOV byte ptr [rdx+11h], 0
    MOV qword ptr [rdx+18h], 0
    MOV qword ptr [rdx+20h], 0
    JMP loc_442987
loc_442B83:
    CALL ___stack_chk_fail
```
Output:Z loc_4428E8
    MOV rax, [rsp+3D8h+var_350]
    MOV r12, [rsp+3D8h+var_358]
    LEA rdi, [rsp+3D8h+var_360]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_398], eax
    MOV r13, [rsp+3D8h+var_358]
    LEA rdi, [rsp+3D8h+var_350]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_394], eax
    MOV r14, [rsp+3D8h+var_358]
    LEA rdi, [rsp+3D8h+var_368]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_39C], eax
    MOV r15, [rsp+3D8h+var_358]
    LEA rdi, [rsp+3D8h+var_370]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_3A4], eax
    MOV rdi, [rsp+3D8h+var_360]
    LEA rax, [rsp+3D8h+var_378]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_3AC], eax
    MOV r12, [rsp+3D8h+var_368]
    LEA rax, [rsp+3D8h+var_370]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_3B4], eax
    MOV r13, [rsp+3D8h+var_378]
    LEA rdi, [rsp+3D8h+var_360]
    CALL sub_43E6C0
    MOV [rsp+3D8h+var_3BA], eax
    MOV r
############
```assembly
loc_409290:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdx
    PUSH rbp
    PUSH rbx
    MOVSXD r12, edi
    MOV rdi, rdx
    SUB rsp, 18h
    CMP qword ptr [rdx], 0
    JZ loc_4092BA
loc_4092AD:
    NOP dword ptr [rax]
loc_4092B0:
    ADD rdi, 8
    CMP qword ptr [rdi], 0
    JNZ loc_4092B0
loc_4092BA:
    SUB rdi, r13
    MOV eax, r12d
    MOV cs:ident, rsi
    AND ah, 0FEh
    MOV rbx, rdi
    SAR rbx, 3
    CMP eax, 51h
    SETNZ dl
    CMP r12d, 147h
    SETNZ al
    TEST dl, al
    JZ loc_4092EE
loc_4092E5:
    CMP ebx, 2
    JZ loc_4093D3
loc_4092EE:
    MOV r15d, cs:suid
    TEST r15d, r15d
    JNZ loc_409312
loc_4092FA:
    MOV rsi, r13
    MOV edi, ebx
    CALL ds:funcs_4092FF[r12*8]
    MOV cs:byte_742E54, al
    CALL sub_40A420
loc_409312:
    CALL _getgid
    CMP cs:byte_7430F0, 0
    MOV [rsp+48h+gid], eax
    JZ loc_409397
loc_409324:
    MOV rbp, cs:qword_7430F8
    TEST rbp, rbp
    JNZ loc_409341
loc_409330:
    JMP loc_409397
loc_409338:
    MOV rbp, [rbp+0]
    TEST rbp, rbp
    JZ loc_409397
loc_409341:
    CMP r12d, [rbp+10h]
    JNZ loc_409338
loc_409347:
    CMP r15d, [rbp+8]
    MOV eax, [rbp+14h]
    MOV [rsp+48h+var_3C], eax
    JZ loc_409479
loc_409358:
    MOV edi, [rbp+0Ch]
    CMP [rsp+48h+gid], edi
    JZ loc_409408
loc_409365:
    CALL sub_40D6F0
    TEST rax, rax
    JZ loc_40940D
loc_409373:
    MOV r14, [rax+18h]
    JMP loc_40938D
loc_409379:
    CALL sub_40D6B0
    TEST rax, rax
    JZ loc_409389
loc_409383:
    CMP r15d, [rax+10h]
    JZ loc_409408
loc_409389:
    ADD r14, 8
loc_40938D:
    MOV rdi, [r14]
    TEST rdi, rdi
    JNZ loc_409379
loc_409395:
    JMP loc_40940D
loc_409397:
    MOV eax, r12d
    MOV ecx, 4
    CDQ 
    IDIV ecx
    CDQE 
    LEA ecx, [rdx+rdx]
    MOVZX eax, ds:byte_4F5E71[rax]
    SAR eax, cl
    AND eax, 3
    CMP eax, 2
    JZ loc_409460
loc_4093BC:
    TEST eax, eax
    JZ loc_4093F5
loc_4093C0:
    MOV rdi, cs:qword_7430F8
    XOR esi, esi
    CALL sub_409C10
    JMP loc_4092FA
loc_4093D3:
    MOV rdi, [r13+8]
    MOV esi, offset aHelp
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4092EE
loc_4093E9:
    MOV cs:byte_742E54, 0
    CALL sub_408E80
loc_4093F5:
    MOV edi, [rsp+48h+gid]
    CALL _setgid
    MOV edi, r15d
    CALL _setuid
    JMP loc_4093C0
loc_409408:
    SHR [rsp+48h+var_3C], 3
loc_40940D:
    TEST byte ptr [rsp+48h+var_3C], 1
    JZ loc_40948C
loc_409414:
    TEST byte ptr [rbp+15h], 4
    JZ loc_409421
loc_40941A:
    MOV eax, [rbp+0Ch]
    MOV [rsp+48h+gid], eax
loc_409421:
    MOV esi, [rsp+48h+gid]
    OR edi, 0FFFFFFFFh
    MOV edx, esi
    CALL _setresgid
    TEST eax, eax
    JNZ loc_409480
loc_409433:
    TEST byte ptr [rbp+15h], 8
    MOV esi, cs:suid
    JZ loc_409442
loc_40943F:
    MOV esi, [rbp+8]
loc_409442:
    OR edi, 0FFFFFFFFh
    MOV edx, esi
    CALL _setresuid
    TEST eax, eax
    JZ loc_4093C0
loc_409454:
    MOV edi, offset aSetresuid_0
    XOR eax, eax
    CALL sub_409DA0
loc_409460:
    CALL _geteuid
    TEST eax, eax
    JZ loc_4093C0
loc_40946D:
    MOV edi, offset aMustBeSuidToWo
    XOR eax, eax
    CALL sub_40A1E0
loc_409479:
    SHR [rsp+48h+var_3C], 6
    JMP loc_40940D
loc_409480:
    MOV edi, offset aSetresgid_0
    XOR eax, eax
    CALL sub_409DA0
loc_40948C:
    MOV edi, offset aYouHaveNoPermi
    XOR eax, eax
    CALL sub_40A1E0
```
Output:8h+gid]
    MOV edi, [rsp+48h+var_3C]
    CALL sub_40D6F0
    TEST rax, rax
    JZ loc_409438
loc_40942A:
    MOV r14, [rax+18h]
    JMP loc_40943D
loc_409430:
    CALL sub_40D6B0
    TEST rax, rax
    JZ loc_409440
loc_40943A:
    CMP r15d, [rax+10h]
    JZ loc_409438
loc_409440:
    ADD r14, 8
loc_409444:
    MOV rdi, [r14]
    TEST rdi, rdi
    JNZ loc_409430
loc_409452:
    JMP loc_409438
loc_409458:
    SHR [rsp+48h+var_3C], 3
loc_409460:
    MOV edi, [rsp+48h+gid]
    CALL _setgid
    MOV edi, r15d
    CALL _setuid
    JMP loc_4093C0
loc_40946A:
    MOV edi, [rsp+48h+gid]
    CALL _setgid
    MOV edi, r15d
    CALL _setuid
    JMP loc_4093C0
loc_409479:
    CMP r15d, [rbp+8]
    MOV eax, [rbp+14h]
    MOV [rsp+48h+var_3C], eax
    JZ loc_409479
loc_40948C:
    CALL sub_40A420
    CALL sub_4092FA
    RET
```

```assembly
loc_40A420:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rdx
############
```assembly
loc_4C6900:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdx
    SUB rsp, 8
    MOVSX ecx, byte ptr [rdx]
    TEST cl, cl
    JZ loc_4C6979
loc_4C6910:
    MOV r8, rdx
    XOR edx, edx
    NOP dword ptr [rax]
loc_4C6918:
    MOV eax, edx
    ADD r8, 1
    SHL eax, 6
    SUB eax, edx
    LEA edx, [rcx+rax]
    MOVSX ecx, byte ptr [r8]
    TEST cl, cl
    JNZ loc_4C6918
loc_4C692E:
    MOV eax, edx
    XOR edx, edx
    DIV edi
    MOV edx, edx
    SHL rdx, 3
loc_4C693A:
    MOV rbx, [rsi+rdx]
    TEST rbx, rbx
    JNZ loc_4C6951
loc_4C6943:
    JMP loc_4C6970
loc_4C6948:
    MOV rbx, [rbx+20h]
    TEST rbx, rbx
    JZ loc_4C6970
loc_4C6951:
    LEA rdi, [rbx+28h]
    MOV rsi, rbp
    CALL _strcmp
    TEST eax, eax
    JNZ loc_4C6948
loc_4C6961:
    ADD rsp, 8
    MOV rax, rbx
    POP rbx
    POP rbp
    RETN 
loc_4C6970:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_4C6979:
    XOR edx, edx
    JMP loc_4C693A
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 3,
      "input_parameter_types": [
        "Pointer",
        "Pointer",
        "Integer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Comparison",
        "Bitwise",
        "SubroutineCall",
        "DataMovement",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x20",
        "0x3",
        "0x8",
        "0x28"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 4
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Hash Table Lookup"
}
```
############
```assembly
loc_45AC70:
    PUSH rbx
    SUB rsp, 10h
    MOV rbx, cs:qword_7431F0
    MOV rax, fs:28h
    MOV [rsp+18h+var_10], rax
    XOR eax, eax
    LEA rdi, [rbx+38h]
    CALL sub_45A780
    MOV ecx, 11h
    MOV rdx, rsp
    MOV esi, offset buf
    MOV rdi, rax
    CALL sub_45A670
    TEST eax, eax
    JZ loc_45ACF0
loc_45ACAE:
    MOV eax, 4
loc_45ACB3:
    MOV rdx, [rbx+8]
    CMP rdx, offset qword_743628
    JNB loc_45ACCB
loc_45ACC0:
    LEA rcx, [rdx+1]
    MOV [rbx+8], rcx
    MOV byte ptr [rdx], 3Fh
loc_45ACCB:
    SUB eax, 1
    JNZ loc_45ACB3
loc_45ACD0:
    MOV rax, [rsp+18h+var_10]
    XOR rax, fs:28h
    JNZ loc_45ACFB
loc_45ACE0:
    ADD rsp, 10h
    POP rbx
    RETN 
loc_45ACF0:
    MOV rdi, [rsp+18h+var_18]
    CALL sub_45A880
    JMP loc_45ACD0
loc_45ACFB:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "SubroutineCall",
        "Comparison",
        "ControlFlow"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x38",
        "0x11",
        "0x8",
        "0x7431F0",
        "0x28",
        "0x18",
        "0x3F",
        "0x743628"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 8
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Buffer Manipulation and Validation"
}
```
############
```assembly
loc_7362B0:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference"
}
```
############
```assembly
loc_41AE90:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_41AEE6
loc_41AEBA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_41AEDF:
    MOV edi, ebx
    CALL _exit
loc_41AEE6:
    MOV esi, offset aUsageSOptionFi_3
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, 20h
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aWithNoFileOrWh
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aMandatoryArgum
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aDDecodeDecodeD
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aTheDataAreEnco
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aBase32
    MOV rsi, rax
    MOV edi, 1
    MOV rdx, rcx
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aBase32
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_41B07C
loc_41B070:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_41B088
loc_41B07C:
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JNZ loc_41B070
loc_41B088:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_41B152
loc_41B0A1:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_41B0EA
loc_41B0D0:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_41B1D6
loc_41B0EA:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aBase32
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aBase32
    JZ loc_41B1C1
loc_41B127:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41AEDF
loc_41B152:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_41B197
loc_41B181:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_41B1D1
loc_41B197:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aBase32
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_41B1C1:
    MOV ebp, offset aBase32
    MOV r12d, 4C7B0Dh
    JMP loc_41B127
loc_41B1D1:
    MOV ebp, offset aBase32
loc_41B1D6:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aBase32
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41B0EA
```
Output:CALL ___printf_chk
    JMP loc_41B152
loc_41B152:
    XOR eax, eax
    RETN
```




































































s


s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
############
```assembly
loc_43F6A0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_43F6F6
loc_43F6CA:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_43F6EF:
    MOV edi, ebx
    CALL _exit
loc_43F6F6:
    MOV esi, offset aUsageSOptionUs_0
    XOR edi, edi
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aPrintGroupMemb
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aGroups
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_43F81C
loc_43F810:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_43F828
loc_43F81C:
    MOV ecx, 7
    MOV rsi, r8
    REPE 
    JNZ loc_43F810
loc_43F828:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_43F8F2
loc_43F841:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_43F88A
loc_43F870:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_43F976
loc_43F88A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aGroups
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aGroups
    JZ loc_43F961
loc_43F8C7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_43F6EF
loc_43F8F2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_43F937
loc_43F921:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_43F971
loc_43F937:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aGroups
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_43F961:
    MOV ebp, offset aGroups
    MOV r12d, 4C7B0Dh
    JMP loc_43F8C7
loc_43F971:
    MOV ebp, offset aGroups
loc_43F976:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aGroups
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_43F88A
```
Output:MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_43F93A
loc_43F910:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_43F976
loc_43F93A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aGroups
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    JMP loc_43F6EF
loc_43F961:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_43F6EF
loc_43F976:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aPleaseCheckYour
    CALL _dcgettext
    MOV ecx, offset aGroups
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    JMP loc_43F6EF
```
############
```assembly
loc_48EFE0:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV esi, offset aUsageSIgnoredC
    MOV ebx, edi
    XOR edi, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    CALL _dcgettext
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV edx, 5
    MOV esi, offset aExitWithAStatu_0
    XOR edi, edi
    CALL _dcgettext
    MOV esi, offset aS_4
    MOV rdx, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aHelpDisplayThi
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aVersionOutputV
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aNoteYourShellM
    XOR edi, edi
    CALL _dcgettext
    MOV edx, offset aTrue
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV [rsp+98h+var_98], 4E9CF3h
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV rax, rsp
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    NOP word ptr [rax+rax+00000000h]
loc_48F140:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_48F15A
loc_48F14C:
    MOV esi, offset aTrue
    MOV ecx, 5
    REPE 
    JNZ loc_48F140
loc_48F15A:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_48F24C
loc_48F173:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_48F1B3
loc_48F1A2:
    MOV edi, offset s2
    MOV ecx, 3
    MOV rsi, rax
    REPE 
    JNZ loc_48F222
loc_48F1B3:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aTrue
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    CALL ___printf_chk
    CMP rbp, offset aTrue
    JZ loc_48F2BB
loc_48F1EA:
    MOV r12d, 4E9B80h
loc_48F1F0:
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV rcx, r12
    MOV rdx, rbp
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, ebx
    CALL _exit
loc_48F21D:
    MOV ebp, offset aTrue
loc_48F222:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aTrue
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48F1B3
loc_48F24C:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_48F291
loc_48F27B:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_48F21D
loc_48F291:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aTrue
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_48F2BB:
    MOV ebp, offset aTrue
    MOV r12d, 4C7B0Dh
    JMP loc_48F1F0
```
Output:MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_48F283
loc_48F272:
    MOV edi, offset s2
    MOV ecx, 3
    MOV rsi, rax
    REPE 
    JNZ loc_48F292
loc_48F283:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aTrue
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    CALL ___printf_chk
    JMP loc_48F1B3
loc_48F2BB:
    MOV r12d, 4E9B80h
loc_48F2C1:
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    XOR edi, edi
    CALL _dcgettext
    MOV edi, 1
    MOV rsi, rax
    MOV rcx, r12
    MOV rdx, rbp
    XOR eax, eax
    CALL ___printf_chk
    MOV edi, ebx
    CALL _exit
loc_48F2EB:
    MOV ebp, offset aTrue
loc_48F2F2:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aTrue
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_48F1B3
```
############
```assembly
loc_4579B0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 28h
    MOV rbp, [rdi]
    MOV r14d, [rdi+258h]
    MOV r15d, [rdi+25Ch]
    MOV byte ptr [rsi], 0
    MOV rax, fs:28h
    MOV [rsp+58h+var_40], rax
    XOR eax, eax
    MOV rdi, rbp
    CALL sub_455A60
    LEA rsi, aCheckingForSer
    MOV r12, rax
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4329E0
    TEST r12, r12
    JS loc_457AF0
loc_457A0D:
    CMP qword ptr [rbx+5B8h], 0
    JZ loc_457A80
loc_457A17:
    MOV rax, [rbx+5B0h]
    TEST rax, rax
    JZ loc_457A80
loc_457A23:
    CMP byte ptr [rax], 33h
    JLE loc_457A80
loc_457A28:
    LEA rsi, aThereIsNegativ
    MOV rdi, rbp
    XOR eax, eax
    MOV r12d, 0Ah
    CALL sub_4329E0
    LEA rdx, [rsp+58h+var_4C]
    LEA rdi, [rsp+58h+var_48]
    MOV rsi, rbx
    CALL sub_4577F0
loc_457A51:
    MOV rcx, [rsp+58h+var_40]
    XOR rcx, fs:28h
    MOV eax, r12d
    JNZ loc_457B4B
loc_457A68:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_457A80:
    XOR ecx, ecx
    MOV edx, 0FFFFFFFFh
    MOV esi, r15d
    MOV edi, r14d
    CALL sub_4239D0
    CMP eax, 0FFFFFFFFh
    JZ loc_457B10
loc_457A97:
    XOR r12d, r12d
    TEST eax, eax
    JZ loc_457A51
loc_457A9E:
    TEST al, 8
    JNZ loc_457B30
loc_457AA6:
    TEST al, 1
    JZ loc_457A51
loc_457AAA:
    LEA rsi, aCtrlConnHasDat
    XOR eax, eax
    MOV rdi, rbp
    XOR r12d, r12d
    CALL sub_4329E0
    LEA rdx, [rsp+58h+var_4C]
    LEA rdi, [rsp+58h+var_48]
    MOV rsi, rbx
    CALL sub_4577F0
    CMP [rsp+58h+var_4C], 18Fh
    SETNLE r12b
    LEA r12d, [r12+r12+8]
    JMP loc_457A51
loc_457AF0:
    LEA rsi, aAcceptTimeoutO
    MOV rdi, rbp
    XOR eax, eax
    MOV r12d, 0Ch
    CALL sub_432CC0
    JMP loc_457A51
loc_457B10:
    LEA rsi, aErrorWhileWait
    MOV rdi, rbp
    XOR eax, eax
    MOV r12d, 0Ah
    CALL sub_432CC0
    JMP loc_457A51
loc_457B30:
    LEA rsi, aReadyToAcceptD
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_4329E0
    MOV byte ptr [r13+0], 1
    JMP loc_457A51
loc_457B4B:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "ConditionalBranching",
        "Bitwise",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 4,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x258",
        "0x25C",
        "0x5B0",
        "0x5B8",
        "0x5B8h",
        "0x33h",
        "0x18Fh",
        "0xFFFFFFFFh"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 8
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": true,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Socket Handling and Error Checking"
}
```
############
```assembly
loc_6B0AD8:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Undetermined"
}
```
############
```assembly
loc_429BD0:
    PUSH rbp
    PUSH rbx
    MOV edx, esi
    MOV rsi, rdi
    LEA rdi, aSD
    XOR eax, eax
    SUB rsp, 8
    CALL sub_41A840
    TEST rax, rax
    MOV rbp, rax
    JZ loc_429C29
loc_429BF1:
    MOVZX ebx, byte ptr [rax]
    CMP bl, 3Ah
    JZ loc_429C29
loc_429BF9:
    TEST bl, bl
    JZ loc_429C29
loc_429BFD:
    CALL ___ctype_tolower_loc
    MOV rdx, rbp
    JMP loc_429C15
loc_429C10:
    CMP bl, 3Ah
    JZ loc_429C29
loc_429C15:
    MOV rcx, [rax]
    ADD rdx, 1
    MOV ecx, [rcx+rbx*4]
    MOV [rdx-1], cl
    MOVZX ebx, byte ptr [rdx]
    TEST bl, bl
    JNZ loc_429C10
loc_429C29:
    ADD rsp, 8
    MOV rax, rbp
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Integer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Comparison",
        "Bitwise",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x3A"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Character Case Conversion"
}
```
############
```assembly
loc_4FC4C0:
    MOV edi, offset aVips
    JMP sub_41A060
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x41A060"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Function Invocation"
}
```
############
```assembly
loc_6B0B40:
    PUSH rbx
    MOV r8d, 7C3487h
    MOV rbx, rdi
    MOV ecx, 313h
    MOV edi, 8000h
    MOV edx, offset aMagickrelinqui
    MOV esi, offset aMagickwandMagi_1
    XOR eax, eax
    CALL sub_416CE0
    MOV rdi, rbx
    POP rbx
    JMP sub_41A4A0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "Bitwise",
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x7C3487",
        "0x313",
        "0x8000",
        "0xA",
        "0x1"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 5
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "File Format Validation or Magic Number Check"
}
```
############
```assembly
loc_5F0810:
    TEST rdx, rdx
    JZ locret_5F0864
loc_5F0815:
    PUSH r12
    MOV r12, rdi
    PUSH rbp
    MOV rbp, rsi
    PUSH rbx
    MOV rbx, rdx
    JMP loc_5F0840
loc_5F0828:
    MOV rdx, [rbx+28h]
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_5F0810
    MOV rbx, [rbx+30h]
    TEST rbx, rbx
    JZ loc_5F0860
loc_5F0840:
    CMP qword ptr [rbx+30h], 0
    JNZ loc_5F0828
loc_5F0847:
    MOV rax, [rbp+0]
    LEA rdx, [rax+1]
    MOV [rbp+0], rdx
    MOV [r12+rax*8], rbx
    JMP loc_5F0828
loc_5F0860:
    POP rbx
    POP rbp
    POP r12
loc_5F0864:
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ConditionalBranching",
        "DataMovement",
        "MemoryAccess",
        "Arithmetic"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x28",
        "0x30",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Linked List Processing"
}
```
############
```assembly
loc_43F9A0:
    JMP sub_414FD0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Function Redirection"
}
```
############
```assembly
loc_4A2810:
    PUSH r15
    PUSH r14
    MOV r14d, 0FFFFFFFFh
    PUSH r13
    PUSH r12
    LEA r13, [rsi+20h]
    PUSH rbp
    PUSH rbx
    MOV r12, rdi
    MOV rbx, rsi
    SUB rsp, 18h
    MOV rbp, [rsi+30h]
loc_4A2832:
    MOV esi, [rbx]
loc_4A2834:
    CMP esi, 6
    JA def_4A2839
loc_4A2839:
    JMP ds:jpt_4A2839[rsi*8]
loc_4A2840:
    CALL sub_57FA50
    MOV edx, [rax]
    MOV r8d, 0ADh
    MOV ecx, offset aCryptoBioBssCo
    MOV esi, 2
    MOV edi, 2
    CALL sub_4DAA40
    MOV rdx, [rbx+8]
    MOV r8, [rbx+10h]
    MOV ecx, offset aService
    MOV esi, offset aHostname
    MOV edi, 4
    XOR eax, eax
    CALL sub_4DB190
    MOV r8d, 0B1h
    MOV ecx, offset aCryptoBioBssCo
    MOV edx, 67h
    MOV esi, 73h
    MOV edi, 20h
    CALL sub_4DAA40
    XCHG ax, ax
loc_4A28A0:
    TEST rbp, rbp
    JZ loc_4A28E7
loc_4A28A5:
    MOV esi, [rbx]
    ADD rsp, 18h
    MOV edx, r14d
    POP rbx
    MOV rdi, r12
    MOV rax, rbp
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    JMP rax
loc_4A28C0:
    MOV edi, [r12+30h]
    CALL sub_49E770
    TEST eax, eax
    JNZ loc_4A2B7A
loc_4A28D2:
    TEST rbp, rbp
    MOV dword ptr [rbx], 5
    JNZ loc_4A2A80
loc_4A28E1:
    MOV r14d, 1
loc_4A28E7:
    ADD rsp, 18h
    MOV eax, r14d
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4A2900:
    CMP qword ptr [rbx+8], 0
    JZ loc_4A2AC0
loc_4A290B:
    TEST rbp, rbp
    MOV dword ptr [rbx], 2
    JNZ loc_4A2B0D
loc_4A291A:
    MOV eax, [rbx+4]
    CMP eax, 6
    JZ loc_4A2AB0
loc_4A2926:
    CMP eax, 100h
    JZ loc_4A2AA0
loc_4A2931:
    CMP eax, 4
    JZ loc_4A2960
loc_4A2936:
    MOV r8d, 78h
    MOV ecx, offset aCryptoBioBssCo
    MOV edx, 92h
    MOV esi, 73h
    MOV edi, 20h
    CALL sub_4DAA40
    JMP def_4A2839
loc_4A2960:
    MOV ecx, 2
loc_4A2965:
    MOV rsi, [rbx+10h]
    MOV rdi, [rbx+8]
    XOR edx, edx
    MOV r9, r13
    MOV r8d, 1
    CALL sub_49BE30
    TEST eax, eax
    JZ def_4A2839
loc_4A2985:
    MOV rax, [rbx+20h]
    TEST rax, rax
    JZ loc_4A2BF0
loc_4A2992:
    TEST rbp, rbp
    MOV [rbx+28h], rax
    MOV dword ptr [rbx], 3
    JNZ loc_4A2C45
loc_4A29A5:
    MOV rdi, [rbx+28h]
    CALL sub_49B840
    MOV rdi, [rbx+28h]
    MOV r15d, eax
    CALL sub_49B820
    MOV rdi, [rbx+28h]
    MOV r14d, eax
    CALL sub_49B800
    XOR ecx, ecx
    MOV esi, r14d
    MOV edx, r15d
    MOV edi, eax
    CALL sub_49ECE0
    CMP eax, 0FFFFFFFFh
    MOV r14d, eax
    JZ loc_4A2B17
loc_4A29E1:
    TEST rbp, rbp
    MOV [r12+30h], eax
    MOV dword ptr [rbx], 4
    JNZ loc_4A2C4F
loc_4A29F5:
    MOV esi, 0Fh
    MOV rdi, r12
    CALL sub_4A0CE0
    MOV rdi, [rbx+28h]
    MOV r14d, [rbx+18h]
    CALL sub_49B8D0
    MOV edi, [r12+30h]
    OR r14d, 4
    MOV rsi, rax
    MOV edx, r14d
    CALL sub_49ED70
    TEST eax, eax
    MOV r14d, eax
    MOV dword ptr [r12+2Ch], 0
    JNZ loc_4A28D2
loc_4A2A37:
    XOR edi, edi
    CALL sub_4A5710
    TEST eax, eax
    JNZ loc_4A2C14
loc_4A2A46:
    MOV rdi, [rbx+28h]
    CALL sub_49B7E0
    TEST rax, rax
    MOV [rbx+28h], rax
    JZ loc_4A2840
loc_4A2A5C:
    MOV edi, [r12+30h]
    CALL sub_49F460
    MOV dword ptr [rbx], 3
    CALL sub_4DAB60
    TEST rbp, rbp
    MOV esi, [rbx]
    JZ loc_4A2834
loc_4A2A7C:
    JMP loc_4A2A85
loc_4A2A80:
    MOV esi, 5
loc_4A2A85:
    MOV edx, r14d
    MOV rdi, r12
    CALL rbp
    TEST eax, eax
    MOV r14d, eax
    JNZ loc_4A2832
loc_4A2A98:
    JMP loc_4A28E7
loc_4A2AA0:
    XOR ecx, ecx
    JMP loc_4A2965
loc_4A2AB0:
    MOV ecx, 0Ah
    JMP loc_4A2965
loc_4A2AC0:
    CMP qword ptr [rbx+10h], 0
    JNZ loc_4A290B
loc_4A2ACB:
    MOV r8d, 57h
    MOV ecx, offset aCryptoBioBssCo
    MOV edx, 90h
    MOV esi, 73h
    MOV edi, 20h
    CALL sub_4DAA40
    MOV rdx, [rbx+8]
    MOV r8, [rbx+10h]
    MOV ecx, offset aService
    MOV esi, offset aHostname
    MOV edi, 4
    XOR eax, eax
    CALL sub_4DB190
    JMP def_4A2839
loc_4A2B0D:
    MOV esi, 2
    JMP loc_4A2A85
loc_4A2B17:
    CALL sub_57FA50
    MOV edx, [rax]
    MOV r8d, 8Dh
    MOV ecx, offset aCryptoBioBssCo
    MOV esi, 4
    MOV edi, 2
    CALL sub_4DAA40
    MOV rdx, [rbx+8]
    MOV r8, [rbx+10h]
    MOV ecx, offset aService
    MOV esi, offset aHostname
    MOV edi, 4
    XOR eax, eax
    CALL sub_4DB190
    MOV r8d, 91h
    MOV ecx, offset aCryptoBioBssCo
    MOV edx, 76h
    MOV esi, 73h
    MOV edi, 20h
    CALL sub_4DAA40
    JMP def_4A2839
loc_4A2B7A:
    MOV esi, 0Fh
    MOV rdi, r12
    MOV [rsp+48h+var_3C], eax
    CALL sub_4A0CE0
    MOV eax, [rsp+48h+var_3C]
    MOV r8d, 0BDh
    MOV ecx, offset aCryptoBioBssCo
    MOV esi, 2
    MOV edi, 2
    XOR r14d, r14d
    MOV edx, eax
    CALL sub_4DAA40
    MOV rdx, [rbx+8]
    MOV r8, [rbx+10h]
    MOV ecx, offset aService
    MOV esi, offset aHostname
    MOV edi, 4
    XOR eax, eax
    CALL sub_4DB190
    MOV r8d, 0C1h
    MOV ecx, offset aCryptoBioBssCo
    MOV edx, 6Eh
    MOV esi, 73h
    MOV edi, 20h
    CALL sub_4DAA40
    JMP def_4A2839
loc_4A2BF0:
    MOV r8d, 81h
    MOV ecx, offset aCryptoBioBssCo
    MOV edx, 8Eh
    MOV esi, 73h
    MOV edi, 20h
    CALL sub_4DAA40
    JMP def_4A2839
loc_4A2C14:
    MOV esi, 0Ch
    MOV rdi, r12
    CALL sub_4A0D00
    MOV dword ptr [rbx], 6
    MOV dword ptr [r12+2Ch], 2
    CALL sub_4DAB60
    JMP def_4A2839
loc_4A2C3A:
    MOV r14d, 1
    JMP def_4A2839
loc_4A2C45:
    MOV esi, 3
    JMP loc_4A2A85
loc_4A2C4F:
    MOV esi, 4
    JMP loc_4A2A85
```
Output:+28h]
    CALL sub_49B800
    MOV rdi, [rbx+28h]
    MOV r15d, [rbx+28h]
    CALL sub_49B820
    MOV rdi, [rbx+28h]
    MOV r14d, [rbx+28h]
    CALL sub_49B840
    XOR ecx, ecx
    MOV esi, r14d
    MOV edx, r15d
    MOV edi, eax
    CALL sub_49ECE0
    CMP eax, 0FFFFFFFFh
    MOV r14d, eax
    JZ loc_4A2B17
loc_4A2A21:
    TEST rbp, rbp
    MOV [r12+30h], eax
    MOV dword ptr [rbx], 4
    JNZ loc_4A2C4F
loc_4A2A31:
    MOV rdi, [rbx+28h]
    CALL sub_4A0CE0
    MOV rdi, [rbx+28h]
    MOV r14d, [rbx+28h]
    CALL sub_49B800
    MOV rdi, [rbx+28h]
    MOV r15d, [rbx+28h]
    CALL sub_49B820
    MOV rdi, [rbx+28h]
    MOV r14d, [rbx+28h]
    CALL sub_49B840
    XOR ecx, ecx
    MOV esi, r14d
    MOV edx, r15d
    MOV edi, eax
    CALL sub_49ECE0
    CMP eax, 0FFFFFFFFh
    MOV r14d, eax
    JZ loc_4A2B17
loc_4A2A61:
    TEST rbp, rbp
    MOV [r12+30h], eax
    MOV dword ptr [rbx], 4
    JNZ loc_4A2C4F
loc_4A2A71:
    MOV rdi, [rbx+28h]
############
```assembly
loc_4983C0:
    MOV edx, offset unk_66F700
    JMP sub_496060
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x66F700"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Function Call"
}
```
############
```assembly
loc_549E10:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 48h
    MOV [rsp+78h+var_68], rdi
    MOV rdi, rdx
    MOV [rsp+78h+var_60], rsi
    MOV [rsp+78h+var_70], rdx
    MOV rax, fs:28h
    MOV [rsp+78h+var_40], rax
    XOR eax, eax
    CALL sub_526B40
    MOV r15d, eax
    CALL sub_526500
    TEST rax, rax
    MOV r14, rax
    JZ loc_54A05A
loc_549E59:
    MOV esi, r15d
    MOV rdi, rax
    CALL sub_526550
    TEST eax, eax
    JZ loc_549F7C
loc_549E6C:
    TEST r15d, r15d
    JLE loc_549F8C
loc_549E75:
    XOR r12d, r12d
    JMP loc_549F37
loc_549E80:
    MOV rsi, rax
    MOV rdi, r14
    CALL sub_526770
    MOV r13, [rbp+8]
    MOV esi, 3Bh
    MOV rdi, r13
    CALL sub_4003E0
    TEST rax, rax
    JZ loc_549FB8
loc_549EA5:
    MOV rcx, rax
    ADD rax, 1
    MOV rdi, [rbx+8]
    SUB rcx, r13
    MOV [rsp+78h+var_50], rax
    MOV rdx, [rsp+78h+var_60]
    MOV rax, [rbp+10h]
    MOV rsi, [rsp+78h+var_68]
    MOV r13, rcx
    LEA rcx, [rsp+78h+var_58]
    XOR r8d, r8d
    MOV [rsp+78h+var_48], rax
    CALL sub_544A50
    TEST rax, rax
    JZ loc_549F7C
loc_549EE4:
    MOV rdi, [rbp+8]
    MOVSXD rsi, r13d
    MOV ecx, 8Ah
    MOV edx, offset aCryptoX509v3V3_7
    CALL sub_4FA3F0
    TEST rax, rax
    MOV rbp, rax
    JZ loc_549FF0
loc_549F06:
    XOR esi, esi
    MOV rdi, rax
    CALL sub_4FC6A0
    TEST rax, rax
    MOV [rbx], rax
    JZ loc_54A000
loc_549F1C:
    MOV edx, 97h
    MOV esi, offset aCryptoX509v3V3_7
    MOV rdi, rbp
    ADD r12d, 1
    CALL sub_4F43E0
    CMP r15d, r12d
    JZ loc_549F8C
loc_549F37:
    MOV rdi, [rsp+78h+var_70]
    MOV esi, r12d
    CALL sub_526B50
    MOV edi, offset unk_6A8D60
    MOV rbp, rax
    CALL sub_497260
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_549E80
loc_549F5D:
    MOV r8d, 7Bh
loc_549F63:
    MOV ecx, offset aCryptoX509v3V3_7
    MOV edx, 41h
    MOV esi, 8Bh
    MOV edi, 22h
    CALL sub_4DAA40
loc_549F7C:
    MOV rdi, r14
    MOV esi, offset sub_54A090
    XOR r14d, r14d
    CALL sub_526AE0
loc_549F8C:
    MOV rdx, [rsp+78h+var_40]
    XOR rdx, fs:28h
    MOV rax, r14
    JNZ loc_54A07E
loc_549FA3:
    ADD rsp, 48h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_549FB8:
    MOV r8d, 82h
    MOV ecx, offset aCryptoX509v3V3_7
    MOV edx, 8Fh
    MOV esi, 8Bh
    MOV edi, 22h
    CALL sub_4DAA40
    MOV rdi, r14
    MOV esi, offset sub_54A090
    XOR r14d, r14d
    CALL sub_526AE0
    JMP loc_549F8C
loc_549FF0:
    MOV r8d, 8Ch
    JMP loc_549F63
loc_54A000:
    MOV r8d, 92h
    MOV ecx, offset aCryptoX509v3V3_7
    MOV edx, 77h
    MOV esi, 8Bh
    MOV edi, 22h
    CALL sub_4DAA40
    XOR eax, eax
    MOV rdx, rbp
    MOV esi, 66004Ch
    MOV edi, 2
    CALL sub_4DB190
    MOV edx, 94h
    MOV esi, offset aCryptoX509v3V3_7
    MOV rdi, rbp
    CALL sub_4F43E0
    MOV rdi, r14
    MOV esi, offset sub_54A090
    XOR r14d, r14d
    CALL sub_526AE0
    JMP loc_549F8C
loc_54A05A:
    MOV r8d, 72h
    MOV ecx, offset aCryptoX509v3V3_7
    MOV edx, 41h
    MOV esi, 8Bh
    MOV edi, 22h
    CALL sub_4DAA40
    JMP loc_549F8C
loc_54A07E:
    CALL sub_5E2570
```
Output:09v3V3_7
    MOV edx, 9Fh
    MOV esi, 8Bh
    MOV edi, 22h
    CALL sub_4DAA40
    MOV rdi, r14
    MOV esi, offset sub_54A090
    XOR r14d, r14d
    CALL sub_526AE0
    JMP loc_549F8C
loc_54A05A:
    MOV rdi, r14
    MOV esi, offset sub_54A090
    XOR r14d, r14d
    CALL sub_526AE0
    ADD rsp, 48h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
```

Assistant, please provide your analysis and extracted features for this assembly routine.
############
```assembly
loc_4073D0:

```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Undetermined"
}
```
############
```assembly
loc_422F90:
    PUSH rbx
    SUB rsp, 20h
    MOV [rsp+28h+var_1C], r8d
    MOV [rsp+28h+var_18], rcx
    MOV rax, fs:28h
    MOV [rsp+28h+var_10], rax
    XOR eax, eax
    CALL sub_422E20
    LEA rsi, [rsp+28h+var_1C]
    LEA rdi, [rsp+28h+var_18]
    MOV rbx, rax
    CALL sub_4216D0
    LEA rsi, [rsp+28h+var_1C]
    LEA rdi, [rsp+28h+var_18]
    MOV [rbx+18h], rax
    CALL sub_4216D0
    LEA rsi, [rsp+28h+var_1C]
    LEA rdi, [rsp+28h+var_18]
    MOV [rbx+20h], rax
    CALL sub_4216D0
    LEA rsi, [rsp+28h+var_1C]
    LEA rdi, [rsp+28h+var_18]
    MOV [rbx+28h], rax
    CALL sub_4216D0
    MOV rdi, rbx
    MOV [rbx+30h], rax
    CALL sub_422A40
    TEST eax, eax
    JZ loc_423030
loc_42300F:
    MOV rcx, [rsp+28h+var_10]
    XOR rcx, fs:28h
    MOV rax, rbx
    JNZ loc_423044
loc_423022:
    ADD rsp, 20h
    POP rbx
    RETN 
loc_423030:
    MOV rdi, rbx
    CALL sub_422CC0
    MOV rdi, rbx
    XOR ebx, ebx
    CALL sub_40B5E0
    JMP loc_42300F
loc_423044:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "ConditionalBranching",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 4,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x20",
        "0x10",
        "0x30"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Hash Function"
}
```
############
```assembly
loc_420900:
    PUSH rbp
    PUSH rbx
    MOV rax, rdi
    MOV rdi, rsi
    SUB rsp, 18h
    MOV rdx, fs:28h
    MOV [rsp+28h+var_20], rdx
    XOR edx, edx
    LEA rsi, [rsp+28h+var_24]
    CALL qword ptr [rax+18h]
    MOV esi, [rsp+28h+var_24]
    MOV rbx, rax
    MOV rdi, rax
    CALL sub_4207C0
    MOV rdi, rbx
    MOV rbp, rax
    CALL sub_40B5E0
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_420958
loc_42094E:
    ADD rsp, 18h
    MOV rax, rbp
    POP rbx
    POP rbp
    RETN 
loc_420958:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "MemoryAccess",
        "ConditionalBranching"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x18",
        "0x28"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Error Handling Function"
}
```
############
```assembly
loc_4019A0:
    JMP cs:off_642128
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x642128"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Jump"
}
```
############
```assembly
loc_6BC658:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference"
}
```
############
```assembly
loc_438130:
    PUSH rbx
    SUB rsp, 130h
    MOV rax, fs:28h
    MOV [rsp+138h+var_10], rax
    XOR eax, eax
    TEST byte ptr [rdi+1Eh], 80h
    JZ loc_438178
loc_438151:
    MOV rax, [rsp+138h+var_10]
    XOR rax, fs:28h
    JNZ loc_438241
loc_438168:
    ADD rsp, 130h
    POP rbx
    RETN 
loc_438178:
    MOV rbx, rdi
    MOV rsi, rsp
    MOV edi, [rdi+18h]
    CALL cs:off_6BB820
    TEST eax, eax
    JNZ loc_4381D0
loc_43818B:
    MOV rax, [rsp+138h+var_128]
    TEST rax, rax
    JZ loc_4381B8
loc_438195:
    CMP rax, 1
    JBE loc_4381F0
loc_43819B:
    MOV rdx, [rbx+38h]
    MOV esi, offset aMultipleLinksT
    MOV edi, 1Ch
    XOR eax, eax
    CALL sub_435180
    JMP loc_438151
loc_4381B8:
    MOV rdx, [rbx+38h]
    MOV esi, offset aFileUnlinkedWh
    MOV edi, 1Ch
    CALL sub_435180
    JMP loc_438151
loc_4381D0:
    MOV rdx, [rbx+38h]
    MOV esi, offset aCannotFstatDbF
    MOV edi, 1Ch
    XOR eax, eax
    CALL sub_435180
    JMP loc_438151
loc_4381F0:
    CMP qword ptr [rbx+10h], 0
    JZ loc_438151
loc_4381FB:
    MOV rdi, [rbx+38h]
    LEA rsi, [rsp+138h+stat_buf]
    CALL cs:off_6BB808
    TEST eax, eax
    JNZ loc_438227
loc_438211:
    MOV rax, [rbx+10h]
    MOV rax, [rax+8]
    CMP [rsp+138h+stat_buf.st_ino], rax
    JZ loc_438151
loc_438227:
    MOV rdx, [rbx+38h]
    MOV esi, offset aFileRenamedWhi
    MOV edi, 1Ch
    XOR eax, eax
    CALL sub_435180
    JMP loc_438151
loc_438241:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "ConditionalBranching",
        "SubroutineCall",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 5,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x80",
        "0x1",
        "0x1C",
        "0x0",
        "0x8",
        "0x10",
        "0x28"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 7
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "File Handling and Validation"
}
```
############
```assembly
loc_464930:
    PUSH r15
    PUSH r14
    MOV r15, r9
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, r8
    SUB rsp, 68h
    MOV r8d, [rdi+30h]
    MOV r12, [rdi]
    MOV rax, fs:28h
    MOV [rsp+98h+var_40], rax
    XOR eax, eax
    MOV r13, [rsp+98h+arg_0]
    TEST r8d, r8d
    JZ loc_4649C0
loc_464968:
    TEST rbp, rbp
    JZ loc_464978
loc_46496D:
    MOV rsi, rbp
    MOV rdi, r12
    CALL sub_427960
loc_464978:
    TEST r15, r15
    JZ loc_464988
loc_46497D:
    MOV rsi, r15
    MOV rdi, r12
    CALL sub_427960
loc_464988:
    TEST r13, r13
    JZ loc_464998
loc_46498D:
    MOV rsi, r13
    MOV rdi, r12
    CALL sub_427960
loc_464998:
    MOV rax, [rsp+98h+var_40]
    XOR rax, fs:28h
    JNZ loc_464C39
loc_4649AC:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4649C0:
    MOV r11, rdx
    LEA rdx, [rsp+98h+var_78]
    MOV rbx, rdi
    MOV r14, rcx
    TEST rbp, rbp
    MOV ecx, 7
    MOV rdi, rdx
    MOV r10d, esi
    REP 
    MOV [rsp+98h+var_78], rbx
    JZ loc_464A24
loc_4649E6:
    CMP byte ptr [rbp+0], 1Bh
    JZ loc_464A20
loc_4649EC:
    MOV dword ptr [rsp+98h+var_88], esi
    MOV rdi, rdx
    MOV rsi, rbp
    MOV [rsp+98h+var_80], r11
    MOV [rsp+98h+var_90], rdx
    CALL sub_43C830
    TEST eax, eax
    MOV rdx, [rsp+98h+var_90]
    MOV r10d, dword ptr [rsp+98h+var_88]
    MOV r11, [rsp+98h+var_80]
    JNZ loc_46496D
loc_464A1C:
    JMP loc_464A24
loc_464A20:
    MOV byte ptr [rbp+0], 61h
loc_464A24:
    TEST r15, r15
    JZ loc_464A74
loc_464A29:
    CMP byte ptr [r15], 1Bh
    JZ loc_464A70
loc_464A2F:
    MOV rdi, rdx
    MOV rsi, r15
    MOV [rsp+98h+var_80], r11
    MOV dword ptr [rsp+98h+var_88], r10d
    MOV [rsp+98h+var_90], rdx
    CALL sub_43C830
    TEST eax, eax
    MOV rdx, [rsp+98h+var_90]
    MOV r10d, dword ptr [rsp+98h+var_88]
    MOV r11, [rsp+98h+var_80]
    JZ loc_464A74
loc_464A5C:
    TEST rbp, rbp
    JNZ loc_46496D
loc_464A65:
    JMP loc_46497D
loc_464A70:
    MOV byte ptr [r15], 61h
loc_464A74:
    TEST r13, r13
    JZ loc_464AB0
loc_464A79:
    CMP byte ptr [r13+0], 1Bh
    JZ loc_464BE8
loc_464A84:
    MOV rsi, r13
    MOV rdi, rdx
    MOV [rsp+98h+var_88], r11
    MOV dword ptr [rsp+98h+var_90], r10d
    CALL sub_43C830
    TEST eax, eax
    MOV r10d, dword ptr [rsp+98h+var_90]
    MOV r11, [rsp+98h+var_88]
    JNZ loc_464968
loc_464AAB:
    NOP dword ptr [rax+rax+00h]
loc_464AB0:
    TEST r14, r14
    JZ loc_464AED
loc_464AB5:
    XOR edx, edx
    CMP byte ptr [r14], 61h
    JZ loc_464C0A
loc_464AC1:
    XOR r8d, r8d
    XOR ecx, ecx
    MOV esi, r10d
    MOV rdi, rbx
    MOV [rsp+98h+var_88], r11
    MOV dword ptr [rsp+98h+var_90], r10d
    CALL sub_43AEE0
    TEST eax, eax
    JNZ loc_464968
loc_464AE3:
    MOV r10d, dword ptr [rsp+98h+var_90]
    MOV r11, [rsp+98h+var_88]
loc_464AED:
    MOV rax, [rbx+10h]
    TEST rax, rax
    JZ loc_464C13
loc_464AFA:
    MOV [rsp+98h+var_90], rax
loc_464AFF:
    MOV eax, [rbx+28h]
    CMP eax, 3
    JLE loc_464BF8
loc_464B0B:
    MOV r14d, [rbx+2Ch]
    SUB eax, 4
    MOV [rbx+28h], eax
    LEA edx, [r14+4]
    MOV [rbx+2Ch], edx
loc_464B1C:
    MOV rdi, rbx
    MOV edx, r14d
    MOV rsi, rbp
    MOV [rsp+98h+var_80], r11
    MOV dword ptr [rsp+98h+var_88], r10d
    CALL sub_4645F0
    LEA edx, [r14+1]
    MOV rdi, rbx
    MOV rsi, r15
    CALL sub_4645F0
    LEA edx, [r14+2]
    MOV rdi, rbx
    MOV rsi, r13
    CALL sub_4645F0
    MOV rbx, [rsp+98h+var_90]
    TEST rbx, rbx
    JZ loc_464968
loc_464B60:
    MOV r11, [rsp+98h+var_80]
    LEA r8d, [r14+3]
    XOR edx, edx
    MOV esi, 45h
    MOV rdi, rbx
    MOV ecx, r8d
    MOVSX eax, byte ptr [r11]
    SUB ecx, eax
    CALL sub_42DB40
    MOV r11, [rsp+98h+var_80]
    MOV esi, eax
    MOV ecx, 0FFFFFFFCh
    MOV rdi, rbx
    MOV rdx, r11
    CALL sub_424050
    MOVSXD rax, dword ptr [rbx+0B8h]
    MOV r10d, dword ptr [rsp+98h+var_88]
    TEST eax, eax
    JLE loc_464BC1
loc_464BA8:
    MOV r11, [rsp+98h+var_80]
    LEA rax, [rax+rax*2]
    SHL rax, 3
    ADD rax, [rbx+68h]
    MOVZX edx, byte ptr [r11]
    MOV [rax-16h], dx
loc_464BC1:
    MOV rdi, [rsp+98h+var_90]
    XOR edx, edx
    CMP r10d, 18h
    SETZ dl
    MOV esi, 98h
    XOR r8d, r8d
    XOR ecx, ecx
    CALL sub_42DB40
    JMP loc_464968
loc_464BE8:
    MOV byte ptr [r13+0], 61h
    JMP loc_464AB0
loc_464BF8:
    MOV eax, [rbx+38h]
    LEA edx, [rax+4]
    LEA r14d, [rax+1]
    MOV [rbx+38h], edx
    JMP loc_464B1C
loc_464C0A:
    MOV rdx, [r14+8]
    JMP loc_464AC1
loc_464C13:
    MOV rdi, rbx
    MOV [rsp+98h+var_80], r11
    MOV dword ptr [rsp+98h+var_88], r10d
    CALL sub_42DBA0
    MOV r11, [rsp+98h+var_80]
    MOV [rsp+98h+var_90], rax
    MOV r10d, dword ptr [rsp+98h+var_88]
    JMP loc_464AFF
loc_464C39:
    CALL ___stack_chk_fail
```
Output:r14], 1Bh
    JZ loc_464AED
loc_464ABA:
    MOV rsi, r14
    MOV rdi, rdx
    MOV [rsp+98h+var_80], r11
    MOV dword ptr [rsp+98h+var_88], r10d
    CALL sub_43C830
    TEST eax, eax
    MOV rdx, [rsp+98h+var_80]
    MOV r10d, dword ptr [rsp+98h+var_88]
    JZ loc_464AED
loc_464AE1:
    TEST rbp, rbp
    JNZ loc_464968
loc_464AE8:
    JMP loc_464978
loc_464AED:
    ADD rsp, 68h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_464C39:
    JMP loc_464AED
```
############
```assembly
loc_417800:
    TEST rsi, rsi
    PUSH rbx
    MOV rbx, rdi
    JZ loc_417828
loc_417809:
    CALL sub_415280
    TEST eax, eax
    JS loc_417830
loc_417812:
    CDQE 
    SHL rax, 5
loc_417818:
    MOV rdx, [rbx+20h]
    POP rbx
    MOV rax, [rdx+rax+8]
    RETN 
loc_417828:
    XOR eax, eax
    JMP loc_417818
loc_417830:
    XOR eax, eax
    POP rbx
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Integer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Comparison",
        "ConditionalBranching",
        "SubroutineCall",
        "Arithmetic",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x20"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Lookup Table Access"
}
```
############
```assembly
loc_475D20:
    PUSH r13
    PUSH r12
    MOV r13, rsi
    PUSH rbp
    PUSH rbx
    MOV r12, rdi
    SUB rsp, 8
    MOV rbp, cs:qword_7431F0
    CMP byte ptr [rbp+5Eh], 0
    JZ loc_475D6A
loc_475D3D:
    MOV rax, [rbp+68h]
    MOV rdi, [rax+8]
    LEA rbx, [rax+8]
    TEST rdi, rdi
    JZ loc_475D97
loc_475D4E:
    XCHG ax, ax
loc_475D50:
    ADD rbx, 8
    CALL _free
    MOV rdi, [rbx]
    TEST rdi, rdi
    JNZ loc_475D50
loc_475D61:
    MOV rdi, [rbp+68h]
loc_475D65:
    CALL _free
loc_475D6A:
    MOV rax, [r12]
    MOV [r13+0], rax
    MOV rax, [r12+8]
    MOV [rbp+68h], rax
    MOV eax, [r12+10h]
    MOV [rbp+60h], eax
    MOVZX eax, byte ptr [r12+14h]
    MOV [rbp+5Eh], al
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_475D97:
    MOV rdi, rax
    JMP loc_475D65
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "MemoryAccess",
        "ConditionalBranching",
        "SubroutineCall",
        "DataMovement"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x14",
        "0x8",
        "0x0"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": true,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Dynamic Memory Deallocation"
}
```
############
```assembly
loc_49ADE7:
    MOV edx, [rdi+68h]
    MOV eax, [rdi+70h]
    NOP dword ptr [rax]
loc_49ADF0:
    MOV rcx, [rdi+48h]
    SHR eax, 18h
    MOVSXD rdx, edx
    MOV [rcx+rdx], al
    MOV eax, [rdi+68h]
    MOV esi, [rdi+74h]
    LEA edx, [rax+1]
    MOV eax, [rdi+70h]
    LEA ecx, [rsi-8]
    MOV [rdi+68h], edx
    SHL eax, 8
    TEST ecx, ecx
    MOV [rdi+74h], ecx
    MOV [rdi+70h], eax
    JG loc_49ADF0
loc_49AE1C:
    REP 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Bitwise",
        "Comparison",
        "Loop"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x68",
        "0x70",
        "0x48",
        "0x74",
        "0x8",
        "0x1",
        "0x8"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 7
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": true
    }
  },
  "inferred_algorithm": "Memory Manipulation Loop"
}
```
############
```assembly
loc_482E10:
    MOV rdi, [rsi+8]
    PUSH rbx
    TEST rdi, rdi
    JZ loc_482E3A
loc_482E1A:
    LEA rbx, [rsi+8]
    XCHG ax, ax
loc_482E20:
    ADD rbx, 8
    CALL sub_497860
    MOV rdi, [rbx]
    TEST rdi, rdi
    JNZ loc_482E20
loc_482E31:
    CALL sub_4977B0
    XOR eax, eax
    POP rbx
    RETN 
loc_482E3A:
    MOV edi, 1
    JMP loc_482E31
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Comparison",
        "ConditionalBranching",
        "SubroutineCall"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x1"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "List Traversal and Processing"
}
```
############
```assembly
loc_736340:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Undefined/External Reference"
}
```
############
```assembly
loc_412060:
    PUSH r12
    PUSH rbp
    MOV edx, 5
    PUSH rbx
    MOV ebx, edi
    ADD rsp, 0FFFFFFFFFFFFFF80h
    MOV rbp, cs:qword_7355D8
    MOV rax, fs:28h
    MOV [rsp+98h+var_20], rax
    XOR eax, eax
    TEST edi, edi
    JZ loc_4120B6
loc_41208A:
    MOV esi, offset aTrySHelpForMor
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:stderr
    MOV rdx, rax
    MOV rcx, rbp
    MOV esi, 1
    XOR eax, eax
    CALL ___fprintf_chk
loc_4120AF:
    MOV edi, ebx
    CALL _exit
loc_4120B6:
    XOR edi, edi
    MOV esi, offset aUsageSOptionFi_1
    CALL _dcgettext
    MOV rdx, rbp
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aShowInformatio
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aMandatoryArgum
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aAAllIncludePse
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aIInodesListIno
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aOutputFieldLis
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTotalElideAllE
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aTTypeTypeLimit
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aHelpDisplayThi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    XOR edi, edi
    MOV esi, offset aVersionOutputV
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV edx, 5
    MOV esi, offset aDisplayValuesA
    XOR edi, edi
    CALL _dcgettext
    MOV edx, offset aDf
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aTheSizeArgumen
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV rbp, cs:stdout
    MOV edx, 5
    MOV esi, offset aFieldListIsACo
    XOR edi, edi
    CALL _dcgettext
    MOV rsi, rbp
    MOV rdi, rax
    CALL _fputs_unlocked
    MOV [rsp+98h+var_98], (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_90], offset aTestInvocation
    MOV edi, (offset asc_4E9CF2+1)
    MOV [rsp+98h+var_88], offset domainname
    MOV [rsp+98h+var_80], offset aMultiCallInvoc
    MOV rax, rsp
    MOV [rsp+98h+var_78], offset aSha224sum
    MOV [rsp+98h+var_70], offset aSha2Utilities
    MOV r8d, offset aDf_0
    MOV [rsp+98h+var_68], offset aSha256sum
    MOV [rsp+98h+var_60], offset aSha2Utilities
    MOV [rsp+98h+var_58], offset aSha384sum
    MOV [rsp+98h+var_50], offset aSha2Utilities
    MOV [rsp+98h+var_48], offset aSha512sum
    MOV [rsp+98h+var_40], offset aSha2Utilities
    MOV [rsp+98h+var_38], 0
    MOV [rsp+98h+var_30], 0
    JMP loc_41231C
loc_412310:
    ADD rax, 10h
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_412328
loc_41231C:
    MOV ecx, 3
    MOV rsi, r8
    REPE 
    JNZ loc_412310
loc_412328:
    MOV rbp, [rax+8]
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aSOnlineHelpS
    TEST rbp, rbp
    JZ loc_4123F2
loc_412341:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_41238A
loc_412370:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_412476
loc_41238A:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    CALL _dcgettext
    MOV ecx, offset aDf_0
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    XOR eax, eax
    MOV edi, 1
    MOV r12d, (offset a8+6)
    CALL ___printf_chk
    CMP rbp, offset aDf_0
    JZ loc_412461
loc_4123C7:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aOrAvailableLoc
    CALL _dcgettext
    MOV rcx, r12
    MOV rsi, rax
    MOV rdx, rbp
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_4120AF
loc_4123F2:
    CALL _dcgettext
    MOV ecx, offset aHttpWwwGnuOrgS
    MOV rsi, rax
    MOV edx, offset unk_4C7B3F
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    XOR esi, esi
    MOV edi, 5
    CALL _setlocale
    TEST rax, rax
    JZ loc_412437
loc_412421:
    MOV edx, 3
    MOV esi, offset s2
    MOV rdi, rax
    CALL _strncmp
    TEST eax, eax
    JNZ loc_412471
loc_412437:
    MOV edx, 5
    MOV esi, offset aFullDocumentat
    XOR edi, edi
    CALL _dcgettext
    MOV ecx, offset aDf_0
    MOV rsi, rax
    MOV edx, offset aHttpWwwGnuOrgS
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
loc_412461:
    MOV ebp, offset aDf_0
    MOV r12d, 4C7B0Dh
    JMP loc_4123C7
loc_412471:
    MOV ebp, offset aDf_0
loc_412476:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aReportSTransla
    CALL _dcgettext
    MOV edx, offset aDf_0
    MOV rsi, rax
    MOV edi, 1
    XOR eax, eax
    CALL ___printf_chk
    JMP loc_41238A
```
Output:CMP rdi, 0
    JNE loc_412310
    SUB rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JE loc_41231C
    ADD rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JNE loc_412310
    SUB rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JE loc_41231C
    ADD rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JNE loc_412310
    SUB rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JE loc_41231C
    ADD rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JNE loc_412310
    SUB rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JE loc_41231C
    ADD rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JNE loc_412310
    SUB rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JE loc_41231C
    ADD rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JNE loc_412310
    SUB rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JE loc_41231C
    ADD rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JNE loc_412310
    SUB rax, 10h
    MOV rdi, [rax]
    CMP rdi, 0
    JE loc_41231C
    ADD rax,
############
```assembly
loc_4456F0:
    PUSH r12
    PUSH rbp
    MOV ebp, edi
    PUSH rbx
    MOV rdi, [rsi]
    MOV rbx, rsi
    CALL sub_4B2BA0
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4984A0
    CALL sub_4C78D0
    MOV r8, cs:off_720148
    PUSH 0
    XOR eax, eax
    PUSH offset aMichaelStone
    MOV r9d, offset sub_4453F0
    MOV ecx, offset unk_4C7B3F
    MOV edx, offset aLink
    MOV rsi, rbx
    MOV edi, ebp
    CALL sub_4A9D20
    XOR ecx, ecx
    XOR r8d, r8d
    MOV edx, (offset a8+6)
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    POP rdx
    POP rcx
    JNZ loc_4457DD
loc_445778:
    MOVSXD rax, cs:optind
    LEA edx, [rax+1]
    CMP ebp, edx
    JLE loc_44584F
loc_44578A:
    LEA edx, [rax+2]
    CMP ebp, edx
    JG loc_4457AE
loc_445791:
    ADD rax, 1
    MOV rsi, [rbx+rax*8]
    MOV rdi, [rbx+rax*8-8]
    CALL _link
    TEST eax, eax
    JNZ loc_4457E7
loc_4457A7:
    POP rbx
    XOR eax, eax
    POP rbp
    POP r12
    RETN 
loc_4457AE:
    MOV rdi, [rbx+rax*8+10h]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
loc_4457C5:
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
loc_4457DD:
    MOV edi, 1
    CALL sub_4453F0
loc_4457E7:
    MOVSXD rax, cs:optind
    MOV esi, 4
    MOV edi, 1
    MOV rdx, [rbx+rax*8]
    CALL sub_4B5040
    MOV r12, rax
    MOVSXD rax, cs:optind
    MOV esi, 4
    XOR edi, edi
    MOV rdx, [rbx+rax*8+8]
    CALL sub_4B5040
    MOV edx, 5
    MOV esi, offset aCannotCreateLi
    XOR edi, edi
    MOV rbp, rax
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV r8, r12
    MOV rcx, rbp
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_44584F:
    CMP ebp, eax
    JG loc_445877
loc_445853:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aMissingOperand
    CALL _dcgettext
    XOR esi, esi
    MOV rdx, rax
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_4457DD
loc_445877:
    MOV rdi, [rbx+rax*8]
    CALL sub_4B5440
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aMissingOperand_0
    JMP loc_4457C5
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "SubroutineCall",
        "ConditionalBranching",
        "DataMovement",
        "MemoryAccess",
        "ErrorHandling"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 10,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xFFFFFFFF",
        "0x1",
        "0x4",
        "0x2"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 4
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": true,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Command Line Argument Processing and Error Handling"
}
```
############
```assembly
loc_736370:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference"
}
```
############
```assembly
loc_4191C0:

loc_41AD50:
    MOV rcx, rdx
    MOV rdx, rsi
    MOV rsi, cs:fputc_ptr
    JMP sub_4191C0
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 3,
      "input_parameter_types": [
        "Pointer",
        "Pointer",
        "Character"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": true,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Character Output Loop"
}
```
############
```assembly
loc_6B0808:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference"
}
```
############
```assembly
loc_4022E0:
    JMP cs:off_6B00C8
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x6B00C8"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Jump to External Code"
}
```
############
```assembly
loc_58AE40:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    SUB rsp, 48h
    MOV rax, [rdi]
    MOVSD xmm5, qword ptr [rdi+8]
    MOVSD [rsp+78h+var_70], xmm5
    MOV rax, [rax+28h]
    MOV r14, rax
    MOV [rsp+78h+var_58], rax
    CALL _omp_get_num_threads
    MOVSXD rbx, eax
    CALL _omp_get_thread_num
    CDQE 
    LEA rdx, ds:0[rax*4]
    LEA rcx, [rdx+4]
    CMP rcx, r14
    CMOVG rcx, r14
    MOV [rsp+78h+var_78], rcx
    CMP r14, rdx
    JLE loc_58B1A9
loc_58AE9A:
    LEA rax, [rbx+rax+1]
    MOVSD xmm5, [rsp+78h+var_70]
    LEA rsi, ds:0[rbx*4]
    SHL rax, 2
    NEG rbx
    MOVSD xmm4, cs:qword_6D2460
    MOV [rsp+78h+var_68], rax
    LEA rax, ds:0FFFFFFFFFFFFFFFCh[rbx*4]
    MOV [rsp+78h+var_48], rax
    MOV rax, 0FFFFFFFFFFFFFFFCh
    SUB rax, rsi
    MOV [rsp+78h+var_50], rsi
    MOV [rsp+78h+var_40], rax
    MOVSD [rsp+78h+var_60], xmm5
    NOP dword ptr [rax+rax+00000000h]
loc_58AEF0:
    MOV r12, [rsp+78h+var_40]
    ADD r12, [rsp+78h+var_68]
    JMP loc_58AF0E
loc_58AF00:
    ADD r12, 1
    CMP r12, [rsp+78h+var_78]
    JGE loc_58B170
loc_58AF0E:
    MOV eax, [rbp+38h]
    TEST eax, eax
    JZ loc_58AF00
loc_58AF15:
    MOV rax, [rbp+0]
    XOR esi, esi
    MOV r8d, 1
    MOV rdx, r12
    MOV rdi, [rbp+18h]
    MOVSD [rsp+78h+var_70], xmm4
    MOV r9, [rbp+10h]
    MOV rcx, [rax+20h]
    CALL sub_4075D0
    MOV rdi, [rbp+20h]
    XOR esi, esi
    MOV rdx, r12
    MOV rbx, rax
    MOV rax, [rbp+28h]
    MOV r8d, 1
    MOV r9, [rbp+10h]
    MOV rcx, [rax+20h]
    CALL sub_407690
    TEST rbx, rbx
    MOVSD xmm4, [rsp+78h+var_70]
    JZ loc_58B158
loc_58AF6D:
    TEST rax, rax
    JZ loc_58B158
loc_58AF76:
    MOV rdx, [rbp+0]
    MOV r15, [rdx+20h]
    TEST r15, r15
    JLE loc_58B0DA
loc_58AF87:
    MOV r8, [rbp+28h]
    MOV rcx, [rdx+360h]
    MOV r13, [rdx+340h]
    MOVSD xmm5, [rsp+78h+var_60]
    MOV rdi, [r8+360h]
    MOV r11, [r8+340h]
    MOV r10, [rcx+18h]
    SHL r13, 2
    MOV rdx, [rdi+28h]
    MOV rsi, [rdi+8]
    SHL r11, 2
    MOV r9, [rdi+18h]
    LEA r14, ds:0[r10*4]
    MOV rdi, [rcx+28h]
    LEA r10, ds:0[rdx*4]
    SHL rsi, 2
    SHL r9, 2
    ADD rax, rsi
    LEA r8, ds:0[rdi*4]
    MOV rdi, [rcx+8]
    XOR ecx, ecx
    SHL rdi, 2
    LEA rdx, [rbx+rdi]
    NOP word ptr [rax+rax+00h]
loc_58B000:
    MOV rbx, rdx
    MOVSS xmm8, dword ptr [rdx]
    PXOR xmm6, xmm6
    PXOR xmm2, xmm2
    SUB rbx, rdi
    MOVSS xmm0, dword ptr [rbx+r14]
    CVTSS2SD xmm6, xmm8
    MOVSS xmm7, dword ptr [rbx+r8]
    MOVAPS xmm1, xmm0
    MINSS xmm1, xmm8
    MOVAPS xmm3, xmm7
    CVTSS2SD xmm2, xmm7
    MINSS xmm3, xmm1
    CVTSS2SD xmm1, xmm3
    MULSD xmm1, xmm5
    PXOR xmm3, xmm3
    CVTSS2SD xmm3, xmm0
    MAXSS xmm0, xmm8
    UCOMISS xmm7, xmm0
    ADDSD xmm6, xmm1
    ADDSD xmm3, xmm1
    ADDSD xmm1, xmm2
    MULSD xmm6, xmm4
    MULSD xmm3, xmm4
    MULSD xmm1, xmm4
    JA loc_58B071
loc_58B069:
    PXOR xmm2, xmm2
    CVTSS2SD xmm2, xmm0
loc_58B071:
    MULSD xmm2, xmm5
    PXOR xmm7, xmm7
    MOV rbx, rax
    ADD rcx, 1
    SUB rbx, rsi
    ADD rdx, r13
    ADDSD xmm6, xmm2
    MOVAPD xmm0, xmm2
    ADDSD xmm3, xmm0
    ADDSD xmm0, xmm1
    MOVAPD xmm2, xmm6
    MULSD xmm2, xmm4
    MULSD xmm0, xmm4
    CVTSD2SS xmm7, xmm2
    MOVAPD xmm2, xmm3
    MOVSS dword ptr [rax], xmm7
    PXOR xmm7, xmm7
    MULSD xmm2, xmm4
    ADD rax, r11
    CVTSD2SS xmm7, xmm2
    MOVSS dword ptr [rbx+r9], xmm7
    PXOR xmm7, xmm7
    CVTSD2SS xmm7, xmm0
    MOVSS dword ptr [rbx+r10], xmm7
    CMP rcx, r15
    JNZ loc_58B000
loc_58B0DA:
    MOV rsi, [rbp+10h]
    MOVSD [rsp+78h+var_70], xmm4
    MOV rdi, [rbp+20h]
    CALL sub_407750
    MOVSD xmm4, [rsp+78h+var_70]
    TEST eax, eax
    JNZ loc_58B0FE
loc_58B0F7:
    MOV dword ptr [rbp+38h], 0
loc_58B0FE:
    MOV rax, [rbp+0]
    CMP qword ptr [rax+3C8h], 0
    JZ loc_58AF00
loc_58B110:
    MOV edi, offset unk_A376F8
    MOVSD [rsp+78h+var_70], xmm4
    CALL _GOMP_critical_name_start
    MOV rdi, [rbp+0]
    MOV esi, offset aBlueshiftImage
    MOV rdx, [rbp+30h]
    MOV rcx, [rdi+28h]
    LEA rax, [rdx+1]
    MOV [rbp+30h], rax
    CALL sub_58AA60
    MOV edi, offset unk_A376F8
    MOV ebx, eax
    CALL _GOMP_critical_name_end
    TEST ebx, ebx
    MOVSD xmm4, [rsp+78h+var_70]
    JNZ loc_58AF00
loc_58B158:
    MOV dword ptr [rbp+38h], 0
    ADD r12, 1
    CMP r12, [rsp+78h+var_78]
    JL loc_58AF0E
loc_58B16D:
    NOP dword ptr [rax]
loc_58B170:
    MOV rax, [rsp+78h+var_68]
    MOV rcx, [rsp+78h+var_58]
    MOV rsi, [rsp+78h+var_50]
    CMP rax, rcx
    MOV rdi, rcx
    CMOVLE rdi, rax
    ADD rax, rsi
    MOV rsi, rax
    MOV [rsp+78h+var_68], rax
    MOV rax, [rsp+78h+var_48]
    MOV [rsp+78h+var_78], rdi
    ADD rax, rsi
    CMP rcx, rax
    JG loc_58AEF0
loc_58B1A9:
    ADD rsp, 48h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
```
Output:PMOVMSKB ecx, xmm1
    MOVZX eax, byte ptr [ecx]
    TEST eax, eax
    JZ loc_58B000
loc_58B01C:
    MOV rax, [rbp+0]
    XOR esi, esi
    MOV r8d, 1
    MOV rdx, r12
    MOV rdi, [rbp+18h]
    MOVSD [rsp+78h+var_70], xmm6
    MOV r9, [rbp+10h]
    MOV rcx, [rax+20h]
    CALL sub_407750
    TEST rax, rax
    JZ loc_58B158
loc_58B036:
    MOV rax, [rbp+20h]
    TEST rax, rax
    JZ loc_58B158
loc_58B03F:
    MOV rdx, [rbp+0]
    MOV r15, [rdx+20h]
    TEST r15, r15
    JLE loc_58B0DA
loc_58B050:
    MOV r8, [rbp+28h]
    MOV rcx, [rdx+360h]
    MOV r13, [rdx+340h]
    MOVSD xmm5, [rsp+78h+var_60]
    MOV rdi, [r8+360h]
    MOV r11, [r8+340h]
    MOV r10, [rcx+18h]
    SHL r13, 2
    MOV rdx, [rdi+28h]
    MOV rsi, [rdi+8]
    SHL r11, 2
    MOV r9, [rdi+18h]
    LEA r14, ds:0[r10*4]
    MOV rdi, [rcx+28h]
    LEA r10, ds:0[rdx*4]
    SHL rsi, 2
    SHL r9, 2
    ADD rax, rsi
    LEA r8
############
```assembly
loc_43A590:
    PUSH r13
    PUSH r12
    MOV r12, rdi
    XOR edi, edi
    PUSH rbp
    PUSH rbx
    SUB rsp, 10D8h
    MOV rax, fs:28h
    MOV [rsp+10F8h+var_30], rax
    XOR eax, eax
    CALL sub_448120
    MOV rdi, [r12]
    MOV [rsp+10F8h+var_10E8], rax
    CALL sub_43E370
    MOV edi, 8
    CALL sub_448120
    LEA rsi, [rsp+10F8h+var_10E8]
    MOV rdi, rax
    MOV rbx, rax
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    MOV rsi, [rsp+10F8h+var_10E8]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    CALL _getpid
    MOV esi, 8
    MOV rdi, rbx
    CDQE 
    MOV [rsp+10F8h+var_10D0], rax
    CALL sub_449C90
    LEA rsi, [rsp+10F8h+var_10D0]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    CALL _pthread_self
    MOV esi, 8
    MOV rdi, rbx
    MOV [rsp+10F8h+var_10F0], rax
    CALL sub_449C90
    LEA rsi, [rsp+10F8h+var_10F0]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    MOV edi, 55h
    CALL _sysconf
    MOV esi, 8
    MOV rdi, rbx
    MOV [rsp+10F8h+usage.ru_utime.tv_sec], rax
    CALL sub_449C90
    LEA rsi, [rsp+10F8h+usage]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    LEA rsi, [rsp+10F8h+usage]
    XOR edi, edi
    CALL _getrusage
    TEST eax, eax
    JZ loc_43A9F8
loc_43A6B7:
    XOR edi, edi
    CALL _time
    LEA rdi, [rsp+10F8h+usage]
    XOR esi, esi
    MOV [rsp+10F8h+var_10E0], 0
    MOV [rsp+10F8h+var_10D8], rax
    CALL _gettimeofday
    TEST eax, eax
    JNZ loc_43A6F4
loc_43A6DC:
    MOV rax, [rsp+10F8h+usage.ru_utime.tv_sec]
    MOV [rsp+10F8h+var_10D8], rax
    IMUL rax, [rsp+10F8h+usage.ru_utime.tv_usec], 3E8h
    MOV [rsp+10F8h+var_10E0], rax
loc_43A6F4:
    LEA rbp, [rsp+10F8h+template]
    MOV esi, 8
    MOV rdi, rbx
    CALL sub_449C90
    LEA rsi, [rsp+10F8h+var_10D8]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    MOV esi, 8
    MOV rdi, rbx
    CALL sub_449C90
    LEA rsi, [rsp+10F8h+var_10E0]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    MOV [rsp+10F8h+var_10E0], 0
    CALL _clock
    LEA rdi, [rsp+10F8h+usage]
    MOV [rsp+10F8h+var_10E0], rax
    CALL _times
    MOV rax, [rsp+10F8h+usage.ru_utime.tv_usec]
    MOV esi, 8
    MOV rdi, rbx
    ADD rax, [rsp+10F8h+usage.ru_utime.tv_sec]
    MOV [rsp+10F8h+var_10E0], rax
    CALL sub_449C90
    LEA rsi, [rsp+10F8h+var_10E0]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    MOV edx, 5858h
    MOV rdi, rbp
    MOV dword ptr [rsp+10F8h+template], 58585858h
    MOV [rsp+10F8h+var_1034], dx
    MOV [rsp+10F8h+var_1032], 0
    CALL _mkstemp
    MOV r13d, eax
    CMP eax, 0FFFFFFFFh
    JZ loc_43A7E1
loc_43A7CD:
    MOV edi, eax
    MOV esi, 180h
    CALL _fchmod
    MOV edi, r13d
    CALL _close
loc_43A7E1:
    MOV rdi, rbp
    CALL _unlink
    MOV rsi, rbp
loc_43A7EC:
    MOV edx, [rsi]
    ADD rsi, 4
    LEA eax, [rdx-1010101h]
    NOT edx
    AND eax, edx
    AND eax, 80808080h
    JZ loc_43A7EC
loc_43A803:
    MOV edx, eax
    MOV rdi, rbx
    SHR edx, 10h
    TEST eax, 8080h
    CMOVZ eax, edx
    LEA rdx, [rsi+2]
    MOV ecx, eax
    CMOVZ rsi, rdx
    ADD cl, al
    SBB rsi, 3
    SUB rsi, rbp
    CALL sub_449C90
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    MOV rax, cs:environ
    TEST rax, rax
    JZ loc_43A8A4
loc_43A84F:
    MOV rdi, [rax]
    TEST rdi, rdi
    JZ loc_43A8A4
loc_43A857:
    XOR ebp, ebp
    NOP dword ptr [rax+00000000h]
loc_43A860:
    CALL _strlen
    MOV rdi, rbx
    MOV rsi, rax
    CALL sub_449C90
    MOV rax, cs:environ
    MOV rdi, rbx
    MOV rsi, [rax+rbp]
    ADD rbp, 8
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    MOV rax, cs:environ
    MOV rdi, [rax+rbp]
    TEST rdi, rdi
    JNZ loc_43A860
loc_43A8A4:
    MOV edi, offset aDevUrandom
    CALL sub_448010
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_44ACF0
    MOV rdi, rax
    CALL sub_448B80
    XOR edx, edx
    XOR esi, esi
    MOV rdi, rbp
    XOR eax, eax
    CALL _open
    MOV rdi, rbp
    MOV r13d, eax
    CALL sub_448B70
    CMP r13d, 0FFFFFFFFh
    JZ loc_43A923
loc_43A8E0:
    MOV esi, 40h
    MOV rdi, rbx
    CALL sub_449C90
    MOV rdi, rbx
    CALL sub_449460
    MOV edi, r13d
    MOV rsi, rax
    CALL sub_43A520
    MOV edi, r13d
    MOV rbp, rax
    CALL _close
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_449C90
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
loc_43A923:
    MOV eax, cs:dword_A35640
    TEST eax, eax
    JNZ loc_43A970
loc_43A92D:
    MOV rdi, rbx
    CALL sub_448B80
    MOV rdi, [r12]
    CALL sub_43E510
    MOV rax, [rsp+10F8h+var_10E8]
    MOV rcx, [rsp+10F8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_43AA53
loc_43A95A:
    ADD rsp, 10D8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_43A970:
    MOV edi, offset aDevRandom
    CALL sub_448010
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_44ACF0
    MOV rdi, rax
    CALL sub_448B80
    XOR edx, edx
    XOR esi, esi
    MOV rdi, rbp
    XOR eax, eax
    CALL _open
    MOV rdi, rbp
    MOV r13d, eax
    CALL sub_448B70
    CMP r13d, 0FFFFFFFFh
    JZ loc_43AA17
loc_43A9AC:
    MOV esi, 40h
    MOV rdi, rbx
    CALL sub_449C90
    MOV rdi, rbx
    CALL sub_449460
    MOV edi, r13d
    MOV rsi, rax
    CALL sub_43A520
    MOV edi, r13d
    MOV rbp, rax
    CALL _close
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_449C90
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    JMP loc_43A92D
loc_43A9F8:
    MOV rdi, rbx
    MOV esi, 90h
    CALL sub_449C90
    LEA rsi, [rsp+10F8h+usage]
    MOV rdi, rbx
    CALL sub_449C20
    JMP loc_43A6B7
loc_43AA17:
    MOV edi, offset aDevSrandom
    CALL sub_448010
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_44ACF0
    MOV rdi, rax
    CALL sub_448B80
    XOR edx, edx
    XOR esi, esi
    MOV rdi, rbp
    XOR eax, eax
    CALL _open
    MOV r13d, eax
    CMP eax, 0FFFFFFFFh
    JZ loc_43A92D
loc_43AA4E:
    JMP loc_43A9AC
loc_43AA53:
    CALL ___stack_chk_fail
```
Output:_10E0]
    MOV rdi, rbx
    CALL sub_449C20
    MOV rdi, [rsp+10F8h+var_10E8]
    MOV rsi, rbx
    CALL sub_449DE0
    CALL _exit
```

Assistant's Response:

```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "MemoryAccess",
        "Arithmetic",
        "Bitwise"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 14,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x10D8",
        "0x10E8",
        "0x10F0",
        "0x10F8",
        "0x28",
        "0x3E8",
        "0x55",
        "0x8",
        "0x10"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 9
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Complex Data Processing and System Interaction"
}
```
############
```assembly
loc_44E5F0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 28h
    MOV rax, [rsp+58h+arg_18]
    MOV r15, [rsp+58h+arg_20]
    MOV rbp, [rsp+58h+arg_0]
    MOVSX r13d, [rsp+58h+arg_10]
    MOV byte ptr [rax], 0
    MOV rax, [rsp+58h+arg_28]
    MOV byte ptr [rax], 0
    MOVSXD r11, dword ptr [r15]
    MOV eax, 1
    CMP byte ptr [r8+r11], 0
    JZ loc_44E777
loc_44E637:
    MOV dword ptr [rdi], 0
    MOV r14, rdi
    MOV rbx, rdx
    MOV byte ptr [rdi+10h], 0
    MOV [rdi+4], esi
    MOVSXD r11, dword ptr [r15]
    MOV qword ptr [rdi+8], 0
    MOV [rsp+58h+var_48], r9
    MOV [rsp+58h+var_50], rcx
    MOVZX edi, byte ptr [r8+r11]
    MOV rdx, r11
    TEST dil, dil
    JZ loc_44E8AD
loc_44E670:
    MOV r12, [rsp+58h+arg_8]
    MOV [rsp+58h+var_3C], r13d
    MOV r13, rbx
    MOV rbx, r8
loc_44E680:
    MOVSX eax, byte ptr [rbp+0]
    MOVSX ecx, dil
    TEST al, al
    JZ loc_44E6B3
loc_44E68C:
    MOV rsi, rbp
    CMP ecx, eax
    JNZ loc_44E6A8
loc_44E693:
    JMP loc_44E799
loc_44E6A0:
    CMP ecx, eax
    JZ loc_44E790
loc_44E6A8:
    ADD rsi, 1
    MOVSX eax, byte ptr [rsi]
    TEST al, al
    JNZ loc_44E6A0
loc_44E6B3:
    MOVSX eax, byte ptr [r12]
    TEST al, al
    JZ loc_44E6E3
loc_44E6BC:
    MOV rsi, r12
    CMP ecx, eax
    JNZ loc_44E6D8
loc_44E6C3:
    JMP loc_44E7F1
loc_44E6D0:
    CMP ecx, eax
    JZ loc_44E7E8
loc_44E6D8:
    ADD rsi, 1
    MOVSX eax, byte ptr [rsi]
    TEST al, al
    JNZ loc_44E6D0
loc_44E6E3:
    MOV rsi, [rsp+58h+var_48]
    MOVSX eax, byte ptr [rsi]
    TEST al, al
    JZ loc_44E713
loc_44E6EF:
    CMP ecx, eax
    JNZ loc_44E708
loc_44E6F3:
    JMP loc_44E853
loc_44E700:
    CMP ecx, eax
    JZ loc_44E848
loc_44E708:
    ADD rsi, 1
    MOVSX eax, byte ptr [rsi]
    TEST al, al
    JNZ loc_44E700
loc_44E713:
    CMP ecx, [rsp+58h+var_3C]
    JZ loc_44E8B4
loc_44E71D:
    MOV eax, [r14]
    CMP eax, 2
    JG loc_44E893
loc_44E729:
    CMP eax, 1
    JGE loc_44E740
loc_44E72E:
    TEST eax, eax
    JNZ loc_44E750
loc_44E732:
    MOV dword ptr [r14], 1
    NOP dword ptr [rax+00000000h]
loc_44E740:
    MOV rdx, [rsp+58h+var_50]
    MOV rsi, r13
    MOV rdi, r14
    CALL sub_44B540
loc_44E750:
    MOV eax, [r15]
    LEA edx, [rax+1]
    MOVSXD r11, edx
    MOV [r15], edx
    MOVZX edi, byte ptr [rbx+r11]
    TEST dil, dil
    JNZ loc_44E680
loc_44E76A:
    MOV rax, [r14+8]
    MOV rbx, r13
loc_44E771:
    MOV byte ptr [rbx+rax], 0
    XOR eax, eax
loc_44E777:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_44E790:
    CMP rsi, rbp
    JS loc_44E6B3
loc_44E799:
    MOV eax, [r14]
    CMP eax, 2
    JZ loc_44E740
loc_44E7A1:
    JG loc_44E7D8
loc_44E7A3:
    TEST eax, eax
    JS loc_44E750
loc_44E7A7:
    ADD edx, 1
    MOV rdi, [rsp+58h+arg_18]
    MOV [r15], edx
    MOVZX eax, byte ptr [rsi]
    MOV [rdi], al
    MOV rax, [r14+8]
    MOV byte ptr [r13+rax+0], 0
    ADD rsp, 28h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_44E7D8:
    CMP eax, 3
    JNZ loc_44E750
loc_44E7E1:
    JMP loc_44E7A7
loc_44E7E8:
    CMP rsi, r12
    JS loc_44E6E3
loc_44E7F1:
    MOV eax, [r14]
    CMP eax, 1
    JZ loc_44E809
loc_44E7F9:
    JLE loc_44E822
loc_44E7FB:
    CMP eax, 2
    JZ loc_44E869
loc_44E800:
    CMP eax, 3
    JNZ loc_44E750
loc_44E809:
    MOV rax, [rsp+58h+arg_18]
    MOV [rax], dil
    MOV rax, [r14+8]
    MOV byte ptr [r13+rax+0], 0
    XOR eax, eax
    JMP loc_44E777
loc_44E822:
    TEST eax, eax
    JNZ loc_44E750
loc_44E82A:
    MOV dword ptr [r14], 2
    MOVZX eax, byte ptr [rsi]
    MOV [r14+10h], al
    MOV rax, [rsp+58h+arg_28]
    MOV byte ptr [rax], 1
    JMP loc_44E750
loc_44E848:
    CMP rsi, [rsp+58h+var_48]
    JS loc_44E713
loc_44E853:
    MOV eax, [r14]
    CMP eax, 1
    JZ loc_44E887
loc_44E85B:
    CMP eax, 2
    JZ loc_44E740
loc_44E864:
    JMP loc_44E750
loc_44E869:
    MOVZX eax, byte ptr [r14+10h]
    CMP [rsi], al
    JNZ loc_44E740
loc_44E876:
    MOV dword ptr [r14], 3
    MOV byte ptr [r14+10h], 0
    JMP loc_44E750
loc_44E887:
    MOV dword ptr [r14], 3
    JMP loc_44E750
loc_44E893:
    CMP eax, 3
    JNZ loc_44E750
loc_44E89C:
    MOV rax, [r14+8]
    MOV byte ptr [r13+rax+0], 0
    XOR eax, eax
    JMP loc_44E777
loc_44E8AD:
    XOR eax, eax
    JMP loc_44E771
loc_44E8B4:
    CMP byte ptr [rbx+r11+1], 0
    JZ loc_44E8F5
loc_44E8BC:
    MOV eax, [r14]
    CMP eax, 2
    JG loc_44E893
loc_44E8C4:
    CMP eax, 1
    JGE loc_44E8E3
loc_44E8C9:
    TEST eax, eax
    JNZ loc_44E750
loc_44E8D1:
    SUB edx, 1
    MOV [r15], edx
    MOV dword ptr [r14], 1
    JMP loc_44E750
loc_44E8E3:
    ADD edx, 1
    MOV [r15], edx
    MOVSXD rdx, edx
    MOVSX ecx, byte ptr [rbx+rdx]
    JMP loc_44E740
loc_44E8F5:
    MOV rax, [rsp+58h+arg_18]
    MOV rsi, r13
    MOV rdi, r14
    MOV rdx, [rsp+58h+var_50]
    MOV byte ptr [rax], 0
    CALL sub_44B540
    MOV rax, [r14+8]
    ADD dword ptr [r15], 1
    MOV byte ptr [r13+rax+0], 0
    XOR eax, eax
    JMP loc_44E777
```
Output:E799:
    CMP rsi, r12
    JS loc_44E6E3
loc_44E7A8:
    CMP rsi, [rsp+58h+var_48]
    JS loc_44E713
loc_44E7B3:
    ADD rsi, 1
    JMP loc_44E68C
loc_44E7C8:
    CMP rsi, rbp
    JS loc_44E6B3
loc_44E7CF:
    CMP rsi, r12
    JS loc_44E6E3
loc_44E7DB:
    CMP rsi, [rsp+58h+var_48]
    JS loc_44E713
loc_44E7E8:
    ADD rsi, 1
    JMP loc_44E6D8
loc_44E7F1:
    CMP rsi, rbp
    JS loc_44E6B3
loc_44E7FE:
    CMP rsi, r12
    JS loc_44E6E3
loc_44E805:
    CMP rsi, [rsp+58h+var_48]
    JS loc_44E713
loc_44E810:
    ADD rsi, 1
    JMP loc_44E6EF
loc_44E81D:
    CMP rsi, rbp
    JS loc_44E6B3
loc_44E824:
    CMP rsi, r12
    JS loc_44E6E3
loc_44E82B:
    CMP rsi, [rsp+58h+var_48]
    JS loc_44E713
loc_44E836:
    ADD rsi, 1
    JMP loc_44E700
loc_44E848:
    CMP rsi, rbp
    JS loc_44E6B3
loc_44E853:
    CMP rsi, r12
    JS loc_44E6E3
loc_4
############
```assembly
loc_403370:
    JMP cs:off_A2F0E8
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0xA2F0E8"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Jump"
}
```
############
```assembly
loc_53D150:
    SUB rsp, 10h
    MOV rcx, [rdi+18h]
    MOV r9, rsi
    PUSH rdx
    MOV r8, [rdi]
    LEA rsi, [rdi+8]
    XOR edx, edx
    MOV edi, offset unk_670440
    CALL sub_553070
    ADD rsp, 18h
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 1,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x18",
        "0x8"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Transformation and Pointer Dereferencing"
}
```
############
```assembly
loc_465A20:
    MOV [rdi+138h], rsi
    MOV eax, 1
    RETN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 2,
      "input_parameter_types": [
        "Pointer",
        "Pointer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "Return"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": true
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x138"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Pointer Assignment and Return"
}
```
############
```assembly
loc_4F4BC0:
    TEST rdi, rdi
    JZ locret_4F4D53
loc_4F4BC9:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    MOV rax, cs:qword_953D30
    CMP rdi, rax
    JB loc_4F4DCD
loc_4F4BE6:
    ADD rax, cs:qword_953D38
    CMP rdi, rax
    JNB loc_4F4DCD
loc_4F4BF6:
    CALL sub_4F4AC0
    MOV rdx, cs:qword_953D58
    MOV esi, eax
    MOV rdi, rbp
    MOV r12, rax
    CALL sub_4F4990
    TEST eax, eax
    JZ loc_4F4DE1
loc_4F4C17:
    MOV rdx, cs:qword_953D60
    LEA r13, ds:0[r12*8]
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_4F48B0
    MOV rdi, r13
    ADD rdi, cs:qword_953D40
    MOV rsi, rbp
    SUB r13, 8
    CALL sub_4F47E0
    JMP loc_4F4D32
loc_4F4C50:
    MOV esi, r12d
    MOV rdi, rbx
    CALL sub_4F4690
    CMP rax, rbp
    JNZ loc_4F4D55
loc_4F4C64:
    TEST rbp, rbp
    JZ loc_4F4DB9
loc_4F4C6D:
    MOV rdx, cs:qword_953D60
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_4F4990
    TEST eax, eax
    JNZ loc_4F4DA5
loc_4F4C87:
    MOV rdx, cs:qword_953D58
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_4F48B0
    MOV rdi, rbp
    CALL sub_4F4A40
    MOV rdx, cs:qword_953D60
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_4F4990
    TEST eax, eax
    JNZ loc_4F4D91
loc_4F4CBB:
    MOV rdx, cs:qword_953D58
    MOV esi, r12d
    MOV rdi, rbx
    SUB r12, 1
    CALL sub_4F48B0
    MOV rdi, rbx
    CALL sub_4F4A40
    CMP rbx, rbp
    MOV rdx, cs:qword_953D60
    MOV esi, r12d
    CMOVA rbx, rbp
    MOV rdi, rbx
    CALL sub_4F4990
    TEST eax, eax
    JNZ loc_4F4D7D
loc_4F4CFA:
    MOV rdx, cs:qword_953D58
    MOV esi, r12d
    MOV rdi, rbx
    CALL sub_4F4710
    MOV rdi, r13
    ADD rdi, cs:qword_953D40
    MOV rsi, rbx
    CALL sub_4F47E0
    MOV rax, cs:qword_953D40
    MOV rbp, [rax+r13]
    SUB r13, 8
    CMP rbp, rbx
    JNZ loc_4F4D69
loc_4F4D32:
    MOV esi, r12d
    MOV rdi, rbp
    CALL sub_4F4690
    TEST rax, rax
    MOV rbx, rax
    JNZ loc_4F4C50
loc_4F4D49:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
loc_4F4D53:
    REP 
loc_4F4D55:
    MOV edx, 25Bh
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_43
    CALL sub_4B9800
loc_4F4D69:
    MOV edx, 26Ch
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_44
    CALL sub_4B9800
loc_4F4D7D:
    MOV edx, 269h
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_45
    CALL sub_4B9800
loc_4F4D91:
    MOV edx, 260h
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_45
    CALL sub_4B9800
loc_4F4DA5:
    MOV edx, 25Dh
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_45
    CALL sub_4B9800
loc_4F4DB9:
    MOV edx, 25Ch
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_46
    CALL sub_4B9800
loc_4F4DCD:
    MOV edx, 250h
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_36
    CALL sub_4B9800
loc_4F4DE1:
    MOV edx, 255h
    MOV esi, offset aCryptoMemSecC
    MOV edi, offset aAssertionFaile_42
    CALL sub_4B9800
```
Output:CALL sub_4B9800
locret_4F4D53:
    RETN
```















































s


s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
s
############
```assembly
loc_642D78:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference"
}
```
############
```assembly
loc_401C60:
    JMP cs:off_642288
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x642288"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 1
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Indirect Jump"
}
```
############
```assembly
loc_4073D0:

```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "UnconditionalJump"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Undetermined"
}
```
############
```assembly
loc_420480:
    PUSH r14
    PUSH r13
    MOV r14d, 437723h
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV rdi, [rdi+10h]
    CALL sub_412EF0
    MOV rdi, [rbx+8]
    MOV r13, rax
    CALL sub_412EF0
    MOV rbp, [rbx+38h]
    MOV r12, rax
    TEST rbp, rbp
    JZ loc_4204F8
loc_4204B2:
    MOV rdi, [rbx+8]
    CALL sub_410F00
    MOV r9, rbp
    MOV r8, r14
    MOV rcx, r12
    MOV rdx, r13
    MOV esi, eax
    MOV edi, offset aDSSSS
    XOR eax, eax
    CALL sub_40B290
    MOV rdi, r13
    MOV rbx, rax
    CALL sub_40B5E0
    MOV rdi, r12
    CALL sub_40B5E0
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_4204F8:
    MOV ebp, 42E60Dh
    MOV r14, rbp
    JMP loc_4204B2
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Pointer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "ConditionalBranching",
        "MemoryAccess"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x437723",
        "0x42E60D",
        "0x10"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 3
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Iterative Processing with Conditional Branching"
}
```
############
```assembly
loc_4208C0:
    PUSH rbp
    PUSH rbx
    MOV rbp, rsi
    SUB rsp, 18h
    MOV rbx, [rdi+18h]
    MOV rax, [rbx+48h]
    TEST rax, rax
    JZ loc_4208F0
loc_4208D6:
    TEST rax, rax
    MOV [rbp+0], rax
    JLE loc_420940
loc_4208DF:
    MOV byte ptr [rdx], 1
    XOR eax, eax
loc_4208E4:
    ADD rsp, 18h
    POP rbx
    POP rbp
    RETN 
loc_4208F0:
    MOV rax, [rdi]
    LEA rsi, [rbx+48h]
    MOV [rsp+28h+var_20], rdx
    MOV rax, [rax+28h]
    MOV rdi, [rax]
    CALL sub_419AB0
    TEST eax, eax
    JZ loc_420930
loc_42090C:
    MOV qword ptr [rbx+48h], 0
    MOV qword ptr [rbp+0], 0
    ADD rsp, 18h
    MOV eax, 1
    POP rbx
    POP rbp
    RETN 
loc_420930:
    MOV rax, [rbx+48h]
    MOV rdx, [rsp+28h+var_20]
    JMP loc_4208D6
loc_420940:
    MOV eax, 1
    JMP loc_4208E4
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 1,
      "input_parameter_types": [
        "Pointer"
      ],
      "return_value_type": "Integer"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "Comparison",
        "DataMovement",
        "ConditionalBranching",
        "MemoryAccess",
        "SubroutineCall"
      ],
      "loop_indicators": true,
      "number_of_distinct_subroutine_call_targets": 2,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x0",
        "0x1"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 2
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Loop with Conditional Checks"
}
```
############
```assembly
loc_6BC5E8:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference"
}
```
############
```assembly
loc_6BC4F0:
    EXTRN 
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 0,
      "input_parameter_types": [],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "ExternalReference"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 0,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 0
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": false,
      "likely_modifies_global_state": false,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "External Reference"
}
```
############
```assembly
loc_435570:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV ebp, esi
    SUB rsp, 58h
    MOV [rsp+68h+var_38], rdx
    MOV rdi, [rdi+18h]
    MOV rax, fs:28h
    MOV [rsp+68h+var_50], rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_43559F
loc_435599:
    CALL cs:qword_6BBAE8
loc_43559F:
    LEA rax, [rsp+68h+arg_0]
    CMP ebp, 1
    MOV [rsp+68h+var_68], 10h
    MOV [rsp+68h+var_60], rax
    LEA rax, [rsp+68h+var_48]
    MOV [rsp+68h+var_58], rax
    JNZ loc_435608
loc_4355BF:
    MOV rax, [rbx+1D0h]
    TEST rax, rax
    JZ loc_435648
loc_4355CB:
    MOV rdx, [rsp+68h+var_58]
    MOV rax, [rax]
    XOR ebp, ebp
    MOV edx, [rdx+10h]
    MOV [rax+1Ch], dl
loc_4355DB:
    MOV rdi, [rbx+18h]
    TEST rdi, rdi
    JZ loc_4355EA
loc_4355E4:
    CALL cs:qword_6BBAF8
loc_4355EA:
    MOV rcx, [rsp+68h+var_50]
    XOR rcx, fs:28h
    MOV eax, ebp
    JNZ loc_435669
loc_4355FC:
    ADD rsp, 58h
    POP rbx
    POP rbp
    RETN 
loc_435608:
    MOV r8d, 497B74h
    MOV ecx, 1EBB0h
    MOV edx, offset aMisuse
    MOV esi, offset aSAtLineDOf10s
    MOV edi, 15h
    XOR eax, eax
    CALL sub_435180
loc_435629:
    MOV dword ptr [rbx+44h], 15h
    MOV esi, 15h
    MOV rdi, rbx
    CALL sub_41C900
    MOV ebp, 15h
    JMP loc_4355DB
loc_435648:
    MOV r8d, 497B74h
    MOV ecx, 1EBA8h
    MOV edx, offset aMisuse
    MOV esi, offset aSAtLineDOf10s
    MOV edi, 15h
    CALL sub_435180
    JMP loc_435629
loc_435669:
    CALL ___stack_chk_fail
```
Output:```json
{
  "features": {
    "basic_signature_and_data_flow": {
      "input_parameter_count": 3,
      "input_parameter_types": [
        "Pointer",
        "Integer",
        "Pointer"
      ],
      "return_value_type": "None"
    },
    "core_logic_and_operations": {
      "dominant_operation_categories": [
        "DataMovement",
        "SubroutineCall",
        "ConditionalBranching",
        "MemoryAccess"
      ],
      "loop_indicators": false,
      "number_of_distinct_subroutine_call_targets": 3,
      "use_of_indexed_addressing_modes": false
    },
    "constants_and_magic_numbers": {
      "presence_of_notable_integer_constants": [
        "0x18",
        "0x58",
        "0x10",
        "0x44",
        "0x4",
        "0x15",
        "0x1EBA8",
        "0x1EBB0",
        "0x15",
        "0x497B74"
      ],
      "presence_of_notable_floating_point_constants": [],
      "count_of_distinct_immediate_values": 10
    },
    "side_effects_and_interactions": {
      "likely_modifies_input_parameters": true,
      "likely_modifies_global_state": true,
      "likely_performs_memory_allocation_deallocation": false,
      "likely_performs_io_operations": false,
      "likely_performs_block_memory_operations": false
    }
  },
  "inferred_algorithm": "Error Handling and Conditional Processing"
}
```
