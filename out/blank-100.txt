############
```assembly
loc_47F290:
    CMP cs:qword_78CF50, 0
    JZ locret_47F30D
loc_47F29A:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    SUB rsp, 8
    CMP cs:dword_78CF6C, edi
    MOV rbx, cs:qword_78D208
    JG loc_47F310
loc_47F2B5:
    MOV rax, cs:qword_78CF60
    MOV cs:qword_78CF50, offset qword_78CF60
    TEST rax, rax
    JZ loc_47F3D8
loc_47F2D0:
    CMP edi, [rax+8]
    JG loc_47F2EC
loc_47F2D5:
    JMP loc_47F387
loc_47F2E0:
    CMP ebp, [rdx+8]
    JLE loc_47F380
loc_47F2E9:
    MOV rax, rdx
loc_47F2EC:
    MOV rdx, [rax]
    TEST rdx, rdx
    JNZ loc_47F2E0
loc_47F2F4:
    MOV cs:qword_78CF50, rax
loc_47F2FB:
    CMP ebp, [rax+0Ch]
    JGE loc_47F303
loc_47F300:
    MOV [rax+0Ch], ebp
loc_47F303:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
loc_47F30D:
    REP 
loc_47F310:
    CMP cs:qword_78CF60, 0
    JZ loc_47F350
loc_47F31A:
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    MOV rdi, cs:qword_78CF60
    MOV r12, [rdi]
    CALL _free
    MOV cs:qword_78CF60, r12
    SUB dword ptr [rbx+38h], 1
    JNZ loc_47F310
loc_47F33F:
    MOVZX eax, byte ptr [rbx+3Ch]
    TEST al, al
    JZ loc_47F310
loc_47F347:
    CALL sub_47EAB0
loc_47F350:
    CMP ebp, cs:dword_78CF68
    JGE loc_47F368
loc_47F358:
    MOV cs:qword_78CF50, 0
    JMP loc_47F303
loc_47F368:
    MOV cs:qword_78CF50, offset qword_78CF60
    MOV cs:dword_78CF6C, ebp
    JMP loc_47F303
loc_47F380:
    MOV cs:qword_78CF50, rax
loc_47F387:
    MOV rbx, cs:qword_78D208
    JMP loc_47F3A1
loc_47F390:
    MOV rax, cs:qword_78CF50
    CMP qword ptr [rax], 0
    JZ loc_47F2FB
loc_47F3A1:
    MOV eax, [rbx+38h]
    ADD eax, 1
    MOV [rbx+38h], eax
    MOV r12, cs:qword_78CF50
    MOV rdi, [r12]
    MOV r13, [rdi]
    CALL _free
    MOV [r12], r13
    SUB dword ptr [rbx+38h], 1
    JNZ loc_47F390
loc_47F3C7:
    MOVZX eax, byte ptr [rbx+3Ch]
    TEST al, al
    JZ loc_47F390
loc_47F3CF:
    JMP loc_47F347
loc_47F3D8:
    MOV eax, offset qword_78CF60
    JMP loc_47F2FB
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "MemoryAccess",
    "ConditionalBranching",
    "Arithmetic"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x38",
    "0x3C"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 2,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Dynamic Memory Management",
  "inferred_category": "Memory Management"
}
```
############
```assembly
loc_4DD790:
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV edi, 168h
    CALL sub_40C260
    MOV rbx, rax
    MOV rax, [rbp+38h]
    MOV edi, 4000h
    MOV dword ptr [rbx+40h], 4
    MOV [rbx+38h], rax
    CALL sub_40C220
    MOV rsi, rbp
    MOV rdi, rbx
    MOV [rbx+30h], rax
    CALL sub_4DD370
    MOV rdi, [rbx+30h]
    MOV r12, rax
    CALL _free
    MOV eax, [rbx+8]
    MOV rdi, rbx
    MOV [rbp+40h], eax
    MOV rax, [rbx]
    MOV [rbp+30h], rax
    CALL _free
    MOV rax, r12
    POP rbx
    POP rbp
    POP r12
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Pointer",
  "dominant_operation_categories": [
    "DataMovement",
    "MemoryAllocationDealloc",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x168",
    "0x4000"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 4,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "MemoryManagement"
}
```
############
```assembly
loc_4E8780:
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 10h
    MOV rax, fs:28h
    MOV [rsp+28h+var_20], rax
    XOR eax, eax
    TEST dil, 1
    JZ loc_4E883D
loc_4E87A2:
    CMP edi, 1
    JLE loc_4E883D
loc_4E87AB:
    MOV rbp, rsi
    CALL sub_527C50
    MOV rdi, [rbp+8]
    MOV r12d, eax
    TEST rdi, rdi
    JZ loc_4E8822
loc_4E87BF:
    NOP 
loc_4E87C0:
    MOV ecx, 0E07Fh
    XOR edx, edx
    MOV esi, 10h
    CALL sub_5391C0
    MOV rdi, [rbp+10h]
    LEA edx, [rax-0DF80h]
    CMP eax, 0E000h
    MOV ebx, eax
    CMOVGE ebx, edx
    XOR esi, esi
    MOV edx, 0FFh
    ADD rbp, 10h
    MOV [rsp+28h+var_28], ebx
    CALL sub_539D60
    MOV edi, r12d
    MOV r9d, eax
    MOV [rsp+28h+var_24], eax
    MOV r8d, ebx
    XOR eax, eax
    MOV ecx, offset aCanTSetScancod
    MOV rdx, rsp
    MOV esi, 4B4Dh
    CALL sub_40CE40
    MOV rdi, [rbp+8]
    TEST rdi, rdi
    JNZ loc_4E87C0
loc_4E8822:
    XOR eax, eax
    MOV rcx, [rsp+28h+var_20]
    XOR rcx, fs:28h
    JNZ loc_4E8842
loc_4E8834:
    ADD rsp, 10h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_4E883D:
    CALL sub_409830
loc_4E8842:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Integer",
    "Integer"
  ],
  "return_value_type": "Boolean",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 4,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xE07F",
    "0x10",
    "0xFF",
    "0xE000",
    "0x1",
    "0x4B4D"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 10,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ErrorHandling/Validation"
}
```
############
```assembly
loc_43F200:
    LEA rdi, [rsi+8]
    SUB rsp, 8
    CALL sub_45AB50
    ADD rsp, 8
    MOV rdi, rax
    JMP sub_45DF40
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_406813:
    PUSH rax
    MOVSX ecx, dil
    MOV edx, (offset aInvalidOptionC_0+12h)
    MOV esi, 22h
    MOV edi, 3
    XOR eax, eax
    CALL _error
```
Output:```json
{
  "input_parameter_count": 5,
  "input_parameter_types": [
    "String",
    "Integer",
    "Integer",
    "Integer",
    "Integer"
  ],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "DataMovement",
    "FunctionCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x12",
    "0x22",
    "0x3"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 3,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Error Handling",
  "inferred_category": "Utility"
}
```
############
```assembly
loc_758F78:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Unknown",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Reference"
}
```
############
```assembly
loc_41C8B0:
    PUSH r15
    PUSH r14
    MOV r14d, 4Ch
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    MOV rbx, rsi
    XOR r12d, r12d
    SUB rsp, 8
    MOV rdi, [rsi]
    CALL sub_4D0200
    MOV esi, (offset a8+6)
    MOV edi, 6
    CALL _setlocale
    MOV esi, offset dirname
    MOV edi, offset domainname
    CALL _bindtextdomain
    MOV edi, offset domainname
    CALL _textdomain
    MOV edi, offset sub_4B26B0
    CALL sub_4EA570
loc_41C909:
    XOR r8d, r8d
    MOV ecx, offset stru_4F36C0
    MOV edx, offset aDiw
    MOV rsi, rbx
    MOV edi, ebp
    CALL _getopt_long
    CMP eax, 0FFFFFFFFh
    JZ loc_41CA30
loc_41C929:
    CMP eax, 64h
    JZ loc_41CA20
loc_41C932:
    JG loc_41C950
loc_41C934:
    CMP eax, 0FFFFFF7Dh
    JZ loc_41C9A0
loc_41C93B:
    CMP eax, 0FFFFFF7Eh
    JNZ loc_41CA10
loc_41C946:
    XOR edi, edi
    CALL sub_41C540
loc_41C950:
    CMP eax, 69h
    JZ loc_41C9D0
loc_41C955:
    CMP eax, 77h
    JNZ loc_41CA10
loc_41C95E:
    MOV edx, 5
    MOV esi, offset aInvalidWrapSiz
    XOR edi, edi
    CALL _dcgettext
    MOV rdi, cs:optarg
    MOV r8, rax
    XOR r9d, r9d
    MOV ecx, (offset a8+6)
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    XOR esi, esi
    CALL sub_4DD0F0
    MOV r14, rax
    JMP loc_41C909
loc_41C9A0:
    MOV rdi, cs:stdout
    MOV rcx, cs:off_743148
    XOR r9d, r9d
    MOV r8d, offset aSimonJosefsson
    MOV edx, offset unk_4EA7DF
    MOV esi, offset aBase64
    XOR eax, eax
    CALL sub_4DC840
    XOR edi, edi
    CALL _exit
loc_41C9D0:
    MOV r12d, 1
    JMP loc_41C909
loc_41C9DB:
    MOV rdi, [rbx+rax*8]
    CALL sub_4D4D30
    MOV edx, 5
    MOV rbx, rax
    MOV esi, offset aExtraOperandS
    XOR edi, edi
    CALL _dcgettext
    MOV rcx, rbx
    MOV rdx, rax
    XOR esi, esi
    XOR edi, edi
    XOR eax, eax
    CALL _error
    NOP dword ptr [rax+00000000h]
loc_41CA10:
    MOV edi, 1
    CALL sub_41C540
loc_41CA20:
    MOV r13d, 1
    JMP loc_41C909
loc_41CA30:
    MOVSXD rax, cs:optind
    MOV edx, ebp
    SUB edx, eax
    CMP edx, 1
    JG loc_41C9DB
loc_41CA40:
    CMP ebp, eax
    MOV r15d, (offset asc_52A7CE+3)
    JLE loc_41CA4E
loc_41CA4A:
    MOV r15, [rbx+rax*8]
loc_41CA4E:
    CMP byte ptr [r15], 2Dh
    JZ loc_41CAB0
loc_41CA54:
    MOV esi, offset aRb
    MOV rdi, r15
    CALL _fopen
    TEST rax, rax
    MOV rbx, rax
    JZ loc_41CB38
loc_41CA6D:
    MOV esi, 2
    MOV rdi, rbx
    CALL sub_4BF2F0
    TEST r13b, r13b
    JZ loc_41CAC0
loc_41CA7F:
    MOV rsi, cs:stdout
    MOVZX edx, r12b
    MOV rdi, rbx
    CALL sub_41BFB0
loc_41CA92:
    MOV rdi, rbx
    CALL sub_4E0210
    CMP eax, 0FFFFFFFFh
    JZ loc_41CAD4
loc_41CA9F:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41CAB0:
    CMP byte ptr [r15+1], 0
    JNZ loc_41CA54
loc_41CAB7:
    MOV rbx, cs:stdin
    JMP loc_41CA6D
loc_41CAC0:
    MOV rsi, cs:stdout
    MOV rdx, r14
    MOV rdi, rbx
    CALL sub_41C200
    JMP loc_41CA92
loc_41CAD4:
    CMP byte ptr [r15], 2Dh
    JNZ loc_41CB0B
loc_41CADA:
    CMP byte ptr [r15+1], 0
    JNZ loc_41CB0B
loc_41CAE1:
    MOV edx, 5
    MOV esi, offset aClosing
    XOR edi, edi
    CALL _dcgettext
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rdx, rbx
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41CB0B:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
loc_41CB38:
    MOV rdx, r15
    MOV esi, 3
    XOR edi, edi
    CALL sub_4D3C20
    MOV rbx, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbx
    MOV edx, (offset aLuBytesSCopied+1Bh)
    MOV edi, 1
    XOR eax, eax
    CALL _error
    NOP word ptr [rax+rax+00000000h]
    NOP 
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 12,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x2D",
    "0x2",
    "0xFFFFFFFF",
    "0xFFFFFFFFFFFFFFFF",
    "0x3",
    "0x5",
    "0x1B"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 21,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_io_operations": true,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Parsing/Processing",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_44C740:
    LEA rsi, sub_4677F0
    PUSH rbx
    MOV rbx, rdi
    LEA rdi, [rdi+18h]
    CALL sub_44CD60
    MOV dword ptr [rbx], 1
    XOR eax, eax
    POP rbx
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 3,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Initialization"
}
```
############
```assembly
loc_45FD90:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdx
    SUB rsp, 38h
    MOV [rsp+68h+var_58], rdi
    MOV rdi, rsi
    MOV [rsp+68h+var_40], rsi
    MOV [rsp+68h+var_60], rcx
    CALL sub_42C3E0
    TEST rbx, rbx
    JZ loc_46001E
loc_45FDC1:
    MOV rdi, [rsp+68h+var_58]
    CALL sub_42C730
    TEST rax, rax
    MOV [rsp+68h+var_68], rax
    JZ loc_460030
loc_45FDD8:
    MOV rdi, [rsp+68h+var_40]
    MOV rsi, rax
    MOV r13, 0FFFFFFFFFFFFFFFFh
    CALL sub_42D140
    TEST eax, eax
    JNZ loc_45FF83
loc_45FDF4:
    CMP qword ptr [rbx+48h], 0
    JZ loc_460160
loc_45FDFF:
    MOV rdi, [rsp+68h+var_68]
    CALL sub_42C850
    TEST rax, rax
    MOV rbp, rax
    JZ loc_460030
loc_45FE14:
    MOV r12, [rbx+8]
    MOV r15, [rbx+10h]
    TEST r12, r12
    JZ loc_460180
loc_45FE25:
    TEST r15, r15
    JZ loc_460180
loc_45FE2E:
    LEA rdi, [r15+1]
    LEA rdx, aFormdataC
    MOV esi, 344h
    CALL sub_41DC60
    TEST rax, rax
    JZ loc_460030
loc_45FE4C:
    MOV rdx, r15
    MOV rsi, r12
    MOV rdi, rax
    CALL _memcpy
    MOV rdi, rbp
    MOV rsi, rax
    MOV byte ptr [rax+r15], 0
    MOV [rsp+68h+src], rax
    CALL sub_42C900
    MOV r8, [rsp+68h+src]
    LEA rdx, aFormdataC
    MOV esi, 34Ah
    MOV dword ptr [rsp+68h+n], eax
    MOV rdi, r8
    CALL sub_41D800
    MOV eax, dword ptr [rsp+68h+n]
loc_45FE90:
    TEST eax, eax
    JNZ loc_45FF83
loc_45FE98:
    MOV rdi, [rsp+68h+var_58]
    CALL sub_42C730
    TEST rax, rax
    MOV r12, rax
    JZ loc_460030
loc_45FEAE:
    MOV rsi, rax
    MOV rdi, rbp
    CALL sub_42D140
    TEST eax, eax
    MOV r15d, eax
    SETZ al
    JNZ loc_460002
loc_45FEC7:
    MOV rbp, rbx
    NOP word ptr [rax+rax+00h]
loc_45FED0:
    MOV rdi, r12
    CALL sub_42C850
    TEST rax, rax
    MOV r14, rax
    JZ loc_460030
loc_45FEE4:
    MOV rsi, [rbp+40h]
    XOR edx, edx
    MOV rdi, rax
    CALL sub_42CE80
    TEST eax, eax
    MOV r15d, eax
    JNZ loc_460012
loc_45FEFD:
    MOV rsi, [rbp+38h]
    TEST rsi, rsi
    JZ loc_45FF12
loc_45FF06:
    MOV rdi, r14
    CALL sub_42CD90
    TEST eax, eax
    JNZ loc_45FF83
loc_45FF12:
    CMP qword ptr [rbx+48h], 0
    JZ loc_4600B8
loc_45FF1D:
    MOV rdx, [rbx+50h]
    MOV rsi, [rbx+20h]
    TEST dl, 80h
    JZ loc_45FF2E
loc_45FF2A:
    MOV rsi, [rbx+68h]
loc_45FF2E:
    TEST rsi, rsi
    CMOVZ rsi, r13
    TEST dl, 3
    JZ loc_45FFA8
loc_45FF3A:
    MOV rsi, [rbp+18h]
    CMP byte ptr [rsi], 2Dh
    JNZ loc_460070
loc_45FF47:
    CMP byte ptr [rsi+1], 0
    JNZ loc_460070
loc_45FF51:
    MOV rax, cs:stdin_ptr
    MOV rcx, cs:fseek_ptr
    XOR r8d, r8d
    MOV rdx, cs:fread_ptr
    MOV rsi, 0FFFFFFFFFFFFFFFFh
    MOV rdi, r14
    MOV r9, [rax]
    CALL sub_42CEF0
loc_45FF7B:
    TEST eax, eax
    JZ loc_460050
loc_45FF83:
    MOV rdi, [rsp+68h+var_40]
    MOV dword ptr [rsp+68h+var_68], eax
    CALL sub_42C3E0
    MOV eax, dword ptr [rsp+68h+var_68]
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_45FFA8:
    TEST dl, 10h
    JZ loc_460080
loc_45FFB1:
    MOV rdx, [rbx+30h]
    MOV rsi, [rbx+28h]
    MOV rdi, r14
    TEST rdx, rdx
    CMOVZ rdx, r13
    CALL sub_42C9E0
loc_45FFC8:
    TEST eax, eax
    JNZ loc_45FF83
loc_45FFCC:
    MOV rsi, [rbx+58h]
    MOV eax, 1
    TEST rsi, rsi
    JZ loc_45FFF1
loc_45FFDA:
    CMP qword ptr [rbx+48h], 0
    JZ loc_460040
loc_45FFE1:
    MOV rdi, r14
    CALL sub_42C970
    TEST eax, eax
    MOV r15d, eax
    SETZ al
loc_45FFF1:
    MOV rbp, [rbp+48h]
    TEST rbp, rbp
    JZ loc_460002
loc_45FFFA:
    TEST al, al
    JNZ loc_45FED0
loc_460002:
    MOV rbx, [rbx]
    TEST rbx, rbx
    JZ loc_460012
loc_46000A:
    TEST al, al
    JNZ loc_45FDF4
loc_460012:
    TEST r15d, r15d
    MOV eax, r15d
    JNZ loc_45FF83
loc_46001E:
    ADD rsp, 38h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_460030:
    MOV eax, 1Bh
    JMP loc_45FF83
loc_460040:
    TEST byte ptr [rbx+50h], 51h
    MOV eax, 1
    JZ loc_45FFF1
loc_46004B:
    JMP loc_45FFE1
loc_460050:
    TEST byte ptr [rbx+50h], 2
    JZ loc_45FFCC
loc_46005A:
    XOR esi, esi
    MOV rdi, r14
    CALL sub_42C970
    JMP loc_45FFC8
loc_460070:
    MOV rdi, r14
    CALL sub_42CB10
    JMP loc_45FF7B
loc_460080:
    AND edx, 40h
    JZ loc_4600A0
loc_460085:
    MOV r9, [rbx+60h]
    MOV rdx, [rsp+68h+var_60]
    XOR r8d, r8d
    XOR ecx, ecx
    MOV rdi, r14
    CALL sub_42CEF0
    JMP loc_45FFC8
loc_4600A0:
    MOV rdx, rsi
    MOV rsi, [rbx+18h]
    MOV rdi, r14
    CALL sub_42C9E0
    JMP loc_45FFC8
loc_4600B8:
    MOV r8, [rbx+8]
    MOV rcx, [rbx+10h]
    TEST r8, r8
    JZ loc_460170
loc_4600C9:
    TEST rcx, rcx
    JZ loc_460170
loc_4600D2:
    LEA rdi, [rcx+1]
    LEA rdx, aFormdataC
    MOV esi, 344h
    MOV [rsp+68h+src], r8
    MOV [rsp+68h+n], rcx
    CALL sub_41DC60
    TEST rax, rax
    JZ loc_460030
loc_4600FA:
    MOV r8, [rsp+68h+src]
    MOV rcx, [rsp+68h+n]
    MOV rdi, rax
    MOV rdx, rcx
    MOV rsi, r8
    CALL _memcpy
    MOV rcx, [rsp+68h+n]
    MOV rsi, rax
    MOV rdi, r14
    MOV [rsp+68h+src], rax
    MOV byte ptr [rax+rcx], 0
    CALL sub_42C900
    MOV r9, [rsp+68h+src]
    LEA rdx, aFormdataC
    MOV esi, 34Ah
    MOV dword ptr [rsp+68h+n], eax
    MOV rdi, r9
    CALL sub_41D800
    MOV eax, dword ptr [rsp+68h+n]
loc_46014C:
    TEST eax, eax
    JZ loc_45FF1D
loc_460154:
    JMP loc_45FF83
loc_460160:
    MOV r12, [rsp+68h+var_68]
    JMP loc_45FEC7
loc_460170:
    MOV rsi, r8
    MOV rdi, r14
    CALL sub_42C900
    JMP loc_46014C
loc_460180:
    MOV rsi, r12
    MOV rdi, rbp
    CALL sub_42C900
    JMP loc_45FE90
```
Output:_41DC60
    TEST rax, rax
    JZ loc_460170
loc_4600EB:
    MOV rdx, r8
    MOV rsi, rcx
    MOV rdi, rax
    CALL _memcpy
    MOV rdi, rax
    MOV byte ptr [rax+rcx], 0
    MOV [rsp+68h+src], rax
    CALL sub_42C900
    MOV r8, [rsp+68h+src]
    LEA rdx, aFormdataC
    MOV esi, 34Ah
    MOV dword ptr [rsp+68h+n], eax
    MOV rdi, r8
    CALL sub_41D800
    MOV eax, dword ptr [rsp+68h+n]
    JMP loc_45FE90
loc_460170:
    ADD rsp, 38h
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_460180:
    MOV rsi, r12
    MOV rdi, r15
    CALL sub_42C9E0
    JMP loc_45FFC8
loc_460190:
    MOV rsi, r14
    MOV rdi, r15
    CALL sub_42C9E0
    JMP loc_45FFC8
loc_4601A0:
    MOV rsi, r14
    MOV rdi, r15
    CALL sub_42C9E0
    JMP loc_45FFC8
loc_4601B0:
    MOV rsi, r14
    MOV rdi, r15
    CALL sub_42C9E0
    JMP loc_45FFC8
loc_4601C0:
    MOV rsi, r14
    MOV rdi, r15
    CALL sub_42C9E0
    JMP loc_45FFC8
loc_4601D0:
############
```assembly
loc_425980:
    LEA rax, [rdi+180h]
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Pointer",
  "dominant_operation_categories": [
    "DataMovement"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x180"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_429570:
    MOV rax, [rdi+6B8h]
    TEST rax, rax
    JZ loc_429590
loc_42957C:
    CMP dword ptr [rax+4024h], 2
    SETNZ al
    RETN 
loc_429590:
    XOR eax, eax
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "Comparison",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x6B8",
    "0x4024",
    "2"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 3,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Decision Tree",
  "inferred_category": "Control Flow"
}
```
############
```assembly
loc_711EC0:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST rdi, rdi
    JZ loc_711FC3
loc_711ECF:
    MOV rbx, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+1078h], rax
    JNZ loc_711FAA
loc_711EE4:
    MOV eax, [rdi+1070h]
    MOV rbp, rsi
    TEST eax, eax
    JNZ loc_711F80
loc_711EF5:
    TEST rbp, rbp
    JZ loc_711FDC
loc_711EFE:
    MOV rax, [rbx+1010h]
    MOV [rbp+0], rax
    MOV rax, [rbx+1018h]
    MOV [rbp+8], rax
    MOV rax, [rbx+1020h]
    MOV [rbp+10h], rax
    MOV rax, [rbx+1028h]
    MOV [rbp+18h], rax
    MOV rax, [rbx+1030h]
    MOV [rbp+20h], rax
    MOV rax, [rbx+1038h]
    MOV [rbp+28h], rax
    MOV rax, [rbx+1040h]
    MOV [rbp+30h], rax
    MOV rax, [rbx+1048h]
    MOV [rbp+38h], rax
    MOV rax, [rbx+1050h]
    MOV [rbp+40h], rax
    MOV rax, [rbx+1058h]
    MOV [rbp+48h], rax
    MOV rax, [rbx+1060h]
    MOV [rbp+50h], rax
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_711F80:
    LEA r9, [rdi+8]
    MOV r8d, 83B44Eh
    MOV ecx, 4AEh
    MOV edx, offset aPixelgetmagick
    MOV esi, offset aMagickwandPixe
    MOV edi, 40000h
    XOR eax, eax
    CALL sub_41B3E0
    JMP loc_711EF5
loc_711FAA:
    MOV ecx, offset aPixelgetmagick_0
    MOV edx, 4ACh
    MOV esi, offset aMagickwandPixe
    MOV edi, offset aWandSignatureM
    CALL ___assert_fail
loc_711FC3:
    MOV ecx, offset aPixelgetmagick_0
    MOV edx, 4ABh
    MOV esi, offset aMagickwandPixe
    MOV edi, offset aWandConstPixel
    CALL ___assert_fail
loc_711FDC:
    MOV ecx, offset aPixelgetmagick_0
    MOV edx, 4AFh
    MOV esi, offset aMagickwandPixe
    MOV edi, offset aColorPixelinfo
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "ConditionalBranching",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xABACADAB",
    "0x1078",
    "0x1070",
    "0x1010",
    "0x1018",
    "0x1020",
    "0x1028",
    "0x1030",
    "0x1038",
    "0x1040",
    "0x1048",
    "0x1050",
    "0x1058",
    "0x1060",
    "0x8",
    "0x4AE",
    "0x4ACh",
    "0x4AB",
    "0x4AF",
    "0x40000",
    "0x83B44E"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 24,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_4B1290:
    MOV edi, offset aJson
    JMP sub_420530
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "offset aJson"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility"
}
```
############
```assembly
loc_41DB10:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    TEST rdi, rdi
    JZ loc_41DCC2
loc_41DB27:
    MOV r14, rsi
    MOV r13, rdi
    MOV rbx, rdx
    MOV r9, rdi
    XOR eax, eax
    MOV r8d, 83B44Eh
    MOV ecx, 316h
    MOV edx, offset aGetmagicklist
    MOV esi, offset aMagickcoreMagi
    MOV edi, 8000h
    CALL sub_41B3E0
    TEST r14, r14
    JZ loc_41DCA9
loc_41DB5D:
    MOV qword ptr [r14], 0
    MOV rsi, rbx
    MOV edi, (offset aXpm+6)
    CALL sub_41D750
    TEST rax, rax
    JZ loc_41DC86
loc_41DB7A:
    MOV rdi, cs:qword_A983F0
    CALL sub_44F3B0
    MOV esi, 8
    LEA rdi, [rax+1]
    CALL sub_4206C0
    MOV r12, rax
    TEST rax, rax
    JZ loc_41DC86
loc_41DBA0:
    MOV rdi, cs:qword_A98600
    CALL sub_44C8E0
    MOV rdi, cs:qword_A983F0
    CALL sub_44FD80
    MOV rdi, cs:qword_A983F0
    CALL sub_44F060
    MOV r15, rax
    TEST rax, rax
    JZ loc_41DC8A
loc_41DBD0:
    MOV ebx, 0ABACADABh
    CMP [rax+60h], rbx
    JNZ loc_41DC90
loc_41DBDF:
    XOR ebp, ebp
    JMP loc_41DC06
loc_41DBE8:
    MOV rdi, cs:qword_A983F0
    CALL sub_44F060
    MOV r15, rax
    TEST rax, rax
    JZ loc_41DC40
loc_41DBFC:
    CMP [r15+60h], rbx
    JNZ loc_41DC90
loc_41DC06:
    TEST byte ptr [r15+54h], 80h
    JNZ loc_41DBE8
loc_41DC0D:
    MOV rdi, [r15]
    XOR edx, edx
    MOV rsi, r13
    CALL sub_45D100
    TEST eax, eax
    JZ loc_41DBE8
loc_41DC1E:
    MOV rdi, [r15]
    LEA rax, [rbp+1]
    MOV [rsp+48h+var_40], rax
    LEA rbp, [r12+rbp*8]
    CALL sub_459690
    MOV [rbp+0], rax
    MOV rbp, [rsp+48h+var_40]
    JMP loc_41DBE8
loc_41DC40:
    LEA rbx, ds:0[rbp*8]
loc_41DC48:
    MOV rdi, cs:qword_A98600
    CALL sub_44CA80
    MOV ecx, offset sub_41D150
    MOV rsi, rbp
    MOV rdi, r12
    MOV edx, 8
    CALL _qsort
    MOV qword ptr [r12+rbx], 0
    MOV rax, r12
    MOV [r14], rbp
loc_41DC77:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41DC86:
    XOR eax, eax
    JMP loc_41DC77
loc_41DC8A:
    XOR ebx, ebx
    XOR ebp, ebp
    JMP loc_41DC48
loc_41DC90:
    MOV ecx, offset aGetmagicksteal
    MOV edx, 3A0h
    MOV esi, offset aMagickcoreMagi
    MOV edi, offset aMagickInfoSign
    CALL ___assert_fail
loc_41DCA9:
    MOV ecx, offset aGetmagicklist_0
    MOV edx, 317h
    MOV esi, offset aMagickcoreMagi
    MOV edi, offset aNumberFormatsS
    CALL ___assert_fail
loc_41DCC2:
    MOV ecx, offset aGetmagicklist_0
    MOV edx, 315h
    MOV esi, offset aMagickcoreMagi
    MOV edi, offset aPatternCharNul
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Pointer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 10,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x83B44E",
    "0x316",
    "0x50",
    "0x2",
    "0x8000",
    "0xABACADAB",
    "0x60",
    "0x54",
    "0x80",
    "0x6",
    "0xA983F0",
    "0xA98600",
    "0x1",
    "0x4",
    "0x8",
    "0x10",
    "0x20",
    "0x30",
    "0x40",
    "0x50",
    "0x60",
    "0x70",
    "0x80",
    "0x90",
    "0xA0",
    "0xB0",
    "0xC0",
    "0xD0",
    "0xE0",
    "0xF0",
    "0x100",
    "0x110",
    "0x120",
    "0x130",
    "0x140",
    "0x150",
    "0x160",
    "0x170",
    "0x180",
    "0x190",
    "0x1A0",
    "0x1B0",
    "0x1C0",
    "0x1D0",
    "0x1E0",
    "0x1F0",
    "0x200",
    "0x210",
    "0x220",
    "0x230",
    "0x2
############
```assembly
loc_5243A0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 78h
    MOV rax, fs:28h
    MOV [rsp+0A8h+var_40], rax
    XOR eax, eax
    CMP esi, 1Dh
    MOV eax, 0FFFFFFFEh
    JNZ loc_5243E4
loc_5243C8:
    TEST rdi, rdi
    MOV rbx, rdi
    JZ loc_5243E2
loc_5243D0:
    MOV ebp, edx
    MOV r12, rcx
    CALL sub_5237C0
    CMP ebp, 30h
    MOV r13, rax
    JZ loc_524410
loc_5243E2:
    XOR eax, eax
loc_5243E4:
    MOV rcx, [rsp+0A8h+var_40]
    XOR rcx, fs:28h
    JNZ loc_5245A8
loc_5243F8:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_524410:
    MOV rdi, rbx
    CALL sub_5237C0
    MOV edx, 30h
    MOV rsi, r12
    MOV rdi, rax
    MOV rbp, rax
    CALL sub_534CB0
    TEST eax, eax
    JZ loc_5243E2
loc_52442F:
    LEA rdi, [rbp+5Ch]
    MOV edx, 30h
    MOV rsi, r12
    CALL sub_56E760
    TEST eax, eax
    JLE loc_5243E2
loc_524444:
    LEA rbp, [rsp+0A8h+var_78]
    MOV rax, 3636363636363636h
    MOV edx, 30h
    MOV rdi, r13
    MOV [rsp+0A8h+var_78], rax
    MOV [rsp+0A8h+var_70], rax
    MOV rsi, rbp
    MOV [rsp+0A8h+var_68], rax
    MOV [rsp+0A8h+var_60], rax
    MOV [rsp+0A8h+var_58], rax
    MOV [rsp+0A8h+var_50], rax
    CALL sub_534CB0
    TEST eax, eax
    JZ loc_5243E2
loc_524489:
    MOV rsi, r13
    MOV rdi, rsp
    CALL sub_534ED0
    TEST eax, eax
    JZ loc_5243E2
loc_52449C:
    LEA r14, [r13+5Ch]
    MOV edx, 28h
    MOV rsi, rbp
    MOV rdi, r14
    CALL sub_56E760
    TEST eax, eax
    JZ loc_5243E2
loc_5244B8:
    LEA rdi, [rsp+0A8h+var_98]
    MOV rsi, r14
    CALL sub_56E980
    TEST eax, eax
    JZ loc_5243E2
loc_5244CD:
    MOV rdi, rbx
    CALL sub_5237C0
    MOV rdi, rax
    MOV r15, rax
    CALL sub_534490
    TEST eax, eax
    JZ loc_5243E2
loc_5244E8:
    LEA rdi, [r15+5Ch]
    CALL sub_56EBB0
    TEST eax, eax
    JZ loc_5243E2
loc_5244F9:
    MOV edx, 30h
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_5242D0
    TEST eax, eax
    JLE loc_5243E2
loc_524511:
    MOV eax, 5Ch
    MOV ecx, 30h
    MOV rdi, rbp
    REP 
    MOV edx, 30h
    MOV rsi, rbp
    MOV rdi, r13
    CALL sub_534CB0
    TEST eax, eax
    JZ loc_5243E2
loc_524538:
    MOV edx, 10h
    MOV rsi, rsp
    MOV rdi, r13
    CALL sub_534CB0
    TEST eax, eax
    JZ loc_5243E2
loc_524550:
    MOV edx, 28h
    MOV rsi, rbp
    MOV rdi, r14
    CALL sub_56E760
    TEST eax, eax
    JZ loc_5243E2
loc_524568:
    LEA rsi, [rsp+0A8h+var_98]
    MOV edx, 14h
    MOV rdi, r14
    CALL sub_56E760
    TEST eax, eax
    JZ loc_5243E2
loc_524582:
    MOV esi, 10h
    MOV rdi, rsp
    CALL sub_535850
    LEA rdi, [rsp+0A8h+var_98]
    MOV esi, 14h
    CALL sub_535850
    MOV eax, 1
    JMP loc_5243E4
loc_5245A8:
    CALL sub_64A0B0
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Integer",
    "Integer"
  ],
  "return_value_type": "Boolean",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 14,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x1D",
    "0xFFFFFFFE",
    "0x30",
    "0x28",
    "0x5C",
    "0x10",
    "0x14"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 11,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Complex Data Processing"
}
```
############
```assembly
loc_6024D0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r12, rsi
    PUSH rbp
    PUSH rbx
    MOV r13, rdi
    MOV rbp, rsi
    SUB rsp, 28h
    MOV r8, [rdi+18h]
    MOV rax, [rdi+60h]
    SUB r12, r8
    TEST rax, rax
    JZ loc_602631
loc_6024FB:
    MOV rbx, r12
    MOV rcx, rax
    NOP dword ptr [rax+00000000h]
loc_602508:
    MOVSXD rdi, dword ptr [rcx+10h]
    MOV rcx, [rcx]
    CMP rbx, rdi
    CMOVG rbx, rdi
    TEST rcx, rcx
    JNZ loc_602508
loc_60251B:
    MOV rsi, [r13+58h]
    MOV r15, [r13+48h]
    MOV rdx, r12
    SUB rdx, rbx
    MOV r14, rsi
    SUB r14, r15
    CMP rdx, r14
    JA loc_602580
loc_602534:
    SUB r14, rdx
    TEST rbx, rbx
    JS loc_60264B
loc_602540:
    TEST rdx, rdx
    JNZ loc_602610
loc_602549:
    ADD r14, r15
    MOV rsi, r12
loc_60254F:
    TEST rax, rax
    MOV [r13+50h], r14
    JZ loc_60256B
loc_602558:
    NOP dword ptr [rax+rax+00000000h]
loc_602560:
    SUB [rax+10h], esi
    MOV rax, [rax]
    TEST rax, rax
    JNZ loc_602560
loc_60256B:
    XOR eax, eax
loc_60256D:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_602580:
    LEA rax, [rdx+64h]
    MOV [rsp+58h+var_40], r8
    MOV [rsp+58h+var_48], rsi
    MOV [rsp+58h+var_50], rdx
    MOV rdi, rax
    MOV [rsp+58h+var_58], rax
    CALL sub_60BF80
    TEST rax, rax
    JZ loc_6026B3
loc_6025A8:
    TEST rbx, rbx
    MOV rdx, [rsp+58h+var_50]
    MOV rsi, [rsp+58h+var_48]
    MOV r8, [rsp+58h+var_40]
    JS loc_602673
loc_6025C0:
    LEA r14, [rax+64h]
    LEA rsi, [r8+rbx]
    MOV [rsp+58h+var_50], rax
    MOV rdi, r14
    CALL sub_620ED0
    MOV r9, [rsp+58h+var_50]
loc_6025DA:
    MOV rdi, r15
    MOV [rsp+58h+var_50], r9
    CALL sub_60C320
    MOV r9, [rsp+58h+var_50]
    MOV r15, [rsp+58h+var_58]
    MOV rsi, rbp
    MOV rax, [r13+60h]
    SUB rsi, [r13+18h]
    ADD r15, r9
    MOV [r13+48h], r9
    MOV [r13+58h], r15
    JMP loc_60254F
loc_602610:
    LEA rdi, [r15+r14]
    LEA rsi, [r8+rbx]
loc_602618:
    CALL sub_620ED0
    MOV rsi, rbp
    ADD r14, [r13+48h]
    SUB rsi, [r13+18h]
    MOV rax, [r13+60h]
    JMP loc_60254F
loc_602631:
    MOV rsi, [rdi+58h]
    MOV r15, [rdi+48h]
    MOV r14, rsi
    SUB r14, r15
    TEST r12, r12
    JNS loc_602549
loc_602648:
    MOV rbx, r12
loc_60264B:
    LEA rdi, [r15+r14]
    MOV rdx, rbx
    ADD rsi, rbx
    NEG rdx
    CALL sub_4003B0
    MOV rsi, [r13+18h]
    MOV rdi, r14
    MOV rdx, rbp
    SUB rdi, rbx
    ADD rdi, [r13+48h]
    SUB rdx, rsi
    JMP loc_602618
loc_602673:
    LEA r14, [rax+64h]
    MOV rdx, rbx
    ADD rsi, rbx
    NEG rdx
    MOV [rsp+58h+var_48], r8
    MOV [rsp+58h+var_50], rax
    MOV rdi, r14
    CALL sub_615410
    MOV r8, [rsp+58h+var_48]
    MOV rdx, r12
    MOV rdi, rax
    MOV rsi, r8
    CALL sub_615410
    MOV r15, [r13+48h]
    MOV r9, [rsp+58h+var_50]
    JMP loc_6025DA
loc_6026B3:
    MOV eax, 0FFFFFFFFh
    JMP loc_60256D
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 5,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xFFFFFFFF",
    "0x64"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 13,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Mathematical Computation"
}
```
############
```assembly
loc_51B0E0:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 48h
    MOV rax, fs:28h
    MOV [rsp+78h+var_40], rax
    XOR eax, eax
    MOV rax, 3FFFFFFFFFFFFFFFh
    MOV [rsp+78h+var_60], rsi
    MOV [rsp+78h+var_58], rdx
    CMP rcx, rax
    MOV [rsp+78h+var_50], rcx
    JBE loc_51B2D4
loc_51B123:
    MOV r14, rcx
    MOV r12, rdx
    MOV rbp, rsi
    MOV [rsp+78h+var_68], rax
    NOP dword ptr [rax+00000000h]
loc_51B138:
    MOV rdi, rbx
    CALL sub_5234B0
    MOV rdi, rbx
    MOV [rsp+78h+var_44], eax
    CALL sub_5233F0
    MOV rdi, rbx
    MOV [rsp+78h+var_6C], eax
    CALL sub_523490
    MOV rdi, rbx
    MOV [rsp+78h+var_78], rax
    CALL sub_523430
    MOV rdi, rbx
    MOV r15, rax
    CALL sub_523430
    MOV rdi, rbx
    MOV r13, rax
    CALL sub_523430
    SUB rsp, 8
    LEA r9, [r15+100h]
    LEA r8, [r13+80h]
    MOV ecx, [rsp+80h+var_6C]
    MOV rdi, r12
    PUSH rcx
    MOV rcx, rax
    LEA rsi, [rsp+88h+var_44]
    PUSH rsi
    MOV rdx, [rsp+90h+var_78]
    MOV rsi, rbp
    PUSH rdx
    MOV rdx, 4000000000000000h
    CALL sub_5C1810
    ADD rsp, 20h
    MOV esi, [rsp+78h+var_44]
    MOV rdi, rbx
    CALL sub_5234C0
    MOV rax, 0C000000000000000h
    ADD r14, rax
    MOV rax, 4000000000000000h
    ADD r12, rax
    ADD rbp, rax
    CMP r14, [rsp+78h+var_68]
    JA loc_51B138
loc_51B1ED:
    MOV rsi, [rsp+78h+var_50]
    MOV rax, 4000000000000000h
    MOV rbp, 3FFFFFFFFFFFFFFFh
    AND rbp, rsi
    SUB rsi, rax
    MOV rax, rsi
    SHR rax, 3Eh
    ADD rax, 1
    SHL rax, 3Eh
    ADD [rsp+78h+var_58], rax
    ADD [rsp+78h+var_60], rax
loc_51B225:
    TEST rbp, rbp
    JZ loc_51B2B0
loc_51B22E:
    MOV rdi, rbx
    CALL sub_5234B0
    MOV rdi, rbx
    MOV [rsp+78h+var_44], eax
    CALL sub_5233F0
    MOV rdi, rbx
    MOV r15d, eax
    CALL sub_523490
    MOV rdi, rbx
    MOV r14, rax
    CALL sub_523430
    MOV rdi, rbx
    MOV r13, rax
    CALL sub_523430
    MOV rdi, rbx
    MOV r12, rax
    CALL sub_523430
    SUB rsp, 8
    LEA r9, [r13+100h]
    LEA r8, [r12+80h]
    PUSH r15
    MOV rcx, rax
    LEA rdx, [rsp+88h+var_44]
    PUSH rdx
    PUSH r14
    MOV rdx, rbp
    MOV rdi, [rsp+98h+var_58]
    MOV rsi, [rsp+98h+var_60]
    CALL sub_5C1810
    ADD rsp, 20h
    MOV esi, [rsp+78h+var_44]
    MOV rdi, rbx
    CALL sub_5234C0
loc_51B2B0:
    MOV rdx, [rsp+78h+var_40]
    XOR rdx, fs:28h
    MOV eax, 1
    JNZ loc_51B2DC
loc_51B2C5:
    ADD rsp, 48h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_51B2D4:
    MOV rbp, rcx
    JMP loc_51B225
loc_51B2DC:
    CALL sub_64A0B0
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 10,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x4000000000000000",
    "0xFFFFFFFFFFFFFFFF",
    "0x1"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 13,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Complex Computation"
}
```
############
```assembly
loc_571825:
    MOV rcx, [rdi]
    MOV rax, [rdi+38h]
    MOV r15, rsi
    MOV [rsp+80h+var_88], rcx
    MOV rcx, [rdi+8]
    MOV [rsp+80h+var_50], rax
    MOV [rsp+80h+var_80], rcx
    MOV rcx, [rdi+10h]
    MOV [rsp+80h+var_78], rcx
    MOV rcx, [rdi+18h]
    MOV [rsp+80h+var_70], rcx
    MOV rcx, [rdi+20h]
    MOV [rsp+80h+var_68], rcx
    MOV rcx, [rdi+28h]
    MOV [rsp+80h+var_60], rcx
    MOV rcx, [rdi+30h]
    MOV [rsp+80h+var_58], rcx
    XCHG ax, ax
loc_571870:
    MOV rax, [r15]
    MOV rbp, [rsp+80h+var_68]
    MOV r8, [rsp+80h+var_60]
    MOV r13, [rsp+80h+var_58]
    MOV r11, [rsp+80h+var_88]
    MOV r9, [rsp+80h+var_80]
    BSWAP rax
    MOV rcx, rbp
    MOV rdx, rbp
    MOV rbx, rax
    MOV [rsp+80h+var_90], rax
    MOV rax, rbp
    ROR rax, 12h
    ROR rcx, 0Eh
    ROL rdx, 17h
    XOR rcx, rax
    MOV rax, 428A2F98D728AE22h
    MOV r14, rbp
    XOR rcx, rdx
    MOV rdx, rbx
    ADD rdx, [rsp+80h+var_50]
    NOT r14
    MOV rsi, r11
    MOV r10, [rsp+80h+var_78]
    AND r14, r13
    ROR rsi, 1Ch
    MOV rdi, [rsp+80h+var_70]
    MOV rbx, [r15+8]
    ADD rdx, rax
    LEA rax, [rcx+rdx]
    MOV rdx, rbp
    AND rdx, r8
    BSWAP rbx
    XOR r14, rdx
    MOV rdx, r11
    MOV [rsp+80h+var_F8], rbx
    LEA rcx, [rax+r14]
    ROL rdx, 1Eh
    MOV r14, r11
    XOR rsi, rdx
    ROL r14, 19h
    MOV rax, r11
    XOR rsi, r14
    MOV r14, r11
    AND rax, r9
    AND r14, r10
    MOV rdx, r9
    AND rdx, r10
    XOR r14, rax
    XOR r14, rdx
    LEA rdx, [rcx+rdi]
    MOV rdi, 7137449123EF65CDh
    ADD r14, rsi
    ADD r14, rcx
    MOV rsi, rdx
    MOV rcx, rdx
    ROR rsi, 0Eh
    ROR rcx, 12h
    XOR rcx, rsi
    MOV rsi, rdx
    ROL rsi, 17h
    XOR rcx, rsi
    MOV rsi, rbx
    MOV rbx, r10
    ADD rsi, r13
    MOV r13, rdx
    MOV r10, [r15+10h]
    ADD rdi, rsi
    NOT r13
    LEA rsi, [rcx+rdi]
    MOV rdi, rbp
    AND r13, r8
    AND rdi, rdx
    BSWAP r10
    XOR r13, rdi
    MOV [rsp+80h+var_F0], r10
    LEA rcx, [rsi+r13]
    MOV r13, r14
    MOV rsi, r14
    ROR r13, 1Ch
    ROL rsi, 1Eh
    XOR rsi, r13
    MOV r13, r14
    ADD rbx, rcx
    ROL r13, 19h
    XOR rsi, r13
    MOV r13, r11
    XOR r13, r9
    AND r13, r14
    XOR r13, rax
    MOV rax, rbx
    ADD r13, rsi
    MOV rsi, rbx
    ROR rax, 12h
    ROR rsi, 0Eh
    ADD r13, rcx
    MOV rcx, 0B5C0FBCFEC4D3B2Fh
    XOR rax, rsi
    MOV rsi, rbx
    ROL rsi, 17h
    XOR rax, rsi
    MOV rsi, r10
    MOV r10, [r15+18h]
    ADD rsi, r8
    MOV r8, r13
    LEA rdi, [rsi+rcx]
    MOV rcx, r13
    ROR r8, 1Ch
    ROL rcx, 1Eh
    BSWAP r10
    LEA rsi, [rax+rdi]
    MOV rax, rbx
    XOR r8, rcx
    MOV rdi, rdx
    MOV rcx, r13
    NOT rax
    AND rdi, rbx
    AND rax, rbp
    ROL rcx, 19h
    XOR r8, rcx
    XOR rax, rdi
    MOV rcx, r11
    ADD rax, rsi
    XOR rcx, r14
    MOV rsi, r11
    AND rsi, r14
    AND rcx, r13
    LEA r9, [rax+r9]
    XOR rcx, rsi
    MOV rdi, 0E9B5DBA58189DBBCh
    MOV [rsp+80h+var_E8], r10
    ADD rcx, r8
    MOV rsi, r9
    MOV r8, r9
    ADD rcx, rax
    MOV rax, r9
    ROR rsi, 0Eh
    ROR rax, 12h
    NOT r8
    XOR rax, rsi
    MOV rsi, r9
    AND r8, rdx
    ROL rsi, 17h
    XOR rax, rsi
    MOV rsi, r10
    MOV r10, [r15+20h]
    ADD rsi, rbp
    ADD rdi, rsi
    LEA rsi, [rax+rdi]
    MOV rdi, rbx
    BSWAP r10
    AND rdi, r9
    MOV [rsp+80h+var_E0], r10
    XOR r8, rdi
    MOV rdi, rcx
    LEA rax, [rsi+r8]
    MOV rsi, rcx
    ROR rdi, 1Ch
    ROL rsi, 1Eh
    MOV r8, rcx
    XOR rdi, rsi
    ROL r8, 19h
    MOV rsi, r14
    XOR rdi, r8
    MOV r8, r14
    AND rsi, r13
    XOR r8, r13
    LEA r12, [rax+r11]
    AND r8, rcx
    XOR r8, rsi
    MOV rsi, r12
    ADD r8, rdi
    ROR rsi, 0Eh
    MOV rdi, r9
    ADD r8, rax
    MOV rax, r12
    AND rdi, r12
    ROR rax, 12h
    XOR rsi, rax
    MOV rax, r12
    ROL rax, 17h
    XOR rsi, rax
    MOV rax, 3956C25BF348B538h
    ADD rax, r10
    ADD rdx, rax
    MOV rax, r12
    NOT rax
    ADD rdx, rsi
    MOV rsi, r8
    AND rax, rbx
    XOR rax, rdi
    MOV rdi, r8
    ADD rax, rdx
    MOV rdx, r8
    ROR rdi, 1Ch
    ROL rdx, 1Eh
    ROL rsi, 19h
    ADD r14, rax
    XOR rdi, rdx
    MOV rdx, r13
    MOV r11, r14
    XOR rdi, rsi
    MOV rsi, r13
    AND rdx, rcx
    XOR rsi, rcx
    ROR r11, 0Eh
    AND rsi, r8
    XOR rsi, rdx
    MOV rdx, r12
    ADD rsi, rdi
    MOV rdi, [r15+28h]
    AND rdx, r14
    ADD rsi, rax
    MOV rax, r14
    ROR rax, 12h
    XOR r11, rax
    MOV rax, r14
    BSWAP rdi
    ROL rax, 17h
    MOV [rsp+80h+var_D8], rdi
    XOR r11, rax
    MOV rax, 59F111F1B605D019h
    ADD rax, rdi
    MOV rdi, rsi
    ADD rbx, rax
    ROR rdi, 1Ch
    ADD rbx, r11
    MOV r11, r14
    NOT r11
    AND r11, r9
    XOR r11, rdx
    MOV rdx, rsi
    LEA rax, [rbx+r11]
    ROL rdx, 1Eh
    MOV r11, rsi
    XOR rdi, rdx
    ROL r11, 19h
    MOV rdx, rcx
    XOR rdi, r11
    MOV r11, rcx
    AND rdx, r8
    XOR r11, r8
    AND r11, rsi
    XOR r11, rdx
    ADD r13, rax
    MOV rdx, r14
    ADD r11, rdi
    MOV rbx, r13
    MOV rdi, [r15+30h]
    ADD r11, rax
    MOV rax, r13
    ROR rbx, 0Eh
    ROR rax, 12h
    AND rdx, r13
    XOR rbx, rax
    MOV rax, r13
    BSWAP rdi
    ROL rax, 17h
    MOV [rsp+80h+var_A8], rdi
    XOR rbx, rax
    MOV rax, 923F82A4AF194F9Bh
    ADD rax, rdi
    MOV rdi, r11
    ADD r9, rax
    ROR rdi, 1Ch
    ADD r9, rbx
    MOV rbx, r13
    NOT rbx
    AND rbx, r12
    XOR rbx, rdx
    MOV rdx, r11
    LEA rax, [r9+rbx]
    ROL rdx, 1Eh
    MOV rbx, r11
    XOR rdi, rdx
    ROL rbx, 19h
    MOV rdx, r8
    XOR rdi, rbx
    MOV rbx, r8
    AND rdx, rsi
    XOR rbx, rsi
    AND rbx, r11
    XOR rbx, rdx
    MOV rdx, r13
    ADD rbx, rdi
    LEA rdi, [rcx+rax]
    MOV rcx, [r15+38h]
    ADD rbx, rax
    MOV r9, rdi
    MOV rax, rdi
    ROR rax, 12h
    ROR r9, 0Eh
    BSWAP rcx
    XOR r9, rax
    MOV rax, rdi
    MOV [rsp+80h+var_D0], rcx
    ROL rax, 17h
    XOR r9, rax
    MOV rax, 0AB1C5ED5DA6D8118h
    ADD rax, rcx
    MOV rcx, rbx
    ADD r12, rax
    AND rdx, rdi
    ROR rcx, 1Ch
    ADD r12, r9
    MOV r9, rdi
    NOT r9
    AND r9, r14
    XOR r9, rdx
    MOV rdx, rbx
    LEA rax, [r12+r9]
    ROL rdx, 1Eh
    MOV r9, rbx
    XOR rcx, rdx
    ROL r9, 19h
    MOV rdx, rsi
    XOR rcx, r9
    MOV r9, rsi
    AND rdx, r11
    XOR r9, r11
    ADD r8, rax
    AND r9, rbx
    MOV r10, r8
    XOR r9, rdx
    ROR r10, 0Eh
    MOV rdx, rdi
    ADD r9, rcx
    MOV rcx, [r15+40h]
    AND rdx, r8
    ADD r9, rax
    MOV rax, r8
    ROR rax, 12h
    MOV rbp, r9
    XOR r10, rax
    MOV rax, r8
    BSWAP rcx
    ROL rax, 17h
    ROR rbp, 1Ch
    MOV [rsp+80h+var_C8], rcx
    XOR r10, rax
    MOV rax, 0D807AA98A3030242h
    ADD rax, rcx
    MOV rcx, r11
    ADD r14, rax
    MOV rax, r8
    NOT rax
    ADD r14, r10
    MOV r10, r9
    AND rax, r13
    XOR rax, rdx
    MOV rdx, r9
    ROL rdx, 1Eh
    ADD rax, r14
    XOR rbp, rdx
    ROL r10, 19h
    AND rcx, rbx
    XOR rbp, r10
    MOV r10, r11
    XOR r10, rbx
    AND r10, r9
    XOR r10, rcx
    MOV rcx, r8
    ADD r10, rbp
    LEA rbp, [rsi+rax]
    MOV rsi, [r15+48h]
    ADD r10, rax
    MOV rdx, rbp
    MOV rax, rbp
    AND rcx, rbp
    ROR rdx, 0Eh
    ROR rax, 12h
    BSWAP rsi
    XOR rax, rdx
    MOV rdx, rbp
    MOV [rsp+80h+var_C0], rsi
    ROL rdx, 17h
    XOR rax, rdx
    MOV rdx, 12835B0145706FBEh
    ADD rdx, rsi
    MOV rsi, r10
    ADD r13, rdx
    ROR rsi, 1Ch
    ADD r13, rax
    MOV rax, rbp
    NOT rax
    AND rax, rdi
    XOR rax, rcx
    MOV rcx, rbx
    LEA rdx, [r13+rax+0]
    MOV rax, r10
    AND rcx, r9
    ROL rax, 1Eh
    XOR rsi, rax
    MOV rax, r10
    ADD r11, rdx
    ROL rax, 19h
    XOR rsi, rax
    MOV rax, rbx
    XOR rax, r9
    AND rax, r10
    XOR rax, rcx
    MOV rcx, r11
    ADD rax, rsi
    ROR rcx, 0Eh
    MOV rsi, [r15+50h]
    ADD rax, rdx
    MOV rdx, r11
    ROR rdx, 12h
    XOR rcx, rdx
    MOV rdx, r11
    BSWAP rsi
    ROL rdx, 17h
    MOV [rsp+80h+var_B8], rsi
    XOR rcx, rdx
    MOV rdx, 243185BE4EE4B28Ch
    ADD rdx, rsi
    MOV rsi, rbp
    ADD rdi, rdx
    AND rsi, r11
    ADD rdi, rcx
    MOV rcx, r11
    NOT rcx
    AND rcx, r8
    XOR rcx, rsi
    MOV rsi, r9
    LEA rdx, [rdi+rcx]
    MOV rdi, rax
    MOV rcx, rax
    ROL rcx, 1Eh
    ROR rdi, 1Ch
    AND rsi, r10
    XOR rdi, rcx
    MOV rcx, rax
    ADD rbx, rdx
    ROL rcx, 19h
    XOR rdi, rcx
    MOV rcx, r9
    XOR rcx, r10
    AND rcx, rax
    XOR rcx, rsi
    ADD rcx, rdi
    MOV rdi, rbx
    ADD rcx, rdx
    MOV rdx, [r15+58h]
    ROR rdi, 0Eh
    BSWAP rdx
    MOV rsi, rdx
    MOV [rsp+80h+var_B0], rdx
    MOV rdx, rbx
    ROR rdx, 12h
    XOR rdi, rdx
    MOV rdx, rbx
    ROL rdx, 17h
    XOR rdi, rdx
    MOV rdx, 550C7DC3D5FFB4E2h
    ADD rdx, rsi
    MOV rsi, r11
    ADD r8, rdx
    AND rsi, rbx
    ADD r8, rdi
    MOV rdi, rbx
    NOT rdi
    AND rdi, rbp
    XOR rdi, rsi
    MOV rsi, rcx
    LEA rdx, [r8+rdi]
    MOV r8, rcx
    ROL rsi, 1Eh
    ROR r8, 1Ch
    MOV rdi, rcx
    XOR r8, rsi
    ROL rdi, 19h
    MOV rsi, r10
    XOR r8, rdi
    MOV rdi, r10
    AND rsi, rax
    XOR rdi, rax
    ADD r9, rdx
    AND rdi, rcx
    XOR rdi, rsi
    MOV rsi, r9
    ADD rdi, r8
    MOV r8, r9
    ROL rsi, 17h
    ADD rdi, rdx
    MOV rdx, [r15+60h]
    ROR r8, 0Eh
    MOV r13, [r15+78h]
    MOV [rsp+80h+var_40], r15
    BSWAP rdx
    MOV r14, rdx
    MOV [rsp+80h+var_98], rdx
    MOV rdx, r9
    ROR rdx, 12h
    BSWAP r13
    XOR r8, rdx
    MOV rdx, rbx
    XOR r8, rsi
    MOV rsi, 72BE5D74F27B896Fh
    AND rdx, r9
    ADD rsi, r14
    ADD rbp, rsi
    MOV rsi, r9
    NOT rsi
    ADD rbp, r8
    MOV r8, rdi
    AND rsi, r11
    ROL r8, 19h
    XOR rsi, rdx
    MOV rdx, rdi
    ADD rsi, rbp
    MOV rbp, rdi
    ROL rdx, 1Eh
    ROR rbp, 1Ch
    XOR rbp, rdx
    MOV rdx, rax
    XOR rbp, r8
    MOV r8, rax
    XOR r8, rcx
    AND r8, rdi
    AND rdx, rcx
    XOR r8, rdx
    LEA rdx, [r10+rsi]
    ADD r8, rbp
    MOV rbp, r9
    ADD r8, rsi
    MOV rsi, [r15+68h]
    MOV r10, rdx
    ROR r10, 0Eh
    AND rbp, rdx
    BSWAP rsi
    MOV r14, rsi
    MOV [rsp+80h+var_A0], rsi
    MOV rsi, rdx
    ROR rsi, 12h
    XOR r10, rsi
    MOV rsi, rdx
    ROL rsi, 17h
    XOR r10, rsi
    MOV rsi, 80DEB1FE3B1696B1h
    ADD rsi, r14
    MOV r14, [r15+70h]
    ADD r11, rsi
    MOV rsi, rdx
    NOT rsi
    ADD r11, r10
    MOV r10, r8
    AND rsi, rbx
    ROL r10, 1Eh
    BSWAP r14
    XOR rsi, rbp
    MOV rbp, r8
    ROR rbp, 1Ch
    ADD rsi, r11
    MOV r11, rcx
    XOR rbp, r10
    MOV r10, r8
    AND r11, rdi
    ROL r10, 19h
    ADD rax, rsi
    XOR rbp, r10
    MOV r10, rcx
    XOR r10, rdi
    AND r10, r8
    XOR r10, r11
    MOV r11, rax
    ADD r10, rbp
    ROR r11, 0Eh
    MOV rbp, rdx
    ADD r10, rsi
    MOV rsi, rax
    ROR rsi, 12h
    XOR r11, rsi
    MOV rsi, rax
    ROL rsi, 17h
    XOR r11, rsi
    MOV rsi, 9BDC06A725C71235h
    AND rbp, rax
    ADD rsi, r14
    ADD rbx, rsi
    MOV rsi, rax
    NOT rsi
    ADD rbx, r11
    MOV r11, r10
    AND rsi, r9
    ROL r11, 1Eh
    XOR rsi, rbp
    MOV rbp, r10
    ROR rbp, 1Ch
    ADD rsi, rbx
    MOV rbx, rdi
    XOR rbp, r11
    MOV r11, r10
    AND rbx, r8
    ROL r11, 19h
    ADD rcx, rsi
    XOR rbp, r11
    MOV r11, rdi
    MOV r12, rcx
    XOR r11, r8
    ROR r12, 0Eh
    AND r11, r10
    XOR r11, rbx
    MOV rbx, rax
    ADD r11, rbp
    AND rbx, rcx
    ADD r11, rsi
    MOV rsi, rcx
    ROR rsi, 12h
    XOR r12, rsi
    MOV rsi, rcx
    ROL rsi, 17h
    XOR r12, rsi
    MOV rsi, 0C19BF174CF692694h
    ADD rsi, r13
    ADD r9, rsi
    MOV rsi, rcx
    NOT rsi
    ADD r9, r12
    MOV r12, r11
    AND rsi, rdx
    XOR rsi, rbx
    MOV rbx, r11
    ADD rsi, r9
    MOV r9, r11
    ROR rbx, 1Ch
    ROL r9, 1Eh
    ROL r12, 19h
    ADD rdi, rsi
    XOR rbx, r9
    MOV r9, r8
    XOR rbx, r12
    MOV r12, r8
    AND r9, r10
    XOR r12, r10
    AND r12, r11
    XOR r12, r9
    MOV r9d, offset unk_70AD00
    ADD r12, rbx
    ADD r12, rsi
loc_572114:
    MOV r15, [rsp+80h+var_F8]
    MOV rbp, r14
    ROR rbp, 13h
    MOV rbx, r15
    MOV rsi, r15
    ROR rsi, 8
    ROR rbx, 1
    XOR rbx, rsi
    MOV rsi, r15
    SHR rsi, 7
    XOR rbx, rsi
    MOV rsi, r14
    ROL rsi, 3
    XOR rbp, rsi
    MOV rsi, r14
    SHR rsi, 6
    XOR rsi, rbp
    MOV rbp, rdi
    ADD rsi, rbx
    ADD rsi, [rsp+80h+var_C0]
    MOV rbx, rdi
    ADD [rsp+80h+var_90], rsi
    MOV rsi, rdi
    ROR rbx, 0Eh
    ROR rsi, 12h
    NOT rbp
    MOV r15, [rsp+80h+var_90]
    XOR rbx, rsi
    MOV rsi, rdi
    AND rbp, rax
    ROL rsi, 17h
    XOR rbx, rsi
    MOV rsi, rdi
    AND rsi, rcx
    XOR rsi, rbp
    MOV rbp, r11
    ADD rbx, rsi
    ADD rbx, [r9+80h]
    ADD rbx, r15
    ADD rdx, rbx
    MOV rbx, r12
    AND rbx, r11
    MOV rsi, rbx
    MOV rbx, r12
    ROR rbx, 1Ch
    MOV r15, rbx
    MOV rbx, r12
    ROL rbx, 1Eh
    XOR r15, rbx
    MOV rbx, r12
    ROL rbx, 19h
    XOR r15, rbx
    MOV rbx, r12
    AND rbx, r10
    XOR rbx, rsi
    AND rbp, r10
    ADD r8, rdx
    XOR rbx, rbp
    ADD rax, [r9+88h]
    ADD rbx, r15
    MOV r15, [rsp+80h+var_F0]
    ADD rbx, rdx
    MOV rdx, r15
    ROR rdx, 1
    MOV rbp, rdx
    MOV rdx, r15
    ROR rdx, 8
    XOR rdx, rbp
    MOV rbp, r15
    MOV r15, r13
    SHR rbp, 7
    ROR r15, 13h
    XOR rdx, rbp
    MOV rbp, r13
    ADD rdx, [rsp+80h+var_B8]
    ADD rdx, [rsp+80h+var_F8]
    ROL rbp, 3
    XOR r15, rbp
    MOV rbp, r13
    SHR rbp, 6
    XOR rbp, r15
    MOV r15, [rsp+80h+var_E8]
    ADD rdx, rbp
    MOV [rsp+80h+var_F8], rdx
    MOV rdx, r8
    ROR rdx, 0Eh
    MOV rbp, rdx
    MOV rdx, r8
    ROR rdx, 12h
    XOR rbp, rdx
    MOV rdx, r8
    ROL rdx, 17h
    XOR rbp, rdx
    MOV rdx, [rsp+80h+var_F8]
    ADD rdx, rax
    MOV rax, r8
    NOT rax
    ADD rbp, rdx
    MOV rdx, rax
    MOV rax, r8
    AND rax, rdi
    AND rdx, rcx
    XOR rdx, rax
    MOV rax, rbx
    ROR rax, 1Ch
    ADD rdx, rbp
    MOV rbp, rax
    MOV rax, rbx
    ROL rax, 1Eh
    ADD r10, rdx
    ADD rcx, [r9+90h]
    XOR rbp, rax
    MOV rax, rbx
    ROL rax, 19h
    XOR rbp, rax
    MOV rax, r12
    XOR rax, r11
    AND rax, rbx
    XOR rax, rsi
    ADD rax, rbp
    ADD rax, rdx
    MOV rdx, r15
    ROR rdx, 1
    MOV rsi, rdx
    MOV rdx, r15
    ROR rdx, 8
    XOR rdx, rsi
    MOV rsi, r15
    MOV r15, [rsp+80h+var_90]
    SHR rsi, 7
    XOR rdx, rsi
    ADD rdx, [rsp+80h+var_B0]
    MOV rbp, r15
    MOV rsi, r15
    ADD rdx, [rsp+80h+var_F0]
    ROL rsi, 3
    ROR rbp, 13h
    XOR rbp, rsi
    MOV rsi, r15
    SHR rsi, 6
    XOR rsi, rbp
    LEA rbp, [rsi+rdx]
    MOV rdx, r10
    ROR rdx, 0Eh
    MOV rsi, rdx
    MOV rdx, r10
    MOV [rsp+80h+var_F0], rbp
    ROR rdx, 12h
    MOV rbp, [rsp+80h+var_F0]
    XOR rsi, rdx
    MOV rdx, r10
    ROL rdx, 17h
    XOR rsi, rdx
    LEA rdx, [rcx+rbp]
    MOV rcx, r10
    NOT rcx
    ADD rsi, rdx
    MOV rdx, rcx
    MOV rcx, r8
    AND rcx, r10
    AND rdx, rdi
    XOR rdx, rcx
    MOV rcx, rax
    ADD rdx, rsi
    ROR rcx, 1Ch
    MOV rsi, rbx
    MOV rbp, rcx
    MOV rcx, rax
    AND rsi, r12
    ROL rcx, 1Eh
    ADD r11, rdx
    ADD rdi, [r9+98h]
    XOR rbp, rcx
    MOV rcx, rax
    ROL rcx, 19h
    XOR rbp, rcx
    MOV rcx, rbx
    XOR rcx, r12
    AND rcx, rax
    XOR rcx, rsi
    ADD rcx, rbp
    MOV rbp, [rsp+80h+var_E0]
    ADD rcx, rdx
    MOV rdx, rbp
    ROR rdx, 1
    MOV rsi, rdx
    MOV rdx, rbp
    ROR rdx, 8
    XOR rdx, rsi
    MOV rsi, rbp
    SHR rsi, 7
    XOR rdx, rsi
    MOV rsi, [rsp+80h+var_F8]
    ADD rdx, [rsp+80h+var_98]
    ADD rdx, [rsp+80h+var_E8]
    MOV rbp, rsi
    ROL rsi, 3
    ROR rbp, 13h
    XOR rbp, rsi
    MOV rsi, [rsp+80h+var_F8]
    SHR rsi, 6
    XOR rsi, rbp
    ADD rdx, rsi
    MOV [rsp+80h+var_E8], rdx
    MOV rdx, r11
    ROR rdx, 0Eh
    MOV rsi, rdx
    MOV rdx, r11
    ROR rdx, 12h
    XOR rsi, rdx
    MOV rdx, r11
    ROL rdx, 17h
    XOR rsi, rdx
    MOV rdx, [rsp+80h+var_E8]
    ADD rdx, rdi
    MOV rdi, r11
    NOT rdi
    ADD rsi, rdx
    MOV rdx, rdi
    MOV rdi, r10
    AND rdi, r11
    AND rdx, r8
    XOR rdx, rdi
    MOV rdi, rcx
    ROR rdi, 1Ch
    ADD rdx, rsi
    MOV rsi, rbx
    MOV rbp, rdi
    MOV rdi, rcx
    AND rsi, rax
    ROL rdi, 1Eh
    ADD r12, rdx
    XOR rbp, rdi
    MOV rdi, rcx
    ROL rdi, 19h
    XOR rbp, rdi
    MOV rdi, rbx
    XOR rdi, rax
    AND rdi, rcx
    XOR rdi, rsi
    ADD rdi, rbp
    MOV rbp, [rsp+80h+var_D8]
    ADD rdi, rdx
    MOV rdx, rbp
    ROR rdx, 1
    MOV rsi, rdx
    MOV rdx, rbp
    ROR rdx, 8
    XOR rdx, rsi
    MOV rsi, rbp
    SHR rsi, 7
    XOR rdx, rsi
    MOV rsi, [rsp+80h+var_F0]
    ADD rdx, [rsp+80h+var_A0]
    ADD rdx, [rsp+80h+var_E0]
    MOV rbp, rsi
    ROL rsi, 3
    ROR rbp, 13h
    XOR rbp, rsi
    MOV rsi, [rsp+80h+var_F0]
    SHR rsi, 6
    XOR rsi, rbp
    ADD rdx, rsi
    MOV [rsp+80h+var_E0], rdx
    MOV rdx, r12
    ROR rdx, 0Eh
    MOV rsi, rdx
    MOV rdx, r12
    ROR rdx, 12h
    ADD r8, [r9+0A0h]
    ADD r8, [rsp+80h+var_E0]
    XOR rsi, rdx
    MOV rdx, r12
    ROL rdx, 17h
    XOR rsi, rdx
    MOV rdx, r11
    AND rdx, r12
    ADD rsi, r8
    MOV r8, r12
    NOT r8
    AND r8, r10
    XOR r8, rdx
    MOV rdx, rdi
    ROR rdx, 1Ch
    ADD r8, rsi
    MOV rsi, rax
    MOV rbp, rdx
    MOV rdx, rdi
    AND rsi, rcx
    ROL rdx, 1Eh
    ADD rbx, r8
    XOR rbp, rdx
    MOV rdx, rdi
    ROL rdx, 19h
    XOR rbp, rdx
    MOV rdx, rax
    XOR rdx, rcx
    AND rdx, rdi
    XOR rdx, rsi
    ADD rdx, rbp
    MOV rbp, [rsp+80h+var_A8]
    ADD rdx, r8
    MOV rsi, rbp
    MOV r8, rbp
    ROR r8, 1
    ROR rsi, 8
    XOR rsi, r8
    MOV r8, rbp
    SHR r8, 7
    XOR rsi, r8
    MOV r8, [rsp+80h+var_E8]
    ADD rsi, r14
    ADD rsi, [rsp+80h+var_D8]
    ROR r8, 13h
    MOV rbp, r8
    MOV r8, [rsp+80h+var_E8]
    ROL r8, 3
    XOR rbp, r8
    MOV r8, [rsp+80h+var_E8]
    SHR r8, 6
    XOR r8, rbp
    ADD rsi, r8
    MOV r8, rbx
    MOV [rsp+80h+var_D8], rsi
    MOV rsi, rbx
    ROR r8, 0Eh
    ROR rsi, 12h
    XOR rsi, r8
    MOV r8, rbx
    ROL r8, 17h
    XOR rsi, r8
    MOV r8, [rsp+80h+var_D8]
    ADD r8, [r9+0A8h]
    ADD r10, r8
    LEA r8, [rsi+r10]
    MOV r10, rbx
    NOT r10
    MOV rsi, r10
    MOV r10, r12
    AND r10, rbx
    AND rsi, r11
    XOR rsi, r10
    MOV r10, rdx
    ROR r10, 1Ch
    ADD rsi, r8
    MOV r8, rcx
    MOV rbp, r10
    MOV r10, rdx
    AND r8, rdi
    ROL r10, 1Eh
    ADD rax, rsi
    XOR rbp, r10
    MOV r10, rdx
    ROL r10, 19h
    XOR rbp, r10
    MOV r10, rcx
    XOR r10, rdi
    AND r10, rdx
    XOR r10, r8
    ADD r10, rbp
    MOV rbp, [rsp+80h+var_D0]
    ADD r10, rsi
    MOV r8, rbp
    MOV rsi, rbp
    ROR r8, 1
    ROR rsi, 8
    XOR rsi, r8
    MOV r8, rbp
    SHR r8, 7
    XOR rsi, r8
    MOV r8, [rsp+80h+var_E0]
    ADD rsi, r13
    ADD rsi, [rsp+80h+var_A8]
    MOV rbp, r8
    ROL r8, 3
    ROR rbp, 13h
    XOR rbp, r8
    MOV r8, [rsp+80h+var_E0]
    SHR r8, 6
    XOR r8, rbp
    ADD rsi, r8
    MOV r8, rax
    MOV rbp, rsi
    MOV rsi, rax
    ROR r8, 0Eh
    ROR rsi, 12h
    MOV [rsp+80h+var_A8], rbp
    XOR r8, rsi
    MOV rsi, rax
    ROL rsi, 17h
    XOR r8, rsi
    MOV rsi, rbp
    ADD rsi, [r9+0B0h]
    ADD r11, rsi
    MOV rsi, rbx
    ADD r8, r11
    MOV r11, rax
    AND rsi, rax
    NOT r11
    AND r11, r12
    XOR r11, rsi
    ADD r11, r8
    MOV r8, r10
    ROR r8, 1Ch
    ADD rcx, r11
    MOV rbp, r8
    MOV r8, r10
    ROL r8, 1Eh
    XOR rbp, r8
    MOV r8, r10
    ROL r8, 19h
    XOR rbp, r8
    MOV r8, rdi
    XOR r8, rdx
    MOV rsi, r8
    MOV r8, rdi
    AND r8, rdx
    AND rsi, r10
    XOR rsi, r8
    ADD rsi, rbp
    MOV rbp, [rsp+80h+var_C8]
    ADD rsi, r11
    MOV r8, rbp
    MOV r11, rbp
    ROR r11, 1
    ROR r8, 8
    XOR r8, r11
    MOV r11, rbp
    SHR r11, 7
    XOR r8, r11
    MOV r11, [rsp+80h+var_D8]
    ADD r8, r15
    ADD r8, [rsp+80h+var_D0]
    MOV rbp, r11
    ROL r11, 3
    ROR rbp, 13h
    XOR rbp, r11
    MOV r11, [rsp+80h+var_D8]
    SHR r11, 6
    XOR r11, rbp
    ADD r8, r11
    MOV [rsp+80h+var_D0], r8
    MOV r8, rcx
    MOV rbp, [rsp+80h+var_D0]
    ROR r8, 0Eh
    ADD rbp, [r9+0B8h]
    MOV r11, r8
    MOV r8, rcx
    ROR r8, 12h
    XOR r8, r11
    MOV r11, rcx
    ROL r11, 17h
    ADD r12, rbp
    XOR r8, r11
    LEA r11, [r8+r12]
    MOV r12, rcx
    NOT r12
    MOV r8, r12
    MOV r12, rax
    AND r12, rcx
    AND r8, rbx
    XOR r8, r12
    MOV r12, rsi
    ROR r12, 1Ch
    ADD r8, r11
    MOV r11, rdx
    MOV rbp, r12
    MOV r12, rsi
    AND r11, r10
    ROL r12, 1Eh
    XOR rbp, r12
    MOV r12, rsi
    ROL r12, 19h
    XOR rbp, r12
    MOV r12, rdx
    XOR r12, r10
    AND r12, rsi
    XOR r12, r11
    ADD rdi, r8
    ADD r12, rbp
    MOV rbp, [rsp+80h+var_C0]
    ADD r12, r8
    MOV r8, rbp
    ROR r8, 1
    MOV r11, r8
    MOV r8, rbp
    ROR r8, 8
    XOR r8, r11
    MOV r11, rbp
    SHR r11, 7
    XOR r8, r11
    MOV r11, [rsp+80h+var_A8]
    ADD r8, [rsp+80h+var_F8]
    ADD r8, [rsp+80h+var_C8]
    MOV rbp, r11
    ROL r11, 3
    ROR rbp, 13h
    XOR rbp, r11
    MOV r11, [rsp+80h+var_A8]
    SHR r11, 6
    XOR r11, rbp
    ADD r8, r11
    MOV [rsp+80h+var_C8], r8
    MOV r8, rdi
    MOV rbp, [rsp+80h+var_C8]
    ROR r8, 0Eh
    ADD rbp, [r9+0C0h]
    MOV r11, r8
    MOV r8, rdi
    ROR r8, 12h
    XOR r8, r11
    MOV r11, rdi
    ROL r11, 17h
    ADD rbx, rbp
    XOR r8, r11
    LEA r11, [r8+rbx]
    MOV rbx, rdi
    NOT rbx
    MOV r8, rbx
    MOV rbx, rcx
    AND rbx, rdi
    AND r8, rax
    XOR r8, rbx
    MOV rbx, r12
    ROR rbx, 1Ch
    ADD r8, r11
    MOV r11, r10
    MOV rbp, rbx
    MOV rbx, r12
    ROL rbx, 1Eh
    XOR rbp, rbx
    MOV rbx, r12
    ROL rbx, 19h
    XOR rbp, rbx
    MOV rbx, r10
    AND r11, rsi
    XOR rbx, rsi
    ADD rdx, r8
    AND rbx, r12
    XOR rbx, r11
    ADD rbx, rbp
    MOV rbp, [rsp+80h+var_B8]
    ADD rbx, r8
    MOV r8, rbp
    ROR r8, 1
    MOV r11, r8
    MOV r8, rbp
    ROR r8, 8
    XOR r8, r11
    MOV r11, rbp
    SHR r11, 7
    XOR r8, r11
    ADD r8, [rsp+80h+var_F0]
    MOV r11, [rsp+80h+var_D0]
    ADD r8, [rsp+80h+var_C0]
    MOV rbp, r11
    ROL r11, 3
    ROR rbp, 13h
    XOR rbp, r11
    MOV r11, [rsp+80h+var_D0]
    SHR r11, 6
    XOR r11, rbp
    ADD r8, r11
    MOV [rsp+80h+var_C0], r8
    MOV r8, rdx
    MOV rbp, [rsp+80h+var_C0]
    ROR r8, 0Eh
    ADD rbp, [r9+0C8h]
    MOV r11, r8
    MOV r8, rdx
    ROR r8, 12h
    XOR r8, r11
    MOV r11, rdx
    ROL r11, 17h
    ADD rax, rbp
    XOR r8, r11
    LEA r11, [r8+rax]
    MOV rax, rdx
    NOT rax
    MOV r8, rax
    MOV rax, rdi
    AND rax, rdx
    AND r8, rcx
    XOR r8, rax
    MOV rax, rbx
    ADD r8, r11
    ROR rax, 1Ch
    MOV r11, rsi
    MOV rbp, rax
    MOV rax, rbx
    AND r11, r12
    ROL rax, 1Eh
    ADD r10, r8
    XOR rbp, rax
    MOV rax, rbx
    ROL rax, 19h
    XOR rbp, rax
    MOV rax, rsi
    XOR rax, r12
    AND rax, rbx
    XOR rax, r11
    ADD rax, rbp
    MOV rbp, [rsp+80h+var_B0]
    ADD rax, r8
    MOV r8, rbp
    ROR r8, 1
    MOV r11, r8
    MOV r8, rbp
    ROR r8, 8
    XOR r8, r11
    MOV r11, rbp
    SHR r11, 7
    XOR r8, r11
    MOV r11, [rsp+80h+var_C8]
    ADD r8, [rsp+80h+var_E8]
    ADD r8, [rsp+80h+var_B8]
    MOV rbp, r11
    ROL r11, 3
    ROR rbp, 13h
    XOR rbp, r11
    MOV r11, [rsp+80h+var_C8]
    SHR r11, 6
    XOR r11, rbp
    MOV rbp, r10
    ADD r8, r11
    ROL rbp, 17h
    MOV [rsp+80h+var_B8], r8
    MOV r8, r10
    ROR r8, 0Eh
    MOV r11, r8
    MOV r8, r10
    ROR r8, 12h
    XOR r8, r11
    XOR r8, rbp
    MOV rbp, [rsp+80h+var_B8]
    ADD rbp, [r9+0D0h]
    ADD rcx, rbp
    LEA r11, [r8+rcx]
    MOV rcx, r10
    NOT rcx
    MOV r8, rcx
    MOV rcx, rdx
    AND r8, rdi
    AND rcx, r10
    XOR r8, rcx
    MOV rcx, rax
    ROR rcx, 1Ch
    ADD r8, r11
    MOV r11, r12
    MOV rbp, rcx
    MOV rcx, rax
    AND r11, rbx
    ROL rcx, 1Eh
    ADD rsi, r8
    XOR rbp, rcx
    MOV rcx, rax
    ROL rcx, 19h
    XOR rbp, rcx
    MOV rcx, r12
    XOR rcx, rbx
    AND rcx, rax
    XOR rcx, r11
    ADD rcx, rbp
    MOV rbp, [rsp+80h+var_98]
    ADD rcx, r8
    MOV r8, rbp
    ROR r8, 1
    MOV r11, r8
    MOV r8, rbp
    SHR rbp, 7
    ROR r8, 8
    XOR r8, r11
    MOV r11, [rsp+80h+var_C0]
    XOR r8, rbp
    ADD r8, [rsp+80h+var_E0]
    ADD r8, [rsp+80h+var_B0]
    MOV rbp, r11
    ROL r11, 3
    ROR rbp, 13h
    XOR rbp, r11
    MOV r11, [rsp+80h+var_C0]
    SHR r11, 6
    XOR r11, rbp
    MOV rbp, rsi
    ADD r8, r11
    MOV [rsp+80h+var_B0], r8
    MOV r8, rsi
    ROR r8, 0Eh
    MOV r11, r8
    MOV r8, rsi
    ROR r8, 12h
    XOR r8, r11
    ROL rbp, 17h
    XOR r8, rbp
    MOV rbp, [rsp+80h+var_B0]
    ADD rbp, [r9+0D8h]
    ADD rdi, rbp
    LEA r11, [r8+rdi]
    MOV rdi, rsi
    NOT rdi
    MOV r8, rdi
    MOV rdi, r10
    AND rdi, rsi
    AND r8, rdx
    XOR r8, rdi
    MOV rdi, rcx
    ROR rdi, 1Ch
    ADD r8, r11
    MOV r11, rbx
    MOV rbp, rdi
    MOV rdi, rcx
    AND r11, rax
    ROL rdi, 1Eh
    ADD r12, r8
    XOR rbp, rdi
    MOV rdi, rcx
    ROL rdi, 19h
    XOR rbp, rdi
    MOV rdi, rbx
    XOR rdi, rax
    AND rdi, rcx
    XOR rdi, r11
    ADD rdi, rbp
    MOV rbp, [rsp+80h+var_A0]
    ADD rdi, r8
    MOV r8, rbp
    ROR r8, 1
    MOV r11, r8
    MOV r8, rbp
    ROR r8, 8
    XOR r8, r11
    MOV r11, rbp
    SHR r11, 7
    XOR r8, r11
    MOV r11, [rsp+80h+var_B8]
    ADD r8, [rsp+80h+var_D8]
    ADD r8, [rsp+80h+var_98]
    MOV rbp, r11
    ROL r11, 3
    ROR rbp, 13h
    XOR rbp, r11
    MOV r11, [rsp+80h+var_B8]
    SHR r11, 6
    XOR r11, rbp
    ADD r8, r11
    MOV rbp, r8
    MOV r8, r12
    ROR r8, 0Eh
    MOV [rsp+80h+var_98], rbp
    MOV r11, r8
    MOV r8, r12
    ROR r8, 12h
    XOR r11, r8
    MOV r8, r12
    ROL r8, 17h
    XOR r11, r8
    MOV r8, rbp
    ADD r8, [r9+0E0h]
    ADD rdx, r8
    MOV r8, r12
    NOT r8
    ADD rdx, r11
    MOV r11, r8
    MOV r8, rsi
    AND r8, r12
    AND r11, r10
    XOR r11, r8
    ADD r11, rdx
    MOV rdx, rdi
    ROR rdx, 1Ch
    MOV rbp, rdx
    MOV rdx, rdi
    ROL rdx, 1Eh
    XOR rbp, rdx
    MOV rdx, rdi
    ROL rdx, 19h
    XOR rbp, rdx
    MOV rdx, rax
    XOR rdx, rcx
    MOV r8, rdx
    MOV rdx, rax
    AND rdx, rcx
    AND r8, rdi
    XOR r8, rdx
    LEA rdx, [rbx+r11]
    MOV rbx, r14
    ADD r8, rbp
    MOV rbp, r14
    ROR rbx, 1
    ROR rbp, 8
    ADD r8, r11
    MOV r11, rbp
    XOR r11, rbx
    MOV rbx, r14
    SHR rbx, 7
    XOR r11, rbx
    ADD r11, [rsp+80h+var_A8]
    ADD r11, [rsp+80h+var_A0]
    MOV rbx, [rsp+80h+var_B0]
    ROR rbx, 13h
    MOV rbp, rbx
    MOV rbx, [rsp+80h+var_B0]
    ROL rbx, 3
    XOR rbp, rbx
    MOV rbx, [rsp+80h+var_B0]
    SHR rbx, 6
    XOR rbx, rbp
    MOV rbp, rdx
    ADD rbx, r11
    ROR rbp, 12h
    MOV [rsp+80h+var_A0], rbx
    MOV rbx, rdx
    MOV r11, rbp
    ROR rbx, 0Eh
    MOV rbp, rdx
    XOR r11, rbx
    MOV rbx, [rsp+80h+var_A0]
    ADD rbx, [r9+0E8h]
    ROL rbp, 17h
    XOR r11, rbp
    ADD r10, rbx
    LEA rbx, [r11+r10]
    MOV r10, rdx
    NOT r10
    MOV r11, r10
    MOV r10, r12
    AND r11, rsi
    AND r10, rdx
    XOR r11, r10
    MOV r10, r8
    ROR r10, 1Ch
    ADD r11, rbx
    MOV rbx, rcx
    MOV rbp, r10
    MOV r10, r8
    AND rbx, rdi
    ROL r10, 1Eh
    ADD rax, r11
    XOR rbp, r10
    MOV r10, r8
    ROL r10, 19h
    XOR rbp, r10
    MOV r10, rcx
    XOR r10, rdi
    AND r10, r8
    XOR r10, rbx
    ADD r10, rbp
    MOV rbp, r13
    ROR rbp, 1
    ADD r10, r11
    MOV rbx, rbp
    MOV rbp, r13
    ROR rbp, 8
    MOV r11, rbp
    MOV rbp, r13
    XOR r11, rbx
    SHR rbp, 7
    XOR r11, rbp
    ADD r11, [rsp+80h+var_D0]
    MOV rbp, [rsp+80h+var_98]
    MOV rbx, rbp
    ADD r11, r14
    MOV r14, rbp
    ROL rbx, 3
    ROR r14, 13h
    XOR r14, rbx
    MOV rbx, rbp
    MOV rbp, rax
    SHR rbx, 6
    ROR rbp, 0Eh
    XOR r14, rbx
    MOV rbx, rbp
    MOV rbp, rax
    ADD r14, r11
    MOV r11, rax
    ROL rbp, 17h
    ROR r11, 12h
    XOR rbx, r11
    MOV r11, r14
    ADD r11, [r9+0F0h]
    XOR rbx, rbp
    MOV rbp, rdx
    AND rbp, rax
    ADD rsi, r11
    MOV r11, r10
    ADD rbx, rsi
    MOV rsi, rax
    ROL r11, 1Eh
    NOT rsi
    AND rsi, r12
    XOR rsi, rbp
    MOV rbp, r10
    ROR rbp, 1Ch
    ADD rsi, rbx
    MOV rbx, rdi
    XOR rbp, r11
    MOV r11, r10
    AND rbx, r8
    ROL r11, 19h
    ADD rcx, rsi
    XOR rbp, r11
    MOV r11, rdi
    XOR r11, r8
    AND r11, r10
    XOR r11, rbx
    MOV rbx, r15
    ADD r11, rbp
    MOV rbp, rcx
    ADD r11, rsi
    MOV rsi, r15
    ROR rbx, 1
    ROR rsi, 8
    ROL rbp, 17h
    XOR rsi, rbx
    MOV rbx, r15
    MOV r15, [rsp+80h+var_A0]
    SHR rbx, 7
    XOR rsi, rbx
    ADD rsi, [rsp+80h+var_C8]
    MOV rbx, r15
    ROL rbx, 3
    ADD rsi, r13
    MOV r13, r15
    ROR r13, 13h
    XOR r13, rbx
    MOV rbx, r15
    SHR rbx, 6
    XOR r13, rbx
    MOV rbx, rcx
    ADD r13, rsi
    MOV rsi, rcx
    ROR rbx, 0Eh
    ROR rsi, 12h
    XOR rsi, rbx
    MOV rbx, r13
    ADD rbx, [r9+0F8h]
    XOR rsi, rbp
    MOV rbp, rax
    AND rbp, rcx
    ADD r12, rbx
    LEA rbx, [rsi+r12]
    MOV rsi, rcx
    MOV r12, r11
    NOT rsi
    ROL r12, 19h
    AND rsi, rdx
    XOR rsi, rbp
    MOV rbp, r11
    ADD rsi, rbx
    MOV rbx, r11
    ROR rbp, 1Ch
    ROL rbx, 1Eh
    XOR rbp, rbx
    MOV rbx, r8
    XOR rbp, r12
    MOV r12, r8
    XOR r12, r10
    AND r12, r11
    AND rbx, r10
    SUB r9, 0FFFFFFFFFFFFFF80h
    XOR r12, rbx
    ADD rdi, rsi
    ADD r12, rbp
    ADD r12, rsi
    CMP r9, offset unk_70AF00
    JNZ loc_572114
loc_572E21:
    ADD [rsp+80h+var_88], r12
    MOV rbx, [rsp+80h+var_38]
    MOV rsi, [rsp+80h+var_88]
    ADD [rsp+80h+var_80], r11
    ADD [rsp+80h+var_78], r10
    MOV r15, [rsp+80h+var_40]
    ADD [rsp+80h+var_70], r8
    SUB r15, 0FFFFFFFFFFFFFF80h
    MOV [rbx], rsi
    MOV rsi, [rsp+80h+var_80]
    ADD [rsp+80h+var_68], rdi
    ADD [rsp+80h+var_60], rcx
    ADD [rsp+80h+var_58], rax
    MOV rdi, [rsp+80h+var_60]
    MOV [rbx+8], rsi
    MOV rsi, [rsp+80h+var_78]
    MOV rcx, [rsp+80h+var_58]
    ADD [rsp+80h+var_50], rdx
    MOV [rbx+28h], rdi
    MOV [rbx+10h], rsi
    MOV rsi, [rsp+80h+var_70]
    MOV [rbx+30h], rcx
    MOV [rbx+18h], rsi
    MOV rsi, [rsp+80h+var_68]
    MOV [rbx+20h], rsi
    MOV rax, [rsp+80h+var_50]
    SUB [rsp+80h+var_48], 1
    MOV [rbx+38h], rax
    MOV rax, [rsp+80h+var_48]
    CMP rax, 0FFFFFFFFFFFFFFFFh
    JNZ loc_571870
loc_572EB1:
    ADD rsp, 50h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
```
Output:r11, r14
    XOR r11, rdx
    ROL r11, 19h
    MOV rdx, r14
    AND r11, r8
    XOR rdx, r11
    MOV r11, r14
    AND r11, r13
    XOR rdx, r11
    MOV r11, r14
    AND r11, r9
    XOR r11, rdx
    MOV rdx, r14
    AND r11, r8
    XOR rdx, r11
    MOV r11, r14
    AND r11, r13
    XOR rdx, r11
    MOV r11, r14
    AND r11, r9
    XOR rdx, r11
    MOV r11, r14
    AND r11, r8
    XOR rdx, r11
    MOV r11, r14
    AND r11, r13
    XOR rdx, r11
    MOV r11, r14
    AND r11, r9
    XOR rdx, r11
    MOV r11, r14
    AND r11, r8
    XOR rdx, r11
    MOV r11, r14
    AND r11, r13
    XOR rdx, r11
    MOV r11, r14
    AND r11, r9
    XOR rdx, r11
    MOV r11, r14
    AND r11, r8
    XOR rdx, r11
    MOV r11, r14
    AND r11, r13
    XOR rdx, r11
    MOV r11, r14
    AND r11, r9
    XOR rdx, r11
    MOV r11, r14
    AND r11, r8
    XOR rdx, r11
    MOV r11, r14
    AND r11, r13
    XOR rdx, r11
    MOV r
############
```assembly
loc_435BC0:
    PUSH rbx
    MOV esi, 60h
    MOV rbx, rdi
    CALL sub_40D5F0
    MOV rdi, rbx
    POP rbx
    JMP sub_40D570
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x60"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 3,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_43FDD0:
    SUB rsp, 8
    MOV ecx, 4421A3h
    CALL sub_43FB50
    CMP eax, 1
    SETNZ al
    ADD rsp, 8
    MOVZX eax, al
    RETN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x4421A3"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 2,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_438220:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    LEA r13, [rdi+0C0h]
    PUSH rbp
    PUSH rbx
    MOV r12, rsi
    MOV rbx, rdi
    MOVSXD rbp, edx
    MOV edx, 4
    SUB rsp, 0F8h
    MOV rax, fs:28h
    MOV [rsp+128h+var_40], rax
    XOR eax, eax
    MOV rax, rcx
    MOV [rsp+128h+var_85], cl
    LEA rsi, [rsp+128h+var_88]
    SHR rax, 18h
    MOV [rsp+128h+var_88], al
    MOV rax, rcx
    SHR rax, 10h
    MOV [rsp+128h+var_87], al
    MOV rax, rcx
    SHR rax, 8
    MOV [rsp+128h+var_86], al
    MOV rax, [rdi]
    MOV [rdi+0C0h], rax
    MOV rax, [rdi+8]
    MOV [rdi+0C8h], rax
    MOV rax, [rdi+10h]
    MOV [rdi+0D0h], rax
    MOV rax, [rdi+18h]
    MOV [rdi+0D8h], rax
    MOV rax, [rdi+20h]
    MOV [rdi+0E0h], rax
    MOV rax, [rdi+28h]
    MOV [rdi+0E8h], rax
    MOV rax, [rdi+30h]
    MOV [rdi+0F0h], rax
    MOV rax, [rdi+38h]
    MOV [rdi+0F8h], rax
    MOV rax, [rdi+40h]
    MOV [rdi+100h], rax
    MOV rax, [rdi+48h]
    MOV [rdi+108h], rax
    MOV rax, [rdi+50h]
    MOV [rdi+110h], rax
    MOV rax, [rdi+58h]
    MOV [rdi+118h], rax
    MOV rdi, r13
    CALL sub_436470
    MOV edx, ebp
    MOV rsi, r12
    MOV rdi, r13
    CALL sub_436470
    MOV rax, [rbx+0C0h]
    LEA rsi, [rsp+128h+var_58]
    LEA rdi, [rsp+128h+var_E8]
    MOV [rsp+128h+var_E8], rax
    MOV rax, [rbx+0C8h]
    MOV [rsp+128h+var_E0], rax
    MOV rax, [rbx+0D0h]
    MOV [rsp+128h+var_D8], rax
    MOV rax, [rbx+0D8h]
    MOV [rsp+128h+var_D0], rax
    MOV rax, [rbx+0E0h]
    MOV [rsp+128h+var_C8], rax
    MOV rax, [rbx+0E8h]
    MOV [rsp+128h+var_C0], rax
    MOV rax, [rbx+0F0h]
    MOV [rsp+128h+var_B8], rax
    MOV rax, [rbx+0F8h]
    MOV [rsp+128h+var_B0], rax
    MOV rax, [rbx+100h]
    MOV [rsp+128h+var_A8], rax
    MOV rax, [rbx+108h]
    MOV [rsp+128h+var_A0], rax
    MOV rax, [rbx+110h]
    MOV [rsp+128h+var_98], rax
    MOV rax, [rbx+118h]
    MOV [rsp+128h+var_90], rax
    CALL sub_436AF0
    MOV rax, [rbx+60h]
    MOV rdx, [rbx+0B0h]
    MOV [rsp+128h+var_E8], rax
    MOV rax, [rbx+68h]
    MOV [rsp+128h+var_98], rdx
    MOV [rsp+128h+var_E0], rax
    MOV rax, [rbx+70h]
    MOV [rsp+128h+var_D8], rax
    MOV rax, [rbx+78h]
    MOV [rsp+128h+var_D0], rax
    MOV rax, [rbx+80h]
    MOV [rsp+128h+var_C8], rax
    MOV rax, [rbx+88h]
    MOV [rsp+128h+var_C0], rax
    MOV rax, [rbx+90h]
    MOV [rsp+128h+var_B8], rax
    MOV rax, [rbx+98h]
    MOV [rsp+128h+var_B0], rax
    MOV rax, [rbx+0A0h]
    MOV [rsp+128h+var_A8], rax
    MOV rax, [rbx+0A8h]
    MOV [rsp+128h+var_A0], rax
    MOV rax, [rbx+0B8h]
    MOV [rsp+128h+var_90], rax
    SHR rax, 20h
    ADD eax, 14h
    CMP eax, 13h
    MOV dword ptr [rsp+128h+var_90+4], eax
    SETBE al
    SHR rdx, 20h
    MOVZX eax, al
    ADD dword ptr [rsp+128h+var_90], eax
    TEST edx, edx
    JZ loc_438497
loc_43848E:
    CMP edx, 2Bh
    JLE loc_4386D0
loc_438497:
    CMP edx, 2Bh
    JLE loc_438705
loc_4384A0:
    LEA r13, [rsp+128h+var_58]
    LEA rbx, [rsp+128h+var_D8+4]
    MOV r14d, 14h
    MOV r15d, 40h
    NOP dword ptr [rax+00000000h]
loc_4384C0:
    MOV esi, r15d
    MOVSXD rax, edx
    SUB esi, edx
    ADD rax, rbx
    MOVSXD rdx, esi
    CMP rdx, 8
    JNB loc_438650
loc_4384D8:
    TEST dl, 4
    JNZ loc_4386A0
loc_4384E1:
    TEST rdx, rdx
    JZ loc_4384F6
loc_4384E6:
    MOVZX ecx, byte ptr [r13+0]
    TEST dl, 2
    MOV [rax], cl
    JNZ loc_4386B8
loc_4384F6:
    MOV eax, r15d
    SUB eax, dword ptr [rsp+128h+var_98+4]
    LEA rdi, [rsp+128h+var_E8]
    MOV rsi, rsp
    MOVSXD rdx, eax
    SUB r14d, eax
    MOV eax, dword ptr [rsp+128h+var_D8+4]
    ADD r13, rdx
    BSWAP eax
    MOV [rsp+128h+var_128], eax
    MOV eax, dword ptr [rsp+128h+var_D0]
    BSWAP eax
    MOV [rsp+128h+var_124], eax
    MOV eax, dword ptr [rsp+128h+var_D0+4]
    BSWAP eax
    MOV [rsp+128h+var_120], eax
    MOV eax, dword ptr [rsp+128h+var_C8]
    BSWAP eax
    MOV [rsp+128h+var_11C], eax
    MOV eax, dword ptr [rsp+128h+var_C8+4]
    BSWAP eax
    MOV [rsp+128h+var_118], eax
    MOV eax, dword ptr [rsp+128h+var_C0]
    BSWAP eax
    MOV [rsp+128h+var_114], eax
    MOV eax, dword ptr [rsp+128h+var_C0+4]
    BSWAP eax
    MOV [rsp+128h+var_110], eax
    MOV eax, dword ptr [rsp+128h+var_B8]
    BSWAP eax
    MOV [rsp+128h+var_10C], eax
    MOV eax, dword ptr [rsp+128h+var_B8+4]
    BSWAP eax
    MOV [rsp+128h+var_108], eax
    MOV eax, dword ptr [rsp+128h+var_B0]
    BSWAP eax
    MOV [rsp+128h+var_104], eax
    MOV eax, dword ptr [rsp+128h+var_B0+4]
    BSWAP eax
    MOV [rsp+128h+var_100], eax
    MOV eax, dword ptr [rsp+128h+var_A8]
    BSWAP eax
    MOV [rsp+128h+var_FC], eax
    MOV eax, dword ptr [rsp+128h+var_A8+4]
    BSWAP eax
    MOV [rsp+128h+var_F8], eax
    MOV eax, dword ptr [rsp+128h+var_A0]
    BSWAP eax
    MOV [rsp+128h+var_F4], eax
    MOV eax, dword ptr [rsp+128h+var_A0+4]
    BSWAP eax
    MOV [rsp+128h+var_F0], eax
    MOV eax, dword ptr [rsp+128h+var_98]
    BSWAP eax
    MOV [rsp+128h+var_EC], eax
    CALL sub_435CE0
    XOR edx, edx
    CMP r14d, 3Fh
    MOV dword ptr [rsp+128h+var_98+4], 0
    JG loc_4384C0
loc_4385DB:
    MOVSXD rdx, r14d
loc_4385DE:
    LEA rdi, [rsp+128h+var_D8+4]
    MOV ecx, 4Ch
    MOV rsi, r13
    CALL ___memcpy_chk
    MOV dword ptr [rsp+128h+var_98+4], r14d
loc_4385F8:
    LEA rsi, [rsp+128h+var_78]
    LEA rdi, [rsp+128h+var_E8]
    ADD r12, rbp
    CALL sub_436AF0
    MOV rax, [rsp+128h+var_78]
    MOV [r12], rax
    MOV eax, [rsp+128h+var_70]
    MOV [r12+8], eax
    MOV rax, [rsp+128h+var_40]
    XOR rax, fs:28h
    JNZ loc_43871D
loc_43863C:
    ADD rsp, 0F8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_438650:
    MOV rcx, [r13+0]
    MOV rsi, r13
    MOV [rax], rcx
    MOV rcx, [r13+rdx-8]
    MOV [rax+rdx-8], rcx
    LEA rcx, [rax+8]
    AND rcx, 0FFFFFFFFFFFFFFF8h
    SUB rax, rcx
    SUB rsi, rax
    ADD rax, rdx
    AND rax, 0FFFFFFFFFFFFFFF8h
    CMP rax, 8
    JB loc_4384F6
loc_438683:
    AND rax, 0FFFFFFFFFFFFFFF8h
    XOR edx, edx
loc_438689:
    MOV rdi, [rsi+rdx]
    MOV [rcx+rdx], rdi
    ADD rdx, 8
    CMP rdx, rax
    JB loc_438689
loc_43869A:
    JMP loc_4384F6
loc_4386A0:
    MOV ecx, [r13+0]
    MOV [rax], ecx
    MOV ecx, [r13+rdx-4]
    MOV [rax+rdx-4], ecx
    JMP loc_4384F6
loc_4386B8:
    MOVZX ecx, word ptr [r13+rdx-2]
    MOV [rax+rdx-2], cx
    JMP loc_4384F6
loc_4386D0:
    MOV rax, [rsp+128h+var_58]
    MOVSXD rdx, edx
    MOV [rsp+rdx+128h+var_D8+4], rax
    MOV rax, [rsp+128h+var_50]
    MOV [rsp+rdx+128h+var_D0+4], rax
    MOV eax, [rsp+128h+var_48]
    MOV dword ptr [rsp+rdx+128h+var_C8+4], eax
    ADD dword ptr [rsp+128h+var_98+4], 14h
    JMP loc_4385F8
loc_438705:
    MOV edx, 14h
    MOV r14d, 14h
    LEA r13, [rsp+128h+var_58]
    JMP loc_4385DE
loc_43871D:
    CALL ___stack_chk_fail
```
Output:+128h+var_98]
    BSWAP eax
    MOV [rsp+128h+var_EC], eax
    MOV eax, dword ptr [rsp+128h+var_98+4]
    BSWAP eax
    MOV [rsp+128h+var_E8], eax
    MOV eax, dword ptr [rsp+128h+var_90]
    BSWAP eax
    MOV [rsp+128h+var_E4], eax
    MOV eax, dword ptr [rsp+128h+var_90+4]
    BSWAP eax
    MOV [rsp+128h+var_E0], eax
    MOV eax, dword ptr [rsp+128h+var_88]
    BSWAP eax
    MOV [rsp+128h+var_DC], eax
    MOV eax, dword ptr [rsp+128h+var_88+4]
    BSWAP eax
    MOV [rsp+128h+var_D8], eax
    MOV eax, dword ptr [rsp+128h+var_80]
    BSWAP eax
    MOV [rsp+128h+var_D4], eax
    MOV eax, dword ptr [rsp+128h+var_80+4]
    BSWAP eax
    MOV [rsp+128h+var_D0], eax
    MOV eax, dword ptr [rsp+128h+var_78]
    BSWAP eax
    MOV [rsp+128h+var_CC], eax
    MOV eax, dword ptr [rsp+128h+var_78+4]
    BSWAP eax
    MOV [rsp+128h+var_C8], eax
    MOV eax, dword ptr [rsp+128h+var_70]
    BSWAP eax
    MOV [rsp+128h+var_C4], eax
    MOV eax, dword ptr [rsp+128h+var_70+4]
    BSWAP eax
    MOV [rsp+128h+var_C0], eax
    MOV eax, dword ptr [rsp+128h+var_68]
############
```assembly
loc_46BF40:
    CMP r13d, [r15+48h]
    JZ loc_46BF5D
loc_46BF46:
    MOV r15, [r15+10h]
    TEST r15, r15
    JZ loc_46C082
loc_46BF53:
    CMP r15, r14
    JZ loc_46BF46
loc_46BF58:
    TEST r13d, r13d
    JNZ loc_46BF40
loc_46BF5D:
    MOVZX eax, byte ptr [r15+56h]
    LEA edx, [rax-1]
    CMP dl, 1
    JBE loc_46C098
loc_46BF6E:
    MOVZX edx, byte ptr [r15+58h]
    XOR ebx, ebx
    TEST dl, dl
    JNS loc_46BFE4
loc_46BF79:
    JMP loc_46C070
loc_46BF80:
    MOV rdx, [rbp+0A8h]
    SUB dword ptr [rbp+98h], 1
    MOV rdi, [rbp+48h]
    MOV [rax+18h], rdx
    MOV rdx, [rax+8]
    MOV [rbp+0A8h], rax
    MOV eax, [rax+28h]
    LEA esi, [rax-1]
    MOVSXD rax, dword ptr [rbp+0BCh]
    IMUL rsi, rax
    MOV rax, [rdi]
    CALL qword ptr [rax+90h]
    MOV edx, [rbp+98h]
    TEST edx, edx
    JZ loc_46C01C
loc_46BFC5:
    MOVZX edx, byte ptr [r15+58h]
loc_46BFCA:
    ADD ebx, 1
    MOVSX eax, dl
    MOV qword ptr [r12+90h], 0
    CMP ebx, eax
    JG loc_46C070
loc_46BFE4:
    MOVSXD rax, ebx
    LEA r12, [r15+rax*8]
    MOV rax, [r12+90h]
    TEST rax, rax
    JZ loc_46BFCA
loc_46BFF8:
    MOV rax, [rax+70h]
    TEST byte ptr [rax+2Ch], 20h
    MOV rbp, [rax+20h]
    JNZ loc_46BF80
loc_46C00A:
    MOV rdi, rax
    CALL sub_4165F0
    MOV edx, [rbp+98h]
    TEST edx, edx
    JNZ loc_46BFC5
loc_46C01C:
    MOV rax, [rbp+118h]
    MOV eax, [rax+18h]
    TEST eax, eax
    JNZ loc_46BFC5
loc_46C02A:
    MOVZX eax, byte ptr [rbp+15h]
    CMP al, 6
    JZ loc_46C062
loc_46C032:
    TEST al, al
    JZ loc_46C062
loc_46C036:
    CMP al, 1
    JBE loc_46C150
loc_46C03E:
    MOV rax, cs:qword_6E42D0
    TEST rax, rax
    JZ loc_46C04C
loc_46C04A:
    CALL rax
loc_46C04C:
    MOV rdi, rbp
    CALL sub_467FE0
    MOV rax, cs:qword_6E42D8
    TEST rax, rax
    JZ loc_46C062
loc_46C060:
    CALL rax
loc_46C062:
    MOV rdi, rbp
    CALL sub_42A9A0
    JMP loc_46BFC5
loc_46C070:
    MOV byte ptr [r15+58h], 0FFh
    MOV r15, [r15+10h]
    TEST r15, r15
    JNZ loc_46BF53
loc_46C082:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46C098:
    CMP al, 2
    JZ loc_46C198
loc_46C0A0:
    MOV dword ptr [r15+50h], 0
loc_46C0A8:
    CMP byte ptr [r15+59h], 0
    MOV rdi, r15
    JNZ loc_46C16B
loc_46C0B6:
    CALL sub_41AA10
    MOV ecx, [r15+30h]
    MOV [r15+38h], rcx
    MOV edi, ecx
    CALL sub_426930
    TEST rax, rax
    MOV rbx, rax
    JZ loc_46C17D
loc_46C0D6:
    MOV edx, [r15+38h]
    XOR esi, esi
    MOV rcx, rax
    MOV rdi, r15
    CALL sub_469C70
    TEST eax, eax
    MOV ebp, eax
    JNZ loc_46C1A2
loc_46C0F1:
    MOV [r15+40h], rbx
loc_46C0F5:
    MOVZX edx, byte ptr [r15+58h]
    XOR ebx, ebx
    TEST dl, dl
    JS loc_46C136
loc_46C100:
    MOVSXD rax, ebx
    LEA rbp, [r15+rax*8]
    MOV rax, [rbp+90h]
    TEST rax, rax
    JZ loc_46C121
loc_46C113:
    MOV rdi, [rax+70h]
    CALL sub_468570
    MOVZX edx, byte ptr [r15+58h]
loc_46C121:
    ADD ebx, 1
    MOVSX eax, dl
    MOV qword ptr [rbp+90h], 0
    CMP ebx, eax
    JLE loc_46C100
loc_46C136:
    MOV byte ptr [r15+58h], 0FFh
    MOV byte ptr [r15+56h], 3
    AND byte ptr [r15+54h], 0F1h
    JMP loc_46BF46
loc_46C150:
    CMP byte ptr [rbp+8], 0
    JNZ loc_46C062
loc_46C15A:
    XOR edx, edx
    XOR esi, esi
    MOV rdi, rbp
    CALL sub_4238F0
    JMP loc_46C062
loc_46C16B:
    CALL sub_41AA10
    MOV rax, [r15+20h]
    MOV [r15+38h], rax
    JMP loc_46C0F5
loc_46C17D:
    MOV ebp, 7
loc_46C182:
    AND byte ptr [r15+54h], 0F1h
    ADD rsp, 8
    MOV eax, ebp
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_46C198:
    MOV byte ptr [r15+56h], 1
    JMP loc_46C0A8
loc_46C1A2:
    MOV rdi, rbx
    CALL sub_41B7E0
    JMP loc_46C182
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 10,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x48",
    "0x10",
    "0x56",
    "0x1",
    "0xFF",
    "0x58",
    "0x59",
    "0x50",
    "0x30",
    "0x38",
    "0x20",
    "0x70",
    "0x2C",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x28",
    "0x70",
    "0x2Ch",
    "0x20",
    "0x18",
    "0x
############
```assembly
loc_4B75E0:
    PUSH r15
    PUSH r14
    MOVSXD rax, esi
    PUSH r13
    PUSH r12
    MOV r15, rax
    PUSH rbp
    PUSH rbx
    SHL rax, 5
    MOV r13d, 1
    MOV ecx, r15d
    MOV rbp, rdi
    SUB rsp, 8
    MOV rdx, [rdi]
    MOV r12, [rdi+0A0h]
    ADD rax, [rdx+20h]
    TEST r12, r12
    CMOVZ r12, rdi
    SHL r13d, cl
    MOV rbx, [rax+18h]
    MOV eax, [r12+7Ch]
    TEST eax, r13d
    JNZ loc_4B763C
loc_4B762A:
    OR eax, r13d
    CMP r15d, 1
    MOV [r12+7Ch], eax
    JZ loc_4B76C0
loc_4B763C:
    OR [r12+78h], r13d
    MOV r13d, [rbp+34h]
    XOR r8d, r8d
    XOR ecx, ecx
    MOV esi, r15d
    MOV rdi, rbp
    LEA eax, [r13+3]
    MOV edx, r13d
    MOV [rbp+34h], eax
    CALL sub_4B7340
    MOV rbx, [rbx+10h]
    MOV eax, [rbp+38h]
    MOV r14d, [rbp+34h]
    TEST rbx, rbx
    LEA r12d, [rax+1]
    JZ loc_4B7697
loc_4B7673:
    NOP dword ptr [rax+rax+00h]
loc_4B7678:
    MOV rsi, [rbx+10h]
    XOR edx, edx
    MOV r9d, r14d
    MOV r8d, r12d
    MOV ecx, r13d
    MOV rdi, rbp
    CALL sub_459B40
    MOV rbx, [rbx]
    TEST rbx, rbx
    JNZ loc_4B7678
loc_4B7697:
    MOV rdi, [rbp+10h]
    TEST rdi, rdi
    JZ loc_4B76CD
loc_4B76A0:
    ADD rsp, 8
    MOV edx, r15d
    XOR ecx, ecx
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    MOV esi, 8Bh
    JMP sub_43FB10
loc_4B76C0:
    MOV rdi, r12
    CALL sub_46DC00
    JMP loc_4B763C
loc_4B76CD:
    MOV rdi, rbp
    CALL sub_43FB70
    TEST rax, rax
    MOV rdi, rax
    JNZ loc_4B76A0
loc_4B76DD:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x8B",
    "0x10"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 11,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Complex Logic/Algorithm"
}
```
############
```assembly
loc_401E30:
    JMP cs:off_6E1180
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTable"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x6E1180"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow"
}
```
############
```assembly
loc_4028A8:
    MOV rax, [rdi]
    CMP byte ptr [rax], 61h
    JNZ locret_4028B3
loc_4028B0:
    MOV byte ptr [rax], 1Bh
loc_4028B3:
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "DataMovement",
    "Comparison",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x61",
    "0x1B"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 2,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Character Replacement",
  "inferred_category": "String Manipulation"
}
```
############
```assembly
loc_4FF550:
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0D8h
    MOV rax, fs:28h
    MOV [rsp+0F8h+var_30], rax
    XOR eax, eax
    MOV [rsp+0F8h+var_E8], 0
    MOV [rsp+0F8h+var_E0], 0
    MOV [rsp+0F8h+var_D8], 0
    MOV [rsp+0F8h+var_D0], 0
    NOP dword ptr [rax+00h]
loc_4FF598:
    MOV rbx, [rsi+8]
    LEA rbp, [rsi+8]
    TEST rbx, rbx
    JZ loc_4FF8C5
loc_4FF5A9:
    MOVZX eax, byte ptr [rbx]
    LEA edx, [rax-2Bh]
    AND edx, 0FDh
    JZ loc_4FF610
loc_4FF5B7:
    CMP al, 3Dh
    JNZ loc_4FF6CA
loc_4FF5BF:
    OR dword ptr [rsp+0F8h+var_D0], 4
    CMP al, 2Dh
    JNZ loc_4FF5F5
loc_4FF5C8:
    JMP loc_4FF6C0
loc_4FF5D0:
    MOV edi, offset aSusdiadacjtt
    CALL _strchr
    TEST rax, rax
    JZ loc_4FF8C5
loc_4FF5E3:
    SUB rax, offset aSusdiadacjtt
    MOV eax, ds:dword_54CA04[rax*4]
    OR [rsp+0F8h+var_E0], rax
loc_4FF5F5:
    ADD rbx, 1
    MOVSX esi, byte ptr [rbx]
    TEST sil, sil
    JNZ loc_4FF5D0
loc_4FF601:
    MOV rsi, rbp
    JMP loc_4FF598
loc_4FF610:
    CMP al, 2Dh
    JNZ loc_4FF877
loc_4FF618:
    OR dword ptr [rsp+0F8h+var_D0], 2
    LEA r12, [rsp+0F8h+var_D8]
    NOP word ptr [rax+rax+00h]
loc_4FF628:
    ADD rbx, 1
    MOVSX esi, byte ptr [rbx]
    TEST sil, sil
    JZ loc_4FF601
loc_4FF634:
    CMP sil, 52h
    JZ loc_4FF683
loc_4FF63A:
    NOP word ptr [rax+rax+00h]
loc_4FF640:
    LEA eax, [rsi-56h]
    TEST al, 0EFh
    JZ loc_4FF628
loc_4FF647:
    CMP sil, 76h
    JZ loc_4FF690
loc_4FF64D:
    MOV edi, offset aSusdiadacjtt
    CALL _strchr
    TEST rax, rax
    JZ loc_4FF8C5
loc_4FF660:
    SUB rax, offset aSusdiadacjtt
    ADD rbx, 1
    MOV eax, ds:dword_54CA04[rax*4]
    OR [r12], rax
    MOVSX esi, byte ptr [rbx]
    TEST sil, sil
    JZ loc_4FF601
loc_4FF67D:
    CMP sil, 52h
    JNZ loc_4FF640
loc_4FF683:
    MOV byte ptr [rsp+0F8h+var_D0+4], 1
    JMP loc_4FF628
loc_4FF690:
    MOV rdi, [rbp+8]
    LEA r13, [rbp+8]
    TEST rdi, rdi
    JZ loc_4FF8C5
loc_4FF6A1:
    CALL sub_539450
    MOV rbp, r13
    MOV [rsp+0F8h+var_E8], rax
    OR dword ptr [rsp+0F8h+var_D0], 8
    JMP loc_4FF628
loc_4FF6C0:
    LEA r12, [rsp+0F8h+var_E0]
    JMP loc_4FF628
loc_4FF6CA:
    MOV eax, dword ptr [rsp+0F8h+var_D0]
    TEST al, 4
    JNZ loc_4FF889
loc_4FF6D6:
    MOV rdx, [rsp+0F8h+var_D8]
    TEST [rsp+0F8h+var_E0], rdx
    JNZ loc_4FF8CA
loc_4FF6E6:
    TEST eax, eax
    JNZ loc_4FF723
loc_4FF6EA:
    JMP loc_4FF8D6
loc_4FF6F0:
    MOV eax, [rsp+0F8h+stat_buf.st_mode]
    MOV edx, eax
    AND edx, 0F000h
    CMP edx, 0A000h
    JZ loc_4FF77E
loc_4FF704:
    AND eax, 0D000h
    CMP eax, 8000h
    JZ loc_4FF785
loc_4FF710:
    CMP edx, 4000h
    JZ loc_4FF785
loc_4FF718:
    ADD rbp, 8
    CMP qword ptr [rbp+0], 0
    JZ loc_4FF757
loc_4FF723:
    MOV rbx, [rbp+0]
    LEA rdx, [rsp+0F8h+stat_buf]
    MOV edi, 1
    MOV rsi, rbx
    CALL ___lxstat64
    TEST eax, eax
    JZ loc_4FF6F0
loc_4FF73D:
    XOR eax, eax
    MOV rsi, rbx
    MOV edi, offset aStatS
    ADD rbp, 8
    CALL sub_40A6D0
    CMP qword ptr [rbp+0], 0
    JNZ loc_4FF723
loc_4FF757:
    XOR eax, eax
    MOV rcx, [rsp+0F8h+var_30]
    XOR rcx, fs:28h
    JNZ loc_4FF8E0
loc_4FF770:
    ADD rsp, 0D8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4FF77E:
    CMP byte ptr [rsp+0F8h+var_D0+4], 0
    JNZ loc_4FF718
loc_4FF785:
    MOV eax, dword ptr [rsp+0F8h+var_D0]
    TEST al, 8
    JNZ loc_4FF85B
loc_4FF791:
    TEST al, 4
    JZ loc_4FF7E7
loc_4FF795:
    MOV rdx, [rsp+0F8h+var_E0]
    MOV [rsp+0F8h+var_F0], rdx
loc_4FF79F:
    XOR esi, esi
    MOV rdi, rbx
    CALL sub_4FFA10
    TEST eax, eax
    JNZ loc_4FF847
loc_4FF7B1:
    CMP byte ptr [rsp+0F8h+var_D0+4], 0
    JZ loc_4FF718
loc_4FF7BC:
    MOV eax, [rsp+0F8h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 4000h
    JNZ loc_4FF718
loc_4FF7D0:
    LEA rdx, [rsp+0F8h+var_E8]
    MOV esi, offset sub_4FF380
    MOV rdi, rbx
    CALL sub_4FF8F0
    JMP loc_4FF718
loc_4FF7E7:
    LEA rsi, [rsp+0F8h+var_F0]
    XOR edx, edx
    MOV rdi, rbx
    CALL sub_4FFA10
    TEST eax, eax
    JNZ loc_4FF8B1
loc_4FF7FE:
    MOV rdx, [rsp+0F8h+var_D8]
    MOV eax, [rsp+0F8h+stat_buf.st_mode]
    NOT rdx
    AND rdx, [rsp+0F8h+var_F0]
    AND eax, 0F000h
    OR rdx, [rsp+0F8h+var_E0]
    CMP eax, 4000h
    MOV [rsp+0F8h+var_F0], rdx
    JZ loc_4FF79F
loc_4FF829:
    AND rdx, 0FFFFFFFFFFFEFFFFh
    XOR esi, esi
    MOV rdi, rbx
    MOV [rsp+0F8h+var_F0], rdx
    CALL sub_4FFA10
    TEST eax, eax
    JZ loc_4FF7B1
loc_4FF847:
    MOV rsi, rbx
    MOV edi, offset aSettingFlagsOn
    XOR eax, eax
    CALL sub_40A6D0
    JMP loc_4FF7B1
loc_4FF85B:
    MOV rdx, [rsp+0F8h+var_E8]
    XOR esi, esi
    MOV rdi, rbx
    CALL sub_4FF950
    TEST eax, eax
    JNZ loc_4FF8A0
loc_4FF86E:
    MOV eax, dword ptr [rsp+0F8h+var_D0]
    JMP loc_4FF791
loc_4FF877:
    CMP al, 2Bh
    JNZ loc_4FF5BF
loc_4FF87F:
    OR dword ptr [rsp+0F8h+var_D0], 1
    JMP loc_4FF5F5
loc_4FF889:
    TEST al, 3
    JZ loc_4FF6D6
loc_4FF891:
    MOV edi, offset aIsIncompatible
    XOR eax, eax
    CALL sub_40ABE0
loc_4FF8A0:
    MOV rsi, rbx
    MOV edi, offset aSettingVersion
    XOR eax, eax
    CALL sub_40A6D0
    JMP loc_4FF86E
loc_4FF8B1:
    MOV rsi, rbx
    MOV edi, offset aReadingFlagsOn
    XOR eax, eax
    CALL sub_40A6D0
    JMP loc_4FF7B1
loc_4FF8C5:
    CALL sub_409830
loc_4FF8CA:
    MOV edi, offset aCanTSetAndUnse
    XOR eax, eax
    CALL sub_40ABE0
loc_4FF8D6:
    MOV edi, offset aMustUseVOr
    CALL sub_40ABE0
loc_4FF8E0:
    CALL ___stack_chk_fail
```
Output:, eax
    CALL sub_40A6D0
    JMP loc_4FF6D6
loc_4FF8A0:
    MOV eax, dword ptr [rsp+0F8h+var_D0]
    JMP loc_4FF690
loc_4FF8B1:
    MOV rsi, rbx
    MOV edi, offset aSettingFlagsOn
    XOR eax, eax
    CALL sub_40A6D0
    JMP loc_4FF791
loc_4FF8CA:
    ADD rsp, 0D8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4FF8D6:
    MOV rsi, rbx
    MOV edi, offset aCannotSetFlags
    XOR eax, eax
    CALL sub_40A6D0
    JMP loc_4FF791
```
############
```assembly
loc_4D7CC0:
    PUSH r15
    PUSH r14
    MOV esi, 18h
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 758h
    MOV rax, fs:28h
    MOV [rsp+788h+var_40], rax
    XOR eax, eax
    MOV rax, [rdi+40h]
    MOV [rsp+788h+var_780], rax
    CALL sub_4D7BE0
    MOV esi, 18h
    MOV rdi, rbx
    MOV ebp, eax
    CALL sub_4D7BE0
    MOV esi, 20h
    MOV rdi, rbx
    MOV r12d, eax
    CALL sub_4D7BE0
    CMP ebp, 177245h
    MOV [rbx+34h], eax
    JNZ loc_4D7D31
loc_4D7D24:
    CMP r12d, 385090h
    JZ loc_4D8582
loc_4D7D31:
    CMP ebp, 314159h
    JNZ loc_4D8560
loc_4D7D3D:
    CMP r12d, 265359h
    JNZ loc_4D8560
loc_4D7D4A:
    MOV esi, 1
    MOV rdi, rbx
    CALL sub_4D7BE0
    TEST eax, eax
    JNZ loc_4D856A
loc_4D7D5F:
    MOV esi, 18h
    MOV rdi, rbx
    CALL sub_4D7BE0
    CMP eax, [rbx+48h]
    MOV [rsp+788h+var_774], eax
    JA loc_4D7FC3
loc_4D7D79:
    MOV esi, 10h
    MOV rdi, rbx
    XOR ebp, ebp
    CALL sub_4D7BE0
    XOR r12d, r12d
    MOV r13d, eax
    JMP loc_4D7DA0
loc_4D7D90:
    ADD r12d, 10h
    ADD r13d, r13d
    CMP r12d, 0FFh
    JG loc_4D7DF6
loc_4D7DA0:
    TEST r13d, 8000h
    JZ loc_4D7D90
loc_4D7DA9:
    MOV esi, 10h
    MOV rdi, rbx
    CALL sub_4D7BE0
    JMP loc_4D7DC3
loc_4D7DC0:
    MOV r12d, edx
loc_4D7DC3:
    TEST ah, 80h
    JZ loc_4D7DD6
loc_4D7DC8:
    MOVSXD rdx, ebp
    ADD ebp, 1
    MOV [rsp+rdx+788h+var_348], r12b
loc_4D7DD6:
    LEA edx, [r12+1]
    ADD eax, eax
    TEST dl, 0Fh
    JNZ loc_4D7DC0
loc_4D7DE2:
    SUB r12d, 0Fh
    ADD r13d, r13d
    ADD r12d, 10h
    CMP r12d, 0FFh
    JLE loc_4D7DA0
loc_4D7DF6:
    MOV esi, 3
    MOV rdi, rbx
    CALL sub_4D7BE0
    MOV r13d, eax
    LEA eax, [rax-2]
    CMP eax, 4
    JA loc_4D7FC3
loc_4D7E12:
    TEST r13d, r13d
    JLE loc_4D7EFB
loc_4D7E1B:
    CMP r13d, 1
    MOV byte ptr [rsp+788h+var_248], 0
    JLE loc_4D7EFB
loc_4D7E2D:
    CMP r13d, 2
    MOV byte ptr [rsp+788h+var_248+1], 1
    JLE loc_4D7EFB
loc_4D7E3F:
    CMP r13d, 3
    MOV byte ptr [rsp+788h+var_248+2], 2
    JLE loc_4D7EFB
loc_4D7E51:
    CMP r13d, 4
    MOV byte ptr [rsp+788h+var_248+3], 3
    JLE loc_4D7EFB
loc_4D7E63:
    CMP r13d, 5
    MOV byte ptr [rsp+788h+var_248+4], 4
    JLE loc_4D7EFB
loc_4D7E75:
    CMP r13d, 6
    MOV byte ptr [rsp+788h+var_248+5], 5
    JLE loc_4D7EFB
loc_4D7E83:
    CMP r13d, 7
    MOV byte ptr [rsp+788h+var_248+6], 6
    JLE loc_4D7EFB
loc_4D7E91:
    CMP r13d, 8
    MOV byte ptr [rsp+788h+var_248+7], 7
    JLE loc_4D7EFB
loc_4D7E9F:
    CMP r13d, 9
    MOV byte ptr [rsp+788h+var_248+8], 8
    JLE loc_4D7EFB
loc_4D7EAD:
    CMP r13d, 0Ah
    MOV byte ptr [rsp+788h+var_248+9], 9
    JLE loc_4D7EFB
loc_4D7EBB:
    CMP r13d, 0Bh
    MOV byte ptr [rsp+788h+var_248+0Ah], 0Ah
    JLE loc_4D7EFB
loc_4D7EC9:
    CMP r13d, 0Ch
    MOV byte ptr [rsp+788h+var_248+0Bh], 0Bh
    JLE loc_4D7EFB
loc_4D7ED7:
    CMP r13d, 0Dh
    MOV byte ptr [rsp+788h+var_248+0Ch], 0Ch
    JLE loc_4D7EFB
loc_4D7EE5:
    CMP r13d, 0Eh
    MOV byte ptr [rsp+788h+var_248+0Dh], 0Dh
    JLE loc_4D7EFB
loc_4D7EF3:
    MOV byte ptr [rsp+788h+var_248+0Eh], 0Eh
loc_4D7EFB:
    MOV esi, 0Fh
    MOV rdi, rbx
    CALL sub_4D7BE0
    TEST eax, eax
    MOV [rsp+788h+var_778], eax
    JZ loc_4D7FC3
loc_4D7F14:
    MOV edx, [rsp+788h+var_778]
    LEA rax, [rbx+518h]
    MOV [rsp+788h+var_768], rax
    TEST edx, edx
    JLE loc_4D8064
loc_4D7F2C:
    MOV eax, [rsp+788h+var_778]
    LEA rsi, [rbx+518h]
    MOV r14, rsi
    SUB eax, 1
    LEA rax, [rsi+rax+1]
    MOV [rsp+788h+var_770], rax
loc_4D7F47:
    MOV r15d, [rbx]
    XOR r12d, r12d
    NOP dword ptr [rax]
loc_4D7F50:
    TEST r15d, r15d
    JG loc_4D7FF1
loc_4D7F59:
    MOV ecx, [rbx+14h]
    MOV rsi, [rbx+18h]
    MOV edi, [rbx+10h]
    JMP loc_4D7F89
loc_4D7F68:
    MOVSXD rdx, ecx
    ADD ecx, 1
loc_4D7F6E:
    MOV eax, [rbx+4]
    MOV [rbx+14h], ecx
    ADD r15d, 8
    MOVZX edx, byte ptr [rsi+rdx]
    SHL eax, 8
    OR eax, edx
    TEST r15d, r15d
    MOV [rbx+4], eax
    JG loc_4D7FF8
loc_4D7F89:
    CMP ecx, edi
    JNZ loc_4D7F68
loc_4D7F8D:
    MOV edi, [rbx+8]
    MOV edx, 1000h
    CALL _read
    TEST eax, eax
    MOV edi, eax
    MOV [rbx+10h], eax
    JLE loc_4D8574
loc_4D7FA7:
    MOV rsi, [rbx+18h]
    XOR edx, edx
    MOV ecx, 1
    JMP loc_4D7F6E
loc_4D7FB4:
    ADD r14, 1
    CMP r14, [rsp+788h+var_768]
    JNZ loc_4D83C5
loc_4D7FC3:
    MOV eax, 0FFFFFFFBh
loc_4D7FC8:
    MOV rsi, [rsp+788h+var_40]
    XOR rsi, fs:28h
    JNZ loc_4D85DF
loc_4D7FDF:
    ADD rsp, 758h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4D7FF1:
    MOV eax, [rbx+4]
    NOP dword ptr [rax+00h]
loc_4D7FF8:
    LEA edx, [r15-1]
    BT eax, edx
    MOV r15d, edx
    MOV [rbx], edx
    JNB loc_4D8014
loc_4D8006:
    CMP r12d, r13d
    JZ loc_4D7FC3
loc_4D800B:
    ADD r12d, 1
    JMP loc_4D7F50
loc_4D8014:
    MOVSXD rax, r12d
    SUB r12d, 1
    MOVZX ecx, byte ptr [rsp+rax+788h+var_248]
    JS loc_4D804B
loc_4D8025:
    NOP dword ptr [rax]
loc_4D8028:
    MOVSXD rax, r12d
    MOVZX edx, byte ptr [rsp+rax+788h+var_248]
    LEA eax, [r12+1]
    SUB r12d, 1
    CMP r12d, 0FFFFFFFFh
    CDQE 
    MOV byte ptr [rsp+rax+788h+var_248], dl
    JNZ loc_4D8028
loc_4D804B:
    MOV [r14], cl
    ADD r14, 1
    CMP r14, [rsp+788h+var_770]
    MOV byte ptr [rsp+788h+var_248], cl
    JNZ loc_4D7F47
loc_4D8064:
    TEST r13d, r13d
    JLE loc_4D8277
loc_4D806D:
    LEA rax, [rbx+8514h]
    MOV [rsp+788h+var_750], ebp
    MOV rsi, rax
    LEA eax, [r13-1]
    MOV r13, rsi
    IMUL rax, 4B4h
    LEA rax, [rbx+rax+89C8h]
    MOV [rsp+788h+var_760], rax
    LEA eax, [rbp+1]
    LEA r14, [rax+1]
    MOVSXD rax, ebp
    LEA rax, [rsp+rax+788h+var_146]
    MOV [rsp+788h+var_758], rax
loc_4D80AD:
    LEA r12, [rsp+788h+var_148]
    MOV esi, 5
    MOV rdi, rbx
    CALL sub_4D7BE0
    LEA ebp, [rax-1]
    MOV rax, r12
    MOV r15, r12
    ADD rax, r14
    MOV [rsp+788h+var_770], rax
loc_4D80D3:
    CMP ebp, 13h
    JBE loc_4D80F3
loc_4D80D8:
    JMP loc_4D7FC3
loc_4D80E0:
    ADD eax, 1
    AND eax, 2
    LEA ebp, [rbp+rax-1]
    CMP ebp, 13h
    JA loc_4D7FC3
loc_4D80F3:
    MOV esi, 2
    MOV rdi, rbx
    CALL sub_4D7BE0
    CMP eax, 1
    JG loc_4D80E0
loc_4D8105:
    LEA eax, [rbp+1]
    ADD dword ptr [rbx], 1
    ADD r15, 1
    MOV [r15-1], al
    CMP r15, [rsp+788h+var_770]
    JNZ loc_4D80D3
loc_4D811A:
    MOVZX edi, [rsp+788h+var_148]
    LEA rdx, [rsp+788h+var_147]
    MOVSXD r8, edi
loc_4D812D:
    MOVZX eax, byte ptr [rdx]
    MOV ecx, edi
    CMP eax, edi
    CMOVLE ecx, eax
    CMP eax, r8d
    CMOVLE edi, ecx
    CMP r8d, eax
    CMOVL r8, rax
    ADD rdx, 1
    CMP rdx, [rsp+788h+var_758]
    JNZ loc_4D812D
loc_4D814F:
    CMP edi, r8d
    LEA r9, [r13+4]
    MOV [r13+4B0h], edi
    MOV [r13+4B4h], r8d
    LEA r11, [r13+54h]
    MOVSXD r10, edi
    JG loc_4D81CF
loc_4D816D:
    LEA eax, [r8+1]
    LEA r15, [r13+r10*4+0]
    MOV ecx, edi
    XOR esi, esi
    MOV ebp, eax
loc_4D817C:
    MOVSXD rax, ecx
    MOV dword ptr [r15], 0
    MOV [rsp+rax*4+788h+var_748], 0
    XOR eax, eax
    JMP loc_4D81A1
loc_4D8198:
    ADD rax, 1
    CMP rax, r14
    JZ loc_4D81C4
loc_4D81A1:
    MOVZX edx, [rsp+rax+788h+var_148]
    CMP ecx, edx
    JNZ loc_4D8198
loc_4D81AD:
    MOVSXD rdx, esi
    ADD esi, 1
    MOV [r9+rdx*4+0A4h], eax
    ADD rax, 1
    CMP rax, r14
    JNZ loc_4D81A1
loc_4D81C4:
    ADD ecx, 1
    ADD r15, 4
    CMP ecx, ebp
    JNZ loc_4D817C
loc_4D81CF:
    MOVZX eax, byte ptr [r12]
    ADD r12, 1
    ADD [rsp+rax*4+788h+var_748], 1
    CMP r12, [rsp+788h+var_770]
    JNZ loc_4D81CF
loc_4D81E4:
    CMP edi, r8d
    JGE loc_4D868B
loc_4D81ED:
    LEA rax, ds:0[r10*4]
    MOV ecx, r8d
    XOR edx, edx
    SUB ecx, edi
    XOR esi, esi
    LEA r9, [r13+rax+0]
    ADD rax, r11
    MOV r15, rax
    XOR eax, eax
loc_4D820B:
    MOVSXD rbp, edi
    ADD edi, 1
    MOV r12d, [rsp+rbp*4+788h+var_748]
    ADD eax, r12d
    ADD esi, r12d
    MOV ebp, eax
    ADD eax, eax
    SHL ebp, cl
    SUB ecx, 1
    MOV r12d, eax
    SUB ebp, 1
    MOV [r9+rdx], ebp
    MOV ebp, eax
    SUB ebp, esi
    MOV [r15+rdx+4], ebp
    ADD rdx, 4
    CMP r8d, edi
    JNZ loc_4D820B
loc_4D8241:
    MOV eax, [rsp+r8*4+788h+var_748]
    MOV dword ptr [r13+r8*4+4], 7FFFFFFFh
    LEA eax, [r12+rax-1]
    MOV [r13+r8*4+0], eax
    ADD r13, 4B4h
    CMP r13, [rsp+788h+var_760]
    MOV dword ptr [r11+r10*4], 0
    JNZ loc_4D80AD
loc_4D8273:
    MOV ebp, [rsp+788h+var_750]
loc_4D8277:
    MOVDQA xmm0, cs:xmmword_54E480
    LEA rdi, [rsp+788h+var_748]
    XOR eax, eax
    MOV ecx, 80h
    MOVAPS [rsp+788h+var_248], xmm0
    REP 
    MOVDQA xmm0, cs:xmmword_54E490
    MOVAPS [rsp+788h+var_238], xmm0
    MOVDQA xmm0, cs:xmmword_54E4A0
    MOVAPS [rsp+788h+var_228], xmm0
    MOVDQA xmm0, cs:xmmword_54E4B0
    MOVAPS [rsp+788h+var_218], xmm0
    MOVDQA xmm0, cs:xmmword_54E4C0
    MOVAPS [rsp+788h+var_208], xmm0
    MOVDQA xmm0, cs:xmmword_54E4D0
    MOVAPS [rsp+788h+var_1F8], xmm0
    MOVDQA xmm0, cs:xmmword_54E4E0
    MOVAPS [rsp+788h+var_1E8], xmm0
    MOVDQA xmm0, cs:xmmword_54E4F0
    MOVAPS [rsp+788h+var_1D8], xmm0
    MOVDQA xmm0, cs:xmmword_54E500
    MOVAPS [rsp+788h+var_1C8], xmm0
    MOVDQA xmm0, cs:xmmword_54E510
    MOVAPS [rsp+788h+var_1B8], xmm0
    MOVDQA xmm0, cs:xmmword_54E520
    MOVAPS [rsp+788h+var_1A8], xmm0
    MOVDQA xmm0, cs:xmmword_54E530
    MOVAPS [rsp+788h+var_198], xmm0
    MOVDQA xmm0, cs:xmmword_54E540
    MOVAPS [rsp+788h+var_188], xmm0
    MOVDQA xmm0, cs:xmmword_54E550
    MOVAPS [rsp+788h+var_178], xmm0
    MOVDQA xmm0, cs:xmmword_54E560
    MOVAPS [rsp+788h+var_168], xmm0
    MOVDQA xmm0, cs:xmmword_54E570
    MOVAPS [rsp+788h+var_158], xmm0
    MOV eax, [rsp+788h+var_778]
    TEST eax, eax
    JLE loc_4D7FC3
loc_4D8392:
    LEA rax, [rbx+8518h]
    MOV r14, [rsp+788h+var_768]
    MOV r12d, [rsp+788h+var_74C]
    XOR r15d, r15d
    MOV dword ptr [rsp+788h+var_758], ebp
    XOR edx, edx
    MOV [rsp+788h+var_760], rax
    MOV eax, [rsp+788h+var_778]
    MOV ebp, r15d
    SUB eax, 1
    LEA rax, [r14+rax+1]
    MOV [rsp+788h+var_768], rax
loc_4D83C5:
    MOVZX r15d, byte ptr [r14]
    MOV edi, [rbx]
    MOV [rsp+788h+var_778], 31h
    IMUL r15, 4B4h
    ADD r15, [rsp+788h+var_760]
    LEA rax, [r15+50h]
    MOV esi, [r15+4B0h]
    LEA r13, [r15-4]
    MOV [rsp+788h+var_770], rax
loc_4D83F3:
    MOV ecx, edi
    SUB ecx, esi
    JS loc_4D85AC
loc_4D83FD:
    MOV r8d, [rbx+4]
    MOV edi, 1
    MOV [rbx], ecx
    MOV eax, edi
    SHR r8d, cl
    MOV ecx, esi
    SHL eax, cl
    SUB eax, 1
    AND eax, r8d
loc_4D8417:
    MOVSXD r8, dword ptr [r15+4ACh]
    CMP [r13+r8*4+0], eax
    MOV rcx, r8
    LEA rdi, ds:0[r8*4]
    JGE loc_4D8451
loc_4D8430:
    ADD rdi, 4
    JMP loc_4D8443
loc_4D8440:
    MOV rdi, r8
loc_4D8443:
    LEA r8, [rdi+4]
    ADD ecx, 1
    CMP eax, [r13+r8-4]
    JG loc_4D8440
loc_4D8451:
    SUB esi, ecx
    MOV ecx, esi
    JS loc_4D7FC3
loc_4D845B:
    ADD [rbx], esi
    MOV rsi, [rsp+788h+var_770]
    SAR eax, cl
    SUB eax, [rsi+rdi]
    CMP eax, 101h
    JA loc_4D7FC3
loc_4D8472:
    CDQE 
    MOVSXD rax, dword ptr [r15+rax*4+0A4h]
    CMP eax, 1
    JBE loc_4D858C
loc_4D8485:
    TEST edx, edx
    JZ loc_4D84CE
loc_4D8489:
    LEA edx, [rbp+r12+0]
    CMP edx, [rbx+48h]
    JA loc_4D7FC3
loc_4D8497:
    MOVZX edx, byte ptr [rsp+788h+var_248]
    MOVZX edx, [rsp+rdx+788h+var_348]
    ADD [rsp+rdx*4+788h+var_748], r12d
    SUB r12d, 1
    MOV rcx, rdx
    JS loc_4D84CE
loc_4D84B5:
    MOV rsi, [rsp+788h+var_780]
    MOV edx, ebp
loc_4D84BC:
    SUB r12d, 1
    ADD ebp, 1
    MOV [rsi+rdx*4], ecx
    CMP r12d, 0FFFFFFFFh
    MOV edx, ebp
    JNZ loc_4D84BC
loc_4D84CE:
    CMP dword ptr [rsp+788h+var_758], eax
    JL loc_4D85E4
loc_4D84D8:
    CMP ebp, [rbx+48h]
    JNB loc_4D7FC3
loc_4D84E1:
    LEA edx, [rax-1]
    LEA rsi, [rax-1]
    LEA rdi, [rsp+788h+var_248]
    MOVSXD rdx, edx
    MOVZX r8d, byte ptr [rsp+rdx+788h+var_248]
    LEA edx, [rax-2]
    ADD rdx, 1
    SUB rsi, rdx
    SUB rax, rdx
    ADD rsi, rdi
    ADD rdi, rax
    MOV byte ptr [rsp+788h+var_750], r8b
    CALL _memmove
    MOVZX r8d, byte ptr [rsp+788h+var_750]
    MOV rsi, [rsp+788h+var_780]
    MOVZX edx, [rsp+r8+788h+var_348]
    MOV byte ptr [rsp+788h+var_248], r8b
    MOV rax, rdx
    ADD [rsp+rdx*4+788h+var_748], 1
    MOV edx, ebp
    MOV [rsi+rdx*4], eax
    ADD ebp, 1
    XOR edx, edx
loc_4D8547:
    SUB [rsp+788h+var_778], 1
    JS loc_4D7FB4
loc_4D8552:
    MOV edi, [rbx]
    MOV esi, [r15+4B0h]
    JMP loc_4D83F3
loc_4D8560:
    MOV eax, 0FFFFFFFEh
    JMP loc_4D7FC8
loc_4D856A:
    MOV eax, 0FFFFFFF9h
    JMP loc_4D7FC8
loc_4D8574:
    LEA rdi, [rbx+50h]
    MOV esi, 0FFFFFFFDh
    CALL ___longjmp_chk
loc_4D8582:
    MOV eax, 0FFFFFFFFh
    JMP loc_4D7FC8
loc_4D858C:
    TEST edx, edx
    JNZ loc_4D8598
loc_4D8590:
    XOR r12d, r12d
    MOV edx, 1
loc_4D8598:
    MOV esi, edx
    MOV ecx, eax
    LEA eax, [rdx+rdx]
    SHL esi, cl
    ADD r12d, esi
    CMP edx, [rbx+48h]
    CMOVB edx, eax
    JMP loc_4D8547
loc_4D85AC:
    MOVSXD rax, dword ptr [rbx+14h]
    CMP eax, [rbx+10h]
    JZ loc_4D866F
loc_4D85B9:
    MOV r8, [rbx+18h]
    LEA r9d, [rax+1]
    MOV ecx, [rbx+4]
    ADD edi, 8
    MOV [rbx+14h], r9d
    MOVZX eax, byte ptr [r8+rax]
    SHL ecx, 8
    MOV [rbx], edi
    OR eax, ecx
    MOV [rbx+4], eax
    JMP loc_4D83F3
loc_4D85DF:
    CALL ___stack_chk_fail
loc_4D85E4:
    LEA rax, [rsp+788h+var_748]
    LEA rcx, [rsp+788h+var_348]
    MOV r15d, ebp
    XOR edx, edx
loc_4D85F6:
    MOV esi, [rax]
    MOV [rax], edx
    ADD rax, 4
    ADD esi, edx
    CMP rax, rcx
    MOV edx, esi
    JNZ loc_4D85F6
loc_4D8607:
    TEST r15d, r15d
    JZ loc_4D8664
loc_4D860C:
    MOV rcx, [rsp+788h+var_780]
    XOR eax, eax
loc_4D8613:
    MOVZX esi, byte ptr [rcx+rax*4]
    MOV r8d, eax
    ADD rax, 1
    SHL r8d, 8
    MOVSXD rdi, [rsp+rsi*4+788h+var_748]
    MOV rdx, rdi
    OR [rcx+rdi*4], r8d
    ADD edx, 1
    CMP r15d, eax
    MOV [rsp+rsi*4+788h+var_748], edx
    JA loc_4D8613
loc_4D863A:
    CMP r15d, [rsp+788h+var_774]
    JBE loc_4D7FC3
loc_4D8645:
    MOV eax, [rsp+788h+var_774]
    MOV rsi, [rsp+788h+var_780]
    MOV eax, [rsi+rax*4]
    MOV dword ptr [rbx+28h], 5
    MOVZX edx, al
    SHR eax, 8
    MOV [rbx+30h], edx
    MOV [rbx+24h], eax
loc_4D8664:
    MOV [rbx+2Ch], r15d
    XOR eax, eax
    JMP loc_4D7FC8
loc_4D866F:
    MOV rdi, rbx
    MOV [rsp+788h+var_750], edx
    CALL sub_4D7BE0
    MOV esi, [r15+4B0h]
    MOV edx, [rsp+788h+var_750]
    JMP loc_4D8417
loc_4D868B:
    XOR r12d, r12d
    JMP loc_4D8241
```
Output:8064:
    LEA rax, [rbx+518h]
    MOV [rsp+788h+var_768], rax
    JMP loc_4D83C5
loc_4D8073:
    MOV rsi, [rsp+788h+var_770]
    MOV rdi, [rsp+788h+var_768]
    MOV rcx, rsi
    SUB rdi, 1
    LEA rdi, [rsi+rdi+1]
    MOV [rsp+788h+var_770], rdi
loc_4D8088:
    MOV r15d, [rbx]
    XOR r12d, r12d
    NOP dword ptr [rcx]
loc_4D8091:
    TEST r15d, r15d
    JG loc_4D80D2
loc_4D809A:
    MOV ecx, [rbx+14h]
    MOV rsi, [rbx+18h]
    MOV edi, [rbx+10h]
    JMP loc_4D80C2
loc_4D80AB:
    MOVSXD rdx, ecx
    ADD ecx, 1
loc_4D80B1:
    MOV eax, [rbx+4]
    MOV [rbx+14h], ecx
    ADD r15d, 8
    MOVZX edx, byte ptr [rsi+rdx]
    SHL eax, 8
    OR eax, edx
    TEST r15d, r15d
    MOV [rbx+4], eax
    JG loc_4D80D9
loc_4D80C2:
    CMP ecx, edi
    JNZ loc_4D80AB
loc_4D80C6:
    MOV edi, [rbx+8]
    MOV edx, 1000h
    CALL _read
    TEST eax, eax
    MOV edi, eax
    MOV [rbx+10h], eax
    JLE loc_4D8574
loc_4D80E0:
    MOV r
############
```assembly
loc_433EBC:
    NOP dword ptr [rax+00h]
loc_433EC0:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433EC0
loc_433ED0:
    CMP ebx, 2
    MOV qword ptr [r14+58h], 0
    MOV byte ptr [r14+4], 0
    JZ loc_4343AE
loc_433EE6:
    MOV rdi, [r14+0C0h]
    TEST rdi, rdi
    JZ loc_433F08
loc_433EF2:
    NOP word ptr [rax+rax+00h]
loc_433EF8:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433EF8
loc_433F08:
    MOV rdi, [r14+0B8h]
    MOV qword ptr [r14+0C0h], 0
    TEST rdi, rdi
    JZ loc_433F30
loc_433F1F:
    NOP 
loc_433F20:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433F20
loc_433F30:
    MOV rdi, [r14+0C8h]
    MOV qword ptr [r14+0B8h], 0
    TEST rdi, rdi
    JZ loc_433F60
loc_433F47:
    NOP word ptr [rax+rax+00000000h]
loc_433F50:
    MOV r12, [rdi]
    CALL _free
    TEST r12, r12
    MOV rdi, r12
    JNZ loc_433F50
loc_433F60:
    MOV r12, [r14+30h]
    MOV qword ptr [r14+0C8h], 0
    TEST r12, r12
    JNZ loc_433FA5
loc_433F74:
    JMP loc_4343AE
loc_433F80:
    CMP ebx, 1
    JG loc_43427B
loc_433F89:
    TEST ebx, ebx
    JNZ loc_433F9A
loc_433F8D:
    MOV rdi, [r14+30h]
    TEST rdi, rdi
    JNZ loc_43479C
loc_433F9A:
    MOV r12d, offset aHttpdConf
    MOV ebx, 3
loc_433FA5:
    MOV rdi, r12
    CALL sub_40AD80
    TEST rax, rax
    JZ loc_433F80
loc_433FB2:
    CMP ebx, 2
    MOV r15, rax
    MOV eax, offset data
    CMOVZ rax, [rbp+var_100]
    MOV r13, 800000401h
    MOV [rbp+var_100], rax
    LEA rax, [rbp+s]
    ADD rax, 1
    MOV [rbp+nptr], rax
    NOP dword ptr [rax+rax+00000000h]
loc_433FF0:
    LEA rdi, [rbp+s]
    MOV rdx, r15
    MOV esi, 0A0h
    CALL _fgets_unlocked
    TEST rax, rax
    JZ loc_434273
loc_43400D:
    MOVZX eax, [rbp+s]
    TEST al, al
    JZ loc_4343A2
loc_43401C:
    CMP al, 0Ah
    JZ loc_4343A2
loc_434024:
    CMP al, 23h
    JZ loc_4343A2
loc_43402C:
    LEA rdx, [rbp+s]
    JMP loc_434040
loc_434038:
    CMP al, 0Ah
    JZ loc_43405B
loc_43403C:
    CMP al, 23h
    JZ loc_43405B
loc_434040:
    CMP al, 20h
    JZ loc_434210
loc_434048:
    CMP al, 9
    JZ loc_434210
loc_434050:
    ADD rdx, 1
    MOVZX eax, byte ptr [rdx]
    TEST al, al
    JNZ loc_434038
loc_43405B:
    LEA rax, [rbp+s]
    MOV rcx, rdx
    MOV byte ptr [rdx], 0
    SUB rcx, rax
    TEST ecx, ecx
    MOV [rbp+var_F8], rcx
    JZ loc_433FF0
loc_43407A:
    LEA rdi, [rbp+s]
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JZ loc_434258
loc_434094:
    MOVZX edx, byte ptr [rax+1]
    TEST dl, dl
    JZ loc_434258
loc_4340A0:
    ADD rax, 1
    MOV rcx, [rbp+var_F8]
    MOV [rbp+src], rax
    MOVZX eax, [rbp+s]
    MOV r8d, eax
    AND r8d, 0FFFFFFDFh
    CMP r8b, 49h
    JZ loc_43437B
loc_4340CA:
    TEST ebx, ebx
    SETZ sil
    CMP r8b, 48h
    JNZ loc_4340DF
loc_4340D6:
    TEST sil, sil
    JNZ loc_43429D
loc_4340DF:
    CMP r8b, 41h
    JZ loc_4342BA
loc_4340E9:
    CMP r8b, 44h
    JZ loc_4342BA
loc_4340F3:
    CMP r8b, 45h
    JNZ loc_434102
loc_4340F9:
    TEST sil, sil
    JNZ loc_43440E
loc_434102:
    CMP r8b, 50h
    JNZ loc_43423C
loc_43410C:
    TEST sil, sil
    JZ loc_43423C
loc_434115:
    MOV rdi, [rbp+src]
    MOV esi, 3Ah
    CALL _strchr
    TEST rax, rax
    JZ loc_434258
loc_43412F:
    LEA rdx, [rax+1]
    MOV byte ptr [rax], 0
    MOV esi, offset aHttp
    MOV [rbp+var_118], rax
    MOV rdi, rdx
    MOV [rbp+var_F8], rdx
    CALL sub_40A180
    MOV rcx, [rbp+var_118]
    MOV rdx, [rbp+var_F8]
    ADD rcx, 8
    TEST rax, rax
    CMOVNZ rdx, rcx
    CMP byte ptr [rdx], 0
    JZ loc_434258
loc_434173:
    MOV esi, 2Fh
    MOV rdi, rdx
    MOV [rbp+var_120], rdx
    CALL _strchr
    TEST rax, rax
    JZ loc_434258
loc_434190:
    MOV edi, 20h
    MOV byte ptr [rax], 0
    MOV [rbp+var_118], rax
    CALL sub_40C260
    MOV rdi, [rbp+src]
    MOV [rbp+var_F8], rax
    CALL sub_40C290
    MOV rcx, [rbp+var_F8]
    MOV rdx, [rbp+var_120]
    MOV [rcx+8], rax
    MOV rdi, rdx
    CALL sub_40C290
    MOV rcx, [rbp+var_F8]
    MOV rsi, [rbp+var_118]
    MOV [rcx+10h], rax
    MOV byte ptr [rsi], 2Fh
    MOV rdi, rsi
    CALL sub_40C290
    MOV rcx, [rbp+var_F8]
    MOV [rcx+18h], rax
    MOV rax, [r14+138h]
    MOV [rcx], rax
    MOV [r14+138h], rcx
    JMP loc_433FF0
loc_434210:
    MOV rcx, rdx
    NOP dword ptr [rax+rax+00h]
loc_434218:
    CMP al, 20h
    JZ loc_434226
loc_43421C:
    CMP al, 9
    JZ loc_434226
loc_434220:
    MOV [rdx], al
    ADD rdx, 1
loc_434226:
    ADD rcx, 1
    MOVZX eax, byte ptr [rcx]
    CMP al, 23h
    JA loc_434218
loc_434231:
    BT r13, rax
    JNB loc_434218
loc_434237:
    JMP loc_43405B
loc_43423C:
    CMP al, 2Eh
    JZ loc_43471F
loc_434244:
    CMP al, 2Ah
    JZ loc_4346A8
loc_43424C:
    CMP al, 2Fh
    JZ loc_43451A
loc_434254:
    NOP dword ptr [rax+00h]
loc_434258:
    LEA rsi, [rbp+s]
    MOV rdx, r12
    MOV edi, offset aConfigErrorSIn
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_433FF0
loc_434273:
    MOV rdi, r15
    CALL _fclose
loc_43427B:
    MOV rax, [rbp+var_38]
    XOR rax, fs:28h
    JNZ loc_4347AB
loc_43428E:
    LEA rsp, [rbp-28h]
    POP rbx
    POP r12
    POP r13
    POP r14
    POP r15
    POP rbp
    RETN 
loc_43429D:
    MOV rdi, [rbp+src]
    CALL sub_40C290
    MOV [r14+38h], rax
    MOV rdi, rax
    CALL sub_40CC60
    JMP loc_433FF0
loc_4342BA:
    CMP dl, 2Ah
    JZ loc_4343FA
loc_4342C3:
    MOV edi, 18h
    MOV byte ptr [rbp+var_118], r8b
    CALL sub_40C260
    MOV r9, rax
    MOV rax, [rbp+src]
    LEA rdi, [rbp+var_F0]
    LEA rsi, [r9+8]
    MOV edx, 2Fh
    MOV [rbp+var_F8], r9
    MOV [rbp+var_F0], rax
    CALL sub_433D90
    TEST eax, eax
    MOV r9, [rbp+var_F8]
    JS loc_4344FA
loc_434310:
    MOV rdi, [rbp+var_F0]
    MOVZX r8d, byte ptr [rbp+var_118]
    CMP byte ptr [rdi], 0
    JNZ loc_434656
loc_434328:
    CMP eax, 20h
    JG loc_4344FA
loc_434331:
    MOV edx, 0FFFFFFFFh
    JZ loc_43433E
loc_434338:
    MOV ecx, eax
    SHR edx, cl
    NOT edx
loc_43433E:
    MOV [r9+0Ch], edx
loc_434342:
    MOVZX eax, r8b
    CMP r8b, 44h
    MOV [r9+10h], eax
    JZ loc_43450A
loc_434354:
    MOV rdx, [r14+58h]
    TEST rdx, rdx
    JNZ loc_43436B
loc_43435D:
    JMP loc_434716
loc_434368:
    MOV rdx, rax
loc_43436B:
    MOV rax, [rdx]
    TEST rax, rax
    JNZ loc_434368
loc_434373:
    MOV [rdx], r9
    JMP loc_433FF0
loc_43437B:
    MOV rdi, [r14+40h]
    CMP rdi, offset aIndexHtml
    JZ loc_43438D
loc_434388:
    CALL _free
loc_43438D:
    MOV rdi, [rbp+src]
    CALL sub_40C290
    MOV [r14+40h], rax
    JMP loc_433FF0
loc_4343A2:
    MOV [rbp+s], 0
    JMP loc_433FF0
loc_4343AE:
    MOV r15, [rbp+var_100]
    MOV rdi, r15
    CALL _strlen
    ADD rax, 2Bh
    MOV r9d, offset aHttpdConf
    MOV r8, r15
    AND rax, 0FFFFFFFFFFFFFFF0h
    MOV ecx, offset aSS_6
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    SUB rsp, rax
    MOV esi, 1
    XOR eax, eax
    LEA r12, [rsp+120h+var_118+7]
    AND r12, 0FFFFFFFFFFFFFFF0h
    MOV rdi, r12
    CALL ___sprintf_chk
    JMP loc_433FA5
loc_4343FA:
    CMP r8b, 44h
    JNZ loc_433FF0
loc_434404:
    MOV byte ptr [r14+4], 1
    JMP loc_433FF0
loc_43440E:
    MOV rdi, [rbp+nptr]
    XOR esi, esi
    MOV edx, 0Ah
    CALL _strtol
    CMP eax, 63h
    JLE loc_434258
loc_43442A:
    CMP eax, 0C8h
    JZ loc_4347BA
loc_434435:
    CMP eax, 0CEh
    JZ loc_4347B0
loc_434440:
    CMP eax, 12Eh
    JZ loc_4347A1
loc_43444B:
    CMP eax, 198h
    JZ loc_4347F3
loc_434456:
    CMP eax, 1F5h
    JZ loc_4347E9
loc_434461:
    CMP eax, 191h
    JZ loc_4347DF
loc_43446C:
    CMP eax, 194h
    JZ loc_4347D5
loc_434477:
    CMP eax, 190h
    JZ loc_4347CB
loc_434482:
    CMP eax, 193h
    JZ loc_4347C1
loc_43448D:
    CMP eax, 1F4h
    MOV edx, 9
    JNZ loc_433FF0
loc_43449D:
    MOV rdi, [rbp+src]
    MOV dword ptr [rbp+var_F8], edx
    CALL sub_40C290
    MOV edx, dword ptr [rbp+var_F8]
    MOV [r14+rdx*8+0E8h], rax
    JMP loc_433FF0
loc_4344C2:
    LEA rsi, [r9+0Ch]
    LEA rdi, [rbp+var_F0]
    XOR edx, edx
    MOV byte ptr [rbp+src], r8b
    MOV [rbp+var_F8], r9
    CALL sub_433D90
    CMP eax, 20h
    MOV r9, [rbp+var_F8]
    MOVZX r8d, byte ptr [rbp+src]
    JZ loc_434342
loc_4344FA:
    MOV dword ptr [r9+0Ch], 0
    MOV dword ptr [r9+10h], 44h
loc_43450A:
    MOV rax, [r14+58h]
    MOV [r9], rax
    MOV [r14+58h], r9
    JMP loc_433FF0
loc_43451A:
    MOV rdi, [rbp+var_100]
    MOV [rbp+var_F8], rcx
    CALL _strlen
    MOV rcx, [rbp+var_F8]
    MOV ecx, ecx
    LEA rdi, [rax+rcx+19h]
    CALL sub_40C260
    MOV rcx, [rbp+src]
    LEA rdx, [rbp+s]
    SUB rsp, 8
    MOV r8, [rbp+var_100]
    MOV [rbp+var_F8], rax
    ADD rax, 10h
    PUSH rdx
    MOV rdi, rax
    MOV esi, 1
    SUB rcx, rdx
    XOR eax, eax
    MOV rdx, 0FFFFFFFFFFFFFFFFh
    LEA r9d, [rcx-1]
    MOV ecx, offset aSS_14
    MOV [rbp+var_118], rdi
    CALL ___sprintf_chk
    MOV rdi, [rbp+var_118]
    CALL sub_536BD0
    MOV rdx, rax
    SUB rdx, [rbp+var_118]
    MOV rsi, [rbp+src]
    MOV [rbp+var_118], rdx
    LEA rdx, [rax+1]
    MOV rdi, rdx
    CALL _strcpy
    MOV rdx, rax
    MOV rax, [rbp+var_F8]
    LEA rcx, [r14+0B8h]
    MOV [rax+8], rdx
    MOV rdx, [r14+0B8h]
    POP rsi
    POP rdi
    TEST rdx, rdx
    JZ loc_43464E
loc_4345E5:
    MOV eax, dword ptr [rbp+var_118]
    MOV dword ptr [rbp+var_120], ebx
    MOV rbx, rdx
    MOV [rbp+var_118], r12
    MOV r12, rcx
    MOV [rbp+src], rax
    JMP loc_43461F
loc_434610:
    MOV r12, rbx
    MOV rbx, [rbx]
    TEST rbx, rbx
    JZ loc_434780
loc_43461F:
    LEA rdi, [rbx+10h]
    CALL _strlen
    CMP rax, [rbp+src]
    JA loc_434610
loc_434631:
    MOV rax, [rbp+var_F8]
    MOV rdx, rbx
    MOV rcx, r12
    MOV ebx, dword ptr [rbp+var_120]
    MOV r12, [rbp+var_118]
    MOV [rax], rdx
loc_43464E:
    MOV [rcx], rax
    JMP loc_433FF0
loc_434656:
    LEA rsi, [rbp+var_E8]
    MOV edx, 0Ah
    MOV [rbp+src], r9
    MOV byte ptr [rbp+var_F8], r8b
    CALL sub_40E6F0
    MOV rdx, [rbp+var_E8]
    MOVZX r8d, byte ptr [rbp+var_F8]
    MOV r9, [rbp+src]
    MOVZX edx, byte ptr [rdx]
    CMP dl, 2Eh
    JZ loc_4344C2
loc_434697:
    TEST dl, dl
    JZ loc_434328
loc_43469F:
    JMP loc_4344FA
loc_4346A8:
    CMP [rbp+var_DF], 2Eh
    JNZ loc_434258
loc_4346B5:
    MOV ecx, ecx
    LEA rdi, [rcx+18h]
    CALL sub_40C260
    LEA rcx, [rax+10h]
    LEA rsi, [rbp+s]
    MOV [rbp+var_F8], rax
    MOV rdi, rcx
    CALL _strcpy
    MOV rcx, rax
    MOV rax, [rbp+src]
    LEA rsi, [rbp+s]
    MOV rdx, [rbp+var_F8]
    SUB rax, rsi
    ADD rax, rcx
    MOV byte ptr [rax-1], 0
    MOV [rdx+8], rax
    MOV rax, [r14+0C8h]
    MOV [rdx], rax
    MOV [r14+0C8h], rdx
    JMP loc_433FF0
loc_434716:
    MOV [r14+58h], r9
    JMP loc_433FF0
loc_43471F:
    MOV ecx, ecx
    LEA rdi, [rcx+18h]
    CALL sub_40C260
    LEA rcx, [rax+10h]
    LEA rsi, [rbp+s]
    MOV [rbp+var_F8], rax
    MOV rdi, rcx
    CALL _strcpy
    MOV rcx, rax
    MOV rax, [rbp+src]
    LEA rsi, [rbp+s]
    MOV rdx, [rbp+var_F8]
    SUB rax, rsi
    ADD rax, rcx
    MOV byte ptr [rax-1], 0
    MOV [rdx+8], rax
    MOV rax, [r14+0C0h]
    MOV [rdx], rax
    MOV [r14+0C0h], rdx
    JMP loc_433FF0
loc_434780:
    MOV rcx, r12
    MOV ebx, dword ptr [rbp+var_120]
    MOV r12, [rbp+var_118]
    MOV rax, [rbp+var_F8]
    JMP loc_43464E
loc_43479C:
    CALL sub_40A880
loc_4347A1:
    MOV edx, 2
    JMP loc_43449D
loc_4347AB:
    CALL ___stack_chk_fail
loc_4347B0:
    MOV edx, 1
    JMP loc_43449D
loc_4347BA:
    XOR edx, edx
    JMP loc_43449D
loc_4347C1:
    MOV edx, 8
    JMP loc_43449D
loc_4347CB:
    MOV edx, 7
    JMP loc_43449D
loc_4347D5:
    MOV edx, 6
    JMP loc_43449D
loc_4347DF:
    MOV edx, 5
    JMP loc_43449D
loc_4347E9:
    MOV edx, 4
    JMP loc_43449D
loc_4347F3:
    MOV edx, 3
    JMP loc_43449D
```
Output:Fh
    JZ loc_43471F
loc_43424C:
    CMP al, 3A
    JZ loc_43471F
loc_434254:
    CMP al, 5Bh
    JZ loc_43471F
loc_43425C:
    CMP al, 5Dh
    JZ loc_43471F
loc_434264:
    CMP al, 7Bh
    JZ loc_43471F
loc_43426C:
    CMP al, 7Dh
    JZ loc_43471F
loc_434274:
    CMP al, 7Eh
    JZ loc_43471F
loc_43427C:
    CMP al, 7Fh
    JZ loc_43471F
loc_434284:
    CMP al, 80h
    JZ loc_43471F
loc_43428C:
    CMP al, 81h
    JZ loc_43471F
loc_434294:
    CMP al, 82h
    JZ loc_43471F
loc_43429C:
    CMP al, 83h
    JZ loc_43471F
loc_4342A4:
    CMP al, 84h
    JZ loc_43471F
loc_4342AC:
    CMP al, 85h
    JZ loc_43471F
loc_4342B4:
    CMP al, 86h
    JZ loc_43471F
loc_4342BC:
    CMP al, 87h
    JZ loc_43471F
loc_4342C4:
    CMP al, 88h
    JZ loc_43471F
loc_4342CC:
    CMP al, 89h
    JZ
############
```assembly
loc_405F70:
    JMP cs:off_78C0C8
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTransfer"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x78C0C8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow"
}
```
############
```assembly
loc_4681F0:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV rbx, rsi
    SUB rsp, 8
    CMP byte ptr [rdi], 2Dh
    JNZ loc_468260
loc_468201:
    CMP byte ptr [rdi+1], 0
    JNZ loc_468260
loc_468207:
    XOR edi, edi
    MOV edx, 5
    MOV esi, offset aStandardInput
    CALL _dcgettext
    MOV rdi, cs:stdin
    MOV [rbx+8], rax
    MOV cs:byte_752D06, 1
    TEST rdi, rdi
    MOV [rbx], rdi
    JZ loc_46827C
loc_468232:
    MOV esi, 2
    CALL sub_4BF2F0
    ADD cs:dword_752CA4, 1
    MOV dword ptr [rbx+10h], 0
    MOV byte ptr [rbx+39h], 0
    MOV ebx, 1
loc_468253:
    ADD rsp, 8
    MOV eax, ebx
    POP rbx
    POP rbp
    RETN 
loc_468260:
    MOV rdi, rbp
    MOV [rbx+8], rbp
    MOV esi, offset modes
    CALL sub_4BFFB0
    MOV rdi, rax
    MOV [rbx], rax
    TEST rdi, rdi
    JNZ loc_468232
loc_46827C:
    MOVZX ebx, cs:byte_752CA1
    MOV cs:byte_752CE0, 1
    TEST bl, bl
    JZ loc_4682A0
loc_46828E:
    XOR ebx, ebx
    ADD rsp, 8
    MOV eax, ebx
    POP rbx
    POP rbp
    RETN 
loc_4682A0:
    MOV rdx, rbp
    MOV esi, 3
    CALL sub_4D3C20
    MOV rbp, rax
    CALL ___errno_location
    MOV esi, [rax]
    MOV rcx, rbp
    MOV edx, (offset aLuBytesSCopied+1Bh)
    XOR edi, edi
    XOR eax, eax
    CALL _error
    JMP loc_468253
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Pointer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 5,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x2D",
    "0x5",
    "0x2",
    "0x3",
    "0x1B"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 12,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": true,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "File Handling/IO"
}
```
############
```assembly
loc_4E54C0:
    MOVSX rcx, byte ptr [rdi]
    TEST cl, cl
    JZ loc_4E54EC
loc_4E54C8:
    XOR eax, eax
    NOP word ptr [rax+rax+00h]
loc_4E54D0:
    ROL rax, 9
    ADD rdi, 1
    ADD rax, rcx
    MOVSX rcx, byte ptr [rdi]
    TEST cl, cl
    JNZ loc_4E54D0
loc_4E54E3:
    XOR edx, edx
    DIV rsi
loc_4E54E8:
    MOV rax, rdx
    RETN 
loc_4E54EC:
    XOR edx, edx
    JMP loc_4E54E8
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "Arithmetic",
    "DataMovement",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Checksum or Hash Calculation",
  "inferred_category": "Cryptographic/Hash"
}
```
############
```assembly
loc_4B0D30:
    MOVZX edi, dil
    MOVZX eax, ds:byte_527D40[rdi]
    NOT eax
    SHR al, 7
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Byte"
  ],
  "return_value_type": "Byte",
  "dominant_operation_categories": [
    "BitwiseOperations",
    "DataMovement"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x527D40"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_446560:
    PUSH r15
    PUSH r14
    MOV r14d, edx
    PUSH r13
    PUSH r12
    MOV r12d, esi
    PUSH rbp
    PUSH rbx
    MOV ebx, edi
    MOV rbp, rcx
    SUB rsp, 88h
    LEA rdi, [rsp+0B8h+ifap]
    MOV [rsp+0B8h+var_B8], r8
    MOV [rsp+0B8h+var_AC], r9d
    MOV rax, fs:28h
    MOV [rsp+0B8h+var_40], rax
    XOR eax, eax
    CALL _getifaddrs
    TEST eax, eax
    JS loc_446782
loc_4465A7:
    MOV r15, [rsp+0B8h+ifap]
    TEST r15, r15
    JZ loc_4467B7
loc_4465B5:
    XOR r13d, r13d
    JMP loc_4465CE
loc_4465C0:
    MOV r13d, 1
loc_4465C6:
    MOV r15, [r15]
    TEST r15, r15
    JZ loc_446600
loc_4465CE:
    MOV rax, [r15+18h]
    TEST rax, rax
    JZ loc_4465C6
loc_4465D7:
    MOVZX eax, word ptr [rax]
    CMP eax, ebx
    JZ loc_446638
loc_4465DE:
    TEST r13d, r13d
    JNZ loc_4465C0
loc_4465E3:
    MOV rdi, [r15+8]
    MOV rsi, rbp
    XOR r13d, r13d
    CALL sub_41C0B0
    MOV r15, [r15]
    TEST eax, eax
    SETNZ r13b
    TEST r15, r15
    JNZ loc_4465CE
loc_446600:
    MOV rdi, [rsp+0B8h+ifap]
loc_446605:
    CALL _freeifaddrs
loc_44660A:
    MOV rdx, [rsp+0B8h+var_40]
    XOR rdx, fs:28h
    MOV eax, r13d
    JNZ loc_4467C1
loc_446621:
    ADD rsp, 88h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_446638:
    MOV rdi, [r15+8]
    MOV rsi, rbp
    CALL sub_41C0B0
    TEST eax, eax
    JZ loc_4465C6
loc_44664C:
    CMP ebx, 0Ah
    MOV [rsp+0B8h+var_98], 0
    MOV [rsp+0B8h+var_90], 0
    JNZ loc_4467A5
loc_446666:
    MOV rax, [r15+18h]
    XOR ecx, ecx
    CMP word ptr [rax], 0Ah
    JZ loc_4466E0
loc_446672:
    CMP r12d, ecx
    JNZ loc_4465C0
loc_44667B:
    TEST r14d, r14d
    LEA r13, [rax+8]
    MOV ecx, [rax+18h]
    JZ loc_446690
loc_446687:
    CMP ecx, r14d
    JNZ loc_4465C0
loc_446690:
    TEST ecx, ecx
    LEA rbp, [rsp+0B8h+var_98]
    JNZ loc_44678A
loc_44669D:
    LEA rdx, [rsp+0B8h+buf]
    MOV rsi, r13
    MOV ecx, 40h
    MOV edi, ebx
    MOV r13d, 2
    CALL _inet_ntop
    MOVSXD rsi, [rsp+0B8h+var_AC]
    MOV rdi, [rsp+0B8h+var_B8]
    LEA rdx, aSS_0
    MOV rcx, rax
    MOV r8, rbp
    XOR eax, eax
    CALL sub_419D20
    MOV rdi, [rsp+0B8h+ifap]
    JMP loc_446605
loc_4466E0:
    MOVZX esi, byte ptr [rax+8]
    MOV ecx, 3
    MOV edi, esi
    AND edi, 0FFFFFFFEh
    CMP dil, 0FCh
    JZ loc_446672
loc_4466F8:
    MOVZX edi, byte ptr [rax+9]
    SHL esi, 8
    MOV ecx, edi
    AND cx, 0C0h
    OR esi, ecx
    MOV ecx, 1
    CMP si, 0FE80h
    JZ loc_446672
loc_446718:
    CMP si, 0FEC0h
    MOV ecx, 2
    JZ loc_446672
loc_446728:
    XOR ecx, ecx
    TEST si, si
    JNZ loc_446672
loc_446733:
    MOV esi, edi
    OR sil, [rax+0Ah]
    XOR ecx, ecx
    OR sil, [rax+0Bh]
    OR sil, [rax+0Ch]
    OR sil, [rax+0Dh]
    OR sil, [rax+0Eh]
    OR sil, [rax+0Fh]
    OR sil, [rax+10h]
    OR sil, [rax+11h]
    OR sil, [rax+12h]
    OR sil, [rax+13h]
    OR sil, [rax+14h]
    OR sil, [rax+15h]
    OR sil, [rax+16h]
    JNZ loc_446672
loc_446771:
    XOR ecx, ecx
    CMP byte ptr [rax+17h], 1
    SETZ cl
    SHL ecx, 2
    JMP loc_446672
loc_446782:
    XOR r13d, r13d
    JMP loc_44660A
loc_44678A:
    LEA rdx, aU
    MOV esi, 0Ch
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_419D20
    JMP loc_44669D
loc_4467A5:
    MOV r9, [r15+18h]
    LEA rbp, [rsp+0B8h+var_98]
    LEA r13, [r9+4]
    JMP loc_44669D
loc_4467B7:
    XOR edi, edi
    XOR r13d, r13d
    JMP loc_446605
loc_4467C1:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameter_count": 4,
  "input_parameter_types": [
    "Pointer",
    "Integer",
    "Integer",
    "Integer"
  ],
  "return_value_type": "Boolean",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "Comparison",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 5,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xB8",
    "0x18",
    "0x8",
    "0x1",
    "0x2",
    "0x40",
    "0x50",
    "0x28",
    "0x10",
    "0x1",
    "0xA",
    "0xFCh",
    "0xFE80h",
    "0xFEC0h",
    "0x0",
    "0x1",
    "0x2",
    "0x3",
    "0x4",
    "0x5",
    "0x6",
    "0x7",
    "0x8",
    "0x9",
    "0xA",
    "0xB",
    "0xC",
    "0xD",
    "0xE",
    "0xF",
    "0x10",
    "0x11",
    "0x12",
    "0x13",
    "0x14",
    "0x15",
    "0x16",
    "0x17",
    "0x18",
    "0x19",
    "0x1A",
    "0x1B",
    "0x1C",
    "0x1D",
    "0x1E",
    "0x1F",
    "0x20",
    "0x21",
    "0x22",
    "0x23",
    "0x24",
    "0x25",
    "0x26",
    "0x27",
    "0x28",
    "0x29",
    "0x2A",
############
```assembly
loc_433A70:
    TEST rdi, rdi
    PUSH r12
    PUSH rbp
    PUSH rbx
    JZ loc_433B8B
loc_433A7D:
    MOVZX eax, byte ptr [rdi]
    MOV rbx, rdi
    CMP al, 3Ah
    JZ loc_433A9F
loc_433A87:
    TEST al, al
    JNZ loc_433A94
loc_433A8B:
    JMP loc_433A9F
loc_433A90:
    CMP al, 3Ah
    JZ loc_433A9F
loc_433A94:
    ADD rbx, 1
    MOVZX eax, byte ptr [rbx]
    TEST al, al
    JNZ loc_433A90
loc_433A9F:
    TEST al, al
    JZ loc_433ADB
loc_433AA3:
    MOVZX ebp, byte ptr [rbx+1]
    LEA r12, [rbx+1]
    TEST bpl, bpl
    JZ loc_433B83
loc_433AB4:
    CALL ___ctype_b_loc
    MOV rbx, r12
    MOV rax, [rax]
    JMP loc_433AD4
loc_433AC8:
    ADD rbx, 1
    MOVZX ebp, byte ptr [rbx]
    TEST bpl, bpl
    JZ loc_433ADB
loc_433AD4:
    TEST byte ptr [rax+rbp*2+1], 20h
    JNZ loc_433AC8
loc_433ADB:
    MOV esi, 0Dh
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    MOV rbp, rax
    JZ loc_433B50
loc_433AF0:
    CMP rbp, rbx
    JBE loc_433B14
loc_433AF5:
    CALL ___ctype_b_loc
    MOV rdx, [rax]
    JMP loc_433B09
loc_433B00:
    SUB rbp, 1
    CMP rbp, rbx
    JZ loc_433B14
loc_433B09:
    MOVZX eax, byte ptr [rbp+0]
    TEST byte ptr [rdx+rax*2+1], 20h
    JNZ loc_433B00
loc_433B14:
    SUB rbp, rbx
    LEA rdx, aHttpC
    MOV esi, 0F7h
    LEA rdi, [rbp+2]
    LEA r12, [rbp+1]
    CALL sub_41DC60
    TEST rax, rax
    JZ loc_433B7F
loc_433B35:
    MOV rdx, r12
    MOV rsi, rbx
    MOV rdi, rax
    CALL _memcpy
    MOV byte ptr [rax+rbp+1], 0
loc_433B48:
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_433B50:
    MOV esi, 0Ah
    MOV rdi, rbx
    CALL _strchr
    TEST rax, rax
    MOV rbp, rax
    JNZ loc_433AF0
loc_433B65:
    XOR esi, esi
    MOV rdi, rbx
    CALL ___rawmemchr
    MOV rbp, rax
    XOR eax, eax
    TEST rbp, rbp
    JNZ loc_433AF0
loc_433B7D:
    JMP loc_433B48
loc_433B7F:
    XOR eax, eax
    JMP loc_433B48
loc_433B83:
    MOV rbx, r12
    JMP loc_433ADB
loc_433B8B:
    LEA rcx, aCurlCopyHeader
    LEA rsi, aHttpC
    LEA rdi, aHeader
    MOV edx, 0D7h
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 8,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x3A",
    "0xD",
    "0x0F7",
    "0xA",
    "0x0",
    "0xD7"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 10,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": true,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "String Processing",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_405AA0:

loc_416820:
    PUSH r13
    PUSH r12
    XOR eax, eax
    PUSH rbp
    PUSH rbx
    MOV rbp, r9
    MOV r13, rsi
    MOV r12, rdx
    MOV esi, ecx
    SUB rsp, 8
    MOV rdx, r9
    MOV rbx, r8
    CALL sub_41CD20
    TEST rbp, rbp
    JNZ loc_416858
loc_416847:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_416858:
    CMP qword ptr [r13+40h], 0
    JZ loc_416847
loc_41685F:
    TEST eax, eax
    JZ loc_416872
loc_416863:
    JMP loc_416847
loc_416868:
    CMP rbp, [rbx+8]
    JZ loc_4168A0
loc_41686E:
    ADD rbx, 10h
loc_416872:
    MOV rcx, [rbx]
    TEST rcx, rcx
    JNZ loc_416868
loc_41687A:
    MOV rcx, rbp
    MOV rdx, r12
    MOV esi, offset aCurlEasySetopt
loc_416885:
    ADD rsp, 8
    MOV edi, offset qword_6BD4E0
    XOR eax, eax
    POP rbx
    POP rbp
    POP r12
    POP r13
    JMP sub_405AA0
loc_4168A0:
    MOV rdx, r12
    MOV esi, offset aCurlEasySetopt_0
    JMP loc_416885
```
Output:```json
{
  "input_parameter_count": 4,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x40",
    "0x10",
    "0x8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 11,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Iterative",
  "inferred_category": "Network/HTTP Client"
}
```
############
```assembly
loc_460CC0:

loc_461220:

loc_4631A0:

loc_463512:
    CMP edx, 0Eh
    JBE loc_4636C8
loc_46351B:
    CMP edx, 0Fh
    JNZ loc_4635B8
loc_463524:
    MOV rax, [rdi+578h]
loc_46352B:
    TEST sil, sil
    JNZ loc_4635C8
loc_463534:
    MOV esi, [rbx+660h]
    TEST rax, rax
    LEA ecx, [rsi+1]
    MOV [rbx+660h], ecx
    JZ loc_4635D7
loc_46354C:
    TEST ecx, ecx
    JLE loc_46356D
loc_463550:
    XOR edx, edx
    JMP loc_46355D
loc_463558:
    TEST rax, rax
    JZ loc_4635D7
loc_46355D:
    ADD edx, 1
    MOV rax, [rax+8]
    CMP ecx, edx
    JNZ loc_463558
loc_463568:
    TEST rax, rax
    JZ loc_4635D7
loc_46356D:
    MOV rdx, [rax]
    XOR eax, eax
    CMP byte ptr [rdx], 2Ah
    JZ loc_463720
loc_46357B:
    LEA r13, [rbx+5B0h]
    LEA rsi, aSSSSSSLdSS+17h
    MOV [rbx+664h], eax
    XOR eax, eax
    MOV rdi, r13
    CALL sub_458530
    TEST eax, eax
    MOV r12d, eax
    JZ loc_4636D8
loc_4635A4:
    ADD rsp, 8
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_4635B8:
    TEST sil, sil
    MOV rax, [rdi+570h]
    JZ loc_463534
loc_4635C8:
    TEST rax, rax
    MOV dword ptr [rbx+660h], 0
    JNZ loc_46356D
loc_4635D7:
    CMP ebp, 0Eh
    JZ loc_463736
loc_4635E0:
    CMP ebp, 0Fh
    JZ loc_46372E
loc_4635E9:
    CMP ebp, 0Dh
    JZ loc_46374A
loc_4635F2:
    CMP byte ptr [rbx+642h], 0
    JNZ loc_463877
loc_4635FF:
    XOR eax, eax
    CMP dword ptr [rdi+774h], 2
    MOV dword ptr [rbx+664h], 0
    SETZ al
    CMP dword ptr [rdi+770h], 2
    MOV [rbx+668h], eax
    JZ loc_463869
loc_463628:
    CMP byte ptr [rbx+352h], 0
    JNZ loc_4637E3
loc_463635:
    MOV edx, [rbx+630h]
    TEST edx, edx
    JZ loc_463877
loc_463643:
    MOV rax, [rbx+628h]
    LEA rbp, [rbx+5B0h]
    LEA rsi, aCwdS
    MOV dword ptr [rbx+644h], 1
    MOV rdi, rbp
    MOV rdx, [rax]
    XOR eax, eax
    CALL sub_458530
    TEST eax, eax
    MOV r12d, eax
    JNZ loc_4635A4
loc_46367A:
    MOV eax, [rbx+66Ch]
    CMP eax, 10h
    JZ loc_4636B0
loc_463685:
    LEA rdx, off_6BCA80
    LEA r9, off_4AF36A
    MOV ecx, 38Ch
    MOV r8, [rdx+rax*8]
loc_46369C:
    MOV rdi, [rbx]
    LEA rsi, aFtpPLineDState
    MOV rdx, rbp
    XOR eax, eax
    CALL sub_438D90
loc_4636B0:
    MOV dword ptr [rbx+66Ch], 10h
    XOR r12d, r12d
    JMP loc_4635A4
loc_4636C8:
    MOV rax, [rdi+580h]
    JMP loc_46352B
loc_4636D8:
    MOV eax, [rbx+66Ch]
    CMP ebp, eax
    JZ loc_46370C
loc_4636E2:
    LEA rcx, off_6BCA80
    MOV edx, ebp
    MOV rdi, [rbx]
    LEA rsi, aFtpPLineDState
    MOV r9, [rcx+rdx*8]
    MOV r8, [rcx+rax*8]
    MOV rdx, r13
    MOV ecx, 6C2h
    XOR eax, eax
    CALL sub_438D90
loc_46370C:
    MOV [rbx+66Ch], ebp
    ADD rsp, 8
    MOV eax, r12d
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_463720:
    ADD rdx, 1
    MOV eax, 1
    JMP loc_46357B
loc_46372E:
    XOR r12d, r12d
    JMP loc_4635A4
loc_463736:
    ADD rsp, 8
    MOV rdi, rbx
    XOR esi, esi
    POP rbx
    POP rbp
    POP r12
    POP r13
    JMP sub_461220
loc_46374A:
    MOV eax, [r8+18h]
    TEST eax, eax
    JNZ loc_4638EA
loc_463756:
    MOV rsi, [rbx+688h]
    CMP rsi, 0FFFFFFFFFFFFFFFFh
    JNZ loc_46384B
loc_463767:
    CMP byte ptr [rdi+7B7h], 0
    LEA rbp, [rbx+5B0h]
    MOV rdx, [rbx+638h]
    JZ loc_463889
loc_463782:
    LEA rsi, aRetrS
    XOR eax, eax
    MOV rdi, rbp
    CALL sub_458530
    TEST eax, eax
    MOV r12d, eax
    JNZ loc_4635A4
loc_46379E:
    MOV eax, [rbx+66Ch]
    CMP eax, 20h
    JZ loc_4637D4
loc_4637A9:
    LEA rdx, off_6BCA80
    MOV rdi, [rbx]
    LEA r9, aRetr
    LEA rsi, aFtpPLineDState
    MOV ecx, 6DFh
    MOV r8, [rdx+rax*8]
    MOV rdx, rbp
    XOR eax, eax
    CALL sub_438D90
loc_4637D4:
    MOV dword ptr [rbx+66Ch], 20h
    JMP loc_4635A4
loc_4637E3:
    MOV rdx, [rbx+620h]
    TEST rdx, rdx
    JZ loc_463635
loc_4637F3:
    LEA rbp, [rbx+5B0h]
    LEA rsi, aCwdS
    XOR eax, eax
    MOV dword ptr [rbx+644h], 0
    MOV rdi, rbp
    CALL sub_458530
    TEST eax, eax
    MOV r12d, eax
    JNZ loc_4635A4
loc_463820:
    MOV eax, [rbx+66Ch]
    CMP eax, 10h
    JZ loc_4636B0
loc_46382F:
    LEA rdx, off_6BCA80
    LEA r9, off_4AF36A
    MOV ecx, 384h
    MOV r8, [rdx+rax*8]
    JMP loc_46369C
loc_46384B:
    CALL sub_42FD60
    MOV rsi, [rbx+688h]
    ADD rsp, 8
    MOV rdi, rbx
    POP rbx
    POP rbp
    POP r12
    POP r13
    JMP sub_460CC0
loc_463869:
    MOV ecx, [rbx+644h]
    TEST ecx, ecx
    JNZ loc_463628
loc_463877:
    ADD rsp, 8
    MOV rdi, rbx
    POP rbx
    POP rbp
    POP r12
    POP r13
    JMP sub_4631A0
loc_463889:
    LEA rsi, aSizeS
    XOR eax, eax
    MOV rdi, rbp
    CALL sub_458530
    TEST eax, eax
    MOV r12d, eax
    JNZ loc_4635A4
loc_4638A5:
    MOV eax, [rbx+66Ch]
    CMP eax, 18h
    JZ loc_4638DB
loc_4638B0:
    LEA rdx, off_6BCA80
    MOV rdi, [rbx]
    LEA r9, aRetrSize
    LEA rsi, aFtpPLineDState
    MOV ecx, 6E3h
    MOV r8, [rdx+rax*8]
    MOV rdx, rbp
    XOR eax, eax
    CALL sub_438D90
loc_4638DB:
    MOV dword ptr [rbx+66Ch], 18h
    JMP loc_4635A4
loc_4638EA:
    MOV eax, [rbx+66Ch]
    TEST eax, eax
    JZ loc_463920
loc_4638F4:
    LEA rcx, off_6BCA80
    LEA rdx, [rbx+5B0h]
    LEA r9, aStop
    LEA rsi, aFtpPLineDState
    MOV r8, [rcx+rax*8]
    MOV ecx, 6D0h
    XOR eax, eax
    CALL sub_438D90
loc_463920:
    MOV dword ptr [rbx+66Ch], 0
    XOR r12d, r12d
    JMP loc_4635A4
```
Output:36B0
loc_4638B4:
    LEA rdx, off_6BCA80
    LEA r9, off_4AF36A
    MOV ecx, 380h
    MOV r8, [rdx+rax*8]
    JMP loc_46369C
loc_4638EA:
    ADD rsp, 8
    MOV rdi, rbx
    POP rbx
    POP rbp
    POP r12
    POP r13
    JMP sub_463512
```
############
```assembly
loc_7093E0:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST rdi, rdi
    JZ loc_7094BF
loc_7093EF:
    MOV rbx, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+1030h], rax
    JNZ loc_7094D8
loc_709404:
    MOV ecx, [rdi+1028h]
    MOV ebp, esi
    TEST ecx, ecx
    JNZ loc_709450
loc_709410:
    MOV rdi, [rbx+1008h]
    TEST rdi, rdi
    JZ loc_709481
loc_70941C:
    MOV rdx, [rbx+1018h]
    MOV esi, ebp
    CALL sub_554C40
    MOV rsi, rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_709445
loc_709434:
    LEA rdi, [rbx+1008h]
    CALL sub_416CF0
    MOV eax, 1
loc_709445:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_709450:
    LEA r9, [rdi+8]
    MOV r8d, 83B44Eh
    MOV edi, 40000h
    MOV ecx, 22BAh
    MOV edx, offset aMagickseparate
    MOV esi, offset aMagickwandMagi_0
    XOR eax, eax
    CALL sub_41B3E0
    MOV rdi, [rbx+1008h]
    TEST rdi, rdi
    JNZ loc_70941C
loc_709481:
    MOV rdi, [rbx+1018h]
    ADD rbx, 8
    XOR eax, eax
    MOV edx, offset aMagickseparate
    PUSH rbx
    MOV r9d, offset aContainsnoimag
    MOV r8d, 1D6h
    MOV ecx, 22BCh
    PUSH offset aS
    MOV esi, offset aMagickwandMagi_0
    CALL sub_409B70
    POP rax
    XOR eax, eax
    POP rdx
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_7094BF:
    MOV ecx, offset aMagickseparate_0
    MOV edx, 22B7h
    MOV esi, offset aMagickwandMagi_0
    MOV edi, offset aWandMagickwand
    CALL ___assert_fail
loc_7094D8:
    MOV ecx, offset aMagickseparate_0
    MOV edx, 22B8h
    MOV esi, offset aMagickwandMagi_0
    MOV edi, offset aWandSignatureM
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching",
    "ErrorHandling"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 6,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xABACADAB",
    "0x1030",
    "0x1028",
    "0x1008",
    "0x1018",
    "0x83B44E",
    "0x40000",
    "0x22BA",
    "0x8",
    "0x416CF0",
    "0x22BC",
    "0x1D6",
    "0x409B70",
    "0x22B7",
    "0x22B8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 16,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ErrorChecking/Validation"
}
```
############
```assembly
loc_6FD970:
    PUSH rbp
    PUSH rbx
    SUB rsp, 1028h
    MOV rax, fs:28h
    MOV [rsp+1038h+var_20], rax
    XOR eax, eax
    TEST rdi, rdi
    JZ loc_6FDADF
loc_6FD995:
    MOV rbx, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+1030h], rax
    JNZ loc_6FDAFD
loc_6FD9AA:
    MOV ecx, [rdi+1028h]
    MOV rbp, rsi
    TEST ecx, ecx
    JNZ loc_6FDA70
loc_6FD9BB:
    CMP qword ptr [rbx+1008h], 0
    JZ loc_6FDAA3
loc_6FD9C9:
    MOV rdi, rbp
    CALL sub_711040
    MOV rdi, rbp
    MOVSS [rsp+1038h+var_1034], xmm0
    CALL sub_711280
    MOV rdi, rbp
    MOVSS [rsp+1038h+var_1030], xmm0
    CALL sub_711BA0
    MOV rdi, rbp
    MOVSS [rsp+1038h+var_102C], xmm0
    CALL sub_7125C0
    MOV edx, 8354B6h
    MOV esi, 1000h
    MOV eax, 4
    CVTSS2SD xmm0, xmm0
    PXOR xmm3, xmm3
    PXOR xmm2, xmm2
    CVTSS2SD xmm3, [rsp+1038h+var_1034]
    LEA rdi, [rsp+1038h+var_1028]
    CVTSS2SD xmm2, [rsp+1038h+var_1030]
    PXOR xmm1, xmm1
    CVTSS2SD xmm1, [rsp+1038h+var_102C]
    CALL sub_418620
    MOV rdx, [rbx+1018h]
    LEA rsi, [rsp+1038h+var_1028]
    MOV rdi, [rbx+1008h]
    CALL sub_65A7D0
loc_6FDA4E:
    MOV rcx, [rsp+1038h+var_20]
    XOR rcx, fs:28h
    JNZ loc_6FDAF8
loc_6FDA65:
    ADD rsp, 1028h
    POP rbx
    POP rbp
    RETN 
loc_6FDA70:
    LEA r9, [rdi+8]
    XOR eax, eax
    MOV r8d, 83B44Eh
    MOV ecx, 36Bh
    MOV edx, offset aMagickblackthr
    MOV esi, offset aMagickwandMagi_0
    MOV edi, 40000h
    CALL sub_41B3E0
    CMP qword ptr [rbx+1008h], 0
    JNZ loc_6FD9C9
loc_6FDAA3:
    MOV rdi, [rbx+1018h]
    ADD rbx, 8
    XOR eax, eax
    MOV edx, offset aMagickblackthr
    PUSH rbx
    MOV r9d, offset aContainsnoimag
    MOV r8d, 1D6h
    MOV ecx, 36Dh
    PUSH offset aS
    MOV esi, offset aMagickwandMagi_0
    CALL sub_409B70
    POP rax
    XOR eax, eax
    POP rdx
    JMP loc_6FDA4E
loc_6FDADF:
    MOV ecx, offset aMagickblackthr_0
    MOV edx, 368h
    MOV esi, offset aMagickwandMagi_0
    MOV edi, offset aWandMagickwand
    CALL ___assert_fail
loc_6FDAF8:
    CALL ___stack_chk_fail
loc_6FDAFD:
    MOV ecx, offset aMagickblackthr_0
    MOV edx, 369h
    MOV esi, offset aMagickwandMagi_0
    MOV edi, offset aWandSignatureM
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching",
    "MemoryAccess"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 7,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": true,
  "presence_of_notable_integer_constants": [
    "0xABACADAB",
    "0x1030",
    "0x1028",
    "0x1008",
    "0x1018",
    "0x1034",
    "0x1030",
    "0x102C",
    "0x4",
    "0x8354B6",
    "0x1000",
    "0x83B44E",
    "0x36B",
    "0x40000",
    "0x1D6",
    "0x36D",
    "0x1028",
    "0x368",
    "0x369"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 25,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": true,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Image Processing",
  "inferred_category": "Graphics/Imaging"
}
```
############
```assembly
loc_5D5150:
    SUB rsp, 48h
    TEST rdi, rdi
    JZ loc_5D534B
loc_5D515D:
    TEST rsi, rsi
    JZ loc_5D5332
loc_5D5166:
    TEST rdx, rdx
    JZ loc_5D5319
loc_5D516F:
    MOVAPD xmm3, xmm0
    MOVAPD xmm0, xmm1
    MOVAPD xmm4, xmm1
    MOVSD xmm6, cs:qword_748DA0
    MAXSD xmm0, xmm2
    MOVAPD xmm1, xmm3
    MOVAPD xmm7, xmm3
    MAXSD xmm1, xmm0
    MOVAPD xmm0, xmm4
    MINSD xmm0, xmm2
    MOVAPD xmm5, xmm1
    MINSD xmm7, xmm0
    PXOR xmm0, xmm0
    SUBSD xmm5, xmm7
    MOVSD xmm7, qword ptr cs:xmmword_748E70
    MOVAPD xmm8, xmm5
    ANDPD xmm8, xmm7
    UCOMISD xmm6, xmm8
    JA loc_5D522D
loc_5D51C4:
    MOVAPD xmm8, xmm3
    SUBSD xmm8, xmm1
    ANDPD xmm8, xmm7
    UCOMISD xmm6, xmm8
    JA loc_5D5270
loc_5D51DE:
    MOVAPD xmm8, xmm4
    SUBSD xmm8, xmm1
    ANDPD xmm8, xmm7
    UCOMISD xmm6, xmm8
    JA loc_5D52F8
loc_5D51F8:
    MOVAPD xmm9, xmm2
    SUBSD xmm9, xmm1
    MOVAPD xmm1, xmm9
    ANDPD xmm7, xmm1
    UCOMISD xmm6, xmm7
    JBE loc_5D522D
loc_5D5211:
    MOVAPD xmm0, xmm3
    SUBSD xmm0, xmm4
    DIVSD xmm0, xmm5
    ADDSD xmm0, cs:qword_748CF0
    DIVSD xmm0, cs:qword_74F000
loc_5D522D:
    MULSD xmm3, cs:qword_748DB8
    MOVSD qword ptr [rdi], xmm0
    MULSD xmm4, cs:qword_748DC0
    MULSD xmm2, cs:qword_748DC8
    MOVSD xmm0, cs:qword_748CD8
    MULSD xmm5, xmm0
    ADDSD xmm3, xmm4
    ADDSD xmm3, xmm2
    MOVSD qword ptr [rsi], xmm5
    MULSD xmm3, xmm0
    MOVSD qword ptr [rdx], xmm3
    ADD rsp, 48h
    RETN 
loc_5D5270:
    MOVAPD xmm0, xmm4
    MOV [rsp+48h+var_10], rdx
    MOVSD xmm6, cs:qword_74F000
    SUBSD xmm0, xmm2
    MOV [rsp+48h+var_18], rsi
    MOVAPD xmm1, xmm6
    MOV [rsp+48h+var_20], rdi
    MOVSD [rsp+48h+var_28], xmm3
    DIVSD xmm0, xmm5
    MOVSD [rsp+48h+var_30], xmm4
    MOVSD [rsp+48h+var_38], xmm2
    MOVSD [rsp+48h+var_40], xmm5
    MOVSD [rsp+48h+var_48], xmm6
    ADDSD xmm0, xmm6
    CALL _fmod
    MOVSD xmm6, [rsp+48h+var_48]
    MOVSD xmm5, [rsp+48h+var_40]
    DIVSD xmm0, xmm6
    MOVSD xmm2, [rsp+48h+var_38]
    MOVSD xmm4, [rsp+48h+var_30]
    MOVSD xmm3, [rsp+48h+var_28]
    MOV rdi, [rsp+48h+var_20]
    MOV rsi, [rsp+48h+var_18]
    MOV rdx, [rsp+48h+var_10]
    JMP loc_5D522D
loc_5D52F8:
    MOVAPD xmm0, xmm2
    SUBSD xmm0, xmm3
    DIVSD xmm0, xmm5
    ADDSD xmm0, cs:qword_748E28
    DIVSD xmm0, cs:qword_74F000
    JMP loc_5D522D
loc_5D5319:
    MOV ecx, offset aConvertrgbtohc_0
    MOV edx, 39Ch
    MOV esi, offset aMagickcoreGemC
    MOV edi, offset aLumaDoubleNull
    CALL ___assert_fail
loc_5D5332:
    MOV ecx, offset aConvertrgbtohc_0
    MOV edx, 39Bh
    MOV esi, offset aMagickcoreGemC
    MOV edi, offset aChromaDoubleNu
    CALL ___assert_fail
loc_5D534B:
    MOV ecx, offset aConvertrgbtohc_0
    MOV edx, 39Ah
    MOV esi, offset aMagickcoreGemC
    MOV edi, offset aHueDoubleNull
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "DataMovement",
    "Arithmetic",
    "ConditionalBranching",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 4,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": true,
  "presence_of_notable_integer_constants": [
    "0x48",
    "0x39C",
    "0x39B",
    "0x39A"
  ],
  "presence_of_notable_floating_point_constants": [
    "cs:qword_748DA0",
    "cs:qword_748E70",
    "cs:qword_748CF0",
    "cs:qword_74F000",
    "cs:qword_748DB8",
    "cs:qword_748DC0",
    "cs:qword_748DC8",
    "cs:qword_748CD8",
    "cs:qword_748E28"
  ],
  "count_of_distinct_immediate_values": 10,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Color Conversion (RGB to HSL)",
  "inferred_category": "Image Processing"
}
```
############
```assembly
loc_690E80:
    MOV rax, fs:0
    ADD rax, 0FFFFFFFFFFFFFFF8h
    RETN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "MemoryAccess",
    "Arithmetic"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xFFFFFFFFFFFFFFF8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Security/Cryptography"
}
```
############
```assembly
loc_4C01C0:
    MOV eax, offset unk_6D9E00
    RETN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Pointer",
  "dominant_operation_categories": [
    "DataMovement"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x6D9E00"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_648690:
    PUSH r15
    PUSH r14
    MOV r15, rdx
    PUSH r13
    PUSH r12
    MOV r14, r8
    PUSH rbp
    PUSH rbx
    MOV rbx, rcx
    SUB rsp, 18h
    MOV rbp, [rcx]
    MOV r12, [rdx]
    MOV [rsp+48h+fd], edi
    MOV [rsp+48h+count], rsi
    MOV esi, 0Ah
    MOV r13, rbp
    MOV rdi, r12
    SUB r13, r12
    MOV rdx, r13
    CALL sub_614990
    TEST rax, rax
    JZ loc_648700
loc_6486D0:
    ADD rax, 1
    MOV [r15], rax
    MOV rdx, [rbx]
    CMP rax, rdx
    JA loc_648878
loc_6486E3:
    CMP r12, rdx
    JZ loc_648718
loc_6486E8:
    MOV rax, r12
loc_6486EB:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_648700:
    CMP r12, [rsp+48h+count]
    JZ loc_64870B
loc_648706:
    CMP rbp, r14
    JZ loc_64871C
loc_64870B:
    LEA rax, [rbp-1]
    JMP loc_6486D0
loc_648718:
    XOR eax, eax
    JMP loc_6486EB
loc_64871C:
    MOV r14, [rsp+48h+count]
    MOV rdx, r13
    MOV rsi, r12
    XOR r12d, r12d
    MOV rdi, r14
    CALL sub_4003B0
    MOV rax, r14
    SUB rax, [r15]
    MOV rdx, rbp
    ADD [rbx], rax
    MOVSXD rax, [rsp+48h+fd]
    MOV [r15], r14
    MOV rsi, [rbx]
    MOV qword ptr [rsp+48h+fd], rax
    MOV rdi, rax
    SUB rdx, rsi
    MOV eax, r12d
    SYSCALL; 
    CMP rax, 0FFFFFFFFFFFFF000h
    JBE loc_648773
loc_648760:
    MOV rdx, 0FFFFFFFFFFFFFFC8h
    NEG eax
    MOV fs:[rdx], eax
    XOR eax, eax
    JMP loc_6486EB
loc_648773:
    TEST rax, rax
    JS loc_648718
loc_648778:
    ADD rax, [rbx]
    MOV esi, 0Ah
    MOV [rbx], rax
    MOV r14, [r15]
    MOV rdx, rax
    MOV r13, rax
    SUB rdx, r14
    MOV rdi, r14
    CALL sub_614990
    TEST rax, rax
    JNZ loc_648865
loc_6487A0:
    CMP rbp, r13
    JNZ loc_648891
loc_6487A9:
    MOV rcx, [rsp+48h+count]
    MOV rax, rbp
    MOV rdi, qword ptr [rsp+48h+fd]
    SUB rax, rcx
    LEA r14, [rax+rax*2]
    LEA rax, [r14+3]
    TEST r14, r14
    CMOVS r14, rax
    MOV rax, rbp
    SAR r14, 2
    ADD r14, rcx
    SUB rax, r14
    MOV [rbx], r14
    MOV rsi, r14
    MOV [rsp+48h+count], rax
    MOV rdx, rax
    MOV eax, r12d
    SYSCALL; 
    CMP rax, 0FFFFFFFFFFFFF000h
    MOV r13, rax
    JBE loc_648833
loc_6487F1:
    NOP dword ptr [rax+00000000h]
loc_6487F8:
    MOV rax, 0FFFFFFFFFFFFFFC8h
    MOV ecx, r13d
    NEG ecx
    MOV fs:[rax], ecx
    XOR eax, eax
    JMP loc_6486EB
loc_648810:
    CMP rbp, rcx
    JNZ loc_64886D
loc_648815:
    MOV [rbx], r14
    MOV rdx, [rsp+48h+count]
    MOV rsi, r14
    MOV rdi, qword ptr [rsp+48h+fd]
    XOR eax, eax
    SYSCALL; 
    CMP rax, 0FFFFFFFFFFFFF000h
    MOV r13, rax
    JA loc_6487F8
loc_648833:
    TEST r13, r13
    JS loc_648718
loc_64883C:
    MOV r12, [rbx]
    MOV rdx, r13
    MOV esi, 0Ah
    MOV rdi, r12
    CALL sub_614990
    MOV byte ptr [r12], 0Ah
    MOV rcx, r13
    ADD rcx, [rbx]
    TEST rax, rax
    MOV [rbx], rcx
    JZ loc_648810
loc_648862:
    MOV r14, [r15]
loc_648865:
    MOV r12, r14
    JMP loc_6486D0
loc_64886D:
    MOV rbp, rcx
    MOV r12, [r15]
    JMP loc_64870B
loc_648878:
    MOV ecx, offset aNextLine
    MOV edx, 77h
    MOV esi, offset aSysdepsUnixSys_1
    MOV edi, offset aCpRe
    CALL sub_5E76F0
loc_648891:
    MOV rbp, r13
    MOV r12, r14
    JMP loc_64870B
```
Output:```json
{
  "input_parameter_count": 4,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Integer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x77",
    "0xA",
    "0xFFFFFFFFFFFFF000h",
    "0xFFFFFFFFFFFFFFC8h"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 10,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": true,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 2,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "File I/O/Handling"
}
```
############
```assembly
loc_52DB40:
    MOV rax, [rdi]
    PUSH rbp
    PUSH rbx
    MOV ecx, [rsi]
    MOV r11, [rdi+8]
    MOV rbp, rax
    SHR rbp, 10h
    MOVZX ebp, bp
    MOV r9, rcx
    MOV rdx, r11
    IMUL rcx, rbp
    SHR rdx, 10h
    TEST rcx, rcx
    JZ loc_52E320
loc_52DB6C:
    MOVZX r8d, cx
    SHR rcx, 10h
    SUB r8, rcx
    MOV rcx, r8
    SHR rcx, 10h
    SUB r8, rcx
loc_52DB81:
    MOV r10d, [rsi+4]
    MOV ebx, [rsi+8]
    ADD r10, rax
    MOV eax, [rsi+0Ch]
    ADD rbx, rdx
    MOVZX edx, r11w
    MOV rcx, rax
    IMUL rax, rdx
    TEST rax, rax
    JZ loc_52E620
loc_52DBA5:
    MOVZX r11d, ax
    SHR rax, 10h
    SUB r11, rax
    MOV rax, r11
    SHR rax, 10h
    SUB r11, rax
loc_52DBBA:
    MOV edx, [rsi+10h]
    MOV rcx, r8
    XOR rcx, rbx
    MOVZX ecx, cx
    MOV rbp, rdx
    IMUL rdx, rcx
    TEST rdx, rdx
    JZ loc_52E608
loc_52DBD6:
    MOVZX eax, dx
    SHR rdx, 10h
    SUB rax, rdx
    MOV rdx, rax
    SHR rdx, 10h
    SUB rax, rdx
loc_52DBEA:
    MOV edx, [rsi+14h]
    MOV r9, r11
    XOR r9, r10
    ADD r9, rax
    MOVZX r9d, r9w
    MOV rbp, rdx
    IMUL rdx, r9
    TEST rdx, rdx
    JZ loc_52E5F0
loc_52DC0A:
    MOVZX ecx, dx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
loc_52DC21:
    ADD rax, rdx
    XOR r8, rdx
    XOR rdx, rbx
    XOR r11, rax
    XOR rax, r10
    MOV r10d, [rsi+18h]
    MOVZX r8d, r8w
    MOV r9, r10
    IMUL r10, r8
    TEST r10, r10
    JZ loc_52E5D8
loc_52DC48:
    MOVZX ecx, r10w
    SHR r10, 10h
    SUB rcx, r10
    MOV r8, rcx
    MOV rbx, rcx
    SHR r8, 10h
    SUB rbx, r8
loc_52DC60:
    MOV r9d, [rsi+20h]
    MOVZX ecx, r11w
    MOV r10d, [rsi+1Ch]
    ADD r9, rax
    MOV eax, [rsi+24h]
    ADD rdx, r10
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E5C0
loc_52DC85:
    MOVZX r11d, ax
    SHR rax, 10h
    SUB r11, rax
    MOV rax, r11
    SHR rax, 10h
    SUB r11, rax
loc_52DC9A:
    MOV eax, [rsi+28h]
    MOV rcx, rbx
    XOR rcx, r9
    MOVZX ecx, cx
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E5A8
loc_52DCB6:
    MOVZX r10d, ax
    SHR rax, 10h
    SUB r10, rax
    MOV rax, r10
    SHR rax, 10h
    SUB r10, rax
loc_52DCCB:
    MOV eax, [rsi+2Ch]
    MOV r8, r11
    XOR r8, rdx
    ADD r8, r10
    MOVZX r8d, r8w
    MOV rbp, rax
    IMUL rax, r8
    TEST rax, rax
    JZ loc_52E590
loc_52DCEB:
    MOVZX ecx, ax
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
loc_52DD02:
    ADD r10, rax
    XOR rbx, rax
    XOR rax, r9
    MOV r9d, [rsi+30h]
    MOVZX ecx, bx
    XOR r11, r10
    XOR rdx, r10
    MOV r10, r9
    IMUL r9, rcx
    TEST r9, r9
    JZ loc_52E578
loc_52DD28:
    MOVZX r8d, r9w
    SHR r9, 10h
    SUB r8, r9
    MOV rcx, r8
    SHR rcx, 10h
    SUB r8, rcx
loc_52DD3D:
    MOV r10d, [rsi+38h]
    MOV r9d, [rsi+34h]
    MOVZX ecx, r11w
    ADD r10, rdx
    MOV edx, [rsi+3Ch]
    ADD rax, r9
    MOV r9, rdx
    IMUL rdx, rcx
    TEST rdx, rdx
    JZ loc_52E560
loc_52DD62:
    MOVZX r11d, dx
    SHR rdx, 10h
    SUB r11, rdx
    MOV rdx, r11
    SHR rdx, 10h
    SUB r11, rdx
loc_52DD77:
    MOV edx, [rsi+40h]
    MOV rcx, r8
    XOR rcx, r10
    MOVZX ecx, cx
    MOV rbp, rdx
    IMUL rdx, rcx
    TEST rdx, rdx
    JZ loc_52E548
loc_52DD93:
    MOVZX r9d, dx
    SHR rdx, 10h
    SUB r9, rdx
    MOV rdx, r9
    MOV rbx, r9
    SHR rdx, 10h
    SUB rbx, rdx
loc_52DDAB:
    MOV edx, [rsi+44h]
    MOV r9, r11
    XOR r9, rax
    ADD r9, rbx
    MOVZX r9d, r9w
    MOV rbp, rdx
    IMUL rdx, r9
    TEST rdx, rdx
    JZ loc_52E530
loc_52DDCB:
    MOVZX ecx, dx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
loc_52DDE2:
    LEA r9, [rbx+rdx]
    XOR r8, rdx
    XOR rdx, r10
    MOV r10d, [rsi+48h]
    MOVZX r8d, r8w
    XOR r11, r9
    XOR rax, r9
    MOV r9, r10
    IMUL r10, r8
    TEST r10, r10
    JZ loc_52E518
loc_52DE0A:
    MOVZX ecx, r10w
    SHR r10, 10h
    SUB rcx, r10
    MOV r8, rcx
    MOV rbx, rcx
    SHR r8, 10h
    SUB rbx, r8
loc_52DE22:
    MOV r9d, [rsi+50h]
    MOVZX ecx, r11w
    MOV r10d, [rsi+4Ch]
    ADD r9, rax
    MOV eax, [rsi+54h]
    ADD rdx, r10
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E500
loc_52DE47:
    MOVZX r11d, ax
    SHR rax, 10h
    SUB r11, rax
    MOV rax, r11
    SHR rax, 10h
    SUB r11, rax
loc_52DE5C:
    MOV eax, [rsi+58h]
    MOV rcx, rbx
    XOR rcx, r9
    MOVZX ecx, cx
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E4E8
loc_52DE78:
    MOVZX r10d, ax
    SHR rax, 10h
    SUB r10, rax
    MOV rax, r10
    SHR rax, 10h
    SUB r10, rax
loc_52DE8D:
    MOV eax, [rsi+5Ch]
    MOV r8, r11
    XOR r8, rdx
    ADD r8, r10
    MOVZX r8d, r8w
    MOV rbp, rax
    IMUL rax, r8
    TEST rax, rax
    JZ loc_52E4D0
loc_52DEAD:
    MOVZX ecx, ax
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
loc_52DEC4:
    ADD r10, rax
    XOR rbx, rax
    XOR rax, r9
    MOV r9d, [rsi+60h]
    MOVZX ecx, bx
    XOR r11, r10
    XOR rdx, r10
    MOV r10, r9
    IMUL r9, rcx
    TEST r9, r9
    JZ loc_52E4B8
loc_52DEEA:
    MOVZX r8d, r9w
    SHR r9, 10h
    SUB r8, r9
    MOV rcx, r8
    SHR rcx, 10h
    SUB r8, rcx
loc_52DEFF:
    MOV r10d, [rsi+68h]
    MOV r9d, [rsi+64h]
    MOVZX ecx, r11w
    ADD r10, rdx
    MOV edx, [rsi+6Ch]
    ADD rax, r9
    MOV r9, rdx
    IMUL rdx, rcx
    TEST rdx, rdx
    JZ loc_52E4A0
loc_52DF24:
    MOVZX r11d, dx
    SHR rdx, 10h
    SUB r11, rdx
    MOV rdx, r11
    SHR rdx, 10h
    SUB r11, rdx
loc_52DF39:
    MOV edx, [rsi+70h]
    MOV rcx, r8
    XOR rcx, r10
    MOVZX ecx, cx
    MOV rbp, rdx
    IMUL rdx, rcx
    TEST rdx, rdx
    JZ loc_52E488
loc_52DF55:
    MOVZX r9d, dx
    SHR rdx, 10h
    SUB r9, rdx
    MOV rdx, r9
    MOV rbx, r9
    SHR rdx, 10h
    SUB rbx, rdx
loc_52DF6D:
    MOV edx, [rsi+74h]
    MOV r9, r11
    XOR r9, rax
    ADD r9, rbx
    MOVZX r9d, r9w
    MOV rbp, rdx
    IMUL rdx, r9
    TEST rdx, rdx
    JZ loc_52E470
loc_52DF8D:
    MOVZX ecx, dx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
loc_52DFA4:
    LEA r9, [rbx+rdx]
    XOR r8, rdx
    XOR rdx, r10
    MOV r10d, [rsi+78h]
    MOVZX r8d, r8w
    XOR r11, r9
    XOR rax, r9
    MOV r9, r10
    IMUL r10, r8
    TEST r10, r10
    JZ loc_52E458
loc_52DFCC:
    MOVZX ecx, r10w
    SHR r10, 10h
    SUB rcx, r10
    MOV r8, rcx
    MOV rbx, rcx
    SHR r8, 10h
    SUB rbx, r8
loc_52DFE4:
    MOV r9d, [rsi+80h]
    MOVZX ecx, r11w
    MOV r10d, [rsi+7Ch]
    ADD r9, rax
    MOV eax, [rsi+84h]
    ADD rdx, r10
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E440
loc_52E00F:
    MOVZX r11d, ax
    SHR rax, 10h
    SUB r11, rax
    MOV rax, r11
    SHR rax, 10h
    SUB r11, rax
loc_52E024:
    MOV eax, [rsi+88h]
    MOV rcx, rbx
    XOR rcx, r9
    MOVZX ecx, cx
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E428
loc_52E043:
    MOVZX r10d, ax
    SHR rax, 10h
    SUB r10, rax
    MOV rax, r10
    SHR rax, 10h
    SUB r10, rax
loc_52E058:
    MOV eax, [rsi+8Ch]
    MOV r8, r11
    XOR r8, rdx
    ADD r8, r10
    MOVZX r8d, r8w
    MOV rbp, rax
    IMUL rax, r8
    TEST rax, rax
    JZ loc_52E410
loc_52E07B:
    MOVZX ecx, ax
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
loc_52E092:
    ADD r10, rax
    XOR rbx, rax
    XOR rax, r9
    MOV r9d, [rsi+90h]
    MOVZX ecx, bx
    XOR r11, r10
    XOR rdx, r10
    MOV r10, r9
    IMUL r9, rcx
    TEST r9, r9
    JZ loc_52E3F8
loc_52E0BB:
    MOVZX r8d, r9w
    SHR r9, 10h
    SUB r8, r9
    MOV rcx, r8
    SHR rcx, 10h
    SUB r8, rcx
loc_52E0D0:
    MOV r10d, [rsi+98h]
    MOV r9d, [rsi+94h]
    MOVZX ecx, r11w
    ADD r10, rdx
    MOV edx, [rsi+9Ch]
    ADD rax, r9
    MOV r9, rdx
    IMUL rdx, rcx
    TEST rdx, rdx
    JZ loc_52E3E0
loc_52E0FE:
    MOVZX r11d, dx
    SHR rdx, 10h
    SUB r11, rdx
    MOV rdx, r11
    SHR rdx, 10h
    SUB r11, rdx
loc_52E113:
    MOV edx, [rsi+0A0h]
    MOV rcx, r8
    XOR rcx, r10
    MOVZX ecx, cx
    MOV rbp, rdx
    IMUL rdx, rcx
    TEST rdx, rdx
    JZ loc_52E3C8
loc_52E132:
    MOVZX r9d, dx
    SHR rdx, 10h
    SUB r9, rdx
    MOV rdx, r9
    MOV rbx, r9
    SHR rdx, 10h
    SUB rbx, rdx
loc_52E14A:
    MOV edx, [rsi+0A4h]
    MOV r9, r11
    XOR r9, rax
    ADD r9, rbx
    MOVZX r9d, r9w
    MOV rbp, rdx
    IMUL rdx, r9
    TEST rdx, rdx
    JZ loc_52E3B0
loc_52E16D:
    MOVZX ecx, dx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
    SHR rdx, 10h
    SUB rcx, rdx
    MOV rdx, rcx
loc_52E184:
    LEA r9, [rbx+rdx]
    XOR r8, rdx
    XOR rdx, r10
    MOV r10d, [rsi+0A8h]
    MOVZX r8d, r8w
    XOR r11, r9
    XOR rax, r9
    MOV r9, r10
    IMUL r10, r8
    TEST r10, r10
    JZ loc_52E398
loc_52E1AF:
    MOVZX ecx, r10w
    SHR r10, 10h
    SUB rcx, r10
    MOV r8, rcx
    SHR r8, 10h
    SUB rcx, r8
loc_52E1C4:
    MOV r9d, [rsi+0B0h]
    MOV r10d, [rsi+0ACh]
    ADD r9, rax
    MOV eax, [rsi+0B4h]
    ADD r10, rdx
    MOVZX edx, r11w
    MOV r8, rax
    IMUL rax, rdx
    TEST rax, rax
    JZ loc_52E380
loc_52E1F2:
    MOVZX r11d, ax
    SHR rax, 10h
    SUB r11, rax
    MOV rax, r11
    SHR rax, 10h
    SUB r11, rax
loc_52E207:
    MOV r8d, [rsi+0B8h]
    MOV rbp, rcx
    XOR rbp, r9
    MOVZX ebp, bp
    MOV rax, r8
    IMUL r8, rbp
    TEST r8, r8
    JZ loc_52E368
loc_52E227:
    MOVZX edx, r8w
    SHR r8, 10h
    SUB rdx, r8
    MOV rax, rdx
    MOV rbx, rdx
    SHR rax, 10h
    SUB rbx, rax
loc_52E23F:
    MOV eax, [rsi+0BCh]
    MOV r8, r11
    XOR r8, r10
    ADD r8, rbx
    MOVZX r8d, r8w
    MOV rbp, rax
    IMUL rax, r8
    TEST rax, rax
    JZ loc_52E350
loc_52E262:
    MOVZX edx, ax
    SHR rax, 10h
    SUB rdx, rax
    MOV rax, rdx
    SHR rax, 10h
    SUB rdx, rax
    MOV rax, rdx
loc_52E279:
    LEA rdx, [rbx+rax]
    XOR rcx, rax
    XOR rax, r9
    MOV r9d, [rsi+0C0h]
    MOVZX ecx, cx
    XOR r11, rdx
    XOR rdx, r10
    MOV r10, r9
    IMUL r9, rcx
    TEST r9, r9
    JZ loc_52E338
loc_52E2A3:
    MOVZX r8d, r9w
    SHR r9, 10h
    SUB r8, r9
    MOV rcx, r8
    SHR rcx, 10h
    SUB r8, rcx
loc_52E2B8:
    MOV r10d, [rsi+0C4h]
    MOVZX r11d, r11w
    MOV ecx, [rsi+0C8h]
    ADD r10, rdx
    MOV edx, [rsi+0CCh]
    ADD rcx, rax
    MOV rsi, rdx
    IMUL rdx, r11
    TEST rdx, rdx
    JNZ loc_52E638
loc_52E2E5:
    MOV eax, 1
    SUB eax, esi
    MOV edx, eax
    SUB edx, r11d
loc_52E2F1:
    MOV rsi, r8
    MOVZX eax, r10w
    SHL rsi, 10h
    MOV esi, esi
    OR rax, rsi
    MOV [rdi], rax
    MOV rax, rcx
    SHL rax, 10h
    MOV ecx, eax
    MOVZX eax, dx
    OR rax, rcx
    POP rbx
    MOV [rdi+8], rax
    POP rbp
    RETN 
loc_52E320:
    MOV r8d, 1
    SUB r8d, r9d
    SUB r8d, ebp
    JMP loc_52DB81
loc_52E338:
    MOV r8d, 1
    SUB r8d, r10d
    SUB r8d, ecx
    JMP loc_52E2B8
loc_52E350:
    MOV edx, 1
    SUB edx, ebp
    MOV eax, edx
    SUB eax, r8d
    JMP loc_52E279
loc_52E368:
    MOV edx, 1
    SUB edx, eax
    MOV ebx, edx
    SUB ebx, ebp
    JMP loc_52E23F
loc_52E380:
    MOV r11d, 1
    SUB r11d, r8d
    SUB r11d, edx
    JMP loc_52E207
loc_52E398:
    MOV ecx, 1
    SUB ecx, r9d
    SUB ecx, r8d
    JMP loc_52E1C4
loc_52E3B0:
    MOV ecx, 1
    SUB ecx, ebp
    MOV edx, ecx
    SUB edx, r9d
    JMP loc_52E184
loc_52E3C8:
    MOV r9d, 1
    SUB r9d, ebp
    MOV ebx, r9d
    SUB ebx, ecx
    JMP loc_52E14A
loc_52E3E0:
    MOV r11d, 1
    SUB r11d, r9d
    SUB r11d, ecx
    JMP loc_52E113
loc_52E3F8:
    MOV r8d, 1
    SUB r8d, r10d
    SUB r8d, ecx
    JMP loc_52E0D0
loc_52E410:
    MOV ecx, 1
    SUB ecx, ebp
    MOV eax, ecx
    SUB eax, r8d
    JMP loc_52E092
loc_52E428:
    MOV r10d, 1
    SUB r10d, r8d
    SUB r10d, ecx
    JMP loc_52E058
loc_52E440:
    MOV r11d, 1
    SUB r11d, r8d
    SUB r11d, ecx
    JMP loc_52E024
loc_52E458:
    MOV ecx, 1
    SUB ecx, r9d
    MOV ebx, ecx
    SUB ebx, r8d
    JMP loc_52DFE4
loc_52E470:
    MOV ecx, 1
    SUB ecx, ebp
    MOV edx, ecx
    SUB edx, r9d
    JMP loc_52DFA4
loc_52E488:
    MOV r9d, 1
    SUB r9d, ebp
    MOV ebx, r9d
    SUB ebx, ecx
    JMP loc_52DF6D
loc_52E4A0:
    MOV r11d, 1
    SUB r11d, r9d
    SUB r11d, ecx
    JMP loc_52DF39
loc_52E4B8:
    MOV r8d, 1
    SUB r8d, r10d
    SUB r8d, ecx
    JMP loc_52DEFF
loc_52E4D0:
    MOV ecx, 1
    SUB ecx, ebp
    MOV eax, ecx
    SUB eax, r8d
    JMP loc_52DEC4
loc_52E4E8:
    MOV r10d, 1
    SUB r10d, r8d
    SUB r10d, ecx
    JMP loc_52DE8D
loc_52E500:
    MOV r11d, 1
    SUB r11d, r8d
    SUB r11d, ecx
    JMP loc_52DE5C
loc_52E518:
    MOV ecx, 1
    SUB ecx, r9d
    MOV ebx, ecx
    SUB ebx, r8d
    JMP loc_52DE22
loc_52E530:
    MOV ecx, 1
    SUB ecx, ebp
    MOV edx, ecx
    SUB edx, r9d
    JMP loc_52DDE2
loc_52E548:
    MOV r9d, 1
    SUB r9d, ebp
    MOV ebx, r9d
    SUB ebx, ecx
    JMP loc_52DDAB
loc_52E560:
    MOV r11d, 1
    SUB r11d, r9d
    SUB r11d, ecx
    JMP loc_52DD77
loc_52E578:
    MOV r8d, 1
    SUB r8d, r10d
    SUB r8d, ecx
    JMP loc_52DD3D
loc_52E590:
    MOV ecx, 1
    SUB ecx, ebp
    MOV eax, ecx
    SUB eax, r8d
    JMP loc_52DD02
loc_52E5A8:
    MOV r10d, 1
    SUB r10d, r8d
    SUB r10d, ecx
    JMP loc_52DCCB
loc_52E5C0:
    MOV r11d, 1
    SUB r11d, r8d
    SUB r11d, ecx
    JMP loc_52DC9A
loc_52E5D8:
    MOV ecx, 1
    SUB ecx, r9d
    MOV ebx, ecx
    SUB ebx, r8d
    JMP loc_52DC60
loc_52E5F0:
    MOV ecx, 1
    SUB ecx, ebp
    MOV edx, ecx
    SUB edx, r9d
    JMP loc_52DC21
loc_52E608:
    MOV eax, 1
    SUB eax, ebp
    SUB eax, ecx
    JMP loc_52DBEA
loc_52E620:
    MOV r11d, 1
    SUB r11d, ecx
    SUB r11d, edx
    JMP loc_52DBBA
loc_52E638:
    MOVZX eax, dx
    SHR rdx, 10h
    SUB rax, rdx
    MOV rdx, rax
    SHR rdx, 10h
    SUB rax, rdx
    MOV rdx, rax
    JMP loc_52E2F1
```
Output:ZX ecx, ax
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
    SHR rax, 10h
    SUB rcx, rax
    MOV rax, rcx
loc_52DECF:
    LEA r10, [rbx+rax]
    XOR rbx, rax
    XOR rax, r9
    MOV r9, r10d
    MOVZX r8d, bx
    XOR r11, r10
    XOR rdx, r10
    MOV r10, r9
    IMUL r9, r8
    TEST r9, r9
    JZ loc_52E4B8
loc_52DF0A:
    MOVZX ecx, r9w
    SHR r9, 10h
    SUB rcx, r9
    MOV r8, rcx
    MOV rbx, rcx
    SHR r8, 10h
    SUB rbx, r8
loc_52DF22:
    MOV r9d, [rsi+60h]
    MOVZX ecx, r11w
    MOV r10d, [rsi+64h]
    ADD r9, rax
    MOV eax, [rsi+68h]
    ADD rdx, r10
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E4A0
loc_52DF47:
    MOVZX r11d, ax
    SHR rax, 10h
    SUB r11, rax
    MOV rax, r11
    SHR rax, 10h
    SUB r11, rax
loc_52DF5C:
    MOV eax, [rsi+6Ch]
    MOV rcx, rbx
    XOR rcx, r9
    MOVZX ecx, cx
    MOV r8, rax
    IMUL rax, rcx
    TEST rax, rax
    JZ loc_52E490
loc_52DF78:
    MOVZX r10d, ax
############
```assembly
loc_405A90:
    TEST esi, esi
    JZ loc_405B90
loc_405A98:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 18h
    MOVZX eax, byte ptr [rdi]
    AND eax, 0E0h
    MOV [r8], eax
    MOVZX eax, byte ptr [rdi]
    AND eax, 1Fh
    CMP al, 1Fh
    JZ loc_405AE8
loc_405AB6:
    MOVZX eax, al
    LEA rdi, [rdi+1]
    SUB esi, 1
    MOV [rdx], eax
loc_405AC2:
    TEST esi, esi
    JZ loc_405B80
loc_405ACA:
    MOVZX eax, byte ptr [rdi]
    TEST al, al
    JS loc_405B30
loc_405AD1:
    LEA rbp, [rdi+1]
    MOV [rcx], eax
loc_405AD7:
    MOV eax, ebp
    ADD rsp, 18h
    SUB eax, ebx
    POP rbx
    POP rbp
    RETN 
loc_405AE8:
    MOV dword ptr [rdx], 0
    CMP byte ptr [rdi], 0
    JNS loc_405B26
loc_405AF3:
    SUB esi, 1
    LEA rdi, [rdi+1]
    JZ loc_405B80
loc_405B00:
    XOR eax, eax
    JMP loc_405B11
loc_405B08:
    ADD rdi, 1
    SUB esi, 1
    JZ loc_405B80
loc_405B11:
    MOVZX r8d, byte ptr [rdi]
    SHL eax, 7
    AND r8d, 7Fh
    OR eax, r8d
    MOV [rdx], eax
    CMP byte ptr [rdi], 0
    JS loc_405B08
loc_405B26:
    ADD rdi, 1
    SUB esi, 1
    JMP loc_405AC2
loc_405B30:
    MOV edx, eax
    LEA rbp, [rdi+1]
    AND edx, 7Fh
    CMP esi, edx
    JLE loc_405B80
loc_405B3D:
    TEST edx, edx
    LEA r8d, [rdx-1]
    JZ loc_405B8C
loc_405B45:
    LEA rax, [rdi+r8+2]
    MOV rdx, rbp
    XOR edi, edi
    NOP 
loc_405B50:
    ADD rdx, 1
    MOVZX esi, byte ptr [rdx-1]
    SHL edi, 8
    OR edi, esi
    CMP rdx, rax
    JNZ loc_405B50
loc_405B62:
    LEA rbp, [rbp+r8+1]
loc_405B67:
    MOV [rsp+28h+var_20], rcx
    CALL sub_40C620
    MOV rcx, [rsp+28h+var_20]
    MOV [rcx], eax
    JMP loc_405AD7
loc_405B80:
    ADD rsp, 18h
    MOV eax, 0FFFFFFFFh
    POP rbx
    POP rbp
    RETN 
loc_405B8C:
    XOR edi, edi
    JMP loc_405B67
loc_405B90:
    MOV eax, 0FFFFFFFFh
    RETN 
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "Looping",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xE0",
    "0x1F",
    "0x7F",
    "0xFFFFFFFF"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 12,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Bitwise Processing",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_40F190:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    LEA rbx, [rdi+1E0h]
    CMP dword ptr [rdi+3F4h], 1
    MOV r11d, [rsi]
    MOV r10d, [rsi+4]
    MOV r9d, [rsi+8]
    MOV r8d, [rsi+0Ch]
    MOV eax, [rsi+10h]
    MOV edx, [rsi+14h]
    JLE loc_40F388
loc_40F1C3:
    XOR r15d, r15d
    NOP word ptr [rax+rax+00000000h]
loc_40F1D0:
    MOV r14d, [rbx]
    ADD rbx, 18h
    XOR r14d, r11d
    MOV [rsi], r14d
    XOR r10d, [rbx-14h]
    MOV [rsi+4], r10d
    XOR r9d, [rbx-10h]
    MOV r13d, r10d
    MOV [rsi+8], r9d
    XOR r8d, [rbx-0Ch]
    MOV ebp, r9d
    MOV [rsi+0Ch], r8d
    XOR eax, [rbx-8]
    MOV r12d, r8d
    MOVZX r8d, r8b
    MOV [rsi+10h], eax
    XOR edx, [rbx-4]
    MOV ecx, eax
    MOV eax, r14d
    SHR eax, 18h
    MOV r11d, ds:dword_444060[rax*4]
    MOVZX eax, ch
    XOR r11d, ds:dword_443460[r8*4]
    XOR r11d, ds:dword_443860[rax*4]
    MOV eax, edx
    MOVZX r8d, cl
    SHR eax, 10h
    MOV [rsp+30h+var_34], edx
    MOVZX eax, al
    XOR r11d, ds:dword_443C60[rax*4]
    MOV eax, r10d
    SHR eax, 18h
    MOV r10d, ds:dword_444060[rax*4]
    MOV eax, r14d
    XOR r10d, ds:dword_443460[r8*4]
    SHR eax, 10h
    MOVZX eax, al
    XOR r10d, ds:dword_443C60[rax*4]
    MOV rax, rdx
    MOV rdx, r14
    MOVZX eax, ah
    MOVZX edx, dh
    MOVZX r14d, r14b
    XOR r10d, ds:dword_443860[rax*4]
    MOV eax, r13d
    SHR eax, 10h
    MOVZX eax, al
    MOV r9d, ds:dword_443C60[rax*4]
    MOV eax, ebp
    XOR r9d, ds:dword_443860[rdx*4]
    SHR eax, 18h
    MOV rdx, rbp
    XOR r9d, ds:dword_444060[rax*4]
    MOVZX eax, byte ptr [rsp+30h+var_34]
    MOVZX edx, dh
    XOR r9d, ds:dword_443460[rax*4]
    MOV eax, r12d
    SHR eax, 18h
    MOV r8d, ds:dword_444060[rax*4]
    MOV eax, ebp
    XOR r8d, ds:dword_443460[r14*4]
    SHR eax, 10h
    MOVZX ebp, bpl
    MOVZX eax, al
    XOR r8d, ds:dword_443C60[rax*4]
    MOV rax, r13
    MOVZX r13d, r13b
    MOVZX eax, ah
    XOR r8d, ds:dword_443860[rax*4]
    MOV eax, ecx
    SHR eax, 18h
    MOV eax, ds:dword_444060[rax*4]
    XOR eax, ds:dword_443460[r13*4]
    MOV r13d, r12d
    SHR r13d, 10h
    MOVZX r13d, r13b
    XOR eax, ds:dword_443C60[r13*4]
    XOR eax, ds:dword_443860[rdx*4]
    SHR ecx, 10h
    MOV rdx, r12
    MOVZX edx, dh
    MOVZX ecx, cl
    MOV [rsi], r11d
    MOV ecx, ds:dword_443C60[rcx*4]
    XOR ecx, ds:dword_443860[rdx*4]
    ADD r15d, 1
    XOR ecx, ds:dword_443460[rbp*4]
    MOV edx, [rsp+30h+var_34]
    MOV [rsi+4], r10d
    MOV [rsi+8], r9d
    MOV [rsi+0Ch], r8d
    MOV [rsi+10h], eax
    SHR edx, 18h
    MOV ebp, ecx
    MOV ecx, edx
    MOV edx, ds:dword_444060[rcx*4]
    XOR edx, ebp
    MOV [rsi+14h], edx
    MOV ecx, [rdi+3F4h]
    SUB ecx, 1
    CMP ecx, r15d
    JG loc_40F1D0
loc_40F388:
    MOV ecx, [rbx]
    XOR ecx, r11d
    MOV [rsi], ecx
    XOR r10d, [rbx+4]
    MOV edi, ecx
    SHR edi, 18h
    MOVZX r13d, ds:byte_445460[rdi]
    MOV [rsi+4], r10d
    XOR r9d, [rbx+8]
    SHL r13d, 18h
    MOV [rsi+8], r9d
    XOR r8d, [rbx+0Ch]
    MOV [rsi+0Ch], r8d
    XOR eax, [rbx+10h]
    MOVZX edi, r8b
    MOVZX r11d, ds:byte_445460[rdi]
    MOV [rsi+10h], eax
    XOR edx, [rbx+14h]
    MOVZX ebp, ah
    OR r13d, r11d
    MOV edi, edx
    SHR edi, 10h
    MOVZX edi, dil
    MOVZX r11d, ds:byte_445460[rdi]
    MOV edi, r13d
    MOVZX r13d, ss:byte_445460[rbp]
    MOVZX ebp, dh
    SHL r11d, 10h
    SHL r13d, 8
    OR edi, r11d
    OR r13d, edi
    MOV edi, r10d
    SHR edi, 18h
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX edi, al
    MOVZX r11d, ds:byte_445460[rdi]
    MOV edi, ecx
    SHR edi, 10h
    MOVZX edi, dil
    SHL r12d, 18h
    OR r12d, r11d
    MOVZX r11d, ds:byte_445460[rdi]
    MOV edi, r12d
    MOVZX r12d, ss:byte_445460[rbp]
    SHL r11d, 10h
    OR edi, r11d
    SHL r12d, 8
    OR r12d, edi
    MOV edi, r9d
    SHR edi, 18h
    MOVZX ebp, ds:byte_445460[rdi]
    MOVZX edi, dl
    MOVZX r11d, ds:byte_445460[rdi]
    MOV edi, r10d
    SHR edi, 10h
    MOVZX edi, dil
    SHL ebp, 18h
    OR ebp, r11d
    MOVZX r11d, ds:byte_445460[rdi]
    MOV edi, ebp
    MOVZX ebp, ch
    MOVZX ebp, ss:byte_445460[rbp]
    SHL r11d, 10h
    OR edi, r11d
    MOVZX r11d, cl
    MOV ecx, r9d
    SHL ebp, 8
    MOVZX r11d, ds:byte_445460[r11]
    OR ebp, edi
    MOV edi, r8d
    SHR edi, 18h
    MOVZX edi, ds:byte_445460[rdi]
    SHL edi, 18h
    OR edi, r11d
    SHR ecx, 10h
    SHR edx, 18h
    MOVZX ecx, cl
    MOVZX r11d, ds:byte_445460[rcx]
    MOV rcx, r10
    MOVZX r10d, r10b
    SHL r11d, 10h
    OR edi, r11d
    MOVZX r11d, ds:byte_445460[r10]
    MOV r10d, r8d
    MOV r15d, edi
    MOVZX edi, ch
    MOV ecx, eax
    SHR ecx, 18h
    SHR r10d, 10h
    MOVZX edi, ds:byte_445460[rdi]
    MOVZX ecx, ds:byte_445460[rcx]
    MOVZX r10d, r10b
    SHR eax, 10h
    MOVZX eax, al
    SHL edi, 8
    SHL ecx, 18h
    OR edi, r15d
    OR ecx, r11d
    MOVZX r11d, ds:byte_445460[r10]
    SHL r11d, 10h
    OR ecx, r11d
    MOV r10d, ecx
    MOV rcx, r9
    MOVZX r9d, r9b
    MOVZX ecx, ch
    MOVZX ecx, ds:byte_445460[rcx]
    SHL ecx, 8
    OR ecx, r10d
    MOVZX r10d, ds:byte_445460[rdx]
    MOVZX edx, ds:byte_445460[r9]
    MOV [rsi], r13d
    MOV [rsi+4], r12d
    MOV [rsi+8], ebp
    MOV [rsi+0Ch], edi
    MOV [rsi+10h], ecx
    SHL r10d, 18h
    MOV r9d, r10d
    OR r9d, edx
    MOVZX edx, ds:byte_445460[rax]
    MOV eax, r9d
    SHL edx, 10h
    OR eax, edx
    MOV rdx, r8
    MOVZX edx, dh
    MOVZX edx, ds:byte_445460[rdx]
    SHL edx, 8
    OR eax, edx
    MOV [rsi+14h], eax
    XOR r13d, [rbx+18h]
    MOV [rsi], r13d
    XOR r12d, [rbx+1Ch]
    MOV [rsi+4], r12d
    XOR ebp, [rbx+20h]
    MOV [rsi+8], ebp
    XOR edi, [rbx+24h]
    MOV [rsi+0Ch], edi
    XOR ecx, [rbx+28h]
    MOV [rsi+10h], ecx
    XOR eax, [rbx+2Ch]
    POP rbx
    POP rbp
    POP r12
    MOV [rsi+14h], eax
    POP r13
    POP r14
    POP r15
    RETN 
```
Output:OR edi, ecx
    OR edi, r10d
    OR r15d, edi
    MOV edi, eax
    SHR edi, 10h
    MOVZX edi, ds:byte_445460[rdi]
    SHL edi, 10h
    OR r15d, edi
    MOV edi, eax
    MOVZX edi, ah
    MOVZX r10d, ds:byte_445460[rdi]
    MOVZX r11d, ds:byte_445460[rdi]
    MOVZX edi, ah
    MOVZX edi, ds:byte_445460[rdi]
    MOVZX r11d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
    MOVZX r12d, ds:byte_445460[rdi]
############
```assembly
loc_42B470:
    PUSH r15
    PUSH r14
    MOV r15, rdi
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 38h
    MOV rdi, [rdi+18h]
    MOV [rsp+68h+var_50], rsi
    CALL sub_415D20
    MOV rdi, [r15+20h]
    LEA r13d, [rax+0Fh]
    ADD eax, 8
    CMOVNS r13d, eax
    CALL sub_415D20
    MOV rdi, [r15+28h]
    MOV ebx, r13d
    LEA r12d, [rax+0Fh]
    SAR ebx, 3
    ADD eax, 8
    CMOVNS r12d, eax
    CALL sub_415D20
    LEA ebp, [rax+0Fh]
    SAR r12d, 3
    MOV rdi, [r15+30h]
    ADD eax, 8
    CMOVNS ebp, eax
    SAR ebp, 3
    MOV [rsp+68h+var_48], ebp
    CALL sub_415D20
    LEA edx, [rax+0Fh]
    ADD eax, 8
    MOV esi, 1
    CMOVS eax, edx
    SAR eax, 3
    MOV ecx, eax
    MOV [rsp+68h+var_44], eax
    LEA eax, [rbx+r12+10h]
    ADD eax, ebp
    ADD eax, ecx
    MOV [rsp+68h+var_5C], eax
    CDQE 
    MOV rdi, rax
    MOV [rsp+68h+var_58], rax
    CALL sub_40D420
    MOV rdx, rax
    MOV [rsp+68h+var_68], rax
    MOV eax, r13d
    SAR eax, 1Bh
    MOV [rdx+3], bl
    LEA r14, [rdx+4]
    MOV [rdx], al
    MOV eax, r13d
    SAR r13d, 0Bh
    SAR eax, 13h
    TEST ebx, ebx
    MOV [rdx+2], r13b
    MOV [rdx+1], al
    JZ loc_42B574
loc_42B538:
    LEA r8d, [rbx-1]
    MOV rbx, r14
    MOV eax, r8d
    MOV ebp, r8d
    LEA r13, [rdx+rax+5]
    MOV [rsp+68h+var_40], rax
    NOP 
loc_42B550:
    MOV rdi, [r15+18h]
    ADD rbx, 1
    MOV esi, ebp
    SUB ebp, 1
    CALL sub_415E00
    CMP rbx, r13
    MOV [rbx-1], al
    JNZ loc_42B550
loc_42B56A:
    MOV rax, [rsp+68h+var_40]
    LEA r14, [r14+rax+1]
loc_42B574:
    MOV eax, r12d
    MOV [r14+3], r12b
    LEA r13, [r14+4]
    SAR eax, 18h
    LEA r8d, [r12-1]
    MOV [r14], al
    MOV eax, r12d
    SAR eax, 10h
    MOV [r14+1], al
    MOV eax, r12d
    SAR eax, 8
    TEST r12d, r12d
    MOV [r14+2], al
    JZ loc_42B5D9
loc_42B5A3:
    MOV ebp, r8d
    MOV ebx, r8d
    MOV r12, r13
    LEA r14, [r14+rbp+5]
    NOP dword ptr [rax+00000000h]
loc_42B5B8:
    MOV rdi, [r15+20h]
    ADD r12, 1
    MOV esi, ebx
    SUB ebx, 1
    CALL sub_415E00
    CMP r12, r14
    MOV [r12-1], al
    JNZ loc_42B5B8
loc_42B5D4:
    LEA r13, [r13+rbp+1]
loc_42B5D9:
    MOV edx, [rsp+68h+var_48]
    LEA r12, [r13+4]
    MOV eax, edx
    MOV [r13+3], dl
    LEA ecx, [rdx-1]
    SAR eax, 18h
    MOV [r13+0], al
    MOV eax, edx
    SAR eax, 10h
    MOV [r13+1], al
    MOV eax, edx
    SAR eax, 8
    TEST edx, edx
    MOV [r13+2], al
    JZ loc_42B638
loc_42B607:
    MOV ebx, ecx
    MOV ebp, ecx
    MOV r14, r12
    LEA r13, [r13+rbx+5]
    NOP dword ptr [rax+rax+00h]
loc_42B618:
    MOV rdi, [r15+28h]
    ADD r14, 1
    MOV esi, ebp
    SUB ebp, 1
    CALL sub_415E00
    CMP r14, r13
    MOV [r14-1], al
    JNZ loc_42B618
loc_42B633:
    LEA r12, [r12+rbx+1]
loc_42B638:
    MOV ecx, [rsp+68h+var_44]
    LEA rbp, [r12+4]
    MOV eax, ecx
    MOV [r12+3], cl
    LEA r14d, [rcx-1]
    SAR eax, 18h
    MOV [r12], al
    MOV eax, ecx
    SAR eax, 10h
    MOV [r12+1], al
    MOV eax, ecx
    SAR eax, 8
    TEST ecx, ecx
    MOV [r12+2], al
    JZ loc_42B6A2
loc_42B66B:
    MOV ebx, r14d
    MOV r13, rbp
    LEA r12, [r12+rbx+5]
    NOP word ptr [rax+rax+00000000h]
loc_42B680:
    MOV rdi, [r15+30h]
    ADD r13, 1
    MOV esi, r14d
    SUB r14d, 1
    CALL sub_415E00
    CMP r13, r12
    MOV [r13-1], al
    JNZ loc_42B680
loc_42B69D:
    LEA rbp, [rbp+rbx+1]
loc_42B6A2:
    MOV rax, [rsp+68h+var_58]
    ADD rax, [rsp+68h+var_68]
    CMP rbp, rax
    JNZ loc_42B6CE
loc_42B6B0:
    MOV rax, [rsp+68h+var_50]
    MOV ecx, [rsp+68h+var_5C]
    MOV [rax], ecx
    MOV rax, [rsp+68h+var_68]
    ADD rsp, 38h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_42B6CE:
    MOV ecx, offset aRsa2PrivateBlo
    MOV edx, 2ACh
    MOV esi, offset aSshrsaC
    MOV edi, offset aPBlobBloblen
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 5,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x2ACh"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 6,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Cryptographic"
}
```
############
```assembly
loc_6E45A0:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Interface"
}
```
############
```assembly
loc_438260:
    PUSH r13
    PUSH r12
    MOV r12, rdx
    PUSH rbp
    PUSH rbx
    SUB rsp, 18h
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
    TEST rsi, rsi
    JZ loc_438398
loc_438286:
    TEST rdx, rdx
    MOV rbx, rsi
    MOV rax, rsi
    JZ loc_438300
loc_438291:
    TEST byte ptr [rsi+4], 1
    MOV r13, rdi
    MOV [rsp+38h+var_34], 0
    JZ loc_438320
loc_4382A2:
    TEST byte ptr [r12+4], 1
    MOV [rsp+38h+var_34], 0
    JZ loc_438370
loc_4382B6:
    MOV esi, 47h
    MOV rdi, r13
    CALL sub_431E30
    TEST rax, rax
    MOV rbp, rax
    JZ loc_4383A0
loc_4382CF:
    MOV [rax+18h], r12
    MOV eax, [r12+4]
    MOV rdi, rbp
    MOV [rbp+10h], rbx
    AND eax, 200100h
    OR eax, [rbp+4]
    MOV [rbp+4], eax
    MOV edx, [rbx+4]
    AND edx, 200100h
    OR eax, edx
    MOV [rbp+4], eax
    CALL sub_417570
    MOV rax, rbp
loc_438300:
    MOV rcx, [rsp+38h+var_30]
    XOR rcx, fs:28h
    JNZ loc_4383BD
loc_438314:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_438320:
    LEA rsi, [rsp+38h+var_34]
    MOV rdi, rbx
    CALL sub_41C8E0
    TEST eax, eax
    JZ loc_4382A2
loc_438335:
    MOV edx, [rsp+38h+var_34]
    TEST edx, edx
    JNZ loc_4382A2
loc_438341:
    MOV rsi, rbx
    MOV rdi, r13
    CALL sub_437700
    MOV rsi, r12
    MOV rdi, r13
    CALL sub_437700
    MOV edx, offset off_4CA100
    MOV esi, 86h
    MOV rdi, r13
    CALL sub_4320E0
    JMP loc_438300
loc_438370:
    LEA rsi, [rsp+38h+var_34]
    MOV rdi, r12
    CALL sub_41C8E0
    TEST eax, eax
    JZ loc_4382B6
loc_438385:
    MOV eax, [rsp+38h+var_34]
    TEST eax, eax
    JZ loc_438341
loc_43838D:
    JMP loc_4382B6
loc_438398:
    MOV rax, rdx
    JMP loc_438300
loc_4383A0:
    MOV rsi, rbx
    MOV rdi, r13
    CALL sub_437700
    MOV rsi, r12
    MOV rdi, r13
    CALL sub_437700
    XOR eax, eax
    JMP loc_438300
loc_4383BD:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 6,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x47",
    "0x200100"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 14,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Complex Data Processing"
}
```
############
```assembly
loc_4152B5:
    MOVZX eax, byte ptr [rdi]
    CMP ds:byte_4CA120[rax], 0
    MOV r8, rax
    JS loc_4152D0
loc_4152C4:
    REP 
loc_4152D0:
    CMP al, 5Bh
    MOV eax, 5Dh
    MOV edx, 1
    CMOVZ r8d, eax
    XOR eax, eax
    JMP loc_4152F2
loc_4152E8:
    MOV [rdi+rax], cl
loc_4152EB:
    ADD edx, 1
    ADD rax, 1
loc_4152F2:
    MOVSXD rsi, edx
    MOVSXD r9, eax
    MOVZX ecx, byte ptr [rdi+rsi]
    CMP r8b, cl
    JNZ loc_4152E8
loc_415301:
    CMP r8b, [rdi+rsi+1]
    JNZ loc_415318
loc_415308:
    MOV [rdi+rax], r8b
    ADD edx, 1
    JMP loc_4152EB
loc_415318:
    MOV byte ptr [rdi+r9], 0
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "DataMovement",
    "Comparison",
    "Looping"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x5B",
    "0x5D"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 4,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "String Processing",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_46DE50:
    PUSH r14
    PUSH r13
    MOV r14, rcx
    PUSH r12
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV rdi, [rdx+18h]
    MOV r13, rsi
    MOV r12, rdx
    TEST rdi, rdi
    JZ loc_46DE73
loc_46DE6D:
    CALL cs:qword_6E3AE8
loc_46DE73:
    MOV rdi, [rbp+18h]
    TEST rdi, rdi
    JZ loc_46DE82
loc_46DE7C:
    CALL cs:qword_6E3AE8
loc_46DE82:
    CMP r12, rbp
    JZ loc_46DF88
loc_46DE8B:
    MOV edi, 48h
    CALL sub_426930
    TEST rax, rax
    MOV rbx, rax
    JZ loc_46DF70
loc_46DEA1:
    LEA rdi, [rax+8]
    MOV rcx, rax
    MOV qword ptr [rax], 0
    MOV qword ptr [rax+40h], 0
    XOR eax, eax
    MOV rdx, r14
    AND rdi, 0FFFFFFFFFFFFFFF8h
    MOV rsi, r12
    SUB rcx, rdi
    ADD ecx, 48h
    SHR ecx, 3
    REP 
    MOV rdi, rbp
    CALL sub_46DCF0
    MOV rdx, r13
    MOV [rbx+28h], rax
    MOV rsi, rbp
    MOV rdi, rbp
    CALL sub_46DCF0
    TEST rax, rax
    MOV [rbx+8], rax
    MOV [rbx], rbp
    MOV [rbx+20h], r12
    MOV dword ptr [rbx+18h], 1
    MOV dword ptr [rbx+3Ch], 0
    MOV rdx, [rbx+28h]
    JZ loc_46DF5C
loc_46DF0B:
    TEST rdx, rdx
    JZ loc_46DF5C
loc_46DF10:
    CMP byte ptr [rax+10h], 0
    JNZ loc_46DF48
loc_46DF16:
    ADD dword ptr [rdx+18h], 1
loc_46DF1A:
    MOV rdi, [rbp+18h]
    TEST rdi, rdi
    JZ loc_46DF29
loc_46DF23:
    CALL cs:qword_6E3AF8
loc_46DF29:
    MOV rdi, [r12+18h]
    TEST rdi, rdi
    JZ loc_46DF39
loc_46DF33:
    CALL cs:qword_6E3AF8
loc_46DF39:
    MOV rax, rbx
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_46DF48:
    MOV edx, offset aDestinationDat
    MOV esi, 1
    MOV rdi, rbp
    XOR eax, eax
    CALL sub_44D750
loc_46DF5C:
    MOV rdi, rbx
    XOR ebx, ebx
    CALL sub_41B7E0
    JMP loc_46DF1A
loc_46DF70:
    MOV dword ptr [rbp+44h], 7
    MOV rdi, rbp
    XOR ebx, ebx
    CALL sub_4252B0
    JMP loc_46DF1A
loc_46DF88:
    MOV edx, offset aSourceAndDesti
    MOV esi, 1
    MOV rdi, r12
    XOR eax, eax
    XOR ebx, ebx
    CALL sub_44D750
    JMP loc_46DF1A
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 5,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x48",
    "0x10",
    "0x18",
    "0x28",
    "0x3C",
    "0x18",
    "0x20",
    "0x28",
    "0x10",
    "0x18",
    "0x10",
    "0x18",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
    "0x10",
############
```assembly
loc_524900:
    PUSH r12
    MOV r12d, offset unk_54D2C3
    PUSH rbp
    MOV rbp, rdi
    PUSH rbx
    MOV dword ptr [rdi+4], 0
    MOV ebx, offset unk_54D2C0
loc_524919:
    MOVZX eax, byte ptr [rbx]
    XOR esi, esi
    MOV rdi, rbp
    MOV [rbp+0], eax
    CALL _capget
    TEST eax, eax
    JZ loc_524940
loc_52492D:
    ADD rbx, 1
    CMP r12, rbx
    JNZ loc_524919
loc_524936:
    MOV edi, offset aCapget_0
    CALL sub_40A880
loc_524940:
    MOV eax, [rbp+0]
    CMP eax, 20071026h
    JZ loc_524968
loc_52494A:
    CMP eax, 20080522h
    JZ loc_524968
loc_524951:
    CMP eax, 19980330h
    JZ loc_524984
loc_524958:
    MOV edi, offset aUnsupportedCap_0
    XOR eax, eax
    CALL sub_40ABE0
loc_524968:
    MOV dword ptr [rbp+8], 2
loc_52496F:
    LEA rsi, [rbp+0Ch]
    MOV rdi, rbp
    CALL _capget
    TEST eax, eax
    JNZ loc_524936
loc_52497F:
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_524984:
    MOV dword ptr [rbp+8], 1
    JMP loc_52496F
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x20071026",
    "0x20080522",
    "0x19980330"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 12,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 2,
  "inferred_algorithm": "Iterative Check",
  "inferred_category": "Security/Capability Handling"
}
```
############
```assembly
loc_4B8270:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    MOV r13d, esi
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 0D8h
    MOV r12, cs:qword_78D1E8
    MOV rdi, [rdi+18h]
    LEA rsi, [rsp+108h+haystack]
    MOV [rsp+108h+haystack], 0
    MOV rax, fs:28h
    MOV [rsp+108h+var_40], rax
    XOR eax, eax
    MOV dword ptr [r12], 0
    CALL sub_4B7DF0
    MOV rbp, rax
    MOV rax, [rbx+10h]
    TEST rax, rax
    JZ loc_4B82E9
loc_4B82CC:
    MOV edi, offset aAuto
    MOV ecx, 5
    MOV rsi, rax
    REPE 
    JNZ loc_4B8410
loc_4B82E1:
    MOV qword ptr [rbx+10h], 0
loc_4B82E9:
    MOV r14, [rbx]
    MOVZX eax, byte ptr [r14]
    CMP al, 2Fh
    JZ loc_4B86B0
loc_4B82F8:
    CMP al, 5Ch
    JZ loc_4B86B0
loc_4B8300:
    MOV esi, 3Ah
    MOV rdi, r14
    CALL _strchr
    TEST rax, rax
    JNZ loc_4B8728
loc_4B8316:
    LEA rdx, [rsp+108h+stat_buf]
    MOV rsi, r14
    MOV edi, 1
    CALL ___xstat64
    TEST eax, eax
    JZ loc_4B86D0
loc_4B8330:
    MOV rdi, [rbx+10h]
    MOV byte ptr [rsp+108h+var_100], 0
    MOV [rsp+108h+fd], 0FFFFFFFFh
    TEST rdi, rdi
    JZ loc_4B87D0
loc_4B8349:
    NOP dword ptr [rax+00000000h]
loc_4B8350:
    MOV esi, 2Ch
    CALL _strchr
    TEST rax, rax
    MOV r14, rax
    JZ loc_4B8389
loc_4B8362:
    MOV byte ptr [rax], 0
    MOV rdx, [rsp+108h+haystack]
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_4B8130
    TEST eax, eax
    MOV r15d, eax
    JZ loc_4B839C
loc_4B837C:
    LEA rdi, [r14+1]
    TEST rdi, rdi
    MOV [rbx+10h], rdi
    JNZ loc_4B8350
loc_4B8389:
    MOV rdx, [rsp+108h+haystack]
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_4B8130
    MOV r15d, eax
loc_4B839C:
    TEST r15d, r15d
    JZ loc_4B83B0
loc_4B83A1:
    CMP byte ptr [rsp+108h+var_100], 0
    JZ loc_4B83B0
loc_4B83A8:
    MOV rdi, [rbx]
    CALL sub_52FB90
loc_4B83B0:
    MOV edi, [rsp+108h+fd]
    CMP edi, 0FFFFFFFFh
    JZ loc_4B84DC
loc_4B83BC:
    CALL _close
    MOV eax, [r12]
    CMP eax, 10h
    JNZ loc_4B84E9
loc_4B83CE:
    XOR eax, eax
    TEST r13d, r13d
    JNZ loc_4B83E0
loc_4B83D5:
    XOR eax, eax
    TEST r15d, r15d
    JNZ loc_4B8690
loc_4B83E0:
    MOV rcx, [rsp+108h+var_40]
    XOR rcx, fs:28h
    JNZ loc_4B89A0
loc_4B83F7:
    ADD rsp, 0D8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4B8410:
    MOV edi, offset aCifs
    MOV ecx, 5
    MOV rsi, rax
    REPE 
    JZ loc_4B8510
loc_4B8425:
    MOV esi, offset aNfs
    MOV rdi, rax
    CALL sub_40A180
    TEST rax, rax
    MOV r14, [rbx]
    JZ loc_4B8316
loc_4B843E:
    MOV esi, 3Ah
    MOV rdi, r14
    CALL _strchr
    TEST rax, rax
    JZ loc_4B8316
loc_4B8454:
    CMP qword ptr [rbx+10h], 0
    JZ loc_4B8728
loc_4B845F:
    MOV esi, 5Dh
    MOV rdi, r14
    MOV r15, [rsp+108h+haystack]
    CALL _strchr
    TEST rax, rax
    JZ loc_4B8480
loc_4B8476:
    CMP byte ptr [rax+1], 3Ah
    JZ loc_4B86C0
loc_4B8480:
    MOV rdi, r14
    MOV esi, 3Ah
    CALL _strchr
    MOV r14, rax
loc_4B8490:
    MOV byte ptr [r14], 0
    MOV rdi, [rbx]
    XOR esi, esi
    CALL sub_53B000
    LEA rdi, [rax+4]
    MOV byte ptr [r14], 3Ah
    CALL sub_53B820
    TEST r15, r15
    JZ loc_4B8738
loc_4B84B4:
    MOV edx, 55C02Ch
loc_4B84B9:
    MOV rcx, rax
    MOV rsi, r15
    MOV edi, offset aSSaddrS
    XOR eax, eax
    CALL sub_40C860
    MOV rsi, rbp
    MOV rdx, rax
    MOV rdi, rbx
    CALL sub_4B8130
    MOV r15d, eax
loc_4B84DC:
    MOV eax, [r12]
    CMP eax, 10h
    JZ loc_4B83CE
loc_4B84E9:
    CMP eax, 2
    JNZ loc_4B83D5
loc_4B84F2:
    XOR eax, eax
    TEST ebp, 10000000h
    JNZ loc_4B83E0
loc_4B8500:
    XOR eax, eax
    TEST r15d, r15d
    JZ loc_4B83E0
loc_4B850B:
    JMP loc_4B8690
loc_4B8510:
    MOV r14, [rbx]
    MOVZX edx, byte ptr [r14]
    CMP dl, 2Fh
    JZ loc_4B8525
loc_4B851C:
    CMP dl, 5Ch
    JNZ loc_4B8425
loc_4B8525:
    CMP dl, [r14+1]
    JNZ loc_4B8425
loc_4B852F:
    MOVSX eax, byte ptr [r14+2]
    LEA r10, [r14+2]
    TEST al, al
    JZ loc_4B87A7
loc_4B8540:
    CMP eax, 5Ch
    JZ loc_4B87A7
loc_4B8549:
    CMP eax, 2Fh
    JZ loc_4B87A7
loc_4B8552:
    XOR edx, edx
    JMP loc_4B856A
loc_4B8560:
    CMP eax, 2Fh
    JZ loc_4B8578
loc_4B8565:
    CMP eax, 5Ch
    JZ loc_4B8578
loc_4B856A:
    ADD rdx, 1
    MOVSX eax, byte ptr [r14+rdx+2]
    TEST al, al
    JNZ loc_4B8560
loc_4B8578:
    TEST edx, edx
    MOV r15d, 0FFFFFFFFh
    JZ loc_4B84DC
loc_4B8586:
    MOVSXD rdx, edx
    LEA r14, [r10+rdx+1]
    MOVZX r9d, byte ptr [r14-1]
    TEST r9b, r9b
    JZ loc_4B84DC
loc_4B859C:
    MOVSX eax, byte ptr [r14]
    TEST al, al
    JZ loc_4B84DC
loc_4B85A8:
    CMP eax, 2Fh
    MOV byte ptr [r14-1], 0
    JZ loc_4B8990
loc_4B85B6:
    CMP eax, 5Ch
    JZ loc_4B8990
loc_4B85BF:
    XOR ecx, ecx
    JMP loc_4B85D2
loc_4B85C8:
    CMP eax, 5Ch
    JZ loc_4B85DF
loc_4B85CD:
    CMP eax, 2Fh
    JZ loc_4B85DF
loc_4B85D2:
    ADD rcx, 1
    MOVSX eax, byte ptr [r14+rcx]
    TEST al, al
    JNZ loc_4B85C8
loc_4B85DF:
    MOV edx, ecx
    MOVSXD rcx, ecx
    MOV edi, offset aUncSSPrefixpat
    CMP byte ptr [r14+rcx], 0
    MOV eax, offset aUncSS
    LEA r8, [r14+rcx+1]
    CMOVZ rdi, rax
loc_4B85FC:
    MOV rsi, r10
    MOV rcx, r14
    XOR eax, eax
    MOV byte ptr [rsp+108h+var_100], r9b
    MOV qword ptr [rsp+108h+fd], r10
    MOV r15d, 0FFFFFFFFh
    CALL sub_40C860
    LEA rsi, [rsp+108h+haystack]
    MOV rdi, rax
    CALL sub_4B7DF0
    MOV r10, qword ptr [rsp+108h+fd]
    XOR esi, esi
    MOV rdi, r10
    CALL sub_53AFF0
    MOVZX r9d, byte ptr [rsp+108h+var_100]
    TEST rax, rax
    MOV qword ptr [rsp+108h+fd], rax
    MOV [r14-1], r9b
    JZ loc_4B84DC
loc_4B864A:
    MOV rdi, [rsp+108h+haystack]
    MOV esi, (offset aIp+1)
    CALL sub_40A180
    TEST rax, rax
    MOV rcx, qword ptr [rsp+108h+fd]
    JZ loc_4B8939
loc_4B8666:
    MOV rdx, [rsp+108h+haystack]
loc_4B866B:
    MOV qword ptr [rbx+10h], offset aCifs
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_4B8130
    MOV r15d, eax
    JMP loc_4B84DC
loc_4B8690:
    MOV rdx, [rbx+8]
    MOV rsi, [rbx]
    MOV edi, offset aMountingSOnSFa
    CALL sub_40A6D0
    MOV eax, r15d
    JMP loc_4B83E0
loc_4B86B0:
    CMP al, [r14+1]
    JNZ loc_4B8300
loc_4B86BA:
    JMP loc_4B852F
loc_4B86C0:
    LEA r14, [rax+1]
    JMP loc_4B8490
loc_4B86D0:
    TEST ebp, 3020h
    JNZ loc_4B8330
loc_4B86DC:
    MOV eax, [rsp+108h+stat_buf.st_mode]
    AND eax, 0F000h
    CMP eax, 8000h
    JZ loc_4B8745
loc_4B86EC:
    CMP eax, 4000h
    MOV [rsp+108h+var_F8], 0
    MOV [rsp+108h+fd], 0FFFFFFFFh
    JZ loc_4B87B2
loc_4B8707:
    MOV rdi, [rbx+10h]
    TEST rdi, rdi
    JZ loc_4B87F1
loc_4B8714:
    CMP [rsp+108h+var_F8], 0
    SETNZ byte ptr [rsp+108h+var_100]
    JMP loc_4B8350
loc_4B8728:
    MOV qword ptr [rbx+10h], offset aNfs
    JMP loc_4B845F
loc_4B8738:
    MOV edx, offset data
    MOV r15, rdx
    JMP loc_4B84B9
loc_4B8745:
    MOV rdi, [rbx]
    CALL sub_536C90
    MOV rsi, rax
    MOV [rsp+108h+var_F8], rax
    MOV rax, rbp
    AND eax, 1
    MOV qword ptr [rbx], 0
    MOV rdi, rbx
    CMP rax, 1
    SBB ecx, ecx
    XOR edx, edx
    ADD ecx, 5
    CALL sub_52FBD0
    TEST eax, eax
    MOV [rsp+108h+fd], eax
    JNS loc_4B8707
loc_4B877C:
    MOV eax, [r12]
    CMP eax, 1
    JZ loc_4B8928
loc_4B8789:
    CMP eax, 0Dh
    JZ loc_4B8928
loc_4B8792:
    MOV edi, offset aCanTSetupLoopD
    XOR eax, eax
    CALL sub_40A6D0
loc_4B879E:
    MOV eax, [r12]
    JMP loc_4B83E0
loc_4B87A7:
    MOV r15d, 0FFFFFFFFh
    JMP loc_4B84DC
loc_4B87B2:
    MOV rdi, [rbx+10h]
    MOV byte ptr [rsp+108h+var_100], 0
    TEST rdi, rdi
    JNZ loc_4B8350
loc_4B87C4:
    OR rbp, 1000h
    NOP dword ptr [rax+rax+00h]
loc_4B87D0:
    TEST ebp, 3020h
    MOV [rsp+108h+fd], 0FFFFFFFFh
    MOV byte ptr [rsp+108h+var_100], 0
    JNZ loc_4B8389
loc_4B87E8:
    MOV [rsp+108h+var_F8], 0
loc_4B87F1:
    MOV rcx, qword ptr cs:buf.c_cflag
    TEST rcx, rcx
    JZ loc_4B8845
loc_4B87FD:
    NOP dword ptr [rax]
loc_4B8800:
    MOV rax, [rcx+8]
    MOV rdx, [rsp+108h+haystack]
    MOV rsi, rbp
    MOV rdi, rbx
    MOV [rsp+108h+var_100], rcx
    MOV [rbx+10h], rax
    CALL sub_4B8130
    TEST eax, eax
    MOV r15d, eax
    JZ loc_4B83B0
loc_4B8828:
    MOV rcx, [rsp+108h+var_100]
    MOV rcx, [rcx]
    TEST rcx, rcx
    JNZ loc_4B8800
loc_4B8835:
    CMP [rsp+108h+var_F8], 0
    SETNZ byte ptr [rsp+108h+var_100]
    JMP loc_4B839C
loc_4B8845:
    MOV [rsp+108h+var_E0], 0
    MOV [rsp+108h+var_F0], offset aEtcFilesystems
    MOV r14, 40800000001h
loc_4B8861:
    MOV rdi, [rsp+108h+var_F0]
    CALL sub_40AD80
    TEST rax, rax
    MOV [rsp+108h+var_100], rax
    JNZ loc_4B8898
loc_4B8875:
    JMP loc_4B88E8
loc_4B8877:
    MOV rdi, rax
    CALL sub_40C290
    LEA rdi, [rsp+108h+var_E0]
    MOV rsi, rax
    CALL sub_40A530
    NOP dword ptr [rax+00h]
loc_4B8890:
    MOV rdi, r15
    CALL _free
loc_4B8898:
    MOV rdi, [rsp+108h+var_100]
    CALL sub_528030
    TEST rax, rax
    MOV r15, rax
    JZ loc_4B88E8
loc_4B88AA:
    MOV esi, offset aNodev
    MOV rdi, r15
    CALL sub_40A180
    TEST rax, rax
    JZ loc_4B88CC
loc_4B88BC:
    MOVZX eax, byte ptr [r15+5]
    SUB eax, 9
    CMP al, 17h
    JZ loc_4B8890
loc_4B88C8:
    CMP al, 4
    JBE loc_4B8890
loc_4B88CC:
    MOV rdi, r15
    CALL sub_40A8A0
    MOVZX ecx, byte ptr [rax]
    CMP cl, 2Ah
    JA loc_4B8877
loc_4B88DC:
    BT r14, rcx
    JB loc_4B8890
loc_4B88E2:
    JMP loc_4B8877
loc_4B88E8:
    ADD [rsp+108h+var_F0], 12h
    MOV rax, [rsp+108h+var_F0]
    CMP rax, offset aLoop_0
    JNZ loc_4B8861
loc_4B88FF:
    MOV rcx, [rsp+108h+var_E0]
    TEST rcx, rcx
    MOV qword ptr cs:buf.c_cflag, rcx
    JNZ loc_4B8800
loc_4B8914:
    CMP [rsp+108h+var_F8], 0
    SETNZ byte ptr [rsp+108h+var_100]
    OR r15d, 0FFFFFFFFh
    JMP loc_4B839C
loc_4B8928:
    MOV edi, offset aPermissionDeni
    XOR eax, eax
    CALL sub_40AC80
    JMP loc_4B879E
loc_4B8939:
    MOV rdx, [rsp+108h+haystack]
    MOV esi, offset aIp
    MOV [rsp+108h+var_100], rcx
    MOV rdi, rdx
    MOV qword ptr [rsp+108h+fd], rdx
    CALL _strstr
    TEST rax, rax
    MOV rdx, qword ptr [rsp+108h+fd]
    MOV rcx, [rsp+108h+var_100]
    JNZ loc_4B866B
loc_4B8966:
    LEA rdi, [rcx+4]
    CALL sub_53B820
    MOV edi, offset aIpS
    MOV rsi, rax
    XOR eax, eax
    CALL sub_40C860
    LEA rsi, [rsp+108h+haystack]
    MOV rdi, rax
    CALL sub_4B7DF0
    JMP loc_4B8666
loc_4B8990:
    LEA r8, [r14+1]
    XOR edx, edx
    MOV edi, offset aUncSSPrefixpat
    JMP loc_4B85FC
loc_4B89A0:
    CALL ___stack_chk_fail
```
Output:2Fh
    JZ loc_4B85DE
loc_4B85CD:
    CMP eax, 5Ch
    JZ loc_4B85DE
loc_4B85D2:
    ADD ecx, 1
    MOVSX eax, byte ptr [r14+ecx]
    TEST al, al
    JNZ loc_4B85C8
loc_4B85DE:
    TEST ecx, ecx
    MOV r15d, 0FFFFFFFFh
    JZ loc_4B84DC
loc_4B85EC:
    MOVZX eax, byte ptr [r14+ecx-1]
    CMP al, 2Fh
    JZ loc_4B84DC
loc_4B85F9:
    CMP al, 5Ch
    JZ loc_4B84DC
loc_4B8604:
    XOR r14d, r14d
    JMP loc_4B8622
loc_4B8612:
    CMP eax, 2Fh
    JZ loc_4B8620
loc_4B8617:
    CMP eax, 5Ch
    JZ loc_4B8620
loc_4B861C:
    ADD r14d, 1
    MOVSX eax, byte ptr [r14d+2]
    TEST al, al
    JNZ loc_4B8612
loc_4B8620:
    TEST r14d, r14d
    MOV r15d, 0FFFFFFFFh
    JZ loc_4B84DC
loc_4B8622:
    MOV r10d, r14d
    LEA r14, [r10+2]
    MOVZX r9d, byte ptr [r14-1]
    TEST r9b, r9b
    JZ loc_4B84DC
loc_4B8638:
    MOVSX eax, byte ptr [r14]
    TEST al, al
    JZ loc_4B84DC
loc_4B8644:
    CMP eax,
############
```assembly
loc_406170:
    JMP cs:off_78C1C8
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTableIndicators"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x78C1C8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlowTransfer"
}
```
############
```assembly
loc_4064D0:
    JMP cs:off_7428C0
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "Jump"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x7428C0"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Control Flow"
}
```
############
```assembly
loc_405FE0:
    JMP cs:off_742648
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "Jump"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x742648"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow"
}
```
############
```assembly
loc_4DCCD0:
    PUSH rbx
    MOV esi, 1
    MOV rbx, rdi
    CALL _calloc
    TEST rax, rax
    JNZ loc_4DCCE8
loc_4DCCE3:
    TEST rbx, rbx
    JNZ loc_4DCCEA
loc_4DCCE8:
    POP rbx
    RETN 
loc_4DCCEA:
    CALL sub_42C250
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Size"
  ],
  "return_value_type": "Pointer",
  "dominant_operation_categories": [
    "DataMovement",
    "MemoryAllocation",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Memory Allocation",
  "inferred_category": "Memory Management"
}
```
############
```assembly
loc_405860:
    JMP cs:off_742288
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "Jump"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x742288"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Control Flow"
}
```
############
```assembly
loc_450580:
    PUSH r15
    PUSH r14
    MOV r14, rdi
    PUSH r13
    PUSH r12
    XOR r13d, r13d
    PUSH rbp
    PUSH rbx
    MOV rbx, rcx
    MOV r12d, esi
    MOV rbp, rdx
    SUB rsp, 28h
    MOV qword ptr [r8], 0
    MOV rcx, fs:28h
    MOV [rsp+58h+var_40], rcx
    XOR ecx, ecx
    LEA r15, [rsp+58h+var_48]
    MOV [rsp+58h+var_50], r8
    XCHG ax, ax
loc_4505C0:
    MOV rdi, [r14]
    XOR esi, esi
    MOV edx, 1
    CALL sub_41F1B0
    TEST rax, rax
    JS loc_450620
loc_4505D4:
    MOV edx, 0FFFFFFFFh
    MOV rcx, rax
    MOV edi, r12d
    MOV esi, edx
    CALL sub_426EF0
    TEST eax, eax
    JLE loc_450648
loc_4505EA:
    MOV rcx, r15
    MOV rdx, rbx
    MOV rsi, rbp
    MOV edi, r12d
    CALL sub_439E00
    CMP eax, 51h
    JZ loc_4505C0
loc_450600:
    TEST eax, eax
    JNZ loc_450625
loc_450604:
    MOV rdx, [rsp+58h+var_48]
    CMP rbx, rdx
    JZ loc_450650
loc_45060E:
    TEST rdx, rdx
    JZ loc_450648
loc_450613:
    SUB rbx, rdx
    ADD rbp, rdx
    ADD r13, rdx
    JMP loc_4505C0
loc_450620:
    MOV eax, 1Ch
loc_450625:
    MOV rcx, [rsp+58h+var_40]
    XOR rcx, fs:28h
    JNZ loc_45065D
loc_450635:
    ADD rsp, 28h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_450648:
    MOV eax, 0FFFFFFFFh
    JMP loc_450625
loc_450650:
    MOV rcx, [rsp+58h+var_50]
    ADD rbx, r13
    MOV [rcx], rbx
    JMP loc_450625
loc_45065D:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameter_count": 4,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Integer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "Looping",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x51"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 7,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Complex Data Processing"
}
```
############
```assembly
loc_41C626:
    MOV r14, [rsp+0A8h+var_88]
    MOV esi, 6
    MOV rdi, rbx
    XOR eax, eax
    MOV rdx, [r14+0A38h]
    CALL sub_4221E0
    MOV rsi, r14
    MOV rdi, rbx
    CALL sub_422990
    TEST eax, eax
    MOV ebp, eax
    JNZ loc_41C9BC
loc_41C656:
    MOV rax, [rsp+0A8h+var_88]
    TEST r12b, r12b
    MOV [rax+0A8h], rbx
    JNZ loc_41C71D
loc_41C66B:
    LEA rax, [rsp+0A8h+var_70]
    LEA rbp, [rsp+0A8h+var_6C]
    XOR r12d, r12d
    MOV r15, rax
loc_41C67B:
    MOV [rsp+0A8h+var_70], 0
    CALL sub_42E8B0
    XOR esi, esi
    MOV r14, rdx
    MOV r8, rbp
    XOR edx, edx
    MOV ecx, 3E8h
    MOV rdi, rbx
    MOV r13, rax
    CALL sub_421800
    TEST eax, eax
    JNZ loc_41C8D0
loc_41C6AA:
    MOV edx, [rsp+0A8h+var_6C]
    TEST edx, edx
    JZ loc_41C960
loc_41C6B6:
    XOR r12d, r12d
loc_41C6B9:
    MOV rsi, r15
    MOV rdi, rbx
    CALL sub_4250D0
    TEST eax, eax
    JNZ loc_41C8D0
loc_41C6CC:
    MOV eax, [rsp+0A8h+var_70]
    TEST eax, eax
    JNZ loc_41C67B
loc_41C6D4:
    MOV rsi, rbp
    MOV rdi, rbx
    CALL sub_4220C0
    TEST rax, rax
    JZ loc_41C67B
loc_41C6E4:
    NOP dword ptr [rax+00h]
loc_41C6E8:
    MOV ebp, [rax+10h]
loc_41C6EB:
    MOV rsi, [rsp+0A8h+var_88]
    MOV rdi, rbx
    CALL sub_422AB0
    MOV eax, ebp
loc_41C6FA:
    MOV rbx, [rsp+0A8h+var_40]
    XOR rbx, fs:28h
    JNZ loc_41CA44
loc_41C70E:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_41C71D:
    LEA rdx, sub_41C410
    MOV esi, 4E24h
    MOV rdi, rbx
    XOR eax, eax
    LEA r12, [rsp+0A8h+fds]
    CALL sub_4221E0
    LEA rdx, timeout
    MOV esi, 2715h
    MOV rdi, rbx
    XOR eax, eax
    CALL sub_4221E0
    LEA rdx, sub_41C440
    MOV esi, 4E21h
    MOV rdi, rbx
    XOR eax, eax
    CALL sub_4221E0
    LEA rdx, timeout
    XOR eax, eax
    MOV esi, 2712h
    MOV rdi, rbx
    CALL sub_4221E0
    LEA rax, [rsp+0A8h+var_6C]
    MOV [rsp+0A8h+var_90], rax
    MOV rax, cs:qword_6BD430
    TEST rax, rax
    JZ loc_41C8BC
loc_41C794:
    XOR ebp, ebp
    MOV rdx, r12
    NOP dword ptr [rax+00000000h]
loc_41C7A0:
    MOV ecx, [rax+8]
    ADD rdx, 8
    ADD ebp, 1
    MOV [rdx-8], ecx
    MOVZX ecx, word ptr [rax+0Ch]
    MOV rax, [rax]
    MOV [rdx-4], cx
    XOR ecx, ecx
    MOV [rdx-2], cx
    TEST rax, rax
    JNZ loc_41C7A0
loc_41C7C3:
    MOV r15d, ebp
loc_41C7C6:
    CALL sub_42E8B0
    MOV [rsp+0A8h+var_A0], rdx
    MOV edx, dword ptr cs:timeout
    MOV esi, r15d
    MOV rdi, r12
    MOV [rsp+0A8h+var_A8], rax
    CALL sub_427230
    MOV [rsp+0A8h+var_6C], eax
    CALL sub_42E8B0
    CMP [rsp+0A8h+var_6C], 0
    MOV r14, rax
    MOV [rsp+0A8h+var_98], rdx
    MOV cs:byte_6BD428, 0
    JZ loc_41C8E8
loc_41C808:
    JLE loc_41CA3A
loc_41C80E:
    TEST ebp, ebp
    JZ loc_41C920
loc_41C816:
    LEA eax, [rbp-1]
    MOV r15, r12
    XOR r9d, r9d
    LEA rbp, [r12+rax*8+8]
loc_41C824:
    MOVZX eax, word ptr [r15+6]
    TEST ax, ax
    JZ loc_41C87B
loc_41C82E:
    MOV edx, eax
    AND edx, 1
    TEST al, 4
    MOVSX r13d, dx
    JZ loc_41C842
loc_41C83B:
    OR edx, 2
    MOVSX r13d, dx
loc_41C842:
    MOV edx, r13d
    MOV rdi, [rbx+8]
    LEA rsi, aCallCurlMultiS
    OR edx, 4
    TEST al, 8
    CMOVNZ r13d, edx
    MOV edx, [r15]
    XOR eax, eax
    CALL sub_438D90
    MOV esi, [r15]
    LEA rcx, unk_6BD438
    MOV edx, r13d
    MOV rdi, rbx
    CALL sub_4256F0
    MOV r9d, eax
loc_41C87B:
    ADD r15, 8
    CMP rbp, r15
    JNZ loc_41C824
loc_41C884:
    CMP cs:byte_6BD428, 0
    JZ loc_41C9DC
loc_41C891:
    TEST r9d, r9d
    JNZ loc_41C911
loc_41C896:
    MOV rsi, [rsp+0A8h+var_90]
    MOV rdi, rbx
    CALL sub_4220C0
    TEST rax, rax
    JNZ loc_41C6E8
loc_41C8AC:
    MOV rax, cs:qword_6BD430
    TEST rax, rax
    JNZ loc_41C794
loc_41C8BC:
    XOR r15d, r15d
    XOR ebp, ebp
    JMP loc_41C7C6
loc_41C8D0:
    CMP eax, 3
    MOV ebp, 1Bh
    MOV eax, 2Bh
    CMOVNZ ebp, eax
    JMP loc_41C6EB
loc_41C8E8:
    LEA rcx, unk_6BD438
    XOR edx, edx
    MOV esi, 0FFFFFFFFh
    MOV rdi, rbx
    MOV cs:timeout, 0
    CALL sub_4256F0
    MOV r9d, eax
    TEST r9d, r9d
    JZ loc_41C896
loc_41C911:
    MOV ebp, 3
    JMP loc_41C6EB
loc_41C920:
    MOV rsi, rdx
    MOV rcx, [rsp+0A8h+var_A0]
    MOV rdx, [rsp+0A8h+var_A8]
    MOV rdi, r14
    CALL sub_42E940
    XOR r9d, r9d
    TEST rax, rax
    JLE loc_41C896
loc_41C940:
    MOV rdx, cs:timeout
    CMP rdx, rax
    JGE loc_41C9AD
loc_41C94C:
    MOV cs:timeout, 0
    JMP loc_41C891
loc_41C960:
    CALL sub_42E8B0
    MOV rcx, r14
    MOV rsi, rdx
    MOV rdi, rax
    MOV rdx, r13
    CALL sub_42E940
    CMP rax, 0Ah
    JG loc_41C6B6
loc_41C980:
    LEA r13d, [r12+1]
    CMP r13d, 2
    JLE loc_41CA0A
loc_41C98B:
    CMP r13d, 9
    MOV edi, 3E8h
    JG loc_41C9A0
loc_41C996:
    MOV edi, 1
    MOV ecx, r12d
    SHL edi, cl
loc_41C9A0:
    CALL sub_426E50
    MOV r12d, r13d
    JMP loc_41C6B9
loc_41C9AD:
    SUB rdx, rax
    MOV cs:timeout, rdx
    JMP loc_41C891
loc_41C9BC:
    MOV rdi, rbx
    CALL sub_421F00
    CMP ebp, 3
    MOV eax, 2
    JNZ loc_41C6FA
loc_41C9D2:
    MOV eax, 1Bh
    JMP loc_41C6FA
loc_41C9DC:
    MOV rsi, [rsp+0A8h+var_98]
    MOV rdx, [rsp+0A8h+var_A8]
    MOV rdi, r14
    MOV rcx, [rsp+0A8h+var_A0]
    MOV [rsp+0A8h+var_7C], r9d
    CALL sub_42E940
    TEST rax, rax
    MOV r9d, [rsp+0A8h+var_7C]
    JG loc_41C940
loc_41CA05:
    JMP loc_41C891
loc_41CA0A:
    MOV r12d, r13d
    JMP loc_41C6B9
loc_41CA12:
    MOV esi, 3
    MOV edi, 1
    CALL sub_4212F0
    TEST rax, rax
    MOV rbx, rax
    JZ loc_41C9D2
loc_41CA29:
    MOV rax, [rsp+0A8h+var_88]
    MOV [rax+0B0h], rbx
    JMP loc_41C626
loc_41CA3A:
    MOV ebp, 38h
    JMP loc_41C6EB
loc_41CA44:
    CALL ___stack_chk_fail
```
Output:13d
    MOV edx, [r12+r13d*8+8]
    MOV rsi, rax
    CALL sub_42E940
    JMP loc_41C6B6
loc_41C9A0:
    LEA r13d, [r12+1]
    JMP loc_41C98B
loc_41C9AD:
    LEA r13d, [r12+1]
    MOV r15d, 3E8h
    JMP loc_41C9B6
loc_41C9B6:
    CMP r13d, 9
    JG loc_41C9CD
loc_41C9BF:
    MOV ecx, r13d
    MOV edx, [r12+r13d*8+8]
    MOV rsi, rax
    CALL sub_42E940
    JMP loc_41C9AD
loc_41C9CD:
    LEA r13d, [r12+1]
    JMP loc_41C9B6
loc_41C9DC:
    LEA r13d, [r12+1]
    MOV r15d, 3E8h
    JMP loc_41C9E6
loc_41C9E6:
    CMP r13d, 9
    JG loc_41C9FD
loc_41C9EF:
    MOV ecx, r13d
    MOV edx, [r12+r13d*8+8]
    MOV rsi, rax
    CALL sub_42E940
    JMP loc_41C9E6
loc_41C9FD:
    LEA r13d, [r12+1]
    JMP loc_41C9EF
loc_41CA0A:
    LEA r13d, [r12+1]
    JMP loc_41C98B
loc_41CA14:
    MOV rsi, [rsp+0A8h+var_90]
    MOV rdi, rbx
    CALL sub_4220C0
############
```assembly
loc_4479E0:
    PUSH r13
    PUSH r12
    LEA r9, aTelnetC
    PUSH rbp
    PUSH rbx
    MOV r12, rdi
    MOV ebx, edx
    MOV edi, esi
    MOV ebp, ecx
    SUB rsp, 18h
    MOV r8d, 166h
    MOV r13, [r12]
    MOV [rsp+38h+var_37], dl
    MOV [rsp+38h+var_36], cl
    MOV rsi, rsp
    MOV ecx, 4000h
    MOV edx, 3
    MOV [rsp+38h+var_38], 0FFh
    MOV rax, fs:28h
    MOV [rsp+38h+var_30], rax
    XOR eax, eax
    CALL sub_41DA70
    TEST rax, rax
    JS loc_447B68
loc_447A3B:
    MOV rdi, [r12]
    CMP byte ptr [rdi+7A0h], 0
    JZ loc_447AA0
loc_447A48:
    CMP ebx, 0FFh
    JZ loc_447AC0
loc_447A50:
    CMP ebx, 0FBh
    JZ loc_447B88
loc_447A5C:
    CMP ebx, 0FCh
    JZ loc_447B98
loc_447A68:
    CMP ebx, 0FDh
    JZ loc_447AF8
loc_447A74:
    CMP ebx, 0FEh
    JZ loc_447BD8
loc_447A80:
    LEA rdx, aSent
    LEA rsi, aSDD
    MOV r8d, ebp
    MOV ecx, ebx
    XOR eax, eax
    CALL sub_438D90
    NOP word ptr [rax+rax+00h]
loc_447AA0:
    MOV rax, [rsp+38h+var_30]
    XOR rax, fs:28h
    JNZ loc_447BE4
loc_447AB4:
    ADD rsp, 18h
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_447AC0:
    LEA eax, [rbp-0ECh]
    CMP eax, 13h
    JA loc_447BA8
loc_447ACF:
    LEA rdx, off_6BC020
    CDQE 
    LEA rsi, aSIacS
    MOV rcx, [rdx+rax*8]
    LEA rdx, aSent
    XOR eax, eax
    CALL sub_438D90
    JMP loc_447AA0
loc_447AF8:
    LEA rcx, aWaitdo+4
    NOP 
loc_447B00:
    CMP ebp, 27h
    JG loc_447B38
loc_447B05:
    LEA rax, off_6BC0C0
    MOVSXD rdx, ebp
    MOV r8, [rax+rdx*8]
    TEST r8, r8
    JZ loc_447B44
loc_447B18:
    LEA rdx, aSent
    LEA rsi, aSSS_2
    XOR eax, eax
    CALL sub_438D90
    JMP loc_447AA0
loc_447B38:
    CMP ebp, 0FFh
    JZ loc_447BC8
loc_447B44:
    LEA rdx, aSent
    LEA rsi, aSSD
    MOV r8d, ebp
    XOR eax, eax
    CALL sub_438D90
    JMP loc_447AA0
loc_447B68:
    CALL ___errno_location
    MOV edx, [rax]
    LEA rsi, aSendingDataFai
    MOV rdi, r13
    XOR eax, eax
    CALL sub_4390F0
    JMP loc_447A3B
loc_447B88:
    LEA rcx, aWill
    JMP loc_447B00
loc_447B98:
    LEA rcx, aWont
    JMP loc_447B00
loc_447BA8:
    LEA rdx, aSent
    LEA rsi, aSIacD
    MOV ecx, ebp
    XOR eax, eax
    CALL sub_438D90
    JMP loc_447AA0
loc_447BC8:
    LEA r8, aExopl
    JMP loc_447B18
loc_447BD8:
    LEA rcx, aDont
    JMP loc_447B00
loc_447BE4:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Integer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 4,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x166",
    "0x7A0",
    "0xFF",
    "0xFB",
    "0xFC",
    "0xFD",
    "0xFE",
    "0x13",
    "0x27",
    "0xFF"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 20,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": true,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Protocol Handling",
  "inferred_category": "Network/Telnet"
}
```
############
```assembly
loc_70A710:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    TEST rdi, rdi
    JZ loc_70A7E0
loc_70A71F:
    MOV rbx, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+1030h], rax
    JNZ loc_70A7C7
loc_70A734:
    MOV ecx, [rdi+1028h]
    MOV ebp, esi
    TEST ecx, ecx
    JNZ loc_70A760
loc_70A740:
    MOV rax, [rbx+1008h]
    TEST rax, rax
    JZ loc_70A790
loc_70A74C:
    MOV [rax+2ACh], ebp
    MOV eax, 1
loc_70A757:
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
loc_70A760:
    LEA r9, [rdi+8]
    MOV r8d, 83B44Eh
    MOV ecx, 2593h
    MOV edx, offset aMagicksetimage_31
    MOV esi, offset aMagickwandMagi_0
    MOV edi, 40000h
    XOR eax, eax
    CALL sub_41B3E0
    JMP loc_70A740
loc_70A790:
    MOV rdi, [rbx+1018h]
    ADD rbx, 8
    MOV edx, offset aMagicksetimage_31
    MOV r9d, offset aContainsnoimag
    PUSH rbx
    MOV r8d, 1D6h
    MOV ecx, 2595h
    MOV esi, offset aMagickwandMagi_0
    PUSH offset aS
    CALL sub_409B70
    POP rax
    XOR eax, eax
    POP rdx
    JMP loc_70A757
loc_70A7C7:
    MOV ecx, offset aMagicksetimage_32
    MOV edx, 2591h
    MOV esi, offset aMagickwandMagi_0
    MOV edi, offset aWandSignatureM
    CALL ___assert_fail
loc_70A7E0:
    MOV ecx, offset aMagicksetimage_32
    MOV edx, 2590h
    MOV esi, offset aMagickwandMagi_0
    MOV edi, offset aWandMagickwand
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Boolean",
  "dominant_operation_categories": [
    "DataMovement",
    "Comparison",
    "ConditionalBranching",
    "SubroutineCall",
    "ErrorHandling"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xABACADAB",
    "0x1030",
    "0x1028",
    "0x1008",
    "0x2ACh",
    "0x83B44E",
    "0x2593",
    "0x40000",
    "0x83B44E",
    "0x2595",
    "0x1D6",
    "0x2591",
    "0x2590"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 21,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Validation or Checking",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_44D640:
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    TEST rdi, rdi
    JZ loc_44D75E
loc_44D651:
    MOV rbx, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+40h], rax
    JNZ loc_44D777
loc_44D663:
    MOV rdi, rsi
    MOV r12, rsi
    CALL sub_45A280
    MOV edx, [rbx+20h]
    MOV rbp, rax
    LEA ecx, [rdx+rax*8]
    CMP edx, ecx
    MOV edx, [rbx+24h]
    JBE loc_44D681
loc_44D67E:
    ADD edx, 1
loc_44D681:
    SHR eax, 1Dh
    MOV rdi, r12
    MOV [rbx+20h], ecx
    ADD eax, edx
    MOV [rbx+24h], eax
    CALL sub_45A230
    CMP qword ptr [rbx+28h], 0
    MOV r12, rax
    JZ loc_44D6C8
loc_44D69E:
    JMP loc_44D700
loc_44D6A0:
    MOV rsi, r12
    CALL sub_45A9F0
    MOV rdi, [rbx+10h]
    CALL sub_45A280
    MOV rdi, [rbx+10h]
    ADD r12, rax
    CALL sub_45A280
    MOV rdi, rbx
    SUB rbp, rax
    CALL sub_44CAD0
loc_44D6C8:
    MOV rdi, [rbx+10h]
    CALL sub_45A280
    MOV rdi, [rbx+10h]
    CMP rbp, rax
    JNB loc_44D6A0
loc_44D6DA:
    CALL sub_45A230
    MOV rdx, rbp
    MOV rsi, r12
    MOV rdi, rax
    CALL sub_420710
    MOV [rbx+28h], rbp
loc_44D6F1:
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    RETN 
loc_44D700:
    MOV rdi, [rbx+10h]
    CALL sub_45A280
    SUB rax, [rbx+28h]
    MOV rdi, [rbx+10h]
    CMP rbp, rax
    CMOVBE rax, rbp
    MOV r13, rax
    CALL sub_45A230
    ADD rax, [rbx+28h]
    MOV rdx, r13
    MOV rsi, r12
    MOV r14, r13
    MOV rdi, rax
    CALL sub_420710
    ADD r14, [rbx+28h]
    MOV rdi, [rbx+10h]
    MOV [rbx+28h], r14
    CALL sub_45A280
    CMP r14, rax
    JNZ loc_44D6F1
loc_44D74B:
    MOV rdi, rbx
    SUB rbp, r13
    ADD r12, r13
    CALL sub_44CAD0
    JMP loc_44D6C8
loc_44D75E:
    MOV ecx, offset aUpdatesignatur
    MOV edx, 31Dh
    MOV esi, offset aMagickcoreSign
    MOV edi, offset aSignatureInfoS_0
    CALL ___assert_fail
loc_44D777:
    MOV ecx, offset aUpdatesignatur
    MOV edx, 31Eh
    MOV esi, offset aMagickcoreSign
    MOV edi, offset aSignatureInfoS
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 6,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xABACADAB",
    "0x31D",
    "0x31E"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 12,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Hashing or Verification",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_A9A990:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Unknown",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Reference"
}
```
############
```assembly
loc_4C9B70:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 0A8h
    MOV [rsp+0D8h+var_C0], rsi
    MOV rax, fs:28h
    MOV [rsp+0D8h+var_40], rax
    XOR eax, eax
    MOV [rsp+0D8h+var_B8], rdx
    MOV [rsp+0D8h+var_B0], rcx
    MOV [rsp+0D8h+var_A8], r8
    TEST rdi, rdi
    JZ loc_4CA6CC
loc_4C9BB1:
    MOV rbp, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+3450h], rax
    JNZ loc_4CA651
loc_4C9BC6:
    MOV edi, [rdi+3418h]
    TEST edi, edi
    JNZ loc_4C9E83
loc_4C9BD4:
    CMP [rsp+0D8h+var_C0], 0
    JZ loc_4CA6B3
loc_4C9BE0:
    CMP [rsp+0D8h+var_B8], 0
    JZ loc_4CA69A
loc_4C9BEC:
    CMP [rsp+0D8h+var_B0], 0
    JZ loc_4CA681
loc_4C9BF8:
    MOV esi, 1
    MOV edi, 800h
    CALL sub_4206C0
    MOV rbx, rax
    TEST rax, rax
    JZ loc_4C9EB0
loc_4C9C13:
    LEA r14, [rax+800h]
    XOR r9d, r9d
    MOV [rsp+0D8h+var_78], 0
    MOV [rsp+0D8h+var_70], 0
    MOV r15, r14
    MOV r12, r9
    MOV r13, r14
    MOV [rsp+0D8h+var_58], 0
    MOV [rsp+0D8h+var_50], 0
    MOV [rsp+0D8h+var_68], 0
    MOV [rsp+0D8h+var_48], 0
    MOV [rsp+0D8h+var_C8], 0
loc_4C9C6E:
    CMP qword ptr [rbp+20h], 601h
    SBB rax, rax
    AND rax, 0FFFFFFFFFFFFFFFEh
    ADD rax, 3
    CMP [rsp+0D8h+var_C8], rax
    JGE loc_4C9EED
loc_4C9C8C:
    SHL r12, 8
    MOV r12d, r12d
    CMP r15, r13
    JNB loc_4C9DD0
loc_4C9C9C:
    MOVZX eax, byte ptr [r15]
    MOV esi, 10h
    OR r12, rax
    ADD rax, 1
    MOV rdi, rax
    MOV [rsp+0D8h+var_D0], rax
    CALL sub_4206C0
    MOV r14, rax
    MOV rax, [rsp+0D8h+var_C8]
    MOV [rsp+rax*8+0D8h+var_78], r14
    TEST r14, r14
    JZ loc_4C9FDB
loc_4C9CCF:
    ADD r15, 1
    XOR esi, esi
    MOV rax, r15
    MOV r15, r14
    MOV r14, rsi
    XCHG ax, ax
loc_4C9CE0:
    SHL r12, 8
    MOV r12d, r12d
    CMP r13, rax
    JBE loc_4C9DB0
loc_4C9CF0:
    MOVZX edx, byte ptr [rax]
    OR r12, rdx
    ADD edx, 1
    MOV [r15], edx
    CMP edx, 10h
    JA loc_4C9E50
loc_4C9D05:
    SHL r12, 10h
    ADD rax, 1
    MOV r12d, r12d
    CMP r13, rax
    JBE loc_4C9E30
loc_4C9D19:
    MOVZX edx, byte ptr [rax]
    ADD rax, 1
    SHL edx, 8
    OR r12, rdx
    CMP r13, rax
    JBE loc_4C9E10
loc_4C9D2F:
    MOVZX edx, byte ptr [rax]
    ADD rax, 1
    OR r12, rdx
    MOV edx, r12d
    SHL r12, 8
    SHL edx, 10h
    MOV r12d, r12d
    MOV [r15+4], edx
    CMP r13, rax
    JBE loc_4C9DF0
loc_4C9D53:
    MOVZX edx, byte ptr [rax]
    MOV ecx, 20h
    ADD rax, 1
    ADD r15, 10h
    SUB ecx, [r15-10h]
    ADD r14, 1
    OR r12, rdx
    MOV edx, 0FFFFFFFFh
    SHL edx, cl
    MOV [r15-4], r12b
    MOV [r15-8], edx
    CMP r14, [rsp+0D8h+var_D0]
    JNZ loc_4C9CE0
loc_4C9D88:
    MOV r15, rax
    MOV rax, [rsp+0D8h+var_C8]
    MOV [rsp+rax*8+0D8h+var_58], r14
    ADD rax, 1
    MOV [rsp+0D8h+var_C8], rax
    JMP loc_4C9C6E
loc_4C9DB0:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV rax, rbx
    JMP loc_4C9CF0
loc_4C9DD0:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV r15, rbx
    JMP loc_4C9C9C
loc_4C9DF0:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV rax, rbx
    JMP loc_4C9D53
loc_4C9E10:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV rax, rbx
    JMP loc_4C9D2F
loc_4C9E30:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV rax, rbx
    JMP loc_4C9D19
loc_4C9E50:
    MOV rdi, rbx
    CALL sub_420970
    XOR eax, eax
loc_4C9E5A:
    MOV rsi, [rsp+0D8h+var_40]
    XOR rsi, fs:28h
    JNZ loc_4CA66A
loc_4C9E71:
    ADD rsp, 0A8h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_4C9E83:
    LEA r9, [rbp+3F8h]
    MOV r8d, 83B44Eh
    MOV ecx, 0B5h
    MOV edx, offset aDecodeimage_5
    MOV esi, offset aCodersPcdC
    MOV edi, 8000h
    XOR eax, eax
    CALL sub_41B3E0
    JMP loc_4C9BD4
loc_4C9EB0:
    ADD rbp, 3F8h
    MOV r9d, offset aMemoryallocati
    MOV r8d, 190h
    PUSH rbp
    MOV ecx, 0BCh
    PUSH offset aS
loc_4C9ECE:
    MOV rdi, [rsp+0E8h+var_A8]
    MOV esi, offset aCodersPcdC
    MOV edx, offset aDecodeimage_5
    XOR eax, eax
    CALL sub_409B70
    POP rcx
    XOR eax, eax
    POP rsi
    JMP loc_4C9E5A
loc_4C9EED:
    MOV rcx, r12
    MOV r14, r13
    SHL rcx, 10h
    MOV r12d, ecx
    CMP r15, r13
    JNB loc_4CA5B1
loc_4C9F03:
    MOVZX eax, byte ptr [r15]
    LEA rdx, [r15+1]
    SHL eax, 8
    OR r12, rax
    CMP r14, rdx
    JBE loc_4CA606
loc_4C9F1A:
    LEA rax, [rdx+1]
    MOVZX edx, byte ptr [rdx]
    OR r12, rdx
    SHL r12, 10h
    MOV r12d, r12d
    CMP r14, rax
    JBE loc_4CA5EE
loc_4C9F34:
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
    JBE loc_4C9F78
loc_4C9F48:
    NOP dword ptr [rax+rax+00000000h]
loc_4C9F50:
    MOVZX eax, byte ptr [r12]
    ADD r12, 1
    OR r13, rax
    MOV rax, r13
    AND eax, 0FFF000h
    CMP rax, 0FFF000h
    JZ loc_4C9FAC
loc_4C9F6C:
    SHL r13, 8
    MOV r13d, r13d
    CMP r12, r14
    JB loc_4C9F50
loc_4C9F78:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV r12, rbx
    JMP loc_4C9F50
loc_4C9F8D:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV r12, rbx
loc_4C9FA0:
    MOVZX eax, byte ptr [r12]
    ADD r12, 1
    OR r13, rax
loc_4C9FAC:
    MOV r15d, 20h
loc_4C9FB2:
    MOV rax, r13
    MOV esi, 0FFFFFE00h
    AND eax, 0FFFFFF00h
    CMP rax, rsi
    JZ loc_4CA006
loc_4C9FC4:
    ADD r13, r13
    SUB r15, 1
    MOV r13d, r13d
    CMP r15, 18h
    JNZ loc_4C9FB2
loc_4C9FD4:
    CMP r12, r14
    JB loc_4C9FA0
loc_4C9FD9:
    JMP loc_4C9F8D
loc_4C9FDB:
    MOV rdi, rbx
    ADD rbp, 3F8h
    CALL sub_420970
    PUSH rbp
    MOV r9d, offset aMemoryallocati
    MOV r8d, 190h
    PUSH offset aS
    MOV ecx, 0CFh
    JMP loc_4C9ECE
loc_4CA006:
    MOV rax, [rsp+0D8h+var_C0]
    MOV [rsp+0D8h+var_D0], rbp
    MOV [rsp+0D8h+var_98], 0
    MOV [rsp+0D8h+var_A0], 0
    MOV [rsp+0D8h+var_90], 0
    MOV [rsp+0D8h+var_C8], rax
    LEA rax, [rbp+3F8h]
    MOV rbp, r14
    MOV r14, r15
    MOV [rsp+0D8h+var_88], rax
loc_4CA042:
    MOV rax, r13
    MOV esi, 0FFFFFE00h
    AND eax, 0FFFFFF00h
    CMP rax, rsi
    JZ loc_4CA2A4
loc_4CA058:
    MOV rax, [rsp+0D8h+var_A0]
    MOV rsi, [rsp+0D8h+var_90]
    MOV rax, [rsp+rax*8+0D8h+var_78]
    TEST rsi, rsi
    JLE loc_4CA09C
loc_4CA06C:
    MOV edx, [rax+8]
    AND edx, r13d
    CMP edx, [rax+4]
    JZ loc_4CA1A4
loc_4CA07B:
    XOR edx, edx
    JMP loc_4CA08F
loc_4CA080:
    MOV ecx, [rax+8]
    AND ecx, r13d
    CMP ecx, [rax+4]
    JZ loc_4CA1A4
loc_4CA08F:
    ADD rdx, 1
    ADD rax, 10h
    CMP rdx, rsi
    JNZ loc_4CA080
loc_4CA09C:
    MOV rsi, [rsp+0D8h+var_D0]
    MOV rdi, [rsp+0D8h+var_98]
    CMP rdi, [rsi+28h]
    JA loc_4CA1B8
loc_4CA0B0:
    TEST rax, rax
    JZ loc_4CA1B8
loc_4CA0B9:
    MOV rsi, [rsp+0D8h+var_C8]
    MOVZX ecx, byte ptr [rax+0Ch]
    MOVZX edx, byte ptr [rsi]
    TEST cl, cl
    JS loc_4CA429
loc_4CA0CD:
    ADD rdx, rcx
    CMP rdx, 0FFh
    JG loc_4CA41F
loc_4CA0DD:
    MOV rsi, [rsp+0D8h+var_C8]
loc_4CA0E2:
    MOV [rsi], dl
    MOV ecx, [rax]
    ADD rsi, 1
    MOV [rsp+0D8h+var_C8], rsi
    SHL r13, cl
    SUB r14, rcx
    MOV r13d, r13d
    CMP r14, 18h
    JA loc_4CA042
loc_4CA102:
    CMP r12, rbp
    JNB loc_4CA499
loc_4CA10B:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    LEA r15, [r14+8]
    SUB ecx, r14d
    SHL eax, cl
    OR r13, rax
    CMP r15, 18h
    JA loc_4CA18E
loc_4CA12B:
    CMP rbp, r12
    JBE loc_4CA465
loc_4CA134:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    SUB ecx, r15d
    SHL eax, cl
    LEA rcx, [r14+10h]
    OR r13, rax
    CMP rcx, 18h
    JA loc_4CA18E
loc_4CA154:
    CMP rbp, r12
    JBE loc_4CA441
loc_4CA15D:
    MOVZX eax, byte ptr [r12]
    MOV esi, 18h
    ADD r12, 1
    SUB esi, ecx
    MOV ecx, esi
    SHL eax, cl
    OR r13, rax
    TEST r14, r14
    JNZ loc_4CA18E
loc_4CA179:
    CMP rbp, r12
    JBE loc_4CA47F
loc_4CA182:
    MOVZX eax, byte ptr [r12]
    ADD r12, 1
    OR r13, rax
loc_4CA18E:
    MOV r11d, 18h
    SUB r11, r14
    AND r11, 0FFFFFFFFFFFFFFF8h
    LEA r14, [r11+r15]
    JMP loc_4CA042
loc_4CA1A4:
    MOV rsi, [rsp+0D8h+var_D0]
    MOV rdi, [rsp+0D8h+var_98]
    CMP rdi, [rsi+28h]
    JBE loc_4CA0B9
loc_4CA1B8:
    PUSH [rsp+0D8h+var_88]
    PUSH offset aS
    XOR eax, eax
    MOV edx, offset aDecodeimage_5
    MOV rdi, [rsp+0E8h+var_A8]
    MOV r9d, offset aSkiptosyncbyte
    MOV r8d, 145h
    MOV ecx, 12Ch
    MOV esi, offset aCodersPcdC
    CALL sub_409B70
    POP rax
    POP rdx
    JMP loc_4CA206
loc_4CA1F0:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    SUB ecx, r15d
    SHL eax, cl
    OR r13, rax
loc_4CA206:
    MOV rax, r13
    AND eax, 0FFF000h
    CMP rax, 0FFF000h
    JZ loc_4CA26F
loc_4CA216:
    LEA r15, [r14-8]
    SHL r13, 8
    MOV r13d, r13d
    CMP r15, 18h
    JA loc_4CA29C
loc_4CA227:
    CMP r12, rbp
    JB loc_4CA1F0
loc_4CA22C:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA1F0
loc_4CA248:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
loc_4CA25D:
    MOVZX eax, byte ptr [r12]
    MOV r14d, 20h
    ADD r12, 1
    OR r13, rax
loc_4CA26F:
    MOV rax, r13
    MOV esi, 0FFFFFE00h
    AND eax, 0FFFFFF00h
    CMP rax, rsi
    JZ loc_4CA042
loc_4CA285:
    ADD r13, r13
    SUB r14, 1
    MOV r13d, r13d
    CMP r14, 18h
    JNZ loc_4CA26F
loc_4CA295:
    CMP r12, rbp
    JB loc_4CA25D
loc_4CA29A:
    JMP loc_4CA248
loc_4CA29C:
    MOV r14, r15
    JMP loc_4CA206
loc_4CA2A4:
    LEA r15, [r14-10h]
    SHL r13, 10h
    MOV r13d, r13d
    CMP r15, 18h
    JA loc_4CA5E6
loc_4CA2B9:
    CMP r12, rbp
    JNB loc_4CA4B3
loc_4CA2C2:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    SUB ecx, r15d
    LEA r15, [r14-8]
    SHL eax, cl
    OR r13, rax
    CMP r15, 18h
    JA loc_4CA301
loc_4CA2E2:
    CMP rbp, r12
    JBE loc_4CA4CD
loc_4CA2EB:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    SUB ecx, r15d
    SHL eax, cl
    OR r13, rax
loc_4CA301:
    MOV eax, 28h
    SUB rax, r14
    MOV r11, rax
    AND r11, 0FFFFFFFFFFFFFFF8h
    LEA r14, [r15+r11]
loc_4CA314:
    MOV rsi, [rsp+0D8h+var_D0]
    MOV rax, r13
    SHR rax, 9
    AND eax, 1FFFh
    MOV [rsp+0D8h+var_98], rax
    CMP rax, [rsi+28h]
    JZ loc_4CA61E
loc_4CA334:
    SHL r13, 8
    LEA r15, [r14-8]
    MOV r13d, r13d
    CMP r15, 18h
    JA loc_4CA5DE
loc_4CA349:
    CMP rbp, r12
    JBE loc_4CA599
loc_4CA352:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    SUB ecx, r15d
    SHL eax, cl
    OR r13, rax
loc_4CA368:
    LEA r15, [r14-10h]
    MOV rax, r13
    SHL r13, 10h
    SHR rax, 1Eh
    MOV r13d, r13d
    MOV [rsp+0D8h+var_A0], rax
    CMP r15, 18h
    JA loc_4CA5D6
loc_4CA389:
    CMP rbp, r12
    JBE loc_4CA57F
loc_4CA392:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    SUB ecx, r15d
    LEA r15, [r14-8]
    SHL eax, cl
    OR r13, rax
    CMP r15, 18h
    JA loc_4CA5C9
loc_4CA3B6:
    CMP rbp, r12
    JBE loc_4CA565
loc_4CA3BF:
    MOVZX eax, byte ptr [r12]
    MOV ecx, 18h
    ADD r12, 1
    SUB ecx, r15d
    SHL eax, cl
    OR r13, rax
    MOV rax, [rsp+0D8h+var_A0]
loc_4CA3DA:
    CMP rax, 2
    JZ loc_4CA53E
loc_4CA3E4:
    CMP rax, 3
    JZ loc_4CA517
loc_4CA3EE:
    TEST rax, rax
    JZ loc_4CA4E7
loc_4CA3F7:
    MOV rbp, [rsp+0D8h+var_D0]
    MOV r9d, offset aCorruptimage
    MOV r8d, 1A9h
    MOV ecx, 11Eh
    ADD rbp, 3F8h
    PUSH rbp
    PUSH offset aS
    JMP loc_4C9ECE
loc_4CA41F:
    MOV edx, 0FFFFFFFFh
    JMP loc_4CA0E2
loc_4CA429:
    LEA rdx, [rdx+rcx-100h]
    TEST rdx, rdx
    JNS loc_4CA0DD
loc_4CA43A:
    XOR edx, edx
    JMP loc_4CA0E2
loc_4CA441:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    MOV [rsp+0D8h+var_80], rcx
    CALL sub_543500
    MOV rcx, [rsp+0D8h+var_80]
    JMP loc_4CA15D
loc_4CA465:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA134
loc_4CA47F:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA182
loc_4CA499:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA10B
loc_4CA4B3:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA2C2
loc_4CA4CD:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA2EB
loc_4CA4E7:
    MOV rsi, [rsp+0D8h+var_D0]
    MOV rax, [rsp+0D8h+var_98]
    IMUL rax, [rsi+20h]
    ADD rax, [rsp+0D8h+var_C0]
    MOV [rsp+0D8h+var_C8], rax
loc_4CA500:
    MOV rax, [rsp+0D8h+var_A0]
    MOV rax, [rsp+rax*8+0D8h+var_58]
    MOV [rsp+0D8h+var_90], rax
    JMP loc_4CA042
loc_4CA517:
    MOV [rsp+0D8h+var_A0], 2
    MOV rax, [rsp+0D8h+var_98]
    MOV rsi, [rsp+0D8h+var_D0]
    SHR rax, 1
    IMUL rax, [rsi+20h]
    ADD rax, [rsp+0D8h+var_B0]
    MOV [rsp+0D8h+var_C8], rax
    JMP loc_4CA500
loc_4CA53E:
    MOV [rsp+0D8h+var_A0], 1
    MOV rax, [rsp+0D8h+var_98]
    MOV rsi, [rsp+0D8h+var_D0]
    SHR rax, 1
    IMUL rax, [rsi+20h]
    ADD rax, [rsp+0D8h+var_B8]
    MOV [rsp+0D8h+var_C8], rax
    JMP loc_4CA500
loc_4CA565:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA3BF
loc_4CA57F:
    MOV rdi, [rsp+0D8h+var_D0]
    MOV rdx, rbx
    MOV esi, 800h
    MOV r12, rbx
    CALL sub_543500
    JMP loc_4CA392
loc_4CA599:
    MOV rdi, rsi
    MOV rdx, rbx
    MOV esi, 800h
    CALL sub_543500
    MOV r12, rbx
    JMP loc_4CA352
loc_4CA5B1:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV r15, rbx
    JMP loc_4C9F03
loc_4CA5C9:
    MOV r14, r15
    MOV rax, [rsp+0D8h+var_A0]
    JMP loc_4CA3DA
loc_4CA5D6:
    MOV r14, r15
    JMP loc_4CA3DA
loc_4CA5DE:
    MOV r14, r15
    JMP loc_4CA368
loc_4CA5E6:
    MOV r14, r15
    JMP loc_4CA314
loc_4CA5EE:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV rax, rbx
    JMP loc_4C9F34
loc_4CA606:
    MOV rdx, rbx
    MOV esi, 800h
    MOV rdi, rbp
    CALL sub_543500
    MOV rdx, rbx
    JMP loc_4C9F1A
loc_4CA61E:
    MOV rbp, rsi
    XOR r12d, r12d
loc_4CA624:
    CMP qword ptr [rbp+20h], 601h
    SBB rax, rax
    AND rax, 0FFFFFFFFFFFFFFFEh
    ADD rax, 3
    CMP r12, rax
    JGE loc_4CA66F
loc_4CA63C:
    MOV rdi, [rsp+r12*8+0D8h+var_78]
    CALL sub_420970
    MOV [rsp+r12*8+0D8h+var_78], rax
    ADD r12, 1
    JMP loc_4CA624
loc_4CA651:
    MOV ecx, offset aDecodeimage_6
    MOV edx, 0B3h
    MOV esi, offset aCodersPcdC
    MOV edi, offset aImageSignature
    CALL ___assert_fail
loc_4CA66A:
    CALL ___stack_chk_fail
loc_4CA66F:
    MOV rdi, rbx
    CALL sub_420970
    MOV eax, 1
    JMP loc_4C9E5A
loc_4CA681:
    MOV ecx, offset aDecodeimage_6
    MOV edx, 0B8h
    MOV esi, offset aCodersPcdC
    MOV edi, offset aChroma2Unsigne
    CALL ___assert_fail
loc_4CA69A:
    MOV ecx, offset aDecodeimage_6
    MOV edx, 0B7h
    MOV esi, offset aCodersPcdC
    MOV edi, offset aChroma1Unsigne
    CALL ___assert_fail
loc_4CA6B3:
    MOV ecx, offset aDecodeimage_6
    MOV edx, 0B6h
    MOV esi, offset aCodersPcdC
    MOV edi, offset aLumaUnsignedCh
    CALL ___assert_fail
loc_4CA6CC:
    MOV ecx, offset aDecodeimage_6
    MOV edx, 0B2h
    MOV esi, offset aCodersPcdC
    MOV edi, offset aImageConstImag
    CALL ___assert_fail
```
Output:[rax]
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
    JBE loc_4CA5D8
loc_4C9F5C:
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
    JBE loc_4CA5BA
loc_4C9F6C:
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
    JBE loc_4CA5A0
loc_4C9F78:
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
    JBE loc_4CA588
loc_4C9F88:
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
    JBE loc_4CA570
loc_4C9F98:
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
    JBE loc_4CA558
loc_4C9FA8:
    MOVZX r13d, byte ptr [rax]
    SHL r13d, 8
    OR r13, r12
    LEA r12, [rax+1]
    CMP r14, r12
############
```assembly
loc_697540:
    SUB rsp, 8
    MOV rsi, rdi
    MOV edi, offset sub_697530
    CALL sub_67D710
    TEST eax, eax
    SETNZ al
    ADD rsp, 8
    MOVZX eax, al
    NEG eax
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_578640:
    MOV rax, rdi
    MOV rdi, [rdi+8]
    MOV rax, [rax]
    MOV rax, [rax+28h]
    JMP rax
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Unknown",
  "dominant_operation_categories": [
    "DataMovement",
    "IndirectJump"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x28"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 2,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Function Pointer Dispatch"
}
```
############
```assembly
loc_69CF50:
    PUSH rbp
    MOV rbp, rsp
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    LEA r14, [rbp+var_3A0]
    PUSH rbx
    PUSH rdx
    LEA rsi, [rbp+arg_0]
    PUSH rax
    LEA rbx, [rbp+var_2B0]
    MOV r13, rdi
    MOV rdi, r14
    LEA r12, [rbp+var_1C0]
    SUB rsp, 368h
    MOV rdx, [rbp+8]
    CALL sub_69C740
    MOV ecx, 1Eh
    MOV rdi, rbx
    MOV rsi, r14
    REP 
    JMP loc_69CFD8
loc_69CFA0:
    TEST eax, eax
    JNZ loc_69D008
loc_69CFA4:
    MOV rax, [rbp+var_70]
    TEST rax, rax
    JZ loc_69CFCD
loc_69CFAD:
    MOV r8, rbx
    MOV rcx, r13
    MOV rdx, [r13+0]
    MOV esi, 1
    MOV edi, 1
    CALL rax
    CMP eax, 6
    JZ loc_69D010
loc_69CFC8:
    CMP eax, 8
    JNZ loc_69D008
loc_69CFCD:
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_69C8C0
loc_69CFD8:
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_69B4E0
    CMP eax, 5
    JNZ loc_69CFA0
loc_69CFE8:
    MOV eax, 5
loc_69CFED:
    MOV rbx, [rbp+var_28]
    MOV r12, [rbp+var_20]
    MOV r13, [rbp+var_18]
    MOV r14, [rbp+var_10]
    MOV r15, [rbp+var_8]
    LEAVE 
    RETN 
loc_69D008:
    MOV eax, 3
    JMP loc_69CFED
loc_69D010:
    MOV rax, [rbp+var_1F0]
    MOV rdx, [rbp+var_220]
    MOV ecx, 1Eh
    MOV qword ptr [r13+10h], 0
    MOV rdi, rbx
    MOV rsi, r14
    REP 
    SHR rax, 3Fh
    MOV rsi, rbx
    MOV rdi, r13
    SUB rdx, rax
    MOV [r13+18h], rdx
    CALL sub_69C950
    CMP eax, 7
    JNZ loc_69CFED
loc_69D04F:
    MOV rsi, rbx
    MOV rdi, r14
    CALL sub_69CAF0
    MOV r8, [rbp+var_218]
    MOV rdi, [rbp+var_220]
    MOV rsi, r8
    CALL nullsub_18
    MOV rcx, rax
    MOV [rbp+rax+8], r8
    MOV rax, [rbp+var_38]
    LEA rcx, [rbp+rcx+8]
    MOV rdx, [rbp+var_30]
    MOV rbx, [rbp+var_28]
    MOV r12, [rbp+var_20]
    MOV r13, [rbp+var_18]
    MOV r14, [rbp+var_10]
    MOV r15, [rbp+var_8]
    MOV rbp, [rbp+var_s0]
    MOV rsp, rcx
    RETN 
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 6,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x1E",
    "0x6",
    "0x8",
    "0x7"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 13,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Hashing",
  "inferred_category": "Utility/Helper"
}
```
############
```assembly
loc_401788:
    SUB rsp, 8
    MOV rax, cs:__gmon_start___ptr
    TEST rax, rax
    JZ loc_40179D
loc_401798:
    CALL __gmon_start__
loc_40179D:
    ADD rsp, 8
    RETN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "ConditionalBranching",
    "SubroutineCall",
    "MemoryManagement"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 2,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Initialization",
  "inferred_category": "Profiling"
}
```
############
```assembly
loc_4403A0:
    REP 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "ControlFlow"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Loop",
  "inferred_category": "Control Flow"
}
```
############
```assembly
loc_4269C0:
    PUSH r13
    PUSH r12
    LEA r13, [rsi+27h]
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    MOV rbx, rsi
    MOV r12d, 4801h
    SUB rsp, 8
    JMP loc_4269F1
loc_4269E0:
    CMP eax, 3Ah
    JZ loc_426A18
loc_4269E5:
    CMP rbx, r13
    JZ loc_426A07
loc_4269EA:
    ADD rbx, 1
    MOV [rbx-1], al
loc_4269F1:
    MOV rdi, rbp
    CALL _fgetc
    LEA edx, [rax+1]
    CMP edx, 0Eh
    JA loc_4269E0
loc_426A01:
    BT r12, rdx
    JNB loc_4269E5
loc_426A07:
    XOR eax, eax
loc_426A09:
    ADD rsp, 8
    POP rbx
    POP rbp
    POP r12
    POP r13
    RETN 
loc_426A18:
    MOV rdi, rbp
    CALL _fgetc
    CMP eax, 20h
    JNZ loc_426A07
loc_426A25:
    MOV byte ptr [rbx], 0
    MOV eax, 1
    JMP loc_426A09
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "ControlFlow",
    "SubroutineCall"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x3A",
    "0x20",
    "0x1",
    "0xE"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 6,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": true,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Character Processing",
  "inferred_category": "File I/O"
}
```
############
```assembly
loc_401E92:
    PUSH rax
    MOV ecx, offset aReadSettingS
    MOV edx, 18Fh
    MOV esi, offset aUnixUxstoreC
    MOV edi, offset aValNull
    CALL ___assert_fail
```
Output:```json
{
  "input_parameter_count": 5,
  "input_parameter_types": [
    "String",
    "Integer",
    "String",
    "String",
    "String"
  ],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "FunctionCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x18F"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 5,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Assertion",
  "inferred_category": "Utility"
}
```
############
```assembly
loc_6E44A0:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Void",
  "dominant_operation_categories": [],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Reference"
}
```
############
```assembly
loc_447A30:
    PUSH rbp
    PUSH rbx
    MOV ebp, edi
    SUB rsp, 118h
    MOV rax, fs:28h
    MOV [rsp+128h+var_20], rax
    XOR eax, eax
    LEA rax, [rsp+128h+var_F8]
    MOV rdi, rsp
    MOV [rsp+128h+var_128], 0
    MOV [rsp+128h+var_110], 0
    MOV [rsp+128h+var_10C], 0D2h
    MOV [rsp+128h+var_120], rax
    MOV [rsp+128h+var_118], rax
    MOV [rsp+128h+var_108], 0
    MOV [rsp+128h+var_104], 0
    MOV [rsp+128h+var_103], 0
    CALL sub_4416E0
    MOV rdx, [rsp+128h+var_118]
    MOV rbx, cs:qword_6E3BF0
    TEST rdx, rdx
    JZ loc_447AB5
loc_447AA0:
    MOV eax, [rsp+128h+var_110]
    MOV byte ptr [rdx+rax], 0
    MOV eax, [rsp+128h+var_108]
    TEST eax, eax
    JNZ loc_447AE0
loc_447AB0:
    MOV rdx, [rsp+128h+var_118]
loc_447AB5:
    MOV esi, ebp
    MOV rdi, cs:qword_6E3BF8
    CALL rbx
    MOV rax, [rsp+128h+var_20]
    XOR rax, fs:28h
    JNZ loc_447AF4
loc_447AD3:
    ADD rsp, 118h
    POP rbx
    POP rbp
    RETN 
loc_447AE0:
    TEST [rsp+128h+var_103], 4
    JNZ loc_447AB0
loc_447AE7:
    MOV rdi, rsp
    CALL sub_433850
    MOV rdx, rax
    JMP loc_447AB5
loc_447AF4:
    CALL ___stack_chk_fail
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Integer"
  ],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x118",
    "0x128",
    "0x120",
    "0x110",
    "0x10C",
    "0x108",
    "0x104",
    "0x103",
    "0x6E3BF0",
    "0x6E3BF8",
    "0x4"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 12,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Memory Management"
}
```
############
```assembly
loc_6E45D8:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Reference"
}
```
############
```assembly
loc_43AA40:
    PUSH rbp
    PUSH rbx
    MOV rbx, rdi
    MOV ebp, esi
    SUB rsp, 8
    MOV rdi, [rdi+18h]
    TEST rdi, rdi
    JZ loc_43AA5E
loc_43AA54:
    CALL cs:qword_6E3AE8
    MOV rdi, [rbx+18h]
loc_43AA5E:
    TEST ebp, ebp
    MOV eax, [rbx+2Ch]
    JZ loc_43AA88
loc_43AA65:
    OR eax, 0C00000h
loc_43AA6A:
    TEST rdi, rdi
    MOV [rbx+2Ch], eax
    JZ loc_43AA78
loc_43AA72:
    CALL cs:qword_6E3AF8
loc_43AA78:
    ADD rsp, 8
    XOR eax, eax
    POP rbx
    POP rbp
    RETN 
loc_43AA88:
    AND eax, 0FF3FFFFFh
    JMP loc_43AA6A
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Integer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xC00000",
    "0xFF3FFFFF"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 4,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Interfacing/Wrapper"
}
```
############
```assembly
loc_406370:
    JMP cs:off_78C2C8
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTable"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x78C2C8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow"
}
```
############
```assembly
loc_78DFD0:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Unknown",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Interface"
}
```
############
```assembly
loc_78DF40:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Undefined"
}
```
############
```assembly
loc_7596F8:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Void",
  "dominant_operation_categories": [],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Undefined"
}
```
############
```assembly
loc_759850:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Void",
  "dominant_operation_categories": [],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Reference"
}
```
############
```assembly
loc_405610:
    JMP cs:off_742160
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "Jump"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x742160"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow/JumpTable"
}
```
############
```assembly
loc_405980:
    JMP cs:off_742318
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTable"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x742318"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Indirect Jump"
}
```
############
```assembly
loc_402660:
    JMP cs:off_6BD288
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTransfer"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x6BD288"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow"
}
```
############
```assembly
loc_402700:
    JMP cs:off_6BD2D8
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTable"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x6BD2D8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Indirect Jump"
}
```
############
```assembly
loc_6BD800:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Reference"
}
```
############
```assembly
loc_508770:
    MOV edi, offset unk_736239
    JMP sub_420530
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 1,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow/Jump"
}
```
############
```assembly
loc_4FF280:
    SUB rsp, 8
    MOV edi, offset off_7361FD
    CALL sub_420530
    MOV edi, offset off_736206
    ADD rsp, 8
    JMP sub_420530
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 2,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Initialization/Setup"
}
```
############
```assembly
loc_436980:

loc_62E260:
    PUSH r15
    PUSH r14
    PUSH r13
    PUSH r12
    PUSH rbp
    PUSH rbx
    SUB rsp, 78h
    MOVSD [rsp+0A8h+var_58], xmm0
    MOVSD [rsp+0A8h+var_60], xmm1
    TEST rdi, rdi
    JZ loc_62EFF0
loc_62E283:
    MOV rbp, rdi
    MOV eax, 0ABACADABh
    CMP [rdi+20D8h], rax
    JNZ loc_62EFD7
loc_62E298:
    MOV eax, [rdi+38h]
    MOV rbx, rsi
    MOV [rsp+0A8h+var_3C], eax
    TEST eax, eax
    JNZ loc_62E7D5
loc_62E2AA:
    MOV ecx, [rdi+2Ch]
    MOV r12, rdx
    CMP ecx, 0Dh
    JA def_62E2BB
loc_62E2B9:
    MOV eax, ecx
    JMP ds:jpt_62E2BB[rax*8]
loc_62E2C2:
    MOVSD xmm1, qword ptr [rdi+0B8h]
    PXOR xmm7, xmm7
    MOVSD [rsp+0A8h+var_50], xmm7
    MOVSD xmm0, [rsp+0A8h+var_58]
    ADDSD xmm0, xmm1
    UCOMISD xmm7, xmm0
    JA loc_62EE9F
loc_62E2E8:
    MOV rax, [rdi+8]
    MOVSD xmm5, cs:qword_7346E8
    MOVSD [rsp+0A8h+var_98], xmm5
    MOV rdi, rax
loc_62E2FD:
    MOVSD xmm5, [rsp+0A8h+var_58]
    MOV rsi, [rax+20h]
    SUBSD xmm5, xmm1
    MOVAPD xmm1, xmm5
    TEST rsi, rsi
    JS loc_62EF05
loc_62E318:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rsi
loc_62E321:
    SUBSD xmm0, [rsp+0A8h+var_98]
    UCOMISD xmm1, xmm0
    JBE def_62E2BB
loc_62E32D:
    MOVSD xmm5, [rsp+0A8h+var_60]
    MOVSD xmm0, qword ptr [rbp+0B0h]
    MOVAPD xmm1, xmm5
    MOVSD xmm7, [rsp+0A8h+var_50]
    ADDSD xmm1, xmm0
    UCOMISD xmm7, xmm1
    JA loc_62E8C8
loc_62E353:
    MOV rdx, [rax+28h]
    MOVAPD xmm1, xmm5
    SUBSD xmm1, xmm0
    TEST rdx, rdx
    JS loc_62EE81
loc_62E368:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rdx
loc_62E371:
    SUBSD xmm0, [rsp+0A8h+var_98]
    UCOMISD xmm1, xmm0
    JA loc_62E8C8
loc_62E381:
    MOV r11d, [rbp+34h]
    TEST r11d, r11d
    JNZ loc_62E746
loc_62E38E:
    PXOR xmm5, xmm5
    MOVSD [rsp+0A8h+var_50], xmm5
loc_62E398:
    MOVSD xmm0, qword ptr [rbp+0B0h]
    MOVSD xmm7, [rsp+0A8h+var_60]
    MOVAPD xmm1, xmm7
    SUBSD xmm7, xmm0
    ADDSD xmm1, xmm0
    MOVAPD xmm0, xmm7
loc_62E3B6:
    CMP dword ptr [rbx+4], 2
    MOV qword ptr [rbx+38h], 0
    MOV qword ptr [rbx+30h], 0
    MOV qword ptr [rbx+28h], 0
    JZ loc_62EE0B
loc_62E3D8:
    MOV r11d, [rbx+8]
    TEST r11d, r11d
    JNZ loc_62E7FA
loc_62E3E5:
    MOVSD [rsp+0A8h+x], xmm1
    CALL _ceil
    MOVSD xmm1, [rsp+0A8h+x]
    CVTTSD2SI r12, xmm0
    MOVAPD xmm0, xmm1
    CALL _floor
    PXOR xmm9, xmm9
    MOVSD xmm3, qword ptr [rbp+98h]
    CVTTSD2SI r13, xmm0
    MOVSD xmm0, qword ptr [rbp+0C0h]
    CVTSI2SD xmm9, r12
    MOVAPD xmm7, xmm3
    ADDSD xmm7, xmm3
    MOVAPD xmm1, xmm9
    SUBSD xmm1, [rsp+0A8h+var_60]
    MULSD xmm1, qword ptr [rbp+0C8h]
    ADDSD xmm1, [rsp+0A8h+var_58]
    SUBSD xmm1, xmm0
    ADDSD xmm0, xmm0
    MOVSD [rsp+0A8h+x], xmm1
    CVTTSD2SI r15, xmm0
    ADD r15, 1
    CMP r12, r13
    JG loc_62EDEC
loc_62E464:
    MOVSD xmm6, cs:qword_7346E8
    PXOR xmm5, xmm5
    XOR r14d, r14d
    MOVSD [rsp+0A8h+var_70], xmm5
    MOVSD xmm8, cs:qword_7346E0
    MOVSD [rsp+0A8h+var_68], xmm5
    MOVAPD xmm0, xmm1
    MOVSD [rsp+0A8h+var_98], xmm6
    MOVSD xmm6, cs:qword_74F8C8
    MOVSD [rsp+0A8h+var_48], xmm7
loc_62E4A0:
    MOVSD [rsp+0A8h+var_88], xmm9
    MOVSD [rsp+0A8h+var_90], xmm3
    MOVSD [rsp+0A8h+var_78], xmm8
    MOVSD [rsp+0A8h+var_80], xmm6
    CALL _ceil
    PXOR xmm2, xmm2
    MOV rcx, r15
    MOVSD xmm9, [rsp+0A8h+var_88]
    CVTTSD2SI rsi, xmm0
    MOV r9, [rbp+10h]
    MOV rdx, r12
    SUBSD xmm9, [rsp+0A8h+var_60]
    MOV r8d, 1
    MOVSD xmm3, [rsp+0A8h+var_90]
    MOVSD xmm1, qword ptr [rbp+0A0h]
    CVTSI2SD xmm2, rsi
    MOVSD xmm0, qword ptr [rbp+0A8h]
    SUBSD xmm2, [rsp+0A8h+var_58]
    MULSD xmm1, xmm9
    MULSD xmm0, xmm9
    MOV rdi, [rbp+0]
    MOVSD xmm4, [rsp+0A8h+x]
    MOVAPD xmm10, xmm2
    ADDSD xmm4, qword ptr [rbp+0C8h]
    MULSD xmm10, xmm3
    MULSD xmm9, xmm0
    MOVSD [rsp+0A8h+x], xmm4
    ADDSD xmm10, xmm1
    MULSD xmm10, xmm2
    ADDSD xmm2, xmm2
    ADDSD xmm2, [rsp+0A8h+var_98]
    MULSD xmm3, xmm2
    MOVAPD xmm0, xmm10
    ADDSD xmm0, xmm9
    ADDSD xmm1, xmm3
    MOVSD [rsp+0A8h+var_88], xmm0
    MOVSD [rsp+0A8h+var_90], xmm1
    CALL sub_408F00
    TEST rax, rax
    JZ loc_62E7C2
loc_62E578:
    TEST r15, r15
    MOVSD xmm6, [rsp+0A8h+var_80]
    MOVSD xmm8, [rsp+0A8h+var_78]
    JLE loc_62E71C
loc_62E58E:
    MOV rdi, [rbp+8]
    XOR edx, edx
    MOV r9, [rsp+0A8h+var_98]
    MOV r8, [rsp+0A8h+var_50]
    MOVSD xmm4, [rsp+0A8h+var_70]
    MOV rsi, [rdi+340h]
    MOVSD xmm5, [rsp+0A8h+var_68]
    MOVSD xmm7, [rsp+0A8h+var_48]
    MOVSD xmm0, [rsp+0A8h+var_88]
    SHL rsi, 2
    MOVSD xmm1, [rsp+0A8h+var_90]
    JMP loc_62E687
loc_62E5D0:
    MOV r10, [rcx+48h]
    PXOR xmm3, xmm3
    ADDSD xmm5, xmm2
    MOV r11d, [rbx+8]
    CVTSS2SD xmm3, dword ptr [rax+r10*4]
    MOVAPD xmm9, xmm3
    MULSD xmm9, xmm2
    ADDSD xmm9, qword ptr [rbx+48h]
    MOVSD qword ptr [rbx+48h], xmm9
    TEST r11d, r11d
    JZ loc_62E60D
loc_62E601:
    MULSD xmm3, cs:qword_748CD8
loc_62E609:
    MULSD xmm2, xmm3
loc_62E60D:
    MOV r10, [rcx+8]
    PXOR xmm3, xmm3
    CMP dword ptr [rbx+4], 2
    CVTSS2SD xmm3, dword ptr [rax+r10*4]
    MOV r10, [rcx+18h]
    MULSD xmm3, xmm2
    ADDSD xmm3, qword ptr [rbx+28h]
    MOVSD qword ptr [rbx+28h], xmm3
    PXOR xmm3, xmm3
    CVTSS2SD xmm3, dword ptr [rax+r10*4]
    MOV r10, [rcx+28h]
    MULSD xmm3, xmm2
    ADDSD xmm3, qword ptr [rbx+30h]
    MOVSD qword ptr [rbx+30h], xmm3
    PXOR xmm3, xmm3
    CVTSS2SD xmm3, dword ptr [rax+r10*4]
    MULSD xmm3, xmm2
    ADDSD xmm3, qword ptr [rbx+38h]
    MOVSD qword ptr [rbx+38h], xmm3
    JZ loc_62E6E0
loc_62E667:
    ADDSD xmm4, xmm2
    ADD r14, 1
loc_62E66F:
    ADD rdx, 1
    ADDSD xmm0, xmm1
    ADD rax, rsi
    ADDSD xmm1, xmm7
    CMP rdx, r15
    JZ loc_62E710
loc_62E687:
    UCOMISD xmm6, xmm0
    JBE loc_62E66F
loc_62E68D:
    CVTTSD2SI ecx, xmm0
    MOVSXD rcx, ecx
    MOVSD xmm2, qword ptr [rbp+rcx*8+0D0h]
    MOV rcx, [rdi+360h]
    MOV r10d, [rcx+44h]
    TEST r10d, r10d
    JNZ loc_62E5D0
loc_62E6B1:
    MOVAPD xmm3, xmm2
    MOV r10d, [rbx+8]
    ADDSD xmm5, xmm2
    MULSD xmm3, xmm8
    ADDSD xmm3, qword ptr [rbx+48h]
    MOVSD qword ptr [rbx+48h], xmm3
    TEST r10d, r10d
    JZ loc_62E60D
loc_62E6D5:
    MOVQ xmm3, r9
    JMP loc_62E609
loc_62E6E0:
    MOV r10d, [rcx+34h]
    MOVQ xmm3, r8
    TEST r10d, r10d
    JZ loc_62E6FB
loc_62E6EE:
    MOV rcx, [rcx+38h]
    PXOR xmm3, xmm3
    CVTSS2SD xmm3, dword ptr [rax+rcx*4]
loc_62E6FB:
    MULSD xmm3, xmm2
    ADDSD xmm3, qword ptr [rbx+40h]
    MOVSD qword ptr [rbx+40h], xmm3
    JMP loc_62E667
loc_62E710:
    MOVSD [rsp+0A8h+var_70], xmm4
    MOVSD [rsp+0A8h+var_68], xmm5
loc_62E71C:
    ADD r12, 1
    CMP r13, r12
    JL loc_62ED0F
loc_62E729:
    PXOR xmm9, xmm9
    MOVSD xmm3, qword ptr [rbp+98h]
    CVTSI2SD xmm9, r12
    MOVSD xmm0, [rsp+0A8h+x]
    JMP loc_62E4A0
loc_62E746:
    CMP ecx, 0Fh
    JBE loc_62ECB4
loc_62E74F:
    MOV esi, [rbp+3Ch]
    TEST esi, esi
    JZ loc_62EA90
loc_62E75A:
    MOV rax, [rbp+40h]
    MOV [rsp+0A8h+var_3C], 1
    MOV [rbx], rax
    MOV rax, [rbp+48h]
    MOV [rbx+8], rax
    MOV rax, [rbp+50h]
    MOV [rbx+10h], rax
    MOV rax, [rbp+58h]
    MOV [rbx+18h], rax
    MOV rax, [rbp+60h]
    MOV [rbx+20h], rax
    MOV rax, [rbp+68h]
    MOV [rbx+28h], rax
    MOV rax, [rbp+70h]
    MOV [rbx+30h], rax
    MOV rax, [rbp+78h]
    MOV [rbx+38h], rax
    MOV rax, [rbp+80h]
    MOV [rbx+40h], rax
    MOV rax, [rbp+88h]
    MOV [rbx+48h], rax
    MOV rax, [rbp+90h]
    MOV [rbx+50h], rax
loc_62E7C2:
    MOV eax, [rsp+0A8h+var_3C]
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    RETN 
loc_62E7D5:
    MOV edx, [rdi+28h]
    MOV rcx, rsi
    MOV rdi, [rdi+8]
    MOV r8, [rbp+10h]
loc_62E7E3:
    MOV rsi, [rbp+0]
loc_62E7E7:
    ADD rsp, 78h
    POP rbx
    POP rbp
    POP r12
    POP r13
    POP r14
    POP r15
    JMP sub_436980
loc_62E7FA:
    MOV qword ptr [rbx+48h], 0
    JMP loc_62E3E5
loc_62E807:
    MOV edi, [rdi+34h]
    TEST edi, edi
    JNZ loc_62ED06
loc_62E812:
    MOVAPD xmm5, xmm0
    MOVSD xmm0, qword ptr [rbp+0B8h]
    PXOR xmm6, xmm6
    MOVSD [rsp+0A8h+var_50], xmm6
    MOVAPD xmm1, xmm5
    ADDSD xmm1, xmm0
    UCOMISD xmm6, xmm1
    JA loc_62ED06
loc_62E83A:
    MOV rdi, [rbp+8]
    MOVAPD xmm1, xmm5
    SUBSD xmm1, xmm0
    MOV rdx, [rdi+20h]
    TEST rdx, rdx
    JS loc_62EE63
loc_62E853:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rdx
loc_62E85C:
    MOVSD xmm7, cs:qword_7346E8
    SUBSD xmm0, xmm7
    MOVSD [rsp+0A8h+var_98], xmm7
    UCOMISD xmm1, xmm0
    JA loc_62E8C8
loc_62E874:
    MOVSD xmm5, [rsp+0A8h+var_60]
    MOVSD xmm0, qword ptr [rbp+0B0h]
    MOVAPD xmm1, xmm5
    MOVSD xmm6, [rsp+0A8h+var_50]
    ADDSD xmm1, xmm0
    UCOMISD xmm6, xmm1
    JA loc_62E8C8
loc_62E896:
    MOV rdx, [rdi+28h]
    SUBSD xmm5, xmm0
    MOVAPD xmm0, xmm5
    TEST rdx, rdx
    JS loc_62EFB0
loc_62E8AB:
    PXOR xmm2, xmm2
    CVTSI2SD xmm2, rdx
loc_62E8B4:
    SUBSD xmm2, [rsp+0A8h+var_98]
    UCOMISD xmm0, xmm2
    JBE loc_62E3B6
loc_62E8C4:
    NOP dword ptr [rax+00h]
loc_62E8C8:
    MOV r8, [rbp+10h]
    MOV rcx, rbx
    MOVSD xmm1, [rsp+0A8h+var_60]
    MOVSD xmm0, [rsp+0A8h+var_58]
loc_62E8DB:
    MOV edx, 8
    JMP loc_62E7E3
loc_62E8E5:
    MOVSD xmm3, qword ptr [rdi+0B8h]
    MOVSD xmm0, [rsp+0A8h+var_58]
    MOVSD xmm2, cs:qword_83FE48
    ADDSD xmm0, xmm3
    UCOMISD xmm2, xmm0
    JA loc_62ECEC
loc_62E909:
    MOV rax, [rdi+8]
    MOVSD xmm1, cs:qword_751DF0
    MOV rdi, rax
loc_62E918:
    MOVSD xmm5, [rsp+0A8h+var_58]
    MOV rcx, [rax+20h]
    SUBSD xmm5, xmm3
    MOVAPD xmm3, xmm5
    TEST rcx, rcx
    JS loc_62EF23
loc_62E933:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rcx
loc_62E93C:
    ADDSD xmm0, xmm1
    UCOMISD xmm3, xmm0
    JBE loc_62E992
loc_62E946:
    MOVSD xmm5, [rsp+0A8h+var_60]
    MOVSD xmm0, qword ptr [rbp+0B0h]
    MOVAPD xmm3, xmm5
    ADDSD xmm3, xmm0
    UCOMISD xmm2, xmm3
    JA loc_62E8C8
loc_62E966:
    MOV rcx, [rax+28h]
    MOVAPD xmm2, xmm5
    SUBSD xmm2, xmm0
    TEST rcx, rcx
    JS loc_62EF74
loc_62E97B:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rcx
loc_62E984:
    ADDSD xmm0, xmm1
    UCOMISD xmm2, xmm0
    JA loc_62E8C8
loc_62E992:
    MOV edx, [rbp+34h]
    TEST edx, edx
    JZ loc_62EE54
loc_62E99D:
    MOV r8, [rbp+10h]
    MOV rcx, rbx
    MOV edx, 1
    MOV rdi, rax
    MOVSD xmm1, [rsp+0A8h+var_60]
    MOVSD xmm0, [rsp+0A8h+var_58]
    MOV rsi, [rbp+0]
    JMP loc_62E7E7
loc_62E9C1:
    MOVSD xmm5, [rsp+0A8h+var_58]
    PXOR xmm4, xmm4
    MOVSD [rsp+0A8h+var_50], xmm4
    MOVSD xmm0, qword ptr [rdi+0B8h]
    MOVAPD xmm1, xmm5
    ADDSD xmm1, xmm0
    UCOMISD xmm4, xmm1
    JA loc_62ED06
loc_62E9EB:
    MOV rdi, [rdi+8]
    MOVAPD xmm1, xmm5
    SUBSD xmm1, xmm0
    MOV rdx, [rdi+20h]
    TEST rdx, rdx
    JS loc_62EA72
loc_62EA00:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rdx
loc_62EA09:
    SUBSD xmm0, cs:qword_7346E8
    UCOMISD xmm1, xmm0
    JA loc_62E8C8
loc_62EA1B:
    MOV esi, [rbp+34h]
    TEST esi, esi
    JZ loc_62E398
loc_62EA26:
    MOV eax, 1
    SHL rax, cl
    JMP loc_62ECC7
loc_62EA33:
    MOVSD xmm5, [rsp+0A8h+var_60]
    PXOR xmm7, xmm7
    MOVSD [rsp+0A8h+var_50], xmm7
    MOVSD xmm0, qword ptr [rdi+0B0h]
    MOVAPD xmm1, xmm5
    ADDSD xmm1, xmm0
    UCOMISD xmm7, xmm1
    JA loc_62ED06
loc_62EA5D:
    MOV rdi, [rdi+8]
    MOVAPD xmm1, xmm5
    SUBSD xmm1, xmm0
    MOV rdx, [rdi+28h]
    TEST rdx, rdx
    JNS loc_62EA00
loc_62EA72:
    MOV rax, rdx
    AND edx, 1
    PXOR xmm0, xmm0
    SHR rax, 1
    OR rax, rdx
    CVTSI2SD xmm0, rax
    ADDSD xmm0, xmm0
    JMP loc_62EA09
loc_62EA90:
    MOV rdi, [rbp+8]
    LEA rsi, [rbp+40h]
    CALL sub_426950
    MOV rdi, [rbp+8]
    MOV ecx, 2
    MOV dword ptr [rbp+3Ch], 1
    MOV r8, [rbp+10h]
    MOV edx, 1
    MOV esi, 1
    CALL sub_636410
    MOV r13, rax
    TEST rax, rax
    JZ loc_62E75A
loc_62EACC:
    MOV rsi, r12
    MOV rdi, rax
    CALL sub_551B20
    MOV r9, [rbp+10h]
    XOR edx, edx
    XOR esi, esi
    MOV r8d, 1
    MOV ecx, 1
    MOV rdi, rax
    MOV r12, rax
    CALL sub_408F00
    TEST rax, rax
    JZ loc_62EF5F
loc_62EAFE:
    MOV rdx, [rbp+8]
    PXOR xmm7, xmm7
    PXOR xmm6, xmm6
    MOV ecx, [rdx]
    MOVSD xmm0, qword ptr [rdx+298h]
    MOVSD qword ptr [rbp+50h], xmm0
    MOV [rbp+40h], ecx
    MOV ecx, [rdx+4]
    MOV [rbp+44h], ecx
    MOV rcx, [rdx+30h]
    MOV rdx, [rdx+360h]
    MOV [rbp+58h], rcx
    MOV rcx, [rdx+8]
    CVTSS2SD xmm7, dword ptr [rax+rcx*4]
    MOV rcx, [rdx+18h]
    MOVSD qword ptr [rbp+68h], xmm7
    PXOR xmm7, xmm7
    CVTSS2SD xmm6, dword ptr [rax+rcx*4]
    MOV rcx, [rdx+28h]
    MOVSD qword ptr [rbp+70h], xmm6
    MOV qword ptr [rbp+80h], 0
    CVTSS2SD xmm7, dword ptr [rax+rcx*4]
    MOV ecx, [rdx+34h]
    MOVSD qword ptr [rbp+78h], xmm7
    TEST ecx, ecx
    JZ loc_62EB86
loc_62EB71:
    MOV rcx, [rdx+38h]
    PXOR xmm6, xmm6
    CVTSS2SD xmm6, dword ptr [rax+rcx*4]
    MOVSD qword ptr [rbp+80h], xmm6
loc_62EB86:
    MOV r15d, [rdx+44h]
    MOV dword ptr [rbp+48h], 0
    MOVSD xmm7, cs:qword_7346E0
    MOVSD qword ptr [rbp+88h], xmm7
    TEST r15d, r15d
    JZ loc_62EBC2
loc_62EBA6:
    MOV rcx, [rdx+48h]
    PXOR xmm5, xmm5
    MOV dword ptr [rbp+48h], 4
    CVTSS2SD xmm5, dword ptr [rax+rcx*4]
    MOVSD qword ptr [rbp+88h], xmm5
loc_62EBC2:
    MOV qword ptr [rbp+90h], 0
    MOV r14d, [rdx+54h]
    TEST r14d, r14d
    JZ loc_62EBEB
loc_62EBD6:
    MOV rdx, [rdx+58h]
    PXOR xmm6, xmm6
    CVTSS2SD xmm6, dword ptr [rax+rdx*4]
    MOVSD qword ptr [rbp+90h], xmm6
loc_62EBEB:
    MOV rdi, r12
    MOV qword ptr [rbp+60h], 0
    CALL sub_551EB0
    MOV rdi, r13
    CALL sub_40CDC0
    CMP dword ptr [rbp+2Ch], 10h
    JNZ loc_62E75A
loc_62EC0D:
    MOV rax, [rbp+8]
    MOVSD xmm6, qword ptr [rbp+88h]
    MOVSD xmm0, cs:qword_748CD8
    MOVAPD xmm2, xmm6
    MOVSD xmm4, qword ptr [rbp+70h]
    MOVSD xmm1, qword ptr [rax+0E8h]
    MULSD xmm2, xmm0
    MOVSD xmm3, qword ptr [rax+0D0h]
    MULSD xmm0, xmm1
    MOVSD xmm5, qword ptr [rbp+78h]
    ADDSD xmm1, xmm6
    MULSD xmm1, cs:qword_7346F0
    MULSD xmm4, xmm2
    MULSD xmm5, xmm2
    MULSD xmm3, xmm0
    ADDSD xmm4, xmm3
    MOVSD xmm3, qword ptr [rax+0D8h]
    MULSD xmm3, xmm0
    ADDSD xmm3, xmm5
    MOVAPD xmm5, xmm2
    ADDSD xmm5, xmm0
    MULSD xmm2, qword ptr [rbp+68h]
    MULSD xmm0, qword ptr [rax+0C8h]
    MOVSD qword ptr [rbp+88h], xmm1
    DIVSD xmm4, xmm5
    ADDSD xmm0, xmm2
    DIVSD xmm3, xmm5
    MOVSD qword ptr [rbp+70h], xmm4
    DIVSD xmm0, xmm5
    MOVSD qword ptr [rbp+78h], xmm3
    MOVSD qword ptr [rbp+68h], xmm0
    JMP loc_62E75A
loc_62ECB4:
    MOV eax, 1
    SHL rax, cl
    TEST eax, 0C00Dh
    JNZ loc_62EFCE
loc_62ECC7:
    TEST ah, 30h
    JZ loc_62E74F
loc_62ECD0:
    MOVSD xmm1, cs:qword_748E18
    MOV rcx, rbx
    MOV rdi, [rbp+8]
    MOV r8, [rbp+10h]
    MOVAPD xmm0, xmm1
    JMP loc_62E8DB
loc_62ECEC:
    MOVSD xmm0, qword ptr [rdi+0B0h]
    MOVAPD xmm4, xmm1
    ADDSD xmm1, xmm0
    UCOMISD xmm2, xmm1
    JBE loc_62EE18
loc_62ED06:
    MOV rdi, [rbp+8]
    JMP loc_62E8C8
loc_62ED0F:
    MOVSD xmm4, [rsp+0A8h+var_70]
    MOVSD xmm5, [rsp+0A8h+var_68]
    TEST r14, r14
    JZ loc_62EDEC
loc_62ED24:
    MOVSD xmm0, cs:qword_748DA0
    UCOMISD xmm0, xmm5
    JNB loc_62EDEC
loc_62ED36:
    UCOMISD xmm0, xmm4
    JNB loc_62EDEC
loc_62ED40:
    MOV ebp, [rbx+8]
    TEST ebp, ebp
    JZ loc_62ED67
loc_62ED47:
    MOVSD xmm0, [rsp+0A8h+var_98]
    PXOR xmm7, xmm7
    DIVSD xmm0, xmm5
    MULSD xmm0, qword ptr [rbx+48h]
    CVTSD2SS xmm0, xmm0
    CVTSS2SD xmm7, xmm0
    MOVSD qword ptr [rbx+48h], xmm7
loc_62ED67:
    PXOR xmm5, xmm5
    PXOR xmm6, xmm6
    CMP dword ptr [rbx+4], 2
    PXOR xmm7, xmm7
    MOVSD xmm0, [rsp+0A8h+var_98]
    MOV [rsp+0A8h+var_3C], 1
    MOVSD xmm1, qword ptr [rbx+28h]
    DIVSD xmm0, xmm4
    MULSD xmm1, xmm0
    CVTSD2SS xmm1, xmm1
    CVTSS2SD xmm5, xmm1
    MOVSD xmm1, qword ptr [rbx+30h]
    MOVSD qword ptr [rbx+28h], xmm5
    MULSD xmm1, xmm0
    CVTSD2SS xmm1, xmm1
    CVTSS2SD xmm6, xmm1
    MOVSD xmm1, qword ptr [rbx+38h]
    MOVSD qword ptr [rbx+30h], xmm6
    MULSD xmm1, xmm0
    CVTSD2SS xmm1, xmm1
    CVTSS2SD xmm7, xmm1
    MOVSD qword ptr [rbx+38h], xmm7
    JNZ loc_62E7C2
loc_62EDD1:
    MULSD xmm0, qword ptr [rbx+40h]
    PXOR xmm5, xmm5
    CVTSD2SS xmm0, xmm0
    CVTSS2SD xmm5, xmm0
    MOVSD qword ptr [rbx+40h], xmm5
    JMP loc_62E7C2
loc_62EDEC:
    MOV edx, [rbp+28h]
    MOV rcx, rbx
    MOV rdi, [rbp+8]
    MOV r8, [rbp+10h]
    MOVSD xmm1, [rsp+0A8h+var_60]
    MOVSD xmm0, [rsp+0A8h+var_58]
    JMP loc_62E7E3
loc_62EE0B:
    MOV qword ptr [rbx+40h], 0
    JMP loc_62E3D8
loc_62EE18:
    MOV rax, [rdi+8]
    SUBSD xmm4, xmm0
    MOV rcx, [rax+28h]
    MOV rdi, rax
    TEST rcx, rcx
    JS loc_62EF41
loc_62EE30:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rcx
loc_62EE39:
    MOVSD xmm1, cs:qword_751DF0
    ADDSD xmm0, xmm1
    UCOMISD xmm4, xmm0
    JA loc_62E8C8
loc_62EE4F:
    JMP loc_62E918
loc_62EE54:
    PXOR xmm6, xmm6
    MOVSD [rsp+0A8h+var_50], xmm6
    JMP loc_62E398
loc_62EE63:
    MOV rax, rdx
    AND edx, 1
    PXOR xmm0, xmm0
    SHR rax, 1
    OR rax, rdx
    CVTSI2SD xmm0, rax
    ADDSD xmm0, xmm0
    JMP loc_62E85C
loc_62EE81:
    MOV rax, rdx
    AND edx, 1
    PXOR xmm0, xmm0
    SHR rax, 1
    OR rax, rdx
    CVTSI2SD xmm0, rax
    ADDSD xmm0, xmm0
    JMP loc_62E371
loc_62EE9F:
    MOVSD xmm5, [rsp+0A8h+var_60]
    MOVSD xmm0, qword ptr [rdi+0B0h]
    MOVAPD xmm2, xmm5
    ADDSD xmm2, xmm0
    UCOMISD xmm7, xmm2
    JA loc_62ED06
loc_62EEBF:
    MOV rax, [rdi+8]
    MOVAPD xmm2, xmm5
    SUBSD xmm2, xmm0
    MOV rsi, [rax+28h]
    MOV rdi, rax
    TEST rsi, rsi
    JS loc_62EF92
loc_62EEDB:
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, rsi
loc_62EEE4:
    MOVSD xmm5, cs:qword_7346E8
    SUBSD xmm0, xmm5
    MOVSD [rsp+0A8h+var_98], xmm5
    UCOMISD xmm2, xmm0
    JA loc_62E8C8
loc_62EF00:
    JMP loc_62E2FD
loc_62EF05:
    MOV rdx, rsi
    AND esi, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rsi
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_62E321
loc_62EF23:
    MOV rdx, rcx
    AND ecx, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rcx
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_62E93C
loc_62EF41:
    MOV rdx, rcx
    AND ecx, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rcx
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_62EE39
loc_62EF5F:
    MOV rdi, r12
    CALL sub_551EB0
    MOV rdi, r13
    CALL sub_40CDC0
    JMP loc_62E75A
loc_62EF74:
    MOV rdx, rcx
    AND ecx, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rcx
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_62E984
loc_62EF92:
    MOV rdx, rsi
    AND esi, 1
    PXOR xmm0, xmm0
    SHR rdx, 1
    OR rdx, rsi
    CVTSI2SD xmm0, rdx
    ADDSD xmm0, xmm0
    JMP loc_62EEE4
loc_62EFB0:
    MOV rax, rdx
    AND edx, 1
    PXOR xmm2, xmm2
    SHR rax, 1
    OR rax, rdx
    CVTSI2SD xmm2, rax
    ADDSD xmm2, xmm2
    JMP loc_62E8B4
loc_62EFCE:
    MOV rax, [rbp+8]
    JMP loc_62E99D
loc_62EFD7:
    MOV ecx, offset aResamplepixelc
    MOV edx, 149h
    MOV esi, offset aMagickcoreResa_0
    MOV edi, offset aResampleFilter_0
    CALL ___assert_fail
loc_62EFF0:
    MOV ecx, offset aResamplepixelc
    MOV edx, 148h
    MOV esi, offset aMagickcoreResa_0
    MOV edi, offset aResampleFilter_1
    CALL ___assert_fail
```
Output:_62E5EB:
    MOV r11d, [rbx+4]
    TEST r11d, r11d
    JZ loc_62E60D
loc_62E5F8:
    ADD r11d, 1
    MOVSD xmm5, [rbx+48h]
    SUBSD xmm5, [rbx+20h]
    MULSD xmm5, qword ptr [rbx+40h]
    ADDSD xmm5, [rbx+28h]
    MOVSD [rbx+20h], xmm5
    MOVSD [rbx+28h], qword ptr [rbx+40h]
    MOVSD [rbx+40h], qword ptr [rbx+48h]
    MOVSD [rbx+48h], xmm5
    MOV r10, [rcx+48h]
    ADDSD xmm3, xmm2
    MOV r11d, [rbx+8]
    CVTSS2SD xmm3, dword ptr [rax+r10*4]
    MOVAPD xmm9, xmm3
    MULSD xmm9, xmm2
    ADDSD xmm9, qword ptr [rbx+48h]
    MOVSD qword ptr [rbx+48h], xmm9
    TEST r11d, r11d
    JZ loc_62E60D
loc_62E61C:
    INC r14d
    CMP r14d, r15
    JB loc_62E4A0
    JMP loc_62E71C
loc_62E687:
    MOV r11d, [rbx+8]
    CVTSS2SD xmm3, dword ptr [rsi+rcx*4]
    MOVAPD xmm9, xmm3
    MULSD xmm9, xmm2
    ADDSD xmm9, qword ptr [rbx+48h]
    MOVSD qword ptr [rbx+48h], xmm9
    TEST r11d, r11d
    JZ loc_62E60D
loc_62E69C:
    MOV r11d
############
```assembly
loc_A9ADF0:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "External Reference"
}
```
############
```assembly
loc_447F60:
    PUSH r12
    PUSH rbp
    MOV r12, rdx
    PUSH rbx
    MOV rbx, rsi
    SUB rsp, 0D0h
    TEST al, al
    MOV [rsp+0E8h+var_B0], rcx
    MOV [rsp+0E8h+var_A8], r8
    MOV [rsp+0E8h+var_A0], r9
    JZ loc_447FBB
loc_447F84:
    MOVAPS [rsp+0E8h+var_98], xmm0
    MOVAPS [rsp+0E8h+var_88], xmm1
    MOVAPS [rsp+0E8h+var_78], xmm2
    MOVAPS [rsp+0E8h+var_68], xmm3
    MOVAPS [rsp+0E8h+var_58], xmm4
    MOVAPS [rsp+0E8h+var_48], xmm5
    MOVAPS [rsp+0E8h+var_38], xmm6
    MOVAPS [rsp+0E8h+var_28], xmm7
loc_447FBB:
    MOV rax, fs:28h
    MOV [rsp+0E8h+var_D0], rax
    XOR eax, eax
    LEA rax, [rsp+0E8h+arg_0]
    MOV ecx, offset unk_74FF22
    MOV edx, edi
    MOV esi, offset off_7102C9
    MOV rdi, rbx
    MOV [rsp+0E8h+var_E0], rax
    LEA rax, [rsp+0E8h+var_C8]
    MOV [rsp+0E8h+var_E8], 18h
    MOV [rsp+0E8h+var_E4], 30h
    MOV [rsp+0E8h+var_D8], rax
    XOR eax, eax
    CALL sub_4BE130
    MOV rdx, rsp
    MOV ebp, eax
    MOV rsi, r12
    MOV rdi, rbx
    CALL sub_4BE040
    ADD eax, ebp
    MOV rcx, [rsp+0E8h+var_D0]
    XOR rcx, fs:28h
    JNZ loc_448035
loc_448029:
    ADD rsp, 0D0h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_448035:
    CALL sub_64A0B0
```
Output:```json
{
  "input_parameter_count": 5,
  "input_parameter_types": [
    "Integer",
    "Pointer",
    "Pointer",
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 4,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": true,
  "presence_of_notable_integer_constants": [
    "0xD0",
    "0x18",
    "0x30"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 11,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Interfacing/Wrapper"
}
```
############
```assembly
loc_468860:
    PUSH rbx
    MOV rbx, rdi
    SUB rsp, 40h
    MOV rax, fs:28h
    MOV [rsp+48h+var_10], rax
    XOR eax, eax
    CMP qword ptr [rdi+30h], 0
    JZ loc_4689A0
loc_468883:
    MOV esi, 0FFFFFFFFh
    MOV rdi, rbx
    CALL sub_47E260
    MOV rax, [rbx+8]
    XOR esi, esi
    MOV rdi, rbx
    CALL qword ptr [rax+60h]
    MOV eax, [rbx+38h]
    TEST eax, eax
    JNZ loc_468978
loc_4688A7:
    MOV rdi, rbx
    CALL sub_47E150
    TEST eax, eax
    JZ loc_468958
loc_4688B7:
    TEST byte ptr [rbx+519h], 1
    JNZ loc_4688E0
loc_4688C0:
    MOV rdi, rbx
    CALL qword ptr [rbx+30h]
loc_4688C6:
    MOV rcx, [rsp+48h+var_10]
    XOR rcx, fs:28h
    JNZ loc_468B2D
loc_4688DA:
    ADD rsp, 40h
    POP rbx
    RETN 
loc_4688E0:
    CALL sub_4B8D90
    TEST rax, rax
    JNZ loc_4688C0
loc_4688EA:
    MOV rsi, [rbx+16F0h]
    MOV [rsp+48h+var_38], rbx
    TEST rsi, rsi
    JZ loc_468B0D
loc_4688FF:
    LEA rdi, [rbx+16E8h]
    LEA r8, [rsp+48h+var_38]
    LEA rdx, [rsp+48h+var_3C]
    MOV r9d, 28h
    MOV ecx, offset sub_465EC0
    CALL sub_4B8980
    CMP eax, 1
    JZ loc_468AFC
loc_468929:
    JLE loc_468A87
loc_46892F:
    CMP eax, 2
    JZ loc_468ABB
loc_468938:
    CMP eax, 3
    JNZ loc_468ACC
loc_468941:
    MOV qword ptr [rbx+16E8h], 0
    MOV eax, [rsp+48h+var_3C]
    JMP loc_4688C6
loc_468958:
    MOV rdi, rbx
    CALL sub_47E180
    TEST eax, eax
    JNZ loc_4688B7
loc_468968:
    MOV eax, 1
    JMP loc_4688C6
loc_468978:
    MOV rdi, [rbx+578h]
    MOV edx, 0D1Fh
    MOV esi, offset aSslSslLibC
    CALL sub_535410
    MOV qword ptr [rbx+578h], 0
    JMP loc_4688A7
loc_4689A0:
    MOV dword ptr [rdi+38h], 0
    MOV dword ptr [rdi+44h], 0
    CALL sub_47E1A0
    MOV rax, [rbx+8]
    MOV rdi, [rbx+3A8h]
    MOV rax, [rax+30h]
    TEST rdi, rdi
    MOV [rbx+30h], rax
    JZ loc_4689DB
loc_4689CB:
    CALL sub_51E070
    MOV qword ptr [rbx+3A8h], 0
loc_4689DB:
    MOV rdi, [rbx+3D8h]
    TEST rdi, rdi
    JZ loc_4689F7
loc_4689E7:
    CALL sub_51E070
    MOV qword ptr [rbx+3D8h], 0
loc_4689F7:
    MOV rdi, [rbx+3D0h]
    CALL sub_4E14A0
    MOV rdi, [rbx+3C8h]
    MOV qword ptr [rbx+3D0h], 0
    CALL sub_4E14A0
    MOV rdi, [rbx+3C0h]
    MOV qword ptr [rbx+3C8h], 0
    CALL sub_514F70
    MOV rdi, [rbx+3F0h]
    MOV qword ptr [rbx+3C0h], 0
    CALL sub_514F70
    CMP qword ptr [rbx+30h], 0
    MOV qword ptr [rbx+3F0h], 0
    JNZ loc_468883
loc_468A5E:
    MOV r8d, 0D15h
    MOV ecx, offset aSslSslLibC
    MOV edx, 90h
    MOV esi, 0B4h
    MOV edi, 14h
    CALL sub_50BF00
    MOV eax, 0FFFFFFFFh
    JMP loc_4688C6
loc_468A87:
    TEST eax, eax
    JNZ loc_468ACC
loc_468A8B:
    MOV dword ptr [rbx+28h], 1
    MOV r8d, 64Ah
    MOV ecx, offset aSslSslLibC
    MOV edx, 195h
    MOV esi, 185h
    MOV edi, 14h
    CALL sub_50BF00
    MOV eax, 0FFFFFFFFh
    JMP loc_4688C6
loc_468ABB:
    MOV dword ptr [rbx+28h], 5
    MOV eax, 0FFFFFFFFh
    JMP loc_4688C6
loc_468ACC:
    MOV dword ptr [rbx+28h], 1
    MOV r8d, 657h
    MOV ecx, offset aSslSslLibC
    MOV edx, 44h
    MOV esi, 185h
    MOV edi, 14h
    CALL sub_50BF00
    MOV eax, 0FFFFFFFFh
    JMP loc_4688C6
loc_468AFC:
    MOV dword ptr [rbx+28h], 6
    MOV eax, 0FFFFFFFFh
    JMP loc_4688C6
loc_468B0D:
    CALL sub_4B8E60
    TEST rax, rax
    MOV rsi, rax
    MOV [rbx+16F0h], rax
    JNZ loc_4688FF
loc_468B25:
    OR eax, 0FFFFFFFFh
    JMP loc_4688C6
loc_468B2D:
    CALL sub_64A0B0
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 22,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0xFFFFFFFF",
    "0xD1F",
    "0x14",
    "0xD15",
    "0x64A",
    "0x5",
    "0x657",
    "0x44"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 17,
  "string_literal_presence": true,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": true,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Library/Utility"
}
```
############
```assembly
loc_5236B0:
    MOV [rdi+28h], rsi
    MOV eax, 1
    RETN 
```
Output:```json
{
  "input_parameter_count": 2,
  "input_parameter_types": [
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x1",
    "0x28"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 3,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Memory Manipulation"
}
```
############
```assembly
loc_657D28:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Undefined/Unknown"
}
```
############
```assembly
loc_657DF8:
    EXTRN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Void",
  "dominant_operation_categories": [
    "ExternalReference"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Initialization/Setup"
}
```
############
```assembly
loc_4018D0:
    JMP cs:off_6570A0
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "JumpTable"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x6570A0"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow"
}
```
############
```assembly
loc_40C9D0:
    PUSH rbp
    PUSH rbx
    MOV rcx, rsi
    MOV rbx, rdi
    MOV r8, rdx
    LEA rdx, [rdi+0Ch]
    SUB rsp, 8
    MOV esi, [rdi+8]
    MOV rdi, [rdi]
    CALL sub_40B7B0
    MOVSXD rdx, dword ptr [rbx+8]
    MOV [rbx], rax
    LEA rdi, [rax+rdx]
    MOV rbp, rdx
    CALL _strlen
    ADD eax, ebp
    MOV [rbx+8], eax
    ADD rsp, 8
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "input_parameter_count": 3,
  "input_parameter_types": [
    "Pointer",
    "Pointer",
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "Arithmetic"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 2,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "String Concatenation",
  "inferred_category": "Utility"
}
```
############
```assembly
loc_445910:
    PUSH rbp
    PUSH rbx
    MOV rbp, rdi
    SUB rsp, 8
    CALL sub_4253E0
    MOV rbx, rax
    MOVZX eax, word ptr [rax+8]
    TEST al, 12h
    JZ loc_445958
loc_445929:
    TEST ah, 40h
    JNZ loc_445968
loc_44592E:
    OR eax, 10h
    MOV [rbx+8], ax
    MOV eax, [rbx+0Ch]
    TEST eax, eax
    JZ loc_445980
loc_44593C:
    MOV rbx, [rbx+10h]
loc_445940:
    MOV rdi, rbp
    CALL sub_425330
    ADD rsp, 8
    MOV rax, rbx
    POP rbx
    POP rbp
    RETN 
loc_445958:
    MOV rdi, rbx
    CALL sub_4435B0
    MOV rbx, rax
    JMP loc_445940
loc_445968:
    MOV rdi, rbx
    CALL sub_43C550
    TEST eax, eax
    JNZ loc_445980
loc_445974:
    MOVZX eax, word ptr [rbx+8]
    JMP loc_44592E
loc_445980:
    XOR ebx, ebx
    JMP loc_445940
```
Output:```json
{
  "input_parameter_count": 1,
  "input_parameter_types": [
    "Pointer"
  ],
  "return_value_type": "Integer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": true,
  "number_of_distinct_subroutine_call_targets": 3,
  "use_of_indexed_addressing_modes": true,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x12",
    "0x40",
    "0x10",
    "0x8"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 6,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": true,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": true,
  "likely_performs_error_handling": true,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Control Flow"
}
```
############
```assembly
loc_44B930:
    PUSH rbp
    PUSH rbx
    SUB rsp, 8
    MOV rbx, cs:qword_6E42A0
    MOV rbp, cs:qword_6E4300
    TEST rbx, rbx
    JZ loc_44B962
loc_44B949:
    MOV rdi, rbx
    CALL cs:qword_6E3AE8
    MOV rbp, cs:qword_6E4300
    MOV rdi, rbx
    CALL cs:qword_6E3AF8
loc_44B962:
    ADD rsp, 8
    MOV rax, rbp
    POP rbx
    POP rbp
    RETN 
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "Pointer",
  "dominant_operation_categories": [
    "DataMovement",
    "SubroutineCall",
    "ConditionalBranching"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 2,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": false,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 0,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": true,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "Initialization/Setup"
}
```
############
```assembly
loc_43D880:
    PUSH r12
    PUSH rbp
    MOV r8, rdi
    PUSH rbx
    MOV ecx, 7
    MOV rbp, rsi
    MOV r12, rdx
    SUB rsp, 0B0h
    LEA rbx, [rsp+0C8h+var_58]
    MOV rax, fs:28h
    MOV [rsp+0C8h+var_20], rax
    XOR eax, eax
    MOV rdi, rbx
    REP 
    MOV rax, [r8]
    MOV [rsp+0C8h+var_B8], rax
    MOV rax, [r8+8]
    MOV [rsp+0C8h+var_B0], rax
    MOV rax, [r8+10h]
    MOV [rsp+0C8h+var_A8], rax
    MOV rax, [r8+18h]
    MOV [rsp+0C8h+var_A0], rax
    MOV rax, [r8+20h]
    MOV [rsp+0C8h+var_98], rax
    MOV rax, [r8+28h]
    MOV esi, eax
    MOV [rsp+0C8h+var_90], rax
    SHR esi, 10h
    TEST sil, sil
    JZ loc_43DB30
loc_43D8FA:
    CMP byte ptr [rsp+0C8h+var_90+3], 0
    JZ loc_43DA30
loc_43D905:
    MOV eax, dword ptr [rsp+0C8h+var_B0]
    SUB eax, 7B3h
    CMP eax, 42h
    JBE loc_43DA10
loc_43D917:
    PXOR xmm0, xmm0
    MOV dword ptr [rsp+0C8h+var_B0], 7D0h
    MOV dword ptr [rsp+0C8h+var_B0+4], 1
    MOV dword ptr [rsp+0C8h+var_A8], 1
    MOV dword ptr [rsp+0C8h+var_A8+4], 0
    MOV dword ptr [rsp+0C8h+var_A0], 0
loc_43D943:
    LEA rdi, [rsp+0C8h+var_B8]
    MOVSD [rsp+0C8h+var_98], xmm0
    MOV dword ptr [rsp+0C8h+var_A0+4], 0
    MOV byte ptr [rsp+0C8h+var_90], 0
    CALL sub_41AEA0
    MOV rcx, [rsp+0C8h+var_B8]
    MOV rdx, 20C49BA5E353F7CFh
    MOV esi, cs:dword_6E3A64
    MOV rax, rcx
    SAR rcx, 3Fh
    IMUL rdx
    MOV rax, 0FFFFFFCEE75C96C0h
    SAR rdx, 7
    SUB rdx, rcx
    ADD rdx, rax
    TEST esi, esi
    MOV [rsp+0C8h+timer], rdx
    JNZ loc_43DAF0
loc_43D9A0:
    LEA rdi, [rsp+0C8h+timer]
    CALL _localtime
    MOV edx, cs:dword_6E3C08
    TEST edx, edx
    JNZ loc_43D9BD
loc_43D9B4:
    TEST rax, rax
    JNZ loc_43DC6C
loc_43D9BD:
    MOV rdi, [rbp+0]
    MOV dword ptr [rbp+24h], 1
    MOV ecx, 1
    MOV byte ptr [rbp+29h], 1
    MOV edx, 0FFFFFFFFh
    MOV esi, offset aLocalTimeUnava
    CALL sub_43D680
    MOV dword ptr [r12], 1
    XOR eax, eax
loc_43D9EA:
    MOV rbx, [rsp+0C8h+var_20]
    XOR rbx, fs:28h
    JNZ loc_43DC59
loc_43DA01:
    ADD rsp, 0B0h
    POP rbx
    POP rbp
    POP r12
    RETN 
loc_43DA10:
    MOVSD xmm0, cs:qword_4CC7C0
    ADDSD xmm0, [rsp+0C8h+var_98]
    CVTTSD2SI eax, xmm0
    PXOR xmm0, xmm0
    CVTSI2SD xmm0, eax
    JMP loc_43D943
loc_43DA30:
    CMP byte ptr [rsp+0C8h+var_90], 0
    JZ loc_43DB40
loc_43DA3B:
    MOV rax, [rsp+0C8h+var_B8]
    MOV rdx, 636BA875FD33DC87h
    MOV byte ptr [rsp+0C8h+var_90+1], 0
    PXOR xmm1, xmm1
    MOV byte ptr [rsp+0C8h+var_90+3], 1
    PXOR xmm2, xmm2
    LEA rcx, [rax+2932E00h]
    PXOR xmm0, xmm0
    MOV rax, rcx
    IMUL rdx
    MOV rax, rcx
    SAR rax, 3Fh
    SAR rdx, 19h
    SUB rdx, rax
    IMUL rdx, 5265C00h
    SUB rcx, rdx
    MOV edx, 91A2B3C5h
    CVTSI2SD xmm1, ecx
    DIVSD xmm1, cs:qword_4CC768
    CVTTSD2SI esi, xmm1
    MOV eax, esi
    CVTSI2SD xmm2, esi
    IMUL edx
    MOV eax, esi
    SAR eax, 1Fh
    LEA ecx, [rdx+rsi]
    MOV edx, 88888889h
    SAR ecx, 0Bh
    SUB ecx, eax
    MOV dword ptr [rsp+0C8h+var_A8+4], ecx
    IMUL ecx, 0FFFFF1F0h
    SUBSD xmm1, xmm2
    ADD ecx, esi
    MOV eax, ecx
    IMUL edx
    MOV eax, ecx
    SAR eax, 1Fh
    ADD edx, ecx
    SAR edx, 5
    SUB edx, eax
    MOV dword ptr [rsp+0C8h+var_A0], edx
    IMUL edx, -3Ch
    ADD ecx, edx
    CVTSI2SD xmm0, ecx
    ADDSD xmm0, xmm1
    MOVSD [rsp+0C8h+var_98], xmm0
    JMP loc_43D905
loc_43DAF0:
    MOV edi, 2
    CALL cs:qword_6E3AD8
    TEST rax, rax
    MOV rbx, rax
    JZ loc_43DB4F
loc_43DB03:
    MOV rdi, rax
    CALL cs:qword_6E3AE8
    LEA rdi, [rsp+0C8h+timer]
    CALL _localtime
    MOV ecx, cs:dword_6E3C08
    TEST ecx, ecx
    JZ loc_43DB70
loc_43DB20:
    MOV rdi, rbx
    CALL cs:qword_6E3AF8
    JMP loc_43D9BD
loc_43DB30:
    LEA rdi, [rsp+0C8h+var_B8]
    CALL sub_41B040
    JMP loc_43D8FA
loc_43DB40:
    LEA rdi, [rsp+0C8h+var_B8]
    CALL sub_41AEA0
    JMP loc_43DA3B
loc_43DB4F:
    LEA rdi, [rsp+0C8h+timer]
    CALL _localtime
    CMP cs:dword_6E3C08, 0
    JNZ loc_43D9BD
loc_43DB66:
    NOP word ptr [rax+rax+00000000h]
loc_43DB70:
    TEST rax, rax
    JZ loc_43DC5E
loc_43DB79:
    MOV rdx, [rax]
    TEST rbx, rbx
    MOV [rsp+0C8h+var_58], rdx
    MOV rdx, [rax+8]
    MOV [rsp+0C8h+var_50], rdx
    MOV rdx, [rax+10h]
    MOV [rsp+0C8h+var_48], rdx
    MOV rdx, [rax+18h]
    MOV [rsp+0C8h+var_40], rdx
    MOV rdx, [rax+20h]
    MOV [rsp+0C8h+var_38], rdx
    MOV rdx, [rax+28h]
    MOV rax, [rax+30h]
    MOV [rsp+0C8h+var_30], rdx
    MOV [rsp+0C8h+var_28], rax
    JZ loc_43DBD4
loc_43DBCB:
    MOV rdi, rbx
    CALL cs:qword_6E3AF8
loc_43DBD4:
    MOV eax, dword ptr [rsp+0C8h+var_48+4]
    PXOR xmm0, xmm0
    LEA rdi, [rsp+0C8h+var_88]
    MOV [rsp+0C8h+var_5E], 1
    MOV [rsp+0C8h+var_5D], 1
    MOV [rsp+0C8h+var_60], 0
    MOV [rsp+0C8h+var_5F], 0
    ADD eax, 76Ch
    CVTSI2SD xmm0, dword ptr [rsp+0C8h+var_58]
    MOV [rsp+0C8h+var_5C], 0
    MOV [rsp+0C8h+var_80], eax
    MOV eax, dword ptr [rsp+0C8h+var_48]
    MOVSD [rsp+0C8h+var_68], xmm0
    MOV [rsp+0C8h+var_5A], 0
    ADD eax, 1
    MOV [rsp+0C8h+var_7C], eax
    MOV eax, dword ptr [rsp+0C8h+var_50+4]
    MOV [rsp+0C8h+var_78], eax
    MOV eax, dword ptr [rsp+0C8h+var_50]
    MOV [rsp+0C8h+var_74], eax
    MOV eax, dword ptr [rsp+0C8h+var_58+4]
    MOV [rsp+0C8h+var_70], eax
    CALL sub_41AEA0
    MOV rax, [rsp+0C8h+var_88]
    MOV dword ptr [r12], 0
    SUB rax, [rsp+0C8h+var_B8]
    JMP loc_43D9EA
loc_43DC59:
    CALL ___stack_chk_fail
loc_43DC5E:
    TEST rbx, rbx
    JNZ loc_43DB20
loc_43DC67:
    JMP loc_43D9BD
loc_43DC6C:
    MOV ecx, 0Eh
    MOV rdi, rbx
    MOV rsi, rax
    REP 
    JMP loc_43DBD4
```
Output:MOVSD [rsp+0C8h+var_70], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_78], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_80], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_88], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_90], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_98], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_A0], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_A8], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_B0], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_B8], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_C0], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_C8], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_D0], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_D8], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_E0], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_E8], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_F0], [rsp+0C8h+var_88]
    MOVSD [rsp+0C8h+var_F8], [rsp+0C8h+var_88]
    MOV
############
```assembly
loc_401F70:
    JMP cs:off_6E1220
```
Output:```json
{
  "input_parameter_count": 0,
  "input_parameter_types": [],
  "return_value_type": "None",
  "dominant_operation_categories": [
    "Jump"
  ],
  "loop_indicators": false,
  "number_of_distinct_subroutine_call_targets": 0,
  "use_of_indexed_addressing_modes": false,
  "jump_table_indicators": true,
  "presence_of_simd_instructions": false,
  "presence_of_notable_integer_constants": [
    "0x6E1220"
  ],
  "presence_of_notable_floating_point_constants": [],
  "count_of_distinct_immediate_values": 1,
  "string_literal_presence": false,
  "likely_modifies_input_parameters": false,
  "likely_modifies_global_state": false,
  "likely_performs_memory_allocation_deallocation": false,
  "likely_performs_io_operations": false,
  "likely_performs_block_memory_operations": false,
  "likely_performs_linear_memory_accesses": false,
  "likely_performs_error_handling": false,
  "number_of_software_interrupts_system_calls": 0,
  "inferred_algorithm": "Undetermined",
  "inferred_category": "ControlFlow"
}
```
